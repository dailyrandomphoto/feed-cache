<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to save data in localStorage using JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 24 Aug 2021 00:36:42 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</link>
      <guid>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</guid>
      <description>&lt;p&gt;In this tutorial you’ll learn how to use &lt;code&gt;localStorage&lt;/code&gt; a property of the window interface that allows you to access a storage object from the browser. To give you an understanding of how &lt;code&gt;localStorage&lt;/code&gt; works we’ll be building a simple note taking application that will save and delete data in the &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started by creating a form to add new notes and an unordered list to display the saved notes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"+ Add Note"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the JavaScript functionality, first we’ll declare variables for the HTML elements we’ll be working with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also save any existing notes to a &lt;code&gt;noteStorage&lt;/code&gt; variable to make them easier to work with. If there isn’t any notes in the &lt;code&gt;localStorage&lt;/code&gt; yet we’ll just an empty array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notesStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we’ll add the functionality to save a new note when the form is submitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;noteForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pushes the new note into into the &lt;code&gt;notesStorage&lt;/code&gt; then updates the &lt;code&gt;notes&lt;/code&gt; in the &lt;code&gt;localStorage&lt;/code&gt;. We then call a &lt;code&gt;listBuilder&lt;/code&gt; function which adds the note to the unordered list element in our HTML markup, here’s the code for that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &amp;lt;button onclick="deleteNote(this)"&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The notes are now being saving in localStorage and displayed in the HTML. However if the page is refreshed the notes would no longer display in the HTML so we need to loop through each of the notes in &lt;code&gt;localStorage&lt;/code&gt; when the page is loaded and re-render them in the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;getNotes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is add the functionality for the delete button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gets the index of the list item to delete and removes it from both the HTML and &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. Hopefully it’s given you an understanding of how to work with data in the &lt;code&gt;localStorage&lt;/code&gt;. A full working example of the code used in this tutorial is available to download from &lt;a href="https://gist.github.com/w3collective/9e6a99f4d828734676a12b2db2ff61e5"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create a Fastify server</title>
      <author>Thomas Bnt</author>
      <pubDate>Mon, 23 Aug 2021 23:51:00 +0000</pubDate>
      <link>https://dev.to/thomasbnt/create-a-fastify-server-23lg</link>
      <guid>https://dev.to/thomasbnt/create-a-fastify-server-23lg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; is a &lt;strong&gt;web server framework&lt;/strong&gt; like ExpressJS but with &lt;em&gt;better performances&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/benchmarks/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qB8EKpsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh58y5oa54arc78g0ok4.png" alt="Benchmark on the website Fastify.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ecosystem is pretty cool, he &lt;a href="https://www.fastify.io/ecosystem/"&gt;adds multiple plugins&lt;/a&gt;. But in this first test, I only add &lt;strong&gt;fastify-static&lt;/strong&gt; for getting .html files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code-"&gt;
  &lt;/a&gt;
  Let's code !
&lt;/h2&gt;

&lt;p&gt;At the first time, create a void folder and install Fastify and fastify-static.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i fastify fastify-static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an &lt;strong&gt;app.js&lt;/strong&gt;, it's your root file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-the-appjs"&gt;
  &lt;/a&gt;
  Into the app.js
&lt;/h2&gt;

&lt;p&gt;You can write the basis of this file for creating a new Fastify server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// In this example, when you get localhost:3000, ou have the time&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;about.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#public-html-pages"&gt;
  &lt;/a&gt;
  Public HTML pages
&lt;/h2&gt;

&lt;p&gt;Create a &lt;strong&gt;/public&lt;/strong&gt; folder and a &lt;strong&gt;about.html&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" alt="Create your public folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;It's a very short post, but I demonstrate how to simply start a server with &lt;strong&gt;Fastify&lt;/strong&gt;. As this is the first time I use it, there might be some errors. Don't hesitate to give me feedback in the comments ! 👍🏼&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/docs/latest/Getting-Started/"&gt;Getting Started with Fastify&lt;/a&gt;&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;☕&lt;/th&gt;
&lt;th&gt;Check my &lt;a href="https://twitter.com/thomasbnt_"&gt;Twitter account&lt;/a&gt;. You can see many projects and updates. You can also &lt;a href="https://www.buymeacoffee.com/thomasbnt/?via=thomasbnt"&gt;support me on Buy Me a Coffee&lt;/a&gt;.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>fastify</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: #50</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 23 Aug 2021 22:42:48 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I think Eclipse IDE is in trouble, my app store adventures, Git 2.33, Spring Boot 2.5.4 &amp;amp; 2.4.10, Micronaut 3.0, Quarkus 2.1.3, Payara CE 5.2021.6 &amp;amp; EE 5.30.0, and Spring Tools 4.11.1&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;Welcome to my weekly newsletter "How To Build Java Applications Today"! I read all the Java newsletters so &lt;strong&gt;you&lt;/strong&gt; don't have to! And it's "Java news with a smile".&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;‌A man's silence is wonderful to listen to.&lt;/em&gt;&lt;br&gt;
Amazingly, &lt;a href="http://www.quotationspage.com/quote/32998.html"&gt;Thomas Hardy&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Thomas_Hardy"&gt;British writer&lt;/a&gt;, described a silence &lt;strong&gt;before&lt;/strong&gt; everybody stared at their phones.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;Last week I submitted the apps from my start-up for app store review. How did it go? Read on below! &lt;/p&gt;

&lt;p&gt;My wife &amp;amp; I also booked a vacation week in the sun (i.e., outside England) for September. Let's hope that we can actually go! But fear not - I'll publish my little newsletter during our vacation, too!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#advertisement"&gt;
  &lt;/a&gt;
  ADVERTISEMENT
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#22-years-of-fullstack-java-for-hire-next-january"&gt;
  &lt;/a&gt;
  22 YEARS OF FULL-STACK JAVA FOR HIRE NEXT JANUARY
&lt;/h3&gt;

&lt;p&gt;I’m a full-stack Java developer with 22 years of experience, looking for a project in January 2022, in Milton Keynes, London, or remote. I’ll work as a contractor or fixed-term employee but don’t take permanent positions. &lt;/p&gt;

&lt;p&gt;Interested? Then check out my resume &amp;amp; work samples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksilz.com/"&gt;Check out my resume &amp;amp; work samples &lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i-think-eclipse-ide-is-in-trouble"&gt;
  &lt;/a&gt;
  I think Eclipse IDE is in Trouble
&lt;/h4&gt;

&lt;p&gt;Why do I think that the Eclipse IDE is in trouble? Because they &lt;strong&gt;changed&lt;/strong&gt;. Most organizations don‘t like change, especially the "70 projects under one roof" ones like Eclipse IDE. So they only change when they are in a crisis. So what‘s the crisis, and what‘s the change?&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;crisis&lt;/strong&gt; is competition from Microsoft‘s free cross-platform and cross-language IDE Visual Studio Code (VS Code). And the &lt;strong&gt;change&lt;/strong&gt; is the establishment of a &lt;a href="https://www.eclipse.org/org/workinggroups/eclipse-ide-charter.php"&gt;Working Group (WG)&lt;/a&gt; "to ensure the continued sustainability, integrity, evolution and adoption of the Eclipse IDE'. The &lt;a href="https://newsroom.eclipse.org/news/announcements/open-source-leader-eclipse-foundation-launches-eclipse-ide-working-group"&gt;press release&lt;/a&gt; quotes a founding WG member: "We believe the IDE needs to be more relevant and attractive for end users, committers, tool developers, and those who build applications upon it."&lt;/p&gt;

&lt;p&gt;Look, I‘m rooting for Eclipse IDE here. I used it daily for about fifteen years, starting way back in 2001 when Eclipse won a shoot-out against Netbeans in our team. But I switched to the paid IntelliJ version a couple of years ago because it was a better Java IDE for me, and it had better web development support.&lt;/p&gt;

&lt;p&gt;Now I already wrote about the Eclipse IDE Working Group in &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt;. But the research for &lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;my InfoQ article&lt;/a&gt; made it look worse:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparing the 2021-06 release with the 2020-06 one shows a marked decline in the sub-project activity: "The overall number of sub-projects shrank by 7%, the sub-projects with a release decreased from 63% to 47%, and the sub-projects with a release one year or older nearly tripled from 8% to 22%." Now we don't know how much the COVID pandemic contributed here. But VS Code grew a lot in the timeframe (see below).&lt;/li&gt;
&lt;li&gt;Frequent readers know that I &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;complain about the Eclipse IDE „What‘s New" page&lt;/a&gt; loudly. But rightfully so: It‘s a mess, and it's worse than I thought. The &lt;a href="https://www.eclipse.org/eclipseide/2021-06/noteworthy/"&gt;2021-06 version&lt;/a&gt; touts 70 projects but only &lt;a href="https://projects.eclipse.org/releases/2021-06"&gt;lists 68&lt;/a&gt;. Only 14 out of 32 projects with a new release are included, but also 10 that didn't have a release. And the links we do get? Here's what I said before: "Some look like &lt;a href="https://www.eclipse.org/graphiti/pages/whats-new-0.18.html"&gt;it's 1995&lt;/a&gt;, some &lt;a href="https://www.eclemma.org/changes.html"&gt;lost the links altogether&lt;/a&gt;, some don't know that &lt;a href="https://bugs.eclipse.org/bugs/buglist.cgi?list_id=20343413&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.26.0"&gt;strike-through text is hard to read&lt;/a&gt;, some look &lt;a href="https://wiki.eclipse.org/CDT/User/NewIn103"&gt;Eclipse-like&lt;/a&gt;, and &lt;a href="https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2021/03/02/version-2-25-0"&gt;some don't&lt;/a&gt;." There are dozens, maybe hundreds of developers working on a release - and then the first impression gets ruined so radically &amp;amp; ruefully. 😞&lt;/li&gt;
&lt;li&gt;Stack Overflow asked 83,500 developers &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-collaboration-tools"&gt;about collaboration tools&lt;/a&gt;: 69% of 12,955 respondents dread using Eclipse IDE; only NetBeans scored worse. Now 79% of 58,026 developers love VS Code - strong numbers, both absolute and relative.&lt;/li&gt;
&lt;li&gt;VS Code &lt;a href="https://www.infoq.com/news/2021/07/visual-studio-code-java-ide/"&gt;boosted&lt;/a&gt; its Java capabilities earlier this year and plans to do more, including Gradle support (see the &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last issue&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;According to recent Snyk and JRebel surveys, about a quarter of all Java developers already use VS Code, growing rapidly year-over-year (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt; and &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-4b3"&gt;issue #27&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;From what I can see, VS Code is rapidly becoming one thing we never had - the default IDE for all developers. Microsoft claimed 14 million users half a year ago, up 5 million in 2020. And now that flywheel is in motion and hard to stop because every technology/tool vendor will ensure that they have a VS Code plugin. That makes VS Code more useful which attracts more users, and so on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I think (hope!) that Eclipse is still a better Java IDE than VS Code. A cross-language IDE like VS Code will probably be worse than specialized IDEs - at least initially. But VS Code doesn't &lt;strong&gt;have&lt;/strong&gt; to be better: As a free product, we can always use it in &lt;strong&gt;addition&lt;/strong&gt; to our specialized IDEs. That's how it snuck into my life: As a &lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; replacement for building static websites. And once we're getting used to using VS Code, we're asking ourselves: "Well, why can't I use that for Java, too? Let me try…"&lt;/p&gt;

&lt;p&gt;A product that's dreaded by users, a decline in sub-projects, a rapidly growing competitor that's becoming the industry standard - I don't envy the Eclipse IDE WG. But change takes time, so we shouldn't expect big changes this year. What will they do? What &lt;strong&gt;can&lt;/strong&gt; they do? I'll keep you posted!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;My InfoQ article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#over-the-fence"&gt;
  &lt;/a&gt;
  Over the Fence
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#my-app-store-adventures"&gt;
  &lt;/a&gt;
  My App Store Adventures
&lt;/h4&gt;

&lt;p&gt;I'm the technical co-founder of a &lt;a href="https://yourhomeingoodhands.co.uk"&gt;UK start-up&lt;/a&gt;. We offer an app to organize a cat-sitter business. It's actually two apps: A web app to manage customers, bookings, and visits. And iOS/Android apps to do the visits. Our apps aren't fully open for business yet, but we still wanted to be in the app stores.&lt;/p&gt;

&lt;p&gt;I've never put an app into an app store before. So I was a bit nervous before I submitted our app for review last week. I mean the news is full of app store review horror stories, mostly about Apple: Vague &amp;amp; nit-picky rules, inconsistent rule application, delays of weeks or months, rejections that crush businesses.&lt;/p&gt;

&lt;p&gt;We tested the apps lot. We also created test accounts for the app reviewers with fake customer data and detailed instructions for the web application. And all that was on top of the usual app launch tasks - screenshots in various sizes, app description, privacy statements, etc.&lt;/p&gt;

&lt;p&gt;So, how did it go?&lt;/p&gt;

&lt;p&gt;Splendidly, I'm relieved to say. Our iOS app was approved within &lt;strong&gt;12 hours&lt;/strong&gt;, the Android one in &lt;strong&gt;4.5 days&lt;/strong&gt; (which included a weekend). Neither submission needed a single change to our app!&lt;/p&gt;

&lt;p&gt;I can only guess why it went so smoothly. First of all, I think we were just lucky. Maybe our cat Max charmed the socks off of our reviewers - we used him as the &lt;a href="https://yourhomeingoodhands.co.uk/images/screenshots/ios/add%20note%20notch%20filled.png"&gt;example for adding notes&lt;/a&gt;. Perhaps a business-to-business app like ours attracts less scrutiny than consumer offerings. Or it's the summer. I'm sure I'll suffer from "review rage" in the future, but for now, I'm a happy camper!&lt;/p&gt;

&lt;p&gt;I was surprised by some faulty app store details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our app is only in Apple's UK iOS App Store. Now my Apple user account is tied to a different App Store country. And on iOS, opening the link to our UK App Store page tells me as much. On the Mac, the link just shows a blank page, as if the link was broken.&lt;/li&gt;
&lt;li&gt;The Google Play Store dashboard gave us a Play Story link &lt;strong&gt;immediately&lt;/strong&gt; once the review process started. The problem: The link didn't work at all &lt;strong&gt;until&lt;/strong&gt; the app was in the Play Store - it was broken for 4.5 days! At least Apple was so clever to only show the link &lt;strong&gt;after&lt;/strong&gt; the app was approved. And it still took about 30 minutes before that link worked!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://yourhomeingoodhands.co.uk"&gt;My start-up website&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#git-233"&gt;
  &lt;/a&gt;
  Git 2.33
&lt;/h4&gt;

&lt;p&gt;Git releases typically have few changes that affect our daily coding lives. Version 2.33 is no different. It's actually version*&lt;em&gt;s&lt;/em&gt;* 2.33 and 2.32 because the latter never received a proper highlight reel. &lt;/p&gt;

&lt;p&gt;Two things caught my attention: A new merge algorithm called &lt;code&gt;merge-ort&lt;/code&gt; "is likely to become the default strategy in a future version of Git". It's faster and supposedly less buggy. Now being the only developer in my current projects, merge conflicts rarely raise their ugly heads. 😏&lt;/p&gt;

&lt;p&gt;The other thing is a speed-up of checkouts through parallelization. You can configure the number of threads to use, set to "auto" here: &lt;code&gt;git config --global checkout.workers 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-08-16-highlights-from-git-2-33/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-boot-254-amp-2410"&gt;
  &lt;/a&gt;
  Spring Boot 2.5.4 &amp;amp; 2.4.10
&lt;/h4&gt;

&lt;p&gt;The Spring Boot releases that were foreshadowed by &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's&lt;/a&gt; Spring Data releases are here. They have &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.5.4"&gt;35 changes (2.5.4)&lt;/a&gt; and &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;29 (2.4.10)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-5-4-available-now"&gt;Announcement 2.5.4&lt;/a&gt;, &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;announcement 2.4.10&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#micronaut-30"&gt;
  &lt;/a&gt;
  Micronaut 3.0
&lt;/h4&gt;

&lt;p&gt;Quarkus isn't the only new Java framework nipping at the heels of Spring Boot - Micronaut is another one. And it just released version 3.0. The biggest change is that Project Reactor is the new reactive framework instead of RxJava2. Or, as Oracle would say: "You swapped out the thing that will be killed by Project Loom!" (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's issue&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;What else? Annotations aren't automatically inherited anymore, a migration away from Oracle's &lt;code&gt;javax.annoatation&lt;/code&gt; namespace, and improvements in Inversion of Control (IOC), server filters, and GraalVM support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://micronaut.io/2021/08/18/micronaut-framework-3-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#quarkus-213"&gt;
  &lt;/a&gt;
  Quarkus 2.1.3
&lt;/h4&gt;

&lt;p&gt;Everybody's favorite "supersonic" Java framework has the fourth release in as many weeks. We're getting &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.1.3.Final"&gt;41 changes&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-1-3-final-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#payara-ce-520216-amp-ee-5300"&gt;
  &lt;/a&gt;
  Payara CE 5.2021.6 &amp;amp; EE 5.30.0
&lt;/h4&gt;

&lt;p&gt;Payara started as the commercially supported version of Oracle's GlassFish Java EE application server back in 2014. These days, it's a Jakarta EE &amp;amp; MicroProfile application server.&lt;/p&gt;

&lt;p&gt;The monthly release brought &lt;a href="https://docs.payara.fish/community/docs/release-notes/release-notes-2021-6.html"&gt;13 changes&lt;/a&gt; to the open-source Community Edition (CE) and &lt;a href="https://docs.payara.fish/enterprise/docs/release-notes/release-notes-30-0.html"&gt;16 changes&lt;/a&gt; to the Enterprise Edition (EE). Both versions are now compatible with MicroProfile 4.1 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-3b0"&gt;issue #48&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.payara.fish/whats-new-in-the-august-2021-payara-platform-release"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-tools-4111"&gt;
  &lt;/a&gt;
  Spring Tools 4.11.1
&lt;/h4&gt;

&lt;p&gt;The first maintenance release drops eight weeks after version 4.11 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;issue #42&lt;/a&gt;) and fixes bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/18/spring-tools-4-11-1-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and marathon runner. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has &lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a &lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a &lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on &lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
    <item>
      <title>Create an Animated SVG Favicon With CSS</title>
      <author>Nathan</author>
      <pubDate>Mon, 23 Aug 2021 22:00:01 +0000</pubDate>
      <link>https://dev.to/natclark/create-an-animated-svg-favicon-with-css-320p</link>
      <guid>https://dev.to/natclark/create-an-animated-svg-favicon-with-css-320p</guid>
      <description>&lt;p&gt;As of writing this, most major browsers support &lt;a href="https://caniuse.com/?search=favicon%20svg"&gt;SVG favicons&lt;/a&gt; (with the exception of Safari).&lt;/p&gt;

&lt;p&gt;In SVG files, we can add custom inline CSS. And in CSS, we can animate just about anything.&lt;/p&gt;

&lt;p&gt;So, let's animate a favicon!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-simple-svg-favicon"&gt;
  &lt;/a&gt;
  Setting up a simple SVG favicon
&lt;/h2&gt;

&lt;p&gt;First, let's create a simple 32x32 SVG with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle"&gt;circle&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- We will write some styles here! --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#60f"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's save this masterpiece to a file called &lt;code&gt;favicon.svg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While we can view this file directly, it is more realistic to test it out on a real browser tab.&lt;/p&gt;

&lt;p&gt;To accomplish this, just link to it from the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of a web page, making sure to replace any existing favicon tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"32x32"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If necessary, remember to replace "&lt;code&gt;favicon.svg&lt;/code&gt;" with the path to your favicon file!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-zoom-animation"&gt;
  &lt;/a&gt;
  Adding a zoom animation
&lt;/h2&gt;

&lt;p&gt;It's now time to start animating our favicon.&lt;/p&gt;

&lt;p&gt;First, let's add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag to our SVG file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;/* We will write some styles here! */&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#60f"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, let's write a simple &lt;a href="https://www.w3docs.com/learn-css/keyframes.html"&gt;keyframe animation&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a mesmerizing "zooming" effect.&lt;/p&gt;

&lt;p&gt;Let's apply it to our &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-spooky-animation"&gt;
  &lt;/a&gt;
  Adding a spooky animation
&lt;/h2&gt;

&lt;p&gt;Here is one more example animation that creates a "ghost" effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's really no limits to what kind of animation you can add to your favicon, so get creative with it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-accessibility"&gt;
  &lt;/a&gt;
  Improving accessibility
&lt;/h2&gt;

&lt;p&gt;Not everyone likes animations, and it might make some people sick.&lt;/p&gt;

&lt;p&gt;So, for users with browsers configured to request reduced motion, we can disable our animation by tacking this handy snippet on to the end of our SVG's &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There's definitely some pros and cons to using animated favicons.&lt;/p&gt;

&lt;p&gt;Animated favicons are very unique and can leave visitors with a lasting impression of your site.&lt;/p&gt;

&lt;p&gt;But it remains uncertain whether they will gain (or retain) full browser support, and they can easily be an accessibility concern.&lt;/p&gt;

&lt;p&gt;Anyway, I hope you enjoyed creating an animated favicon!&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mas e os loops em Elixir?</title>
      <author>Willian Frantz</author>
      <pubDate>Mon, 23 Aug 2021 21:54:27 +0000</pubDate>
      <link>https://dev.to/wlsf/mas-e-os-loops-em-elixir-3d0k</link>
      <guid>https://dev.to/wlsf/mas-e-os-loops-em-elixir-3d0k</guid>
      <description>&lt;p&gt;Se você está vindo de uma linguagem de paradigma imperativo, orientada a objetos, muito provavelmente você vai esbarrar nessa pergunta do título.&lt;/p&gt;

&lt;p&gt;Pois bem, &lt;strong&gt;Elixir&lt;/strong&gt; não possui esse termo em seu vocabulário. Apesar de ser possível iterar sobre uma lista de elementos utilizando o &lt;code&gt;for&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso não significa que o &lt;strong&gt;Elixir&lt;/strong&gt; possui &lt;em&gt;loops&lt;/em&gt;, esse &lt;code&gt;for&lt;/code&gt; nada mais é do que uma chamada nativa ao &lt;em&gt;List Comprehensions&lt;/em&gt; do &lt;strong&gt;&lt;a href="https://erlang.org/doc/programming_examples/list_comprehensions.html"&gt;Erlang&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Curioso né? Como fazer para lidar com uma coleção de itens então? &lt;/p&gt;

&lt;p&gt;Há 2 maneiras de trabalhar com este tipo de problema, sendo elas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;High Order Functions (map, reduce, filter, find, etc...)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recursividade&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#high-order-functions"&gt;
  &lt;/a&gt;
  High Order Functions
&lt;/h2&gt;

&lt;p&gt;É muito comum se deparar com uma situação onde você tem uma lista de elementos e precisa manipular os dados dela.&lt;/p&gt;

&lt;p&gt;E para isso podemos utilizar funções como &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;reduce&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Digamos que você precise multiplicar todos os elementos da sua lista por 2, isso deveria ser um problema trivial, certo?&lt;/p&gt;

&lt;p&gt;A implementação desse problema em &lt;em&gt;js&lt;/em&gt; utilizando uma estrutura de repetição &lt;em&gt;(loop)&lt;/em&gt; seria mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em Elixir é possível resolver isso com &lt;code&gt;map/2&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparando os exemplos acima, diferente da estrutura de repetição, com o &lt;code&gt;map/2&lt;/code&gt; não é necessário definir nada além da fórmula para mapear os dados da minha lista, onde a fórmula é &lt;code&gt;x -&amp;gt; x * 2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;O próprio &lt;code&gt;map/2&lt;/code&gt; faz o resto do trabalho aplicando a fórmula pra cada elemento da nossa lista, e gerando uma nova lista ao final da execução.&lt;/p&gt;

&lt;p&gt;Segue o mesmo conceito para as demais funções, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;map/2&lt;/code&gt; manipula os elementos e gera uma nova lista&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;filter/2&lt;/code&gt; filtra os elementos e gera uma nova lista&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce/2&lt;/code&gt; manipula os elementos acumulando seus resultados anteriores&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existem diversos tipos de &lt;em&gt;&lt;a href="https://elixirschool.com/en/lessons/basics/enum/"&gt;High Order Functions&lt;/a&gt;&lt;/em&gt; disponíveis no Elixir, feitas para facilitar a sua vida na hora de resolver problemas sejam eles triviais ou não.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursividade"&gt;
  &lt;/a&gt;
  Recursividade
&lt;/h2&gt;

&lt;p&gt;Mesmo que você seja uma pessoa de linguagens imperativas, o termo recursividade ainda é algo familiar!&lt;/p&gt;

&lt;p&gt;E o que é recursividade? É uma forma de iterar sob listas (ou não), onde a função chama ela própria até atingir uma condição de parada.&lt;/p&gt;

&lt;p&gt;Um exemplo muito conhecido sobre recursividade, é o cálculo fatorial de um número, onde &lt;code&gt;4! = 4 x 3 x 2 x 1 = 24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Destrinchando esse cálculo, teríamos algo semelhante a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4! = 3! * 4
   = 2! * 3
   = 1! * 2
   = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considerando o exemplo acima, a condição de parada para essa execução é o valor 1. Quando a função fatorial receber como argumento o valor 1, ela deverá retornar 1 e as outras execuções devem se basear neste valor, exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4! = (6) * 4 = 24
   = (2) * 3
   = (1) * 2
   = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Em parênteses&lt;/strong&gt;: resultado da chamada fatorial anterior.&lt;/p&gt;

&lt;p&gt;A implementação em &lt;strong&gt;JS&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa mesma função em &lt;strong&gt;Elixir&lt;/strong&gt; fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nota-se que na chamada recursiva, a função &lt;code&gt;fact/1&lt;/code&gt; chama a si mesma passando o &lt;code&gt;argumento - 1&lt;/code&gt;, e quando essa função é chamada com o valor 1, ela retorna somente o valor 1 e encerra sua execução em cadeia.&lt;/p&gt;

&lt;p&gt;Vamos analisar mais de perto essa chamada do &lt;code&gt;fact/1&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Considere que estamos chamando fatorial com o argumento 4 (4!)&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# Esse será o retorno&lt;/span&gt;
&lt;span class="c1"&gt;# Ele estará chamando fact(3) e multiplicando por 4.&lt;/span&gt;
&lt;span class="c1"&gt;# E assim sucessivamente...&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Essa abordagem gera uma cadeia de chamadas que precisam ser resolvidas.&lt;/span&gt;
&lt;span class="c1"&gt;# Quando a chamada em cadeia chega na nossa condição de parada (1)&lt;/span&gt;
&lt;span class="c1"&gt;# O processador começa a desencadear essas chamadas que empilhamos.&lt;/span&gt;
&lt;span class="c1"&gt;# Seguindo assim:&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implementar uma função &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Factorial"&gt;fatorial&lt;/a&gt;&lt;/em&gt; utilizando recursividade é bem simples, né? Mas se formos considerar a explicação que acabamos de ver, isso pode se tornar um problema?&lt;/p&gt;

&lt;p&gt;Imagine que temos uma função que precisará iterar milhares de vezes para resolver um determinado problema, precisaremos empilhar várias chamadas não-resolvidas na nossa pilha de chamadas, e isso poderá estourar o limite da pilha.&lt;/p&gt;

&lt;p&gt;Para esse problema em específico, há uma solução chamada &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Tail_call"&gt;Tail Call Optimization&lt;/a&gt;&lt;/strong&gt; (ou TCO). Com  &lt;strong&gt;TCO&lt;/strong&gt; é possível eliminar essas chamadas não-resolvidas que uma função recursiva costuma criar.&lt;/p&gt;

&lt;p&gt;O pulo do gato quando aplicamos &lt;em&gt;Tail Call Optimization&lt;/em&gt; em uma função recursiva é que essa função saiba o valor processado em todas as suas chamadas, sendo assim, ela não depende do desencadeamento para encontrar o valor final de sua execução.&lt;/p&gt;

&lt;p&gt;E como podemos fazer isso? Segue o exemplo de uma chamada sem TCO:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# nossa condição de parada&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# função fatorial recursiva&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;com TCO:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# nossa condição de parada&lt;/span&gt;
&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="c1"&gt;# função fatorial recursiva&lt;/span&gt;
&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A grande diferença, é que na função fatorial com TCO, ela sabe exatamente o valor da sua execução.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fact(4) -&amp;gt; fact(4 - 1, 4)
fact(3, 4) -&amp;gt; fact(3 - 1, (4 * 3)) -&amp;gt; fact(2, 12)
fact(2, 12) -&amp;gt; fact(2 - 1, (12 * 2)) -&amp;gt; fact(1, 24)
fact(1, 24) -&amp;gt; 24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Portanto, quando a nossa função chega na sua condição de parada, não é necessário desencadear todas as chamadas anteriores e seus respectivos cálculos. Ela só precisa retornar seu valor final (24) para a função que originou a sua chamada &lt;code&gt;fact(4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fato curioso:&lt;/strong&gt; Por padrão, &lt;strong&gt;Elixir/Erlang&lt;/strong&gt; implementam &lt;em&gt;Tail Call Optimization&lt;/em&gt;, por isso a utilização de recursividade é algo muito comum e encorajada! Inclusive as &lt;em&gt;High Order Functions&lt;/em&gt; são implementadas através de recursividade, no final das contas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Elixir é amor, Erlang é vida.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urp37THI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif%3Fcid%3Decf05e47ku92k1x33lofok9qn7hwhy8jtxr7f8b8a3e7evnz%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urp37THI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif%3Fcid%3Decf05e47ku92k1x33lofok9qn7hwhy8jtxr7f8b8a3e7evnz%26rid%3Dgiphy.gif%26ct%3Dg" alt="thats all"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
    </item>
    <item>
      <title>Spotify Front</title>
      <author>Osama</author>
      <pubDate>Mon, 23 Aug 2021 21:35:59 +0000</pubDate>
      <link>https://dev.to/bluec4p/spotify-front-247e</link>
      <guid>https://dev.to/bluec4p/spotify-front-247e</guid>
      <description>&lt;p&gt;Buenas !&lt;/p&gt;

&lt;p&gt;Llevo un par de semanas pensando en hacerme mi propio portafolio con ideas personales sin seguir ningún tutorial, y así fue cómo nació el primer proyecto que voy a agregar a mi portafolio.&lt;/p&gt;

&lt;p&gt;Spotify Front es un intento de replicar una vista aleatoria de la aplicación de spotify en el navegador.&lt;/p&gt;

&lt;p&gt;La vista a replicar es la siguiente: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ohP1ZCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf1gyjxsmk6pu1237des.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ohP1ZCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf1gyjxsmk6pu1237des.png" alt="Official-Spotify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sncB7qNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az3xn4maqun309god4i7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sncB7qNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az3xn4maqun309god4i7.png" alt="Spotify-Front"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El proyecto estaba enfocado en poner a prueba mis habilidades en maquetación sin usar ningún tipo de librería ni framework. También se dejó de lado el tema de las animaciones y los hovers, ya que el propósito de este proyecto era aprender/mejorar el manejo de distintas propiedades en CSS y realizar un buen nombramiento de clases para que se entienda mas o menos la estructura del proyecto.&lt;/p&gt;

&lt;p&gt;Les dejo el enlace por aquí por si quieren visitar el repositorio en donde lo tengo todo guardado y commiteado por si me quieren dar cualquier tipo de feedback: &lt;a href="https://github.com/blueC4P/spotify-front"&gt;https://github.com/blueC4P/spotify-front&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saludos ! ✌&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Introdução aos Hooks no React</title>
      <author>Amanda Silva</author>
      <pubDate>Mon, 23 Aug 2021 21:12:10 +0000</pubDate>
      <link>https://dev.to/mandypry/introducao-aos-hooks-no-react-1oon</link>
      <guid>https://dev.to/mandypry/introducao-aos-hooks-no-react-1oon</guid>
      <description>&lt;p&gt;Olha quem voltou, tá passadah? É ela, a Amanda blogueirinha atacando novamente....&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUk0HPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/dmpN9UYPvbvVvDpPz5/giphy.gif%3Fcid%3Decf05e47z61s7mm95olvwk0cumt81vjqumv49miy6w9qmqvu%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUk0HPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/dmpN9UYPvbvVvDpPz5/giphy.gif%3Fcid%3Decf05e47z61s7mm95olvwk0cumt81vjqumv49miy6w9qmqvu%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Já tem um tempo que tenho estudado sobre React e estou curtindo bastante a curva de aprendizado. Depois de quebrar bastante a cabeça para entender, vim compartilhar com vocês sobre os Hooks, o que são, onde habitam e do que se alimentam.&lt;/p&gt;

&lt;p&gt;Normalmente quando renderizamos componentes em React, podemos salvar o estado dos mesmos, mas quando se trata de componentes funcionais, podemos usar o State.&lt;br&gt;
Uma maneira que podemos usar o estado(State) e gerenciar esse estado pelo React dentro de funções são com os Hooks, que trata-se de uma biblioteca do React.     &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvZjaBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/689saztq6cgus1mpxm6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvZjaBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/689saztq6cgus1mpxm6a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Um Hook que podemos usar é o UseState. Ao utilizarmos o hook de useState, indicamos para o React que aquele componente precisa guardar um estado. Para isso são devolvidas duas informações: a primeira é a referência para o valor do estado atual e a segunda é a função que altera esse estado. Essa separação precisa ser feita, para que o React consiga fazer o gerenciamento do componente e chamar o ciclo de renderização quando o estado for alterado.&lt;br&gt;
Regras dos Hooks&lt;/p&gt;

&lt;p&gt;Como sabemos, funções não deveriam guardar estados, então podemos usar os Hooks para guardar esses estados dentro de funções com as devidas regras.&lt;br&gt;
Ao utilizar os Hooks, evitamos a reutilização de lógica de estado entre componentes diferentes e confusão de classes.&lt;br&gt;
Os hooks devem sempre ser chamados no primeiro nível da função que está sendo utilizado.&lt;br&gt;
Devemos chamar Hooks de componentes funcionais,  e sempre devem ser chamados dentro de um componente funcional React ou de um Hook customizado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hooks na prática&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos ver um pouco sobre os Hooks na prática, conhecendo um pouco um deles, que é o useState.&lt;/p&gt;

&lt;p&gt;O useState é um Hook que adiciona o estado de um componente de função, onde definimos o estado inicial de um componente, armazenando em uma variável.&lt;br&gt;
O useState recebe o valor inicial da propriedade state e retorna o valor atual da mesma.&lt;/p&gt;

&lt;p&gt;Para usar o useState, o primeiro passo é importar o mesmo: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLUvlMaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4j3as5h70v31zpbexti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLUvlMaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4j3as5h70v31zpbexti.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como mencionamos anteriormente, vamos declarar uma variável e atribuir um useState para ela :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---7XGWzw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjp21jjgzltghr0hk67u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---7XGWzw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjp21jjgzltghr0hk67u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A nossa variável chama "endereco", e está recebendo o estado inicial vazio entre aspas.&lt;br&gt;
Futuramente para atualizarmos nosso endereço no código, chamaremos o "setEndereco" &lt;br&gt;
No nosso exemplo, temos um campo input, que recebe o endereço inserido pelo usuário, será através desse campo que iremos usar o nosso setEndereco para atualizarmos o nosso estado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7HQq3Pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkeelh1myy6xaetg18h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7HQq3Pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkeelh1myy6xaetg18h3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No exemplo, recebemos como value(valor) a nossa const declarada endereco, e no método onChange do React, vamos realizar a atualização do nosso estado, chamando o setEndereco e atribuindo para o mesmo o valor que o usuário digitar. &lt;/p&gt;

&lt;p&gt;Exemplo da tela de cadastro, e das informações salvas no console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk4SH3vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oh4p8vrjc8l3xge293uq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk4SH3vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oh4p8vrjc8l3xge293uq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Claro que existem diversos outros Hooks que vocês podem encontrar na documentação do React( &lt;a href="https://pt-br.reactjs.org/docs/hooks-overview.html"&gt;https://pt-br.reactjs.org/docs/hooks-overview.html&lt;/a&gt;), mas hoje eu quis trazer uma introdução para vocês verem como é interessante e ficarem instigados a aprenderem mais.&lt;/p&gt;

&lt;p&gt;Por hoje é só, espero que tenham gostado.&lt;br&gt;
Caso tenha algo que eu possa melhorar ou até acrescentar, deixe nos comentários...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQtka6Qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8eId60n5LbfW0/giphy.gif%3Fcid%3Decf05e47hghowt3vgv8e3h8b77ho2piqhkhks9n21now0xw2%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQtka6Qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8eId60n5LbfW0/giphy.gif%3Fcid%3Decf05e47hghowt3vgv8e3h8b77ho2piqhkhks9n21now0xw2%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>frontend</category>
      <category>development</category>
      <category>hooks</category>
    </item>
    <item>
      <title>What was your win LAST week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Mon, 23 Aug 2021 21:00:43 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-last-week-4f0n</link>
      <guid>https://dev.to/devteam/what-was-your-win-last-week-4f0n</guid>
      <description>&lt;p&gt;Hey folks! &lt;/p&gt;

&lt;p&gt;Quick confession: &lt;strong&gt;I FORGOT TO ASK ABOUT WEEKLY WINS LAST FRIDAY&lt;/strong&gt; 😱  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fxJlv4HY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/eP1fobjusSbu/giphy.gif%3Fcid%3Decf05e47ytbhhi4xuqilgyz1jueco7k7rtipwg8q6eebhc6d%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxJlv4HY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/eP1fobjusSbu/giphy.gif%3Fcid%3Decf05e47ytbhhi4xuqilgyz1jueco7k7rtipwg8q6eebhc6d%26rid%3Dgiphy.gif%26ct%3Dg" alt="box of shame"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorry about that! Let's get to it — just a few days late 😆 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on&lt;/strong&gt; &lt;strong&gt;last&lt;/strong&gt; &lt;strong&gt;week, what was something you were proud of accomplishing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Trying out a new form of exercise... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for bearing with me. Can't wait to read about your wins from last week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsWlSfbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/j0vs5H7Kcz3Pm9LRDa/giphy.gif%3Fcid%3Decf05e479gcxfwipuqumnogvk0pkqd95yr5zyadetiw7m249%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsWlSfbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/j0vs5H7Kcz3Pm9LRDa/giphy.gif%3Fcid%3Decf05e479gcxfwipuqumnogvk0pkqd95yr5zyadetiw7m249%26rid%3Dgiphy.gif%26ct%3Dg" alt="Excited baby"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be back at the end of the week (promise) with the normal Friday wins thread. 👋 &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Is VDom still faster?</title>
      <author>Eckehard</author>
      <pubDate>Mon, 23 Aug 2021 20:56:47 +0000</pubDate>
      <link>https://dev.to/efpage/is-vdom-still-faster-g3b</link>
      <guid>https://dev.to/efpage/is-vdom-still-faster-g3b</guid>
      <description>&lt;p&gt;The idea behind a &lt;strong&gt;virtual DOM&lt;/strong&gt; is clear: &lt;em&gt;Build an in-memory representation of the dom and just apply the differences to the "real" DOM.&lt;/em&gt; This makes perfect sense on a machine, that is relatively slow. But is this still true today?&lt;/p&gt;

&lt;p&gt;I entered the scene relatively late, just a few years ago. Before I was using compiled languages like C++, which are amazingly fast - most of the time. But - many people use mobile devices today, and a web browser may serve well to make your application platform independent. So, we checked out what is possible today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We where amazed&lt;/strong&gt;: Even though javascript is an interpreted language, running on chrome or firefox was exceptionally fast. Even memory intens applications seemd to perform very similar to what we whrere used to. The most amazing part is the HTML5 canvas element, that is very cpable and creates high peformance antialiazed graphics in no time. &lt;/p&gt;

&lt;p&gt;Another amazing part of the browser performance was the increadible well performing double buffering of screen content: Even rebuilding the greatest part of the screen did not even cause a flickering of the screen. It seems, the guys at google did an exceptional good job designing the chromium engine (Which is the same for other current browsers like firefox or opera too). In any case: there are strong tools in modern browser to hide unnecessary screen updates and present a smooth experience, even if the programming was not that good.&lt;/p&gt;

&lt;p&gt;We did a lot of direct DOM programming and where always happy with the performance: It just seems that the world has changed today. &lt;/p&gt;

&lt;p&gt;There is a simple question: Maybe it was right in 2012 to create a virtual DOM. But times have changed. A virtual DOM means: additional calculations are to be performed. Specially the diffing may cause tremendous load. And we know: There is a second machine behind (implemented in the browser), that also performs similary well to hide unnecessary screen updates. &lt;/p&gt;

&lt;p&gt;My questions is: Do we still need a virtual DOM? &lt;strong&gt;IF&lt;/strong&gt; the browser is hiding unwanted screen updates, what happens with the virtual DOM? Does it just create additional processor load. Is it possible that both systems may interfere in and unexpected way that makes things even worse?  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Organizando a Startup de uma aplicação ASP.NET Core Web Application.</title>
      <author>Willian Menezes</author>
      <pubDate>Mon, 23 Aug 2021 20:55:39 +0000</pubDate>
      <link>https://dev.to/willianmenezes/organizando-a-startup-de-uma-aplicacao-asp-net-core-web-application-1lfa</link>
      <guid>https://dev.to/willianmenezes/organizando-a-startup-de-uma-aplicacao-asp-net-core-web-application-1lfa</guid>
      <description>&lt;p&gt;Neste pequeno artigo abordarei um assunto simples, mas que pode ajudar inúmeros desenvolvedores a deixar a sua aplicação um pouco mais organizada. Com o uso de &lt;a href="https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/classes-and-structs/how-to-implement-and-call-a-custom-extension-method"&gt;Métodos de extensão&lt;/a&gt; podemos deixar nossa classe Startup de uma aplicação em ASP.NET Core bem organizada e fácil de entender.&lt;/p&gt;

&lt;p&gt;Vou utilizar nos exemplos a seguir, uma API criada em ASP.NET Core 3.1.&lt;/p&gt;

&lt;p&gt;Quando iniciamos um projeto, seja ele para um cliente especifico, testes para empresas ou uso pessoal, precisamos configurar uma serie de serviços na classe Startup.cs, um exemplo clássico é a configuração do Entity Framework um ORM (Object Relational Mapping), que nos ajuda na abstração entre a aplicação e o banco de dados, explicando de uma forma “BEM RESUMIDA”.&lt;/p&gt;

&lt;p&gt;Um exemplo de configuração seria este:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdbKoSOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e9pdxtviyqd0ey6bplg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdbKoSOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e9pdxtviyqd0ey6bplg.png" alt="Imagem mostrando a a classe estartup configurando uma connection string de banco de dados"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dentro do método &lt;strong&gt;ConfigureServices&lt;/strong&gt; na classe Startup registramos nosso contexto de banco de dados, indicando que estamos utilizando o MySQL e apontando para nossa string de conexão chamada &lt;strong&gt;DefaultConnection&lt;/strong&gt; que está localizada no arquivo &lt;strong&gt;appsettings.json.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até ai tudo bem, temos apenas um serviço sendo registrado, mas e quando isso começar a escalar? O que podemos fazer?&lt;/p&gt;

&lt;p&gt;Imaginem um cenário onde nós temos uma aplicação divida em camadas, sendo elas, uma camada de “Data”, “Business” e “App”, onde cada uma terá sua responsabilidade. Na camada de “Data” nós temos todas as nossas classes de repositórios e suas respectivas interfaces, logo precisamos registrar na aplicação esses repositórios para utiliza-los com &lt;strong&gt;injeção de dependência.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Na classe Startup.cs a injeção de dependência desses repositórios ficariam dessa forma(não necessariamente é a única forma de se fazer):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O33_bCtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxe32ucvp8w59jg37xl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O33_bCtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxe32ucvp8w59jg37xl1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se por necessidade nossa aplicação conter muitas classes de repositórios, a classe Startup.cs começa a ficar muito grande, dificultando seu entendimento e possíveis manutenção.&lt;/p&gt;

&lt;p&gt;Uma solução muito interessante para resolver isso é removendo essa implementação da classe Startup.cs, utilizando de &lt;strong&gt;Métodos de extensão.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Criaremos um local próprio na nossa aplicação, que terá a responsabilidade de registrar e configurar os serviços que forem necessários.&lt;/p&gt;

&lt;p&gt;Inicialmente precisamos criar uma classe de configuração. Conforme o exemplo a seguir.&lt;/p&gt;

&lt;p&gt;Na camada de aplicação criei uma classe chamada &lt;strong&gt;DependecyInjectionConfiguration,&lt;/strong&gt; nela implementei um método de extensão da interface &lt;strong&gt;IServiceCollection,&lt;/strong&gt; encapsulando a injeção de dependência dos repositórios, ficando da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fzRqGrEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55l12yg7rsisp2qfmlrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fzRqGrEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55l12yg7rsisp2qfmlrf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na classe Startup.cs dentro do método ConfigureServices precisamos apenas chamar este método da seguinte maneira:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz-ZeLvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y6ids69ydk7b4jqkxbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qz-ZeLvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y6ids69ydk7b4jqkxbm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso pessoal, esse foi meu primeiro artigo e espero que possa ajudar o máximo de pessoas possível.&lt;/p&gt;

&lt;p&gt;Aceito toda e qualquer crítica construtiva que possa ajudar a trazer um conteúdo de melhor qualidade.&lt;/p&gt;

&lt;p&gt;Me segue lá no &lt;a href="https://www.youtube.com/channel/UC0Vo6yL26XaraIjak87jDww?view_as=subscriber"&gt;YouTube&lt;/a&gt; e no &lt;a href="https://twitter.com/wmscode"&gt;Twitter&lt;/a&gt; que logo vou começar a postar vídeos sobre programação com ASP.NET Core, Angular e entre outras coisas.&lt;/p&gt;

&lt;p&gt;Obrigado! Fui e &lt;strong&gt;#boraaaaaaa!&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Free CBD (code behavior diagrams) for developers</title>
      <author>Kevin Gilpin</author>
      <pubDate>Mon, 23 Aug 2021 20:54:28 +0000</pubDate>
      <link>https://dev.to/appland/free-cbd-code-behavior-diagrams-for-developers-18f8</link>
      <guid>https://dev.to/appland/free-cbd-code-behavior-diagrams-for-developers-18f8</guid>
      <description>&lt;p&gt;It’s thrilling to see our free and open source interactive code analysis tools continue to gain traction. &lt;/p&gt;

&lt;p&gt;Some of our ideas have actually been repeated on other blogs and with other products.  Imitation is flattering, so we just want to keep on rolling and keep things positive. No bummer vibes here, it's all good.  &lt;/p&gt;

&lt;p&gt;But it can be challenging to continue shipping dope visualizations and fresh ideas...&lt;/p&gt;

&lt;p&gt;We’ve been thinking a lot about how to differentiate our interactive code analysis product from other tools in the market, particularly static code analysis tools for codebases.  &lt;/p&gt;

&lt;p&gt;Because it’s so important that our projects aren’t confused with other tools that do very different things.  If you’re a developer, the last thing we want to do is cause you any more pain or stress around tooling!  &lt;/p&gt;

&lt;p&gt;So, here’s the gist on &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;what AppMap is&lt;/a&gt; and how it differs from other dev tools in the ecosystem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It’s free, open source and community-driven.&lt;/li&gt;
&lt;li&gt;It shows both code organization and runtime traces.&lt;/li&gt;
&lt;li&gt;It’s built on an open data format, so you can extend it with your own code and ideas. &lt;/li&gt;
&lt;li&gt;No signup or subscription required! You can use AppMap 100% client-side. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Or think of it this way: AppMaps are Code Behavior Diagrams. They’re CBD! FreeCBD for Ruby, Python and Java developers! Get your FreeCBD from AppMap today!   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://appland.com/products/appmap"&gt;FreeCBD for devs&lt;/a&gt; records code execution at runtime and presents this data in a variety of useful diagrams and analyses. &lt;/p&gt;

&lt;p&gt;Unlike with static code analysis, which inspects only source code and only against a given set of rules or standards, FreeCBD analyzes an entire application (including the code in your dev environment). Also unlike static analysis, FreeCBD observes the code’s interaction with all system components and records code behavior during the execution of any business logic scenarios.&lt;/p&gt;

&lt;p&gt;We’re really proud of what we’re building, and we couldn’t do it without the support and participation of our wonderful community. Take a cue from some of our community members and start &lt;a href="https://appland.com/blog/2021/05/04/appland-community-profile-marcus-sanchez/"&gt;understanding new codebases&lt;/a&gt;, &lt;a href="https://appland.com/blog/2021/06/21/laurent-christophe-community-profile/"&gt;getting familiar with code you didn’t write&lt;/a&gt; and &lt;a href="https://appland.com/blog/2021/08/10/comminuty-profile-noe-de-la-mora/"&gt;debugging complex apps&lt;/a&gt; -- all while staying super stress-free and happy. &lt;/p&gt;

&lt;p&gt;And please help us spread the word! Our dank FreeCBD is here to make developers’ most vibe-crushing work a whole lot more chill. 😉&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>humor</category>
      <category>ruby</category>
      <category>python</category>
    </item>
    <item>
      <title>How to set up a personal website with 11ty, Markdown, TailwindCSS, and Alpine.js</title>
      <author>Maciej</author>
      <pubDate>Mon, 23 Aug 2021 20:43:05 +0000</pubDate>
      <link>https://dev.to/druidmaciek/how-to-set-up-a-personal-website-with-11ty-markdown-tailwindcss-and-alpine-js-2m31</link>
      <guid>https://dev.to/druidmaciek/how-to-set-up-a-personal-website-with-11ty-markdown-tailwindcss-and-alpine-js-2m31</guid>
      <description>&lt;p&gt;So I rebuild my &lt;a href="https://janowski.dev"&gt;website&lt;/a&gt; for about 100th time.&lt;br&gt;
I was testing out some new website stacks, and this is the one I particularly enjoy.&lt;/p&gt;

&lt;p&gt;We will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;11ty static site generator&lt;/li&gt;
&lt;li&gt;markdown files for content such as blog posts and projects&lt;/li&gt;
&lt;li&gt;Tailwind to add some styling &lt;/li&gt;
&lt;li&gt;Alpine.js for some interactivity, e.g mobile menu&lt;/li&gt;
&lt;li&gt;Netlify to host our website &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When finished you will have a  website that you can use as your personal developer portfolio. &lt;br&gt;
Show it  to your employers or clients to showcase your work and establish expertise.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you have basic understanding of Tailwind, HTML, JavaScript, and npm.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Create a new directory for our project, and initialize it with package.json&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now let's install eleventy, tailwind, and posts&lt;br&gt;
    npm install --save-dev @11ty/eleventy tailwindcss postcss-cli autoprefixer&lt;/p&gt;

&lt;p&gt;Now let's create a index.liquid file (liquid is one of the templating languages supported by 11ty )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;---
title: "Home Page"
description: "This is our homepage"
layout: layouts/main
---
&amp;lt;h1&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code between --- signs is the front matter. &lt;br&gt;
Here we define variables for different pages. We can access them in our html using double curly brackets  (if you used Django this should be familiar to you)&lt;/p&gt;

&lt;p&gt;Layout variable is to point 11ty to a file that our page will use.&lt;br&gt;
This way we can reuse the same code across many pages with out writing it more than once.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#templating"&gt;
  &lt;/a&gt;
  Templating
&lt;/h2&gt;

&lt;p&gt;Let's create a directory called &lt;code&gt;_includes&lt;/code&gt;, this is where we can create reusable blocks of code for layouts, and components.&lt;br&gt;
Let's create another directory called &lt;code&gt;layouts&lt;/code&gt; and inside a file for our HTML boilerplate &lt;code&gt;main.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
title: Default Title
--------
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;

    &amp;lt;title&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/title&amp;gt;
    &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
    &amp;lt;meta name="description" content="&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;" /&amp;gt;
    &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;endif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;

    &amp;lt;link rel="stylesheet" href="/style.css?v=&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;" /&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div id="content" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"&amp;gt;

        &amp;lt;div class="max-w-3xl mx-auto"&amp;gt;
            &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
            &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;safe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;endblock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwindcss-config"&gt;
  &lt;/a&gt;
  TailwindCSS Config
&lt;/h2&gt;

&lt;p&gt;Create a folder called &lt;code&gt;styles&lt;/code&gt; and a file inside &lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;module.exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;purge:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;'_site/**/*.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;darkMode:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;theme:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;extend:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;variants:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;extend:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;plugins:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create another file in &lt;code&gt;styles&lt;/code&gt; folder called &lt;code&gt;tailwind.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the root directory of the project create a &lt;code&gt;posts.config.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`tailwindcss`&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s2"&gt;`./styles/tailwind.config.js`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`autoprefixer`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;.gitignore&lt;/code&gt; file in root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_site/
_tmp/
.DS_Store
node_modules/
package-lock.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next create a &lt;code&gt;.eleventyignore&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally let's create 11ty configuration file &lt;code&gt;.eleventy.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUseGitIgnore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addWatchTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./_tmp/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPassthroughCopy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./_tmp/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addShortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update &lt;code&gt;package.json&lt;/code&gt; file with scripts to start the build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve &amp;amp; postcss styles/tailwind.css --o _tmp/style.css --watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ELEVENTY_PRODUCTION=true eleventy &amp;amp; NODE_ENV=production postcss styles/tailwind.css --o _site/style.css"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@11ty/eleventy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.12.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"autoprefixer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.3.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"postcss-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tailwindcss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.2.7"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can build the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to start the site&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;http://localhost:8080&lt;/code&gt; in your browser and you should see this in your browser &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws_eBbqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws_eBbqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc1.png" alt="Website screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimising-html"&gt;
  &lt;/a&gt;
  Optimising HTML
&lt;/h2&gt;

&lt;p&gt;Now we want to improve our site by minifing HTML and cleaning CSS. Install required packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev html-minifier clean-css-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next update &lt;code&gt;.eleventy.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;htmlmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html-minifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUseGitIgnore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addWatchTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./_tmp/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPassthroughCopy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./_tmp/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addShortcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;htmlmin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ELEVENTY_PRODUCTION&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;outputPath&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlmin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;useShortDoctype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;removeComments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;minified&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly update the build script in &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve &amp;amp; postcss styles/tailwind.css --o _tmp/style.css --watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ELEVENTY_PRODUCTION=true eleventy &amp;amp;&amp;amp; NODE_ENV=production postcss styles/tailwind.css --o _site/style.css &amp;amp;&amp;amp; cleancss _site/style.css -o _site/style.css"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@11ty/eleventy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.12.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"autoprefixer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.3.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"clean-css-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.3.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"html-minifier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"postcss-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tailwindcss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.2.7"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt; again and you should see your files in &lt;code&gt;_site&lt;/code&gt; directory take less space&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-alpinejs"&gt;
  &lt;/a&gt;
  Adding Alpine.js
&lt;/h2&gt;

&lt;p&gt;Now for the last bit of configuration let's add Alpine.js.&lt;br&gt;
First install it through npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev alpinejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;.eleventy.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eleventyConfig.addPassthroughCopy({
  './node_modules/alpinejs/dist/cdn.js': './js/alpine.js',
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally update the &lt;code&gt;_includes/layouts/main.liquid&lt;/code&gt;, by importing alpine in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/alpine.js?v={% version %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's complete the website by adding pages, blog pages and styling it&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-hero-header"&gt;
  &lt;/a&gt;
  Adding hero header
&lt;/h2&gt;

&lt;p&gt;Inside &lt;code&gt;_includes&lt;/code&gt; dir create a &lt;code&gt;components&lt;/code&gt; folder with &lt;code&gt;hero.liquid&lt;/code&gt; file inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full h-full object-cover"&lt;/span&gt;
            &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/34/BA1yLjNnQCI1yisIZGEi_2013-07-16_1922_IMG_9873.jpg?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1502&amp;amp;q=80"&lt;/span&gt;
            &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0 bg-gray-400 mix-blend-multiply"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative text-center py-24 px-4 sm:py-32 sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-5xl font-extrabold text-white sm:text-6xl lg:text-7xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Personal Website&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 text-xl max-w-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read my web development tutorials, and see projects I worked on.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update the &lt;code&gt;index.liquid&lt;/code&gt; file by including the header&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
title: Home Page
description: This is our homepage
layout: layouts/main
--------
&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/hero&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the site &lt;code&gt;npm run start&lt;/code&gt; and you should see our hero header&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CB2tW0ZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CB2tW0ZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc2.png" alt="Hero Header Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-navigation-bar"&gt;
  &lt;/a&gt;
  Adding a Navigation Bar
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;navigation.liquid&lt;/code&gt; file in the &lt;code&gt;_includes/components&lt;/code&gt; directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full h-full object-cover"&lt;/span&gt;
            &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/34/BA1yLjNnQCI1yisIZGEi_2013-07-16_1922_IMG_9873.jpg?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1502&amp;amp;q=80"&lt;/span&gt;
            &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0 bg-gray-400 mix-blend-multiply"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative text-center py-24 px-4 sm:py-32 sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-5xl font-extrabold text-white sm:text-6xl lg:text-7xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Personal Website&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 text-xl text-gray-50 max-w-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read my web development tutorials, and see projects I worked on.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-a-mobile-nav"&gt;
  &lt;/a&gt;
  Making a Mobile Nav
&lt;/h2&gt;

&lt;p&gt;Now let's make a mobile navigation with the help of some Alpine.js magic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;x-cloak&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-cloak&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"navigation()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Mobile navigation --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"-mt-6 absolute z-50 bg-white h-screen w-screen"&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"isOpen"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:enter=&lt;/span&gt;&lt;span class="s"&gt;"transition ease-in-out duration-300"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:enter-start=&lt;/span&gt;&lt;span class="s"&gt;"opacity-0 transform scale-x-0 -translate-x-1/2"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:enter-end=&lt;/span&gt;&lt;span class="s"&gt;"opacity-100 transform scale-x-100 translate-x-0"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:leave=&lt;/span&gt;&lt;span class="s"&gt;"transition ease-in-out duration-300"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:leave-start=&lt;/span&gt;&lt;span class="s"&gt;"opacity-100 transform scale-x-100 translate-x-0"&lt;/span&gt;
        &lt;span class="na"&gt;x-transition:leave-end=&lt;/span&gt;&lt;span class="s"&gt;"opacity-0 transform scale-x-0 -translate-x-1/2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-between items-center p-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-extrabold uppercase text-xl"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Web Dev Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"isOpen = !isOpen"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:hidden p-1 rounded-lg bg-gray-900 bg-opacity-80 hover:bg-opacity-100 text-gray-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-1 gap-4 p-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/work"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Work&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Desktop navigation --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-6 flex justify-between items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-extrabold uppercase text-xl"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Web Dev Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"isOpen = !isOpen"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:hidden p-1 rounded-lg bg-gray-900 bg-opacity-80 hover:bg-opacity-100 text-gray-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt;
                &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M4 6h16M4 12h16M4 18h16"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden md:flex md:justify-end md:items-center md:space-x-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-semibold uppercase hover:opacity-80 hover:underline"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/work"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Work&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's include the navigation in our layout file &lt;code&gt;_includes/layouts/main.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div id="content" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"&amp;gt;
        &amp;lt;div class="max-w-3xl mx-auto"&amp;gt;
            &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/navigation&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
            &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
            &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;safe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;endblock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preview our website in the browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYXlNKi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYXlNKi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc3.png" alt="Desktop Navigation Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8T9Lzhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8T9Lzhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc4.png" alt="Mobile Navigation Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-reusable-components"&gt;
  &lt;/a&gt;
  Making reusable components
&lt;/h2&gt;

&lt;p&gt;Let's make our hero header reusable by adding few variables to it, for title text, sub text and image url. Update &lt;code&gt;_includes/compnoents/hero.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;    &amp;lt;div class="mt-2 relative"&amp;gt;
        &amp;lt;div class="absolute inset-0"&amp;gt;
            &amp;lt;img class="w-full h-full object-cover"
                src="&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hero_img&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;"
                alt=""&amp;gt;
            &amp;lt;div class="absolute inset-0 bg-gray-400 mix-blend-multiply" aria-hidden="true"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="relative text-center py-24 px-4 sm:py-32 sm:px-6 lg:px-8"&amp;gt;
            &amp;lt;h1 class="text-5xl font-extrabold text-white sm:text-6xl lg:text-7xl"&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hero_title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/h1&amp;gt;
            &amp;lt;p class="mt-4 text-xl text-gray-50 max-w-3xl"&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hero_subtitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next update the include in the &lt;code&gt;index.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
title: Home Page
description: This is our homepage
layout: layouts/main
--------

&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/hero,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My Web Development Blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_subtitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Read my web development tutorials,
and see projects I worked
on."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"https://images.unsplash.com/34/BA1yLjNnQCI1yisIZGEi_2013-07-16_1922_IMG_9873.jpg"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check if everything still work in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-pages"&gt;
  &lt;/a&gt;
  Adding pages
&lt;/h2&gt;

&lt;p&gt;Let's create an about page. In the root directory create a file &lt;code&gt;about.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
title: About Page
description: This is the about page
layout: layouts/main
--------

&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/hero,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"About Me"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_subtitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Learn more about me here"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"https://images.unsplash.com/photo-1628373791626-fe21d99fbd58?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1500&amp;amp;q=80"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
&amp;lt;p&amp;gt;Here is a short summary about me and what I do.&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;code&gt;http://localhost:8080/aboutt&lt;/code&gt; in your browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy8axxYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy8axxYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc5.png" alt="About Page Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-collections"&gt;
  &lt;/a&gt;
  Creating collections
&lt;/h2&gt;

&lt;p&gt;Create a new directory in the root dir of the project called &lt;code&gt;blog&lt;/code&gt;&lt;br&gt;
Inside create 3 files &lt;code&gt;blog1.md&lt;/code&gt;, &lt;code&gt;blog2.md&lt;/code&gt;,&lt;code&gt;index.liquid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The markdown files will be used to render our blog articles content, and the index.liquid will list all the articles under /blog&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blog1.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
title: Example Blog post no. 1
description: This is a basic description of the post
date: 2021-08-21
layout: layouts/blog
&lt;span class="gh"&gt;tags: blog
--------
&lt;/span&gt;This is some placeholder content that will be rendered to html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;blog2.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
title: Example Blog post no. 1
description: This is a basic description of the post
date: 2021-08-23
layout: layouts/blog
&lt;span class="gh"&gt;tags: blog
--------
&lt;/span&gt;This is another peace of  placeholder content that will be rendered to html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;blog/index.liquid&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
title: About Page
description: This is the about page
layout: layouts/main
--------

&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/hero,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_subtitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Read my articles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"https://images.unsplash.com/photo-1628607292260-9195108b03b7?ixlib=rb-1.2.1&amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1502&amp;amp;q=80"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
&amp;lt;div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4 "&amp;gt;
    &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;collections.blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;reversed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;

    &amp;lt;a href="&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;" class="p-4 border rounded shadow hover:bg-gray-100"&amp;gt;
        &amp;lt;h3 class="text-lg font-bold"&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-gray-700"&amp;gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
    &amp;lt;/a&amp;gt;

    &lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we need to create a layout for articles, create &lt;code&gt;_includes/layouts/blog.liquid&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight liquid"&gt;&lt;code&gt;--------
layout: layouts/main
--------

&lt;span class="p"&gt;{%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;components&lt;/span&gt;/hero,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_subtitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;hero_img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"https://images.unsplash.com/photo-1628366757132-6c49770ec9d7"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="p"&gt;%}&lt;/span&gt;

&amp;lt;div class="mt-6 md:mt-12"&amp;gt;
    &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;safe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now visit &lt;code&gt;http://localhost:8080/blog&lt;/code&gt; to view a list of posts, and click one of them to see the content&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5RR_ZYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5RR_ZYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc6.png" alt="Blog List Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_jdHZqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_jdHZqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://janowski.dev/assets/img/articles/screenshots/sc7.png" alt="Blog page Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do the same to list projects you worked on, but I will let you add it yourself as an exercise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-website-to-netlify"&gt;
  &lt;/a&gt;
  Deploying website to Netlify
&lt;/h2&gt;

&lt;p&gt;Firstly, let's upload our website to GitHub. &lt;br&gt;
Create a new repo on GitHub, and then initialise git local and upload our files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
git add . 
git commit -m "first commit"
git branch -M main
git remote add origin https://github/your_username/your_repo.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to &lt;a href="https://netlify.com"&gt;Netlify.com&lt;/a&gt;, login or register if you don't have an account.&lt;/p&gt;

&lt;p&gt;On main dashboard click &lt;code&gt;New site from Git&lt;/code&gt; button. And under &lt;code&gt;Continuous Deployment&lt;/code&gt; click &lt;code&gt;GitHub&lt;/code&gt; button. Authenticate your GitHub account, and you should see a list of your repositories.&lt;br&gt;
Select the one we just created. &lt;/p&gt;

&lt;p&gt;On the next screen leave everything on defaults, and press &lt;code&gt;Deploy&lt;/code&gt;.&lt;br&gt;
You built and deployed your eleventy blog to netlify and should have your website available on address like &lt;a href="https://flamboyant-poitras-0033f8.netlify.app"&gt;that&lt;/a&gt;.&lt;br&gt;
The website will automaticly deploy when you push changes to github.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://github.com/druidmaciek/11ty-tailwind-alpine-blog"&gt;link&lt;/a&gt; to GitHub repo of the finished project.&lt;/p&gt;

&lt;p&gt;If you liked this guide, &lt;a href="https://twitter.com/MaciejJanowski"&gt;follow me&lt;/a&gt; on twitter, to stay up to date with my latest content. &lt;/p&gt;

</description>
      <category>eleventy</category>
      <category>tailwindcss</category>
      <category>alpinejs</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
