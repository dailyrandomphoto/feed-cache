<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SlateJS: Creating a Text Editor</title>
      <author>Karl Castillo</author>
      <pubDate>Fri, 09 Apr 2021 15:50:13 +0000</pubDate>
      <link>https://dev.to/koralarts/slate-creating-a-text-editor-5fok</link>
      <guid>https://dev.to/koralarts/slate-creating-a-text-editor-5fok</guid>
      <description>&lt;p&gt;Having a text editor customized can enhance your user's experience. &lt;a href="https://www.slatejs.org/"&gt;Slate&lt;/a&gt; is a text editor framework that can be customized to fit your needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-slate"&gt;
  &lt;/a&gt;
  Installing Slate
&lt;/h1&gt;

&lt;p&gt;We'll need three modules for our Slate implementation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;slate&lt;/code&gt;: The core module of Slate&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;slate-react&lt;/code&gt;: The React wrapper for Slate&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;slate-history&lt;/code&gt;: Allows the user to undo their actions
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save&lt;/span&gt; slate slate-react slate-history
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add slate slate-react slate-history
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#setting-up-slate"&gt;
  &lt;/a&gt;
  Setting up Slate
&lt;/h1&gt;

&lt;p&gt;To create a new Editor using &lt;code&gt;createEditor&lt;/code&gt; in combination with a couple of plugins -- &lt;code&gt;withReact&lt;/code&gt; and &lt;code&gt;withHistory&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEditor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-history&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEditor&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two components will then be used to render the Slate editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Editable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt; &lt;span class="na"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Editable&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-content"&gt;
  &lt;/a&gt;
  Adding Content
&lt;/h1&gt;

&lt;p&gt;Slate would crash initially and that's because a default value is necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my paragraph!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important for a default Element to exist and not just an empty array. Having an empty array will cause a crash as Slate has nothing to attach the cursor to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#custom-types"&gt;
  &lt;/a&gt;
  Custom Types
&lt;/h1&gt;

&lt;p&gt;By default, the content will be considered as text but Rich Text Editors can have non-text content.&lt;/p&gt;

&lt;p&gt;Each Element can have custom properties to help render said Element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path/to/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then render these custom elements using the &lt;code&gt;renderElement&lt;/code&gt; prop of the &lt;code&gt;Editor&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;contentEditable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Paragraph&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Editor&lt;/span&gt; &lt;span class="na"&gt;renderElement&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderElement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important that every Element renders the &lt;code&gt;children&lt;/code&gt; prop as this is how Slate can keep track of which element currently has focus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#voids"&gt;
  &lt;/a&gt;
  Voids
&lt;/h2&gt;

&lt;p&gt;Voids are Elements that cannot be edited as if it was text. Since our Image cannot be edited as if it was text, we need to tell Slate that it's a void Element.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;editor&lt;/code&gt; object that we create has an &lt;code&gt;isVoid&lt;/code&gt; function which determines whether or not an Element is void or not.&lt;/p&gt;

&lt;p&gt;Slate allows us to create plugins that can modify the functionality of existing &lt;code&gt;editor&lt;/code&gt; functions or add new functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVoid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withImages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEditor&lt;/span&gt;&lt;span class="p"&gt;()))),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; Since you can have a lot of plugins especially for more complicated editors, you can use the &lt;code&gt;pipe&lt;/code&gt; function from &lt;code&gt;lodash/fp&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/fp/pipe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createEditorWithPlugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;withReact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;withHistory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;withImage&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createEditorWithPlugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEditor&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#handling-events"&gt;
  &lt;/a&gt;
  Handling Events
&lt;/h1&gt;

&lt;p&gt;Since Image is now considered as a void element, it loses some keyboard functionality. Luckily, the editor provides us two functions that we can extend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-insertbreak-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;insertBreak&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;editor.insertBreak&lt;/code&gt; function is called when the user presses the &lt;code&gt;enter&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt; for Mac.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;insertBreak&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;

&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBreak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; 
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nextPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// Focus on this node once inserted&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;insertBreak&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-deletebackward-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;deleteBackward&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;editor.deleteBackward&lt;/code&gt; function is called when the user presses the &lt;code&gt;backspace&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; for Mac.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteBackward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;

&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteBackward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;deleteBackward&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As you can see, Slate can be heavily customizable as it gives you the necessary tools to add your own functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/2pd0d"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>slate</category>
      <category>react</category>
      <category>javascript</category>
      <category>slatejs</category>
    </item>
    <item>
      <title>A short story about web apis</title>
      <author>Toumi Abderrahmane</author>
      <pubDate>Fri, 09 Apr 2021 15:46:48 +0000</pubDate>
      <link>https://dev.to/abderrahmanemustapha/a-short-story-about-web-apis-2jdf</link>
      <guid>https://dev.to/abderrahmanemustapha/a-short-story-about-web-apis-2jdf</guid>
      <description>&lt;p&gt;Developing a WEB API !!. Initially, I can say I know how to do this or at least I know the basics, but this time I wanted to know some history, who first used the WEB APIS  and who gave this name to it, how it developed, and what drove these big companies To use WEB APIS &lt;/p&gt;

&lt;p&gt;This story to my knowledge starts in 2000  with salesforce They wanted to change how people work on the Internet. In addition, they wanted to enter another interface that machines understand and communicate with as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_aL05-tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omvaw60ph4i4zod2r4he.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aL05-tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omvaw60ph4i4zod2r4he.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was not more than a year Ebay say's I'm here, They launched their own API under the name EBay application programming interface,  but it was not available to everyone&lt;/p&gt;

&lt;p&gt;Ebay and Salesforce is not alone here  , a two years later Amazon and flicker did the same&lt;/p&gt;

&lt;p&gt;But What About Facebook and Twitter !! , they have launched their own web apis  because of the people who use the web crawler and web scrapper on their pages or those who create a rogue web apis,&lt;br&gt;
same thing happened to google map apis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4p0WJ4CL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinbagsmxfrb9imixqea.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4p0WJ4CL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dinbagsmxfrb9imixqea.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon was not the first, but it made a step that will lead us later to the world of cloud computing, Amazon launched the S3, through this service everyone will be able to store or extract any amount of data.&lt;/p&gt;

&lt;p&gt;WEb Apis now is a big business , in mars 2010 twitter was serving &lt;br&gt;
70,000  call Every Second, and in mars 2017 , 1000 million users access their banking accounts from mobiles and of course, these phones or applications connect to a web api somewhere&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9LaoAd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca0qmkrjr0ozfz88s2ks.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9LaoAd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca0qmkrjr0ozfz88s2ks.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After reading some history, I began to ask about how to successfully develop the API and what are the stages that I must perform,  I found some blogs they were  talking about what they call the API lifecycle and this is what I will talk about in the next post :) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-further-exploration-"&gt;
  &lt;/a&gt;
  For Further Exploration :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm"&gt;Architectural Styles and
the Design of Network-based Software Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apievangelist.com/2012/12/20/history-of-apis/"&gt;History of apis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nordicapis.com/who-invented-the-api/"&gt;Who invented the apis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Grokking Applicatives</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 09 Apr 2021 15:42:57 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-applicatives-44o1</link>
      <guid>https://dev.to/choc13/grokking-applicatives-44o1</guid>
      <description>&lt;p&gt;Applicatives are perhaps the less well-known sibling of the monad, but are equally important and solve a different, but related problem. Once you've discovered them you'll find they're a useful tool for writing code where we don't care about the order of the computations. &lt;/p&gt;

&lt;p&gt;In this post we're going to grok applicatives by "discovering" them through a worked example.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#small-f-primer"&gt;
  &lt;/a&gt;
  Small F# primer
&lt;/h1&gt;

&lt;p&gt;Skip this if you've got basic familiarity with F#.&lt;/p&gt;

&lt;p&gt;It should be easy enough to follow along if you've not used F# before, you'll just need to understand the following bits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F# has a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type. It represents the result of a computation that might fail. It has a &lt;code&gt;Ok&lt;/code&gt; case constructor which contains a value of type &lt;code&gt;T&lt;/code&gt; and a &lt;code&gt;Error&lt;/code&gt; case constructor which contains an error value of type &lt;code&gt;E&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can pattern match on a &lt;code&gt;Result&lt;/code&gt; like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;aResult&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// expression based on the good value x&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// expression based on the error value e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The Scenario
&lt;/h1&gt;

&lt;p&gt;Let's say we've been asked to write a function that validates a credit card, which is modelled like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function we need to implement is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCreditCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happily, someone else has already written some functions for validating a credit card number, expiry and CVV. They look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"A credit card number must be less than 16 characters"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// Some validation checks for an expiry&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="c1"&gt;// Some validation checks for a CVV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The details of the validation checks aren't crucial here, I've just shown a basic example for the card number, but in reality they’d be more complex. The main thing to take note of is that each function takes an unvalidated string and returns a &lt;code&gt;Result&amp;lt;string, string&amp;gt;&lt;/code&gt; which indicates whether or not the value is valid. If the value is invalid then it will return a string containing the error message.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-first-attempt"&gt;
  &lt;/a&gt;
  Our first attempt
&lt;/h1&gt;

&lt;p&gt;What luck! All we've got to do is compose these functions somehow to validate a credit card instance. Let's give it a go!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCreditCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validatedNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validatedExpiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validatedCvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validatedNumber&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validatedExpiry&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validatedCvv&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmmm, that doesn't compile. The problem is that we're trying to pass &lt;code&gt;Result&amp;lt;string, string&amp;gt;&lt;/code&gt; to the fields of the &lt;code&gt;CreditCard&lt;/code&gt; at the end, but the fields of &lt;code&gt;CreditCard&lt;/code&gt; have type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-spy-with-my-little-eye-something-beginning-with-m"&gt;
  &lt;/a&gt;
  I spy, with my little eye, something beginning with M 👀
&lt;/h1&gt;

&lt;p&gt;Seeing as we've now &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokked Monads&lt;/a&gt; we might notice that we could solve our problem using monads. Each validation functions takes a &lt;code&gt;string&lt;/code&gt; and lifts it up to a &lt;code&gt;Result&amp;lt;string, string&amp;gt;&lt;/code&gt; and we seemingly want to chain several of these functions together. We saw in 'Grokking Monads' that we can use &lt;code&gt;bind&lt;/code&gt; for exactly this type of chaining. For reference, &lt;code&gt;bind&lt;/code&gt; for a &lt;code&gt;Result&lt;/code&gt; would look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let's try and write &lt;code&gt;validateCreditCard&lt;/code&gt; as a chain using &lt;code&gt;bind&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
          &lt;span class="nc"&gt;Expiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;
          &lt;span class="nc"&gt;Cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks neat, but it still doesn't compile!&lt;/p&gt;

&lt;p&gt;The calls to bind expect a function that take as input the validated value from the previous computation. In the first case it would be the validated &lt;code&gt;number&lt;/code&gt; being passed to the &lt;code&gt;validateExpiry&lt;/code&gt; function. However, &lt;code&gt;validateExpiry&lt;/code&gt; doesn't need the validated &lt;code&gt;number&lt;/code&gt; as input, it needs the unvalidated expiry, but we do need to keep track of that validated number somehow until the end so that we can use it to build the valid &lt;code&gt;CreditCard&lt;/code&gt; instance. &lt;/p&gt;

&lt;p&gt;It is possible to remedy these points by accumulating these intermediate validation results as we go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
                      &lt;span class="nc"&gt;Expiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;
                      &lt;span class="nc"&gt;Cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="o"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yikes! 😱 Pretty messy and definitely more confusing than we'd like. At each stage we have to create a lambda that takes as input the validated values from the previous step, validates one more piece of data and then accumulates it all in a tuple until we finally have all of the bits to build the whole &lt;code&gt;CreditCard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our simple validation task has been lost in a sea of lambdas and intermediate tuple objects. Imagine the mess if we had even more fields on the &lt;code&gt;CreditCard&lt;/code&gt; that required validation. What we need is a solution that avoids us having to create so many intermediate objects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#applicatives-to-the-rescue"&gt;
  &lt;/a&gt;
  Applicatives to the rescue 🦸
&lt;/h1&gt;

&lt;p&gt;Another way to accumulate values is through partial application. This allows us to take a function of &lt;code&gt;n&lt;/code&gt; arguments and return a function of &lt;code&gt;n - 1&lt;/code&gt; arguments. For example let's define a function called &lt;code&gt;createCreditCard&lt;/code&gt; that works with plain string inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCreditCard&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cvv&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can progressively accumulate the values by applying them to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1234"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;numberApplied&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createCreditCard&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;numberApplied&lt;/code&gt; is a function with the signature &lt;code&gt;string -&amp;gt; string -&amp;gt; CreditCard&lt;/code&gt; or to name those parameters &lt;code&gt;expiry -&amp;gt; cvv -&amp;gt; CreditCard&lt;/code&gt;. So we've been able to "store" the number for later without having to create an intermediate tuple.&lt;/p&gt;

&lt;p&gt;So let's invent a function called &lt;code&gt;apply&lt;/code&gt; that makes use of partial application but for values that are wrapped in some other structure such as &lt;code&gt;Result&lt;/code&gt; and put it before each argument like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCreditCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be wondering why we need to wrap &lt;code&gt;createCreditCard&lt;/code&gt; in &lt;code&gt;Ok&lt;/code&gt;. That's because this function is going to return &lt;code&gt;Result&amp;lt;CreditCard, string&amp;gt;&lt;/code&gt;, therefore &lt;code&gt;apply&lt;/code&gt; must return &lt;code&gt;Result&lt;/code&gt;. This means that in order to chain them together it must also accept a &lt;code&gt;Result&lt;/code&gt; as input. Therefore we need to just initially "lift" the &lt;code&gt;createCardFunction&lt;/code&gt; up into a &lt;code&gt;Result&lt;/code&gt; to kick off the chain with the right type.&lt;/p&gt;

&lt;p&gt;It might seem strange to have a &lt;code&gt;Result&lt;/code&gt; of a function, but remember that we're going to be using partial application to gradually accumulate the state after each call to &lt;code&gt;apply&lt;/code&gt;. So really what we're doing here is starting with an empty container that is &lt;code&gt;Ok&lt;/code&gt; and progressively filling it with data, checking at each step whether the new data is &lt;code&gt;Ok&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;As usual we can let the types guide us in writing this function. At each stage of the chain what we need to do is take two arguments. The first is a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; and the second is a &lt;code&gt;Result&amp;lt;(T -&amp;gt; V), E&amp;gt;&lt;/code&gt;. We want to try and unwrap both the value of type &lt;code&gt;T&lt;/code&gt; and the function of type &lt;code&gt;T -&amp;gt; V&lt;/code&gt; and if they're both &lt;code&gt;Ok&lt;/code&gt;, we can apply the value to the function.&lt;/p&gt;

&lt;p&gt;The type &lt;code&gt;T -&amp;gt; V&lt;/code&gt; might look like a function of only one argument, but there's nothing to say that &lt;code&gt;V&lt;/code&gt; can't be another function itself. So whilst this might look like it only works when the function input has a single argument, in fact it works for functions of any number of arguments, providing that the first argument matches the type of value contained in the &lt;code&gt;Result&lt;/code&gt; we wish to apply.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;apply&lt;/code&gt; should have the signature &lt;code&gt;Result&amp;lt;T, E&amp;gt; -&amp;gt; Result&amp;lt;(T -&amp;gt; V), E&amp;gt; -&amp;gt; Result&amp;lt;V, E&amp;gt;&lt;/code&gt;, but we'll see that with just that, rather abstract, information it's quite straight forward to implement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, all we can really do is pattern match on both the function &lt;code&gt;f&lt;/code&gt; and the argument &lt;code&gt;a&lt;/code&gt; and then do the case analysis, which gives us four cases to scrutinise. In the first case both values are &lt;code&gt;Ok&lt;/code&gt; so we simply unwrap them both and apply the value to the function and then repackage in &lt;code&gt;Ok&lt;/code&gt;. In all of the other cases we have at least one error so we return that. The final case is interesting because we have two errors, we decide to just keep the first one here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  Testing it out
&lt;/h1&gt;

&lt;p&gt;Let's test the &lt;code&gt;apply&lt;/code&gt; function in the FSharp repl to make sure it behaves correctly. It will also help us improve our understanding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"1234"&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"08/19"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1234"&lt;/span&gt;
                                          &lt;span class="nc"&gt;Expiry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08/19"&lt;/span&gt;
                                          &lt;span class="nc"&gt;Cvv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"123"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks good, if all the inputs are valid then we get a valid &lt;code&gt;CreditCard&lt;/code&gt;. Let's see what happens when one of the inputs is bad.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"1234"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"08/19"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"Invalid CVV"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"Invalid CVV"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excellent, just as we'd hoped. Finally, what if we have multiple bad inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"Invalid card number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="s2"&gt;"08/19"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"Invalid CVV"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"Invalid card number"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again it's what we'd designed for. Here it's failed on the first bad input. Many of you might rightly be wondering whether this is desirable, surely it would be better to return all the errors. In the next post we'll see how we can do that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-applicatives"&gt;
  &lt;/a&gt;
  You just discovered applicatives 👏
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;apply&lt;/code&gt; function is what makes something applicative. Hopefully by seeing the problem that they solve you understand them more deeply and intuitively than by just staring at the type signature of &lt;code&gt;apply&lt;/code&gt; and reading about the applicative laws.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-bit-more-tidy-up"&gt;
  &lt;/a&gt;
  A bit more tidy up 🧹
&lt;/h1&gt;

&lt;p&gt;If you don't like the fact that you have to wrap the &lt;code&gt;createCreditCard&lt;/code&gt; function in &lt;code&gt;Ok&lt;/code&gt;, then we can get rid of this. If you've ready &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; then you'll see that &lt;code&gt;map&lt;/code&gt; can be defined for &lt;code&gt;Result&lt;/code&gt; to make it a functor. We know that &lt;code&gt;map&lt;/code&gt; takes a function and calls it the contents of the &lt;code&gt;Result&lt;/code&gt; if it's &lt;code&gt;Ok&lt;/code&gt;. So we can actually use this to kick off the chain like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;createCreditCard&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a little awkward though because the flow seems to be all mixed up with the &lt;code&gt;createCreditCard&lt;/code&gt; function in the middle of the 3 arguments. To remedy this it's quite common to define an &lt;code&gt;&amp;lt;!&amp;gt;&lt;/code&gt; infix operator for &lt;code&gt;map&lt;/code&gt;, which then reads .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;createCreditCard&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, it's common to also use &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; for &lt;code&gt;apply&lt;/code&gt; which gives us this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;validateCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;createCreditCard&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validateNumber&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validateExpiry&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Expiry&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validateCvv&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Cvv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't be put off by this if you find it confusing, they're just symbols. Grokking applicatives is about understanding how &lt;code&gt;apply&lt;/code&gt; works and what problems it solves, not about this slightly esoteric syntax. I only point it out here as it's fairly common to see them used in this way. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotting-applicatives-in-the-wild"&gt;
  &lt;/a&gt;
  Spotting Applicatives in the wild 🐗
&lt;/h1&gt;

&lt;p&gt;Any time you find yourself needing to call a function with several arguments, but the values you have to hand are wrapped in something like a &lt;code&gt;Result&lt;/code&gt; then applicatives are likely to help you solve the problem.&lt;/p&gt;

&lt;p&gt;More types than just &lt;code&gt;Result&lt;/code&gt; can be made applicative too, all we have to do is define the appropriate &lt;code&gt;apply&lt;/code&gt; function for it. For example we could define it for &lt;code&gt;option&lt;/code&gt;. As we hinted at above, there might be more than one way to implement such a function too, so make sure you've chosen the one with the semantics you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-yourself"&gt;
  &lt;/a&gt;
  Test yourself 🧑‍🏫
&lt;/h1&gt;

&lt;p&gt;See if you can write &lt;code&gt;apply&lt;/code&gt; for the &lt;code&gt;option&lt;/code&gt; type. The answers are below, no peeking until you've had a go first!&lt;/p&gt;

&lt;p&gt;
  Option solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;applyOpt&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is just like for &lt;code&gt;Result&lt;/code&gt; but because we have no additional information in the &lt;code&gt;None&lt;/code&gt; case we can just combine all the patterns that contain at least one &lt;code&gt;None&lt;/code&gt; into a single expression that returns &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;



&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn? 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;By defining an &lt;code&gt;apply&lt;/code&gt; function we were able to &lt;em&gt;apply&lt;/em&gt; arguments that were wrapped in a &lt;code&gt;Result&lt;/code&gt; to a function expecting regular &lt;code&gt;string&lt;/code&gt; arguments. We saw how doing this allowed us to use partial application as a means of progressively accumulating data and this effectively allowed us to write our code in a very similar style to how we'd have written it if we didn't have to deal with invalid inputs. &lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>You might not need recursion</title>
      <author>Stephan Meijer</author>
      <pubDate>Fri, 09 Apr 2021 15:32:07 +0000</pubDate>
      <link>https://dev.to/smeijer/you-might-not-need-recursion-282b</link>
      <guid>https://dev.to/smeijer/you-might-not-need-recursion-282b</guid>
      <description>&lt;p&gt;A recursive function repeatedly calls itself until a condition is met that makes it stop. Recursive functions are tricky to get right. They require a solid exit strategy and will result in an error telling you that the &lt;code&gt;Maximum call stack size exceeded&lt;/code&gt; if you mess up.&lt;/p&gt;

&lt;p&gt;Recursion is often used to process tree-like structures, and sometimes to fetch an unknown number of pages from external paginated APIs. In this article I'm going to show you an alternative for that recursive function, that will improve readability.&lt;/p&gt;

&lt;p&gt;I'm going to take the "fetch from remote" example and will be working with a fetch mock. I'm won't explain this function in detail, but it has the same signature as &lt;code&gt;fetch&lt;/code&gt;, and returns a result existing of &lt;code&gt;nodes&lt;/code&gt;, an &lt;code&gt;endCursor&lt;/code&gt;, and &lt;code&gt;hasMore&lt;/code&gt; to tell us if there are more pages available. The idea is to fetch more pages, as long as &lt;code&gt;hasMore&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endCursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastNode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;lastNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasMore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastNode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;lastNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endCursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasMore&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's okay to directly forget that snippet. I'm just sharing it so that you have all the code that I'm working with, and you'll be able to run it in a repl if you want to. If you've worked with APIs before, this structure is likely to look familiar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursive-function"&gt;
  &lt;/a&gt;
  Recursive function
&lt;/h2&gt;

&lt;p&gt;Here you'll see the most traditional approach for a recursive function. First, we fetch a page from the API. If there are no more pages (indicated by &lt;code&gt;hasMore&lt;/code&gt;), we return the result and walk back up the tree. Otherwise, we call &lt;code&gt;fetchAllNodes&lt;/code&gt; again. Note, that this is the same function as we are currently running. That's what makes it "recursive". The function calls itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAllNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasMore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// recursive call&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAllNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endCursor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;innerNodes&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return statement of this function merges the "direct result" and the "nested result" before it returns. Note that this is not always directly the final result. A function like this walks "down the tree" before it walks back "up the tree". Visualized differently, the call stack looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fetchAllNodes&lt;span class="o"&gt;(&lt;/span&gt;undefined&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# result.nodes = [{ id: 0 }, { id: 1 }]&lt;/span&gt;

  fetchAllNodes&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# result.nodes = [{ id: 2 }, { id: 3 }]&lt;/span&gt;

    fetchAllNodes&lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;# result.nodes = [{ id: 4 }, { id: 5 }]&lt;/span&gt;

      fetchAllNodes&lt;span class="o"&gt;(&lt;/span&gt;5&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# result.nodes = [{ id: 6 }, { id: 7 }]&lt;/span&gt;

        fetchAllNodes&lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="c"&gt;# result.nodes = [{ id: 8 }, { id: 9 }]&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 8 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 9 &lt;span class="o"&gt;}]&lt;/span&gt;

        &lt;span class="c"&gt;# merge results&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 6 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 7 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 8 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 9 &lt;span class="o"&gt;}]&lt;/span&gt;

      &lt;span class="c"&gt;# merge results&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 4 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 5 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 6 &lt;span class="o"&gt;}&lt;/span&gt;, …, …, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 9 &lt;span class="o"&gt;}]&lt;/span&gt;

     &lt;span class="c"&gt;# merge results&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 2 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 3 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 4 &lt;span class="o"&gt;}&lt;/span&gt;, …, …, …, …, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 9 &lt;span class="o"&gt;}]&lt;/span&gt;

  &lt;span class="c"&gt;# merge results&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 0 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 1 &lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 2 &lt;span class="o"&gt;}&lt;/span&gt;, …, …, …, …, …, …, &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;: 9 &lt;span class="o"&gt;}]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see that the fifth call to this function is wrapped by the fourth, which is wrapped by the third, which is wrapped by the second, which is wrapped by the first. &lt;/p&gt;

&lt;p&gt;Now, this is a request chain that completes in 5 calls. Imagine this when fetching pages from a remote with tens, or even hundreds of pages. The call stack keeps growing, and all variables inside that function stay in memory. Not just one page-result, but all of them. Merged, as well as individual. Garbage collection can only clean up after the final result has been returned, and all requests have come to an end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tail-call-optimization"&gt;
  &lt;/a&gt;
  Tail call optimization
&lt;/h1&gt;

&lt;p&gt;Tail call optimization should be able to reduce the performance hunger of the situation above, by optimizing functions that have a function call as a return statement. &lt;/p&gt;

&lt;p&gt;To make use of this optimization, we should return the function call instead of the node array. To be able to still merge the results, we need to adjust the function signature and pass the current result as argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAllNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasMore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;allNodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// recursive tail call&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetchAllNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endCursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;allNodes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though tail call optimization is part of the ECMAScript specification, at the moment of writing, Safari is the only browser that &lt;a href="https://kangax.github.io/compat-table/es6/#test-proper_tail_calls_(tail_call_optimisation)"&gt;has this implemented&lt;/a&gt;. So which style you prefer, is mostly a personal preference at the time being.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iterative"&gt;
  &lt;/a&gt;
  Iterative
&lt;/h1&gt;

&lt;p&gt;Like I already mentioned in the title; &lt;em&gt;you might not need recursion&lt;/em&gt;. The functions above can be rewritten to a more simple while loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAllNodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endCursor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks so simple and obvious when you see it. And yet, there are articles that will explain how to fetch recursively. Compared to the recursive version, the last example has a reduced memory footprint, because we don't need to keep track of all frames and in-between results. This is a single function call, in a single frame. &lt;/p&gt;

&lt;p&gt;When you run into more complex scenarios, it will be easier to add things like error handling, scheduling, retries, or even to add workers that will do stuff in parallel.&lt;/p&gt;

&lt;p&gt;But maybe even more importantly; the loop is way easier to read and understand.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;👋 I'm Stephan, and I'm building &lt;a href="http://rake.red"&gt;rake.red&lt;/a&gt;. If you wish to read more of mine, follow me on &lt;a href="https://twitter.com/meijer_s"&gt;Twitter&lt;/a&gt; or check my work at &lt;a href="https://meijer.ws"&gt;meijer.ws&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>recursion</category>
    </item>
    <item>
      <title>How do you bookmark and take notes?</title>
      <author>Aahnik Daw</author>
      <pubDate>Fri, 09 Apr 2021 15:31:49 +0000</pubDate>
      <link>https://dev.to/aahnik/how-do-you-bookmark-and-take-notes-2h45</link>
      <guid>https://dev.to/aahnik/how-do-you-bookmark-and-take-notes-2h45</guid>
      <description>&lt;p&gt;As developers, we encounter a huge amount of information every single day. &lt;/p&gt;

&lt;p&gt;GitHub repositories, dev.to articles, Medium articles, YouTube videos, blog posts on independent websites, courses, documentation of libraries we are using, and the list goes on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqodCdSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cxdzinxzdierqto2sht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqodCdSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cxdzinxzdierqto2sht.png" alt="platform jungle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need a &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;efficient&lt;/strong&gt; system to bookmark or save interesting stuff. Sometimes we also need to &lt;strong&gt;note down&lt;/strong&gt; things we learned.&lt;/p&gt;

&lt;p&gt;We have all been there. Google searching a piece of content that we encountered earlier, and not getting that easily, as we forgot the specifics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saving everything in a centralized system, with proper categorization and tagging, can help us find stuff faster.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many ways to do it. Like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the native &lt;strong&gt;bookmarking&lt;/strong&gt; feature of our &lt;strong&gt;browsers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Platform-specific&lt;/strong&gt; ways like &lt;em&gt;Star&lt;/em&gt; on GitHub or &lt;em&gt;Save&lt;/em&gt; on dev.to or &lt;em&gt;Save to Watch Later&lt;/em&gt; on YouTube.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;GitHub repository&lt;/strong&gt; can be used to store all the notes as markdown files. A bookmark is also a note. All notes are organized into topic-wise sub-folders.&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;GitHub issues&lt;/strong&gt; to save the content. They are fast to create, and also taggable. GitHub offers a very efficient search across issues.&lt;/li&gt;
&lt;li&gt;A database in a platform like &lt;strong&gt;Notion&lt;/strong&gt; is a great choice. You can use &lt;a href="https://chrome.google.com/webstore/detail/save-to-notion/ldmmifpegigmeammaeckplhnjbbpccmm"&gt;Save to Notion&lt;/a&gt; browser extension to save content to it.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a &lt;strong&gt;bookmarking software&lt;/strong&gt; (most of which are paid) for example :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raindrop.io/"&gt;raindrop.io&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://getpocket.com/"&gt;pocket&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;What system or tools do you use to bookmark and take notes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is it free and open source?&lt;/p&gt;

&lt;p&gt;Did you ever change your technique? Are you satisfied with your technique?&lt;/p&gt;

&lt;p&gt;What are the pros and cons of the tool/technique you use?&lt;/p&gt;

&lt;p&gt;Please answer these questions in the comments. I would love to know how people deal with this thing.&lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Debugando Rust no VS Code</title>
      <author>Roger Torres</author>
      <pubDate>Fri, 09 Apr 2021 15:01:39 +0000</pubDate>
      <link>https://dev.to/rogertorres/debugando-rust-no-vs-code-5ii</link>
      <guid>https://dev.to/rogertorres/debugando-rust-no-vs-code-5ii</guid>
      <description>&lt;p&gt;&lt;em&gt;Versão em inglês &lt;a href="https://dev.to/rogertorres/debugging-rust-with-vs-code-11dj"&gt;aqui&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bem no começo da minha carreira (2008), consegui um trampo de desenvolvedor Oracle PL/SQL. Eu ainda não sei bem o porquê, mas a gente não usava qualquer debugger na época. Pra corrigir os bugs, a guriada adicionava mensagens pelo código, tentando isolar o problema. Os mais safos fazia algo como uma "busca binária", criando mensagens a cada 100 linhas (ex.: entre as linhas 300 e 400), descobrindo entre quais linhas estava o problema e, então, refinavam a busca, colocando mensagens a cada 10 linhas (ex.: 310, 320 e assim vai).&lt;/p&gt;

&lt;p&gt;Quando eu deixei de trabalhar com Oracle e passei a trablhar com SAP (que tem um debugger fantástico) eu descobri um mundo novo. Então, quando chegou a hora de eu trocar de tecnologia de novo (para Rust), eu fui imediatamente atormentado pela pergunta: "eu vou ter debugger lá?"&lt;/p&gt;

&lt;p&gt;Essa é a resposta que eu encontrei.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#o-que-te-trouxe-aqui-debugando-rust-no-vscode"&gt;
  &lt;/a&gt;
  O que te trouxe aqui: debugando Rust no VSCode
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Primeiro&lt;/em&gt;, você precisa de uma extensão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usando &lt;strong&gt;Unix&lt;/strong&gt; (Mac, Linux, ...)? Baixe &lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Usando &lt;strong&gt;Windows?&lt;/strong&gt; Baixe &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"&gt;C/C++&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Por que&lt;/em&gt; você precisa disso??&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Resposta curta&lt;/strong&gt;: O compilador do Rust usa LLVM para interagir com a máquina, e estas extensões permitem que você interaja com o código que roda nesse nível (já que, cê sabe, o Rust é compilado).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resposta longa&lt;/strong&gt;: Ai você me complica. Dá uma olhada nesse site &lt;a href="https://www.infoworld.com/article/3247799/what-is-llvm-the-power-behind-swift-rust-clang-and-more.html"&gt;aqui&lt;/a&gt; (em inglês).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, no seu VSCode, siga esses passos (o meu VSCode tá em inglês, mas acho que é tranquilo pra você se achar, caso o seu esteja em pt-brazuca): &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; &amp;gt; &lt;code&gt;Ok&lt;/code&gt; &amp;gt; &lt;code&gt;Yes&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" alt="First step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" alt="Second step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" alt="Third step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O resultado esperado é a criação do arquivo &lt;code&gt;/.vscode/launch.json&lt;/code&gt; que se parece algo com isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Arquivo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;copiado&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;de&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;um&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;MacOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;X&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lldb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Debug unit tests in library 'yourprogram'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cargo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--no-run"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--package=yourprogram"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"filter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yourprogram"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"kind"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou isso, se você estiver no Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Windows) Launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cppvsdbg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}/target/debug/yourprogram.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"stopAtEntry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"environment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"externalTerminal"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se por algum motivo os arquivos não forem criados para você, podes copiar e colar (a pasta &lt;em&gt;.vscode&lt;/em&gt; fica no mesmo nível da pasta &lt;em&gt;src&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Além do fato de os exemplos serem de SOs diferentes, o primeiro exemplo é de um programa com biblioteca (&lt;em&gt;library crate&lt;/em&gt;; &lt;code&gt;--lib&lt;/code&gt;), já o segundo é com binário (&lt;em&gt;binary crate&lt;/em&gt;; &lt;code&gt;--bin&lt;/code&gt;). Se você tiver os dois no mesmo projeto, você poderá ter duas ou três entradas em &lt;code&gt;configurations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora, teoricamente, você será capaz de adicionar um breakpoint no seu código (clicando na coluna da esquerda para criar esse ponto vermelho).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" alt="Fourth Step"&gt;&lt;/a&gt;Se você não consegue criar o breakpoint, provavelmente é porque você está com essa opção desativada. Para resolver isso, vá em &lt;strong&gt;Configurações&lt;/strong&gt; (&lt;strong&gt;Settings&lt;/strong&gt;) e selecione &lt;strong&gt;Debug&lt;/strong&gt; (no meu caso, está debaixo de &lt;em&gt;Features&lt;/em&gt;—mas você pode digitar "breakpoint" na barra de busca para encontrá-lo rapidamente) e habilite a opção &lt;strong&gt;"Allow Breakpoints Everywhere"&lt;/strong&gt; (&lt;em&gt;"Permitir Pontos de Parada em Todos os Lugares"&lt;/em&gt;, ou coisa parecida).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" alt="Allow Breakpoints Everywhere"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com os breakpoints acionados, aperte &lt;code&gt;F5&lt;/code&gt; ou &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; (que deve funcionar agora que você tem o arquivo). O resultado deve ser algo assim:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" alt="Fifth Step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basicamente, na esquerda, você tem os valores carregados na memória. As coisas são bem simples enquanto você está lidando com tipos como estes inteiros que eu tenho aqui, mas podem ficar complicadas se você estiver debugando um código com coisas como HashMaps. De qualquer forma, bem melhor que nada.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Não funcionou?&lt;/em&gt; Bom, não vai ser a primeira vez que alguém segue um tutorial na internet e não dá certo, né :) Mas comenta aí (mesmo se você tiver resolvido sozinho), porque há grandes chances de outra pessoa ter um problema similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a%C3%A7%C3%B5es-do-debugger"&gt;
  &lt;/a&gt;
  Ações do Debugger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" alt="Actions"&gt;&lt;/a&gt;Pra finalizar, essas são as ações que o debugger te permite (da esquerda pra direita):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/em&gt;: executa o programa até ele alcançar o próximo breakpoint (ou até o fim, se ele não achar nenhum).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F10&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Over&lt;/strong&gt;&lt;/em&gt;: Executa o próximo passo sem entrar nele; por exemplo, se for uma função, ele executa toda ela sem entrar nela.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Into&lt;/strong&gt;&lt;/em&gt;: Executa o próximo passo, mas, ao contrário do F10, entra no subprocesso.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step out&lt;/strong&gt;&lt;/em&gt;: Executa o código até ir para um nível acima; por exemplo, se estiver numa função, ele executa tudo até chegar no código que chamou a função.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Cmd&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Restart&lt;/strong&gt;&lt;/em&gt;: Executa tudo do começo.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Stop&lt;/strong&gt;&lt;/em&gt;: Interrompe a execução.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E é isso. Agora você já é mais safo que a guriada do meu primeiro emprego. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A foto da capa é do &lt;a href="https://unsplash.com/photos/ljDl1LoPxRY"&gt;Danilo Batista&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>debug</category>
      <category>vscode</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>The useEffect Cheatsheet</title>
      <author>M. Bagher Abiat</author>
      <pubDate>Fri, 09 Apr 2021 14:59:18 +0000</pubDate>
      <link>https://dev.to/aslemammad/the-useeffect-cheatsheet-4e9i</link>
      <guid>https://dev.to/aslemammad/the-useeffect-cheatsheet-4e9i</guid>
      <description>&lt;p&gt;When I started ReactJS, I really enjoyed my first steps, component, props and many fun things about react. One of that features was &lt;code&gt;useEffect&lt;/code&gt;; it was fun but complicated for me while I struggled to learn it. &lt;/p&gt;

&lt;p&gt;Now I want to share my mental model in this small cheat sheet to help you learn &lt;code&gt;useEffect&lt;/code&gt; better or own a better mental model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#philosophy"&gt;
  &lt;/a&gt;
  Philosophy
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; is not a lifecycle hook. It's a mechanism for synchronizing side-effects (&lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, ...) with the state of your app. &lt;a href="https://epicreact.dev/myths-about-useeffect"&gt;EpicReact.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main goal is not using &lt;code&gt;useEffect&lt;/code&gt; for the component lifecycle but using it to do stuff when state-changes (re-renders).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A: run whenever the deps changes&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// B: Optional, runs before 1, we call this the clean-up function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// deps is Optional too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt;'s running steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: Run A&lt;/li&gt;
&lt;li&gt;2: Wait for new state changes (component re-renders)&lt;/li&gt;
&lt;li&gt;3: If the &lt;code&gt;deps&lt;/code&gt; changed

&lt;ul&gt;
&lt;li&gt;Run B to cleanup the previous render's side-effects&lt;/li&gt;
&lt;li&gt;Go to 2&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;No dependency&lt;/strong&gt;: the side-effect function (A) will run on every state-change (re-render)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on everything, I'll run on every re-render&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Empty Array&lt;/strong&gt;: There's nothing to listen to its changes, so it'll run the side-effect function just one time at the state initialization (first render)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on nothing, I'll run just one time&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Non-Empty Array&lt;/strong&gt;: The side-effect function runs on every dependency changes (at least one of the dependencies)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on state1, state2 and prop1&lt;/span&gt;
  &lt;span class="c1"&gt;// I'll run on every change of these dependencies&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#each-render-has-its-own-effects"&gt;
  &lt;/a&gt;
  Each Render Has Its Own Effects
&lt;/h2&gt;

&lt;p&gt;I really love the "&lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/#each-render-has-its-own-effects"&gt;Each Render has its own Effects&lt;/a&gt;" title; I think almost all hooks rely on that title. We should note that every render has its own function body and its own values. The same goes for the side-effect function; check this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's do some fake state changes and see what happens to the side-effect function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in the first render, `count` is 0&lt;/span&gt;
&lt;span class="c1"&gt;// The side-effect function is going to be like this&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// assume we change `count` to 1 (setCount(1)), next render is like that&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// and so on...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's how &lt;code&gt;useEffect&lt;/code&gt; works around dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Aslemammad/Cheatsheets/blob/master/useEffect.pdf"&gt;PDF&lt;/a&gt; on GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this Cheatsheet. Don't forget to share and send reactions to my article. If you wanted to tell me something, tell me on &lt;a href="https://twitter.com/aslemammadam"&gt;Twitter&lt;/a&gt; or mention me anywhere else, You can even subscribe to my &lt;a href="https://bugged.dev/newsletter"&gt;newsletter&lt;/a&gt; and follow me on &lt;a href="https://github.com/Aslemammad"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Best UX design for your affiliate top lists</title>
      <author>Hugh Olssen</author>
      <pubDate>Fri, 09 Apr 2021 14:58:28 +0000</pubDate>
      <link>https://dev.to/hugholssen/best-ux-design-for-your-affiliate-top-lists-432n</link>
      <guid>https://dev.to/hugholssen/best-ux-design-for-your-affiliate-top-lists-432n</guid>
      <description>&lt;p&gt;A top list is, essentially, a collection of external website hyperlinks that are ranked according to some order or principle. The websites included on a top list may be ranked in various ways and for many different reasons, but most often are ranked in order of popularity. External website owners will seek inclusion on the top list to drive visitors to their website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do you need an affiliate top list?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Toplists are a great way of collecting and ranking websites that deal with a similar topic in one place, in a way that is easy for end-users to find them. Toplists also have the benefit of being listed in a ranked format, which is useful from a user engagement perspective as it tends to drive click-throughs. Generally speaking, the higher a website is ranked, the more likely it is to gain visitors. This is because users tend to pay attention to higher-ranked websites first, before visiting lower-ranked sites.&lt;/p&gt;

&lt;p&gt;Another great feature of top lists is how flexible they are. As a website designer, you have complete control over what principle you utilize to order your top list. This means you can easily tailor a top list to the specific needs of your website. From a design perspective, this is incredibly useful and makes top lists a very flexible resource in the designer’s toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principles of UX design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given how flexible top lists are, this makes them a designer's dream from a UX perspective! However, just because they are flexible doesn’t mean you have free rein as a designer to format and shape them in whatever style you think best. As always with UX design, while there aren’t necessarily any hard and fast rules you always need to strictly abide by, there are nevertheless some &lt;a href="https://99designs.ie/blog/web-digital/ux-design-principles/"&gt;general principles&lt;/a&gt; you should keep in mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User focus&lt;/strong&gt;: With UX design, the experience of the end-user when using the website is the most important factor to keep in mind. Try and put yourself in their shoes when designing a top list: what value will it add to their browsing experience? If it won’t add any value, maybe it’s time to rethink your design strategy!&lt;br&gt;
&lt;strong&gt;Consistency&lt;/strong&gt;: Another important principle to keep in mind is consistency. Make sure the top list design fits in with the overall look and feel of the website. Ensure the aesthetic, design and interface are consistent with the host site.&lt;br&gt;
&lt;strong&gt;Accessibility&lt;/strong&gt;: Given that you want your top list to be usable by as many people as possible, make sure it is also accessible to as many individuals as possible! This could include making sure that the website is accessible to people with limited eyesight, older users who may be less experienced with the internet, or even users who might be color-blind. Ultimately, focusing on accessibility will ensure you maximize your chances of user engagement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online casino affiliates are known for good CRO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you are crafting online content, the goal is to achieve a solid CRO score. CRO – also known as Conversion Rate Optimization – refers to the process of optimizing a host website with a view towards increasing the likelihood that users will click through to the target website. The hope is that if you increase the probability that users will click through to a specific website, once they are there, their visit will be converted into the desired engagement. This might be in the form of an account sign-up or a product sale of some kind.&lt;/p&gt;

&lt;p&gt;When looking to &lt;a href="https://www.bluewinston.com/dictionary/cro-conversion-rate-optimization/"&gt;optimize your CRO&lt;/a&gt;, you should pay attention to both quantitative metrics, qualitative metrics, and to the design of the website itself. Design is a particularly important aspect, as to how information is presented will have a significant impact on the likelihood that a visit by a user will be converted. This is especially true of top lists, where the design of the top list and the surrounding website will have an impact on how the legitimacy of the target website is perceived.&lt;/p&gt;

&lt;p&gt;In terms of which websites tend to have a solid CRO rate, &lt;a href="https://www.casinospesialisten.net/"&gt;https://www.casinospesialisten.net/&lt;/a&gt; is known to score particularly well. There are a number of reasons for this, although it is primarily because would-be casino users tend to use affiliate websites to find information about casino platforms and for advice on which to sign up at. &lt;br&gt;
The online casino space is particularly crowded these days, and affiliate websites present a good way to provide users with information about what online casino to register with. Affiliate top lists are therefore a great way to help users navigate this space.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>bestofdev</category>
      <category>uxdesign</category>
    </item>
    <item>
      <title>Make your very own VSCode Theme and Publish🎉!</title>
      <author>Georgey</author>
      <pubDate>Fri, 09 Apr 2021 14:45:19 +0000</pubDate>
      <link>https://dev.to/geobrodas/make-your-very-own-vscode-theme-and-publish-4fj2</link>
      <guid>https://dev.to/geobrodas/make-your-very-own-vscode-theme-and-publish-4fj2</guid>
      <description>&lt;p&gt;VSCode has become the most popular Code editor and is the most ideal for Web Developers. In the Stack Overflow 2019 Developer Survey, Visual Studio Code was ranked the most popular developer environment tool, with 50.7% of 87,317 respondents reporting that they use it. The reason why VS Code is preferred is due to its customization. &lt;/p&gt;

&lt;p&gt;The IDE is highly customizable. Why is this so? VSCode is built using Github's Electron. What's so special? Electron is a web technology that enables you to build desktop apps using just plain HTML, CSS, and Javascript, with cross-platform compatibility. How cool is that! That means every component/element that you see on the VS Code editor is customizable. VSCode themes are a craze amongst developers. Themes match the person's persona, and who would not like to make one!!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-1-setting-up-yo-codegenerator"&gt;
  &lt;/a&gt;
  Step 1: Setting up Yo Code-Generator
&lt;/h3&gt;

&lt;p&gt;Yeoman Code-generator will help you get started with your first VSCode theme starting files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T4gsI0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617873376370/QC4IGoelP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T4gsI0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617873376370/QC4IGoelP.jpeg" alt="yocode.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm install -g yo generator-code&lt;/code&gt; to install the generator globally on your local device. I would recommend working on the basic Windows Powershell, as I was facing difficulties in installing it in the bash shell. &lt;/li&gt;
&lt;li&gt;Finally, run &lt;code&gt;yo code&lt;/code&gt; after you move to the directory you want to work on.&lt;/li&gt;
&lt;li&gt;You will be prompted with a few options to start with. Since we want to make a new Theme, move the arrow keys down and select &lt;strong&gt;New Color theme&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hh3bKCDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/microsoft/vscode-generator-code/main/yocode.png" alt="yo-code-prompt"&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Start Fresh&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBQ0y64c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/api/extension-guides/color-theme/yocode-colortheme.png" alt="yo-code-setup-2"&gt;
&lt;/li&gt;
&lt;li&gt;Choose a Dark or Light theme as per your preference.&lt;/li&gt;
&lt;li&gt;Enter in the name of the theme and other fields (optional).&lt;/li&gt;
&lt;li&gt;Enable Git repository when prompted to. 
&amp;gt; Enabling a git repository will help you afterward if you want to publish changes in your theme extension and release different versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-2-setting-up-a-local-debugging-environment"&gt;
  &lt;/a&gt;
  Step 2: Setting up a local debugging environment
&lt;/h3&gt;

&lt;p&gt;It's time to get to the fun part!&lt;/p&gt;

&lt;p&gt;If you go to your &lt;code&gt;themes/theme_name.json&lt;/code&gt; file, you will encounter a long file with 2015 lines of code. This is your default theme for VSCode which you must have seen when you first installed VSCode. &lt;/p&gt;

&lt;p&gt;Now press F5, which will open up the debugger window, and you should get another VSCode window opened with the default theme. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If not go to&lt;/strong&gt;: Run -&amp;gt; Add Configuration. You should get a file opened up with the name launch.json, with the suggestion popup on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IbS78AAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617876217192/KjOYGnydvp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IbS78AAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617876217192/KjOYGnydvp.jpeg" alt="debug.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go down to VSCode Extension development -&amp;gt; Save the File -&amp;gt; Rerun the debugger ( F5 ).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should work perfectly now! Now every change you make in your &lt;code&gt;theme_name.json&lt;/code&gt; file will be reflected in the debugger window.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're wondering which theme I'm using, it's the one I made the same way. Do check it out👇 &lt;br&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=GeoBrodas.geobrodas-theme-red-doyoubleed"&gt;Install theme&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/GeoBrodas/doyoubleed"&gt;GitHub Repo&lt;/a&gt; in case you get stuck&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-3-gui-for-customizing-your-theme"&gt;
  &lt;/a&gt;
  Step 3: GUI for customizing your theme
&lt;/h3&gt;

&lt;p&gt;Yeah, I know right! GUI for customizing! That will just speed up our development process 10x times.  Make a free account at &lt;a href="https://themes.vscode.one/"&gt;https://themes.vscode.one/&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7aSj7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887591369/6v30v34XI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7aSj7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887591369/6v30v34XI.jpeg" alt="gui.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new theme -&amp;gt; Select Dark/Light -&amp;gt; Name your file the same you named the extension file in VSCode. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcrLRdPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887707621/GULS7ZiQd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcrLRdPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887707621/GULS7ZiQd.jpeg" alt="theme-dashboard.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see a lot of CSS values here, all you got to do is select your custom color palette. One site I would highly recommend is &lt;a href="https://colorhunt.co/"&gt;https://colorhunt.co/&lt;/a&gt; . You can select the color palette of your choice and start customizing the theme. &lt;/p&gt;

&lt;p&gt;After customizing everything, save the theme -&amp;gt; Go to &lt;strong&gt;Your Themes&lt;/strong&gt; -&amp;gt; Download. The file that gets downloaded is the &lt;code&gt;theme_name.json&lt;/code&gt; you made in the &lt;code&gt;themes/theme_name.json&lt;/code&gt; directory. Simply open the file you just downloaded, copy the content and paste it into your VSCode file.&lt;/p&gt;

&lt;p&gt;Now this GUI is still under development, so there can be a lot of bugs, some of which I have faced too, most common of them to be properties not getting saved. I have mailed the developer about the bug and he's working on it! Till then you can search for the property you want to edit in the VSCode file by clicking &lt;code&gt;Ctrl + F&lt;/code&gt; -&amp;gt; Search the property -&amp;gt; Change the hex code. The changes you make will be reflected in the VSCode debugger window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIjhbPio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888327015/-6Xc4ufnt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIjhbPio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888327015/-6Xc4ufnt.jpeg" alt="search.JPG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4-creating-personal-acess-tokens-and-setting-vscode-marketplace"&gt;
  &lt;/a&gt;
  Step 4: Creating Personal Acess tokens and setting VSCode MarketPlace.
&lt;/h3&gt;

&lt;p&gt;We are almost there, all that's left is to make few changes in the package.json file in the root directory. But before that, you need to make an account at Microsoft Azure DevOps. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to &lt;a href="https://dev.azure.com"&gt;https://dev.azure.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click here👇 and head to Personal Acess tokens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cy5mNuEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888814355/Kn1mhxD9E.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cy5mNuEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888814355/Kn1mhxD9E.jpeg" alt="azure.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name the token as per your choice.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;All Accessible Organization&lt;/strong&gt; in Organization.&lt;/li&gt;
&lt;li&gt;Select expiration to &lt;strong&gt;Custom Defined&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Finally, click &lt;strong&gt;Show All Scopes&lt;/strong&gt; below and look for MarketPlace.&lt;/li&gt;
&lt;li&gt;Check the option &lt;strong&gt;Manage&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;Create&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy the personal access token you just received as you won't be able to view it hereafter.&lt;/p&gt;

&lt;p&gt;Next, go to &lt;a href="https://marketplace.visualstudio.com/"&gt;https://marketplace.visualstudio.com/&lt;/a&gt; and click on &lt;strong&gt;Publish Extensions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAJ9JWM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617889296168/CYeqoc4Yl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAJ9JWM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617889296168/CYeqoc4Yl.jpeg" alt="csmarket.JPG"&gt;&lt;/a&gt;&lt;br&gt;
Head over and fill up your details. Do remember the Publisher ID you make. We will need this in the next step.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5-publishing-your-vscode-theme"&gt;
  &lt;/a&gt;
  Step 5: Publishing your VSCode theme
&lt;/h3&gt;

&lt;p&gt;Before that let's do a final check. Make sure the &lt;code&gt;"publisher"&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; file matches your publisher ID&lt;/p&gt;

&lt;p&gt;For publishing, we will use a command-line tool by visual studio code itself called &lt;code&gt;vsce&lt;/code&gt; abbreviation for Visual Studio Code Extension. &lt;/p&gt;

&lt;p&gt;Start a terminal session :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install with &lt;code&gt;npm install -g vsce&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now let's login to the MarketPlace account we just created with  &lt;code&gt;vsce login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will be prompted to enter the personal access token we created in &lt;strong&gt;Step 4&lt;/strong&gt;, enter it.
&amp;gt; Now you are logged in to your marketplace account. Hereafter, every time you start a new terminal session to publish your changes, don't forget to log in!&lt;/li&gt;
&lt;li&gt;It's time to finally publish! Enter &lt;code&gt;vsce package&lt;/code&gt; to compile the file into a &lt;code&gt;.vsix&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;vsce publish&lt;/code&gt; to launch your theme on to marketplace!🚀&lt;/li&gt;
&lt;li&gt;Check your marketplace account you created to get details on the verification process.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Entire documentation for this step is available &lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-6-publishing-newer-versions"&gt;
  &lt;/a&gt;
  Step 6: Publishing newer versions
&lt;/h3&gt;

&lt;p&gt;If you search up your theme on the VSCode extensions, you should find your theme!&lt;br&gt;
Now it's likely that the changes you made may not be perfect, and you want to publish those changes to your existing extension.&lt;/p&gt;

&lt;p&gt;All you need to do is, make the changes and enter &lt;code&gt;vsce publish &amp;lt;version change&amp;gt;&lt;/code&gt;&lt;br&gt;
Before this make sure you're git remote repository is also up to date.&lt;br&gt;
There are three types of the version you can publish :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have made very few changes enter &lt;code&gt;vsce publish patch&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If relatively more changes then enter &lt;code&gt;vsce publish minor&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If huge developments are made then enter &lt;code&gt;vsce publish major&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources:
&lt;/h4&gt;

&lt;p&gt;Check out Gary Simon's video and Jessica Chan's video on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uQoYH2wLlhY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pGzssFNtWXw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That's all for now! It's good to see you have managed to complete all the steps. &lt;br&gt;&lt;br&gt;
If you did like the Blog, do give a ❤, retweet @&lt;a href="https://twitter.com/BrodasGeo"&gt;BrodasGeo&lt;/a&gt; &lt;br&gt;&lt;br&gt;
If you are facing any errors do let me know in the comments. &lt;br&gt;&lt;br&gt;
Until next time, Adios🤘&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Credits: Icon made by FreePik from &lt;a href="https://flaticon.com"&gt;https://flaticon.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>tutorial</category>
      <category>design</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>Postgres Triggers</title>
      <author>Siddhant Kumar</author>
      <pubDate>Fri, 09 Apr 2021 14:37:43 +0000</pubDate>
      <link>https://dev.to/siddhantk232/postgres-triggers-5h0b</link>
      <guid>https://dev.to/siddhantk232/postgres-triggers-5h0b</guid>
      <description>&lt;p&gt;Today in this blog, I want to talk about Postgres triggers. I will also go through an example use case to learn how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The Scenario
&lt;/h2&gt;

&lt;p&gt;I have an e-commerce app to sell books and I am implementing the cart functionality in the database. So, there is a carts table that stores unique cart entries per user and a books table. For cart items, we have another table, &lt;code&gt;carts_books&lt;/code&gt;. The &lt;code&gt;carts&lt;/code&gt; and &lt;code&gt;carts_books&lt;/code&gt; are using a many-to-many relation. So, A cart can have many books, and a book can be used in many carts.&lt;/p&gt;

&lt;p&gt;Whenever a row is inserted or updated in the &lt;code&gt;carts_books&lt;/code&gt; table, I want to calculate the total price of the cart used. I also want to take the &lt;code&gt;multiplier&lt;/code&gt; column of the &lt;code&gt;carts_books&lt;/code&gt; table into account. This &lt;code&gt;multiplier&lt;/code&gt; column is the quantity of a single book. That means I am allowing a customer to buy many copies of a book.&lt;/p&gt;

&lt;p&gt;Let's use Postgres triggers to solve this problem. Before that, below is the list of columns of every table discussed so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-schema"&gt;
  &lt;/a&gt;
  The schema
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                               Table "public.carts"
   Column    |           Type           | Collation | Nullable |      Default
-------------+--------------------------+-----------+----------+--------------------
 created_at  | timestamp with time zone |           | not null | now()
 updated_at  | timestamp with time zone |           | not null | now()
 archived_at | timestamp with time zone |           |          |
 amount      | numeric                  |           | not null |
 status      | text                     |           | not null | 'ENQUEUED'::text
 user_id     | text                     |           | not null |
 id          | uuid                     |           | not null | gen_random_uuid()


                                     Table "public.books"
   Column    |           Type           | Collation | Nullable |              Default
-------------+--------------------------+-----------+----------+-----------------------------------
 created_at  | timestamp with time zone |           | not null | now()
 updated_at  | timestamp with time zone |           | not null | now()
 archived_at | timestamp with time zone |           |          |
 name        | text                     |           | not null |
 price       | numeric                  |           | not null |
 user_id     | bigint                   |           | not null |
 id          | bigint                   |           | not null | nextval('books_id_seq'::regclass)
 description | text                     |           | not null |

              Table "public.carts_books"
   Column   |  Type   | Collation | Nullable | Default
-----------------+---------+-----------+----------+---------
 book_id    | bigint  |           | not null |
 multiplier | integer |           | not null |
 user_id    | text    |           | not null |
 cart_id    | uuid    |           | not null |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;We want to run a procedure (also known as a function) after a row in the table&lt;code&gt;carts_books&lt;/code&gt; is INSERTED or UPDATED.&lt;/p&gt;

&lt;p&gt;For this let's create two Postgres triggers, one for UPDATE and the other for INSERT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;update_cart_price&lt;/span&gt;
  &lt;span class="k"&gt;AFTER&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt;
  &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt;
  &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; 
&lt;span class="s1"&gt;'update the price of the related cart based on the updated cart item(s) in relation carts_books'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;calculate_cart_price&lt;/span&gt;
  &lt;span class="k"&gt;AFTER&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt;
  &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt;
  &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;calculate_cart_price&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; 
&lt;span class="s1"&gt;'update the price of the related cart based on the updated cart item(s) in relation carts_books'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is the code that creates two Postgres triggers. Let's understand the syntax and what each clause used above means.&lt;/p&gt;

&lt;p&gt;To create a Postgres trigger, we want to tell Postgres about the following things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Name of the trigger. In this case, I have used names, &lt;code&gt;update_cart_price&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;calculate_cart_price&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you want the code to run? I want to know the values that are inserted, &lt;br&gt;
for this, I have to use the &lt;code&gt;AFTER INSERT&lt;/code&gt; and the &lt;code&gt;AFTER UPDATE&lt;/code&gt; clause.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you want to run this trigger? There are two options, one is to run this trigger for each affected row. Another option is to run the trigger `per statement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you want to run? I have these triggers to run the procedure called &lt;code&gt;update_cart_price()&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;You must create the function before using it in a function.&lt;br&gt;
A function must return &lt;code&gt;TRIGGER&lt;/code&gt; in order to be used in a trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The function that I want to run on these triggers is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;/p&gt;

&lt;p&gt;CREATE OR REPLACE FUNCTION public.update_cart_price ()&lt;br&gt;
  RETURNS TRIGGER&lt;br&gt;
  AS $$&lt;br&gt;
DECLARE&lt;br&gt;
  item record;&lt;br&gt;
  new_amount numeric := 0;&lt;br&gt;
BEGIN&lt;br&gt;
  FOR item IN&lt;br&gt;
  SELECT&lt;br&gt;
    price,&lt;br&gt;
    multiplier&lt;br&gt;
  FROM&lt;br&gt;
    carts_books&lt;br&gt;
    JOIN books ON book_id = books.id&lt;br&gt;
  WHERE&lt;br&gt;
    cart_id = NEW.cart_id LOOP&lt;br&gt;
      new_amount := new_amount + (item.price * item.multiplier);&lt;br&gt;
    END LOOP;&lt;br&gt;
  UPDATE&lt;br&gt;
    carts&lt;br&gt;
  SET&lt;br&gt;
    amount = new_amount&lt;br&gt;
  WHERE&lt;br&gt;
    id = NEW.cart_id;&lt;br&gt;
  RETURN new;&lt;br&gt;
END;&lt;br&gt;
$$&lt;br&gt;
LANGUAGE plpgsql;&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This function selects the price and multiplier of all the books used inside the cart. It then updates the cart's amount column to reflect the updated amount.&lt;/p&gt;

&lt;p&gt;The data of the changed row is made available through the &lt;code&gt;new&lt;/code&gt; record.&lt;/p&gt;

&lt;p&gt;Also, the function cannot use plain &lt;code&gt;SQL&lt;/code&gt; language, you must use a procedural&lt;br&gt;
language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-conclusion"&gt;
  &lt;/a&gt;
  The Conclusion
&lt;/h2&gt;

&lt;p&gt;Postgres triggers make it easy to execute small business logic on data changes. &lt;/p&gt;

&lt;p&gt;Also, we do not need to care about the network latency that we would face if we execute the same logic in a different service (a nodejs app for example).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-reads"&gt;
  &lt;/a&gt;
  Good Reads
&lt;/h3&gt;

&lt;p&gt;In addition to this post, I also recommend reading these to know more about Postgres&lt;br&gt;
triggers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/13/trigger-definition.html"&gt;Official Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/13/trigger-datachanges.html"&gt;Data visibility in trigger functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TUTORIAL: How to use GitHub in Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 09 Apr 2021 14:21:31 +0000</pubDate>
      <link>https://dev.to/codesphere/tutorial-how-to-use-github-in-codesphere-12b5</link>
      <guid>https://dev.to/codesphere/tutorial-how-to-use-github-in-codesphere-12b5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Codesphere is a simple and powerful development platform that combines a collaborative IDE, GitOps, and cloud services to streamline the development of scalable web applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nowadays it's hard to imagine development without using git. That's why in today's article we'll show you how to use Github in Codesphere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloning-from-github"&gt;
  &lt;/a&gt;
  Cloning from Github
&lt;/h2&gt;

&lt;p&gt;Once you are signed in, navigate to the My Apps menu, and press the New App button. You can then click on Clone Repository, where you will be prompted to enter the Repository URL for the Repo you want to clone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UB2BbSAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydp4xl9z0llstwxechwo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UB2BbSAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydp4xl9z0llstwxechwo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For GitHub, the URL for a repository can be found by clicking on the green Code button and copying the HTTPS URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1K-PqR7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmwtogq6gq78yrs6jszu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1K-PqR7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmwtogq6gq78yrs6jszu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply copy that URL back into Codesphere and press "Continue". After choosing a name and billing plan, Codesphere will clone your GitHub Repository, allowing you to use Codesphere to develop and deploy your web application.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>github</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>5 React Libraries You Should Be Using in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Fri, 09 Apr 2021 14:21:30 +0000</pubDate>
      <link>https://dev.to/reedbarger/5-react-libraries-you-should-be-using-in-2021-4n4f</link>
      <guid>https://dev.to/reedbarger/5-react-libraries-you-should-be-using-in-2021-4n4f</guid>
      <description>&lt;p&gt;&lt;em&gt;📣 This post originally appeared on &lt;a href="https://reedbarger.com"&gt;ReedBarger.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at five React libraries that serve as a great addition to any React project you're looking to build in 2021 and beyond.&lt;/p&gt;

&lt;p&gt;The libraries I have chosen were selected because not only do they help us build functional and impressive-looking applications, but they also allow us to do so, faster, easier, and with less code.&lt;/p&gt;

&lt;p&gt;In this guide I'm going to show you how to get up and running with each of these libraries from scratch and integrate them into your projects today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Looking to build amazing real-world React projects with the best libraries? Check out the &lt;a href="https://reactbootcamp.com"&gt;React Bootcamp&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-react-query"&gt;
  &lt;/a&gt;
  1. React Query
&lt;/h2&gt;

&lt;p&gt;To fetch data with React is generally a process that involves a lot of code.&lt;/p&gt;

&lt;p&gt;You often need to use the useEffect hook in combination with useState to manage the fetched data. This requires a lot of boilerplate that we have to write in every component in which we want to fetch data.&lt;/p&gt;

&lt;p&gt;A great library to use to cut down on the code we write for making network requests with React is React Query. All of this React code that we had to write before can be replaced with the hook &lt;code&gt;useQuery&lt;/code&gt;, from which we get back all of the data that we need without having to declare a state variable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9NTsgQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-query-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9NTsgQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-query-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, making data fetching easier only covers a small slice of what React Query does. What makes it a very powerful library is that it caches (saves) requests that we make, so in many cases if we've requested data before, we don't have to make another request, we can just read it from the cache.&lt;/p&gt;

&lt;p&gt;This is immensely helpful to cut down repetition in our code, in the load we put on our API, and in managing our overall app state. If you pick any library to start adding to your projects today out of this list, make it React Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ant-design"&gt;
  &lt;/a&gt;
  2. Ant Design
&lt;/h2&gt;

&lt;p&gt;When it comes to making impressive looking React apps, there are many helpful component libraries that allow us to quickly style our applications with the help of pre-made components.&lt;/p&gt;

&lt;p&gt;There are lots of component libraries out there, but few that are as sophisticated and well designed as one called Ant Design. If you can think of a type of component to include within your React app interface and design, Ant Design almost certainly has it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---s6c49vu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/antd-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---s6c49vu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/antd-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use a component library like Ant Design speeds up our development time by reducing the amount of often unreliable styles that we have to write ourselves. Additionally, these pre-made components provide functionality that is often redundant to create ourselves, such as a common modal or tooltip. In most cases, we should opt for the reliable, proven solution rather than attempting to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;If you're thinking of building an application today and are looking for a solid component library, go with Ant Design. It has virtually every feature that you would need out of a component library, plus great customizability that serves any app feature you might consider implementing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-zustand"&gt;
  &lt;/a&gt;
  3. Zustand
&lt;/h2&gt;

&lt;p&gt;When it comes to managing state, React developers are often given two familiar choices: Redux or React Context.&lt;/p&gt;

&lt;p&gt;Redux has been the go to third-party library for React developers to manage state, but with the arrival of React Context in React version 16, we have an easier way to manage state by passing it around our component tree.&lt;/p&gt;

&lt;p&gt;If you're looking for a library with all of the functionality and power of Redux, with the simplicity of React Context, look at the library Zustand. It's incredibly easy to get started with, as you can see in the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cP2Cqee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/zustand-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cP2Cqee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/zustand-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It involves using the &lt;code&gt;create&lt;/code&gt; function to make a dedicated state object that can include any state values and functions to update that state as we need. It can all be created within a few lines of code.&lt;/p&gt;

&lt;p&gt;Plus, there's no need to use any context provider to pass your state to your app components. All you need to do is create a slice of state, call that created state as a hook, and receive whatever state variables and functions you've declared on the object within your React components.&lt;/p&gt;

&lt;p&gt;Give Zustand a shot the next time you are looking for a more complex state solution like Redux for your application--you'll love it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-hook-form"&gt;
  &lt;/a&gt;
  4. React Hook Form
&lt;/h2&gt;

&lt;p&gt;When it comes to building forms in React, all developers know how tedious it can be to perform basic tasks like validating inputs, plus managing all the form and error state.&lt;/p&gt;

&lt;p&gt;Perhaps the most user-friendly form library available today is React Hook Form. All the functionality that you need in a form library is provided in one simple hook, called &lt;code&gt;useForm&lt;/code&gt; and enables you to create as sophisticated forms as you like.&lt;/p&gt;

&lt;p&gt;It takes control of managing our form state internally, gives us easy helpers to display errors for the appropriate input, and applies validation rules without any external libraries such as Yup, along with handling submission of our form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeyWfa4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-hook-form-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeyWfa4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-hook-form-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to making building functional forms, you want a library that's easy to use and does not add too much code to our components. According to these two criteria, React Hook Form is arguably the best React form library out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-react-responsive"&gt;
  &lt;/a&gt;
  5. React Responsive
&lt;/h2&gt;

&lt;p&gt;There's no question--every React application should be created for users on different devices and needs to be responsive. Meaning, it needs to adjust the styles and appearance according to the screen size or device that your users are on.&lt;/p&gt;

&lt;p&gt;While media queries have typically been used in CSS stylesheets to hide and display different elements, the best React-based library to manage visibility or styles of React components is React Responsive.&lt;/p&gt;

&lt;p&gt;It gives us a convenient &lt;code&gt;useMediaQuery&lt;/code&gt; hook that enables us to pass in very precise conditions to determine whether users on a certain type of screen are using a certain device, they'll be able to adjust our user interface accordingly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lg1ZSBiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-responsive.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lg1ZSBiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-responsive.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For making any React applications responsive without the use of CSS, be sure to check out the React Responsive library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
