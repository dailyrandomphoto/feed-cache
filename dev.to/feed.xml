<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Azure Update Management</title>
      <author>James Cook</author>
      <pubDate>Mon, 07 Jun 2021 06:40:59 +0000</pubDate>
      <link>https://dev.to/officialcookj/azure-update-management-1p89</link>
      <guid>https://dev.to/officialcookj/azure-update-management-1p89</guid>
      <description>&lt;p&gt;An Azure Automation Account has a feature called Update Management that can manage your Windows and Linux Operating System (OS) updates for Azure, On-Premise and other third party Cloud environments. In this post I will explain what Update Management is, how to switch it on and how to add your servers to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-update-management"&gt;
  &lt;/a&gt;
  What is Update Management
&lt;/h2&gt;

&lt;p&gt;Update Management is a toggle on feature of Azure Automation Account. Within Update Management, you can add servers from multiple environments and manage both Windows and Linux updates. Microsoft does have a supported Operating Systems list &lt;a href="https://docs.microsoft.com/en-us/azure/automation/update-management/overview#supported-operating-systems"&gt;here&lt;/a&gt; but I will outline in brief what is supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 2012, 2012 R2, 2016 (excl. core), 2019&lt;/li&gt;
&lt;li&gt;Centos 6, 7, 8 (excl. 7.5)&lt;/li&gt;
&lt;li&gt;Red Hat Enterprise 6, 7, 8&lt;/li&gt;
&lt;li&gt;SUSE Enterprise 12, 15, 15,1&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04, 16.04, 18.04&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From within Update Management you can assess servers for missing updates, configure a schedule for updates to run within a maintenance window and configure what to include/exclude from the update cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-enable-update-management"&gt;
  &lt;/a&gt;
  How do I enable Update Management
&lt;/h2&gt;

&lt;p&gt;To enable Update Management you need to create a Automation Account and Log Analytics Workspace. Once you have both of these created:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;Automation Account&lt;/strong&gt; you created&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Update Management&lt;/strong&gt; from the left side menu&lt;/li&gt;
&lt;li&gt;Here you are presented with a configure window. Select the &lt;strong&gt;Log Analytics Workspace&lt;/strong&gt; you created and click &lt;strong&gt;Enable&lt;/strong&gt; to complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Update Management is now enabled and will monitor any servers that have been configured to use the Log Analytics Workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-add-azure-vms"&gt;
  &lt;/a&gt;
  How do I add Azure VMs
&lt;/h2&gt;

&lt;p&gt;To add an Azure VM, all you need to do is either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From within the &lt;strong&gt;Update Management&lt;/strong&gt; blade within the &lt;strong&gt;Automation Account&lt;/strong&gt; resource, select &lt;strong&gt;Add Azure VM&lt;/strong&gt; from the top menu bar&lt;/li&gt;
&lt;li&gt;Select a VM from the list provided (note that you may have to move Log Analytics Workspaces if it reports the VM using an alternative).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From within the &lt;strong&gt;Virtual Machine* select the **Guest + host updates&lt;/strong&gt; blade from the left side menu&lt;/li&gt;
&lt;li&gt;Now select the &lt;strong&gt;Log Analytics Workspace&lt;/strong&gt; and the &lt;strong&gt;Automation Account&lt;/strong&gt; to be used for updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-add-onpremise-servers"&gt;
  &lt;/a&gt;
  How do I add On-Premise Servers
&lt;/h2&gt;

&lt;p&gt;First you need to install the Log Analytics agent onto either &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/agents/agent-windows"&gt;Windows&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/agents/agent-linux"&gt;Linux&lt;/a&gt;. When running the installer you will be asked to select a Log Analytics Workspace, select the one you created earlier.&lt;/p&gt;

&lt;p&gt;Once the installer completes, allow 30 minutes for it to appear in Azure. To add the server to Update Management:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From within the &lt;strong&gt;Update Management&lt;/strong&gt; blade within the &lt;strong&gt;Automation Account&lt;/strong&gt; resource, select &lt;strong&gt;Add non-Azure VM&lt;/strong&gt; from the top menu bar&lt;/li&gt;
&lt;li&gt;Select a server from the list provided.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-type-of-update-can-i-manage"&gt;
  &lt;/a&gt;
  What type of update can I manage
&lt;/h2&gt;

&lt;p&gt;On &lt;strong&gt;Windows&lt;/strong&gt; you can manage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Critical Updates&lt;/li&gt;
&lt;li&gt;Security Updates&lt;/li&gt;
&lt;li&gt;Update Rollups&lt;/li&gt;
&lt;li&gt;Feature Packs&lt;/li&gt;
&lt;li&gt;Service Packs&lt;/li&gt;
&lt;li&gt;Definition Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On &lt;strong&gt;Linux&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Critical and Security Updates&lt;/li&gt;
&lt;li&gt;Other Updates (those not specified as Critical or Security)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-schedule-updates"&gt;
  &lt;/a&gt;
  How do you schedule updates
&lt;/h2&gt;

&lt;p&gt;From within the &lt;strong&gt;Update Management&lt;/strong&gt; blade within the &lt;strong&gt;Automation Account&lt;/strong&gt;, select &lt;strong&gt;Schedule update deployment&lt;/strong&gt; from the top menu. Here you can select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The type of OS you want this deployment to apply to (cannot be both Windows and Linux)&lt;/li&gt;
&lt;li&gt;What Virtual Machines or groups containing VMs you want to apply this to&lt;/li&gt;
&lt;li&gt;What update categories you want to apply as part of this schedule&lt;/li&gt;
&lt;li&gt;Any updates to include (leaving this blank means it will do them all) or exclude&lt;/li&gt;
&lt;li&gt;Maintenance Window&lt;/li&gt;
&lt;li&gt;Date and Time to start&lt;/li&gt;
&lt;li&gt;Recurrence (if you want it to repeat)&lt;/li&gt;
&lt;li&gt;Reboot options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select &lt;strong&gt;Create&lt;/strong&gt; once configured. Use the &lt;strong&gt;Deployment&lt;/strong&gt; tab to monitor the progress or history of a scheduled deployment.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>security</category>
      <category>linux</category>
      <category>windows</category>
    </item>
    <item>
      <title>AWS open source news and updates #71</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 07 Jun 2021 06:38:49 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-71-opc</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-71-opc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#7th-june-2021-instalment-71"&gt;
  &lt;/a&gt;
  7th June, 2021 - Instalment #71
&lt;/h2&gt;

&lt;p&gt;Newsletter #71.&lt;/p&gt;

&lt;p&gt;This week we have a number of security related projects, covering reference/best practice deployments of open source security tools as well as new tools that will help you identify misconfigured assets. Another interesting project this week is moot, a serverless project to help yo simplify your deployments. On top of the new projects, we have some great community and AWS blog posts on Kubernetes, OpenSearch, Eventbridge Atlas, Keycloak, Apache Kafka, SQLAlchemy, AWS Copilot, OpenShift and many more. Make sure you also check out the events section, with a little over a week to go before Open@Amazon, have you registered yet?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you love Rust?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the past few weeks there have been some great new contributions to the Rust SDK. We had &lt;a href="https://aws-oss.beachgeek.co.uk/kz"&gt;MediaLive and MediaPackage&lt;/a&gt; services as well as improvements to others such as &lt;a href="https://aws-oss.beachgeek.co.uk/l0"&gt;this one&lt;/a&gt;, but I know they are looking for more folks to roll their sleeves up and get stuck in. If you are looking to get into Rust, then this might be a great opportunity as the project has a number of "good first issues" and "documentation" tasks that might make a good starting point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please help me improve this newsletter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you to those who have provided such great feedback already, I am currently reviewing and thinking how to incorporate the suggestions. I would still love to hear from more of you, and I have more AWS credit vouchers as a thank you for taking the time to complete the survey. The first 20 will get an AWS credit voucher for $25, so thank you again. It is only 5 questions, and will probably only take you a minute or two to complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/9UQSAU3"&gt;Take me to the survey!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes:  Alberto Falzone, Dario La Porta, Marcilio Mendonca, Srijit Mitra, Mandakini Saroop, Peiyu Wu, Pallavi Ravishankar, Jason Nicholls, Tim Gustafson, Vastin He, Min Xia, Tori Hara, Vu Dao, Kris Howard, Amitai Stern, David Boyne, Kyle Davis, Dotan Horovits, Augusto Valdivia, Łukasz Budnik, Gary Stafford, Chris Christensen, Ryan Petrich, Ryan Niksch, Noga Yam Amitai, and Sean Turner &lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-sdk-client-mock&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ll"&gt;aws-sdk-client-mock&lt;/a&gt; when Maciej Radzikowski was looking for greater support for testing when using the AWS JavaScript SDK v3, he created this library to provide mocking it in unit tests. If you are a users of the AWS JS SDK v3, then the clear documentation with examples should help you get started straight away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ghqbc9iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/m-radzikowski/aws-sdk-client-mock/main/.github/aws-client-mock-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ghqbc9iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/m-radzikowski/aws-sdk-client-mock/main/.github/aws-client-mock-example.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;moot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lm"&gt;moot&lt;/a&gt; it has been a long time since I have walked along Cuba St enjoying the fine Sushi in Wellington, New Zealand, and hailing from the same city we have this project from Sean Turner, moot. This is a serverless solution that implements a release dashboard that provides a single button press for deploying code changes to production and integrates with GitHub and GitLab. One for the weekend I think.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UcVcTAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seanturner026/moot/main/assets/repositories.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UcVcTAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seanturner026/moot/main/assets/repositories.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow and AWS CodeArtifact&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lk"&gt;mwaa-with-codeartifact&lt;/a&gt; this project will be super helpful if you want tighter control over where you install your Python dependencies in your Apache Airflow DAGs when using Managed Workflows for Apache Airflow (MWAA), by integrating with AWS CodeArtifact. Aside from more control, this enables users to avoid providing MWAA with an internet access via NAT Gateway and hence reduce the cost of their infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZzmpekI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-mwaa-examples/blob/main/usecases/mwaa-with-codeartifact/docs/architecture.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZzmpekI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-mwaa-examples/blob/main/usecases/mwaa-with-codeartifact/docs/architecture.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;patrolaroid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lq"&gt;patrolaroid&lt;/a&gt; this open source project from Ryan Petrich looks interesting for those looking for the latest security tools. Patrolaroid snapshots AWS instances and buckets to uncover malware, backdoors, cryptominers, toolkits, and other attacker tomfoolery that you probably don’t want in your prod. Software engineers, security engineers, and cloud administrators only need familiarity with YARA and the AWS Management Console to use it. I am going to have to check this out for sure. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nexus-oss-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nexus Repository is an open source artefact repository that supports various formats (Maven/Java, npm, NuGet, Helm, Docker, Android APT, GO, and many more) integrates nicely with a broad range of developer tools and is really useful when helping to create nice reports of your applications and what open source libraries they are using. This project, &lt;a href="https://aws-oss.beachgeek.co.uk/li"&gt;nexus-oss-on-aws&lt;/a&gt; will help you to deploy a Nexus Repository via Helm on Amazon EKS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ml5zQuMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/nexus-oss-on-aws/blob/master/arch.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ml5zQuMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/nexus-oss-on-aws/blob/master/arch.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;red-bucket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ln"&gt;red-bucket&lt;/a&gt; this open source tool from Lightspin scans your Amazon S3 Buckets for public access and cross-account attacks and analyses bucket's block public access settings, bucket policy and ACL and object ACL. Noga Yam Amitai has put together a couple of blog posts to help get you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;xroad-security-servers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lj"&gt;xroad-security-servers&lt;/a&gt; X-Road® is an open-source solution for secure data exchange between organisations. Data is exchanged on X-Road through access points called Security Servers implementing the same technical specifications. This project provides best practices for deploying those on AWS, through the lens of the Well Architected Framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-sso-login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lp"&gt;aws-sso-login&lt;/a&gt; this tool from Chris Christensen is his first Go application, and this tool will help you automate the process of logging into multiple AWS accounts using AWS's SSO service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GrandNode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lh"&gt;GrandNode&lt;/a&gt; - GrandNode is a GPLv3 licensed open source e-commerce tool built in .NET 5 that last week introduced support for AWS DocumentDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;deps.dev&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week Google launched a rather nice tool that allows you to explore the dependency graph of your open source projects. You can check the tool out at &lt;a href="https://aws-oss.beachgeek.co.uk/la"&gt;https://deps.dev/&lt;/a&gt; and try it out on some of your projects to see the graph and reports created. Python and .Net packages will arrive at some point, but you should take a look at this project. One of the ways I think it might help folks is in pulling together things such as the licences used, which this helps simplify. Nice job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EventBridge Atlas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;David Boyne has been prolific over the past few months, releasing some great open source project, including EventBridge Atlas. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/lb"&gt;AWS EventBridge with Flow (Node Diagrams)&lt;/a&gt; he walks you through the recently added visual output that he has incorporated using React Flow. Very nice indeed.. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXO02BBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.boyney.io/static/images/blogs/eventbridge-atlas-flow/flow-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXO02BBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.boyney.io/static/images/blogs/eventbridge-atlas-flow/flow-example.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lo"&gt;Kubernetes-based Microservice Observability with Istio Service Mesh&lt;/a&gt; this is the first of a two part series from Gary Stafford that will explore a number of popular open-source observability tools integrated with the Istio service mesh. These tools include Jaeger for distributed transaction monitoring, Kiali for application visualisation, Prometheus for metrics collection and alerting, and Grafana for metrics querying, visualisation, and alerting. I have read quite a few of these type of blog posts over the past few months, and the clarity and depth of this sets it apart from all the others. A must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFoEZtvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2878/1%2AXJGRL8oxig119UfbkSMcig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFoEZtvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2878/1%2AXJGRL8oxig119UfbkSMcig.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lc"&gt;My First Steps in OpenSearch Plugins&lt;/a&gt; sees Amitai Stern share his experiences as part of creating his first OpenSearch plugin. This is a really great post, and whether you are considering contributing to OpenSearch or not, the approach and topics he covers apply to many if not all projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7T1mtxy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2021-06-03-my-first-steps-in-opensearch-plugins/plugins-architectural-diagram.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7T1mtxy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensearch.org/assets/media/blog-images/2021-06-03-my-first-steps-in-opensearch-plugins/plugins-architectural-diagram.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt; If you missed the podcast, &lt;a href="https://aws-oss.beachgeek.co.uk/ld"&gt;OpenSearch: The Open Source Successor of Elasticsearch&lt;/a&gt; featuring Kyle Davis and Dotan Horovits takes a look at OpenSearch, starting with the origins and then taking a look at how the community and project are progressing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;duckyPad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great post from colleague Kris Howard, sharing her build out of the &lt;a href="https://aws-oss.beachgeek.co.uk/l9"&gt;duckyPad&lt;/a&gt;. What is that I can hear you all asking...well, it is a rather nice piece of open source hardware/software that allows you to create your own Stream Deck setup, except that you build it yourself. Kris walks you through the build out, everything from the hardware to software and she even shares her key setup with you. Even though I already have a Stream Deck, this just looks so nice I might have to invest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ia93Y1vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.web-goddess.org/wp-content/uploads/2021/06/img_7070-scaled.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ia93Y1vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.web-goddess.org/wp-content/uploads/2021/06/img_7070-scaled.jpg" alt="duckypad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;frp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fatedier/frp"&gt;frp&lt;/a&gt; is an open source reverse proxy to help you expose a local server behind a NAT or firewall to the Internet. Vu Dao has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/l8"&gt;FRP - Fast Reserve Proxy - Connect To Database In Private Network&lt;/a&gt; on how you can use this open source tool, to deploy (via AWS CDK) a solution that allows you to access resources in a private network, in this instance connecting to a database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRjjOaCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VH8DZkD3--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/k8s-frp/blob/master/img/flow.png%253Fraw%253Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRjjOaCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VH8DZkD3--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/k8s-frp/blob/master/img/flow.png%253Fraw%253Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keycloak&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lf"&gt;Keycloak&lt;/a&gt; is an open source Identity and Access Management project I have covered in previous editions of this newsletter, and Łukasz Budnik takes a closer look at this project in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/lg"&gt;Why I choose Keycloak over AWS Cognito&lt;/a&gt; comparing how this compares to AWS services such as Cognito, and some of the considerations you might want to think about as you architect your solutions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/le"&gt;AWS Data Lake with Terraform&lt;/a&gt; AWS Community Builder Augusto Valdivia kicks off a six part series helping you to create your data lakes on AWS via Infrastructure as Code (IaC), in this instance using Terraform. He aims to cover how you can use Terraform scripts to allow for fast and repeatable deployments, efficient testing and to decrease recovery time in case of an unplanned event. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk4FRa7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YtBPUf7f--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgnzhqg35ef62jj8tdwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk4FRa7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YtBPUf7f--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgnzhqg35ef62jj8tdwe.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Distro for OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/l5"&gt;Managing AWS Distro for OpenTelemetry (ADOT) Collector with AWS Systems Manager Distributor&lt;/a&gt; Vastin He and Min Xia discuss the design for packaging and publishing the ADOT Collector so that you can simplify how you roll this out at scale with the help of a number of AWS services such as Systems Manager Distributor and Systems Manager Distributor, using GitHub Actions to provide a simplified installation experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmT0_UpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/05/10/He-ADOT-Collector_F1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmT0_UpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/05/10/He-ADOT-Collector_F1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQLAlchemy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQLAlchemy is an open-source (MIT) SQL toolkit and object-relational mapper (ORM) for the Python programming language. Marcilio Mendonca and Srijit Mitra have written this post, &lt;a href="https://aws-oss.beachgeek.co.uk/l1"&gt;Use Python SQLAlchemy ORM to interact with an Amazon Aurora database from a serverless application&lt;/a&gt; on how developers can migrate their monolithic applications to a serverless stack using Amazon API Gateway and Lambda while continuing to use SQLAlchemy, taking a look at how separation of duties between the database and the development team can be achieved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Np1O_yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/05/21/dbblog_1131_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Np1O_yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/05/21/dbblog_1131_01.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux GRUB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pallavi Ravishankar and Jason Nicholls' post, &lt;a href="https://aws-oss.beachgeek.co.uk/l2"&gt;Using EC2 Serial Console to access the GRUB menu and recover from boot failures&lt;/a&gt;, takes a look at how you can use a recent new capability of Amazon EC2, the EC2 Serial Console, to troubleshoot boot failures, showing how you can access the GNU Grand Unified Bootloader (GRUB) to directly fix the problem (in this post they are using Amazon Linux 2, but other flavours will work too). I am so happy that this exists, as you never know when you might need it - I am sure we all have our own Kernel/GRUB stories, feel free to share them in the comments :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LL9L1Oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/01/grub2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LL9L1Oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/01/grub2.png" alt="error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Copilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copilot is an open source command line interface created by AWS, and was originally created to make it easy for developers to build, release, and operate production ready containerised workloads on Amazon ECS and AWS Fargate. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/l6"&gt;Enabling continuous workflows for AWS App Runner service with persistency using AWS Copilot CLI&lt;/a&gt; Tori Hara takes a look at how Copilot has been updated to support AWS App Runner, a new service that provides the simplest way to build and run your containerised stateless web application on AWS, Copilot was updated so you can run your containerised application on App Runner with Copilot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqngUq0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/29/diagram-final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqngUq0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/29/diagram-final.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenShift&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/lr"&gt;Red Hat OpenShift Service on AWS: architecture and networking&lt;/a&gt; Ryan Niksch takes a look at customers who are moving/migrating their OpenShift workloads to ROSA, Red Hat OpenShift on AWS and explores the AWS and OpenShift architecture differences across a number of different use cases, such as private/public looking at the resources and components, where these are placed, what are the implementation differences when deploying single vs multi-Availability Zone clusters, and differences between public and private clusters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qX91u4OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/03/rosa-arch-multi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qX91u4OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/03/rosa-arch-multi.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kakfa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mandakini Saroop and Peiyu Wu have put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/l3"&gt;Setting up AWS Lambda with an Apache Kafka cluster within a VPC&lt;/a&gt;, which is a follow up to a previous one I shared on how to use AWS Lambda functions as a consumer of Apache Kakfa streaming data, and in this post they dive into setup considerations and best practices you should think about if you are considering doing something similar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y45xNRjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/01/msk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y45xNRjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/01/msk6.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tim Gustafson writes how you can reduce or eliminate application down-time associated with database schema changes in your MySQL and MariaDB applications in, &lt;a href="https://aws-oss.beachgeek.co.uk/l4"&gt;Upgrade Amazon RDS for MySQL or MariaDB database schemas with minimal downtime&lt;/a&gt;. The steps described in this post should allow you to make database schema changes that reduce the impact to your application, improving the end-user experience and reducing the burden of database schema changes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Performance Computing (HPC)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to do High Performance Computing (HPC) there is a good chance you are going to be using a lot of open source tools to help you across all the parts of your workflows. In this post from Alberto Falzone and Dario La Porta, &lt;a href="https://aws-oss.beachgeek.co.uk/ky"&gt;Building highly-available HPC infrastructure on AWS&lt;/a&gt; take a look at some of those open source projects and how together with AWS, you can build highly available HPC infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCGsQXN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2021/06/03/ha-hpc-fig1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCGsQXN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2021/06/03/ha-hpc-fig1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Systems Manager&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AWS Systems Manager Session Manager plugin for the AWS Command Line Interface (AWS CLI) is now open source. Customers can access the source code for the Session Manager plugin for the AWS CLI on GitHub, contribute to its development, and use it as a building block to embed Session Manager capabilities into their own applications.&lt;/p&gt;

&lt;p&gt;Customers get greater visibility into the design and implementation of the Session Manager plugin. Developers can contribute to its development by making suggestions, reporting issues, and submitting pull requests. With the Session Manager plugin for the AWS CLI, you can start and end sessions with your compute nodes managed by Systems Manager, from your local machine using the AWS CLI. You can install the Session Manager plugin for the AWS CLI as an installer package for different operating systems including Windows, Linux, and macOS. With open source, you can now customise the plugin to include the ability to work with Session Manager sessions, within any custom application for your users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Maintainer Week&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;week of June 7th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure you check out this week long event starting on the 7th of June, for open source maintainers to gather, share, and be celebrated. You can find details of &lt;a href="https://aws-oss.beachgeek.co.uk/kq"&gt;all the weeks sessions on their GitHub page&lt;/a&gt;, with Upstream on June 7th, Global Maintainer Summit on the 8/9th, The Changelog: Maintainer Spotlight on the 10th and FundOSS on the 11th.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open@Amazon&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;June 16th, 9:00am - 5:00PM EDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you missed it last week, next week we are running Open@Amazon, a celebration of open source on AWS with a fabulous cast of speakers, a fantastic broad set of topics and the event will be fully live so you can get your chance to interact with the speakers and the broader open source and AWS community. Check out the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/jo"&gt;What’s up with open source at AWS? Attend Open@Amazon live on Twitch June 16&lt;/a&gt; or just register to get a handy calendar invite &lt;a href="https://aws-oss.beachgeek.co.uk/jn"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Cloud Cost Optimization: 10 Lessons Learned from Scanning 45K AWS Accounts</title>
      <author>DevGraph</author>
      <pubDate>Mon, 07 Jun 2021 06:09:50 +0000</pubDate>
      <link>https://dev.to/devgraph/cloud-cost-optimization-10-lessons-learned-from-scanning-45k-aws-accounts-4n7a</link>
      <guid>https://dev.to/devgraph/cloud-cost-optimization-10-lessons-learned-from-scanning-45k-aws-accounts-4n7a</guid>
      <description>&lt;p&gt;By &lt;a href="https://blog.engineyard.com/author/darren-broemmer"&gt;Darren Broemmer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where there is a cloud, there’s also a high chance of receiving a stinging cold shower of unexpected cloud computing costs.&lt;/p&gt;

&lt;p&gt;That’s how Adobe executives felt when their development team &lt;a href="https://www.teampay.co/insights/manage-cloud-costs/"&gt;dropped $80,000&lt;/a&gt; on cloud computing in one day by accident, racking up a weekly bill of $500 million.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z0II-Lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja1hnk1bahbqhpkk6pei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z0II-Lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja1hnk1bahbqhpkk6pei.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Such cloud overspending happens in every company, albeit on a smaller scale. Because public cloud vendors made it simple to provision resources in one click.&lt;/p&gt;

&lt;p&gt;Unpredictable cloud computing costs may appear to be a moderate “price” to pay for the ability to stay connected and operational, with resilient cloud computing extended to business. Yet, if left uncontained, ongoing cloud operating costs can offset all the revenue gains received from migration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-cloud-cost-optimization-should-be-ruthless"&gt;
  &lt;/a&gt;
  Why cloud cost optimization should be ruthless
&lt;/h2&gt;

&lt;p&gt;Exodus to the cloud is real. Last year, enterprise spending on cloud computing &lt;a href="https://www.srgresearch.com/articles/2020-the-year-that-cloud-service-revenues-finally-dwarfed-enterprise-spending-on-data-centers"&gt;increased by 35%&lt;/a&gt;, hovering at $130 billion and finally beating data center investments.&lt;/p&gt;

&lt;p&gt;But roughly the same amount — 30% to 35% — of resources go to waste, as per &lt;a href="https://info.flexera.com/CM-REPORT-State-of-the-Cloud"&gt;Flexera’s 2021 State of the Cloud Report&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15oLX_Mu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpkgnl3k16td4ypiu5r6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15oLX_Mu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpkgnl3k16td4ypiu5r6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Overspending on the public cloud is rampant. Over 24% of public cloud computing costs exceed the original budget. &lt;a href="https://info.flexera.com/CM-REPORT-State-of-the-Cloud"&gt;Image Source&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;How come public cloud cost containment remains problematic, especially given the fact that every public cloud platform offers tools galore for cloud cost optimization?&lt;/p&gt;

&lt;p&gt;After analyzing over 45,000 AWS accounts using &lt;a href="https://www.devgraph.com/cloudfix/"&gt;CloudFix&lt;/a&gt;, our AWS cost optimization software, we found that the biggest issue with cloud resource wastage is rarely a one-off event (though this happens too), but instead is a continuous issue.&lt;/p&gt;

&lt;p&gt;As the corporate cloud infrastructure expands, the intricacies of containing cloud costs among provisioned instances, sandbox environments, storage systems, and even multiple clouds become too twisted.&lt;/p&gt;

&lt;p&gt;Moreover, cloud providers themselves don’t really help:&lt;/p&gt;

&lt;p&gt;• Usage-based systems gloss over the real problem — lack of clarity into how those resources are actually consumed by users, systems, and connected devices across all cloud offerings.&lt;/p&gt;

&lt;p&gt;• The AWS, Azure, and Google Cloud ecosystem of cloud services has also grown increasingly complex, to the point where even experienced cloud architects cannot always select the optimal types of configurations.&lt;/p&gt;

&lt;p&gt;But the above doesn’t mean that you should be leaving cloud money on the table. On the contrary, you should get proactive with recuperating those costs. We’ll show you how it’s done on AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-optimize-cloud-computing-costs-on-aws"&gt;
  &lt;/a&gt;
  How to optimize cloud computing costs on AWS
&lt;/h2&gt;

&lt;p&gt;From one cloud overspender to another: our AWS bill was overblown too.&lt;/p&gt;

&lt;p&gt;Across 40,000+ AWS accounts, we were wasting thousands of dollars. Of course, we tried all the manual fixes and a bunch of cloud cost optimization tools too.&lt;/p&gt;

&lt;p&gt;Most solutions pointed towards resource-hungry applications. Yet none showed how to fix the underlying issues.&lt;/p&gt;

&lt;p&gt;Since we have over 4,000 developers, we thought that perhaps instead of asking all of them to look for fixes, we should build a tool to do just that. That’s how CloudFix came up.&lt;/p&gt;

&lt;p&gt;CloudFix is an automated AWS cost management tool that identifies and patches leaking cloud spending. Installed in one click, CloudFix runs in the background without any disruptions and saliently reclaims back pointless infrastructure spending. Today, on a $20M annual spend across several AWS accounts, we claw back about $150K in annualized savings every week and drive over 50% in annualized cloud cost saving for our clients.&lt;/p&gt;

&lt;p&gt;And here are 10 lessons we learned on our journey of reducing cloud costs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-get-engineers-to-evaluate-the-costs-first"&gt;
  &lt;/a&gt;
  1. Get engineers to evaluate the costs first
&lt;/h3&gt;

&lt;p&gt;The first lesson is simple: people drive up cloud computing costs.&lt;/p&gt;

&lt;p&gt;You have two concurrent groups who’ll influence the costs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Execs and finance folks&lt;/strong&gt; who estimate the total cloud budget for the quarter/year. Their projections are mostly based on past usage and growth plans. If you fail to address the overspending in Q1, it will migrate and magnify during the next planning cycle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Engineering teams&lt;/strong&gt;. The architecture choices your developers make each day will determine the total cloud bill. No fancy AWS cost management tool will help you unless you explain the importance of cloud financial management.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ideally, the IT and Finances departments should be well-aligned on:&lt;/p&gt;

&lt;p&gt;• Estimated cloud computing costs (and the reasoning behind some caps)&lt;/p&gt;

&lt;p&gt;• Resource tagging decisions (which resources are for testing and which are for production)&lt;/p&gt;

&lt;p&gt;• Consistent costs — spending on predictable, budgeted workloads and reserved instances.&lt;/p&gt;

&lt;p&gt;• Variable costs — on-demand and spot instances, auto-scaling costs, serverless computing, etc.&lt;/p&gt;

&lt;p&gt;When the two have a mutual understanding of what constitutes a reasonable cloud bill, they don’t fight over subtle deviations but focus on optimizing the big picture of costs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-do-an-inventory-of-all-cloud-resources"&gt;
  &lt;/a&gt;
  2. Do an inventory of all cloud resources
&lt;/h3&gt;

&lt;p&gt;Doing a tally of all your AWS resources is the cornerstone to subsequent optimization.&lt;/p&gt;

&lt;p&gt;This is a basic but important step. You can’t fix what you cannot see.&lt;/p&gt;

&lt;p&gt;You have two goals here:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Set up automation for shutting down idle requirements when not in use&lt;/strong&gt;. For example, switching off development and test environments outside of working hours can lead to up to 75% in savings.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Find and fix over-provisioned resources&lt;/strong&gt;. Categorize these into buckets such as “no longer needed”, “can be downgraded”, “worth migrating to an alternative service.”&lt;/p&gt;

&lt;p&gt;Here are some common types of over-provisioned AWS resources to hunt for:&lt;/p&gt;

&lt;p&gt;• Underutilized clusters in Amazon Redshift&lt;br&gt;
• Idle instances in Amazon RDS&lt;br&gt;
• Idle cluster nodes in Amazon ElastiCache&lt;br&gt;
• Cases of suboptimal container resource usage&lt;br&gt;
• Any other “stray” instances or VMs&lt;/p&gt;

&lt;p&gt;The above can be daunting and should be automated once you have a chance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-consider-migrating-to-aws-gp3-ebs-volumes"&gt;
  &lt;/a&gt;
  3. Consider migrating to AWS gp3 EBS volumes
&lt;/h3&gt;

&lt;p&gt;Last year, &lt;a href="https://aws.amazon.com/blogs/aws/new-amazon-ebs-gp3-volume-lets-you-provision-performance-separate-from-capacity-and-offers-20-lower-price/"&gt;Amazon launched&lt;/a&gt; gp3 volumes for Amazon EBS (Elastic Block Store) in lieu of gp2, which most teams use.&lt;/p&gt;

&lt;p&gt;The advantage of gp3 is that you can automatically increase IOPS and throughput without provisioning extra black storage capacity. Overall, gp3 can provide predictable 3,000 IOPS baseline performance and 125 MiB/s regardless of volume size, which makes it attractive and cost-effective for high-load applications.&lt;/p&gt;

&lt;p&gt;But we also found that it is worth migrating gp2 volumes with less than 3000 IOPS to gp3. By doing so, you can save around 20% yearly as gp3 volumes cost $0.08 / GB compared to $0.10 / GB for gp2.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read more about &lt;a href="https://www.devgraph.com/cloudfix-help/ebs-provisioned-solid-state-drive-cost-optimizations/"&gt;migrating from EBS gp1/gp2 to gp3&lt;/a&gt; and estimated cloud cost savings&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-watch-out-for-aws-ebs-volumes-unattached-to-ec2-instances"&gt;
  &lt;/a&gt;
  4. Watch out for AWS EBS volumes unattached to EC2 instances
&lt;/h3&gt;

&lt;p&gt;Staying on the subject of Amazon EBS: did you know that you are getting billed even when your instances are stopped?&lt;/p&gt;

&lt;p&gt;Amazon charges for all EBS volumes attached to EC2 instances, whether they are in use or not. Because, unlike instances, EBS volumes are billed at “gigabyte-months”. Thus, ask your dev people to delete volumes and snapshots they no longer need (after they backed up the data!).&lt;/p&gt;

&lt;p&gt;P.S. CloudFix can do that for you automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-reduce-oversized-resources-on-ec2-instances"&gt;
  &lt;/a&gt;
  5. Reduce oversized resources on EC2 instances
&lt;/h3&gt;

&lt;p&gt;Right-sizing resources to instances may seem like an art rather than science when you don’t how much is “too big.”&lt;/p&gt;

&lt;p&gt;So first, check the historical data on your instance usage. You can analyze CPU utilization and weed out a set of candidates for de-provisioning.&lt;/p&gt;

&lt;p&gt;But don’t go full galore. Instead, reduce instance size progressively. During week one, switch the instance from t3.xlarge to t3.large. Analyze resource consumption and performance. If all is good, go another notch lower during the second week and see what happens.&lt;/p&gt;

&lt;p&gt;Also, if you notice that a reduced instance demands extra capacity, don’t rush to upscale it via the standard route.&lt;/p&gt;

&lt;p&gt;Instead, check in with &lt;a href="https://aws.amazon.com/ec2/spot/"&gt;AWS Spot&lt;/a&gt; — an on-demand instance service upselling spare capacities at a nice discount (up to 90%). Prices are set by Amazon and dynamically adjusted depending on the current demand and supply. Spot instances are well-suited for fault-tolerant workloads such as containerized apps, CI/CD, or big data analytics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-try-amazon-s3-intelligent-tiering-if-you-run-a-data-lake"&gt;
  &lt;/a&gt;
  6. Try Amazon S3 intelligent tiering if you run a data lake
&lt;/h3&gt;

&lt;p&gt;Amazon S3 is a popular solution for hosting data lakes.&lt;/p&gt;

&lt;p&gt;But the problem is that it’s not the most affordable storage service, so your cloud costs can get steep. Especially if you have a data science team that loves pushing data into the lake and then forgetting about it.&lt;/p&gt;

&lt;p&gt;Amazon S3 intelligent tiering service scans your data objects and automatically moves infrequently used assets into a lower-cost storage tier. You can configure the tool to auto-move all objects that were not accessed for 30 days to S3 One Zone Infrequent Access tier.&lt;/p&gt;

&lt;p&gt;Then, you can set it to push archival data to S3 Glacier and S3 Glacier Deep Archive, which have 95% lower costs compared to S3 Standard. Good savings in both cases!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-alternate-between-amazon-s3-infrequent-access-and-one-zone-infrequent-access"&gt;
  &lt;/a&gt;
  7. Alternate between Amazon S3 Infrequent Access and One Zone Infrequent Access
&lt;/h3&gt;

&lt;p&gt;High chances are that you have a ton of non-used data, capable of tolerating lower availability.&lt;/p&gt;

&lt;p&gt;Those objects are strong contenders for getting moved to S3 Infrequent Access (IA) or One Zone IA — both provide significantly cheaper storage.&lt;/p&gt;

&lt;p&gt;Here are the availability tradeoffs:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Amazon S3 Standard.&lt;/strong&gt; Availability: 99.99%. Annual downtime: 52m 36s&lt;br&gt;
• &lt;strong&gt;S3 Infrequent Access.&lt;/strong&gt; Availability: 99.9%. Annual downtime: 8h 45m&lt;br&gt;
• &lt;strong&gt;S3 One Zone Infrequent Access.&lt;/strong&gt; Availability: 99.5%. Annual downtime: 1d, 19h 49m&lt;/p&gt;

&lt;p&gt;Moving your data to One Zone IA also means lower durability. Since all your data will be stored in one region (without replication), in the event of major regional failure it will be unavailable or even lost. Thus, it may be not the best option for storing, for instance, compliance records.&lt;/p&gt;

&lt;p&gt;Apart from availability, you should also mind data retrieval costs for S3 IA. The standard charge is $0.01 per GB, on top of the standard Data Transfer fee in S3, plus a $0.01 per 1,000 conversions charge from Standard S3 to Infrequent Access.&lt;/p&gt;

&lt;p&gt;Finally, the minimum billable object size is 128KB. If you are transferring smaller data objects, you still pay for 128KB of storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-look-for-discounts"&gt;
  &lt;/a&gt;
  8. Look for discounts
&lt;/h3&gt;

&lt;p&gt;It’s ok to be a bargain seeker, especially when your cloud bill is giving you shivers.&lt;/p&gt;

&lt;p&gt;AWS, as well as other public cloud providers, have quite a few attractive saving plans:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iree8Guk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht47odb0392a2bvmxs37.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iree8Guk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht47odb0392a2bvmxs37.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(AWS has plenty of discount plans to profit from &lt;a href="https://info.flexera.com/CM-REPORT-State-of-the-Cloud"&gt;Image Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A word of caution on reserved instances on AWS.&lt;/p&gt;

&lt;p&gt;You can choose between Standard and Convertible reserved instances.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Standard instances&lt;/strong&gt; are more affordable, but cannot be converted to another instance type. But you can sell them on AWS Marketplace.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Convertible instances&lt;/strong&gt; cannot be re-sold but can be upgraded to a more expensive instance type. Note: you cannot downgrade a convertible instance back. So think twice before upgrading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus tip: Go look for AWS credits.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are several ethical ways to get free AWS credits:&lt;/p&gt;

&lt;p&gt;• Check if you qualify for &lt;a href="https://aws.amazon.com/activate/"&gt;AWS Activate&lt;/a&gt;&lt;br&gt;
• Attend AWS webinars and events — you’ll learn something, plus can get some free credits doled out&lt;br&gt;
• Apply for &lt;a href="https://aws.amazon.com/government-education/nonprofits/aws-imagine-grant-program/"&gt;AWS Imagine Grant Program&lt;/a&gt;&lt;br&gt;
• Publish an Alexa skill and &lt;a href="https://developer.amazon.com/alexa-skills-kit/alexa-aws-credits"&gt;receive $100/mo&lt;/a&gt;. while it’s active&lt;br&gt;
• Sign up for &lt;a href="https://www.producthunt.com/ship/aws"&gt;Ship program&lt;/a&gt; from Product Hunt for $5,000 in credit.&lt;/p&gt;

&lt;p&gt;Also, look for other AWS partners. You probably already have one in your current stack, so go and claim your credit!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-see-if-you-can-profit-from-amazon-efs-one-zone"&gt;
  &lt;/a&gt;
  9. See if you can profit from Amazon EFS One Zone
&lt;/h3&gt;

&lt;p&gt;Amazon Elastic File System (Amazon EFS) is a serverless, flexible file system for storing shared data across EC2 instances, ECS, EKS, AWS Lambda, and AWS Fargate.&lt;/p&gt;

&lt;p&gt;Till March 2021, the service automatically determined where they’d store your data (typically across several availability zones). Now, however, you can choose your zone for EFS storage and transfer all the data to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-lower-cost-one-zone-storage-classes-for-amazon-elastic-file-system/"&gt;Amazon EFS One Zone&lt;/a&gt; storage works similarly to One Zone Infrequent Access storage classes in S3:&lt;/p&gt;

&lt;p&gt;• Select a low-cost region (e.g. Virginia if you are US-based)&lt;br&gt;
• Enable configure lifecycle management&lt;br&gt;
• Transfer infrequently accessed data&lt;/p&gt;

&lt;p&gt;Enjoy a lower cloud storage bill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-do-regular-housekeeping-of-aws-rds"&gt;
  &lt;/a&gt;
  10. Do regular housekeeping of AWS RDS
&lt;/h3&gt;

&lt;p&gt;Database storage optimization often gets overlooked. That’s a shame because there’s plenty of fixes and fine-tunes you can do to reduce your AWS RDS costs.&lt;/p&gt;

&lt;p&gt;On the surface, RDS instances may appear similar to EC2 instances. That’s true, but there are also several important caveats.&lt;br&gt;
First, unlike EC2, RDS supports only hourly billing. Secondly, the RDS DB instance cost varies depending on the relational database engine you are using.&lt;/p&gt;

&lt;p&gt;AWS supports 6 popular DB engines:&lt;/p&gt;

&lt;p&gt;• 3 open-source: MySQL, PostgreSQL, MariaDB&lt;br&gt;
• 3 proprietary: Amazon Aurora, Oracle, Microsoft SQL Server.&lt;/p&gt;

&lt;p&gt;The licenses for the latter are not included in your RDS billing. So you have to either bring your own license (as in the case with Oracle and Microsoft) or pay a higher hourly bill.&lt;/p&gt;

&lt;p&gt;While changing a database engine is not the easiest task, migrating to an open-source solution or Amazon Aurora can pleasantly lower your cloud bill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second most important tip for optimizing AWS RDS costs is selecting the right types of instances.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Granted, this is easier to do since you have just 18 RDS database instance types unlike 254 instance types on EC2. Still, you have to stay mindful of your provisioning and usage patterns.&lt;/p&gt;

&lt;p&gt;Here are some important caveats:&lt;/p&gt;

&lt;p&gt;• RDS reserved instances can save you upfront costs. But the discounts are tied to a specific DB instance family (e.g. db.m5.xlarge). Meaning your discount only applies to instances in the same family, regardless of size. But you can’t apply it towards a different instance family aka there are no Convertible reserved instances.&lt;/p&gt;

&lt;p&gt;• DB Instance costs vary by region for both on-demand and reserved instances. Obviously, reserved instances come with bigger cost savings. But some may be surprised to the extent.&lt;/p&gt;

&lt;p&gt;Here’s a quick comparison of AWS region costs for on-demand vs reserved db.m5.xlarge instance with MySQL engine across regions:&lt;/p&gt;

&lt;p&gt;• On-demand US East 1: $2,996/year&lt;/p&gt;

&lt;p&gt;• Reserved US East 1: $1,791/year (40% discount)&lt;/p&gt;

&lt;p&gt;• On-demand: SA East 1: $4,047/year&lt;/p&gt;

&lt;p&gt;• Reserved SA East 1: $1,825/year (45% discount).&lt;/p&gt;

&lt;p&gt;Overall, you can get at a 30%-40% saving by getting a reserved instance in a cheaper AWS region. Thus, consider doing a “spring clean” to see if you could muster more reserved instances.&lt;/p&gt;

&lt;p&gt;Finally, you can also consider migrating to Aurora serverless — a new on-demand, auto-scaling version of the Aurora DB engine.&lt;/p&gt;

&lt;p&gt;The benefit of Aurora serverless is that it bills you only for provisioned Aurora capacity units (ACUs). An ACU is 2 GB of memory, plus corresponding CPU, and networking resources. So when you decide to stop a database you are not using, you’ll only get charged for storage, but not for workloads. This can be a great option for housing databases with rarely accessed data or those kept at close reach for a postponed analytics project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-conclude-battle-cloud-cost-with-automation"&gt;
  &lt;/a&gt;
  To Conclude: Battle Cloud Cost with Automation
&lt;/h2&gt;

&lt;p&gt;The conversation about &lt;a href="https://www.devgraph.com/2021/02/25/cloudfix-fix-your-aws-costs/"&gt;AWS costs&lt;/a&gt; is never an easy one to have, not with the developers nor the finance people.&lt;/p&gt;

&lt;p&gt;The first cohort is reluctant to waste precious time on optimizing AWS infrastructure (and then breaking things, instead of fixing them). Plus, no one wants to be the person in charge of “boring” stuff such as resource tagging, monitoring, and optimization policy development. AWS also issues so many updates that you probably need to hire a separate “watchdog” to sift through these every other day.&lt;/p&gt;

&lt;p&gt;The finance folks, on the other hand, do not always understand the challenges of estimating the monthly AWS bill when workloads vary and projects scale rapidly. Yet they want to have precise numbers.&lt;/p&gt;

&lt;p&gt;Our team was not a fan of the above dynamics. Thus, we have our automated AWS cost optimization platform that does all the scanning for you and then issues the fixes. So the finance people get their numbers, while developers don’t have extra overheads and can stay focused on strategic initiatives.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn more about &lt;a href="https://www.devgraph.com/cloudfix/"&gt;CloudFix&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>webdev</category>
      <category>development</category>
    </item>
    <item>
      <title>Amazon Redshift ML - Creating Machine Learning Models with Standard SQL.</title>
      <author>Olaoye Somide</author>
      <pubDate>Mon, 07 Jun 2021 06:07:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-redshift-ml-creating-machine-learning-models-with-standard-sql-3k97</link>
      <guid>https://dev.to/aws-builders/amazon-redshift-ml-creating-machine-learning-models-with-standard-sql-3k97</guid>
      <description>&lt;p&gt;The term Machine Learning is no longer just a marketing buzzword for tech products. Nowadays, it is the brain behind the scenes making intelligent predictions on the majority of application and software solutions that we interact with on a daily.&lt;/p&gt;

&lt;p&gt;At AWS re-Invent 2020, the AWS team announced the preview release of a machine learning feature for Amazon Redshift known as Amazon Redshift ML. Now that the feature is generally available for all AWS regions, I decided to take it for a spin by testing how accurate this feature is at solving common ML problems (starting with a simple  &lt;a href="https://en.wikipedia.org/wiki/Binary_classification"&gt;BinaryClassification&lt;/a&gt; problem).&lt;/p&gt;

&lt;p&gt;This article goes through a step-by-step procedure of &lt;strong&gt;&lt;em&gt;using standard SQL&lt;/em&gt;&lt;/strong&gt; to create and train machine learning models within an Amazon Redshift database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-ml-model-with-redshift-ml"&gt;
  &lt;/a&gt;
  Building ML Model with Redshift ML
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/redshift/features/redshift-ml/"&gt;Redshift ML&lt;/a&gt; is an Amazon Redshift feature that makes it easy for data scientists, engineers, or developers to create, train, and apply machine learning models using just SQL (no other tool or language is needed). &lt;/p&gt;

&lt;p&gt;Training of a machine learning model using Redshift ML is powered by &lt;a href="https://aws.amazon.com/sagemaker/"&gt;Amazon SageMaker&lt;/a&gt;, a fully managed machine learning service that is also available on the AWS platform. Sagemaker is able to detect patterns from provided dataset to create a model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFf711d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622445389743/DLX5gmHpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFf711d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622445389743/DLX5gmHpc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Solving a BinaryClassification ML problem:&lt;/em&gt;&lt;/strong&gt; To determine how easy it is to make machine learning predictions with SQL on Redshift ML, I decided to create a machine learning model that is able to predict the possibility of retaining customers (churn) using the customer activity data.&lt;/p&gt;

&lt;p&gt;This exercise makes use of the &lt;a href="https://www.kaggle.com/mnassrib/telecom-churn-datasets"&gt;Orange Telecom Customer Churn Dataset&lt;/a&gt; available on Kaggle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-data-preparation"&gt;
  &lt;/a&gt;
  1. Data Preparation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Splitting the dataset:&lt;/strong&gt; after downloading the dataset from Kaggle, the first step is to prepare the data for use in a Redshift database. The data from Kaggle comes in two sets from the same batch but has been split by an 80/20 ratio as more data is often desirable for developing ML models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;*&lt;em&gt;Train Set: *&lt;/em&gt; used to train the model and is made up of 80% of the entire dataset.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test Set:&lt;/strong&gt; to evaluate model performance, made up of 20% of the entire dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can implement the categorization of the data by combining the two datasets into one combined CSV spreadsheet and add an additional column called &lt;code&gt;purpose&lt;/code&gt; with input values of &lt;code&gt;train&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; respectively for both datasets. Out of the 3333 records available in our dataset, 2666 of the records will be used to train the model and the rest will be used for evaluation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAuaqjq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622324386587/tOkzCL5cB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAuaqjq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622324386587/tOkzCL5cB.jpeg" alt="ML train and test dataset.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setup-redshift-cluster"&gt;
  &lt;/a&gt;
  2. Setup Redshift Cluster
&lt;/h3&gt;

&lt;p&gt;To get started with Amazon Redshift, we need to have a Redshift cluster setup for our data warehouse. Each cluster runs an Amazon Redshift engine and contains one or more databases.&lt;/p&gt;

&lt;p&gt;From the AWS web console, navigate to the Amazon Redshift page from the list of services. Clicking on the &lt;code&gt;Create cluster&lt;/code&gt; button will bring you to the page shown below. Input the cluster name (in this case, my cluster name is &lt;code&gt;redshift-cluster-1&lt;/code&gt;) and workload type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVKTXAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622707764646/YSMwmPaHj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVKTXAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622707764646/YSMwmPaHj.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redshift offers different node types to accommodate your workloads. For this exercise, I am selecting the smallest and cheapest node type &lt;code&gt;dc2.large&lt;/code&gt; with a single node to save cost. You also need to set up a master username and password that will be used to authorize connectivity with the cluster after creation.&lt;/p&gt;

&lt;p&gt;Working with Redshift ML requires necessary permissions to access other AWS services such as S3 and Sagemaker. You can associate up to 10 IAM roles to a single Redshift cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s70uqMTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622709820689/Hr1v-DcrY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s70uqMTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622709820689/Hr1v-DcrY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-import-data-to-redshift"&gt;
  &lt;/a&gt;
  3. Import Data To Redshift
&lt;/h3&gt;

&lt;p&gt;There are multiple ways of importing data into a Redshift database. For this exercise, we use the S3 method to import data to Redshift. First, we have to upload the prepared CSV data into an S3 bucket and then use the &lt;code&gt;COPY&lt;/code&gt; command to import the data from S3 into a dedicated Redshift table.&lt;/p&gt;

&lt;p&gt;The SQL code snippet below is responsible for creating a Redshift table to import our data into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE orange_telecom_customers (
  state varchar, account_length integer, area_code integer, 
  international_plan varchar, voice_mail_plan varchar, 
  number_vmail_messages integer, total_day_minutes decimal, 
  total_day_calls integer, total_day_charge decimal, 
  total_eve_minutes decimal, total_eve_calls integer, 
  total_eve_charge decimal, total_night_minutes decimal, 
  total_night_calls integer, total_night_charge decimal, 
  total_intl_minutes decimal, total_intl_calls integer, 
  total_intl_charge decimal, customer_service_calls integer, 
  churn varchar, purpose varchar
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the Redshift table, we will then import the CSV data into it using the Redshifts &lt;code&gt;COPY&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;COPY orange_telecom_customers
FROM 's3://geospatial-dev/redshift/orange_telecom_customers.csv' 
DELIMITER ',' IGNOREHEADER 1
IAM_ROLE 'arn:aws:iam::XXXXXXXXXXXXX:role/RedshiftML'
REGION 'us-east-2';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HeV7RF6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622584512123/ayBlA0Jdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HeV7RF6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622584512123/ayBlA0Jdg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-creating-an-ml-model"&gt;
  &lt;/a&gt;
  4. Creating an ML Model
&lt;/h3&gt;

&lt;p&gt;Amazon Redshift ML enables you to train models with a single SQL &lt;code&gt;CREATE MODEL&lt;/code&gt; command. Once the data is imported, we can create and train our ML model based on this data. &lt;/p&gt;

&lt;p&gt;To create a model in Redshift, use the Redshift ML &lt;code&gt;CREATE MODEL&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE MODEL orange_telecom_customers_model 
FROM (SELECT 
      state, account_length, area_code, international_plan, voice_mail_plan, 
      number_vmail_messages, total_day_minutes, total_day_calls, 
      total_day_charge, total_eve_minutes, total_eve_calls, total_eve_charge, 
      total_night_minutes, total_night_calls, total_night_charge, 
      total_intl_minutes, total_intl_calls, total_intl_charge, 
      customer_service_calls, churn
      FROM orange_telecom_customers
      WHERE purpose = 'train'
  )
TARGET churn
FUNCTION ml_fn_orange_telecom_customers
IAM_ROLE 'arn:aws:iam::XXXXXXXXXXXXX:role/sagemaker'
SETTINGS (
  S3_BUCKET 'geospatial-dev'
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above statement, we used SQL to select only the subset of our dataset that we've labeled for training purposes. For the &lt;code&gt;TARGET&lt;/code&gt; variable we provided the name of the column we want to predict, which in this case is the &lt;code&gt;churn&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;We also provided the name of the SQL function that will be generated after execution. Amazon Redshift will register the function as a SQL function for making predictions within your Amazon Redshift cluster. Other temporary data and training artifacts will be exported to the S3 Bucket provided in &lt;code&gt;SETTINGS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Depending on the size of the training dataset, it could take 45mins or more to finish training the model. Once the training is successful, you can visualize information about the model using the SQL command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SHOW MODEL orange_telecom_customers_model;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlJ2-vJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622584954719/8WmKppvlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlJ2-vJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622584954719/8WmKppvlt.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As highlighted in the image above, the &lt;a href="https://deepai.org/machine-learning-glossary-and-terms/f-score"&gt;F1 Score&lt;/a&gt; (used to analyze the accuracy for binary classification problems) for the model was 0.9038 which is quite an impressive outcome for a model that was created without machine knowledge or expertise.&lt;/p&gt;

&lt;p&gt;The best part of doing machine learning with Redshift ML is the AutoML functionality. With AutoML in use, you don't have to know anything about the problem you are trying to solve or the best machine learning algorithm that applies. Redshift ML will automatically detect the problem type from the data and apply the best algorithm for training the model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-making-predictions"&gt;
  &lt;/a&gt;
  5. Making Predictions
&lt;/h3&gt;

&lt;p&gt;Once the model is in a ready state, we can use it for predictions by calling the function &lt;code&gt;ml_fn_orange_telecom_customers&lt;/code&gt; that was generated during the model training process within our SQL commands.&lt;/p&gt;

&lt;p&gt;For example, this SQL function can be used at the backend of the telecoms company applications to predict customers that are likely to churn in the future and use this knowledge to provide enticing offers/promos that could convince them to remain with the company.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT churn,
       ml_fn_orange_telecom_customers(
          state, account_length, area_code, international_plan, voice_mail_plan, 
          number_vmail_messages, total_day_minutes, total_day_calls, 
          total_day_charge, total_eve_minutes, total_eve_calls, total_eve_charge, 
          total_night_minutes, total_night_calls, total_night_charge, 
          total_intl_minutes, total_intl_calls, total_intl_charge, 
          customer_service_calls
       ) AS "prediction"
FROM orange_telecom_customers
WHERE purpose = 'test';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the SQL command above, we used the function to make predictions on our test datasets. The output provides a side-by-side comparison of expected output &lt;code&gt;churn&lt;/code&gt; and predicted output &lt;code&gt;prediction&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prediction Report:&lt;/strong&gt; On the test dataset, the model was able to achieve a &lt;strong&gt;95% accuracy&lt;/strong&gt; by making accurate predictions on 639 records out of 667 used in evaluating the model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Problem type: BinaryClassification
Classification report:
              precision    recall  f1-score   support

       False       0.96      0.99      0.98       572
        True       0.92      0.77      0.84        95

    accuracy                           0.96       667
   macro avg       0.94      0.88      0.91       667
weighted avg       0.96      0.96      0.96       667

Accuracy Score: 0.9580209895052474
Area under curve: 0.8789657710710341
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The report above shows that doing machine learning with Redshift produces the level of result or even better compared to creating custom Python models with frameworks like TensorFlow and Pytorch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7FBjrT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622675049410/ZWSX2WOBv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7FBjrT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622675049410/ZWSX2WOBv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, we saw how much of a game-changer Amazon Redshift ML is for organizations that can't afford the financial investment required to set up an in-house team of machine learning experts and resources but would like to apply machine learning knowledge to their datasets.&lt;/p&gt;

&lt;p&gt;To learn more about using machine learning in Amazon Redshift, visit the AWS &lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/machine_learning.html"&gt;documentation page&lt;/a&gt;. You can also check out more of my articles at &lt;a href="https://blog.somideolaoye.com/"&gt;blog.somideolaoye.com&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>sql</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Understanding Kubernetes: part 43 – Init Containers</title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 07 Jun 2021 06:04:17 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-kubernetes-part-43-init-containers-2ih9</link>
      <guid>https://dev.to/aurelievache/understanding-kubernetes-part-43-init-containers-2ih9</guid>
      <description>&lt;p&gt;Understanding Kubernetes can be difficult or time-consuming. In order to spread knowledges about Cloud technologies I started to create sketchnotes about Kubernetes. I think it could be a good way, more visual, to explain Kubernetes (and others technologies).&lt;/p&gt;

&lt;p&gt;We continue the serie of Sketchnotes about Kubernetes, with an explanation about Init Containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuaZuWEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpb3lagwygjmn2g2yosr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuaZuWEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpb3lagwygjmn2g2yosr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tl8w38A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8uchn6r14dxmkjew8vq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tl8w38A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8uchn6r14dxmkjew8vq.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abOSbtoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d005gzlctxvx0c3syp7o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abOSbtoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d005gzlctxvx0c3syp7o.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPGCAAFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09w61wf29ptp2ksimekg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPGCAAFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09w61wf29ptp2ksimekg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YTjRPH8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jphuwxw5ywjf7q9yarns.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YTjRPH8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jphuwxw5ywjf7q9yarns.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xV4FdjHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cox70kwcbwj89nc04ka4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xV4FdjHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cox70kwcbwj89nc04ka4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-xfbom5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmie2gldhxzryycbdor9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-xfbom5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmie2gldhxzryycbdor9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 165 pages: &lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;"Understanding Kubernetes in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Truthy and Falsy Values in JavaScript Work</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 07 Jun 2021 05:56:02 +0000</pubDate>
      <link>https://dev.to/alexdevero/how-truthy-and-falsy-values-in-javascript-work-5gem</link>
      <guid>https://dev.to/alexdevero/how-truthy-and-falsy-values-in-javascript-work-5gem</guid>
      <description>&lt;p&gt;Truthy and falsy values are two important concepts for JavaScript developers to understand. In this tutorial, you will learn about what truthy and falsy values in JavaScript are and how they work. You will also learn how to convert values to Boolean with &lt;code&gt;Boolean()&lt;/code&gt; constructor and NOT NOT operator, and why avoid &lt;code&gt;new Boolean&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#booleans-true-false-and-beyond"&gt;
  &lt;/a&gt;
  Booleans, true, false and beyond
&lt;/h2&gt;

&lt;p&gt;As you probably already know Boolean, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, is one of the primitive data types that exist in JavaScript. Then, there are other primitive values such as strings, numbers, BigInt, null, undefined and symbols. Aside to these, there are objects. Objects also include arrays. However, there is more than that.&lt;/p&gt;

&lt;p&gt;All these primitive data types also have Boolean representation. What this means is that JavaScript can take each of these data types, their values, and evaluate them as Boolean. JavaScript can "convert" their vales to Boolean, either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Which Boolean will it be depends on the data type you are working with.&lt;/p&gt;

&lt;p&gt;Boolean has only two possible values, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. This also creates a limit for how JavaScript can "convert" values. When JavaScript "converts" values to be either or false it uses specific set of rules. These rules are implemented at the core of the language and are very unlikely to change. Let's take a look at them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#truthy-and-falsy-values"&gt;
  &lt;/a&gt;
  Truthy and falsy values
&lt;/h2&gt;

&lt;p&gt;There are currently seven primitive data types in JavaScript. These are numbers, strings, Boolean, BigInt, null, undefined and symbols. Values of some data types are always truthy and of others always falsy, regardless of the actual value. This is not necessarily true for other values.&lt;/p&gt;

&lt;p&gt;There are also data types whose values can be truthy in one scenario and falsy in another. What makes the difference, and determines the truthy / falsy status, is the actual value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#falsy-values"&gt;
  &lt;/a&gt;
  Falsy values
&lt;/h3&gt;

&lt;p&gt;Falsy values are values that evaluate to &lt;code&gt;false&lt;/code&gt; when JavaScript "converts" them to their Boolean alternatives. First, let's take a look at values that are falsy in all situations. In other words, it doesn't matter what their actual value is. These values are &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;. These three will be always falsy.&lt;/p&gt;

&lt;p&gt;Aside to these two, other falsy values are Boolean &lt;code&gt;false&lt;/code&gt;, number &lt;code&gt;0&lt;/code&gt;, BigInt &lt;code&gt;0n&lt;/code&gt;, empty single-quote string (&lt;code&gt;''&lt;/code&gt;), empty string with backticks (&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;/code&gt;) and empty double-quote string (&lt;code&gt;""&lt;/code&gt;). These values will be falsy as long as they don't change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Falsy values&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="kc"&gt;NaN&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="c1"&gt;// BigInt 0&lt;/span&gt;
&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="c1"&gt;// empty single-quote string&lt;/span&gt;
&lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;// empty string with backticks&lt;/span&gt;
&lt;span class="s2"&gt;``&lt;/span&gt; &lt;span class="c1"&gt;// empty double-quote string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#truthy-values"&gt;
  &lt;/a&gt;
  Truthy values
&lt;/h3&gt;

&lt;p&gt;On the other side are truthy values. These values will be evaluated as &lt;code&gt;true&lt;/code&gt; when JavaScript "converts" them to Boolean. First, there are five values that will be always truthy, no matter the situation. These are arrays (empty, non-empty), objects (empty, non-empty), &lt;code&gt;new Date()&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;, both positive and negative.&lt;/p&gt;

&lt;p&gt;Values that will be truthy are also Boolean &lt;code&gt;true&lt;/code&gt;, positive and negative numbers (integers and floats) and non-zero BigInt. Truthy will also be non-empty strings created with single quotes, double quotes and backticks. Truthy value will also be &lt;code&gt;0&lt;/code&gt; as a string (&lt;code&gt;"0"&lt;/code&gt;). This is because it is no longer 0 but non-empty string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Truthy values&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Array, empty and non-empty&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// Object, empty and non-empty&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="mf"&gt;3.14&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.14&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="c1"&gt;// Non-zero BigInt&lt;/span&gt;
&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="c1"&gt;// Number infinity positive&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="c1"&gt;// Number infinity negative&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// 0 as a string&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;non-empty single-quote string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="s2"&gt;`non-empty string with backticks`&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;non-empty double-quote string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-note-about-boolean-context"&gt;
  &lt;/a&gt;
  A note about Boolean context
&lt;/h2&gt;

&lt;p&gt;As you now know, JavaScript can convert values to Boolean. This happens automatically, but only in a specific situation. This situation is called a Boolean context. Boolean context basically means that JavaScript needs to know the "Boolean" value of a value in order to get the work done.&lt;/p&gt;

&lt;p&gt;A simple example of this situation is when you use &lt;a href="https://blog.alexdevero.com/javascript-if-else-statement/"&gt;if...else&lt;/a&gt; statement. When you use some value in &lt;code&gt;if...else&lt;/code&gt; statement, and only that value, JavaScript has to convert that value to Boolean. It has no other option because the condition of &lt;code&gt;if...else&lt;/code&gt; has to be a Boolean. Well, unless that value is already a Boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If...else statement&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* Boolean context */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* Some code to execute */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'falsy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'falsy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'falsy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'falsy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'truthy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'truthy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'truthy'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truthy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;falsy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'truthy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#converting-values-to-boolean"&gt;
  &lt;/a&gt;
  Converting values to Boolean
&lt;/h2&gt;

&lt;p&gt;JavaScript converts values to Boolean automatically in a Boolean context. That said, you can also convert values to Boolean by yourself, when you want. There are at least two ways to do this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-boolean-constructor"&gt;
  &lt;/a&gt;
  The Boolean constructor
&lt;/h3&gt;

&lt;p&gt;The first way to do this is by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"&gt;Boolean()&lt;/a&gt; constructor. This is an object constructor that creates new Boolean object. This object is a wrapper for a Boolean value. This is not important. What is important is that the &lt;code&gt;Boolean()&lt;/code&gt; constructor accepts a value as a parameter. It takes that value and returns it as a Boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joyce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-not-not-or-double-bang-operator"&gt;
  &lt;/a&gt;
  The NOT NOT, or double bang, operator
&lt;/h3&gt;

&lt;p&gt;Your second option to convert values to Boolean is by using the "NOT NOT" operator. This operator is also called a "double bang" operator. You may already know the logical NOT operator (&lt;code&gt;!&lt;/code&gt;), also called "bang". This operator, if you place it in front of a Boolean value, will reverse it to the opposite.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;!true&lt;/code&gt; will give you &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;!false&lt;/code&gt; will give you &lt;code&gt;true&lt;/code&gt;. Nice and simple. When you use this operator twice, it will not reverse the value. What it will do is it will convert that value to Boolean. If you use it with Boolean, it will do nothing. A very simple and fast way to convert any value to Boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#which-one-to-use"&gt;
  &lt;/a&gt;
  Which one to use
&lt;/h3&gt;

&lt;p&gt;Both NOT NOT and &lt;code&gt;Boolean()&lt;/code&gt; constructor will get the job done and give you the same result. Any performance differences will be probably negligible. So, this basically means that there is no right or wrong choice. You should use what you prefer and what is more readable for you. If you like &lt;code&gt;Boolean()&lt;/code&gt; use it. If &lt;code&gt;!!&lt;/code&gt; use that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-new-boolean"&gt;
  &lt;/a&gt;
  Avoid new Boolean
&lt;/h3&gt;

&lt;p&gt;One thing you should now. There is the &lt;code&gt;Boolean&lt;/code&gt; constructor and there is also the &lt;code&gt;new Boolean&lt;/code&gt; object. The &lt;code&gt;new Boolean&lt;/code&gt; is an object type for the Boolean. It is an instance of Boolean object. You should avoid use it, as well as other object types such as &lt;code&gt;new Number&lt;/code&gt;, &lt;code&gt;new String&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;The reason is that while primitives (primitive data types) are cheap objects are expensive. Primitives are immutable and can share references. They also don't have to hold any state for each instance. This is not true for objects. Objects have their own unique memory address and can hold their own unique internal state.&lt;/p&gt;

&lt;p&gt;All this means that JavaScript needs more resources to create and work with objects than with primitives. When you use object type, such as &lt;code&gt;new Boolean&lt;/code&gt; you are not creating a simple primitive, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. You are creating whole new &lt;code&gt;Boolean()&lt;/code&gt; object. Save some memory and use the &lt;code&gt;Boolean&lt;/code&gt; constructor, or NOT NOT (&lt;code&gt;!!&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-arrays-of-strings-with-boolean"&gt;
  &lt;/a&gt;
  Filtering arrays of strings with Boolean
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Boolean&lt;/code&gt; constructor can also help you remove empty strings from an array. Let's say you have an array with strings and you want to remove all empty strings. One thing you can do is to use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;filter()&lt;/a&gt; method and check for length of each string. If the length is 0 you can discard that string.&lt;/p&gt;

&lt;p&gt;Another thing you can do is use the &lt;code&gt;Boolean&lt;/code&gt; constructor. You can use the &lt;code&gt;filter()&lt;/code&gt; method and pass in the Boolean constructor as the callback function. The result will be an array with only non-empty strings. The reason this works is simple. The callback function for &lt;code&gt;filter()&lt;/code&gt; method always returns Boolean.&lt;/p&gt;

&lt;p&gt;When you pass in the &lt;code&gt;Boolean()&lt;/code&gt; constructor the filter method will take each item in the array and convert it into Boolean. As you now know, non-empty strings are truthy. So, every with non-0 length string will return &lt;code&gt;true&lt;/code&gt;. Empty strings are falsy. So, every empty string will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method discards all items for which the callback function returned &lt;code&gt;false&lt;/code&gt;. This means, in this case, that it will discard all empty strings in the array. These strings will be evaluated as falsy and will not pass the test of the callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an array with empty and non-empty strings:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Java&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;team&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Use Boolean constructor to create clean copy:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arrClean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Log the clean array:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrClean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Java', 'coffee', 'team', 'tea' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-how-truthy-and-falsy-values-in-javascript-work"&gt;
  &lt;/a&gt;
  Conclusion: How truthy and falsy values in JavaScript work
&lt;/h2&gt;

&lt;p&gt;Truthy and falsy values can be a bit confusing. The same can be said about converting values to boolean. Yet, these concepts are important and every JavaScript developer should understand them. I hope that this tutorial helped you learn what truthy and falsy values in JavaScript are, how they work and how to use them.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Auth0 - Authentication Code Flow for newbie</title>
      <author>Bien Vo</author>
      <pubDate>Mon, 07 Jun 2021 05:46:11 +0000</pubDate>
      <link>https://dev.to/vhbien000/auth0-authentication-code-flow-for-newbie-34cl</link>
      <guid>https://dev.to/vhbien000/auth0-authentication-code-flow-for-newbie-34cl</guid>
      <description>&lt;p&gt;&lt;a href="https://beanvh.medium.com/auth0-easy-but-secure-auth-ede4f38543f9"&gt;https://beanvh.medium.com/auth0-easy-but-secure-auth-ede4f38543f9&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Send SMS with Ruby Mechanize gem</title>
      <author>Merdan Durdiyev</author>
      <pubDate>Mon, 07 Jun 2021 05:05:24 +0000</pubDate>
      <link>https://dev.to/eminarium/send-sms-with-ruby-mechanize-gem-oni</link>
      <guid>https://dev.to/eminarium/send-sms-with-ruby-mechanize-gem-oni</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome"&gt;
  &lt;/a&gt;
  Welcome
&lt;/h1&gt;

&lt;p&gt;Good day, dear friends, coders, and enthusiasts. Here's another post about how to do something else with precious Ruby. Today, we are going to write Ruby code to send SMS via a web app, provided by a Mobile service Carrier. No matter, be it US carriers like &lt;strong&gt;AT&amp;amp;T&lt;/strong&gt;, &lt;strong&gt;Verizon&lt;/strong&gt;, &lt;strong&gt;Sprint&lt;/strong&gt;, or carriers in Russia like &lt;strong&gt;MTC&lt;/strong&gt;, &lt;strong&gt;Megafon&lt;/strong&gt;, and &lt;strong&gt;Beeline&lt;/strong&gt;, we can use their web app (if they provide one) to automate sending SMS with Ruby.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#mechanize-gem"&gt;
  &lt;/a&gt;
  Mechanize gem
&lt;/h1&gt;

&lt;p&gt;Let's first make it clear, what a &lt;em&gt;gem&lt;/em&gt; is. &lt;br&gt;
&lt;strong&gt;Gem&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;is a software package that contains packed Ruby application or library.&lt;/li&gt;
&lt;li&gt;is used to extend or modify functionality in Ruby applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum it up, we create Ruby gems, to be able to distribute them and make someone else's life easier. Other Rubyists can use them in their own code to import ready-to-use code, enhance productivity, and make development much faster.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mechanize gem&lt;/strong&gt; - is a ruby library that makes automated web interaction easy. Mechanize can follow links and submit forms. Form fields can be populated and submitted.&lt;/p&gt;

&lt;p&gt;You can find more about the mechanize gem here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sparklemotion/mechanize"&gt;Github page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sparklemotion/mechanize/blob/main/EXAMPLES.rdoc"&gt;Examples &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sparklemotion/mechanize/blob/main/GUIDE.rdoc"&gt;Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#sending-test-sms"&gt;
  &lt;/a&gt;
  Sending Test SMS
&lt;/h1&gt;

&lt;p&gt;Here is the piece of code, where you can follow and get a clear explanation of how to fill in the form fields, submit it, and send the required SMS.&lt;br&gt;
The following input fields and service URL are shown just as an example and maybe named differently in actual services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;'&lt;a href="https://customer.verizon.com/"&gt;https://customer.verizon.com/&lt;/a&gt;'&lt;/strong&gt;&lt;/em&gt; customer account URL&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;'login'&lt;/strong&gt;&lt;/em&gt; input field&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;'password'&lt;/strong&gt;&lt;/em&gt; input field&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;'Sms.DestinationAddress'&lt;/strong&gt;&lt;/em&gt; input field&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;'Sms.Text'&lt;/strong&gt;&lt;/em&gt; textarea field
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mechanize'&lt;/span&gt;

&lt;span class="n"&gt;mech&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mechanize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="c1"&gt;# Ignore SSL certificate&lt;/span&gt;
&lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;verify_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;VERIFY_NONE&lt;/span&gt; 

&lt;span class="c1"&gt;# The login page&lt;/span&gt;
&lt;span class="n"&gt;login_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://customer.verizon.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# The login form&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login_page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       

&lt;span class="c1"&gt;# Filling in 'login' and 'password' input fields, and submitting.&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'login'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'888-555-4444'&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ABCDEFG'&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;

&lt;span class="c1"&gt;# The SMS form page&lt;/span&gt;
&lt;span class="n"&gt;sms_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://customer.verizon.com/SMS/Send'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="c1"&gt;# The SMS form, the first and only form&lt;/span&gt;
&lt;span class="n"&gt;sms_form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sms_page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                

&lt;span class="c1"&gt;# Entering sms number and sms message to send&lt;/span&gt;
&lt;span class="c1"&gt;# 'Sms.DestinationAddress' and 'Sms.Text' are input and textbox names&lt;/span&gt;
&lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Sms.DestinationAddress'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'555-888-2222'&lt;/span&gt;
&lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Sms.Text'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'This is test message'&lt;/span&gt;
&lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#automate-sms-sending"&gt;
  &lt;/a&gt;
  Automate SMS Sending
&lt;/h1&gt;

&lt;p&gt;What we need to do now is just add the list of recipients (their numbers and corresponding messages). I have added just two of them. But you can add lots of more.&lt;br&gt;
What I have done here is: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I added list of recipients;&lt;/li&gt;
&lt;li&gt;I gave the list to an 'each' block.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can make it even better by gathering all that code under a function that gets respective arguments and call that function for each of the recipients.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mechanize'&lt;/span&gt;

&lt;span class="n"&gt;sms_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;number: &lt;/span&gt;&lt;span class="s1"&gt;'555-666-8888'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s1"&gt;'Get this SMS...'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;# And lots of lots SMS numbers and messages...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;number: &lt;/span&gt;&lt;span class="s1"&gt;'555-777-0022'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s1"&gt;'Last one...'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;mech&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mechanize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="c1"&gt;# Ignore SSL certificate&lt;/span&gt;
&lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;verify_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;VERIFY_NONE&lt;/span&gt; 

&lt;span class="c1"&gt;# The login page&lt;/span&gt;
&lt;span class="n"&gt;login_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://customer.verizon.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# The login form&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login_page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       

&lt;span class="c1"&gt;# Filling in 'login' and 'password' input fields, and submitting.&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'login'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'888-555-4444'&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ABCDEFG'&lt;/span&gt;
&lt;span class="n"&gt;login_form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;

&lt;span class="c1"&gt;# The SMS form page&lt;/span&gt;
&lt;span class="n"&gt;sms_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://customer.verizon.com/SMS/Send'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="c1"&gt;# The SMS form, the first and only form&lt;/span&gt;
&lt;span class="n"&gt;sms_form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sms_page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                

&lt;span class="c1"&gt;# Send SMS to whole 'sms_list'&lt;/span&gt;
&lt;span class="n"&gt;sms_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Entering sms number and sms message to send&lt;/span&gt;
    &lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Sms.DestinationAddress'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Sms.Text'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:message&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Submitting form, sending sms&lt;/span&gt;
    &lt;span class="n"&gt;sms_form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;                                             
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#sum-it-up"&gt;
  &lt;/a&gt;
  Sum It Up
&lt;/h1&gt;

&lt;p&gt;We have looked at just a small piece of what 'mechanize' gem can actually do. It has lots of more possibilities.&lt;br&gt;
You can write a console application that surfs the given URLs and performs given operations without your attendance. So, the rest is up to you to discover. Go for it!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>webdev</category>
      <category>sms</category>
      <category>scraping</category>
    </item>
    <item>
      <title>Completing 4 JavaScript .filter() Method Challenges</title>
      <author>Tim Winfred (He/She/They)</author>
      <pubDate>Mon, 07 Jun 2021 05:02:45 +0000</pubDate>
      <link>https://dev.to/twinfred/completing-4-javascript-filter-method-challenges-16df</link>
      <guid>https://dev.to/twinfred/completing-4-javascript-filter-method-challenges-16df</guid>
      <description>&lt;p&gt;As a personal challenge to learn and grow my JavaScript skills, I will be digging into some of the most popular methods and properties the language has to offer. Over the next several weeks, I will be completing a series of algorithm challenges that require the use of specific methods/properties.&lt;/p&gt;

&lt;p&gt;The first method in my challenge is &lt;code&gt;filter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;Mozilla documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Javascript array filter() creates a new array of elements from an existing array that meets a specified condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Time Complexity:&lt;/strong&gt; O(n)&lt;/p&gt;

&lt;p&gt;I decided to challenge myself with the &lt;code&gt;.filter()&lt;/code&gt; method first because it's super useful when it comes to dealing with data. Pretty much every website with a catalogue of data (products, articles, users, etc.) needs a way to filter and return only the data necessary to perform an action. I know I have done many web searches and used the handy filtering options to narrow down the results to find exactly what I want.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you've never used the &lt;code&gt;filter()&lt;/code&gt; method, check out this awesome &lt;a href="https://www.geeksforgeeks.org/javascript-array-filter-method/"&gt;documentation from GeeksforGeeks&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge-filter-an-array-of-numbersstrings"&gt;
  &lt;/a&gt;
  Challenge: Filter An Array of Numbers/Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a function that filters an array of objects to find hotels rated at least N stars or higher&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hilton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.7&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Best Western&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.8&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;s Hotel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marriot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterByRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ratingMinimum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ratingMaximum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ratingMinimum&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ratingMaximum&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hotelsWithAtLeast4Stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hotelsWithAtLeast4Stars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [{ name: 'Hilton', rating: 4.7 }, { name: 'Marriot', rating: 4.2 } ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hotelsWithAtLeast3Stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hotelsWithAtLeast3Stars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [&lt;/span&gt;
&lt;span class="c1"&gt;//     { name: 'Hilton', rating: 4.7 },&lt;/span&gt;
&lt;span class="c1"&gt;//     { name: 'Best Western', rating: 3.8 },&lt;/span&gt;
&lt;span class="c1"&gt;//     { name: 'Marriot', rating: 4.2 }&lt;/span&gt;
&lt;span class="c1"&gt;//   ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hotelsBetween3and4Stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hotelsBetween3and4Stars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ { name: 'Best Western', rating: 3.8 } ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hotelsWith3orLessStars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterByRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hotelsWith3orLessStars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ { name: "Bob's Hotel", rating: 2.5 } ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#challenge-filter-an-array-of-objects"&gt;
  &lt;/a&gt;
  Challenge: Filter An Array of Objects
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Challenge #1&lt;/span&gt;
&lt;span class="c1"&gt;// Create a function that filters strings by length given two arguments: minimum length, maximum length&lt;/span&gt;
&lt;span class="c1"&gt;// Either argument may be missing. if both are missing, return the original array&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterStringsByLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minLength&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxLength&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;def&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ghij&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;klmno&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pqrstu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vwxyz12&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordsAtLeast3Characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterStringsByLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAtLeast3Characters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'def', 'ghij', 'klmno', 'pqrstu', 'vwxyz12' ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordsNoLongerThan5Characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterStringsByLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsNoLongerThan5Characters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ '', 'a', 'bc', 'def', 'ghij', 'klmno' ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordsAtLeast3CharactersAndNoLongerThan5Characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterStringsByLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAtLeast3CharactersAndNoLongerThan5Characters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'def', 'ghij', 'klmno' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minAndMaxNotProvided&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterStringsByLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minAndMaxNotProvided&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// ['', 'a', 'bc', 'def', 'ghij', 'klmno', 'pqrstu', 'vwxyz12']&lt;/span&gt;


&lt;span class="c1"&gt;// Challenge #2&lt;/span&gt;
&lt;span class="c1"&gt;// Create a function that filters an array of numbers, given two arguments: minimum and maximum.&lt;/span&gt;
&lt;span class="c1"&gt;// Either argument may be missing. if both are missing, return the original array&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterNumbersBySize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minSize&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxSize&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1001&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbersMinus5AndUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterNumbersBySize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbersMinus5AndUp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ -4, 0, 2, 11, 63, 1001 ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbersNoGreaterThan10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterNumbersBySize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbersNoGreaterThan10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ -12, -4, 0, 2 ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbersBetweenMinus4And11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterNumbersBySize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbersBetweenMinus4And11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ -4, 0, 2, 11 ]&lt;/span&gt;

&lt;span class="nx"&gt;minAndMaxNotProvided&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filterNumbersBySize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minAndMaxNotProvided&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [-12, -4, 0, 2, 11, 63, 1001]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#challenge-filter-out-repeated-values"&gt;
  &lt;/a&gt;
  Challenge: Filter Out Repeated Values
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Write a function to filter out any duplicates in an array&lt;/span&gt;
&lt;span class="c1"&gt;// Input type is an array of strings and/or numbers&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStringsWithoutDupes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;removeDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfStringsWithoutDupes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'aa', 'bb', 'cc', 'dd', 'ee' ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbersWithoutDupes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;removeDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbersWithoutDupes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ 0, 1, 2, 3, 4, 5 ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbersAndStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfStrings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbersAndStringsWithoutDupes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;removeDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbersAndStrings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayOfNumbersAndStringsWithoutDupes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'aa', 'bb', 'cc', 'dd', 'ee', 0, 1, 2, 3, 4, 5 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/twinfred/JavaScript_Methods_And_Properties/tree/main/filter()"&gt;View the code on my Github.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Top DataScience Blogs to follow in 2021</title>
      <author>Vishnubhotla V D V Bharadwaj</author>
      <pubDate>Mon, 07 Jun 2021 03:44:09 +0000</pubDate>
      <link>https://dev.to/bharadwaj6262/top-datascience-blogs-to-follow-in-2021-203c</link>
      <guid>https://dev.to/bharadwaj6262/top-datascience-blogs-to-follow-in-2021-203c</guid>
      <description>&lt;p&gt;DataScience widely known as the future. So, to learn present and future concepts in a clear and detailed manner, blogs are one of the easiest methods. Here are the top blogs in the market which should be a must-follow to mold your career in DataScience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://towardsdatascience.com/"&gt;Towards Data Science&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Towards Data Science is a Medium publication brewing with audience-oriented content not just about Data Science, but a multitude of related technologies such as Machine Learning, Programming, Visualization, and Artificial Intelligence, spanning across more than 6000 published articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.datasciencecentral.com/"&gt;Data Science Central&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data Science Central one of the leading repositories of Data Science content that is regularly updated with the latest trends across domains such as Artificial Intelligence, Machine Learning, Deep Learning, Analytics, Big Data, and much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.reddit.com/r/datascience/"&gt;Data Science Reddit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reddit is world-renowned news and discussion website with hundreds of diverse communities and millions of active users. One such community or subreddit, as Reddit likes to call it, is r/DataScience, which is frequented by over 498 thousand members with an average of over 541 active users at all times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.kdnuggets.com/"&gt;kDnuggets&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;KDnuggets is a well-known and prestigious site for gaining information about some of the rapidly growing technologies in the world, including Data Science, Artificial Intelligence, Analytics, Machine Learning, Data Mining, Big Data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.analyticsvidhya.com/"&gt;Analytics Vidhya&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Analytics Vidhya offers a complete Data Science ecosystem through its four vital pillars, which educate you about the top trends in the industry, solidify your fundamentals via online courses, allow you to engage with other individuals over hackathons, and make you a competitive candidate for the various jobs on the platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://news.google.com/datascience"&gt;Data Science | Google News&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google's News platform covers the latest trends and bits of information across a wide range of topics, including general news and specific trends in the industry. Being a repertoire of almost every leading source of information on the internet, Google News offers an equally broad range of latest innovations from some of the reputed Data Science platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.datacamp.com/"&gt;DataCamp&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DataCamp is an industry-leading online course provider for Data Science. Providing hands-on experience with some of the widely used tools in the Data Science industry, such as Python, R, Scala, Power BI, Excel, Tableau, and many others&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.ibmbigdatahub.com/"&gt;IBM Big Data &amp;amp; Analytics hub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The multinational giant powering thousands of successful businesses is a pivotal figure in the numerous innovations in the Data Science and Artificial Intelligence industry. IBM believes in sharing the knowledge with the world and created Big Data and Analytics Hub for Data Science fanatics and interested readers where all the information is readily accessible in a systematic manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://insidebigdata.com/"&gt;insideBIGDATA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;InsideBIGDATA is one of the popular news platforms that offer regular updates and news about the latest strategies and technologies from the IT world. Covering a wide range of topics across Big Data, Data Science, Deep Learning, and AI. InsideBIGDATA excellently delivers impactful industry perspectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://research.fb.com/category/data-science/"&gt;Facebook DataScience Blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The top social media giant Facebook is also a key player in the Data Science industry. The enormous user base of over 2.6 Billion users compelled Facebook to invest in reliable and competent Data Science techniques for an in-depth insight into its users.&lt;/p&gt;

&lt;p&gt;That's the end friends. Hope you all liked this. Follow me for more such awesome content. Support me on &lt;a href="https://twitter.com/Bharadwaj6262"&gt;Twitter&lt;/a&gt; where I post some really useful content.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>100daysofcode</category>
      <category>machinelearning</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Creating custom hook for fetching data in react</title>
      <author>Keyur Paralkar</author>
      <pubDate>Mon, 07 Jun 2021 03:24:42 +0000</pubDate>
      <link>https://dev.to/keyurparalkar/creating-custom-hook-for-fetching-data-in-react-3mo3</link>
      <guid>https://dev.to/keyurparalkar/creating-custom-hook-for-fetching-data-in-react-3mo3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prerequisite-to-implement-the-customhooks"&gt;
  &lt;/a&gt;
  Prerequisite to implement the customHooks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowlegde of functional components, and react hooks.&lt;/li&gt;
&lt;li&gt;Libraries/Packages required: Redux, Axios.&lt;/li&gt;
&lt;li&gt;Placeholder API such as: &lt;a href="https://jsonplaceholder.typicode.com/"&gt;jsonplaceholder&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#topics-covered-in-this-blogpost"&gt;
  &lt;/a&gt;
  Topics covered in this blogpost:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Architectural pattern that is used for creating custom hook with axios.get().&lt;/li&gt;
&lt;li&gt;Implementation of custom hook.&lt;/li&gt;
&lt;li&gt;Usage in the actual component.&lt;/li&gt;
&lt;li&gt;More usecases for the custom hook like addition of adhoc redux actions, and multiple REST method implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-our-custom-hook"&gt;
  &lt;/a&gt;
  Architecture of our custom hook.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Every custom hook generally returns a state, it may or may not have a useEffect inside it. Let us name our custom hook as &lt;code&gt;useFetch&lt;/code&gt;. According to the &lt;a href="https://reactjs.org/docs/hooks-rules.html"&gt;Rules of Hook&lt;/a&gt; every custom hook should have &lt;code&gt;use&lt;/code&gt; as a keyword in front of it to recognize it as a hook.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useFetch&lt;/code&gt; is going to consist of the following blocks:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parameters&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;List of parameters such as URL, the method type, bodyand, headers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;State Block&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;This will consists of all the local states i.e. &lt;code&gt;useState&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;useEffect Block&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;This will consists of the logic for &lt;code&gt;axios&lt;/code&gt; call that we are going to make to the server.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below diagram will provide a clearer view on how &lt;code&gt;useFetch&lt;/code&gt; is designed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMSGTA3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66p2egz5n1a04k4hy3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMSGTA3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66p2egz5n1a04k4hy3f.png" alt="useFetch UML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-our-custom-hook-raw-usefetch-endraw-"&gt;
  &lt;/a&gt;
  Implementing our custom hook: &lt;code&gt;useFetch&lt;/code&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Let us first create a function which accepts a url as a parameter. We will also include the local state variables to this function.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the function described above will consists of &lt;code&gt;useStates&lt;/code&gt; as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;isLoading&lt;/code&gt; for checking if the API has fetched the data or is still fetching the data, &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apiData&lt;/code&gt;: If data is fetched successfully then the data is stored in &lt;code&gt;apiData&lt;/code&gt; variable, &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;serverError&lt;/code&gt;: If there is any error in fetching the data from the API endpoint then we will store that error in &lt;code&gt;serverError&lt;/code&gt; variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;We are going to add an &lt;code&gt;useEffect&lt;/code&gt; react hook. This hook will consists of an &lt;code&gt;axios.get(URL)&lt;/code&gt; call on the requested URL.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;axios&lt;/code&gt; call is enclosed in a async function named &lt;code&gt;fetchedData&lt;/code&gt;. It consists of &lt;code&gt;try...catch&lt;/code&gt; block. Once the data is awaited we store it in &lt;code&gt;apiData&lt;/code&gt; using &lt;code&gt;setApiData&lt;/code&gt;. If you have observed I have also set &lt;code&gt;isLoading&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; at the start of the useEffect. This is done intentionally because we want to show the loader when the API has initiated a call to the server. Once we get the response with 200 status we set the &lt;code&gt;isLoading&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; using &lt;code&gt;setIsLoading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If by some chance there is any error, we set the &lt;code&gt;serverError&lt;/code&gt; state to &lt;code&gt;error&lt;/code&gt; along with &lt;code&gt;isLoading&lt;/code&gt; state to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finally we are going to return all the local state variables as an object.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage-in-the-actual-component"&gt;
  &lt;/a&gt;
  Usage in the actual component
&lt;/h2&gt;

&lt;p&gt;Let us look at an example were we can use our custom hook &lt;code&gt;useFetch&lt;/code&gt;. Below is the code of the &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StrictMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useFetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;.....&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StrictMode&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now just like any React hook we can directly use our custom hook to fetch the data. As you can see, &lt;code&gt;isLoading&lt;/code&gt; and &lt;code&gt;serverError&lt;/code&gt; can be used for conditional rendering of the component for displaying nice error messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-use-cases"&gt;
  &lt;/a&gt;
  Additional use cases
&lt;/h2&gt;

&lt;p&gt;We can have additional use cases such as Adding adhoc redux actions, Generalizing the API methods etc. Below is the brief overview of the two use cases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adding Adhoc redux actions:
You can also integrate redux to your application and add an API response to your global state. Modification to the useFetch would look like this:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchApiData&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchApiSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchApiFailure&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;fetchApiData&lt;/code&gt;, &lt;code&gt;fetchApiSuccess&lt;/code&gt;, and &lt;code&gt;fetchApiFailure&lt;/code&gt; are thunks which call the specific redux actions along with storing the data onto the redux global state.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generalizing API methods
Our &lt;code&gt;useFetch&lt;/code&gt; is currently performing only &lt;code&gt;GET&lt;/code&gt; request. Ideal scenario is to have our &lt;code&gt;useFetch&lt;/code&gt; to perform all types of request such as &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; etc. Following code will make a generalized axios call.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;setApiData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setServerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usage will be the same as that of index.js. Only thing that is changing is the function definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serverError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are some of the use cases which I think can most commonly used. You can you the above custom hook to fetch the data and enhance it as per our needs. &lt;/p&gt;

&lt;p&gt;You can find the code used in this blogpost at the following sandbox URL: &lt;br&gt;
&lt;a href="https://codesandbox.io/s/react-custom-hook-sample-dcuf4"&gt;https://codesandbox.io/s/react-custom-hook-sample-dcuf4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me @&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/keyur-paralkar-494415107/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="Linkedin Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//mailto:keur.plkar@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DufH8NGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/email-c14438%3Fstyle%3Dfor-the-badge%26logo%3DGmail%26logoColor%3Dwhite%26link%3Dmailto:furkanozbek1995%40gmail.com" alt="Mail Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/keurplkar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wF_oZRkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/twitter-1DA1F2%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite" alt="Twitter Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/keyurparalkar/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOULfaxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/github-333%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="Github Badge"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Flutter fingerprint login</title>
      <author>Ushieru Kokoran</author>
      <pubDate>Mon, 07 Jun 2021 03:23:39 +0000</pubDate>
      <link>https://dev.to/ushieru/flutter-fingerprint-login-2kgl</link>
      <guid>https://dev.to/ushieru/flutter-fingerprint-login-2kgl</guid>
      <description>&lt;p&gt;No te rompas mucho la cabeza con esta funcionalidad.&lt;/p&gt;

&lt;p&gt;Usa &lt;a href="https://pub.dev/packages/shared_preferences"&gt;Shared Preferences&lt;/a&gt; para guardas las credenciales de tus usuarios. Puedes pasarte por su documentación para ver cómo funciona. Pero para tu comodidad, te ahorro el trabajo con esta pequeña clase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:shared_preferences/shared_preferences.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionParams&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_userKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'_userKey'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_passwordKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'_passwordKey'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;SessionParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deleteSession&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SharedPreferences&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SessionParams&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getSession&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_userKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_passwordKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;/// ❗ Throwable Function&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;saveSession&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SharedPreferences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isSaveUserParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_userKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isSavePasswordParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_passwordKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isSaveUserParam&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;isSavePasswordParam&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;deleteSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;SessionParams&amp;gt; session not saved'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'SessionParams {user: &lt;/span&gt;&lt;span class="si"&gt;$user&lt;/span&gt;&lt;span class="s"&gt;, password &lt;/span&gt;&lt;span class="si"&gt;$password&lt;/span&gt;&lt;span class="s"&gt;}'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para pedir la huella dactilar podemos hacer uso de &lt;a href="https://pub.dev/packages/local_auth"&gt;local_auth&lt;/a&gt;. Aquí también te echó una mano, buapo, con estás pequeñas funciones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_canCheckBiometrics&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;canCheckBiometrics&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_faceIdAvailable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BiometricType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;availableBiometrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAvailableBiometrics&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isIOS&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;availableBiometrics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BiometricType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;face&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_authenticateWithBiometrics&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;localizedReason:&lt;/span&gt; &lt;span class="s"&gt;'Scan your fingerprint to authenticate'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;useErrorDialogs:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;stickyAuth:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;biometricOnly:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;authenticated&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Oooopps Algo salio mal 🤷‍♂️'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;authenticated&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora solo usamos todo lo anterior hecho 🚀🚀.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loginWithBiometrics&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SessionParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;authenticateWithBiometrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_authenticateWithBiometrics&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticateWithBiometrics&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;doLoginEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Oooopps Algo salio mal 🤷‍♂️'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doLoginEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// TODO: Este es el equivalente a tu función para hacer login.&lt;/span&gt;
  &lt;span class="c1"&gt;// Reemplázala &lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;SessionParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSession&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveSession&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mucha suerte en tus proyectos, precioso ❤️. Déjame tu opinión ¿Prefieres este tipo de ejemplos o preferirías una aplicación completa? ¿Otro tipo de tutoriales? Ayúdame a ayudarte.&lt;/p&gt;

&lt;p&gt;PD: Si te preocupa la seguridad puedes pasar los parámetros por &lt;a href="https://pub.dev/packages/crypt"&gt;crypt&lt;/a&gt;. Se le deja este último paso al lector. Si eres muy flojo déjame un comentario y te echó un cable.&lt;/p&gt;

</description>
      <category>flutter</category>
    </item>
  </channel>
</rss>
