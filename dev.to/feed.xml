<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Protect Your Social Media Accounts</title>
      <author>Atul Anand</author>
      <pubDate>Wed, 18 Aug 2021 05:48:24 +0000</pubDate>
      <link>https://dev.to/theatulanand/protect-your-social-media-accounts-2a59</link>
      <guid>https://dev.to/theatulanand/protect-your-social-media-accounts-2a59</guid>
      <description>&lt;p&gt;The Internet has made our lives easier in so many ways. However, you need to know how you can protect your privacy and avoid fraud. Remember, not only can people be defrauded when using the Internet for investing; the fraudsters use information online to send bogus materials, solicit or phish.&lt;/p&gt;

&lt;p&gt;Phishing is the attempt to obtain financial or confidential information from Internet users. This phishing expedition usually begins with an email that looks as if it is from a legitimate source, often a financial institution. The email contains a link to a fake website that looks like the real site. Fraudsters want you to provide account and password information, and then they have access to your account.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what you can do to protect yourself when using social media:&lt;br&gt;
Privacy Settings: Always check the default privacy settings when opening an account on a social media website. The default privacy settings on many social media websites are typically broad and may permit sharing of information to a vast online community. Modify the setting, if appropriate, before posting any information on a social media website.&lt;/p&gt;

&lt;p&gt;Biographical Information: Many social media websites require biographical information to open an account. You can limit the information made available to other social media users. Consider customizing your privacy settings to minimize the amount of biographical information others can view on the website.&lt;/p&gt;

&lt;p&gt;Account Information: Never give account information, Social Security numbers, bank information or other sensitive financial information on a social media website. If you need to speak to a financial professional, use a firm-sponsored method of communication, such as telephone, letter, firm e-mail or firm-sponsored website.&lt;/p&gt;

&lt;p&gt;Friends/Contacts: When choosing friends or contacts on a social media site, think about why you use the website. Decide whether it is appropriate to accept a ‚Äúfriend‚Äù or other membership request from a financial service provider, such as a financial adviser or broker-dealer. There is no obligation to accept a ‚Äúfriend‚Äù request of a service provider or anyone you do not know or do not know well.&lt;/p&gt;

&lt;p&gt;Site Features: Familiarize yourself with the functionality of the social media website before broadcasting messages on the site. Who will be able to see your messages -- only specified recipients, or all users?&lt;/p&gt;

&lt;p&gt;On-Line Security Tips&lt;br&gt;
As with all computer and web-based accounts, take precautions to keep your social media account information secure. Here are some security tips:&lt;/p&gt;

&lt;p&gt;Pick a ‚Äústrong‚Äù password, keep it secure, and change it frequently.&lt;br&gt;
Use different passwords for different accounts.&lt;br&gt;
Use caution with public computers or wireless connections. Try to avoid accessing your social media accounts on public or other shared computers. But if you must do so, remember to log out completely by clicking the ‚Äúlog out‚Äù button on the social media website to terminate the online session.&lt;br&gt;
Be mindful of accessing your social media accounts on public wireless connections, such as at a coffee shop or airport. It is very easy to eavesdrop on Internet traffic, including passwords and other sensitive data, on a public wireless network.&lt;br&gt;
Be extra careful before clicking on links sent to you, even if by a friend.&lt;br&gt;
Secure your mobile devices. If your mobile devices are linked to your social media accounts, make sure that these devices are password protected in case they are lost or stolen.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>No Fuss Dark-Mode Toggle with React &amp; Styled-Components! üåû‚ÜîÔ∏èüåñ</title>
      <author>Chris Hansen </author>
      <pubDate>Wed, 18 Aug 2021 05:32:36 +0000</pubDate>
      <link>https://dev.to/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4</link>
      <guid>https://dev.to/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4</guid>
      <description>&lt;p&gt;Have you noticed &lt;strong&gt;dark mode&lt;/strong&gt; is pretty standard lately? &lt;/p&gt;

&lt;p&gt;Well, that's because it's badass!&lt;/p&gt;

&lt;p&gt;Let's achieve this new standard of awesome by utilizing styled-components and React! &lt;/p&gt;

&lt;p&gt;It's super easy to implement, so let's get straight to it! üíØ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  üëâ &lt;a href="https://styled-components-darkmode.netlify.app/"&gt;Demo&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#repo"&gt;
  &lt;/a&gt;
  üëâ &lt;a href="https://github.com/chansen17/styled-components-darkmode"&gt;Repo&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#some-things-im-expecting-you-to-know"&gt;
  &lt;/a&gt;
  Some things I'm expecting you to know
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Development Environment&lt;/li&gt;
&lt;li&gt;Basics in React&lt;/li&gt;
&lt;li&gt;Basic S(C)ass&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-fresh-react-project"&gt;
  &lt;/a&gt;
  1. Fresh React project
&lt;/h2&gt;

&lt;p&gt;Let's clean up the file structure ~ &lt;em&gt;if you want.&lt;/em&gt; I deleted all unnecessary files for this project. Removing &lt;code&gt;App.css&lt;/code&gt; and all testing related files. Be sure to remove necessary lines of code in &lt;code&gt;index.js&lt;/code&gt;. I also cleaned up the boilerplate between the &lt;code&gt;header&lt;/code&gt; tags.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-install-and-import-styledcomponents"&gt;
  &lt;/a&gt;
  2. Install and Import styled-components
&lt;/h2&gt;

&lt;p&gt;With a fresh project, let's now install and import styled-components. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;yarn add styled-components&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install --save styled-components&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's now import styled-components like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import styled from 'styled-components'`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-lets-create-a-simple-landing-page-with-styledcomponents"&gt;
  &lt;/a&gt;
  3. Let's create a simple landing page with styled-components
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App()&lt;/code&gt; let's return a &lt;code&gt;Page&lt;/code&gt;, &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Heading&lt;/code&gt;, &lt;code&gt;H1&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Toggle&lt;/code&gt;, and &lt;code&gt;ThemeImage&lt;/code&gt; component, respectively. It should look like so&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5QrFfMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dvrh7tpi1vtvfp2lp5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5QrFfMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dvrh7tpi1vtvfp2lp5f.png" alt="Example code showing the Page, Heading, H1, P, Toggle, and ThemeImage components"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#4-now-that-we-have-our-layout-lets-create-each-of-our-components"&gt;
  &lt;/a&gt;
  4. Now that we have our layout, let's create each of our components
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;Container&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwyNV_7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p4lz4gcacptj0ptwy7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwyNV_7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p4lz4gcacptj0ptwy7f.png" alt="Page and Container component"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;Heading&lt;/code&gt; and &lt;code&gt;H1&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14H-guWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6io3xddrn3oypq22rjog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14H-guWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6io3xddrn3oypq22rjog.png" alt="Heading and H1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Toggle&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uelY4RE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fog9wx0oy7z4o9ko5ah2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uelY4RE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fog9wx0oy7z4o9ko5ah2.png" alt="P and Toggle components"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;ThemeImage&lt;/code&gt; is the component that will contain our toggle state images &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIXu4vln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lokti6hl65uhkz6gd65n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIXu4vln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lokti6hl65uhkz6gd65n.png" alt="ThemeImage component"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#5-lets-create-state-for-our-toggle-component"&gt;
  &lt;/a&gt;
  5. Let's create state for our toggle component
&lt;/h2&gt;

&lt;p&gt;In order for us to to toggle between light and dark mode, we need to hold state. Let's begin by importing the useState hook. &lt;code&gt;import {useState} from 'react'&lt;/code&gt;. Then add it to your &lt;code&gt;App()&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next let's add the logic that will toggle between light and dark mode for our button &lt;code&gt;Toggle&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// console.log(isDarkMode);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This functions only responsibility is to toggle the opposite of what the current state is. In other words, if the state is currently &lt;code&gt;true&lt;/code&gt;, toggling it will become &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; it becomes &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#6-update-our-raw-toggle-endraw-component"&gt;
  &lt;/a&gt;
  6. Update our &lt;code&gt;Toggle&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;Now that we have a function that can toggle our light ~ dark state, let's update our &lt;code&gt;Toggle&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-import-images-to-display-the-active-theme"&gt;
  &lt;/a&gt;
  7. Import images to display the active theme
&lt;/h2&gt;

&lt;p&gt;If we want to show our users the current and next theme, we can do so visually with the use of a Moon and Sun image. Let's import the images at the top of our code like so:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;images are available in the repo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/moon.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/sun.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then lets update our &lt;code&gt;ThemeImage&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeImage&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are updating the &lt;code&gt;ThemeImage&lt;/code&gt; components src attribute as it is an instance of &lt;code&gt;img&lt;/code&gt;. We are also conditionally setting the image with a simple ternary operator while also utilizing template literals. &lt;br&gt;
I'll explain with some pseudocode. You can read this like &lt;code&gt;if stateIsNotDarkMode ? render Moon : else render Sun.&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#8-lets-update-some-style-properties-in-our-components"&gt;
  &lt;/a&gt;
  8. Let's update some style properties in our components
&lt;/h2&gt;

&lt;p&gt;We're almost done! Let's update the &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; properties in a few of our components &lt;/p&gt;

&lt;p&gt;First, Let's change the &lt;code&gt;Page&lt;/code&gt; components background style to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"#eee"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#333"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Secondly, let's change the &lt;code&gt;H1&lt;/code&gt; components color style to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;!props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"papayawhip"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#000"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, let's change the  &lt;code&gt;P&lt;/code&gt; components color styles to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;!props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"#eee"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#333"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are conditionally styling our background or color properties based on the prop that we pass into our components. If the component contains the &lt;code&gt;light&lt;/code&gt; prop, render this color, else render this color.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#9-pass-in-our-default-theme-to-our-components-with-the-raw-light-endraw-prop"&gt;
  &lt;/a&gt;
  9. Pass in our default Theme to our components with the &lt;code&gt;light&lt;/code&gt; prop
&lt;/h2&gt;

&lt;p&gt;All we have to do now is update our components in the layout with the default &lt;code&gt;light&lt;/code&gt; prop. Like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dynamic&lt;/span&gt; &lt;span class="nx"&gt;Styling&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Styled&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipisicing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Dicta&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;natus&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;vitae&lt;/span&gt; &lt;span class="nx"&gt;sint&lt;/span&gt; &lt;span class="nx"&gt;qui&lt;/span&gt; &lt;span class="nx"&gt;sapiente&lt;/span&gt; &lt;span class="nx"&gt;impedit&lt;/span&gt; &lt;span class="nx"&gt;rerum&lt;/span&gt; &lt;span class="nx"&gt;commodi&lt;/span&gt; &lt;span class="nx"&gt;fugit&lt;/span&gt; &lt;span class="nx"&gt;ullam&lt;/span&gt; &lt;span class="nx"&gt;repudiandae&lt;/span&gt; &lt;span class="nx"&gt;itaque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saepe&lt;/span&gt; &lt;span class="nx"&gt;fuga&lt;/span&gt; &lt;span class="nx"&gt;facere&lt;/span&gt; &lt;span class="nx"&gt;temporibus&lt;/span&gt; &lt;span class="nx"&gt;excepturi&lt;/span&gt; &lt;span class="nx"&gt;dolore&lt;/span&gt; &lt;span class="nx"&gt;officia&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeImage&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Heading&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Page&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here I am also conditionally rendering the &lt;code&gt;light&lt;/code&gt; prop to either be true, or false, depending on on our state. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion! üëè
&lt;/h2&gt;

&lt;p&gt;Congrats! That's a wrap on &lt;strong&gt;No Fuss Dark-Mode Toggle with React &amp;amp; Styled-Components!&lt;/strong&gt; Hopefully, if everything went right, you were able to implement a badass dark mode into your project, in 9 simple steps! &lt;/p&gt;

&lt;p&gt;Please don't hesitate to hit me up on &lt;a href="https://twitter.com/hyggedev"&gt;Twitter&lt;/a&gt; in regards to any questions, concerns or if you just wanna say hello! &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#are-you-a-beginner-web-developer"&gt;
  &lt;/a&gt;
  Are you a beginner web developer!?
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to stay focused üîç as a self taught Frontend Web Developer üíª&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Jul 29 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-build-a-responsive-react-navigation-menu-with-styled-components-3682" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build a Responsive üì± React Navigation Menu with Styled-Components üíª&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Aug 3 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/easiest-way-to-add-icons-to-your-react-apps-5cgd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Easiest Way To Add Icons To Your React Apps üòé&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  „Éª Aug 10 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating View Components in ASP.NET Core 3.1</title>
      <author>EzzyLearning.net</author>
      <pubDate>Wed, 18 Aug 2021 05:25:16 +0000</pubDate>
      <link>https://dev.to/ezzylearning/creating-view-components-in-asp-net-core-3-1-1161</link>
      <guid>https://dev.to/ezzylearning/creating-view-components-in-asp-net-core-3-1-1161</guid>
      <description>&lt;p&gt;ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern web, cloud and internet based applications. We can also develop Web APIs, mobile apps and client site single page applications using our favorite development tools on Windows, macOS and Linux. Microsoft introduced many new features in ASP.NET Core 1.0 to 3.1 releases such as Razor Pages, Blazor etc. In this article I will teach you about one of the newly introduced feature of ASP.NET Core called View Components. I will explain the difference between View Components and Partial Views. I will also explain how can we implement reusable view components which can also be parameterized to customized to generate different response in different parts of the web application. We will be creating a weather widget view component which will display the current weather information of the city we will pass as a parameter to the view component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-view-components"&gt;
  &lt;/a&gt;
  What are View Components
&lt;/h2&gt;

&lt;p&gt;View Component are powerful, self-contained, reusable UI components which can consistently generate reusable HTML from a razor view. They can generate both static and dynamic contents which can be customized further using parameters. View Components can also be used to connect backend databases or services to fetch data. Here are the important points to remember when implementing View Components&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View Components are suitable for rendering a chunk rather than a whole response. This makes them ideal for rending UI elements, widgets, dynamic menus, shopping cart, login page, sidebars etc.&lt;/li&gt;
&lt;li&gt;View Components don‚Äôt support features like View Data or Data Binding and only depend on the data provided to them at runtime as parameters&lt;/li&gt;
&lt;li&gt;View Components support separation of concern and testability benefits in a sense that they always generate consistent output no matter where they are used.&lt;/li&gt;
&lt;li&gt;View components can be parameterized to customize the output, and they can also have their own business logic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#view-components-vs-partial-views"&gt;
  &lt;/a&gt;
  View Components vs Partial Views
&lt;/h2&gt;

&lt;p&gt;They are designed to do everything that a Partial View was doing in previous versions of ASP.NET and more. When we use partial view, we still have dependency on controller, and we can access View Data and controller contents while in View Component we don‚Äôt even need a controller. View Components have their own separate class which can run some business logic and generate response using razor view. We can think View Components as mini controllers with less overhead than a full MVC Controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-view-component"&gt;
  &lt;/a&gt;
  Creating a View Component
&lt;/h2&gt;

&lt;p&gt;A View Component consists of following two parts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A class typically derived from a &lt;strong&gt;Microsoft.AspNetCore.Mvc.ViewComponent&lt;/strong&gt; object&lt;/li&gt;
&lt;li&gt;A view to render the response generated by the View Component&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many ways you can create your own View Component class. You can derive your class from &lt;strong&gt;ViewComponent&lt;/strong&gt; as mentioned above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Navbar : ViewComponent 
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can decorate your class with a &lt;strong&gt;ViewComponent&lt;/strong&gt; attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ViewComponent]
public class Navbar
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also follow the naming conventions and simply create a class with the suffix &lt;strong&gt;ViewComponent&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class NavbarViewComponent 
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me walk you through a simple ASP.NET Core 3.1 demo application in which we can learn how to create and use our own View Components. For this tutorial, I am going to use &lt;strong&gt;Microsoft Visual Studio 2019&lt;/strong&gt; but you can also create &lt;strong&gt;ASP.NET Core 3.1&lt;/strong&gt; web application using command line tools e.g. &lt;strong&gt;dotnet&lt;/strong&gt; if you want.&lt;/p&gt;

&lt;p&gt;First, let‚Äôs create a new ASP.NET Core Web Application project in Visual Studio 2019. For this tutorial, I have chosen &lt;strong&gt;ViewComponentsDemoApp&lt;/strong&gt; as the project name. Once your project is open in Visual Studio, press &lt;strong&gt;F5&lt;/strong&gt; to make sure your project is building and running without any error. If everything is fine, you should be able to see the following output in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mghJ3ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t39pgcxvyg5yyk8iswk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mghJ3ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t39pgcxvyg5yyk8iswk5.png" alt="asp-net-core-3-1-default-web-application-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we create our custom view component or its associated view file please note that the runtime searches for the view in the following paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/Views/{Controller Name}/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;li&gt;/Views/Shared/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;li&gt;/Pages/Shared/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Off course, just like everything else in ASP.NET Core, we can customize the view search path and guide the runtime to look for the views somewhere else but for simplicity I have decided to use one of the default view path.&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;Components&lt;/strong&gt; folder in &lt;strong&gt;Shared&lt;/strong&gt; folder and inside Components folder create a folder called &lt;strong&gt;WeatherWidget&lt;/strong&gt;. This folder will contain both the class and the view file of our custom view component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3gwO1WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bo9naulmqvacdbbpgb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3gwO1WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bo9naulmqvacdbbpgb8.png" alt="view-component-folder-in-asp-net-core-3-1-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside WeatherWidget folder, create a class named &lt;strong&gt;WeatherWidgetViewComponent&lt;/strong&gt; and a view named &lt;strong&gt;Default.cshtml&lt;/strong&gt;. The reason I created the view with the name Default.cshtml is because in ASP.NET Core default view name for a view component is Default. We can give our view a different name but then we have to specify the new name in order to use it. I will recommend that you name your views Default.cshtml so that runtime can find them automatically at &lt;strong&gt;Views/Shared/Components/{View Component Name}/{View Name}&lt;/strong&gt; path without any special configuration.&lt;/p&gt;

&lt;p&gt;To keep things simple in the start, I implemented a simple view component below that simply passes a single parameter &lt;strong&gt;cityName&lt;/strong&gt; when invoked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class WeatherWidgetViewComponent : ViewComponent
{
    public IViewComponentResult Invoke(string cityName)
    {
        return View("Default", cityName);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep following points in mind when you are implementing view components methods&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can define your logic in synchronous &lt;strong&gt;Invoke&lt;/strong&gt; method that returns &lt;strong&gt;IViewComponentResult&lt;/strong&gt; as shown in above example or you can define your logic in &lt;strong&gt;InvokeAsync&lt;/strong&gt; method that returns &lt;strong&gt;Task&lt;/strong&gt;. We will see the example of this method in action later in this tutorial. &lt;/li&gt;
&lt;li&gt;Most of the time, you will initialize your model in Invoke or &lt;strong&gt;InvokeAsync&lt;/strong&gt; methods and will pass the model to a view by calling ViewComponent &lt;strong&gt;View&lt;/strong&gt; method.&lt;/li&gt;
&lt;li&gt;Inside &lt;strong&gt;Invoke&lt;/strong&gt; or &lt;strong&gt;InvokeAsync&lt;/strong&gt; methods, there is no model binding and you don‚Äôt handle HTTP request. You should use the parameters passed to the method instead of any data available in HTTP context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Inside our Default.cshtml view file I added just two lines. The first line says that the model type passed in is just a string, and the second line renders that string wrapped in an h2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@model string

&amp;lt;h2&amp;gt;@Model&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#invoking-a-view-component"&gt;
  &lt;/a&gt;
  Invoking a View Component
&lt;/h2&gt;

&lt;p&gt;It is now time to invoke our simple view component from a razor view or layout page. To use the view component, we need to call InvokeAsync method of Component class inside a view, and we can also pass parameters as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@await Component.InvokeAsync("WeatherWidget", new { cityName = "London" })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press F5 to run the project and you will see the parameter value displayed on the page as h1 heading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPpM-q1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzojchlu42on26x1ofau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPpM-q1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzojchlu42on26x1ofau.png" alt="simple view component demo in asp-net-core-3-1"&gt;&lt;/a&gt;&lt;br&gt;
If you are using ASP.NET Core 1.1 and higher, you can also invoke a view component as a Tag Helper. The syntax to invoke view components as Tag Helpers is following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;vc:[view-component-name]
  parameter1="parameter1 value"
  parameter2="parameter2 value"&amp;gt;
&amp;lt;/vc:[view-component-name]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so if we want to invoke our WeatherWidget component we can use following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;vc:weather-widget city-name="London"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that to use a view component as a Tag Helper, you need to register the assembly containing the view component using the &lt;strong&gt;@addTagHelper&lt;/strong&gt; directive to the &lt;strong&gt;_ViewImports.cshtml&lt;/strong&gt; file. For the purpose of this tutorial, I added following line in _ViewImports.cshtml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@addTagHelper *, ViewComponentsDemoApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far our view component hasn‚Äôt provided us any special value as it is only rendering h1 element which we could easily render without even using view components. Let‚Äôs add some logic and data into our view component to make it more reusable and useful component.&lt;/p&gt;

&lt;p&gt;For a variation, replace the Invoke method with &lt;strong&gt;InvokeAsync&lt;/strong&gt; method and call a method &lt;strong&gt;GetWeatherInfo&lt;/strong&gt; that returns hard coded weather information for London, New York and Paris based on the &lt;strong&gt;cityName&lt;/strong&gt; parameter passed to it. In real world application, you can call a weather web service here to fetch the real data for your applications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class WeatherWidgetViewComponent: ViewComponent {

  public async Task &amp;lt; IViewComponentResult &amp;gt; InvokeAsync(string cityName) {
    var response = await GetWeatherInfo(cityName);
    return View("Default", response);
  }

  private async Task &amp;lt; WeatherInfo &amp;gt; GetWeatherInfo(string cityName) {

    var obj = new WeatherInfo();
    obj.City = cityName;
    obj.Date = DateTime.Now.ToString("dddd h:mm tt");

    if (cityName == "London") {
      obj.Icon = "cloudy.png";
      obj.Condition = "Cloudy";
      obj.Precipitation = "7%";
      obj.Humidity = "70%";
      obj.Wind = "6 km/h";
    }
    else if (cityName == "New York") {
      obj.Icon = "partly_cloudy.png";
      obj.Condition = "Partly Cloudy";
      obj.Precipitation = "17%";
      obj.Humidity = "80%";
      obj.Wind = "16 km/h";
    }
    else if (cityName == "Paris") {
      obj.Icon = "rain.png";
      obj.Condition = "Rain";
      obj.Precipitation = "67%";
      obj.Humidity = "20%";
      obj.Wind = "9 km/h";
    }

    return obj;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have used following &lt;strong&gt;WeatherInfo&lt;/strong&gt; model class in above example so you can also create this class inside Models folder created at your project root level&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace ViewComponentsDemoApp.Models
{
    public class WeatherInfo
    {
        public string City { get; set; }
        public string Date { get; set; }
        public string Icon { get; set; }
        public string Condition { get; set; }
        public string Precipitation { get; set; }
        public string Humidity { get; set; }
        public string Wind { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;o render more professional UI element instead of a simple h1 element, I added bootstrap card markup inside our &lt;strong&gt;Default.cshtml&lt;/strong&gt; view as follows. Note that the &lt;strong&gt;WeatherInfo&lt;/strong&gt; object is now used as a model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="card"&amp;gt;
    &amp;lt;div class="card-body" style="width:200px;"&amp;gt;
        &amp;lt;h5 class="card-title"&amp;gt;@Model.City&amp;lt;/h5&amp;gt;
        &amp;lt;p class="card-text"&amp;gt;
            &amp;lt;span class="text-muted"&amp;gt;@Model.Date&amp;lt;/span&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;img src="@("/images/" + Model.Icon)" class="card-img-top" style="margin:auto; width: 65px;"&amp;gt;
        &amp;lt;h6 class="text-muted"&amp;gt;@Model.Condition&amp;lt;/h6&amp;gt;
        &amp;lt;br /&amp;gt;
        &amp;lt;div&amp;gt;Precipitation: &amp;lt;span&amp;gt;@Model.Precipitation&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Humidity: &amp;lt;span&amp;gt;@Model.Humidity&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Wind: &amp;lt;span&amp;gt;@Model.Wind&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I invoked &lt;strong&gt;WeatherWidget&lt;/strong&gt; view component three times and passed different city name as a parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="text-center"&amp;gt;
    &amp;lt;h2&amp;gt;World Weather&amp;lt;/h2&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;div class="container"&amp;gt;
            &amp;lt;div class="row"&amp;gt;
                &amp;lt;div class="card-group" style="margin:auto;"&amp;gt;

                    &amp;lt;vc:weather-widget city-name="London"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                    &amp;lt;vc:weather-widget city-name="New York"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                    &amp;lt;vc:weather-widget city-name="Paris"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press F5 to run the example and you will see that our WeatherWidget view component has generated the weather information of all three cities passed as parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_xW1y8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r453yk1v1x1t7c66kyoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_xW1y8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r453yk1v1x1t7c66kyoo.png" alt="Creating View Components in ASP.NET Core 3.1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I talked about one of the cool feature of ASP.NET Core view components and how they can help you in extending your views and provide more reusable functionality for the users. Keep visiting my website to read more articles on other areas of ASP.NET Core and related technologies.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top Chrome Extensions That You Wish You Knew It Earlier</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 18 Aug 2021 05:08:24 +0000</pubDate>
      <link>https://dev.to/suhailkakar/top-chrome-extensions-that-you-wish-you-knew-it-earlier-f95</link>
      <guid>https://dev.to/suhailkakar/top-chrome-extensions-that-you-wish-you-knew-it-earlier-f95</guid>
      <description>&lt;p&gt;Chrome is a fantastic browser ‚Äî it's quick, well-designed, and jam-packed with useful features ‚Äì but that's only the beginning. Chrome's true strength lies in its vast library of add-ons, which provide it with a never-ending supply of new features and capabilities.&lt;/p&gt;

&lt;p&gt;In this article, I am going to introduce you top extensions that you might not know about them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-fake-filler"&gt;
  &lt;/a&gt;
  10. Fake Filler
&lt;/h3&gt;

&lt;p&gt;Fake Filler is a form filler that fills all inputs on a page with scam/dummy data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2zpqdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912422004.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2zpqdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912422004.png" alt="screely-1628912422004.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-colorpick-eyedropper"&gt;
  &lt;/a&gt;
  9. ColorPick Eyedropper
&lt;/h3&gt;

&lt;p&gt;A zoomed eyedropper &amp;amp; color chooser tool that allows you to select color values from web pages and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvwncDX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912469522.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvwncDX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912469522.png" alt="screely-1628912469522.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-site-palette"&gt;
  &lt;/a&gt;
  8. Site Palette
&lt;/h3&gt;

&lt;p&gt;A must-have tool for designers and front-end developers to grab colors for any website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xuIgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912564725.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xuIgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912564725.png" alt="screely-1628912564725.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-whatfont"&gt;
  &lt;/a&gt;
  7. WhatFont
&lt;/h3&gt;

&lt;p&gt;The easiest way to identify fonts on web pages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGtRacs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912633708.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGtRacs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912633708.png" alt="screely-1628912633708.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-responsive-viewer"&gt;
  &lt;/a&gt;
  6. Responsive Viewer
&lt;/h3&gt;

&lt;p&gt;Show multiple screens once, Responsive design tester&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6D-YiHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912739290.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6D-YiHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912739290.png" alt="screely-1628912739290.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-perfectpixel"&gt;
  &lt;/a&gt;
  5. PerfectPixel
&lt;/h3&gt;

&lt;p&gt;Adds a semi-transparent image overlay over the top of the developed HTML to easily perform pixel-perfect comparisons between them, useful for replicating UI designs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_X9NSDH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912813362.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_X9NSDH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912813362.png" alt="screely-1628912813362.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-imageye"&gt;
  &lt;/a&gt;
  4. Imageye
&lt;/h3&gt;

&lt;p&gt;Find and download all images on a web page. With Imageye you can find, browse and download all the images present on a web page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMjRWEvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912878062.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMjRWEvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912878062.png" alt="screely-1628912878062.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-stylebot"&gt;
  &lt;/a&gt;
  3. Stylebot
&lt;/h3&gt;

&lt;p&gt;Change the appearance of the web instantly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iT0gG-sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912920005.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iT0gG-sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912920005.png" alt="screely-1628912920005.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-page-ruler-redux"&gt;
  &lt;/a&gt;
  2. Page Ruler Redux
&lt;/h3&gt;

&lt;p&gt;A Web Developer\Designer ruler to get perfect pixel dimensions and positioning to measure elements on any web page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qh3LAjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912970131.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qh3LAjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912970131.png" alt="screely-1628912970131.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-web-developer"&gt;
  &lt;/a&gt;
  1. Web Developer
&lt;/h3&gt;

&lt;p&gt;Adds a toolbar button with various web developer tools.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVBxd-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628923402532.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVBxd-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628923402532.png" alt="screely-1628923402532.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion ‚åõ
&lt;/h3&gt;

&lt;p&gt;I hope you found this short list helpful. If you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;üëã Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>.NET Core 
In Artificial Intelligence Series-Overview</title>
      <author>Kinfey Lo</author>
      <pubDate>Wed, 18 Aug 2021 04:26:40 +0000</pubDate>
      <link>https://dev.to/kinfey/net-core-in-artificial-intelligence-series-overview-3i5f</link>
      <guid>https://dev.to/kinfey/net-core-in-artificial-intelligence-series-overview-3i5f</guid>
      <description>&lt;p&gt;Hi .NET Developer, this is a series of how to complete artificial intelligence applications under .NET Core, and hope to provide a guide for .NET Developer to enter the field of artificial intelligence.&lt;/p&gt;

&lt;p&gt;.NET Core is already a technology stack solution for full-scene applications, with support for every field. Since Microsoft's efforts in open source, the community capabilities of .NET Core have also been supplemented.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w9MPfjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nxozzkit3d5sxljtkym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w9MPfjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nxozzkit3d5sxljtkym.png"&gt;&lt;/a&gt;&lt;br&gt;
Artificial intelligence is a global hotspot. In artificial intelligence, the Python language is the first world. There are many technical barriers for many .NET programmers to enter this field. Of course, some people will mention why we need to use .NET for machine learning? For a team, there is technical continuity. If you want to invest in a new field, you must ensure the technical cost. If you want to recruit a Python team, it will cost a lot. What can be done with the original technology is the best solution, and it can continue the creativity of the original team. It is also very good for individuals to better apply the experience accumulated in the past in new fields.&lt;/p&gt;

&lt;p&gt;What can .NET Core do in artificial intelligence at this stage? How is the ecology? The following are some related technologies in native .NET Core artificial intelligence scenarios&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owNy0HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qptj9sqpzooldh0t7nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owNy0HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qptj9sqpzooldh0t7nb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-interactive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET Interactive&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In traditional data science, data scientists like to use Jupyter Notebook as the main environmental tool. (Jupyter notebook is a web application that allows users to combine explanatory text, mathematical equations, code, and visual content into one easy-to-share document.) .NET Interactive is an extension of Jupyter Notebook that allows .NET Developers to work in Jupyter Use C#/F# to do data-related work on Notebook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NumSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In Python, we need to use Numpy to do a large amount of data processing, complete matrix operations, and multi-dimensional data conversion. NumSharp is an open source .NET Core version of Numpy provided by a third party. (Github  &lt;a href="https://github.com/SciSharp/NumSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/SciSharp/NumSharp"&gt;https://github.com/SciSharp/NumSharp&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-dataframe"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET DataFrame&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In data science, data analysis is a very important part, and Pandas is an important tool in the Python scenario. For .NET Core, data analysis is done through DataFrame, allowing you to understand and adjust data faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xplot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;XPlot&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Through XPlot, you can generate different charts from the data and find out the characteristics of the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-for-apache-spark"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET for Apache Spark&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;.NET Core natively supports Apache Spark for big data processing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mlnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ML.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ML.NET is Microsoft's machine learning framework, which provides an easy way to train, create, and run models in the .NET ecosystem. This is great news for .NET developers, because it allows you to reuse all the knowledge, skills, code, and libraries you already have as a .NET developer. However, this is not just a framework for .NET developers. In fact, ML.NET has proven itself to be a great end-to-end tool that enables any developer to create complex pipelines and bind to different data sources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tensorflownet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TensorFlow.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TensorFlow.NET (TF.NET) provides .NET Standard bindings for TensorFlow. It aims to implement a complete Tensorflow API in C#, allowing .NET developers to use the cross-platform .NET Standard framework to develop, train, and deploy machine learning models. TensorFlow.NET has built-in Keras high-level interface and is released as an independent package TensorFlow.Keras. (Github  &lt;a href="https://github.com/SciSharp/TensorFlow.NET"&gt;&lt;/a&gt;&lt;a href="https://github.com/SciSharp/TensorFlow.NET"&gt;https://github.com/SciSharp/TensorFlow.NET&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tensorflowsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TensorFlowSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TensorFlowSharp is a TensorFlow model runtime. Compared with TensorFlow.NET, it lacks many functions such as graph calculation and training. (Github  &lt;a href="https://github.com/migueldeicaza/TensorFlowSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/migueldeicaza/TensorFlowSharp"&gt;https://github.com/migueldeicaza/TensorFlowSharp&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#torchsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TorchSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TorchSharp is a .NET library that provides access to libraries that support PyTorch. (Github  &lt;a href="https://github.com/xamarin/TorchSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/xamarin/TorchSharp"&gt;https://github.com/xamarin/TorchSharp&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Through the above-mentioned native libraries, you can complete related technologies through C#/F#. This series will start with the most basic knowledge, including environment construction, basic concepts, machine learning related algorithms, and deep learning, hoping to make .NETer more Good to learn the knowledge of artificial intelligence.&lt;/p&gt;

&lt;p&gt;ps:The book update is also synchronized on Github (&lt;a href="https://github.com/kinfey/DotMLBooks"&gt;&lt;/a&gt;&lt;a href="https://github.com/kinfey/DotMLBooks"&gt;https://github.com/kinfey/DotMLBooks&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Creating a confetti Effect in 5 minutes</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 18 Aug 2021 04:21:16 +0000</pubDate>
      <link>https://dev.to/official_fire/creating-a-confetti-effect-in-5-minutes-16h3</link>
      <guid>https://dev.to/official_fire/creating-a-confetti-effect-in-5-minutes-16h3</guid>
      <description>&lt;p&gt;Hello guys üòä Hope you are safe. So after reading this blog i hope you will be able to create a confetti effect just in 5 minutes&lt;/p&gt;

&lt;p&gt;Confetti Falling Background is very impressive when it's a Birthday wishes website, Inaugration website, or something related to wishes or parties. &lt;/p&gt;

&lt;p&gt;There is also a video tutorial available on my channel &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Confetti Video Tutorial Link -&lt;/em&gt; &lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=quSR_ZrVz6Y&amp;amp;t=44s"&gt;https://www.youtube.com/watch?v=quSR_ZrVz6Y&amp;amp;t=44s&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first step we need to do is download 1 file ( we are using javascript library )&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#link-to-download-httpsgithubcomcoderz90confettiblobmainconfettijs"&gt;
  &lt;/a&gt;
  Link to download - &lt;a href="https://github.com/CoderZ90/confetti/blob/main/confetti.js"&gt;https://github.com/CoderZ90/confetti/blob/main/confetti.js&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;You can follow my tutorial to make it or keep reading the blog to make it :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-01"&gt;
  &lt;/a&gt;
  Step 01
&lt;/h1&gt;

&lt;p&gt;Create a index.html file and put the following code here in this we are link our &lt;strong&gt;confetti.js&lt;/strong&gt; file and also linking our css file which is &lt;strong&gt;style.css&lt;/strong&gt; - one more cool thing is you can modify the &lt;strong&gt;confetti.js&lt;/strong&gt; file according to your needs if you want to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- link css file to style --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Confetti Js Effect üéá&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Here link the script file which you downloaded from the above link --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"confetti.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Our javascript code comes here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-02"&gt;
  &lt;/a&gt;
  Step 02
&lt;/h1&gt;

&lt;p&gt;After you have done this you can go to css file and style it whatever you want to in this we are just changing the background color and the text color just for learning purpose we are keeping it simple as possible üî•&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Putting font poppins it is a very beautiful font also if you dont have installed it on your system it might not show so you need to import it from *google fonts* */&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Now here we are just styling the background and centering it to the middle */&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-03"&gt;
  &lt;/a&gt;
  Step 03
&lt;/h1&gt;

&lt;p&gt;Now the javascript time we all were waiting for. so in html create a script tag and put this code inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

        &lt;span class="c1"&gt;// for starting the confetti &lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1000 is time that after 1 second start the confetti ( 1000 = 1 sec)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="c1"&gt;//  for stopping the confetti &lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5000 is time that after 5 second stop the confetti ( 5000 = 5 sec)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// after this here we are calling both the function so it works&lt;/span&gt;
        &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// if you dont want to make it stop and make it infinite you can just remove the stop function üòä&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So finally we are done Thankyou for giving your time and reading this blog. i hope after reading this blog you will be able to create it in minutes üòäüíñ&lt;/p&gt;

&lt;p&gt;Thankyou again and also subscribe to my channel for more videos / blog like this ‚úåüôè&lt;/p&gt;

&lt;p&gt;Subscribe - &lt;a href="https://youtube.com/c/CodingFire?sub_confirmation=1"&gt;https://youtube.com/c/CodingFire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More tutorials - &lt;/p&gt;

&lt;p&gt;Background Remover Like Remove.bg - &lt;a href="https://www.youtube.com/watch?v=f_rpLBzunbQ&amp;amp;t=70s"&gt;https://www.youtube.com/watch?v=f_rpLBzunbQ&amp;amp;t=70s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brightness slider - &lt;a href="https://www.youtube.com/watch?v=bSQ-QD1Iqi0"&gt;https://www.youtube.com/watch?v=bSQ-QD1Iqi0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Theme changer - &lt;a href="https://www.youtube.com/watch?v=ZXTsYjxv7-g&amp;amp;t=3s"&gt;https://www.youtube.com/watch?v=ZXTsYjxv7-g&amp;amp;t=3s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desktop app using javascript - &lt;a href="https://www.youtube.com/watch?v=v0n0OMkUQac"&gt;https://www.youtube.com/watch?v=v0n0OMkUQac&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Print Git Status in Your Tmux Statusbar</title>
      <author>Peter Benjamin (he/they)</author>
      <pubDate>Wed, 18 Aug 2021 04:14:15 +0000</pubDate>
      <link>https://dev.to/pbnj/print-git-status-in-your-tmux-statusbar-232h</link>
      <guid>https://dev.to/pbnj/print-git-status-in-your-tmux-statusbar-232h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem"&gt;Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#solution"&gt;Solution&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#function"&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-alias"&gt;Git Alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tmux"&gt;Tmux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;I recently wanted to show git branch and status information of the project I am wokring on in tmux statusbar. &lt;/p&gt;

&lt;p&gt;Naturally, I know I can invoke any shell command from my &lt;code&gt;.tmux.conf&lt;/code&gt; using the &lt;code&gt;#(&amp;lt;shell command&amp;gt;)&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;set -g status-right '#(echo "hello world")'&lt;/code&gt; will print &lt;code&gt;hello world&lt;/code&gt; in the right corner of your tmux statusbar, which is located at &lt;code&gt;bottom&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;But, doing something like &lt;code&gt;set -g status-right '#(git branch)'&lt;/code&gt; didn't work. This is because the command is running in a different shell context. It's like running &lt;code&gt;sh -c "git branch"&lt;/code&gt;. The current context, like directory, is simply not passed to the shell command.&lt;/p&gt;

&lt;p&gt;Furthermore, there is no simple git command to print information/symbols to indicate staged files, stashes, &amp;amp; untracked files.&lt;/p&gt;

&lt;p&gt;I needed a different approach without requiring installing additional open source projects/utilities to achieve this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Similar to how you can print any information in a &lt;a href="https://github.com/pbnj/dotfiles/blob/5dbc2c665db081a4ffe07dea63902e7cc62f9fd3/bash/.bash_prompt"&gt;&lt;code&gt;.bash_prompt&lt;/code&gt;&lt;/a&gt; via custom bash functions, so too can we implement a function that is invoked as a git sub-command via &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases"&gt;aliases&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function"&gt;
  &lt;/a&gt;
  Function
&lt;/h3&gt;

&lt;p&gt;The function we will use for this is borrowed from &lt;a href="https://github.com/jessfraz/dotfiles/blob/master/.bash_prompt"&gt;jessfraz/dotfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we simply join all the lines and escape the double-quotes, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prompt_git() { local s=''; local branchName=''; if [ \"$(git rev-parse --is-inside-work-tree &amp;amp;&amp;gt;/dev/null; echo \"${?}\")\" == '0' ]; then if [ \"$(git rev-parse --is-inside-git-dir 2&amp;gt; /dev/null)\" == 'false' ]; then if [[ -O \"$(git rev-parse --show-toplevel)/.git/index\" ]]; then git update-index --really-refresh -q &amp;amp;&amp;gt; /dev/null; fi; if ! git diff --quiet --ignore-submodules --cached; then s+='+'; fi; if ! git diff-files --quiet --ignore-submodules --; then s+='!'; fi; if [ -n \"$(git ls-files --others --exclude-standard)\" ]; then s+='?'; fi; if git rev-parse --verify refs/stash &amp;amp;&amp;gt; /dev/null; then s+='$'; fi; fi; branchName=\"$(git symbolic-ref --quiet --short HEAD 2&amp;gt; /dev/null || git rev-parse --short HEAD 2&amp;gt; /dev/null || echo '(unknown)')\"; echo \"(${1}${branchName} ${s})\"; else return; fi; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-alias"&gt;
  &lt;/a&gt;
  Git Alias
&lt;/h3&gt;

&lt;p&gt;Now, you can put this one-liner into a git alias in your &lt;code&gt;.gitconfig&lt;/code&gt; or &lt;code&gt;~/.config/git/config&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[alias]
    prompt = !"prompt_git() { ... }; prompt_git"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we invoke/execute the function after defining it.&lt;/p&gt;

&lt;p&gt;To test this, simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git prompt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should return the branch name and indicators based on your status, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(branch +!$?)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tmux"&gt;
  &lt;/a&gt;
  Tmux
&lt;/h3&gt;

&lt;p&gt;Now, we can easily call a git command to show this information, but we also need to pass a &lt;code&gt;-C&lt;/code&gt; flag with a path to the repo in question. Fortunately, tmux gives us the path of the current pane in a special variable called &lt;code&gt;#{pane_current_path}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, our status bar configuration in tmux may look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; status-right &lt;span class="s1"&gt;'#(git -C #{pane_current_path} prompt)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip
&lt;/h4&gt;

&lt;p&gt;Did you know tmux has 2 different "status bars"? &lt;/p&gt;

&lt;p&gt;I like to put any global information, or information that does not change between panes, in my &lt;code&gt;status-right&lt;/code&gt;. This includes date, time, cpu, and memory.&lt;/p&gt;

&lt;p&gt;Any pane-specific information, I prefer to put it in my &lt;code&gt;pane-border-format&lt;/code&gt;. This includes current working directory and git status information.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g status-right-length 200
# show [prefix] when activated/pressed + mem/cpu load + date/timestamp
set -g status-right "#{?client_prefix,#[reverse][prefix]#[noreverse],}  #(tmux-mem-cpu-load --interval 1) [%A %Y-%m-%d %l:%M %p]"

set -g pane-border-status top
set -g pane-border-format ' #{pane_current_path} #(git -C #{pane_current_path} prompt) '
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are a minimalist like me, I hope this helps you configure and customize your tmux to best suit your needs, workflow, and productivity.&lt;/p&gt;

&lt;p&gt;If you were hoping to discover tools or utilities to conveniently configure tmux, then I would like to leave you with some honorable mentions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/arl/gitmux"&gt;&lt;code&gt;gitmux&lt;/code&gt;&lt;/a&gt;: a binary that you can simply download, configure, and execute in your &lt;code&gt;.tmux.conf&lt;/code&gt;. No runtime dependencies needed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/powerline/powerline"&gt;&lt;code&gt;powerline&lt;/code&gt;&lt;/a&gt;: a fully-featured statusline utility for vim, tmux, and more. Requires python.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shuber/tmux-git"&gt;&lt;code&gt;tmux-git&lt;/code&gt;&lt;/a&gt;: a tmux plugin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more inspiration, feel free to browse my &lt;a href="https://github.com/pbnj/dotfiles"&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Happing hacking!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>git</category>
      <category>tmux</category>
      <category>minimal</category>
    </item>
    <item>
      <title>RSpec, use_transaction_fixtures and after_commit</title>
      <author>John Carneiro</author>
      <pubDate>Wed, 18 Aug 2021 03:43:38 +0000</pubDate>
      <link>https://dev.to/johnwmcarneiro/rspec-usetransactionfixtures-and-aftercommit-1nj5</link>
      <guid>https://dev.to/johnwmcarneiro/rspec-usetransactionfixtures-and-aftercommit-1nj5</guid>
      <description>&lt;p&gt;Hello everyone, this is my first post in English, so sorry for my probable mistakes, I want to use this post to share some knowledge and practice my writing. Thank you for reading my post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstly-some-information-about-our-project"&gt;
  &lt;/a&gt;
  Firstly, some information about our project
&lt;/h3&gt;

&lt;p&gt;In our project we use RSpec (also FactoryBot) with use_transaction_fixtures activated &lt;a href="https://relishapp.com/rspec/rspec-rails/v/5-0/docs/transactions"&gt;&lt;em&gt;(see more details)&lt;/em&gt;&lt;/a&gt;. This means that every example runs within a transaction, and then it removes that data by simply rolling back the transaction at the end of the example.&lt;/p&gt;

&lt;p&gt;When we need to test &lt;code&gt;after_commit&lt;/code&gt; callback we execute the method &lt;code&gt;object.run_callbacks(:commit)&lt;/code&gt; after the operation (create, update or destroy).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-want-to-do"&gt;
  &lt;/a&gt;
  What did I want to do?
&lt;/h3&gt;

&lt;p&gt;I was writing a test for my model and there were three callbacks of type after_commit, one for each transaction type (create, update and destroy). I wanted to ensure that the system would generate the information correctly.&lt;/p&gt;

&lt;p&gt;Now, imagine you create one record, then you update the same record and after you delete the record.&lt;/p&gt;

&lt;p&gt;Below is an example of the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'notify service at every change'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_zero&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'create'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'destroy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I expected the app to create three jobs in sequence, one for each transaction type, but that's not what happened. &lt;/p&gt;

&lt;p&gt;In this case of the update it genetared a job of type "create" and when I deleted the record, it generated a job correctly, so the problem was in the update, but I didn't understand why.&lt;/p&gt;

&lt;p&gt;I searched on google some information that might help and found a question on StackOverflow about the same problem I had.&lt;/p&gt;

&lt;p&gt;After create the record (&lt;code&gt;person = create(:person)&lt;/code&gt;), a instance of &lt;code&gt;@_start_transaction_state&lt;/code&gt; is initialized, but never cleared. &lt;a href="https://stackoverflow.com/questions/33940268/after-commit-callback-on-update-doesnt-trigger"&gt;See more details&lt;/a&gt;&lt;br&gt;
This variable is used to control which is the action in transaction.&lt;/p&gt;

&lt;p&gt;So, I just had to clear the variable, for that you can use the &lt;code&gt;clear_transaction_record_state&lt;/code&gt; method before executing &lt;code&gt;after_commit&lt;/code&gt;, but this is a protected method, so you should use the &lt;code&gt;send&lt;/code&gt; method, like that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;object.send(:clear_transaction_record_state)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Below you can see the final result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'notify service at every change'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_zero&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'create'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:clear_transaction_record_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:clear_transaction_record_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;
  &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚Äã&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_jobs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NotifyWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'args'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'destroy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again thank you for reading my post and I see you later.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://relishapp.com/rspec/rspec-rails/v/5-0/docs/transactions"&gt;https://relishapp.com/rspec/rspec-rails/v/5-0/docs/transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apidock.com/rails/ActiveRecord/Transactions/clear_transaction_record_state"&gt;https://apidock.com/rails/ActiveRecord/Transactions/clear_transaction_record_state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/33940268/after-commit-callback-on-update-doesnt-trigger"&gt;https://stackoverflow.com/questions/33940268/after-commit-callback-on-update-doesnt-trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apidock.com/rails/v4.0.2/ActiveRecord/Transactions/clear_transaction_record_state"&gt;https://apidock.com/rails/v4.0.2/ActiveRecord/Transactions/clear_transaction_record_state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/transactions.rb#L384"&gt;https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/transactions.rb#L384&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/rails/blob/main/activerecord/lib/active_record/transactions.rb"&gt;https://github.com/rails/rails/blob/main/activerecord/lib/active_record/transactions.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>rspec</category>
      <category>testing</category>
    </item>
    <item>
      <title>WebSockets: A Conceptual Overview</title>
      <author>Vikram Sahu </author>
      <pubDate>Wed, 18 Aug 2021 03:24:30 +0000</pubDate>
      <link>https://dev.to/snipperbytes/websockets-a-conceptual-overview-41m</link>
      <guid>https://dev.to/snipperbytes/websockets-a-conceptual-overview-41m</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This article is for technical folks ranging from beginner to intermediate level. so if you are already aware of a particular topic, please feel free to check the &lt;a href="#toC"&gt;Table of Content&lt;/a&gt;&lt;/em&gt; ‚è©&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9C%94-introduction"&gt;
  &lt;/a&gt;
  ‚úî Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Real-time communication has taken a great pace in shaping the world of the internet. In the post COVID era, every type of communication has changed, right from sending emails and waiting for your client's response to interacting with them on Slack communities.&lt;/p&gt;

&lt;p&gt;This instant messaging, video/audio calls, and other similar technologies have gradually helped us to improve with time management and reduced the overall response time.&lt;/p&gt;

&lt;p&gt;These innovations have become possible just because of &lt;strong&gt;WebSockets&lt;/strong&gt; üîå.&lt;/p&gt;

&lt;p&gt;In this article, we will go through some amazing concepts of WebSockets and how APIs are implemented for fluent real-time communication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9C%94-table-of-content"&gt;
  &lt;/a&gt;
  ‚úî Table of Content &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#websockets"&gt;What is a WebSocket?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whywebsocket"&gt;Why WebSocket?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lifecycle"&gt;Lifecycle of a WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#websocketprotocoloverview"&gt;WebSockets Protocol Overview.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#websocketapi"&gt;WebSocket APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages"&gt;Advantages of WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ref"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9C%94-what-is-a-websocket"&gt;
  &lt;/a&gt;
  ‚úî What is a WebSocket? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;WebSocket is a &lt;a href="https://en.wikipedia.org/wiki/Transport_layer"&gt;transport layer&lt;/a&gt; protocol that provides a persistent connection between client and server. This WebSocket operates over a TCP/IP socket connection and provides a full-duplex and bidirectional functionality for the communication.&lt;/p&gt;

&lt;p&gt;E.g., Let's assume we want to create a wired connection where two-person want to communicate with each other (ie. A wants to talk with B). Now, to start the conversation it becomes mandatory for one end(A) to have a dial-in number (acts as handshake) for connecting to the other end(B).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNuJbM8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ow0Pc4J.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNuJbM8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ow0Pc4J.jpg" alt="communication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, once (assuming) &lt;strong&gt;A&lt;/strong&gt; has successfully dialed to &lt;strong&gt;B&lt;/strong&gt;, then a persistent connection will be established between A and B just like a tunnel where the information can flow from both ends.&lt;/p&gt;

&lt;p&gt;Messaging applications work the same as the wired connection we discussed above where a connection is created and the sequence of messages is exchanged with great speed.&lt;/p&gt;

&lt;p&gt;But wait... ‚è≥&lt;/p&gt;

&lt;p&gt;Can't these messages be sent using REST APIs? Why do developers prefer switching to WebSockets? Is there some issue with REST APIs?&lt;/p&gt;

&lt;p&gt;Well, no worries! Let's dig up more and understand why WebSocket was introduced when there were REST APIs?&lt;/p&gt;

&lt;p&gt;‚¨Ü&lt;a href="#toC"&gt;Back to Top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9C%94-why-websocket"&gt;
  &lt;/a&gt;
  ‚úî Why WebSocket? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The API is an HTTP-based technology that allows two applications to communicate with each other. This HTTP-based technology strictly operates over unidirectional protocol. Here, the server makes sure that every response data sent has to be requested from the client.&lt;/p&gt;

&lt;p&gt;Now, let's get back to our messaging application where two people chat using APIs. Since HTTP APIs are unidirectional the client and server have to act both respectively and make continuous to and fro connections to get response data (relay messages from A to B and vice versa). These connections are tedious to handle.  &lt;/p&gt;

&lt;p&gt;To avoid this messy connection, there comes a concept of long polling. This long polling acts as a workaround for the above scenario where a client can send an HTTP request with a long timeout period and the server can keep pushing data back to the client.&lt;/p&gt;

&lt;p&gt;Since this is just a workaround, you can expect some drawbacks as well, i.e. long polling works perfectly when the client and server are having continuous data transfer, but the problem arises when there is no data available to send back to the client. The server unnecessarily holds the resources throughout the length of the poll (timeout).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To overcome the above limitation of HTTP-based Technology, *WebSockets was born&lt;/strong&gt;*.&lt;/p&gt;

&lt;p&gt;The resources are unnecessarily tied up to the server throughout the length of the poll in HTTP., On the other hand, WebSocket allows communicating over the network freely. This communication is quite similar to &lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol"&gt;UDP&lt;/a&gt; but with the security of &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚¨Ü&lt;a href="#toC"&gt;Back to Top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9C%94-lifecycle-of-a-websocket"&gt;
  &lt;/a&gt;
  ‚úî Lifecycle of a WebSocket  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;WebSocket follows &lt;a href="https://datatracker.ietf.org/doc/html/rfc6455"&gt;RFC 6455 - protocol&lt;/a&gt; where it asks for an opening handshake followed by a basic message framing, layered over TCP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rs3NZHCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fPu6V75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rs3NZHCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fPu6V75.png" alt="webSocket cycle"&gt;&lt;/a&gt;&lt;br&gt;
                Image credits: &lt;a href="https://www.raywenderlich.com/13209594-an-introduction-to-websockets"&gt;raywenderlich&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebSockets begin their life cycle by initiating a standard HTTP request and response as shown in the image above. Within this request, the client asks servers to open a web connection. If the server agrees, then an initial handshake is established successfully.&lt;/p&gt;

&lt;p&gt;This handshake is a piece of evidence that the client and server have agreed to share the TCP/IP socket for communication as a WebSocket connection. Now the information can flow using basic message framing protocol. To close the socket both ends should acknowledge for turning down the TCP connection.&lt;/p&gt;

&lt;p&gt;I hope by this time you might have understood why WebSockets are used instead of REST APIs.&lt;/p&gt;

&lt;p&gt;‚¨Ü&lt;a href="#toC"&gt;Back to Top&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%E2%9C%94-websockets-protocol-overview"&gt;
  &lt;/a&gt;
  ‚úî WebSockets Protocol Overview &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;WebSockets URIs are the same as HTTP URIs but the only difference you can find is the scheme. WebSockets don't use an HTTP/HTTPS scheme; instead it uses ws/wss (web socket secure) to connect with the hosts/endpoints. E.g.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP URIs&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;http://domain-name[:port]/resource-path/resource-id
&lt;span class="o"&gt;{&lt;/span&gt;secured&lt;span class="o"&gt;}&lt;/span&gt; https://domain-name[:port]/resource-path/resource-id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;WebSocket URIs&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ws://domain-name[:port]/resource-path/resource-id
&lt;span class="o"&gt;{&lt;/span&gt;secured&lt;span class="o"&gt;}&lt;/span&gt; wss://domain-name[:port]/resource-path/resource-id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To establish a secure WebSocket connection, the HTTP request/response calls need to be upgraded. So, the clients/server both need to support the WebSocket connection and pass a few request headers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET ws://localhost2.com:3000/ HTTP/1.1
Host: localhost:8000
Connection: Upgrade
Pragma: no-cache
Upgrade: websocket
Sec-WebSocket-Version: 13
Sec-WebSocket-Key: &lt;span class="nv"&gt;q3xPeO32u5496gldTuKaSAh&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us understand each header that is required to establish a WebSocket connection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET ws://localhost2.com:3000/ HTTP/1.1&lt;/code&gt;: This is an actual GET call that connects a WebSocket insecurely &lt;code&gt;{ws}&lt;/code&gt; having endpoint as &lt;code&gt;localhost2.com:3000&lt;/code&gt; using the first version of the HTTP protocol.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Host: localhost:8000&lt;/code&gt;: This is a Host from where the request is initiated. Currently, it is a local machine &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Connection: Upgrade&lt;/code&gt;: Connection header manages the opening and closing of network connection after the HTTP call. It is normally set to &lt;code&gt;keep-alive&lt;/code&gt; which helps to keep the connection persistent while HTTP calls. Using &lt;code&gt;Upgrade&lt;/code&gt; makes sure to keep the connection active and notifies that communication will open for non-HTTP requests only.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Pragma: no-cache&lt;/code&gt;: It is a means for the browser to tell the server and any intermediate caches that it wants a fresh version of the resource, not for the server to tell the browser not to cache the resource&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Upgrade: websocket&lt;/code&gt;: The header is used by the client to ask the server to follow one of the protocols for connection. In this case, the client is asking for a WebSocket connection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Sec-WebSocket-Version: 13&lt;/code&gt;: The WebSocket protocol only accepts the usage of version 13, any other version will be considered invalid here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Sec-WebSocket-Key: q3xPeO32u5496gldTuKaSAh==&lt;/code&gt;: This is one time randomly generated unique key which is 16-byte and base64 encoded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the client has securely established a WebSocket connection, it waits for the server's response which has &lt;code&gt;HTTP 101 Switching Protocols&lt;/code&gt;. The server's response headers are shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: &lt;span class="nv"&gt;aGVsbG8gZXZlcnlvbmUg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTTP 101 Switching Protocols response indicates that the server is switching to the protocol that the client requested in its Upgrade request header. In addition, the server must include HTTP headers that validate the connection was successfully upgraded.&lt;/p&gt;

&lt;p&gt;‚¨Ü&lt;a href="#toC"&gt;Back to Top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websocket-apis"&gt;
  &lt;/a&gt;
  WebSocket APIs &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;WebSocket API allows creating a bidirectional, full-duplex persistent connection that helps two applications to interact with each other fluently.&lt;/p&gt;

&lt;p&gt;This can be visualized as a tunnel where data can be sent and received constantly without waiting for each other's response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-websockets"&gt;
  &lt;/a&gt;
  Advantages of WebSockets &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bidirectional&lt;/strong&gt;: In HTTP, the client needs to wait for the server's response after every request, whereas on the other side WebSockets allows the client/server to send and receive real-time updates asynchronously. E.g. stocks dashboard where data is continuously pushed and the graph is plotted against the same.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Low-Latency&lt;/strong&gt;: WebSockets doesn't create a new connection for every request therefore the network latency is automatically reduced. After the initial handshake, which includes standard HTTP header information, all subsequent messages include only relevant information. This reduction in latency enables lightning-fast communication&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: The WebSocket API supports over&lt;br&gt;
40 subprotocols such as WAMP, XMPP, AMQP, and MQTT, as well as extensions that enable powerful functionality like&lt;br&gt;
multiplexing and data compression.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt;: The WebSocket Secure (WSS) protocol uses standard SSL and TLS encryption to establish a secure connection&lt;br&gt;
between the client and server. While unsecured WebSockets use TLS port number 80, WSS uses port 443.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚¨Ü&lt;a href="#toC"&gt;Back to Top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this article, we began with the introduction of WebSockets and learned how WebSockets are used behind the scenes while building Real-time applications to make our life faster and simpler. &lt;/p&gt;

&lt;p&gt;Next, we went through some technical concepts of the WebSocket protocol. Also, we compare how WebSockets are different from HTTP-based technology with some real-life examples.&lt;/p&gt;

&lt;p&gt;As we end this article, you should have a clear understanding of WebSockets and how they can be used in your future applications.&lt;/p&gt;

&lt;p&gt;Please leave your feedback and doubts in the comments below! üòÉ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://datatracker.ietf.org/doc/html/rfc6455"&gt;https://datatracker.ietf.org/doc/html/rfc6455&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Websockets_API#interfaces"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Websockets_API#interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b"&gt;https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raywenderlich.com/13209594-an-introduction-to-websockets"&gt;https://www.raywenderlich.com/13209594-an-introduction-to-websockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ably.com/topic/websockets"&gt;https://ably.com/topic/websockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>api</category>
      <category>websockets</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>TypeScript Pros, Cons, Faqs, and Myths</title>
      <author>‚Ç≥GEEK</author>
      <pubDate>Wed, 18 Aug 2021 02:30:58 +0000</pubDate>
      <link>https://dev.to/ageekdev/typescript-pros-cons-faqs-and-myths-21e1</link>
      <guid>https://dev.to/ageekdev/typescript-pros-cons-faqs-and-myths-21e1</guid>
      <description>&lt;p&gt;&lt;a href="https://ageek.dev/ts-overview"&gt;TypeScript&lt;/a&gt; is intentionally and strictly a typed superset of JavaScript with optional type annotations that will be erased at compile time to preserve the runtime behavior of JavaScript. Currently ranked 4th on GitHub according to &lt;a href="https://octoverse.github.com/"&gt;The 2020 State of the Octoverse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRCDXiGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6ionu31vtiy5wpunatg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRCDXiGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6ionu31vtiy5wpunatg.png" alt="octoverse ranking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The debate whether to use TypeScript is over, as library maintainers you should (or even must) support typings, as app developers you can get away in personal projects but often required in enterprises.&lt;/p&gt;

&lt;p&gt;TypeScript has been around since 2012 and you're still reluctant to use it in 2021. Is TypeScript really necessary? Is TypeScript better than JavaScript? If that's the case then this post will help you make an informed decision &lt;a href="https://ageek.dev/before-migrating-to-typescript"&gt;before migrating to TypeScript&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;TypeScript inherits major pros of JavaScript, but also offers additional benefits coming from static typing and other concepts specific to TypeScript. They prove especially useful when it comes to large sized codebase and distributed teams working on the same project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Static type checking&lt;/strong&gt;: The ability to find bugs at compile time using static analyzer, you can fix most static analysis errors by adding type annotations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Self documenting&lt;/strong&gt;: Code is easier to read because you can rely on a value actually having the specified type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better refactoring&lt;/strong&gt;: When you change one piece of code, the type system can warn you about the other pieces of code that just broke.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rich editor support&lt;/strong&gt;: Major editors like VSCode and Webstorm comes with TypeScript support built in, others through plugins. Expecting features like code completion, code snippets, auto imports, syntax highlighting, bracket matching, folding, and more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Gradual adoption&lt;/strong&gt;: A valid JavaScript program is technically valid TypeScript. You can migrate to TypeScript gradually and adopt the level of strictness that suits you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;Coming from another language with advanced types to TypeScript can be really fast. The only real downside of TypeScript is that you need to spend the time to learn how to use it correctly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Unsound type system&lt;/strong&gt;: A sound type system means you can never get into a state where an expression evaluates to a value that doesn‚Äôt match the expression‚Äôs static type. Once your code is compiled, the resulting plain JavaScript code has no type information.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ageek.dev/ts-with-redux"&gt;&lt;strong&gt;Steep learning curve&lt;/strong&gt;&lt;/a&gt;: Too steep to learn if just considered as a static type checker. But also not good enough to be considered as an indepedent programming language, you can‚Äôt learn TypeScript without learning JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#faqs"&gt;
  &lt;/a&gt;
  Faqs
&lt;/h2&gt;

&lt;p&gt;I was very skeptical about TypeScript, I read tons of blog posts and questions on Quora and Stack Overflow. Here are my answers to TypeScript FAQs with my own perspectives after many years using it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Should I learn TypeScript as my main language?&lt;/strong&gt; No! TypeScript is not a complete independent programming language, more as a JavaScript flavor or static type checker, transpiled to JavaScript, and depends on JavaScript ecosystem. Better learn it after JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypeScript dead?&lt;/strong&gt; No! It's very much alive and growing very fast.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypesScript worth it?&lt;/strong&gt; Yes! Self documentation and code completion are two main reasons TypeScript being used heavily in enterprises.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypeScript really necessary?&lt;/strong&gt; No! It's designed to be an optional tool to JavaScript ecosystem, you use it when you need it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypeScript better than Flow?&lt;/strong&gt; Yes! Flow is fading away.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypeScript better than CoffeeScript?&lt;/strong&gt; Yes! CoffeeScript is fading away.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is TypeScript better than JavaScript?&lt;/strong&gt; Strickly speaking No! TypeScript is not even in the same category to be compared with JavaScript. If you look closely enough at TypeScript, it's just a static type checker.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Is Kotlin going to replace TypeScript?&lt;/strong&gt; No! Even Kotlin code can be transpiled to JavaScript, Kotlin syntax and ecosystem are designed to be more interoperable with Java than JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What will be the future of TypeScript?&lt;/strong&gt; Very bright future ahead!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Will TypeScript kill JavaScript?&lt;/strong&gt; No! But JavaScript can fade away more as a compile target than a day-to-day programming language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Why do people love TypeScript?&lt;/strong&gt; Better developer experience.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Why do people hate TypeScript?&lt;/strong&gt; Not really safe at runtime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Can we use TypeScript with Babel?&lt;/strong&gt; Yes. &lt;a href="https://ageek.dev/ts-with-babel"&gt;The integration with Babel&lt;/a&gt; will enable both type checking and complex JavaScript transformations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#myths"&gt;
  &lt;/a&gt;
  Myths
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript eliminates unit tests&lt;/strong&gt;: It actually reduces the need to create unit tests which check the structure of static data received, these unit tests are tedious and can require significant effort to update when the data structure needs change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript eliminates runtime validation&lt;/strong&gt;: All type annotations are stripped off at compile time, you still need to validate dynamic data to safe guard your program at runtime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript helps us refactor with confidence&lt;/strong&gt;: Better refactoring is overrated, tests are something actually help us refactor with confidence.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dynamo DB - Hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 18 Aug 2021 02:03:10 +0000</pubDate>
      <link>https://dev.to/this-is-learning/dynamo-db-hands-on-437h</link>
      <guid>https://dev.to/this-is-learning/dynamo-db-hands-on-437h</guid>
      <description>&lt;p&gt;To create a new dynamo DB table follow the instructions below:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to the DynamoDB service. Click on create table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NcGxPFca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyhx0ba9id54b7dg95ni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NcGxPFca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyhx0ba9id54b7dg95ni.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add table name and primary key. For example I used &lt;code&gt;TutTable&lt;/code&gt; as name and &lt;code&gt;id&lt;/code&gt; as the primary key. Click on create.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEK_srrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s3qhv0f4frswim7hx4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEK_srrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s3qhv0f4frswim7hx4r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you will see a screen with details of Dynamo DB table&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTvoZ7ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/149c12dr8odm9wh545gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTvoZ7ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/149c12dr8odm9wh545gg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we will add some items to see how DynamoDB works. To do that go into items tab and click create item
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULHKKE3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9qu9oxocevyfuadpfcs.png" alt="Alt Text"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdcX6GSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpphjw3ijes99q6kr63.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Add some fields like name, gender. To add click the plus symbol do append and add the type of data you want to add and click on save. So you added an item to your database
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWQ_F0DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5ll0wb2dn2a9cp7wa6n.png" alt="Alt Text"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Zb-InsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eja9ngztijeetq98a18t.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create another item and this time just add the id. you need not all all fields his is how NoSql database work.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1EIyTo7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyqtjcqt00aea8g6o5ux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EIyTo7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyqtjcqt00aea8g6o5ux.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will see two items with different data&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v1ASI0Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ox1v9eqlvs52sm8os4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v1ASI0Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ox1v9eqlvs52sm8os4x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that delete the table. So, that there are no additional charges.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GuSth-Jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p4knmblnbqswqtenbo3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuSth-Jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p4knmblnbqswqtenbo3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we will study about some more databases available in AWS for various other use cases.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>[24] Top 10 Must-Have Web Dev Tools ‚Äì August 2021</title>
      <author>MV</author>
      <pubDate>Wed, 18 Aug 2021 01:48:30 +0000</pubDate>
      <link>https://dev.to/villivald/24-top-10-must-have-web-dev-tools-august-2021-4fc0</link>
      <guid>https://dev.to/villivald/24-top-10-must-have-web-dev-tools-august-2021-4fc0</guid>
      <description>&lt;p&gt;Hi everyone üëã. Today I would like to present you the brand new August edition of my &lt;a href="https://www.create-react-app.com/tags/top"&gt;blog post series&lt;/a&gt; - Top 10 Best Web Dev Tools. Every month I am trying to pick the most intriguing and handy instruments that, I believe, are must-haves for every web developer. This time there are:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-github-copilot"&gt;
  &lt;/a&gt;
  1). GitHub Copilot
&lt;/h2&gt;

&lt;p&gt;Copilot is an AI tool developed by GitHub to assist users of VS Code. It is still in a Technical Preview state and requires joining the waitlist, but from my experience, I would say that Copilot has all prerequisites to become the Next Big Thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc1Gdjkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/copilot.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc1Gdjkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/copilot.webp" alt="copilot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://copilot.github.com/"&gt;https://copilot.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-glitch"&gt;
  &lt;/a&gt;
  2). Glitch
&lt;/h2&gt;

&lt;p&gt;Glitch is a very easy-to-use and user-friendly tool that allows you to build fast, full-stack web apps in a browser for free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F31BlBqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/glitch.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F31BlBqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/glitch.webp" alt="glitch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://glitch.com/"&gt;https://glitch.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-meta-tags"&gt;
  &lt;/a&gt;
  3). Meta Tags
&lt;/h2&gt;

&lt;p&gt;With Meta Tags, you can generate and edit your website's metatags, as well as preview how your webpage will look on Google, Facebook, Twitter, LinkedIn, and other platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnP9Ep7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/metatags.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnP9Ep7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/metatags.webp" alt="metatags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metatags.io/"&gt;https://metatags.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-omatsuri"&gt;
  &lt;/a&gt;
  4). Omatsuri
&lt;/h2&gt;

&lt;p&gt;Omatsuri is an open-source web app with 12 browser tools for everyday use. At the moment there are such useful tool as &lt;a href="https://omatsuri.app/color-shades-generator"&gt;color shades generator&lt;/a&gt;, &lt;a href="https://omatsuri.app/fake-data-generator"&gt;fake data generator&lt;/a&gt;, &lt;a href="https://omatsuri.app/svg-compressor"&gt;svg compressor&lt;/a&gt; and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOfrHINk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/omatsuri.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOfrHINk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/omatsuri.webp" alt="omatsuri"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://omatsuri.app/"&gt;https://omatsuri.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-happy-hues"&gt;
  &lt;/a&gt;
  5). Happy Hues
&lt;/h2&gt;

&lt;p&gt;Happy Hues is an extremely good-looking collection of curated color palettes. Feel free to choose your &lt;a href="https://www.happyhues.co/palettes/5"&gt;favorite&lt;/a&gt; and use it in your next project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lFDte68I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/happyhues.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lFDte68I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/happyhues.webp" alt="happyhues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.happyhues.co/"&gt;https://www.happyhues.co/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-jamstack-explorers"&gt;
  &lt;/a&gt;
  6). Jamstack Explorers
&lt;/h2&gt;

&lt;p&gt;Jamstack Explorers is a learning platform from Netlify. As it is obvious from the title, this platform is dedicated to Jamstack (which stands for JavaScript, API &amp;amp; Markup) related technologies. At the moment they have 9 courses on topics such as Next.js (by &lt;a href="https://twitter.com/cassidoo"&gt;Cassidy Williams&lt;/a&gt;), Serverless functions (by &lt;a href="https://twitter.com/bencodezen"&gt;Ben Hong&lt;/a&gt;), Nuxt.js &amp;amp; Sanity (by &lt;a href="https://twitter.com/kenny_io"&gt;Ekene Eze&lt;/a&gt;), etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_kxLgoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/jamstack.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_kxLgoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/jamstack.webp" alt="jamstack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://explorers.netlify.com/"&gt;https://explorers.netlify.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-devtool-tips"&gt;
  &lt;/a&gt;
  7). Devtool Tips
&lt;/h2&gt;

&lt;p&gt;An open-source curated collection of devtool tips on different themes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHG4DWCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/devtool.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHG4DWCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/devtool.webp" alt="devtool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devtoolstips.org/"&gt;https://devtoolstips.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-error404"&gt;
  &lt;/a&gt;
  8). Error404
&lt;/h2&gt;

&lt;p&gt;A broad collection of unique and fun illustrations for your website's 404 pages. You can see those illustrations in action since I use them on my &lt;a href="https://villivald.com/SecretPage"&gt;personal site&lt;/a&gt; and my &lt;a href="https://koripallopaikat.com/LebronJames"&gt;latest basketball-related project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atbngBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/error.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atbngBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/error.webp" alt="error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://error404.fun/"&gt;https://error404.fun/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-the-filter-"&gt;
  &lt;/a&gt;
  9). What The Filter ?
&lt;/h2&gt;

&lt;p&gt;A visual playground to JavaScript array &amp;amp; object transformations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qV0FxuHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/filter.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qV0FxuHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.create-react-app.com/static/img/images/24/filter.webp" alt="filter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renato-bohler.github.io/what-the-filter/"&gt;https://renato-bohler.github.io/what-the-filter/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-contraste"&gt;
  &lt;/a&gt;
  10). Contraste
&lt;/h2&gt;

&lt;p&gt;Contraste is a lightweight macOS app that allows you to check the accessibility of text against the Web Content Accessibility Guidelines (WCAG).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuu3i8Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5D8t675.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuu3i8Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5D8t675.png" alt="contraste"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://contrasteapp.com/"&gt;https://contrasteapp.com/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.create-react-app.com/posts/2021-08-17-top-10-web-dev-tools-08-2021/"&gt;Original post @ create-react-app.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Site &lt;a href="https://villivald.com/"&gt;https://villivald.com/&lt;/a&gt;&lt;br&gt;
GitHub &lt;a href="https://github.com/villivald"&gt;https://github.com/villivald&lt;/a&gt;&lt;br&gt;
Twitter &lt;a href="https://twitter.com/crapp_blog"&gt;https://twitter.com/crapp_blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
