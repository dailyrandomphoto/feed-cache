<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vendure- The smart Shopify alternative</title>
      <author>mematthew123</author>
      <pubDate>Tue, 21 Dec 2021 01:02:22 +0000</pubDate>
      <link>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</link>
      <guid>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" alt="Vendure_logo" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-you-need-nothing-you-dont"&gt;
  &lt;/a&gt;
  &lt;em&gt;Everything you need, nothing you don't&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodesource.com/products/nsolid"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWgNG-b---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cldup.com/dTxpPi9lDf.thumb.png" alt="N|Solid" width="162" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/joemccann/dillinger"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-WDP5GZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://travis-ci.org/joemccann/dillinger.svg%3Fbranch%3Dmaster" alt="Build Status" width="90" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2022 online sales are expected to continue to grow 16.1% compared to 2021, which was a record-breaking year in its own right. In-person shopping, however, is expected to remain flat for the foreseeable future. This has led to an influx of online stores opening for the first time as many business owners are seeking to capitalize on the benefits of online selling. &lt;/p&gt;

&lt;p&gt;When building an online store for yourself or a client, there are a plethora of options available due to the growing demand. Many clients and business owners want stores that are easy to maintain, built quickly, and are cost-effective. Checking all the boxes on this list is no small task, and many developers and store owners naturally gravitate towards monolithic options such as Shopify or WordPress due to the speed at which they can be built. The issue that many face when using these options is that customization can be non-existent or expensive (Plugins), and they are prone to creating a less than stellar customer service experience. &lt;/p&gt;

&lt;p&gt;On the other hand, customers have higher expectations than ever for their online and mobile shopping experiences. Universally consumers prefer their online shopping experience to be effortless and personal. &lt;/p&gt;

&lt;p&gt;Headless storefronts can be built on traditionally monolithic platforms however, this often still leaves a person depending on expensive plugins to enable standard back-end features. Other, newer options often come with high monthly charges and/or a percentage of your gross sales. This is a major hurdle for many small businesses that don't have the financial resources to hire a full development team. &lt;/p&gt;

&lt;p&gt;An option that I recently discovered that does a better job than either of the two aforementioned options is &lt;a href="//vendure.io"&gt;Vendure.io &lt;/a&gt;which is a headless e-commerce framework that is easy to set up, cheap to host ($5 mo), and you won't have to worry about feeling overwhelmed by the admin dashboard (cough cough wp). The admin dashboard is beautiful and intuitive, perfect to hand off to a client. Vendure was developed by Michael Bromley and released in 2019 and just released version 1.4. I am just getting started using Vendure but have highlighted a few aspects that have stood out in my eyes. Down below, I will also show a quick and easy way to get started with Vendure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with..
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Nestjs&lt;/li&gt;
&lt;li&gt;Graphql&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#-customizable"&gt;
  &lt;/a&gt;
  - Customizable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;In Vendure, this is accomplished easily with a couple of lines of configuration. This is much more involved in other frameworks and can be a costly plugin depending on the platform.&lt;/li&gt;
&lt;li&gt;Custom the shopping experience by bringing your storefront. vendure has starters available for Next as well as Vue!&lt;/li&gt;
&lt;li&gt;Compatible with multiple payment gateways &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-scalable"&gt;
  &lt;/a&gt;
  - Scalable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Sell an unlimited amount of products&lt;/li&gt;
&lt;li&gt;Marketplace capable &lt;/li&gt;
&lt;li&gt;Multi-Tenant capable &lt;/li&gt;
&lt;li&gt;Amazing support and community &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-costeffective"&gt;
  &lt;/a&gt;
  - Cost-effective
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Open-source &lt;/li&gt;
&lt;li&gt;Deployment on the digital ocean is around 5 a month&lt;/li&gt;
&lt;li&gt;No additional fees for using preferred payment gateway
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-approachable"&gt;
  &lt;/a&gt;
  - Approachable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Easy to set up in an afternoon &lt;/li&gt;
&lt;li&gt;Easy to navigate and preconfigured dashboard&lt;/li&gt;
&lt;li&gt;Advanced image control&lt;/li&gt;
&lt;li&gt;Storefront starters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;Step .5: Prerequisites&lt;br&gt;
    Basic understanding of TypeScript&lt;br&gt;
    Basic understanding of Node.js&lt;br&gt;
    Basic understanding of GraphQL&lt;br&gt;
    Basic understanding of SQL and databases &lt;/p&gt;

&lt;p&gt;Keep in mind that this is a beginner's guide and setup, that does not go into the full capabilities of Vendure.io.&lt;/p&gt;

&lt;p&gt;~#~#~#~#~#~#~#~&lt;br&gt;
If you are new to the world of Node.js, &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. &lt;br&gt;
If you are new to GraphQL, &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;. &lt;br&gt;
If you are new to SQL, &lt;a href="https://www.w3schools.com/sql/"&gt;SQL&lt;/a&gt;.&lt;br&gt;
If you are new to the world of TypeScript, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;.&lt;br&gt;
~#~#~#~#~#~#~#~&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-we-go"&gt;
  &lt;/a&gt;
  Here we go!
&lt;/h3&gt;

&lt;p&gt;Step 1: Open a new terminal window enter the following command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @vendure/create my-app  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 2: Choose a Database- for this tutorial we will be using an SQLite database. &lt;/p&gt;

&lt;p&gt;Step 3: Choose a Language- for this tutorial we will be using TypeScript&lt;/p&gt;

&lt;p&gt;Step 4: Sample Data? Yes, please  &lt;/p&gt;

&lt;p&gt;Step 5: User name and Password? We will use the default settings provided which is superadmin/superadmin. This can be changed later in the dashboard  &lt;/p&gt;

&lt;p&gt;Step 6: Run the command  &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd my-app
    yarn start  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 7: Since the previous step will take a couple of minutes, this is a good time to get up stretch, grab a &lt;del&gt;beer&lt;/del&gt; coffee, and congratulate yourself on setting up your Vendure server&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nice-work-you-should-now-be-able-to-access-the-following"&gt;
  &lt;/a&gt;
  Nice work! You should now be able to access the following
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The Vendure Admin GraphQL API: http://localhost:3000/admin-api
The Vendure Shop GraphQL API: http://localhost:3000/shop-api
The Vendure Admin UI: http://localhost:3000/admin  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#but-what-does-it-mean"&gt;
  &lt;/a&gt;
  But what does it mean...?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Admin GraphQL API: &lt;a href="http://localhost:3000/admin-api"&gt;http://localhost:3000/admin-api&lt;/a&gt; = Store permissions&lt;br&gt;
GraphQL API: &lt;a href="http://localhost:3000/shop-api"&gt;http://localhost:3000/shop-api&lt;/a&gt; = Putting items on the shelves and general store operations &lt;br&gt;
Admin UI: &lt;a href="http://localhost:3000/admin="&gt;http://localhost:3000/admin=&lt;/a&gt; View from the bosses desk&lt;br&gt;
(high five!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-storefront"&gt;
  &lt;/a&gt;
  Creating a storefront
&lt;/h2&gt;

&lt;p&gt;There are two popular integrations available at the moment: Vue and Next&lt;br&gt;
Since I like Next over Vue~ Let's set up the Next js storefront&lt;/p&gt;

&lt;p&gt;Step 1. Verify that the Vendure server is set up for cookies and not bearer tokens &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" alt="Vendure_config" width="610" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Step 2. Fork and then clone this repo &lt;a href="https://github.com/vercel/commerce"&gt;https://github.com/vercel/commerce&lt;/a&gt;&lt;br&gt;
Step 3. NPM install and then create a .env.local file at the root of the project and add the following   &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    COMMERCE_PROVIDER=vendure
NEXT_PUBLIC_VENDURE_SHOP_API_URL=http://localhost:3000/shop-api 
NEXT_PUBLIC_VENDURE_LOCAL_URL=/vendure-shop-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 4.  Let's now double-check our tsconfig.json file and make sure that the correct framework is set up. It should show Vendure as the framework of choice, replacing "local" on lines 26 through 30. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "@components/*": ["components/*"],
    "@commerce": ["framework/commerce"],
    "@commerce/*": ["framework/commerce/*"],
    "@framework": ["framework/vendure"],
    "@framework/*": ["framework/vendure/*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 5.  In your terminal  enter the command "npm run dev" to start your storefront&lt;/p&gt;

&lt;p&gt;You should now see a fully populated store full of demo items. Let's go ahead and verify connectivity by going to our Vendure admin dashboard. Once signed we can add products and collections. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" alt="adding products" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we go back and check out our storefront we should see any new categories we created listed in the navbar, and a quick search should bring up any new products that are not displayed on the landing page. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" alt="Added items" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Next js storefront comes with Tailwind CSS installed. The only thing left to do is add your personal touch! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tada-you-are-finished"&gt;
  &lt;/a&gt;
  TA-DA YOU ARE FINISHED
&lt;/h2&gt;

&lt;p&gt;If you have any questions about setting up Vendure, the Slack channel is full of helpful and knowledgeable people:  &lt;a href="https://vendure-ecommerce.slack.com"&gt;https://vendure-ecommerce.slack.com&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Alhamdulillah! Successfully Completed</title>
      <author>Saif Al Siam</author>
      <pubDate>Mon, 20 Dec 2021 23:17:01 +0000</pubDate>
      <link>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</link>
      <guid>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Solving day 20 of Advent of Code 2021 in JavaScript</title>
      <author>Thibaut Patel</author>
      <pubDate>Mon, 20 Dec 2021 23:04:58 +0000</pubDate>
      <link>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</link>
      <guid>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1GrRShOr82Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>adventofcode</category>
      <category>javascript</category>
      <category>video</category>
    </item>
    <item>
      <title>Requests and Response for Beginners</title>
      <author>Patrick Ogwuru</author>
      <pubDate>Mon, 20 Dec 2021 22:28:03 +0000</pubDate>
      <link>https://dev.to/mod5ied/request-and-response-for-beginners-450h</link>
      <guid>https://dev.to/mod5ied/request-and-response-for-beginners-450h</guid>
      <description>&lt;p&gt;Have you asked the waiter at a restaurant to get you a dessert and they served you exactly what you wanted? Have you also asked for a Chicken-soup but got Chips instead? Well, believe it or not this is very similar to making requests and receiving responses on the web.&lt;br&gt;
From the previous article we understood that we can make requests to a server via a link or a portal commonly called an &lt;strong&gt;endpoint&lt;/strong&gt; or an &lt;strong&gt;API&lt;/strong&gt;; the server processes this request that we have made prepares a response accordingly and passes it back to us via the endpoint, hence we can work with the response as we please.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mT4gr9Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3w24w82m543q0ll1mjc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mT4gr9Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3w24w82m543q0ll1mjc.jpg" alt="request" width="880" height="1320"&gt;&lt;/a&gt; &lt;br&gt;
A request could be of a number of type, we have the &lt;strong&gt;GET&lt;/strong&gt; request: this is one of the most common forms of request programmers and developers alike often use to get a resource from a server. Another type of request is the &lt;strong&gt;POST&lt;/strong&gt; request: this is a type of request that’s most commonly used in connotation to submitting a resource or a data to the server. It instructs the server to accept and store a data from the user/sender. We have other types of requests such as “&lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;, &lt;strong&gt;PATCH&lt;/strong&gt;, &lt;strong&gt;HEAD&lt;/strong&gt;, &lt;strong&gt;CONNECT&lt;/strong&gt;”. Note: all these can be more specifically termed – &lt;em&gt;http requests&lt;/em&gt;.&lt;br&gt;
A response on the other hand is gotten or received for the server in a number of formats, it could either be a blob, a *&lt;em&gt;JSON *&lt;/em&gt;(JavaScript Object Notation) data etc. Now to use this response, developers usually parse the response into other usable format (by default the browser returns a response in a format that is not readily usable), example the JSON format. It is always important to parse a response for the above reason.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrns-2pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1zh846kwcv6rotnic7b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrns-2pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1zh846kwcv6rotnic7b.jpg" alt="bad-request" width="880" height="685"&gt;&lt;/a&gt;&lt;br&gt;
Note that, valid requests to a server via its endpoint leads to a successful or complete response. When you make an invalid request, the server could flag it as a bad request and reject, throwing an http status code to further explain the nature of that request.&lt;/p&gt;

&lt;p&gt;Having understood what requests are, we can now see how it relates to responses and how the server reacts to this via its endpoint or API. This is an interesting way to understand the concept of request and response which are also one of the core foundations of web development we should all understand. More interesting articles like this are available.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>That TypeScript argument...</title>
      <author>LUKESHIRU</author>
      <pubDate>Mon, 20 Dec 2021 21:56:48 +0000</pubDate>
      <link>https://dev.to/lukeshiru/that-typescript-argument-5c56</link>
      <guid>https://dev.to/lukeshiru/that-typescript-argument-5c56</guid>
      <description>&lt;p&gt;You can see pretty much daily &lt;a href="https://dev.to/search?q=typescript&amp;amp;sort_by=published_at&amp;amp;sort_direction=desc"&gt;here in DEV&lt;/a&gt; an article about how great or how bad TypeScript is, and then folks that don't share the opinion debating in the comments.&lt;/p&gt;

&lt;p&gt;Generally, the arguments for both "sides" are understandable. The people that support TypeScript will tell you everything about how great the DX is, and how the learning curve is worth it, while the people against it will tell you that the learning curve is too steep, and the added value of TS is too low to consider it.&lt;/p&gt;

&lt;p&gt;I'm ok with both opinions because at the end of the day they are just opinions and as such, you should use the tool that is more convenient for you, and TS is not for everyone. My problem is when the arguments are &lt;a href="https://en.wikipedia.org/wiki/Straw_man"&gt;straw mans&lt;/a&gt; and today I'll focus on one that I have seen a lot recently:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-argument"&gt;
  &lt;/a&gt;
  The argument
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do runtime type checking"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem with this argument is not that it's "against TS", but actually that it's asking something from TS that doesn't even exist in other typed languages like it. The argument is based on ignoring the difference between type checking and data validation.&lt;/p&gt;

&lt;p&gt;The examples that folks use when they present this argument are usually APIs, file system access, user input, and other types of "unpredictable data". They say that even if you type those, you could get unpredictable data, so "TS is useless". This is a "straw man" because it presents an external problem unrelated to type checking, and then uses it as an argument against it.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool for developers, not for consumers. As such is at the same level as JSDocs, ESLint, prettier, and other dev tools. It allows you to catch some errors earlier than prod in your editor, but once is "compiled" is just JavaScript, so is your responsibility as a dev to validate data you "can't trust".&lt;/p&gt;

&lt;p&gt;So, a function like this in TS is just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because when you try to use it passing strings for example, it will yell at you in dev time. But now if we do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://swapi.dev/api/people/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are doing things wrong, mainly because we are typing that response as &lt;code&gt;People&lt;/code&gt; and maybe we got something else from the API. In those scenarios you have several options, one is to use something like &lt;code&gt;Partial&lt;/code&gt; which makes all the properties of an object optional, so TS will tell you that &lt;code&gt;name&lt;/code&gt; could be undefined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response is not of type People&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another solution is to have an abstraction layer on top of the API that generates the types and fallback values for you (you need to have a contract with your API, using stuff like swagger, GraphQL, or others). You can also use libs such as &lt;a href="https://gcanti.github.io/io-ts/"&gt;io-ts&lt;/a&gt; which does all the runtime checking for you while keeping it type-safe in dev.&lt;/p&gt;

&lt;p&gt;Now, going back to the argument: Saying that TS is useless because it doesn't do validations at runtime is just saying that you missed the point of TS completely. It would be the same as saying that ESLint is useless because it doesn't throw in prod when the user doesn't follow a linting rule, or it would be like asking Prettier to throw if the code is not formatted correctly in production.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool to help in the dev process, and if you tried it, you know that even if it doesn't do validations at runtime, is extremely valuable as a tool for refactoring, documentation, autocompletion, and so on.&lt;/p&gt;

&lt;p&gt;Now, it would be a false argument as well to say that the only way of achieving this is with TypeScript. You can also use JSDocs and type your code with it, and thanks to the TS server you can get almost the same experience in vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;Hope this article is useful enough to understand that your argument is not valid because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TS is not designed to do validations in production.&lt;/li&gt;
&lt;li&gt;All typed languages have the same issue, you should never trust stuff like user input, the file system, APIs, or any other "external source".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point then you might understand why I say that the initial argument is a straw man because if we fix it, that argument is actually saying this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do &lt;strong&gt;something it wasn't designed to do in the first place&lt;/strong&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is kinda ridiculous.&lt;/p&gt;

&lt;p&gt;That's it, thanks for reading!&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Add test coverage badge for  PHP and Pest in your GitHub repository</title>
      <author>Roberto B.</author>
      <pubDate>Mon, 20 Dec 2021 21:39:48 +0000</pubDate>
      <link>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</link>
      <guid>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</guid>
      <description>&lt;p&gt;If you walk through across GitHub repositories, you can see that most of them show some badges. A badge is a sort of icon that show you the status of your code, your repository, your workflow, etc.&lt;/p&gt;

&lt;p&gt;In your Readme file in your GitHub repository, you can include your badges.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" alt="Test coverage badge" width="880" height="58"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Badges are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show package version;&lt;/li&gt;
&lt;li&gt;number download;&lt;/li&gt;
&lt;li&gt;issues information (totals, opened, closed ...);&lt;/li&gt;
&lt;li&gt;result of test executions;&lt;/li&gt;
&lt;li&gt;result from GitHub Actions workflows;&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good website where to generate badges is &lt;a href="https://shields.io/"&gt;https://shields.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't find a badge that fits your need, you can create one, or you can use some tools specific for your needs.&lt;br&gt;
In my last project, I needed to measure the test code coverage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code coverage is the percentage of code which is covered by automated tests. Code coverage measurement simply determines which lines of code / instructions have been executed through a test run, and which lines / instructions have not. The percentage is calculated based on code covered and all code (number of lines of code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally, the result is shown in the terminal if your test suite is executed in a terminal, for example via command line.&lt;br&gt;
You have also the option to save the result in some specific file with a "standard" format.&lt;br&gt;
For example, "clover" format is an XML file that reports code coverage e some other nice metrics.&lt;br&gt;
If you run the test suite in your GitHub Actions workflow, you need a specific action that is able to read clover format and use the value of coverage to render a badge.&lt;br&gt;
Then a badge needs to be committed to the repository.&lt;br&gt;
To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execute test in GitHub Actions workflow;&lt;/li&gt;
&lt;li&gt;save the report in clover format (clover.xml file);&lt;/li&gt;
&lt;li&gt;use an "Actions" that: read the clover.xml file, produces the badge and commit/push the new badge on the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Readme file, you need to include the badge image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execute-test-in-github-actions-workflow"&gt;
  &lt;/a&gt;
  Execute test in GitHub Actions workflow
&lt;/h2&gt;

&lt;p&gt;To execute tests, you can use PHPUnit or Pest. Both tools have the option for saving the report in &lt;em&gt;clover&lt;/em&gt; format (Pest uses the feature provided by PHPUnit).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Execute tests (Unit and Feature tests) via PestPHP&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vendor/bin/pest --coverage-clover clover.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, the &lt;em&gt;clover.xml&lt;/em&gt; file is created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-badge"&gt;
  &lt;/a&gt;
  Create a badge
&lt;/h2&gt;

&lt;p&gt;For creating the badge, I found this Actions: &lt;a href="https://github.com/marketplace/actions/phpunit-coverage-badge"&gt;phpunit-coverage-badge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reads clover.xml file;&lt;/li&gt;
&lt;li&gt;saves the badge file &lt;em&gt;coverage_badge_path&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;optionally, commits and pushes the badge via &lt;em&gt;push_badge&lt;/em&gt; option;&lt;/li&gt;
&lt;li&gt;for pushing the badge to the repo you need to set the &lt;em&gt;repo_token&lt;/em&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate test coverage badge&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;timkrase/phpunit-coverage-badge@v1.2.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;coverage_badge_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;badge-coverage.svg'&lt;/span&gt;
          &lt;span class="na"&gt;push_badge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;repo_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, every time you push your code on &lt;em&gt;main&lt;/em&gt; branch, the test suite is executed and the badge is updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-readme-file"&gt;
  &lt;/a&gt;
  Update Readme file
&lt;/h2&gt;

&lt;p&gt;Now that the badge file is created, you need to include it into your readme file with the typical markdown syntax for images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Test Coverage&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://packagist.org/packages/hi-folks/array)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace &lt;em&gt;Hi-Folks/array&lt;/em&gt; with your &lt;em&gt;org/repo&lt;/em&gt; of your project.&lt;br&gt;
The current badge is:&lt;br&gt;
&lt;a href="https://packagist.org/packages/hi-folks/array"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4AHjCVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg" alt="Test Coverage" width="100" height="20"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-workflow-file"&gt;
  &lt;/a&gt;
  The workflow file
&lt;/h2&gt;

&lt;p&gt;The whole yaml file (you need to save it in .github/workflows directory):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Coverage PHP Package&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;laravel-tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;operating-system&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;php-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;dependency-stability&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;prefer-none'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install PHP versions&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.php-versions }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.vendor-cache.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with latest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-stable'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with lowest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-lowest'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable --prefer-lowest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>github</category>
      <category>testing</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Tools for testing Functional Web Apps</title>
      <author>Taylor Beseda</author>
      <pubDate>Mon, 20 Dec 2021 21:38:21 +0000</pubDate>
      <link>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</link>
      <guid>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/photos/3GZi6OpSDcY"&gt;Nicolas Thomas&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If you're building critical cloud functions to return API results, handle evented business operations (like &lt;a href="https://blog.begin.com/posts/2021-11-17-shopify-webhooks"&gt;Shopify webhooks&lt;/a&gt;), or render web views, you'll want to incorporate some tests. It's essential to test their internals, inputs, and outputs in a predictable context. We want a utilitarian toolchain to ensure core services function as expected. Where each test can run in isolation, in an unmodified Node.js context. The test suite should run quickly and deterministically; helpful in local development and ideal in CI, where computing resources might be limited.&lt;/p&gt;

&lt;p&gt;Our tests should be proportionate to our functions in scope and size. Ideally, tests are fast and small, just like the services they're testing. (We're &lt;a href="https://blog.begin.com/posts/2021-12-01-fat-function-anti-pattern"&gt;not building fat functions&lt;/a&gt;, right?)&lt;/p&gt;

&lt;p&gt;For the sake of brevity, this discussion is limited to a Node.js runtime, but the principles are the same for other environments. Additionally, we won't worry about testing user interfaces or varying browser environments; those utilities are another post entirely.&lt;/p&gt;

&lt;p&gt;So what's a good approach? Which libraries should be candidates?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-comparison"&gt;
  &lt;/a&gt;
  A comparison
&lt;/h2&gt;

&lt;p&gt;Several frameworks with performant runners help execute atomic tests, even concurrently. Some important considerations are library capabilities (like assertions), package size, maturity, and level of maintenance. Let's look at a collection of the most popular, up to date modules on npm today:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Concurrent&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Updated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/avajs/ava"&gt;Ava&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;281 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;3.15.0&lt;/td&gt;
&lt;td&gt;2021-11-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://jasmine.github.io/setup/nodejs.html"&gt;Jasmine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;47 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;3.10.0&lt;/td&gt;
&lt;td&gt;2021-10-13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://hapi.dev/module/lab"&gt;@hapi/lab&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;160 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;24.4.0&lt;/td&gt;
&lt;td&gt;2021-11-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3.8  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;9.1.3&lt;/td&gt;
&lt;td&gt;2021-10-15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://node-tap.org/"&gt;Node Tap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;28.3  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;15.1.5&lt;/td&gt;
&lt;td&gt;2021-11-26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;248 kB&lt;/td&gt;
&lt;td&gt;No&lt;sup&gt;1&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;5.3.2&lt;/td&gt;
&lt;td&gt;2021-11-16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/lukeed/uvu"&gt;uvu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;46 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;0.5.2&lt;/td&gt;
&lt;td&gt;2021-10-08&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;achievable with tape-esque libraries like &lt;code&gt;mixed-tape&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#a-note-about-jest"&gt;
  &lt;/a&gt;
  A note about Jest
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"But where’s Jest?"&lt;/em&gt; you ask. Don’t get me wrong, I understand the appeal of a framework with so many pleasantries. Jest’s feature-set is impressive and battle-tested. Unfortunately, tools like Jest, in order to accomplish so much, are opinionated. Jest uses implicit globals and its own context. It may not execute code the same way our servers will. This pattern can require all sorts of configuration bloat and transpilation, making debugging (especially in CI) tedious. In my view, Jest is not appropriate for what we're testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpacked-module-size"&gt;
  &lt;/a&gt;
  Unpacked module size
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Emphasis on sizes &amp;gt; 1 MB in the above table is intentional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we're running our tests in a cloud environment (in addition to locally), disk space matters.&lt;/p&gt;

&lt;p&gt;Unfortunately, the library that most appeals to me, Node Tap, is just too large. At 28 MB, &lt;code&gt;tap&lt;/code&gt; isn't very portable and will occupy a large part of allotted space in an environment like AWS Lambda. Hopefully, this limitation won't always be an issue, but it's an important factor for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-recommended-testing-stack"&gt;
  &lt;/a&gt;
  A recommended testing “stack”
&lt;/h2&gt;

&lt;p&gt;I think any of the above options are viable, depending on your use case and preference. For example, if BDD is preferable, &lt;code&gt;jasmine&lt;/code&gt; has you covered. &lt;code&gt;ava&lt;/code&gt; has excellent TypeScript support. &lt;code&gt;uvu&lt;/code&gt; is super fast and works with ESM. And if you're looking for staying power, &lt;code&gt;mocha&lt;/code&gt; has been around for nearly a decade!&lt;/p&gt;

&lt;p&gt;For us at Begin and &lt;a href="https://arc.codes/"&gt;Architect&lt;/a&gt;, &lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt; has been in use for several years. &lt;code&gt;tape&lt;/code&gt; has a stable and straightforward API, routine maintenance updates, and outputs &lt;a href="https://testanything.org/"&gt;TAP&lt;/a&gt;, making it really versatile. While TAP is legible, it's not the most human-readable format. Fortunately, several TAP reporters can help display results for developers. Until recently, Begin's TAP reporter of choice was &lt;code&gt;tap-spec&lt;/code&gt;. Sadly &lt;code&gt;tap-spec&lt;/code&gt; wasn't kept up to date and npm began reporting vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-tap-reporter"&gt;
  &lt;/a&gt;
  A new TAP reporter
&lt;/h3&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/architect/tap-arc"&gt;&lt;code&gt;tap-arc&lt;/code&gt;&lt;/a&gt;. Heavily inspired by &lt;code&gt;tap-spec&lt;/code&gt; (a passing suite's output is nearly identical), &lt;code&gt;tap-arc&lt;/code&gt; is a minimal, streaming TAP reporter with useful expected vs. actual diffing. We're still improving the package, but it's definitely on par with &lt;code&gt;tap-spec&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback?
&lt;/h2&gt;

&lt;p&gt;I'm super interested in what others are doing in this realm. How are you testing cloud functions? What factors are important when selecting test utilities? Do you test in the same environment you're deploying to?&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>I'm setting a year-end contributor goal for Owncast!</title>
      <author>Gabe Kangas</author>
      <pubDate>Mon, 20 Dec 2021 21:35:47 +0000</pubDate>
      <link>https://dev.to/gabek/im-setting-a-year-end-contributor-goal-for-owncast-3gg2</link>
      <guid>https://dev.to/gabek/im-setting-a-year-end-contributor-goal-for-owncast-3gg2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-about"&gt;
  &lt;/a&gt;
  What is this about?
&lt;/h2&gt;

&lt;p&gt;Many people find around the end of the year to have some spare moments to spread their wings and experiment with things outside of work. So I'm issuing a challenge to myself to reach out to these people and get &lt;strong&gt;three&lt;/strong&gt; new people to contribute to Owncast, the self-hosted, free and open source live video and chat server, before the end of the year.&lt;/p&gt;

&lt;p&gt;Each person that contributes to a project, even once, injects their ideas, approaches, energy and personality into it, leaving it better than when they found it. But I understand it's often daunting to step into something new, and a formal invitation is sometimes helpful. This is your invite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-owncast"&gt;
  &lt;/a&gt;
  What is Owncast?
&lt;/h2&gt;

&lt;p&gt;Owncast is a 100% free and open source piece of software you can get up and running in &lt;a href="https://owncast.online/quickstart/installer/"&gt;about a minute&lt;/a&gt; to host your own live streams in a similar style to Twitch or YouTube Live. It's been steadily growing for the past year and you can read more about it, as well see a list of other contributors, at &lt;a href="https://owncast.online"&gt;owncast.online&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-you-help-with"&gt;
  &lt;/a&gt;
  What can you help with?
&lt;/h2&gt;

&lt;p&gt;Owncast is a React frontend project with a Go backend. In general fewer people have been contributing to Owncast on the frontend, so I'm reaching out to you frontend people especially! If you're comfortable with React-powered projects we'd love to have you jump in on something. Either from our list of &lt;a href="https://github.com/owncast/owncast/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+-label%3Ahack+-label%3Abacklog"&gt;"good first issues"&lt;/a&gt;, the &lt;a href="https://github.com/owncast/owncast/issues?q=is%3Aopen+is%3Aissue+label%3A%22bug%22+label%3A%22Web+frontend%22+"&gt;list of bugs&lt;/a&gt;, or something new that you think could be improved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-begin"&gt;
  &lt;/a&gt;
  Where to begin?
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me directly and say hello via email at &lt;a href="mailto:gabek@real-ity.com"&gt;gabek@real-ity.com&lt;/a&gt;. You can also find me on &lt;a href="https://mastodon.social/@gabek"&gt;the Fediverse&lt;/a&gt;, message me here on Dev, or join the &lt;a href="https://owncast.rocket.chat/"&gt;Owncast project chat&lt;/a&gt; where we hang out.&lt;/p&gt;

&lt;p&gt;More than anything it's awesome to meet new people, and I'd love to hear what your interests are and see where there might be some overlap, for as long or as short of a time as you like. I look forward to meeting you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>streaming</category>
      <category>web</category>
      <category>react</category>
    </item>
    <item>
      <title>A Colossal CSS Art!</title>
      <author>Temani Afif</author>
      <pubDate>Mon, 20 Dec 2021 21:13:46 +0000</pubDate>
      <link>https://dev.to/afif/a-colossal-css-art-56mm</link>
      <guid>https://dev.to/afif/a-colossal-css-art-56mm</guid>
      <description>&lt;p&gt;Here I am with another CSS Art. I am back to my favorite Anime (Attack On Titan) to draw:&lt;/p&gt;

&lt;p&gt;A CSS-only Colossal Titan!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/wvreKjm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In case you are not familiar with the Anime, here is an overview of the character:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUWTH1PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic06xt19nzcm5s38q9ms.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUWTH1PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic06xt19nzcm5s38q9ms.jpg" alt="Colossal Titan" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am still missing a few details and I will probably release a better version in the future 😉&lt;/p&gt;




&lt;p&gt;This time I did a better organization for the main colors so I can easily adjust them. &lt;/p&gt;

&lt;p&gt;Below an interactive demo if you want to update the colors. Share your version in the comment section 👇 &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwMzLGR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's also on Twitter if you want to spread the word 📯&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jnIuDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHC_GfkX0AIuiHJ.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmlYTCXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1384162618290540551/jtuQodsv_normal.png" alt="CSS Challenges profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CSS Challenges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @challengescss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎨 CSS Art!&lt;br&gt;&lt;br&gt;Are you ready for the final season of &lt;a href="https://twitter.com/hashtag/AttackOnTitan"&gt;#AttackOnTitan&lt;/a&gt; &lt;br&gt;The best anime ever will be back in January 2022!&lt;br&gt;&lt;br&gt;Until then here is a CSS-only Colossal Titan!&lt;br&gt;&lt;br&gt;Demo: &lt;a href="https://t.co/zm0dweMBLd"&gt;codepen.io/t_afif/full/wv…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt;art &lt;a href="https://twitter.com/hashtag/ShingekiNoKyojin"&gt;#ShingekiNoKyojin&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AttackonTitanFinalSeason"&gt;#AttackonTitanFinalSeason&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/SNK"&gt;#SNK&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:26 AM - 20 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;&lt;strong&gt;Someone&lt;/strong&gt;: Where are all the cool tutorials and useful collections? 🤔&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: A lot of great content will come soon and a heavy CSS collection is in progress as well 🤫&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/jaXDDTuKmeJvwI56kV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jaXDDTuKmeJvwI56kV/giphy.gif" alt="Stay Tuned" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flutter Optimisation Tips</title>
      <author>Rashid Wassan</author>
      <pubDate>Mon, 20 Dec 2021 21:01:05 +0000</pubDate>
      <link>https://dev.to/rashidwassan/flutter-optimisation-tips-9a1</link>
      <guid>https://dev.to/rashidwassan/flutter-optimisation-tips-9a1</guid>
      <description>&lt;p&gt;Flutter apps are very performant if some of the performance optimisations are kept in mind while developing the apps. No doubt, apps can become laggy and janky.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1: Use smaller image files:&lt;/strong&gt;&lt;br&gt;
No doubt, images are essential for any mobile application. And this is the area where performance gets the hit by a good margin, if not managed correctly. I started my journey as an Android Developer and I soon experienced lot of lag and poor performance in my apps. Later, I found that I was using the images which were of several MBs each. The resolution of image assets was much higher than required.&lt;br&gt;
This took lot of time for device to load the assets and draw pixels, increasing CPU &amp;amp; GPU’s work. Sometimes, images even failed to load, making app completely unresponsive.&lt;br&gt;
Here are some tips to follow to avoid performance issues related to image assets.&lt;br&gt;
Try reducing size of you images from tinypng.&lt;br&gt;
Lower the resolution of image here. Make sure the resolution is not more than any higher end device’s resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2: Avoid Unnecessary Animations&lt;/strong&gt;&lt;br&gt;
Animation is a foe of performance, using animations may cause your device resources to constantly work (since the animation values are generated again &amp;amp; again). CPU constantly needs to generate values &amp;amp; GPU has to redraw widgets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3: Remove Redundant Widgets&lt;/strong&gt;&lt;br&gt;
Personally, I used lot of redundant widgets like useless containers &amp;amp; other widgets which did not contribute to overall UI feel of the app. Gradually, I realised that this was becoming my habit. Although this can be subjective. Make sure to use only those widgets which are necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4: Proper State Management&lt;/strong&gt;&lt;br&gt;
A proper state management solution can make your app very efficient &amp;amp; avoid computational overhead. A typical Flutter app may contain hundreds of widgets. Updating these widgets &amp;amp; redrawing them again &amp;amp; again may cause your device to work more. The proper state management allows only necessary widgets to update their state or redraw. Let’s assume that you are using Provider as your state management tool for the app, Provider will only notify its listeners i.e consumer widgets. Only widgets listening to that Change Notifier Provider will update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfr6I_tS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4465dbpfwodw839nwa9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfr6I_tS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4465dbpfwodw839nwa9x.png" alt="Image description" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5: Use Dart Dev Tools (Flutter Dev Tools)&lt;/strong&gt;&lt;br&gt;
Dart Dev Tools is a combination of some useful profiling tools which can help to determine which widget or functionality is taking much processing power and cause lag or jank. Dev Tools illustrate a clear picture of things happening at main &amp;amp; UI thread.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aN2aE2Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amt62j3cipedxg740tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aN2aE2Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amt62j3cipedxg740tk.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6: Use Const Widgets Wherever Possible&lt;/strong&gt;&lt;br&gt;
It is good practice to use the keyword const for constants that we can initialise at compile time. Let's also not forget to use const as much as possible for our widgets, this allows us to catch and reuse widgets to avoid unnecessary rebuilds that are caused by their ancestors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7: Avoid Functional Components&lt;/strong&gt;&lt;br&gt;
Flutter is all about widgets, creating a custom widget can be done in two popular ways. Either create a function returning respective widget (functional approach) or create a whole new widget. It is highly recommended to create either Stateless or Stateful widget rather than creating a function.&lt;/p&gt;

&lt;p&gt;I hope this article will help to make performant Flutter apps.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>android</category>
      <category>ios</category>
    </item>
    <item>
      <title>Remix: A guide to the newly open-sourced React framework</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 20 Dec 2021 20:46:57 +0000</pubDate>
      <link>https://dev.to/logrocket/remix-a-guide-to-the-newly-open-sourced-react-framework-57j5</link>
      <guid>https://dev.to/logrocket/remix-a-guide-to-the-newly-open-sourced-react-framework-57j5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/atharvadeosthale/"&gt;Atharva Deosthale&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Nowadays, it seems like there’s a React framework being introduced every day. And while every React framework has something special to offer, &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt; stands out. Though it isn’t new, it recently became open source after initially being available on a paid subscription basis.&lt;/p&gt;

&lt;p&gt;Remix is a React framework used for server-side rendering (SSR). This means that both the backend and the frontend can be made using a single Remix app. Data is rendered on the server and served to the client side with minimum JavaScript. Unlike vanilla React, where data is fetched on the frontend and then rendered on the screen, Remix fetches data on the backend and serves the HTML directly to the user.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss some cool things about Remix, then move on to create an SSR weather app using this new framework. Finally, I’ll share my personal views on Remix and whether I plan to use Remix for my future projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-to-using-remix"&gt;
  &lt;/a&gt;
  Benefits to using Remix
&lt;/h2&gt;

&lt;p&gt;Remix, just like other frameworks, has some special built-in features that make it convenient for developers. Here are some of my favorites:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-pages"&gt;
  &lt;/a&gt;
  Nested pages
&lt;/h3&gt;

&lt;p&gt;Any page inside a route folder is nested in the route instead of being separate. This means you can embed these components into your parent page, which also means less loading time.&lt;/p&gt;

&lt;p&gt;Another advantage of doing this is that we can enforce error boundaries to these embedded pages, which will help with error handling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-boundaries"&gt;
  &lt;/a&gt;
  Error boundaries
&lt;/h3&gt;

&lt;p&gt;Suppose you get an error in a Remix component or a nested route; the errors are limited to the component and the component will fail to render, or it will simply show an error. In other frameworks, it will break the entire page, and you will see a huge error screen.&lt;/p&gt;

&lt;p&gt;While error boundaries can be implemented in Next.js as well, Remix has this built in, and I think it's a cool feature for production builds so that the user doesn’t get locked out of the entire page for a simple error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitions"&gt;
  &lt;/a&gt;
  Transitions
&lt;/h3&gt;

&lt;p&gt;Remix automatically handles all loading states for you; all you have to do is tell Remix what to show when the app is loading. In other frameworks like Next.js, you need to set the loading state using some state management library like Redux or Recoil. While there are libraries that can help you do the exact same thing in other frameworks, Remix has this built in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traditional-forms"&gt;
  &lt;/a&gt;
  Traditional forms
&lt;/h3&gt;

&lt;p&gt;Now we are going back when developers used PHP. We used to specify a form method and action with a valid PHP URL; we use a similar approach in Remix.&lt;/p&gt;

&lt;p&gt;I know this doesn’t sound fun because we are used to &lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onSubmit&lt;/code&gt;, and HTTP calls. But Remix handles this situation in a completely different way by providing functions like &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;loader&lt;/code&gt; to perform server-side operations. Form data is easily available in these functions. This means there’s absolutely no need to serve JavaScript to the frontend to submit a form.&lt;/p&gt;

&lt;p&gt;Suppose you have a fairly simple website and you don’t really need to serve JavaScript to the frontend. This traditional form method works the best in these situations. In other frameworks, you might need to serve JavaScript to make a &lt;code&gt;fetch&lt;/code&gt; or an &lt;code&gt;axios&lt;/code&gt; call, but you don’t need to do that in Remix. It helps keep things simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks-of-using-remix"&gt;
  &lt;/a&gt;
  Drawbacks of using Remix
&lt;/h2&gt;

&lt;p&gt;While Remix has plenty of benefits, there are some aspects of using the framework that might give you pause.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smaller-community"&gt;
  &lt;/a&gt;
  Smaller community
&lt;/h3&gt;

&lt;p&gt;Remix is newly open-sourced. Because of this, there aren't many people using Remix in production projects at the moment.&lt;/p&gt;

&lt;p&gt;When you get stuck with a problem while using Remix, it might be difficult to find a solution on the internet, and you may need to post questions on forums and wait for a while to get a response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-system-might-be-confusing"&gt;
  &lt;/a&gt;
  Routing system might be confusing
&lt;/h3&gt;

&lt;p&gt;When I started out with Remix, I found the routing system confusing. I couldn’t understand the nested routes concept. That is because I’m used to other frameworks without this specific routing system, which means Remix has a bit of a learning curve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-remix-different-from-nextjs"&gt;
  &lt;/a&gt;
  What makes Remix different from Next.js?
&lt;/h2&gt;

&lt;p&gt;At first glance, there doesn’t seem to be much of a difference between Remix and Next.js because both of them support SSR. However, while Next.js supports SSG and other awesome tools, Remix only focuses on SSR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-sample-app-with-remix"&gt;
  &lt;/a&gt;
  Building a sample app with Remix
&lt;/h2&gt;

&lt;p&gt;Now that we have seen some of the cool things Remix has to offer, let’s make a simple weather app using it. Before moving on with the tutorial, let’s look at the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; or any other code editor you prefer&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://openweathermap.org/api"&gt;OpenWeatherMap&lt;/a&gt; API key — the free one is sufficient&lt;/li&gt;
&lt;li&gt;  Working knowledge of React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get stuck somewhere in the tutorial, here’s the &lt;a href="https://github.com/atharvadeosthale/remix-weather-app"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-remix-app"&gt;
  &lt;/a&gt;
  Creating a Remix app
&lt;/h2&gt;

&lt;p&gt;Navigate to a safe directory and use the following command in the terminal to initialize the installation of our Remix app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-remix@latest weather-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you can replace &lt;code&gt;weather-app&lt;/code&gt; with whatever project name is suitable to you. Once you hit &lt;code&gt;Enter&lt;/code&gt;, you will see an interactive menu that will help you make a Remix app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7EF7n1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-startup-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7EF7n1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-startup-screen.png" alt="Image of IDE after installing Remix" width="730" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like the above picture, you will be asked where you want to deploy. We are just experimenting and won’t cover deployment in this tutorial, so we will be using &lt;strong&gt;Remix App Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8opGQXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-deployment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8opGQXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-deployment.png" alt="IDE screen asking where to deploy Remix" width="730" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will be asked whether you want to use JavaScript or TypeScript. I’ll be using JavaScript for the sake of simplicity in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQIfvFLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-JS-vs-TS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQIfvFLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-JS-vs-TS.png" alt="Remix IDE asking to use JS or TS" width="730" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you will be asked if Remix should use &lt;code&gt;npm install&lt;/code&gt;. Type &lt;code&gt;y&lt;/code&gt;. This will install the required dependencies for Remix to run.&lt;/p&gt;

&lt;p&gt;Now, navigate into the project directory and use the following commands to install some dependencies you will need for this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are installing &lt;code&gt;axios&lt;/code&gt; so that we can send HTTP requests from our app to the OpenWeatherMap API. We will be using &lt;code&gt;dotenv&lt;/code&gt; for storing our API key in an environment variable.&lt;/p&gt;

&lt;p&gt;Now let’s edit &lt;code&gt;package.json&lt;/code&gt; so that we can use environment variables in the development mode of Remix. Replace the &lt;code&gt;dev&lt;/code&gt; script with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node -r dotenv/config node_modules/.bin/remix dev"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable environment variables for your projects. Now, create a new file &lt;code&gt;.env&lt;/code&gt; for our environment variables and store the API key in the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;api key here&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s have a look at the Remix folder structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYONR8yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-folder-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYONR8yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-folder-structure.png" alt="Folder structure of a Remix app" width="344" height="764"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; folder contains our main app logic. All the folders and files under the &lt;code&gt;routes&lt;/code&gt; folder are exposed to the public and can be accessed with a URL. The &lt;code&gt;styles&lt;/code&gt; folder contains all the CSS files, which are stored in a similar fashion as routes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entry.client.jsx&lt;/code&gt; and &lt;code&gt;entry.server.jsx&lt;/code&gt; are managed by Remix, and it’s better not to touch entry files. Instead, create new files and work on them. The &lt;code&gt;root.jsx&lt;/code&gt; file contains our general page layout.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; folder contains our public assets like static images and favicons, and the &lt;code&gt;remix.config.js&lt;/code&gt; file contains basic configuration for our Remix app, such as the port it should run on in development mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;When you first set up a Remix app, it’s not blank; Remix has some tutorials and demos built into the app. Let’s first clean them up so we can work on our weather app.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;root.jsx&lt;/code&gt; and empty the default &lt;code&gt;Layout&lt;/code&gt; component so that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the &lt;code&gt;styles&lt;/code&gt; folder, remove the &lt;code&gt;demos&lt;/code&gt; folder, and empty the contents of &lt;code&gt;dark.css&lt;/code&gt; and &lt;code&gt;global.css&lt;/code&gt;. This will clean up all the styling for us.&lt;/p&gt;

&lt;p&gt;Delete the &lt;code&gt;demos&lt;/code&gt; folder in the &lt;code&gt;routes&lt;/code&gt; directory as well because we don’t need it.&lt;/p&gt;

&lt;p&gt;Now go to &lt;code&gt;index.jsx&lt;/code&gt; and empty everything. Just make sure it has a default exported component just like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-form-and-fetching-the-weather"&gt;
  &lt;/a&gt;
  Creating a form and fetching the weather
&lt;/h2&gt;

&lt;p&gt;Now let’s create a form in &lt;code&gt;index.jsx&lt;/code&gt; with the following layout:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;City&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fetch weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we created a form with method &lt;code&gt;get&lt;/code&gt;, and we have a name associated with the input field, which will be appended to the URL when the form gets submitted.&lt;/p&gt;

&lt;p&gt;Now let’s see how to use route nesting. Create a new file named &lt;code&gt;weather.jsx&lt;/code&gt; in the &lt;code&gt;routes&lt;/code&gt; folder; it will handle the &lt;code&gt;/weather&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Weather&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Weather&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Outlet&lt;/code&gt; component will look for the &lt;code&gt;weather&lt;/code&gt; folder inside the &lt;code&gt;routes&lt;/code&gt; folder and embed the pages inside the main page. This should give you an idea on how page nesting works in Remix.&lt;/p&gt;

&lt;p&gt;Now create a new folder in &lt;code&gt;routes&lt;/code&gt; named &lt;code&gt;weather&lt;/code&gt;, and create a new file &lt;code&gt;index.jsx&lt;/code&gt; inside the &lt;code&gt;weather&lt;/code&gt; folder. Let’s make a &lt;code&gt;loader&lt;/code&gt; function that will run on the server side whenever the page is requested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;units=metric`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are extracting the city name from the URL query, which was sent using a GET request. Then we make a request to the OpenWeatherMap API to get the weather in that city. Remember, we should return the data we need in our frontend so that the data is available to render on the screen.&lt;/p&gt;

&lt;p&gt;Now let’s work on the layout of the result screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;°&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useLoaderData&lt;/code&gt; hook gets the data that was returned using the &lt;code&gt;loader&lt;/code&gt; function so that we can render it on the frontend. If you did everything correctly, you should get your weather rendered like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_PCezF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/weather-app-demo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_PCezF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/weather-app-demo.png" alt="image of weather app displaying weather in nagpur" width="482" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats! You’ve made your first weather app using Remix!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think the Remix is powerful and should gain further popularity in 2022. Will I use Remix instead of Next.js? Probably not, because Next.js has a huge community to back me up as compared to Remix, which is understandable because it is just newly open-sourced.&lt;/p&gt;

&lt;p&gt;This doesn’t mean I didn’t like this framework. I might use this for my personal or fun projects. I want to experiment more with the error boundary features. In my opinion, Next.js would be a great option as of this writing, because when I try to Google some of the problems I faced with Remix, I couldn’t find a solution easily. Maybe in a few years things will change, and Remix will be a more powerful framework with a huge community backing.&lt;/p&gt;

&lt;p&gt;Are you excited about trying out Remix now that it’s open source?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ASMR Game Coding 🕹️ in Python [ Atari : Missile Command 🚀 ] </title>
      <author>Bek Brace</author>
      <pubDate>Mon, 20 Dec 2021 20:43:32 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-game-coding-in-python-atari-missile-command--8i0</link>
      <guid>https://dev.to/bekbrace/asmr-game-coding-in-python-atari-missile-command--8i0</guid>
      <description>&lt;p&gt;Missile command 🚀 was the first game I've ever played in my life.&lt;br&gt;
This was in 1989 on Atari 800XL home computer my father bought the same year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Atari&lt;/em&gt; 当たり [hiragana: アタリ] in Japanese means: &lt;br&gt;
"Hit" , "strike" or "to be right".&lt;/p&gt;

&lt;p&gt;The game was on a cartridge (I'm sure today's kids don't know what is a cartridge), I put it in the slot, and boom the game is on the TV ready to be played.&lt;br&gt;
This is an attempt to recreate the game after 32 years using Python programming language.&lt;br&gt;
This was not easy to recreate and I had to look up a lot of the logic on internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You are the local Missile Commander for the Missile Intercept Launch Function.&lt;/p&gt;

&lt;p&gt;You are responsible for the safety of millions of citizens in six nearby cities. Nuclear war has just broken out. Wave after wave of nuclear warheads have been detected re-entering the atmostphere in your zone of control.&lt;/p&gt;

&lt;p&gt;All that stands between the last remaining citizens of your country and a fireball of death are your lightning reflexes and sharp-shooting aim.&lt;/p&gt;

&lt;p&gt;That's the video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y447GHeZgGM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for reading (and maybe watching 😉)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
DEV profile : &lt;a href="https://dev.to/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://dev.to/bekbrace​​​​&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace​​​&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>gamedev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
