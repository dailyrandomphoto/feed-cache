<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>trust no one</title>
      <author>Volker Schukai</author>
      <pubDate>Sun, 19 Dec 2021 19:11:20 +0000</pubDate>
      <link>https://dev.to/schukai/trust-no-one-1j6n</link>
      <guid>https://dev.to/schukai/trust-no-one-1j6n</guid>
      <description>&lt;p&gt;The Log4j debacle has once again brought into focus an old mantra of web development: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Trust no one! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, you are responsible for the data you retrieve from various sources. Especially for data that comes from a context you can't control.      &lt;/p&gt;

&lt;p&gt;Then, first of all, for data coming through the Web API, but also for data coming from a database or data coming from the file system.&lt;/p&gt;

&lt;p&gt;But if the data ....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All data must be validated and it must be ensured that these inputs are not malicious. You also never know what will happen to the data later (see Log4j).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore: Validate your data!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://issues.apache.org/jira/browse/LOG4J2-905"&gt;issues.apache.org/jira/browse/LOG4J2-905&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>webdev</category>
      <category>http</category>
    </item>
    <item>
      <title>My Chingu Experience</title>
      <author>King</author>
      <pubDate>Sun, 19 Dec 2021 18:56:36 +0000</pubDate>
      <link>https://dev.to/flt_s3nyo/my-chingu-experience-1knd</link>
      <guid>https://dev.to/flt_s3nyo/my-chingu-experience-1knd</guid>
      <description>&lt;p&gt;&lt;strong&gt;CHINGU ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered Chingu on from twitter, it is basically a platform for developers and project managers at any level of their journey to gain experience working on real life projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-benefitted-from-chingu"&gt;
  &lt;/a&gt;
  How I benefitted from Chingu
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I learned about Agile methodologies. It is basically the act of dividing the time between the start of your project and its delivery date into sprints of equal duration in which you'll be completing tasks.As a beginner this helped me to break down tasks into user stories (small chunks) making it easier for me to meet my daily and weekly goals bringing my closer to the end of whatever project I am working on as a whole &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to write a good ReadMe file.Before I joined Chingu I didn't know of the importance of writing a good ReadMe file and I learned that through Chingu. Writing a detailed description of how your project works and how to run it and many other details is just as important as the project itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working in a team. I had the opportunity to work in team for the first time. I appreciated mastered my git cli commands more, resolving merge conflicts and understanding how the git workflow works. As a new developer, this experience equipped me with enough knowledge to continue to work with a team. It gave me a first hand feel of how work is done in teams. I learned from my colleagues and appreciated the knowledge I gained from them.I learned how to collaborate with other developers. I learned how far good and effective communication can bring out the best in people and can create a conducive environment for discourse.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Networking, In this industry competence goes hand in hand in marketing yourself. Marketing yourself is easier when you have a lot of networks. I appreciated the opportunity I had in meeting new developers from all over the world. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Special thanks to all the members of &lt;strong&gt;toucans-team-03&lt;/strong&gt;&lt;br&gt;
Program manager - Cathy&lt;br&gt;
Developer - Ayman&lt;br&gt;
Developer - Mariam&lt;br&gt;
Developer - Opeoluwa&lt;br&gt;
Developer - Carl (Myself)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>tldr: Remember your commands</title>
      <author>Simon Nyström</author>
      <pubDate>Sun, 19 Dec 2021 18:35:38 +0000</pubDate>
      <link>https://dev.to/simonnystrom/tldr-remember-your-commands-i18</link>
      <guid>https://dev.to/simonnystrom/tldr-remember-your-commands-i18</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-raw-tldr-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;tldr&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tldr&lt;/code&gt; is an open-source command line tool distributed both via &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;pip3&lt;/code&gt; that lets you easily look up common use cases for various commands.&lt;/p&gt;

&lt;p&gt;Have you ever been in the position where you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forgot how to use the &lt;code&gt;tar&lt;/code&gt; command?&lt;/li&gt;
&lt;li&gt;Forgot how to open an &lt;code&gt;ssh&lt;/code&gt; tunnel?&lt;/li&gt;
&lt;li&gt;Forgot how &lt;code&gt;git rebase&lt;/code&gt; works?&lt;/li&gt;
&lt;li&gt;Forgot how to &lt;code&gt;…&lt;/code&gt; in the terminal?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, I have. &lt;code&gt;tldr&lt;/code&gt; lets you easily look up common uses cases for commands and subcommands. All the &lt;code&gt;tldr&lt;/code&gt; pages are open-source and community driven, and if a command you are trying to use &lt;code&gt;tldr&lt;/code&gt; for is not available, you can always add it yourself to help out both yourself and others.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-do-i-install-it"&gt;
  &lt;/a&gt;
  How do I install it?
&lt;/h2&gt;

&lt;p&gt;To get your hands on &lt;code&gt;tldr&lt;/code&gt;, all you have to do is install it in one of the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install -g tldr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip3 install tldr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, provided the package location is in your path, all you need to do is run &lt;code&gt;tldr git rebase&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Here's an example of what that might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_Zsf-YL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://newcurrent.se/images/tldr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_Zsf-YL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://newcurrent.se/images/tldr.png" alt="tldr_img" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;p&gt;If you have further interest in this, please visit &lt;a href="https://tldr.sh/"&gt;https://tldr.sh/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Week 4 of 100DaysOfCode JavaScript Challenge</title>
      <author>Arif Iqbal</author>
      <pubDate>Sun, 19 Dec 2021 17:57:17 +0000</pubDate>
      <link>https://dev.to/arifiqbal/week-4-of-100daysofcode-javascript-challenge-1l1n</link>
      <guid>https://dev.to/arifiqbal/week-4-of-100daysofcode-javascript-challenge-1l1n</guid>
      <description>&lt;p&gt;This week I completed the &lt;em&gt;Regular Expressions&lt;/em&gt; module of the JavaScript course at FreeCodeCamp.org. Here is a recap&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/arifiqbal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOgluRxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OBcFBACO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613678/e8f9f997-5977-4d7d-9110-c87e24bb79e5.jpeg" alt="arifiqbal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arifiqbal/regular-expressions-in-javascript-day-18-of-100-4o2e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Regular Expressions in JavaScript - Day 18 of 100&lt;/h2&gt;
      &lt;h3&gt;Arif Iqbal ・ Dec 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/arifiqbal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOgluRxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OBcFBACO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613678/e8f9f997-5977-4d7d-9110-c87e24bb79e5.jpeg" alt="arifiqbal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arifiqbal/regular-expressions-in-javascript-day-19-of-100-57f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Regular Expressions in JavaScript - Day 19 of 100&lt;/h2&gt;
      &lt;h3&gt;Arif Iqbal ・ Dec 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 29: Verilog</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sun, 19 Dec 2021 17:49:45 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-28-verilog-18jp</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-28-verilog-18jp</guid>
      <description>&lt;p&gt;Hardware design is about evenly split between two languages - Verilog and VHDL. They both have serious issues, and people keep trying to write a better language, and getting little traction.&lt;/p&gt;

&lt;p&gt;Verilog is a lot less verbose than VHDL, so let's do some Verilog.&lt;/p&gt;

&lt;p&gt;We'll specifically be using &lt;a href="http://iverilog.icarus.com/"&gt;Icarus Verilog&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hardware-design"&gt;
  &lt;/a&gt;
  Hardware design
&lt;/h3&gt;

&lt;p&gt;Verilog programs describe hardware. Generally there are no variables, functions, loops, if/elses, or such fancy features, because that's not how hardware works.&lt;/p&gt;

&lt;p&gt;If you've never done any hardware, here's extremely simplified view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hardware we're designing is a bunch of logic gates (ANDs, ORs, NOTs, XORs etc.) and wires connecting stuff together&lt;/li&gt;
&lt;li&gt;every wire can be connected to any number of places, but only one can output (write) to it, everything else only inputs (reads) from it&lt;/li&gt;
&lt;li&gt;each wire can only have 0 or 1 on it at any given time, so if you need 16-bit number, you need 16 wires, and Verilog conveniently handles such bundles of wires&lt;/li&gt;
&lt;li&gt;some of those wires are connected to the outside of the device (some as inputs, some as outputs)&lt;/li&gt;
&lt;li&gt;there's often one special external wire called a "clock" which keeps going from 0 to 1 and back, and these transitions can be used to synchronize things in our design (that's what "CPU clock" refers to)&lt;/li&gt;
&lt;li&gt;a bunch of gates and wires can be looped together to provide some number of bits of storage - we generally treat that as a "register" and not bother with individual components at Verilog level&lt;/li&gt;
&lt;li&gt;Verilog also has some non-hardware commands to help the simulator, which we'll use for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you create your hardware in Verilog, you can run it on a simulator - that's what we'll be doing. Or you can export it to run on real hardware, either a FPGA or an ASIC.&lt;/p&gt;

&lt;p&gt;While hardware is mostly designed by huge corporations, this isn't a completely crazy thing to do for a regular person - if some new cryptocoin becomes popular, people will try to design specialized hardware that can mine it faster than CPUs and GPUs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;As hardware deals with numbers and not text, most of the usual tasks like Hello, World and FizzBuzz don't make much sense in Verilog. So let's start by creating very simple circuit known as "multiplexer", making it 4 bit wide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there's 4 input wires A&lt;/li&gt;
&lt;li&gt;there's 4 input wires B&lt;/li&gt;
&lt;li&gt;there's 1 input wire S&lt;/li&gt;
&lt;li&gt;there's 4 output wires O&lt;/li&gt;
&lt;li&gt;if S=0, then O=A&lt;/li&gt;
&lt;li&gt;if S=1, then O=B&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So basically, it's &lt;code&gt;O = S ? A : B&lt;/code&gt;, except with wires instead of code.&lt;/p&gt;

&lt;p&gt;Multiplexers are everywhere in computer hardware - hardware doesn't really have "if"s, so to do some conditional calculations, it calculates both things, and then selects which one it really wanted with a multiplexer. It might seem like a waste at first, but modern CPUs have tens of billions of transistors.&lt;/p&gt;

&lt;p&gt;Let's write it down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;mux4bit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;output&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;notS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kt"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kt"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kt"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;BX&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We specify every single logic gate (1x NOT, 8x AND, 4x OR), and every single wire separately, both external, and internal to the component.&lt;/p&gt;

&lt;p&gt;Of course real Verilog doesn't actually use this extremely verbose style, and we'll get to some more concise syntax later.&lt;/p&gt;

&lt;p&gt;Step by step explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;module mux4bit(A, B, S, O);&lt;/code&gt; - start of the module, and list of external wires we'd need to connect if we actually use this module&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input [3:0] A;&lt;/code&gt; - input wire A, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input S;&lt;/code&gt; - input wire S, 1 bits wide, so we don't need to specify it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output [3:0] O;&lt;/code&gt; - output wire O, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wire notS&lt;/code&gt; - internal wire, 1 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wire [3:0] AX&lt;/code&gt; - internal wire, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not(notS, S);&lt;/code&gt; - NOT gate, it takes &lt;code&gt;S&lt;/code&gt; as input, and outputs &lt;code&gt;notS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;and(AX[0], A[0], notS)&lt;/code&gt; etc. - four AND gates, as a result, &lt;code&gt;AX[i] = A[i] &amp;amp; ~S&lt;/code&gt;, or &lt;code&gt;AX = S ? 0 : A&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;and(BX[0], B[0], S)&lt;/code&gt; etc. - four AND gates, as a result, &lt;code&gt;BX[i] = B[i] &amp;amp; S&lt;/code&gt;, or &lt;code&gt;AX = S ? B : 0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;or(O[0], AX[0], BX[0])&lt;/code&gt; etc. - four OR gates, as a result &lt;code&gt;O[i] = AX[i] | BX[i]&lt;/code&gt;, or &lt;code&gt;O = AX | BX&lt;/code&gt;, or &lt;code&gt;O = S ? B : A&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we need to write a "test bench". Writing test benches for complex devices is really complicated subject, but we'll do something really trivial here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;mux4bit_tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;mux4bit&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="n"&gt;plusargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: please specify +A=&amp;lt;value&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="n"&gt;plusargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: please specify +B=&amp;lt;value&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A = %d, B = %d, S = %d, O = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A = %d, B = %d, S = %d, O = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o mux4bit_tb.vvp mux4bit.v mux4bit_tb.v
% ./mux4bit_tb.vvp +A=7 +B=3
A =  7, B =  3, S = 0, O =  7
A =  7, B =  3, S = 1, O =  3
% ./mux4bit_tb.vvp +A=4 +B=2
A =  4, B =  2, S = 0, O =  4
A =  4, B =  2, S = 1, O =  2
% ./mux4bit_tb.vvp +A=1 +B=6
A =  1, B =  6, S = 0, O =  1
A =  1, B =  6, S = 1, O =  6
% ./mux4bit_tb.vvp +A=2 +B=2
A =  2, B =  2, S = 0, O =  2
A =  2, B =  2, S = 1, O =  2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we compile all the module files together into a &lt;code&gt;vvp&lt;/code&gt; file, then we optionally pass some arguments to the simulation, then simulation does some things.&lt;/p&gt;

&lt;p&gt;Let's go through our test bench code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;reg [3:0] A&lt;/code&gt; - we declare a register, which is like a variable, this one is 4 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reg S&lt;/code&gt; - register, 1 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mux4bit M(A, B, S, O);&lt;/code&gt; - our component &lt;code&gt;mux4bit_tb&lt;/code&gt; uses another component &lt;code&gt;mux4bit&lt;/code&gt; - to instantiate a component we need to specify what all its inputs and outputs connect to. In this case A, B, and S connect to test bench's register, and O connect to some internal wires.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initial begin ... end&lt;/code&gt; - normally we'd use it to specify start state of a component, for example that counter starts at &lt;code&gt;0&lt;/code&gt; etc. As this is test bench and not real component, we can put a lot of code there&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(!$value$plusargs("A=%d", A))&lt;/code&gt;, get &lt;code&gt;A&lt;/code&gt; from command line, and return &lt;code&gt;false&lt;/code&gt; if not passed. This starts from &lt;code&gt;$&lt;/code&gt; to mark it as not part of regular hardware stuff.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display&lt;/code&gt; - basically &lt;code&gt;printf()&lt;/code&gt;, marked with &lt;code&gt;$&lt;/code&gt; to make it clear it's testing command not part of the hardware.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$finish&lt;/code&gt; - end simulation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S = 0&lt;/code&gt; - assign &lt;code&gt;0&lt;/code&gt; to register &lt;code&gt;S&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#1&lt;/code&gt; wait 1 clock tick - Verilog allows every component to specify how long it takes to recalculate values, so you can simulate complex timing, but we won't be using any such functionality.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);&lt;/code&gt; - print all the inputs and outputs - &lt;code&gt;O&lt;/code&gt; is only calculated because we waited a tick, otherwise it would be empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S = 1&lt;/code&gt; - assign &lt;code&gt;0&lt;/code&gt; to register &lt;code&gt;S&lt;/code&gt; - we waited a tick, so we're not trying to write two different values at the same time (generally a bad idea)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#1&lt;/code&gt; wait another tick - otherwise &lt;code&gt;O&lt;/code&gt; would still have old value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);&lt;/code&gt; - because we waited, &lt;code&gt;O&lt;/code&gt; is updated now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully that doesn't sound too crazy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-concise-multiplexer"&gt;
  &lt;/a&gt;
  More concise multiplexer
&lt;/h3&gt;

&lt;p&gt;I showed the first multiplexer in extremely most explicit style, but of course nobody writes this way. Here's 8 bit multiplexer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;mux8bit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;output&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty much equivalent to the long code. &lt;code&gt;assign O = S ? B : A;&lt;/code&gt; sets up all the wires and logic gates to make this expression work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;mux8bit_tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;mux8bit&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A=%d B=%d S=%d O=%D"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of passing specific values, we can just tell the test bench to generate every possible value. We could have triple nested &lt;code&gt;for&lt;/code&gt;, but &lt;code&gt;i&lt;/code&gt; contains 8+8+1 bits already (and some extras), so &lt;code&gt;{A,B,S} = i&lt;/code&gt; will assign the right bits of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;A&lt;/code&gt; (bits 16 to 9), &lt;code&gt;B&lt;/code&gt; (bits 8 to 1) and &lt;code&gt;S&lt;/code&gt; (bit 0).&lt;/p&gt;

&lt;p&gt;We can either check every value, or just get a random sample (&lt;a href="https://github.com/taw/unix-utilities"&gt;&lt;code&gt;randsample&lt;/code&gt; from &lt;code&gt;unix-utilities&lt;/code&gt; collection&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o mux8bit_tb.vvp mux8bit.v mux8bit_tb.v
$ ./mux8bit_tb.vvp | randsample 20
I=     15911, A= 31 B= 19 S=1 O= 19
I=    113470, A=221 B=159 S=0 O=221
I=     28346, A= 55 B= 93 S=0 O= 55
I=     18224, A= 35 B=152 S=0 O= 35
I=     84536, A=165 B= 28 S=0 O=165
I=     28159, A= 54 B=255 S=1 O=255
I=    123640, A=241 B=124 S=0 O=241
I=     15950, A= 31 B= 39 S=0 O= 31
I=     50381, A= 98 B=102 S=1 O=102
I=     33082, A= 64 B=157 S=0 O= 64
I=     77032, A=150 B=116 S=0 O=150
I=     52870, A=103 B= 67 S=0 O=103
I=     63252, A=123 B=138 S=0 O=123
I=     59551, A=116 B= 79 S=1 O= 79
I=    104170, A=203 B=117 S=0 O=203
I=    126954, A=247 B=245 S=0 O=247
I=    130665, A=255 B= 52 S=1 O= 52
I=     14603, A= 28 B=133 S=1 O=133
I=    118586, A=231 B=157 S=0 O=231
I=     82511, A=161 B= 39 S=1 O= 39
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$monitor&lt;/code&gt; displays the value whenever any of its arguments change, so we don't need to do &lt;code&gt;$display&lt;/code&gt; in the loop, we can just set it up once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#odd-even"&gt;
  &lt;/a&gt;
  Odd Even
&lt;/h3&gt;

&lt;p&gt;Here's a very simple module that checks if 16-bit number passed is odd or even. It can just check the lowest bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;oddeven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;output&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more complex component, testing every possible value is not really practical. One common approach is random testing, so let's give it a try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight verilog"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;oddeven_tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;wire&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;oddeven&lt;/span&gt; &lt;span class="n"&gt;OE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A=%d O=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;random&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which we can run with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o oddeven.vvp oddeven.v oddeven_tb.v
$ ./oddeven.vvp
A=13604 O=0
A=24193 O=1
A=54793 O=1
A=22115 O=1
A=31501 O=1
A=39309 O=1
A=33893 O=1
A=21010 O=0
A=58113 O=1
A=52493 O=1
A=61814 O=0
A=52541 O=1
A=22509 O=1
A=63372 O=0
A=59897 O=1
A= 9414 O=0
A=33989 O=1
A=53930 O=0
A=63461 O=1
A=29303 O=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modulo-math"&gt;
  &lt;/a&gt;
  Modulo math
&lt;/h3&gt;

&lt;p&gt;Before we get to the FizzBuzz, we need to figure out how we can handle divisibility by 3 and 5, without adding hardware division module to the design, as they take huge number of transistors.&lt;/p&gt;

&lt;p&gt;Here are basic mathematical facts about modulo operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(A + B) % M = ((A % M) + (B % M)) % M&lt;/li&gt;
&lt;li&gt;(A * B) % M = ((A % M) * (B % M)) % M&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, what does it have to do with anything?&lt;/p&gt;

&lt;p&gt;It can be used for a clever algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for 1-bit number A, we know what it is modulo 3 or 5 - it's just always A (1 or 0)&lt;/li&gt;
&lt;li&gt;so by induction, let's say we have an algorithm for calculating what N-bit numbers modulo M are, and we want to use it to implement 2N-bit numbers&lt;/li&gt;
&lt;li&gt;let's say 2N-bit number is &lt;code&gt;(A * 2^N) + B&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we can precompute (2^N mod M)` as it's a constant&lt;/li&gt;
&lt;li&gt;we know &lt;code&gt;(A % M)&lt;/code&gt; (from small scale algorithm) and &lt;code&gt;(2^N mod M)&lt;/code&gt; (as it's a constant), we can then use M*M size table to calculate &lt;code&gt;(A * 2^N) % M&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we know &lt;code&gt;(A * 2^N) % M&lt;/code&gt; (from previous step) and &lt;code&gt;B mod M&lt;/code&gt; (from small scale algorithm), we can then use M*M size table to calculate &lt;code&gt;(A * 2^N) + B&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modulo-3-component"&gt;
  &lt;/a&gt;
  Modulo 3 Component
&lt;/h3&gt;

&lt;p&gt;We're going to have a lot of components, each with 3 wires out, indicating if division by 3 gives 0, 1, or 2.&lt;/p&gt;

&lt;p&gt;Each component is in file corresponding to its name, I'll just list them all together:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`verilog&lt;br&gt;
module mod3_32bit(A, Mod);&lt;br&gt;
  input [31:0] A;&lt;br&gt;
  output [2:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [2:0] ModHi;&lt;br&gt;
  wire [2:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod3_16bit Hi(A[31:16], ModHi);&lt;br&gt;
  mod3_16bit Low(A[15:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**16) % 3 == 1&lt;br&gt;
  mod3_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_16bit(A, Mod);&lt;br&gt;
  input [15:0] A;&lt;br&gt;
  output [2:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [2:0] ModHi;&lt;br&gt;
  wire [2:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod3_8bit Hi(A[15:8], ModHi);&lt;br&gt;
  mod3_8bit Low(A[7:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**8) % 3 == 1&lt;br&gt;
  mod3_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_8bit(A, Mod);&lt;br&gt;
  input [7:0] A;&lt;br&gt;
  output [2:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [2:0] ModHi;&lt;br&gt;
  wire [2:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod3_4bit Hi(A[7:4], ModHi);&lt;br&gt;
  mod3_4bit Low(A[3:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**4) % 3 == 1&lt;br&gt;
  mod3_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_4bit(A, Mod);&lt;br&gt;
  input [3:0] A;&lt;br&gt;
  output [2:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [2:0] ModHi;&lt;br&gt;
  wire [2:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod3_2bit Hi(A[3:2], ModHi);&lt;br&gt;
  mod3_2bit Low(A[1:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**2) % 3 == 1&lt;br&gt;
  mod3_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_2bit(A, Mod);&lt;br&gt;
  input [1:0] A;&lt;br&gt;
  output [2:0] Mod;&lt;br&gt;
  // 2      =&amp;gt; 2 mod 3&lt;br&gt;
  assign Mod[2] = A[1] &amp;amp; ~A[0];&lt;br&gt;
  // 1      =&amp;gt; 1 mod 3&lt;br&gt;
  assign Mod[1] = ~A[1] &amp;amp; A[0];&lt;br&gt;
  // 0 or 3 =&amp;gt; 0 mod 3&lt;br&gt;
  assign Mod[0] = (~A[0] &amp;amp; ~A[1]) | (A[0] &amp;amp; A[1]);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_add(ModA, ModB, ModOut);&lt;br&gt;
  input [2:0] ModA;&lt;br&gt;
  input [2:0] ModB;&lt;br&gt;
  output [2:0] ModOut;&lt;/p&gt;

&lt;p&gt;// 0 + 0 = 0 =&amp;gt; 0&lt;br&gt;
  // 1 + 2 = 3 =&amp;gt; 0&lt;br&gt;
  // 2 + 1 = 3 =&amp;gt; 0&lt;br&gt;
  assign ModOut[0] = (ModA[0] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[1]);&lt;/p&gt;

&lt;p&gt;// 0 + 1 = 1 =&amp;gt; 1&lt;br&gt;
  // 1 + 0 = 1 =&amp;gt; 1&lt;br&gt;
  // 2 + 2 = 4 =&amp;gt; 1&lt;br&gt;
  assign ModOut[1] = (ModA[0] &amp;amp; ModB[1]) | (ModA[1] &amp;amp; ModB[0]) | (ModA[2] &amp;amp; ModB[2]);&lt;/p&gt;

&lt;p&gt;// 0 + 2 = 2 =&amp;gt; 2&lt;br&gt;
  // 2 + 0 = 2 =&amp;gt; 2&lt;br&gt;
  // 1 + 1 = 2 =&amp;gt; 2&lt;br&gt;
  assign ModOut[2] = (ModA[0] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[1]);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod3_tb;&lt;br&gt;
  reg [31:0] A;&lt;br&gt;
  wire [2:0] Mod;&lt;/p&gt;

&lt;p&gt;reg [31:0] i;&lt;/p&gt;

&lt;p&gt;mod3_32bit M(A, Mod);&lt;/p&gt;

&lt;p&gt;initial begin&lt;br&gt;
    $monitor("A=%d O[0]=%d O[1]=%d O[2]=%d", A, Mod[0], Mod[1], Mod[2]);&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (i=0; i&amp;lt;20; i=i+1) begin
  A = $random;
  #1;
end

$finish;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end&lt;br&gt;
endmodule&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's a lot of code, but it's really not much new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mod3_tb&lt;/code&gt; is same test bench we used for Odd Even, just with different print&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_32bit&lt;/code&gt;, &lt;code&gt;mod3_16bit&lt;/code&gt;, &lt;code&gt;mod3_8bit&lt;/code&gt;, and &lt;code&gt;mod3_4bit&lt;/code&gt; all just setup 2 smaller modules, then add their results together&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_2bit&lt;/code&gt; could do that with &lt;code&gt;mod3_1bit&lt;/code&gt;, but it just calculates the outputs with some logic gates&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_add&lt;/code&gt; takes two remainders, and returns their sum (with each wire being potential remainder)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, this recursion might need to do some bit reshuffling, but as it so happens, for division by 3 we don't have to do anything (&lt;code&gt;mod3_2bit&lt;/code&gt; would need to do reshuffling step, if we implemented it the same as others).&lt;/p&gt;

&lt;p&gt;We can now run it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
$ ./mod3_tp.vvp&lt;br&gt;
A= 303379748 O[0]=0 O[1]=0 O[2]=1&lt;br&gt;
A=3230228097 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=2223298057 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A=2985317987 O[0]=0 O[1]=0 O[2]=1&lt;br&gt;
A= 112818957 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=1189058957 O[0]=0 O[1]=0 O[2]=1&lt;br&gt;
A=2999092325 O[0]=0 O[1]=0 O[2]=1&lt;br&gt;
A=2302104082 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A=  15983361 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A= 114806029 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A= 992211318 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A= 512609597 O[0]=0 O[1]=0 O[2]=1&lt;br&gt;
A=1993627629 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=1177417612 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A=2097015289 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A=3812041926 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=3807872197 O[0]=0 O[1]=1 O[2]=0&lt;br&gt;
A=3574846122 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=1924134885 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
A=3151131255 O[0]=1 O[1]=0 O[2]=0&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modulo-5-component"&gt;
  &lt;/a&gt;
  Modulo 5 Component
&lt;/h3&gt;

&lt;p&gt;This is basically identical to modulo 3, except &lt;code&gt;mod5_4bit&lt;/code&gt; does need to do some reshuffling.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`verilog&lt;br&gt;
module mod5_32bit(A, Mod);&lt;br&gt;
  input [31:0] A;&lt;br&gt;
  output [4:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [4:0] ModHi;&lt;br&gt;
  wire [4:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod5_16bit Hi(A[31:16], ModHi);&lt;br&gt;
  mod5_16bit Low(A[15:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**16) % 5 == 1&lt;br&gt;
  mod5_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_16bit(A, Mod);&lt;br&gt;
  input [15:0] A;&lt;br&gt;
  output [4:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [4:0] ModHi;&lt;br&gt;
  wire [4:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod5_8bit Hi(A[15:8], ModHi);&lt;br&gt;
  mod5_8bit Low(A[7:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**8) % 5 == 1&lt;br&gt;
  mod5_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_8bit(A, Mod);&lt;br&gt;
  input [7:0] A;&lt;br&gt;
  output [4:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [4:0] ModHi;&lt;br&gt;
  wire [4:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod5_4bit Hi(A[7:4], ModHi);&lt;br&gt;
  mod5_4bit Low(A[3:0], ModLow);&lt;/p&gt;

&lt;p&gt;// No need to do shift as (2**4) % 5 == 1&lt;br&gt;
  mod5_add Add(ModHi, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_4bit(A, Mod);&lt;br&gt;
  input [3:0] A;&lt;br&gt;
  output [4:0] Mod;&lt;/p&gt;

&lt;p&gt;wire [4:0] ModHi;&lt;br&gt;
  wire [4:0] ModHi4;&lt;br&gt;
  wire [4:0] ModLow;&lt;/p&gt;

&lt;p&gt;mod5_2bit Hi(A[3:2], ModHi);&lt;br&gt;
  mod5_2bit Low(A[1:0], ModLow);&lt;/p&gt;

&lt;p&gt;// We need to do shift as (2**2) % 5 == 4&lt;br&gt;
  // Notice that if we do this reshuffle twice,&lt;br&gt;
  // everything will be back where it started&lt;br&gt;
  // That's why 8bit and bigger components don't&lt;br&gt;
  // need to do any reshuffle.&lt;br&gt;
  // mod5_8bit should do this 2x, but that's same as not doing it.&lt;br&gt;
  // mod5_16bit should do this 4x, but that's same as not doing it etc.&lt;br&gt;
  assign ModHi4[0] = ModHi[0]; // 0 * 4 = 0  =&amp;gt; 0&lt;br&gt;
  assign ModHi4[4] = ModHi[1]; // 1 * 4 = 4  =&amp;gt; 4&lt;br&gt;
  assign ModHi4[3] = ModHi[2]; // 2 * 4 = 8  =&amp;gt; 3&lt;br&gt;
  assign ModHi4[2] = ModHi[3]; // 3 * 4 = 12 =&amp;gt; 2&lt;br&gt;
  assign ModHi4[1] = ModHi[4]; // 4 * 4 = 16 =&amp;gt; 1&lt;/p&gt;

&lt;p&gt;mod5_add Add(ModHi4, ModLow, Mod);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_2bit(A, Mod);&lt;br&gt;
  input [1:0] A;&lt;br&gt;
  output [4:0] Mod;&lt;br&gt;
  // no 2 bit number is 4 mod 5&lt;br&gt;
  assign Mod[4] = 0;&lt;br&gt;
  // numbers 0-3 are themselves mod 5&lt;br&gt;
  assign Mod[3] = A[0] &amp;amp; A[1];&lt;br&gt;
  assign Mod[2] = A[1] &amp;amp; ~A[0];&lt;br&gt;
  assign Mod[1] = ~A[1] &amp;amp; A[0];&lt;br&gt;
  assign Mod[0] = ~A[0] &amp;amp; ~A[1];&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_add(ModA, ModB, ModOut);&lt;br&gt;
  input [4:0] ModA;&lt;br&gt;
  input [4:0] ModB;&lt;br&gt;
  output [4:0] ModOut;&lt;/p&gt;

&lt;p&gt;// 0 + 0 = 0 =&amp;gt; 0&lt;br&gt;
  // 1 + 4 = 5 =&amp;gt; 0&lt;br&gt;
  // 2 + 3 = 5 =&amp;gt; 0&lt;br&gt;
  // 3 + 2 = 5 =&amp;gt; 0&lt;br&gt;
  // 4 + 1 = 5 =&amp;gt; 0&lt;br&gt;
  assign ModOut[0] = (ModA[0] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[4]) | (ModA[2] &amp;amp; ModB[3]) | (ModA[3] &amp;amp; ModB[2]) | (ModA[4] &amp;amp; ModB[1]);&lt;/p&gt;

&lt;p&gt;// 0 + 1 = 1 =&amp;gt; 1&lt;br&gt;
  // 1 + 0 = 1 =&amp;gt; 1&lt;br&gt;
  // 2 + 4 = 6 =&amp;gt; 1&lt;br&gt;
  // 3 + 3 = 6 =&amp;gt; 1&lt;br&gt;
  // 4 + 2 = 6 =&amp;gt; 1&lt;br&gt;
  assign ModOut[1] = (ModA[0] &amp;amp; ModB[1]) | (ModA[1] &amp;amp; ModB[0]) | (ModA[2] &amp;amp; ModB[4]) | (ModA[3] &amp;amp; ModB[3]) | (ModA[4] &amp;amp; ModB[2]);&lt;/p&gt;

&lt;p&gt;// 0 + 2 = 2 =&amp;gt; 2&lt;br&gt;
  // 1 + 1 = 2 =&amp;gt; 2&lt;br&gt;
  // 2 + 0 = 2 =&amp;gt; 2&lt;br&gt;
  // 3 + 4 = 7 =&amp;gt; 2&lt;br&gt;
  // 4 + 3 = 7 =&amp;gt; 2&lt;br&gt;
  assign ModOut[2] = (ModA[0] &amp;amp; ModB[2]) | (ModA[1] &amp;amp; ModB[1]) | (ModA[2] &amp;amp; ModB[0]) | (ModA[3] &amp;amp; ModB[4]) | (ModA[4] &amp;amp; ModB[3]);&lt;/p&gt;

&lt;p&gt;// 0 + 3 = 3 =&amp;gt; 3&lt;br&gt;
  // 1 + 2 = 3 =&amp;gt; 3&lt;br&gt;
  // 2 + 1 = 3 =&amp;gt; 3&lt;br&gt;
  // 3 + 0 = 3 =&amp;gt; 3&lt;br&gt;
  // 4 + 4 = 8 =&amp;gt; 3&lt;br&gt;
  assign ModOut[3] = (ModA[0] &amp;amp; ModB[3]) | (ModA[1] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[1]) | (ModA[3] &amp;amp; ModB[0]) | (ModA[4] &amp;amp; ModB[4]);&lt;/p&gt;

&lt;p&gt;// 0 + 4 = 4 =&amp;gt; 4&lt;br&gt;
  // 1 + 3 = 4 =&amp;gt; 4&lt;br&gt;
  // 2 + 2 = 4 =&amp;gt; 4&lt;br&gt;
  // 3 + 1 = 4 =&amp;gt; 4&lt;br&gt;
  // 4 + 0 = 4 =&amp;gt; 4&lt;br&gt;
  assign ModOut[4] = (ModA[0] &amp;amp; ModB[4]) | (ModA[1] &amp;amp; ModB[3]) | (ModA[2] &amp;amp; ModB[2]) | (ModA[3] &amp;amp; ModB[1]) | (ModA[4] &amp;amp; ModB[0]);&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module mod5_tb;&lt;br&gt;
  reg [31:0] A;&lt;br&gt;
  wire [4:0] Mod;&lt;/p&gt;

&lt;p&gt;reg [31:0] i;&lt;/p&gt;

&lt;p&gt;mod5_32bit M(A, Mod);&lt;/p&gt;

&lt;p&gt;initial begin&lt;br&gt;
    $monitor("A=%d O[0]=%d O[1]=%d O[2]=%d O[3]=%d O[4]=%d", A, Mod[0], Mod[1], Mod[2], Mod[3], Mod[4]);&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (i=0; i&amp;lt;20; i=i+1) begin
  A = $random;
  #1;
end

$finish;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end&lt;br&gt;
endmodule&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All the modules are just wider versions of the same thing, except &lt;code&gt;mod5_4bit&lt;/code&gt; where I put some comments.&lt;/p&gt;

&lt;p&gt;We can see it in action:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
$  ./mod5_tp.vvp&lt;br&gt;
A= 303379748 O[0]=0 O[1]=0 O[2]=0 O[3]=1 O[4]=0&lt;br&gt;
A=3230228097 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=2223298057 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=2985317987 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A= 112818957 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=1189058957 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=2999092325 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0&lt;br&gt;
A=2302104082 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=  15983361 O[0]=0 O[1]=1 O[2]=0 O[3]=0 O[4]=0&lt;br&gt;
A= 114806029 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1&lt;br&gt;
A= 992211318 O[0]=0 O[1]=0 O[2]=0 O[3]=1 O[4]=0&lt;br&gt;
A= 512609597 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=1993627629 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1&lt;br&gt;
A=1177417612 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=2097015289 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1&lt;br&gt;
A=3812041926 O[0]=0 O[1]=1 O[2]=0 O[3]=0 O[4]=0&lt;br&gt;
A=3807872197 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=3574846122 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0&lt;br&gt;
A=1924134885 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0&lt;br&gt;
A=3151131255 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Now that we have modules telling us if something is divisible by 5 or 3, we can do the FizzBuzz.&lt;/p&gt;

&lt;p&gt;Our FizzBuzz won't do any printing, it will have one input for 32bit number, and 4 output wires - &lt;code&gt;PrintFizz&lt;/code&gt;, &lt;code&gt;PrintBuzz&lt;/code&gt;, &lt;code&gt;PrintFizzBuzz&lt;/code&gt; and &lt;code&gt;PrintNumber&lt;/code&gt;. We can connect it to some printing component to do the actual printing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`verilog&lt;br&gt;
module fizzbuzz(A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);&lt;br&gt;
  input [31:0] A;&lt;br&gt;
  output PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz;&lt;br&gt;
  wire [2:0] Mod3;&lt;br&gt;
  wire [4:0] Mod5;&lt;/p&gt;

&lt;p&gt;mod3_32bit M3(A, Mod3);&lt;br&gt;
  mod5_32bit M5(A, Mod5);&lt;/p&gt;

&lt;p&gt;assign PrintNumber   = ~Mod3[0] &amp;amp; ~Mod5[0];&lt;br&gt;
  assign PrintFizz     = Mod3[0] &amp;amp; ~Mod5[0];&lt;br&gt;
  assign PrintBuzz     = ~Mod3[0] &amp;amp; Mod5[0];&lt;br&gt;
  assign PrintFizzBuzz = Mod3[0] &amp;amp; Mod5[0];&lt;br&gt;
endmodule&lt;/p&gt;

&lt;p&gt;module fizzbuzz_tb;&lt;br&gt;
  reg [31:0] A;&lt;br&gt;
  wire PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz;&lt;/p&gt;

&lt;p&gt;reg [31:0] i;&lt;/p&gt;

&lt;p&gt;fizzbuzz M(A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);&lt;/p&gt;

&lt;p&gt;initial begin&lt;br&gt;
    $monitor("A=%d Number=%d Fizz=%d Buzz=%d FizzBuzz=%d", A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (i=1; i&amp;lt;=100; i=i+1) begin
  A = i;
  #1;
end

$finish;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end&lt;br&gt;
endmodule&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And it totally works:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
$ ./fizzbuzz_tp.vvp&lt;br&gt;
A=         1 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         2 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         3 Number=0 Fizz=1 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         4 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         5 Number=0 Fizz=0 Buzz=1 FizzBuzz=0&lt;br&gt;
A=         6 Number=0 Fizz=1 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         7 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         8 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=         9 Number=0 Fizz=1 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        10 Number=0 Fizz=0 Buzz=1 FizzBuzz=0&lt;br&gt;
A=        11 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        12 Number=0 Fizz=1 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        13 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        14 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        15 Number=0 Fizz=0 Buzz=0 FizzBuzz=1&lt;br&gt;
A=        16 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        17 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        18 Number=0 Fizz=1 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        19 Number=1 Fizz=0 Buzz=0 FizzBuzz=0&lt;br&gt;
A=        20 Number=0 Fizz=0 Buzz=1 FizzBuzz=0&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-verilog"&gt;
  &lt;/a&gt;
  Should you use Verilog?
&lt;/h3&gt;

&lt;p&gt;In this episode I used very low level and verbose Verilog, and only used prints for testing. In real life you'd mostly write at much higher level, and there's a lot of sophisticated visualization tools for testing and simulating the circuit. So don't take this episode to be representative of typical Verilog.&lt;/p&gt;

&lt;p&gt;From what I've seen, actual hardware designers seem to be very unhappy with both Verilog and VHDL, and new hardware design languages are being created all the time. But for now, it's pretty much the overwhelming standard (with VHDL being a more verbose but otherwise very similar language).&lt;/p&gt;

&lt;p&gt;The other key skill in hardware design is automated verification, and for that you'd need to know a &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-23-ruby-z3-19b9"&gt;logic language like Z3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For people who want to play with electronics, I'd recommend one of the video games first. I personally liked &lt;a href="https://store.steampowered.com/app/684270/Silicon_Zeroes/"&gt;Silicon Zeroes&lt;/a&gt; best. &lt;a href="https://store.steampowered.com/app/504210/SHENZHEN_IO/"&gt;Shenzhen I/O&lt;/a&gt; is more about programming microcontrollers than making circuits, but it's also very popular. Once you play a bunch of such games, and want to try something more real, Verilog is a fun language to try. And then who knows, maybe you'll design an FPGA or an ASIC for the next big cryptocurrency and get rich.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-29-verilog"&gt;Code for the Verilog episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>verilog</category>
      <category>electronics</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Understanding CSS Flexbox</title>
      <author>Md. Imran Hossain</author>
      <pubDate>Sun, 19 Dec 2021 16:47:13 +0000</pubDate>
      <link>https://dev.to/mdimran1409036/understanding-css-flex-box-52he</link>
      <guid>https://dev.to/mdimran1409036/understanding-css-flex-box-52he</guid>
      <description>&lt;p&gt;Flexbox, The first thing that comes to our mind designing a layout. Layout designing was never been this easy before flexbox is introduced.&lt;br&gt;
From designing a simple navbar to a very complex UI, Flexbox is a must because of its simple structure and easy-to-maintain nature.&lt;br&gt;
Before diving into the brief concept, make sure you know the basic building blocks of HTML5 and also CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-building-blocks"&gt;
  &lt;/a&gt;
  Basic Building Blocks:
&lt;/h2&gt;

&lt;p&gt;A Flexbox has two major parts. First is the &lt;code&gt;flex container&lt;/code&gt; and second one is &lt;code&gt;flex items&lt;/code&gt;. Flex container is the wrapper of flex items and Flex items are the layout elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
 &amp;lt;article&amp;gt;
  &amp;lt;p&amp;gt;lorem ipsum dolor ip somet&amp;lt;/p&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;article&amp;gt;
  &amp;lt;p&amp;gt;lorem ipsum dolor ip somet&amp;lt;/p&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;article&amp;gt;
  &amp;lt;p&amp;gt;lorem ipsum dolor ip somet&amp;lt;/p&amp;gt;
 &amp;lt;/article&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the section is the flex container and all the articles are flex items. To style this layout we need to use the flex property in the flex container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display: flex;
flex-direction: row;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The possible output of this code is the articles will be displayed in a row.&lt;br&gt;
By default, flex-direction is set as row. There is also another property of flex-direction is the column. The main concept behind this is the two major axes of displaying layout. They are 1. Main axis 2. Cross axis.&lt;br&gt;
&lt;strong&gt;Main axis:&lt;/strong&gt; The main axis is the axis running in the direction the flex items are laid out in (for example, as rows across the page, or columns down the page.) The start and end of this axis are called the main start and main end.&lt;br&gt;
&lt;strong&gt;Cross axis:&lt;/strong&gt; The cross axis is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the cross start and cross end.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping"&gt;
  &lt;/a&gt;
  Wrapping:
&lt;/h2&gt;

&lt;p&gt;If the number of articles will be increased to 10 or so then only a row will not capable to display the flex items properly. And that's where the wrapping comes as a savior. It organizes the flex items in such a way that every item will take the minimum width of available width and when no space is available to rest of the flex items will be wrapped to a new line. Wrapping prevents the document from overflowing.&lt;br&gt;
&lt;code&gt;flex-wrap: wrap&lt;/code&gt;&lt;br&gt;
The shorthand of flex-direction and flex-wrap:&lt;br&gt;
&lt;code&gt;flex-flow: column wrap&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#horizontal-and-vertical-alignment"&gt;
  &lt;/a&gt;
  Horizontal and vertical alignment:
&lt;/h2&gt;

&lt;p&gt;So far, We can position our layout elements into rows or columns and if the layout elements overflow, we use wrap to prevent it.&lt;br&gt;
The biggest advantage of flexbox is, it calculates the available space and divides them equally irrespective of the width of the webpage screen. This available space can be aligned both along the horizontal and vertical axis.&lt;br&gt;
If we want to center horizontally and divide the whole space with equal spacing, we want to use the justify-content property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section{
 display: flex;
 justify-content: center;
 flex-flow: row wrap;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to this, we may need to align them vertically center. In order to do this, we just need to add the property &lt;code&gt;align-items: center&lt;/code&gt; with the above code.&lt;br&gt;
Notice, here we used flex-direction as a row, it would be nice if you try it for direction as a column.&lt;br&gt;
Other &lt;code&gt;justify-content&lt;/code&gt; properties: &lt;em&gt;space-around, space-between, flex-start and flex-end&lt;/em&gt;&lt;br&gt;
&lt;code&gt;align-items&lt;/code&gt; properties: _center, flex-start, flex-end, stretch, baseline&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#controlling-flex-items"&gt;
  &lt;/a&gt;
  Controlling Flex items:
&lt;/h2&gt;

&lt;p&gt;Till now, we only have worked with flex containers, there are also some properties for flex items that give us more power over flex items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flex&lt;/strong&gt;&lt;br&gt;
Flex property has three values specifying-&lt;br&gt;
A unitless value representing how much space an item will take, which is called &lt;code&gt;flex-grow&lt;/code&gt; property&lt;br&gt;
Another unitless value representing how much an item will shrink in order to prevent overflow, which is called &lt;code&gt;flex-shrink&lt;/code&gt;&lt;br&gt;
The last value is the minimum width an item will take, commonly known as &lt;code&gt;flex-basis&lt;/code&gt;&lt;br&gt;
There is a shorthand comprising the three values. Flex shrink is used for advanced cases, so we will omit that for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article {
  flex: 1 200px;
}

article:nth-of-type(3) {
  flex: 2 200px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These code blocks suggest the entire width will be a total of 4(1+1+2) fractions and the first two elements will get a minimum of 200px width and if more width is available then they will take 1/4th of the remaining space each. Only the third element will get half of the total space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Align self&lt;/strong&gt;&lt;br&gt;
In addition to the &lt;code&gt;align-items&lt;/code&gt; property that is used in the flex container, &lt;code&gt;align-self&lt;/code&gt;overrides the &lt;code&gt;align-items&lt;/code&gt; property.&lt;br&gt;
&lt;code&gt;align-self&lt;/code&gt; is specified in the flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;align-self: flex-end;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ordering flex items&lt;/strong&gt;&lt;br&gt;
By default, each flex item has the order of 0 and the order will be according to their declared position. This order can be changed using the order property of flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article:first-child{
 order:1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This eventually moves the first element of the flex items to the last. The order value can be negative. In that case, a negative value will take the initial position.&lt;/p&gt;

&lt;p&gt;So these are the things you need to know to get started with Flexbox. To get the more clear and more brief idea, I suggest &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"&gt;MDN's CSS layout documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>flexbox</category>
    </item>
    <item>
      <title>What is Amazon Aurora and How it's Work?</title>
      <author>Vijay Patel</author>
      <pubDate>Sun, 19 Dec 2021 16:24:40 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-amazon-aurora-and-how-its-work-33lc</link>
      <guid>https://dev.to/easyawslearn/what-is-amazon-aurora-and-how-its-work-33lc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-amazon-aurora"&gt;
  &lt;/a&gt;
  What is Amazon Aurora?
&lt;/h2&gt;

&lt;p&gt;Amazon Aurora is a MySQL and PostgreSQL-compatible relational database built for the cloud, that combines the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open source databases.&lt;/p&gt;

&lt;p&gt;Amazon Aurora is up to five times faster than standard MySQL databases and three times faster than standard PostgreSQL databases. Amazon Aurora is fully managed by Amazon Relational Database Service (RDS), which automates time-consuming administration tasks like hardware provisioning, database setup, patching, and backups.&lt;/p&gt;

&lt;p&gt;Amazon Aurora features a distributed, fault-tolerant, self-healing storage system that auto-scales up to 128TB per database instance. It delivers high performance and availability with up to 15 low-latency read replicas, point-in-time recovery, continuous backup to Amazon S3, and replication across three Availability Zones (AZs).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is the full tutorial video (Overview + Demo) based on AWS Aurora👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=FIa7BfqYVu8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HhkWT5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7409nxxsepgemfiye4h.png" alt="Image description" width="90" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-amazon-aurora"&gt;
  &lt;/a&gt;
  Features of Amazon Aurora
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;High throughput&lt;/li&gt;
&lt;li&gt;Instance monitoring and repair&lt;/li&gt;
&lt;li&gt;Encryption&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Cost-effective&lt;/li&gt;
&lt;li&gt;Migration support&lt;/li&gt;
&lt;li&gt;Fully Managed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-aurora-db-cluster"&gt;
  &lt;/a&gt;
  Amazon Aurora DB Cluster
&lt;/h2&gt;

&lt;p&gt;Amazon Aurora DB cluster is a virtual database storage volume that spans multiple availability zones. Each Amazon Aurora Database Cluster is made up of two or more DB instances and a cluster volume that primarily manages the data for those DB instances. The following are the two types of DB instances that make up an Amazon Aurora Cluster: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primary-db-instance"&gt;
  &lt;/a&gt;
  Primary DB instance
&lt;/h3&gt;

&lt;p&gt;: This type of DB instance supports read and write operations and performs all data modifications to the cluster volume. Each Aurora DB cluster has one primary DB instance. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aurora-replica"&gt;
  &lt;/a&gt;
  Aurora Replica
&lt;/h3&gt;

&lt;p&gt;: Unlike the primary DB instance, Aurora Replica only supports read operations. It is connected to the same storage volume as the primary DB instance. By locating Aurora Replicas in separate availability zones, high availability can be maintained.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-aurora-pricing"&gt;
  &lt;/a&gt;
  Amazon Aurora Pricing
&lt;/h2&gt;

&lt;p&gt;Amazon Aurora is paying as you go. It is comprised of 3 parts:&lt;/p&gt;

&lt;p&gt;Hosting. You can choose from 3 different types of hosting depending on your needs&lt;br&gt;
Storage and Operations. Storage is billed per gigabyte per month, and I/O is billed per million-request&lt;br&gt;
Data transferred&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► [&lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>aws</category>
      <category>aurora</category>
      <category>overview</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Standard v/s FIFO : SNS &amp; SQS</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 19 Dec 2021 15:59:13 +0000</pubDate>
      <link>https://dev.to/aws-builders/standard-vs-fifo-sns-sqs-38ld</link>
      <guid>https://dev.to/aws-builders/standard-vs-fifo-sns-sqs-38ld</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Amazon SNS&lt;/a&gt; and &lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon SQS&lt;/a&gt; both offer Standard and FIFO variants of topics and queues respectively which helps you build better micro-service focused, de-coupled applications. &lt;br&gt;
Some of the basic understanding of SNS and SQS with the technology and concepts behind is explained in - &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/getting-started-with-sns-and-sqs-3m4i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with SNS and SQS&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Nov 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sns&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
The previous blog post explains about when and how to choose SNS or SQS for your application need.&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/when-to-sns-or-sqs-2aji" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;When to : SNS or SQS&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Nov 21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sns&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
And this blog post, will give you a better understanding of Standard and FIFO variants of topics and queues.

&lt;h4&gt;
  &lt;a href="#what-is-standard-topicqueue"&gt;
  &lt;/a&gt;
  What is Standard topic/queue?
&lt;/h4&gt;

&lt;p&gt;Standard topics/queues are used often when the system can handle messages which can arrive more than once and without a proper order. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxOSX42m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryv47yw58tlda2cr5oo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxOSX42m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryv47yw58tlda2cr5oo9.png" alt="Standard topic/queue" width="521" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-fifo-topicqueue"&gt;
  &lt;/a&gt;
  What is FIFO topic/queue?
&lt;/h4&gt;

&lt;p&gt;FIFO topics/queues follows the concept of &lt;em&gt;First-in,First-out&lt;/em&gt; which guarantees the order of messages is very necessary. This strictly maintains the order of the message and also doesn't deliver the same message multiple times. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DShunvBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuakgmp66wjwok0jomp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DShunvBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuakgmp66wjwok0jomp2.png" alt="FIFO topic/queue" width="521" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#standard-vs-fifo-sns"&gt;
  &lt;/a&gt;
  Standard v/s FIFO : SNS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Amazon SNS&lt;/a&gt; offers &lt;em&gt;topics&lt;/em&gt; of two variants - &lt;strong&gt;Standard topics&lt;/strong&gt; and &lt;strong&gt;FIFO topics&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfY0CH-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndwzkpxi3a5v1kqh4q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfY0CH-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndwzkpxi3a5v1kqh4q7.png" alt="Standard v/s FIFO : SNS" width="794" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Standard topics&lt;/th&gt;
&lt;th&gt;FIFO topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Throughput&lt;/td&gt;
&lt;td&gt;Nearly unlimited no. of messages per second.&lt;/td&gt;
&lt;td&gt;300 messages per second or 10 MB per second (whichever is first).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message order&lt;/td&gt;
&lt;td&gt;Order of messages will not be same as published order.&lt;/td&gt;
&lt;td&gt;Order is maintained by following &lt;em&gt;first-in-first-out (FIFO)&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message delivery&lt;/td&gt;
&lt;td&gt;At-least once, can duplicate again.&lt;/td&gt;
&lt;td&gt;Only once.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subscription types&lt;/td&gt;
&lt;td&gt;Amazon SQS, Amazon Kinesis Data Firehose, AWS Lambda Fns, HTTPS, SMS, Email, mobile push.&lt;/td&gt;
&lt;td&gt;Only SQS FIFO queues.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Limits&lt;/td&gt;
&lt;td&gt;100,000 standard topics with 12.5M subscriptions per topic per account.&lt;/td&gt;
&lt;td&gt;1,000 FIFO topics with 100 subscriptions per topic per account.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Encryption (via &lt;a href="https://aws.amazon.com/kms/"&gt;AWS KMS&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Both at rest and in transit.&lt;/td&gt;
&lt;td&gt;Both at rest and in transit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pricing (more info in &lt;a href="https://aws.amazon.com/sns/pricing/"&gt;SNS pricing&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;First 1M requests free, $0.5 per 1M requests.&lt;/td&gt;
&lt;td&gt;Publish and publish batch API requests are $0.30 per 1M and $0.017 per GB of payload data and subscription messages are $0.01 per 1M and $0.001 per GB of payload data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use-case&lt;/td&gt;
&lt;td&gt;Whenever there is multi-subscriber scenario, Whenever the application can handle duplicate and unordered messages.&lt;/td&gt;
&lt;td&gt;Whenever the need for ordering is a must.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#standard-vs-fifo-sqs"&gt;
  &lt;/a&gt;
  Standard v/s FIFO : SQS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon SQS&lt;/a&gt; offers &lt;em&gt;queues&lt;/em&gt; of two variants - &lt;strong&gt;Standard queues&lt;/strong&gt; and &lt;strong&gt;FIFO queues&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHU2K1Oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrr2n63yo2c39wnz84p7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHU2K1Oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrr2n63yo2c39wnz84p7.png" alt="Standard v/s FIFO : SQS" width="880" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Standard queues&lt;/th&gt;
&lt;th&gt;FIFO queues&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Throughput&lt;/td&gt;
&lt;td&gt;Nearly unlimited number of transactions per second per API action&lt;/td&gt;
&lt;td&gt;300 message per second with a batch of 10 messages per operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message order&lt;/td&gt;
&lt;td&gt;Occasionally order of messages will not be same.&lt;/td&gt;
&lt;td&gt;Order is maintained by following &lt;em&gt;first-in-first-out (FIFO)&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message delivery&lt;/td&gt;
&lt;td&gt;At-least once but can get a copy of the same message&lt;/td&gt;
&lt;td&gt;Only once.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Message persistence&lt;/td&gt;
&lt;td&gt;Max upto 14 days.&lt;/td&gt;
&lt;td&gt;Max upto 14 days.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Encryption (via &lt;a href="https://aws.amazon.com/kms/"&gt;AWS KMS&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Both at rest and in transit.&lt;/td&gt;
&lt;td&gt;Both at rest and in transit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolvers / Triggers&lt;/td&gt;
&lt;td&gt;Lambda Fns and SNS topics.&lt;/td&gt;
&lt;td&gt;Lambda Fns and SNS topics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pricing (more info in &lt;a href="https://aws.amazon.com/sqs/pricing/"&gt;SNS pricing&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;First 1M requests free, $0.4 for 1M-100B requests, $0.24 for over 200B requests.&lt;/td&gt;
&lt;td&gt;First 1M requests free, $0.5 for 1M-100B requests, $0.35 for over 200B requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use-case&lt;/td&gt;
&lt;td&gt;Whenever the application can handle unordered and multiple delivery of messages such as decoupling transaction ordering process, batch processes.&lt;/td&gt;
&lt;td&gt;Whenever the message have to be ordered such as image/video decoding/encoding, using as subscriber to a FIFO topic.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Whenever choosing SNS or SQS choosing between Standard variant and FIFO variant is also necessary as the features of &lt;em&gt;message ordering&lt;/em&gt;, &lt;em&gt;exactly once delivery&lt;/em&gt; would help building efficient systems. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5AX07-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kcosypbzjvovxtrcgf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5AX07-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kcosypbzjvovxtrcgf6.png" alt="Variants" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>architecture</category>
      <category>sns</category>
      <category>sqs</category>
    </item>
    <item>
      <title>Learn C Programming in Hindi</title>
      <author>Tutorial In Hindi</author>
      <pubDate>Sun, 19 Dec 2021 15:33:32 +0000</pubDate>
      <link>https://dev.to/tutorialinhindi/learn-c-programming-in-hindi-ll1</link>
      <guid>https://dev.to/tutorialinhindi/learn-c-programming-in-hindi-ll1</guid>
      <description>&lt;p&gt;क्या आप &lt;strong&gt;सी प्रोग्रामिंग भाषा&lt;/strong&gt; सीखना चाहते हैं? लेकिन आप नहीं जानते कि अपनी भाषा हिंदी में &lt;strong&gt;&lt;a href="https://www.solutioninhindi.com/c-language-hindi/"&gt;C language&lt;/a&gt;&lt;/strong&gt; कहाँ और कैसे सीखें? यदि 'हाँ' तो यह लेख आपके लिए :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-c-programming-in-hindi"&gt;
  &lt;/a&gt;
  Learn C Programming in Hindi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xk85rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brd2z96viad7jci24ydc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xk85rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brd2z96viad7jci24ydc.png" alt="C Programming Tutorial in Hindi" width="880" height="627"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;आजकल, प्रोग्रामिंग भाषा सीखना बहुत आसान है, क्योंकि हमारे पास बहुत सारे मुफ्त संसाधन हैं।&lt;/p&gt;

&lt;p&gt;लेकिन समस्या यह है कि अधिकांश संसाधन अंग्रेजी भाषा में उपलब्ध हैं, इसलिए सीखना थोड़ा मुश्किल है अगर हम अंग्रेजी भाषा को ठीक से नहीं समझते हैं।&lt;/p&gt;

&lt;p&gt;यदि आप इस प्रकार की समस्या का सामना कर रहे हैं, तो चिंता न करें।&lt;br&gt;
इस लेख में, मैं आपको सी और सी भाषा की बुनियादी समझ दूंगा और &lt;strong&gt;&lt;a href="https://www.tutorialinhindi.com/c-language-tutorial-hindi/"&gt;FREE C programming course&lt;/a&gt;&lt;/strong&gt; संसाधनों दूंगा, जिससे आप अपनी मातृभाषा में आसानी से सीख सकते हैं।&lt;/p&gt;

&lt;p&gt;तो बिना देर किए चलिए शुरू करते हैं:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-c-programming-language-c-%E0%A4%AA%E0%A5%8D%E0%A4%B0%E0%A5%8B%E0%A4%97%E0%A5%8D%E0%A4%B0%E0%A4%BE%E0%A4%AE%E0%A4%BF%E0%A4%82%E0%A4%97-%E0%A4%B2%E0%A5%88%E0%A4%82%E0%A4%97%E0%A5%8D%E0%A4%B5%E0%A5%87%E0%A4%9C-%E0%A4%95%E0%A5%8D%E0%A4%AF%E0%A4%BE-%E0%A4%B9%E0%A5%88"&gt;
  &lt;/a&gt;
  What is C programming Language (C प्रोग्रामिंग लैंग्वेज क्या है)?
&lt;/h2&gt;

&lt;p&gt;C एक सामान्य-उद्देश्य वाली, high-level प्रोग्रामिंग भाषा है। जिसे मूल रूप से डेनिस एम. रिची (Dennis M. Ritchie) द्वारा Bell Labs में UNIX ऑपरेटिंग सिस्टम को विकसित करने के लिए विकसित किया गया था।&lt;br&gt;
&lt;em&gt;C compiler, UNIX operating system, और UNIX application programs को C लैंग्विज में ही लिखा गया है।&lt;/em&gt;&lt;br&gt;
सी भाषा की अधिक जानकारी के लिए इसे पढ़ें: &lt;a href="https://www.tutorialinhindi.com/c-programming/introduction-c-language-hindi/"&gt;Introduction to C in Hindi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;सी का इतिहास दिलचस्प है, आइए जानते हैं;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#history-of-c-language"&gt;
  &lt;/a&gt;
  History of C Language
&lt;/h2&gt;

&lt;p&gt;सी प्रोग्रामिंग लैंग्वेज की उत्पत्ति &lt;strong&gt;1970&lt;/strong&gt; के दशक की शुरुआत में &lt;em&gt;Bell Labs&lt;/em&gt; से हुई थी। बेल लैब्स पेपर “&lt;a href="https://www.bell-labs.com/usr/dmr/www/chist.html"&gt;The Development of the C Language&lt;/a&gt;” के अनुसार,सी प्रोग्रामिंग भाषा को 1970 के दशक की शुरुआत में नवजात यूनिक्स ऑपरेटिंग सिस्टम के लिए सिस्टम कार्यान्वयन भाषा के रूप में &lt;strong&gt;डेनिस रिची&lt;/strong&gt; द्वारा तैयार किया गया था।&lt;/p&gt;

&lt;p&gt;सी भाषा के इतिहास के बारे में प्रत्येक और सब कुछ जानने के लिए जैसे सी का पहला संस्करण फिर संस्करण कैसे अपडेट किए गए हैं आदि, इसे पढ़ें: &lt;a href="https://www.tutorialinhindi.com/c-programming/history-of-c-language-hindi/"&gt;History of C in Hindi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;जैसा कि आप जानते हैं, C व्यापक रूप से इस्तेमाल की जाने वाली व्यावसायिक भाषा है। और इसके कारण है इसकी लाभकारी विशेषताओं:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features-of-c-language"&gt;
  &lt;/a&gt;
  Features of C Language
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;सी एक संरचित भाषा है और इसे सीखना आसान है।&lt;/li&gt;
&lt;li&gt;यह कुशल कार्यक्रम को तैयार करता है।&lt;/li&gt;
&lt;li&gt;इसे विभिन्न कंप्यूटर प्लेटफॉर्म पर आसानी से संकलित किया जा सकता है।&lt;/li&gt;
&lt;li&gt;निम्न-स्तरीय गतिविधियों को संभाल सकता है।&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;सी की सभी विशेषताओं को जानने के लिए इस लेख को पढ़ें: &lt;a href="https://www.tutorialinhindi.com/c-programming/features-of-c-language-hindi/"&gt;Features of C in Hindi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;आइए एक कदम और आगे बढ़ते हैं और सीखते हैं कि C प्रोग्राम को syntax के रूप से कैसे लिखना होता है;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#syntax-of-c"&gt;
  &lt;/a&gt;
  Syntax of C
&lt;/h2&gt;

&lt;p&gt;सिंटैक्स मूल रूप से एक प्रोग्राम लिखते समय पालन किए जाने वाले प्रोटोकॉल को संदर्भित करता है।&lt;br&gt;
किसी विशेष आउटपुट प्राप्त करने के लिए कोडिंग करते समय उचित सिंटैक्स का पालन करना बहुत आवश्यक है।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C का बेसिक सिंटैक्स&lt;/strong&gt; में &lt;strong&gt;header files&lt;/strong&gt;, &lt;strong&gt;main() function&lt;/strong&gt; और &lt;strong&gt;program code&lt;/strong&gt; होते हैं। यह सी कार्यक्रम में सबसे मौलिक संरचना है।&lt;/p&gt;

&lt;p&gt;यहाँ एक सरल और सबसे छोटे C प्रोग्राम का मूल सिंटैक्स दिया गया है:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;header files
return_type main()
{
   program codes
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;सी प्रोग्राम सिंटैक्स संरचना को सीखने और समझने के लिए इस विवरण लेख को पढ़ें: &lt;a href="https://www.tutorialinhindi.com/c-programming/syntax-of-c-language-hindi/"&gt;Syntax of C in Hindi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;चलिए एक और कदम आगे बढ़ने दें और डेटा प्रकारों को समझें&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-types-in-c-language"&gt;
  &lt;/a&gt;
  Data Types in C language
&lt;/h2&gt;

&lt;p&gt;जब भी हम C प्रोग्राम में एक variable को परिभाषित करते हैं, तो हमें डेटा के प्रकार को निर्दिष्ट करने की आवश्यकता होती है।&lt;br&gt;
यह compiler को यह जानने में मदद करता है कि किस प्रकार के डेटा की अपेक्षा की जानी चाहिए और उस पर कौन से संचालन (operations) किए जा सकते हैं।&lt;/p&gt;

&lt;p&gt;संक्षेप में, C programming में, Data types, variables के लिए declarations हैं। यह variables से जुड़े डेटा के प्रकार और आकार को निर्धारित करता है।&lt;br&gt;
उदाहरण के लिए,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int TutorilinhindiVar;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;डेटा प्रकारों को समझने के लिए इस ट्यूटोरियल को पढ़ें: &lt;a href="https://www.tutorialinhindi.com/c-programming/c-data-types-hindi/"&gt;Data types in Hindi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;अब आपने सी प्रोग्रामिंग की बेसिक सीख ली है, और अब यह जानने का समय आ गया है कि हिंदी भाषा में फ्री में सी प्रोग्रामिंग कहां से सीखें।&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-learn-c-programming-in-hindi"&gt;
  &lt;/a&gt;
  Where to learn C programming in Hindi
&lt;/h2&gt;

&lt;p&gt;इस विशेष उत्तर के लिए, आपके पास एक अच्छी खबर है कि आप बिना कोई कोर्स खरीदे &lt;em&gt;&lt;a href="https://www.tutorialinhindi.com/"&gt;tutorialinhindi.com&lt;/a&gt;&lt;/em&gt; वेबसाइट पर संपूर्ण सी प्रोग्रामिंग सीख सकते हैं। &lt;/p&gt;

&lt;p&gt;इसलिए अपना समय बर्बाद न करें और आज ही C भाषा सीखना शुरू करें, यहाँ संपूर्ण C पाठ्यक्रम लिंक हैं:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.tutorialinhindi.com/c-language-tutorial-hindi/"&gt;Learn C Tutorial in Hindi&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;केवल सी भाषा ही नहीं, आप कई प्रोग्रामिंग भाषाएं मुफ्त में सीख सकते हैं। अगर आप &lt;a href="https://www.tutorialinhindi.com/career/web-developer-hindi/"&gt;वेब डेवलपर&lt;/a&gt; बनना चाहते हैं तो आप &lt;a href="https://www.tutorialinhindi.com/html-tutorial-hindi/"&gt;HTML&lt;/a&gt;, &lt;a href="https://www.tutorialinhindi.com/css-tutorial-hindi/"&gt;CSS&lt;/a&gt;, &lt;a href="https://www.tutorialinhindi.com/javascript-tutorial-hindi/"&gt;JavaScript&lt;/a&gt; इत्यादि जैसे वेब विकास पाठ्यक्रम भी सीख सकते हैं।&lt;/p&gt;

&lt;p&gt;अगर आपको लगता है कि यह लेख beginners के लिए मददगार है, तो उनके साथ साझा करें। :)&lt;/p&gt;

</description>
      <category>c</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>hindi</category>
    </item>
    <item>
      <title>Raila hints at working with Mudavadi.</title>
      <author>Shanick Berick</author>
      <pubDate>Sun, 19 Dec 2021 15:17:05 +0000</pubDate>
      <link>https://dev.to/shanick_berick/raila-hints-at-working-with-mudavadi-1kgi</link>
      <guid>https://dev.to/shanick_berick/raila-hints-at-working-with-mudavadi-1kgi</guid>
      <description>&lt;p&gt;ODM Leader Raila Odinga has again hints at working with musalia Mudavadi &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7kvJzRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p2t898f854mlaz33vwr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7kvJzRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p2t898f854mlaz33vwr.jpg" alt="Image description" width="586" height="296"&gt;&lt;/a&gt;&lt;br&gt;
)_&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I made a live code editor with Vanilla Javascript?</title>
      <author>Muhammet Fatih Gul</author>
      <pubDate>Sun, 19 Dec 2021 15:17:04 +0000</pubDate>
      <link>https://dev.to/mfatihgul/how-i-made-my-own-code-editor-3ce3</link>
      <guid>https://dev.to/mfatihgul/how-i-made-my-own-code-editor-3ce3</guid>
      <description>&lt;p&gt;I'm a huge fan of Codepen and Codesandbox websites. I tried to make a website like them some times. Ofcourse they're huge. I wasn't gonna be able to make a websites like them, but i wanted to see through how the things works. This is just a beginning. I'm going to make a website to render React JS and JSX codes live next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puigM3mg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14eorath1jzr7go8r5my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puigM3mg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14eorath1jzr7go8r5my.png" alt="CodeXC Editor" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Libraries that I used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codemirror.net/"&gt;Codemirror Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Codemirror already has CDNs to import but i wanted to import it locally. If you just want to try it out, you can use CDNs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Codemirror Library --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/lib/codemirror.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/lib/codemirror.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/theme/ayu-mirage.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- MODES TO HIGHLIGHT CODES --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/mode/javascript/javascript.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/mode/css/css.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/mode/xml/xml.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ADDONS --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./Codemirror/addon/selection/active-line.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Style --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Codemirror has so many addons like folding code blocks, autocomplete, custom searching input, auto closing brackets, auto closing tags etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here is how my html look like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pane code-pane"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"html-box code-box"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"html-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        HTML
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"css-box code-box"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"css-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        CSS
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"js-box code-box"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"js-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        JS
                    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pane output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"preview"&lt;/span&gt; &lt;span class="na"&gt;frameborder=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There's two section. Bottom and top. They has pane class for the common purposes and unique classes for the differences. &lt;/p&gt;

&lt;p&gt;Top pane has html, css and js sections init and everyone has their own titles. That's it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here is my CSS codes look like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.pane&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.code-pane&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;aqua&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.output&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;aquamarine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.code-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;34%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.html-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;azure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.css-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;bisque&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.js-box&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blanchedalmond&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cadetblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.title-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3d3d3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.CodeMirror&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nf"&gt;#preview&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cadetblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;HTML, CSS and JS boxes have resize functionalities horizontally. But i didn't use any other library to make it better. I only used CSS "resize: horizontal;" to make the divs resizable. But i'm sure it wouldn't be that much hard to make it. You can just use vanilla javascript and some math to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here is my javascript file:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Code Mirror Initialization&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlCodeInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;lineNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ayu-mirage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styleActiveLine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cssCodeInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css-box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;lineNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ayu-mirage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styleActiveLine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsCodeInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js-box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;lineNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ayu-mirage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styleActiveLine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Run update() function, when the instances have change&lt;/span&gt;
&lt;span class="nx"&gt;htmlCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;cssCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cssCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;jsCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//Change iFrame when you receive changes&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;preview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preview&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;codeTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;`&lt;/span&gt;
     &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cssCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="s2"&gt;`&amp;lt;/style&amp;gt;
    &amp;lt;body&amp;gt;`&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="nx"&gt;htmlCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;`&amp;lt;script&amp;gt;`&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;jsCodeInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;/script&amp;gt;`&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;`&amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;`&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CODE TEMPLATE: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;codeTemplate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;codeTemplate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the first part. I initialized my divs to the Codemirror and give some properties. I know there's a better way to do it. Please check this out before you use this method.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kudadam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3hiy2tU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--W6_QSav0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/456090/63709007-e841-4462-8bb3-d1d775fb4777.png" alt="kudadam"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kudadam/using-multiples-instance-of-codemirror-in-a-file-5hcl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Using multiples instance of CodeMirror in a file&lt;/h2&gt;
      &lt;h3&gt;Lucretius Biah ・ Jul 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codemirror&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javasceipt&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;In the second part, I gave it "onchange" method all of the editors that I have in the page. If one of them has changed update() function will be called.&lt;/p&gt;

&lt;p&gt;".on()" method is built-in in Codemirror. So, I didn't use "addEventListener" or "onChange" property in HTML document. This is a better way I think.&lt;/p&gt;

&lt;p&gt;and finally, in the last part, I take the iframe in the html document. This function only be called when the user type something in one of the editors. &lt;/p&gt;

&lt;p&gt;I made a Code Template. So, when the user change something in one of the editors, they'll change the template and i'll write it to the iframe. &lt;/p&gt;

&lt;p&gt;That's it. Hope you like it. See you soon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mfatihgul/CodeXC---Live-Code-Editor"&gt;SEE GITHUB REPOSITORY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Done is better than perfect</title>
      <author>Nikhil Taneja</author>
      <pubDate>Sun, 19 Dec 2021 15:13:24 +0000</pubDate>
      <link>https://dev.to/itsnikhil/done-is-better-than-perfect-3non</link>
      <guid>https://dev.to/itsnikhil/done-is-better-than-perfect-3non</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;Done is better than perfect&lt;/em&gt;" is a lesson that I learned from working in a fast-paced competitive startup environment.. and agile software development in general.&lt;/p&gt;

&lt;p&gt;Every new codebase I used to touch, I could find some place where something can be improved by using a different data structure, or an algorithm, or some design pattern avoiding nested if-else, or simply abstracting big functions into smaller ones. But as when I started working on big features I came to realize this famous saying.&lt;/p&gt;

&lt;p&gt;In this article, I would like to share some of my thoughts on this ideology and hopefully give you some motivation to release your next amazing startup or project you are working on and not get yourself stuck in catch-22.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perfection"&gt;
  &lt;/a&gt;
  Perfection
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;the state or quality of being perfect&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In software development world - When you’ve developed a working product, it’s normal to take pride in its performance you’ve worked hard on it. It’s normal to want to hold off on release until it’s got &lt;em&gt;this&lt;/em&gt; feature, or &lt;em&gt;that’s&lt;/em&gt; been tweaked, or it’s gone through yet another round of testing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;a href="https://www.parkersoftware.com/blog/the-done-is-better-than-perfect-approach-to-programming/"&gt;&lt;em&gt;The ‘done is better than perfect’ approach to programming - Parker Software&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chasing-perfection"&gt;
  &lt;/a&gt;
  Chasing perfection
&lt;/h2&gt;

&lt;p&gt;If somebody asks me if the system I have developed is perfect or not? I would say comeback after couple of years and ask the same question as I cannot answer it today. Gone are the days where software was sold via floppy disk/DVDs, now software's are getting more personalized and unique to each and every customer. System once perfect needs to evolve with new requirements which one would have never anticipated while designing/developing it.&lt;/p&gt;

&lt;p&gt;Over-engineering is often identified with design changes that increase a factor of safety, add functionality, or overcome perceived design flaws that most users would accept. It can be desirable when safety or performance is critical (e.g. in aerospace vehicles and luxury road vehicles), or when extremely broad functionality is required (e.g. diagnostic and medical tools, power users of products).&lt;/p&gt;

&lt;p&gt;As a design philosophy, it is the opposite of the minimalist ethos of "less is more" (or: “worse is better”) and a disobedience of the KISS principle. &lt;em&gt;- Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's say you are a student and as an assignment your teacher asks you to submit a research report on sustainable future or solar energy before next week. If you submit your assignment after the deadline, your marks will get affected even though how in-depth you went into research analyzing sun's orientation, affect of weather, calculating perfect tilt angle, finding how much power output one solar panel can generate, finding return on investment... doing justice to the topic.&lt;/p&gt;

&lt;p&gt;Even if your teacher was generous and because of your amazing report gave you full marks. This is not always the case, imagine if this was a question part of your final exam and if you spend all the time answering it so well, you will not get enough time to answer other questions.&lt;/p&gt;

&lt;p&gt;Some might argue in the above example a short-crisp, to the point answer would have been perfect. In reality it takes a lot of good efforts, right knowledge and experience, to setup a great foundation and even then you have to adapt to changes and keep on enhancing the product.&lt;/p&gt;

&lt;p&gt;Maybe this example is not perfect, so are the projects we work on. There are memes around project requirement not being clear enough. Not everyone is building a medical device where margin of error is a difference of life and death where you have to consider using special tools like &lt;a href="https://www.ros.org/"&gt;ROS&lt;/a&gt; to control system clock and scheduler. Not every requirement is like &lt;a href="https://www.youtube.com/watch?v=eY-XHAoVEeU"&gt;The Thames Barrier must never fail. Here's why it doesn't. - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-the-balance"&gt;
  &lt;/a&gt;
  Finding the balance
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#understand-the-requirements"&gt;
  &lt;/a&gt;
  Understand the requirements
&lt;/h3&gt;

&lt;p&gt;Let's say you are working on a feature that will be very important for winter vacation season sale - Chrisman and New Year. Then this is a strict requirement which you have to follow. Christmas is always on 25th of dec. and if your feature is not ready by then business can get affected. That being said not all requirements are strict and it is important to understand them well to avoid doing unnecessary work. Writing good readable code, following coding standards (linters) and writing testcases should be part of requirements of a good tech team and should be caught in code reviews.&lt;/p&gt;

&lt;p&gt;Once I was almost about to write a wrapper library on top of RestAPIs of one of our web service. Was it part of the project requirements? - No! Were estimates taken in account for writing the library? - No!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#know-your-customer"&gt;
  &lt;/a&gt;
  Know your customer
&lt;/h3&gt;

&lt;p&gt;Your customer is the consumer of the features you build. You should be aware of the impact it can have on them not just positively but repercussion if anything goes wrong. This provides sense of responsibility you have, skipping on testcases and not doing non-functional requirements testing reduces your confidence so it is advised to given them attention. Trust me, it makes you happy seeing your customers are happy.&lt;/p&gt;

&lt;p&gt;Will customer's care about the technology used? - No/maybe! Will customers have a bad experience if they are not able to login? - Definitely!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-your-expertise"&gt;
  &lt;/a&gt;
  What are your expertise
&lt;/h3&gt;

&lt;p&gt;One cannot have knowledge of everything. You should know your boundaries and capabilities. Technology evolves rapidly and it's very hard to keep up-to date with everything. This not only restricted to knowledge of a particular programming-language/framework.&lt;/p&gt;

&lt;p&gt;If you are asked to make changes in a totally new codebase, You are no longer an expert and it's your responsibility to get enough context/knowledge from the right person to do full justice to the requirements and communicate this thing clearly to your manager.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#engineering-process-is-a-loop"&gt;
  &lt;/a&gt;
  Engineering process is a loop
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wE5MpmXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fi.stack.imgur.com%252FKdKKT.png%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wE5MpmXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fi.stack.imgur.com%252FKdKKT.png%26f%3D1%26nofb%3D1" alt="Is the following diagrams correct for RAD and Agile ..." width="487" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We(Software engineers) have luxury to ship the Minimal Viable Product (MVP) and constantly evolve it incrementally. We do not need to know the final state of the project in the beginning. We should be able to collect necessary feedback and act upon data what works and what does not. This also applies to issues, gives us ability to accept stop gaps while actual fix gets released in next sprint.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good read:&lt;/em&gt; &lt;a href="https://zerodha.tech/blog/scaling-with-common-sense/"&gt;&lt;em&gt;Scaling with common sense - Zerodha Tech Blog&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>computerscience</category>
      <category>startup</category>
    </item>
  </channel>
</rss>
