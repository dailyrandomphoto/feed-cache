<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Do it in Keras! - Hacktoberfest</title>
      <author>Sebastian Ponce</author>
      <pubDate>Sun, 03 Oct 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/sebaspv/do-it-in-keras-hacktoberfest-4g2h</link>
      <guid>https://dev.to/sebaspv/do-it-in-keras-hacktoberfest-4g2h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#modern-deep-learning-architectures-and-tasks-all-implemented-in-keras"&gt;
  &lt;/a&gt;
  Modern deep learning architectures and tasks, all implemented in Keras
&lt;/h3&gt;

&lt;p&gt;Have you ever been in a situation where you scroll through forums, reddit, journal posts or even 5 year old github repos trying to find an example for a Deep Learning task that you want to implement using Python and Keras?&lt;/p&gt;

&lt;p&gt;Is your code not working because the original code was outdated?&lt;/p&gt;

&lt;p&gt;Are you tired of always seeing the same benchmark datasets without the possibility of implementing your own?&lt;/p&gt;

&lt;p&gt;Do you like to contribute to the spread of Deep Learning and want to implement your own examples in Keras?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, then Do it in Keras is for you!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-do-it-in-keras"&gt;
  &lt;/a&gt;
  What is Do it in Keras?
&lt;/h3&gt;

&lt;p&gt;Do it in Keras is a collection of easy to use Jupyter Notebooks hosted in Github which have various implementations of Deep Learning with custom datasets and future exercises for you to learn the most popular Deep Learning library: Keras.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-contribute-to-it"&gt;
  &lt;/a&gt;
  How do I contribute to it?
&lt;/h3&gt;

&lt;p&gt;Do it in Keras is now participating in Hacktoberfest, so you can not only learn a lot more about Keras and Open Source, but you can also win a lot of cool prizes!&lt;/p&gt;

&lt;p&gt;If you've never heard about Hacktoberfest, you can check it out &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To contribute to Do it in Keras, you only need to make a pull request on the official &lt;a href="https://github.com/sebaspv/do-it-in-keras"&gt;Do it in Keras repository&lt;/a&gt;. Anything related to Deep Learning with Keras helps, and you can also upload your own implementation of a Deep Learning task.&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>jupyter</category>
      <category>machinelearning</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>AWS Database Services Fundamentals</title>
      <author>John Bulla</author>
      <pubDate>Sun, 03 Oct 2021 21:14:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-database-services-fundamentals-4ml6</link>
      <guid>https://dev.to/aws-builders/aws-database-services-fundamentals-4ml6</guid>
      <description>&lt;p&gt;A database is a collection of information that is organized in a way that can be easily accessed, managed, and updated. Computer databases often contain record sets or data files, which contain information about sales transactions or interactions with specific customers. Databases are important back-end systems used to store, manage, update, and analyze data for all types of applications, from small back-office systems to consumer and mobile web applications on a global scale. Most databases use structured query language (SQL) to write and query data.&lt;/p&gt;

&lt;p&gt;Databases have evolved dramatically since their inception in the early 1960s. Navigation databases, such as the hierarchical database (which was based on a tree-like model and only allowed a one-to-many relationship), and the network database (a more flexible model that allowed multiple relationships), were the original systems used to store and manipulate data. Although simple, these early systems were inflexible. In the 1980s, relational databases became popular, followed by object-oriented databases in the 1990s. More recently, NoSQL databases emergedin response to the growth of the internet and the need for greater speed and processing of unstructured data. Today, the cloud database and separate databases are opening up new ways as to how to collect, store, manage and use the data.&lt;/p&gt;

&lt;p&gt;According to their type, the databases can be classified as relational and non-relational databases. Relational databases became popular in the eighties, the elements of a relational database are organized as a set of tables with columns and rows. Relational database technology provides the most efficient and flexible way to access structured information. NoSQL or non-relational databases allow unstructured and semi-structured data to be stored and manipulated, unlike a relational database, which defines how all the data inserted into the database should be composed. NoSQL databases became popular as web applications became more common and complex.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2zU85A36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h39g7ktn3ei7tw88d50k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zU85A36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h39g7ktn3ei7tw88d50k.png" alt="Database Relational and Non-Relational"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The databases can also be classified according to their type of workload into operational databases (OLTP - Online Transaction Processing) or analytical databases (OLAP - Online Analytical Processing). OLTP systems are databases oriented to transaction processing. A transaction generates an atomic process (which must be validated with a commit, or invalidated with a rollback), and that may involve data insertion, modification and deletion operations. The transactional process is typical of operational databases. OLAP systems are databases oriented to analytical processing. This analysis usually involves, generally, the reading of large amounts of data to get to extract some type of useful information that is helpful for decision making, such as sales trends, consumer behavior patterns, elaboration of complex reports, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkQoz7YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o547ifm4v97f5zxd97bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkQoz7YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o547ifm4v97f5zxd97bu.png" alt="Database OLTP and OLAP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS offers a wide variety of custom databases for your specific application use cases. Our fully managed database services include relational databases for transactional applications, non-relational databases for Internet-scale applications, a data warehouse for analytics, an in-memory database for caching and workloads in real time, and a graphs database to create applications with strongly connected data. With AWS Database Migration Service, migrating existing databases to AWS is easy and cost-effective.&lt;/p&gt;

&lt;p&gt;AWS Databases were designed from the ground up to support the scale, performance, and availability demands of modern globally distributed applications with microservices architectures.&lt;/p&gt;

&lt;p&gt;AWS offers 15 database engines and continues to grow, including relational and non-relational types for every application need. The types of AWS databases are described below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relational&lt;/strong&gt;&lt;br&gt;
Description: Relational databases store data with predefined schemas and relationships between them. These databases are designed to support ACID transactions, and maintain referential integrity and strong data consistency.&lt;/p&gt;

&lt;p&gt;Use cases: Aplicaciones tradicionales, ERP, CRM y e-commerce&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/rds/aurora"&gt;Amazon Aurora&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/rds/"&gt;Amazon RDS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/redshift/"&gt;Amazon Redshift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key-value&lt;/strong&gt;&lt;br&gt;
Description: Key-value databases are optimized for common access patterns, typically to store and retrieve large volumes of data. These databases deliver quick response times, even in extreme volumes of concurrent requests.&lt;/p&gt;

&lt;p&gt;Use cases: High-traffic web apps, e-commerce systems, gaming applications&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In-memory&lt;/strong&gt;&lt;br&gt;
Description: In-memory databases are used for applications that require real-time access to data. By storing data directly in memory, these databases deliver microsecond latency to applications for whom millisecond latency is not enough.&lt;/p&gt;

&lt;p&gt;Use cases: Caching, session management, gaming leaderboards, geospatial applications&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/elasticache/memcached/"&gt;Amazon ElastiCache for Memcached&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/elasticache/redis/"&gt;Amazon ElastiCache for Redis&lt;/a&gt;, &lt;a href="https://aws.amazon.com/es/memorydb"&gt;Amazon MemoryDB for Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Document&lt;/strong&gt;&lt;br&gt;
Description: A document database is designed to store semistructured data as JSON-like documents. These databases help developers build and update applications quickly.&lt;/p&gt;

&lt;p&gt;Use cases: Content management, catalogs, user profiles&lt;br&gt;
AWS service: &lt;a href="https://aws.amazon.com/es/documentdb/"&gt;Amazon DocumentDB (with MongoDB compatibility)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wide column&lt;/strong&gt;&lt;br&gt;
Description: A wide column store is a type of NoSQL database. It uses tables, rows, and columns, but unlike a relational database, the names and format of the columns can vary from row to row in the same table.&lt;/p&gt;

&lt;p&gt;Use cases: High scale industrial apps for equipment maintenance, fleet management, and route optimization&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/keyspaces/"&gt;Amazon Keyspaces (for Apache Cassandra)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graph&lt;/strong&gt;&lt;br&gt;
Description: Graph databases are for applications that need to navigate and query millions of relationships between highly connected graph datasets with millisecond latency at large scale.&lt;/p&gt;

&lt;p&gt;Use cases: Fraud detection, social networking, recommendation engines&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/neptune/?c=db&amp;amp;sec=srv"&gt;Amazon Neptune&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time series&lt;/strong&gt;&lt;br&gt;
Description: Time-series databases efficiently collect, synthesize, and derive insights from data that changes over time and with queries spanning time intervals.&lt;/p&gt;

&lt;p&gt;Use cases: IoT applications, DevOps, industrial telemetry&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a href="https://aws.amazon.com/es/timestream/"&gt;Amazon Timestream&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ledger&lt;/strong&gt;&lt;br&gt;
Description: Systems of record, supply chain, registrations, banking transactions&lt;/p&gt;

&lt;p&gt;Use cases: Systems of record, supply chain, registrations, banking transactions&lt;/p&gt;

&lt;p&gt;AWS service: &lt;a&gt;Amazon QLDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=AbhnNqlOYWY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOzs18B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/AbhnNqlOYWY/0.jpg" alt="AWS Databases: Break Free to Save, Grow, and Innovate Faster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy for selecting a database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The optimal database solution for a system varies depending on the requirements for availability, consistency, partition tolerance, latency, durability, scalability, and query capacity. Many systems use different database solutions for various subsystems and allow different features to improve performance. Selecting the wrong database features and solutions can result in lower performance efficiencies.&lt;/p&gt;

&lt;p&gt;When selecting a database service, consider the dimensions and choose the one that best suits each of your requirements and components of your application and architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Leader in Gartner's New Magic Quadrant&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LIndustry analyst firm Gartner has published a new report, the &lt;a href="https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cdbms-2020-learn.html?trk=el_a134p000006gMUAAA2&amp;amp;trkCampaign=WW-FY20-AR-104-gartner-mq-cdbms_Download_Report&amp;amp;sc_channel=el&amp;amp;sc_campaign=DB_Blog&amp;amp;sc_outcome=Global_Marketing_Campaigns&amp;amp;sc_geo=NAMER&amp;amp;sc_country=mult"&gt;Magic Quadrant for Cloud Database Management Systems&lt;/a&gt;, naming AWS as a Leader and placing AWS highest among the 16 vendors evaluated for “Ability to Execute.” This report is Gartner’s first database and analytics report exclusively evaluating cloud-based services, doubling down on their assertion in a June 2019 report that The Future of the DBMS Market is Cloud. More info &lt;a href="https://aws.amazon.com/es/blogs/database/aws-named-a-leader-in-new-gartner-magic-quadrant-report-evaluating-cloud-database-and-analytics-services/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6fKFtOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7a292dtyua8grl153ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6fKFtOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7a292dtyua8grl153ur.png" alt="Magic Quadrant for Cloud Database Management Systems"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Databases free tier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;he AWS Free Tier offers users an opportunity to explore products for free, with offers including products that are always free, free for 12 months, and short-term free trials. AWS offers the widest selection of purpose-built databases, allowing you to save, grow, and innovate faster.&lt;/p&gt;

&lt;p&gt;Build database solutions using &lt;a href="https://aws.amazon.com/es/free/database/"&gt;these product offerings&lt;/a&gt; of the AWS Free Tier.&lt;/p&gt;

&lt;p&gt;To obtain updated information on AWS database services, I invite you to follow their page “&lt;a href="https://www.linkedin.com/showcase/aws-databases/"&gt;AWS Databases &amp;amp; Analytics&lt;/a&gt;” on Linkedin.&lt;/p&gt;

&lt;p&gt;Later, I will delve into each of the AWS database services. I hope this information is useful !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow us:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wiki-cloud.co/"&gt;Wiki Cloud&lt;/a&gt;, &lt;a href="https://www.facebook.com/groups/wikicloud"&gt;Facebook&lt;/a&gt;, &lt;a href="https://twitter.com/johnbulla"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/groups/12529878"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://www.youtube.com/user/johnbulla"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>cloud</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Dyslexia Awareness Week</title>
      <author>Terry Child</author>
      <pubDate>Sun, 03 Oct 2021 20:47:37 +0000</pubDate>
      <link>https://dev.to/terrychild/dyslexia-awareness-week-2klp</link>
      <guid>https://dev.to/terrychild/dyslexia-awareness-week-2klp</guid>
      <description>&lt;p&gt;October the 4th to 10th is Dyslexia Awareness Week, a time to raise awareness and understanding of dyslexia and how it affects the people who have it.  It is believed up to 10% of people experience dyslexia, I’m one of them.  I would like to share with you some of my thoughts on the subject, some of the challenges I experience and the incredible gift I consider dyslexia to be.&lt;/p&gt;

&lt;p&gt;I’d like to start by explaining how I was tested for dyslexia, it gives some insight into what educational psychologists are looking for and what dyslexia is. The main part of the evaluation process consists of a series of short tests covering all kinds of areas.  As you might expect there are reading, writing and spelling tests.  There are also comprehension, logical reasoning, spatial awareness and memory tests, the list goes on.  It’s a complete workout for the brain and the whole process takes a few hours.&lt;/p&gt;

&lt;p&gt;Each test starts easy (spell "cat" for example), and gets progressively more difficult (spell "dyslexia") before you fail or run out of time.  Some tests are repeated using different communication styles, for example the spelling test will be done as a written test and then as an oral test.&lt;/p&gt;

&lt;p&gt;The results for each test are compared to the national averages to see which percentile they scored in.  Scoring in the 50th percentile means half the nation scored better, half worse, in other words a perfectly average score.&lt;/p&gt;

&lt;p&gt;The psychologist is interested in the differences in the percentiles.  Everyone has their strengths and will score higher on some tests than others, for most people the spread should be relatively small, within 10 to 15 points of each other.  When a person has a significantly lower score for some tests compared to others, this suggests a specific learning difficulty.  When those lower scores are for reading, writing, short term memory etc this is called dyslexia, which was the case for me.&lt;/p&gt;

&lt;p&gt;There is more to the evaluation than this, but an important point is that people who experience dyslexia have notably below average ability when it comes to reading and writing, but often above average skills when it comes to creative thinking, logical analysis and problem solving.&lt;/p&gt;

&lt;p&gt;Not everyone who is diagnosed with dyslexia has the same difficulties.  My particular brand of dyslexia manifests itself in a few ways, but I'm lucky as my symptoms just tend to slow me down.  For the more serious cases it can be debilitating where words and letters are hard to even focus on let alone read.&lt;/p&gt;

&lt;p&gt;I have big problems with vowels, they all sound the same to me and when spelling I know that words are supposed to have vowels, I’m just never sure which ones and where they go.  This has become less of a problem over the years as spell checkers have gotten smarter.  For anything important I always get someone to proofread my work.  Mistakes slip through though, for the longest time an application I developed had a view titled “pepole”.&lt;/p&gt;

&lt;p&gt;I'll often transpose numbers.  I almost missed my driving test because I thought it was on the "23rd of the 4th [April]", but it was actually on the "24th of the 3rd [March]".  To avoid this problem I’ll use copy and paste wherever I can, especially if that number has something to do with money.&lt;/p&gt;

&lt;p&gt;The most embarrassing effect is my inability to retain abstract details like names.  I’m not exaggerating to say that when meeting a new person I can remember their name for only a few seconds.  For meetings the key here is to be prepared, if I’ve already studied the invite list I have a better chance to remember as I’m matching faces to names.  In most other situations I simply hope I don’t need to use the person’s name until I’ve had time to look it up and relearn it.&lt;/p&gt;

&lt;p&gt;Reading takes longer than average, writing takes way longer.  Writing documentation, specifications etc is something I have to psych myself up for.  The task this affects me the most often however is reading and replying to emails.  Emails are relentless and I have to put aside a good portion of my day to deal with them.  If an email did not ask me a question and therefore does not require a response, I don’t respond, this saves me a lot of stress.  Otherwise I’ve developed an infamously terse email style, sometimes “Done.” is all that needs to be said.&lt;/p&gt;

&lt;p&gt;In contrast to the one word responses, when asked a technical question that requires a detailed response, I labour over the email often writing a few drafts as I try to get the level of detail correct and convince myself what I’ve written is understandable.&lt;/p&gt;

&lt;p&gt;My dyslexia is primarily a communication problem, my analytical reasoning is good, something to be proud of.  I’m just never sure the information arrives correctly and I’m not sure the messages I deliver are understood.  This is why I agonise over emails.  It’s also why in face to face communication I will initially start quietly absorbing as much information as I can, re-organise that information in my own overly logical order and repeat it back out to ensure I understood it.  Often because I’m not sure I said it correctly I repeat myself but with a slightly different structure.&lt;/p&gt;

&lt;p&gt;My coping mechanism for dealing with dyslexia turns out to be a really useful skill in the business world.  My job is to build applications that support business processes.  This requires really understanding the process, breaking down the sometimes messy analog real world steps into logical, predictable, repeatable, programmable steps we can turn into a digital application.  This comes very naturally to me, it’s the same process I use to assimilate information and I’ve been doing it my entire life.&lt;/p&gt;

&lt;p&gt;It is not original advice to play to your strengths and mitigate your weaknesses.  I strongly believe that being diagnosed with dyslexia has given me an extra advantage in life as I know with some confidence what my strengths are and where I need to take special care.  I’ve used this information to pick a career path that has allowed me to excel.  I know which development areas I need to focus on and have been given expert advice on how to improve.&lt;/p&gt;

&lt;p&gt;I’m not the only person in the DEV community with dyslexia, given the nature of our work/hobby I am willing to bet it’s higher than the 10% average.  Others have written on this &lt;a href="https://dev.to/search?q=dyslexia"&gt;site&lt;/a&gt; about how they cope with dyslexia, I’ve found their stories encouraging and their suggestions useful.  I’m keen to hear your thoughts in the comments, I’m especially eager to swap coping strategies.  The reality is they work for everyone, not just people diagnosed with dyslexia.&lt;/p&gt;

&lt;p&gt;Most importantly if you are worried about a child you think might be struggling with dyslexia, there is no need to worry, dyslexia is increasingly well understood and there is a lot of help available.  Search for &lt;a href="https://www.google.com/search?q=dyslexia+awareness+week"&gt;Dyslexia Awareness Week&lt;/a&gt; to find events that may be happening local to you.  Alternatively schools will know how to proceed.  Besides they are in great company; Jamie Oliver, Keira Knightley, Richard Branson, Whoopi Goldberg, Steve Jobs, Gwen Stefani and Albert Einstein are all people who didn’t let dyslexia stop them from achieving great things.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Side Project Journey Part 1 – Initial Design</title>
      <author>Jon Deavers</author>
      <pubDate>Sun, 03 Oct 2021 20:26:18 +0000</pubDate>
      <link>https://dev.to/lucsedirae/side-project-journey-part-1-initial-design-4be1</link>
      <guid>https://dev.to/lucsedirae/side-project-journey-part-1-initial-design-4be1</guid>
      <description>&lt;p&gt;As a web developer, I am constantly looking to improve my skills. I’ve completed a full stack boot camp, followed dozens of tutorials, and built my own projects from scratch. As my skills have developed certain things have come into focus. Firstly, I know where my strengths lie; organizing code in a readable and maintainable codebase is a borderline obsession for me. I like small, modular components that keep individual files to a manageable size. React is a framework I have genuinely come to love. It has provided me with a much greater competency in “vanilla” JavaScript and a practical, consistent path to rendering my vision in the browser. Node.js was a struggle to get comfortable with at first, but building simple API’s has given me a much deeper understanding of how the web works as a synergistic system of front-end views and back-end models and controllers.&lt;/p&gt;

&lt;p&gt;I am also more aware of my weaknesses. At the top of that list is as a designer. Like many developers, I like to explore new ideas and tools but sometimes that case of “shiny object syndrome” will keep me from completing or even making progress on a project. Often I will start a project in the code editor. This isn’t always a bad idea, but it does lead to more frustration than would be necessary had I started with a design and “roadmap” through the development process. My dev directory is full of abandoned, half-baked projects.&lt;/p&gt;

&lt;p&gt;After taking some time to analyze these strengths and weaknesses, I decided to try and shore up the weaker parts of my skill set and start a new project where I follow a specific development process. I also wanted to document this process in hopes that it will keep me accountable to finishing the project and hopefully be of value to others.&lt;/p&gt;

&lt;p&gt;Here’s my plan:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-name"&gt;
  &lt;/a&gt;
  Project Name
&lt;/h2&gt;

&lt;p&gt;Bioledger – A biometric tracking application&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack-tools"&gt;
  &lt;/a&gt;
  Tech Stack / Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Figma – For designing the UI based on hand sketches&lt;/li&gt;
&lt;li&gt;Node JS – JavaScript runtime for web server&lt;/li&gt;
&lt;li&gt;Express – Node framework for building a web server&lt;/li&gt;
&lt;li&gt;MongoDB – Relational database for data storage&lt;/li&gt;
&lt;li&gt;Mongoose – MongoDB framework for building REST API&lt;/li&gt;
&lt;li&gt;React – UI framework for front-end client&lt;/li&gt;
&lt;li&gt;Next JS – React toolkit for handling routing, image optimization, and server-side rendering of static data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-story"&gt;
  &lt;/a&gt;
  User Story
&lt;/h2&gt;

&lt;p&gt;As a user working to become healthier, I want an application where I can log in daily and easily track my weight and blood pressure readings. I also want to see my progress displayed in easy-to-read charts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-process"&gt;
  &lt;/a&gt;
  Development Process
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design product

&lt;ol&gt;
&lt;li&gt;Sketch out the UI on paper including any necessary elements and a basic navigation flow&lt;/li&gt;
&lt;li&gt;Use the sketches as a basis for a more detailed design on a digital design tool (i.e. Figma)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Develop back end

&lt;ol&gt;
&lt;li&gt;Using the designs developed in step 1, map out the data structure for the necessary mongoose Schema(s)&lt;/li&gt;
&lt;li&gt;Build a node.js express server that handles an API for the MongoDB database using Schemas and controllers informed by the previous step&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Develop front-end client

&lt;ol&gt;
&lt;li&gt;Utilizing Next JS, bootstrap a client and add necessary pages, fields and layout components&lt;/li&gt;
&lt;li&gt;Style front-end using CSS modules&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#initial-sketches"&gt;
  &lt;/a&gt;
  Initial Sketches
&lt;/h2&gt;

&lt;p&gt;There’s a reason I like to be creative using digital tools. I am certainly not a visual artist. However, I’ve been following a design course on Udemy that recommends beginning the design process with sketches and so I’m following their advice. Below are  my (very) rough drafts of the UI for this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7oq4vVbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qdhq19ae9paxqm5d92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7oq4vVbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3qdhq19ae9paxqm5d92.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5EIXwSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgrj1rsa178i8k2id50k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5EIXwSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgrj1rsa178i8k2id50k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process is subject to change. I’ll do my best to explain my thoughts as I work through the steps and if you have any suggestions, feedback, or questions please connect with me on Twitter and I’d be grateful for the advice and be happy to help.&lt;/p&gt;

&lt;p&gt;Originally published on my blog at &lt;a href="https://jondeavers.net/posts/side-project-journey-part-1-initial-design"&gt;jondeavers.net&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Start Using Tailwind CSS Right Now</title>
      <author>Shubham Patil</author>
      <pubDate>Sun, 03 Oct 2021 20:20:28 +0000</pubDate>
      <link>https://dev.to/shubhampatilsd/start-using-tailwind-css-right-now-3pck</link>
      <guid>https://dev.to/shubhampatilsd/start-using-tailwind-css-right-now-3pck</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS for the past 4 months now, and I can confidently say that it's much much MUCH better than plain CSS.&lt;/p&gt;

&lt;p&gt;If you didn't know, Tailwind CSS basically provides utility classes that can be used to style your HTML. Think of it as Bootstrap but with much more freedom. Instead of being stuck to a certain design, Tailwind CSS gives you the ability to make your own. Although it does have a design system, it is pretty subtle compared to Bootstrap, while saving you time from creating a design system from scratch like with plain old CSS.&lt;/p&gt;

&lt;p&gt;You might be confused so let me give you an example. To create a 4rem margin above your element in CSS, you would do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then your HTML would look like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"element"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, with Tailwind CSS, those lines of CSS get incorporated into the class of the HTML element, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-16"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;mt-16&lt;/code&gt; stands for &lt;code&gt;margin-top: 4rem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This leads me to my first point: creating an entire design system (including spacing and classes) can be very time-consuming and unproductive. Tailwind CSS provides a solution to this problem by providing spacing, color, responsive and basic animation classes, that act as substitute for actual CSS.&lt;/p&gt;

&lt;p&gt;For example, for spinning animation, all you need is the class name &lt;code&gt;animate-spin&lt;/code&gt;. The implementation for that would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"animate-spin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you have a spinning element now!&lt;/p&gt;

&lt;p&gt;The color system Tailwind has is fantastic for small projects in which you don't want to create a color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNIC7T_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc45w79u2m02d31r2zxm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNIC7T_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc45w79u2m02d31r2zxm.png" alt="List of Tailwind Colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The colors that Tailwind offers are not just CSS colors with fancy names, they are much more appealing.&lt;/p&gt;

&lt;p&gt;This is Tailwind's most vibrant blue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYDtbwME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibobyql8brukpc5jxgga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYDtbwME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibobyql8brukpc5jxgga.png" alt="Tailwind Blue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then this is CSS's most vibrant blue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GrgIXaq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nf30mh3sbg8iemh6j7qq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GrgIXaq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nf30mh3sbg8iemh6j7qq.png" alt="CSS Blue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is noticeable that Tailwind's colors are much more soothing and are less harsh than the base CSS colors.&lt;/p&gt;

&lt;p&gt;Tailwind also has a variety of other classes that shorten the amount of styling you need to write. For example, pseudo-selectors like &lt;code&gt;hover:&lt;/code&gt;, are basically condensed into&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:whatever-you-want-to-do-on-hover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tailwind also has a bit of sorcery when it comes to responsive layout. Tailwind uses pre-set (by default) pixel values for certain breakpoints. For example, there is an &lt;code&gt;sm&lt;/code&gt; breakpoint which is a screen width of 640px. If you're confused, just think of these breakpoints as media queries in CSS.&lt;/p&gt;

&lt;p&gt;To use these breakpoints, just use &lt;code&gt;breakpointName:&lt;/code&gt;. The &lt;code&gt;breakpointName&lt;/code&gt; is one of the values below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAtdYZGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giyall93cfl1qiwe4tfd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAtdYZGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giyall93cfl1qiwe4tfd.png" alt="Breakpoint measures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Say that you wanted to hide a &lt;code&gt;div&lt;/code&gt; on smaller screens for a responsive layout and have it shown as flex on screens bigger than 768px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden md:flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the HTML above, it basically says to "Hide everything below the &lt;code&gt;md&lt;/code&gt; breakpoint, and everything above the &lt;code&gt;md&lt;/code&gt; breakpoint should be shown as &lt;code&gt;flex&lt;/code&gt;". (In this case, &lt;code&gt;flex&lt;/code&gt; = &lt;code&gt;display: flex;&lt;/code&gt; in normal CSS).&lt;/p&gt;

&lt;p&gt;Tailwind also has a lot customization options. Just hop into the &lt;code&gt;tailwind.config.js&lt;/code&gt; and you have a bunch of options to customize breakpoints and other colors and stuff.&lt;/p&gt;

&lt;p&gt;However, Tailwind is not without its weak points. First let's talk about how bloated the code looks after applying these styles. &lt;/p&gt;

&lt;p&gt;Just take a look at this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agloxdm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3x7191eepmtnhdhvgs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agloxdm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3x7191eepmtnhdhvgs2.png" alt="Spaghetti HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted four buttons, you would have to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue rounded-md shadow-md px-2 py-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue rounded-md shadow-md px-2 py-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue rounded-md shadow-md px-2 py-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue rounded-md shadow-md px-2 py-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty repetitive right? Well, this can be solved if you use a JavaScript framework that supports the creation of components, like React, Vue, Angular, and Svelte (which is loved by a lot of developers due to its simplicity).&lt;/p&gt;

&lt;p&gt;Another option to shorten the class name is to use &lt;code&gt;@apply&lt;/code&gt; in the accompanying CSS file that Tailwind needs to apply the styles. More information about the applying concept can be found &lt;a href="https://tailwindcss.com/docs/functions-and-directives#apply"&gt;on their website&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The same example of that button class name would be condensed to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-blue&lt;/span&gt; &lt;span class="err"&gt;rounded-md&lt;/span&gt; &lt;span class="err"&gt;shadow-md&lt;/span&gt; &lt;span class="err"&gt;px-2&lt;/span&gt; &lt;span class="err"&gt;py-1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and your button would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a while, Tailwind becomes second nature, and you start to know exactly what to type out. This can be challenging to you if you're new to Tailwind as you think you have to memorize all the classes. Don't do this to yourself; it's like subconsciously knowing the class for the job. After a while, you simply gain the sense of which utilities to use and when to use them. Also, if you need any help, &lt;a href="https://tailwindcss.com"&gt;Tailwind's website&lt;/a&gt; is always there to assist you.&lt;/p&gt;

&lt;p&gt;If you're interested, check out &lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt; to view the documentation on setting it up with frameworks like NextJS and even CDN through your HTML.&lt;/p&gt;

&lt;p&gt;That's all about Tailwind! As I've stated before, do check the website for more help on specific topics like, for example, CSS grid and other utilities. If you enjoyed this post, there are 3 buttons on the left side of this article for your clicking pleasure and a comment section awaiting your input. If you didn't like this article, those buttons are still open, ready to be clicked 🙃.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>My Simple Checklist For Well Tested React Components</title>
      <author>Chak Shun Yu</author>
      <pubDate>Sun, 03 Oct 2021 20:15:56 +0000</pubDate>
      <link>https://dev.to/keraito/my-simple-checklist-for-well-tested-react-components-4d4a</link>
      <guid>https://dev.to/keraito/my-simple-checklist-for-well-tested-react-components-4d4a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is part of &lt;a href="https://www.getrevue.co/profile/chakshunyu"&gt;Uncommon React&lt;/a&gt;, a newsletter focused on helping you become a better React developer by focusing on the less commonly discussed topics, like testing, readability, and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Testing is one of the most important activities in software development and React development is no exception to this. Unfortunately, software testing itself is a very overlooked and neglected topic. More often than not, implementing tests is an afterthought and developers are only willing to spend the least amount of time and effort on it. The results are low-quality tests that don't provide any confidence in our software, are meaningless, and are only introducing noise to the codebase.&lt;/p&gt;

&lt;p&gt;Proper software testing is a very difficult topic, even more than software development itself. With software development, the beginning and the end are clearly defined. But for software testing, this is not the case. There is no clear path that you can take every time to test your code. It's different every time based on the feature, context, and implementation.&lt;/p&gt;

&lt;p&gt;Over the years, I've had my fair share of struggles and difficulties with it. For a very long time, I was writing tests for the sake of writing tests. Just before opening a Merge Request (MR), I would remember that I had to write tests. I would mindlessly copy over the structure from other existing tests and adjust it towards my code. Minimal effort for maximum results, kind of.&lt;/p&gt;

&lt;p&gt;The problem was that the resulting tests were far from decent quality, let alone good quality. So often did I think after shipping a feature that it was implemented and tested very well, but so often have bugs been reported in those features. The problem was that I always tested the wrong aspects, tested in the wrong context, or didn't know what to test specifically.&lt;/p&gt;

&lt;p&gt;After taking this topic more serious, one of the habits that I've picked up is always going through a testing checklist of topics that I try to cover when testing React components. This article will share that testing checklist, elaborate on the topics, and can help you get through testing your React components easier, create a checklist of your own, and ensure higher quality React code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#user-interactions"&gt;
  &lt;/a&gt;
  User Interactions
&lt;/h2&gt;

&lt;p&gt;The most important things to tests for React components are user interactions. In the end, React development is a form of web development. All the web applications that we create are intended to be used by customers, clients, and users. The most important aspect for all of these user audiences is the interactivity of the application. Without interactivity, the web application is a static website and will hold little value to its users. &lt;/p&gt;

&lt;p&gt;When verifying user interactions, it's important to determine what the prerequisites, the specific interaction, and the expected behaviour are. That will be the bread-and-butter layout for most of your tests. First, you set up the test in an environment that can trigger the interaction. Then, you mimic the user interaction. Lastly, you verify that it leads to the expected behaviour.&lt;/p&gt;

&lt;p&gt;Every part of this process is crucial in making sure that the tests are useful, meaningful, and reliable. Every scenario will require different answers and different implementations, especially in regards to how to verify the expected behaviour. There are also many ways to implements these kinds of tests, like unit, behaviour, or e2e tests, and different tools, like Enzyme, React Testing Library, Jest, Jasmine, and more. Going over all of these will be a book on its own, but for now, the most important aspect is to start documenting user interactions in tests.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-manager-requirements"&gt;
  &lt;/a&gt;
  Product Manager Requirements
&lt;/h2&gt;

&lt;p&gt;After user interactions, the second most important aspect of any new feature is the requirements from the product manager. In the end, we're writing code and creating software for a particular audience. The party that is responsible for being in contact with that audience, hearing their voice, and managing users' requests is the product manager of your team.&lt;/p&gt;

&lt;p&gt;Verifying their requirements are satisfied is equally, if not even more, important than possible user interactions. In the end, the product manager will have (hopefully) thought out every aspect there is to a feature and provide you with a list of requirements. The most straightforward way to translate those into tests is by creating a test for every single requirement.&lt;/p&gt;

&lt;p&gt;Ultimately, the requirements are like a checklist for when your feature is completed. Turning those into tests doesn't only verify that they are satisfied, but also lays a foundation of stability, documentation, and confidence for future developers to maintain and work with it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#internal-components-and-utility-functions"&gt;
  &lt;/a&gt;
  Internal Components And Utility Functions
&lt;/h2&gt;

&lt;p&gt;Most of the time, our focus for testing is on the external users of our code like end-users, clients, or even product managers. Similarly, most of the topics in this article are also geared towards that audience type. But when writing code, there is another type of audience that we should consider, namely other developers.&lt;/p&gt;

&lt;p&gt;When performing React development, not all the code will directly affect the application as is presented to the end-user. React development also involves code like internal components and utility functions which are created for other developers to use. But to use them properly, they need to understand them.&lt;/p&gt;

&lt;p&gt;There are different ways to document the usage, input, and appropriate results of this internal code, but one of the best ways is using tests. Documenting internal components and utility functions in tests immediately gives an example of how to use them, provides information on what to provide to them, and what the expected behaviour is.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backwards-compatibility-features"&gt;
  &lt;/a&gt;
  Backwards Compatibility Features
&lt;/h2&gt;

&lt;p&gt;From a client's perspective, especially when your product is released regularly, backwards compatibility is an important aspect. In frontend development, we have a similar thing regarding the dependencies that we use. For the user, being able to upgrade towards newer versions of a dependency or application can be a crucial factor in deciding whether to upgrade, migrate and adopt or not.&lt;/p&gt;

&lt;p&gt;Based on personal experience, I either didn't come across this particular topic a lot or just never paid attention to it. Until my most recent job where we're shipping widgets using React regularly. One of the most important topics of discussion is whether a new version contains breaking changes and is backwards compatible. &lt;/p&gt;

&lt;p&gt;Having proper tests in place to verify your existing features is a great start and can go a long way in ensuring backwards compatibility. But in frontend development, backwards compatibility isn't always only about features and interactivity. Aspects like SEO, DOM structure, and CSS class names are also part of the conversation. For these, &lt;a href="https://www.chakshunyu.com/blog/what-are-proper-use-cases-for-snapshot-testing-react-components/"&gt;snapshot tests&lt;/a&gt; are a great tool to test them with. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#regressions"&gt;
  &lt;/a&gt;
  Regressions
&lt;/h2&gt;

&lt;p&gt;So often have I seen the following scenario play out: A bug was reported by support about a feature that we shipped in the past. After a developer picked it up, it turned out that the original developer forgot a specific edge case or one of the requirements. Not a big deal, so the currently responsible developer wrote a fix and shipped the new feature. One week later, a new bug was reported in the same feature. Turned out we caused a regression. We fixed it and shipped it. Another week later, rinse and repeat.&lt;/p&gt;

&lt;p&gt;There are a lot of aspects that we can dive into in this scenario regarding testing. But the most important one, for now, is to make sure that the newly added code didn't break the old code in any way. If it did, it's called a regression. From personal experience, regressions are one of the biggest causes of frustration for developers, users, and everyone involved. &lt;/p&gt;

&lt;p&gt;To prevent regressions, you first need to have solid tests for the previous code in place. To start with that, it's important to make always add a test that covers when introducing a new feature or fixing a bug. This makes sure that it will not regress in the future.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Testing React components is one of the most important and impactful activities in React development, but unfortunately also one of the most overlooked and neglected ones. During several years of working with React, I've had my fair share of struggles and difficulties with it. After looking into this issue seriously, it became apparent that one of the problems was that I never knew what to test or how to approach it. Contrary to development, I never had a proper routine for testing.&lt;/p&gt;

&lt;p&gt;This article shared the checklist that I nowadays go through when testing React components to ensure high-quality tests and code. These include verifying product manager requirements, internal components and utility functions, backwards compatibility features, and making sure regressions don't happen. The specific tooling or tests that you should use will vary and depend on the use case, but the most important aspect is to consider these topics in the first place and create a routine for yourself.&lt;/p&gt;




&lt;p&gt;If you liked this story, consider &lt;a href="https://twitter.com/keraito"&gt;following me on Twitter&lt;/a&gt; to stay up to date with my work or checking out my newsletter &lt;a href="https://www.getrevue.co/profile/chakshunyu"&gt;Uncommon React&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>how to use build tags to control GO testing with a GitLab CI use case </title>
      <author>enbis</author>
      <pubDate>Sun, 03 Oct 2021 20:09:39 +0000</pubDate>
      <link>https://dev.to/enbis/how-to-use-build-tags-to-control-go-testing-with-a-gitlab-ci-use-case-584b</link>
      <guid>https://dev.to/enbis/how-to-use-build-tags-to-control-go-testing-with-a-gitlab-ci-use-case-584b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  abstract
&lt;/h2&gt;

&lt;p&gt;The importance of testing code in programming is undoubtedly a fact. There cannot be good quality development without proper testing coverage. Sometimes, however, it is necessary to distinguish the tests or even launch them grouped together rather than all at once. This is the purpose of these few lines: present a valid solution for GO developers who wants to run their tests separately. &lt;/p&gt;

&lt;p&gt;The use case I prepared involves a dummy GO project with test files. It has been pushed on a GitLab repository to run the Continuous Integration, while diversifying tests. This is the link to inspect the solution directly on &lt;a href="https://gitlab.com/enbis/testex"&gt;GitLab&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;basic knowledge of GO programming and testing&lt;/li&gt;
&lt;li&gt;basic knowledge of the GitLab-CI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-go-project"&gt;
  &lt;/a&gt;
  the GO project
&lt;/h2&gt;

&lt;p&gt;Let's start our tour presenting the pilot GO project used to evaluate the usefulness of &lt;strong&gt;build tags&lt;/strong&gt;. It is a simple Web Server with the sole purpose of handling http requests based on this URL query string &lt;code&gt;/?value=10&lt;/code&gt;. Assuming the value is numeric, the web server returns a JSON payload with a success status and the value increased by one unit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"status":"success","result":"11"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of invalid request it returns JSON payload with a fail status and the error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"status":"fail","error":"strconv.Atoi: parsing \"10a\": invalid syntax"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-project-layout"&gt;
  &lt;/a&gt;
  the project layout
&lt;/h3&gt;

&lt;p&gt;In this scenario, the GO project has two packages besides the main: &lt;code&gt;handler&lt;/code&gt; and &lt;code&gt;helper&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gitlab.com/enbis/testex/-/blob/main/handler/handler.go"&gt;handler&lt;/a&gt;: decodes the http request and returns the answer after processing the data received&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gitlab.com/enbis/testex/-/blob/main/helper/helper.go"&gt;helper&lt;/a&gt;: exposes the functions to manipulate the data &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-test-files"&gt;
  &lt;/a&gt;
  the test files
&lt;/h3&gt;

&lt;p&gt;The layout presented allows me to separate the context for the testing stage. &lt;br&gt;
The &lt;code&gt;handler&lt;/code&gt; can be tested using the &lt;code&gt;net/http/httptest&lt;/code&gt; GO std library package. The &lt;a href="https://gitlab.com/enbis/testex/-/blob/main/handler/handler_internal_test.go"&gt;handler_internal_test&lt;/a&gt; contains the httptest functions NewRequest and NewRecorder to prepare the http.Request and evaluate the http.Response. This could be identified as a sort of &lt;strong&gt;integration test&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestHandler(t *testing.T) {
    var response Response

    req := httptest.NewRequest("GET", "/?value=10", nil)
    w := httptest.NewRecorder()
    Handler(w, req)

    res := w.Result()
    defer res.Body.Close()

    assert.Equal(t, http.StatusOK, res.StatusCode)

    data, err := ioutil.ReadAll(res.Body)
    assert.NoError(t, err)

    err = json.Unmarshal(data, &amp;amp;response)
    assert.NoError(t, err)

    assert.Equal(t, "11", response.Result)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;helper&lt;/code&gt; package contains the functions used to process the data. Those functions can be tested as a pure &lt;strong&gt;unit tests&lt;/strong&gt;. This is the &lt;a href="https://gitlab.com/enbis/testex/-/blob/main/helper/helper_internal_test.go"&gt;helper_internal_test&lt;/a&gt; created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func TestConvert(t *testing.T) {
    tables := []struct {
        in  string
        out int
    }{
        {"1", 1},
        {"100", 100},
    }

    for _, table := range tables {
        converted, err := Convert(table.in)
        assert.NoError(t, err)
        assert.Equal(t, table.out, converted)
    }
}

func TestIncrement(t *testing.T) {
    tables := []struct {
        in  int
        out int
    }{
        {1, 2},
        {100, 101},
    }

    for _, table := range tables {
        converted := Increment(table.in)
        assert.Equal(t, table.out, converted)
    }
}

func TestToString(t *testing.T) {
    tables := []struct {
        in  int
        out string
    }{
        {1, "1"},
        {100, "100"},
    }

    for _, table := range tables {
        str := ToString(table.in)
        assert.Equal(t, table.out, str)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-build-tags-or-build-constraints-"&gt;
  &lt;/a&gt;
  the build tags ( or build constraints )
&lt;/h2&gt;

&lt;p&gt;What we produced so far is the Web Server and its test files. As a GO developer I just have to run the command &lt;code&gt;go test ./...&lt;/code&gt; and my whole list of tests is executed. &lt;br&gt;
The point is that I cannot distinguish between &lt;code&gt;integration test&lt;/code&gt; and &lt;code&gt;unit test&lt;/code&gt; or even have a separate report in a GitLab pipeline.&lt;br&gt;
Here is where the &lt;strong&gt;build tags&lt;/strong&gt; become useful. On top of that, they are easy to integrate into the code. &lt;br&gt;
The syntax is a comment on top of the test file, with the special word &lt;em&gt;+build&lt;/em&gt; followed by the keyword that identifies the tag. The constrains are injected into GO using &lt;em&gt;-tags&lt;/em&gt; flag in the test command. &lt;br&gt;
Let's see what happens in practical terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integration test: the chosen keyword is integration, so I need to add the comment &lt;code&gt;// +build integration&lt;/code&gt; on top of the handler_internal_test file and run the command &lt;code&gt;go test ./... -tags=integration&lt;/code&gt; to execute it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// +build integration

package handler

import (
    "encoding/json"
    "io/ioutil"
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/stretchr/testify/assert"
)

func TestHandler(t *testing.T) {
....
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;unit test: the keyword in this case is unit, I need to add the comment &lt;code&gt;// +build unit&lt;/code&gt; on top of the helper_internal_test file and run the command &lt;code&gt;go test ./... -tags=unit&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// +build unit

package helper

import (
    "testing"

    "github.com/stretchr/testify/assert"
)

func TestConvert(t *testing.T) {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;unit and integration test: tags syntax allows to use AND and OR, as well as negative expressions. To run both at the same time, the command to use is &lt;code&gt;go test ./... -tags=integration,unit&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-gitlab-ci-pipeline"&gt;
  &lt;/a&gt;
  the GitLab CI pipeline
&lt;/h2&gt;

&lt;p&gt;Last but not least, the integration of the build tags into the GitLab CI pipeline. In this case the purpose could be to see the result of the tests grouped by tags. The case presented here contains only two tags: integration and unit. The &lt;a href="https://gitlab.com/enbis/testex/-/blob/main/.gitlab-ci.yml"&gt;gitlab-ci.yml&lt;/a&gt; file will have two stages, each with the proper script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
  - unit_test
  - integration_test

unit:
  stage: unit_test
  script:
    - go test -v ./... -tags=unit

integration:
  stage: integration_test
  script:
    - go test -v ./... -tags=integration

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which brings this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCtnkZl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aftj1522ugiwchoe29t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCtnkZl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aftj1522ugiwchoe29t6.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Thanks to the build tags in the GitLab pipeline presented above I'm able to distinguish tests by context, run them separately and inspect the result individually. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>test</category>
      <category>go</category>
    </item>
    <item>
      <title>Function Composition in Javascript</title>
      <author>Oğuzhan Olguncu</author>
      <pubDate>Sun, 03 Oct 2021 19:46:18 +0000</pubDate>
      <link>https://dev.to/ogzhanolguncu/function-composition-in-javascript-13nb</link>
      <guid>https://dev.to/ogzhanolguncu/function-composition-in-javascript-13nb</guid>
      <description>&lt;p&gt;After learning map, reduce and higher-order functions, you finally stepped into the gate of functional programming. As you keep delving deeper you stumbled upon composing and piping, and, you start to wonder why one even uses compose. Function composition(compose) allows us to define reusable, testable and maintainable functions. All those perks are the motivation behind functional programming's existence.&lt;/p&gt;

&lt;p&gt;This whole process is quite parallel to what we do in math.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;f&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x + 2
g&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="k"&gt;*&lt;/span&gt; 2

h&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;(&lt;/span&gt;g&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;))&lt;/span&gt; // If x is 2, &lt;span class="k"&gt;then &lt;/span&gt;result will be 6.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like in this example, compose function uses the output of the functions as input for the next function. Let's see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alice's Adventures in Wonderland"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The Fellowship of the Ring"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The Return of the King"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The Golden Compass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1984"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose we want to find completed book titles using regular ES6 it would be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//  ["The Fellowship of the Ring", "The Golden Compass"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even separate arrow functions to their own functions to make it more readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedBooks&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedBookNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//  ["The Fellowship of the Ring", "The Golden Compass"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, we can compose them but, first, we need to make ourselves a brand new compose function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reduce works left-to-right, but, since composition works right-to-left we use &lt;code&gt;reduceRight&lt;/code&gt; to reverse it. Now, let's demystify this function.&lt;br&gt;
We will go step-by-step and start with &lt;code&gt;...fns&lt;/code&gt;, what is this? If we are not certain about how many arguments will be received we tend to use&lt;br&gt;
&lt;code&gt;...args&lt;/code&gt;, but in our case, we are expecting functions instead of regular values. This is also called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"&gt;rest parameters&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [4,5,6]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  Currying
&lt;/h3&gt;

&lt;p&gt;Now, we have another mysterious thing in our function, another arrow function. This thing actually called &lt;a href="https://ogzhanolguncu.com/blog/using-curry-the-functional-way"&gt;currying&lt;/a&gt;.&lt;br&gt;
Let's quickly recap currying. Currying gives you ability to splitting your function calls into multiple calls and gives you ability to provide one argument at a time which gives you &lt;a href="https://en.wikipedia.org/wiki/Unary_function"&gt;unary&lt;/a&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;curriedAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;curriedAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the third part - &lt;code&gt;fns.reduceRight&lt;/code&gt; - we are just iterating over functions which received by compose function and calling each function with&lt;br&gt;
a given array which in our case it's our curried value - &lt;code&gt;val&lt;/code&gt; -. Now, instead of chaining filter and map let's compose them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;completedBooks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;completedBookNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["The Fellowship of the Ring", "The Golden Compass"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, if reading right to left feels weird don't worry I got you covered. There is another function called &lt;code&gt;pipe&lt;/code&gt;, which works just like &lt;code&gt;compose&lt;/code&gt; but in reverse.&lt;br&gt;
All we have to do is use &lt;code&gt;reduce&lt;/code&gt; instead of &lt;code&gt;reduceRight&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedBooks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bookNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;completedBookNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["The Fellowship of the Ring", "The Golden Compass"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you dislike defining functions on top instead of using arrow function directly we can define our own &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completedBookNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;completedBookNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["The Fellowship of the Ring", "The Golden Compass"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#partial-application"&gt;
  &lt;/a&gt;
  Partial Application
&lt;/h3&gt;

&lt;p&gt;We can even spice up our compose/pipe more with a partial application, by the way, partial application is just like currying allows you to make multiple function calls, but&lt;br&gt;
also gives you an option to provide multiple arguments. In our case, we will provide only one argument for the sake of simplicity. Let's see it in the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isReverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isReverse&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reverseArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//  ['The Golden Compass', 'The Fellowship of the Ring'],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#practical-examples"&gt;
  &lt;/a&gt;
  Practical Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack The Ripper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's imagine we have a person object, and we have been requested to make few changes without mutating the object.&lt;br&gt;
Because objects are passed around by their references which results in mutating the object and losing the previous version of the object which generates impure functions.&lt;br&gt;
In functional programming, we always strive for pure functions. To overcome that hurdle, we need to make a shallow copy of our object first, then mutate the copied object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack The Ripper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shallowClone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Birmingham&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shallowClone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;changeLocation&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changeLocation&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example would be finding word count in string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splitWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;splitWords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countWords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It's been quite an adventure, we learned lots of new things, things that take time to digest. Such as currying to call the function multiple times with different arguments,&lt;br&gt;
reduceRight right to reverse reduce, compose/pipe to compose functions as unaries, partially applying function so we can provide additional arguments on the fly. All these&lt;br&gt;
concepts give us side-effect free(pure functions), immutable objects, testable and reusable functions. The examples we went through were quite trivial, but they can be used in complicated scenarios as well.&lt;br&gt;
This is just the beginning of functional programming if you are into it check monads, transducers, functors.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 2. </title>
      <author>NordicBeaver</author>
      <pubDate>Sun, 03 Oct 2021 19:18:59 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-2-3p82</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-2-3p82</guid>
      <description>&lt;p&gt;I made another video on how to make a very generic website for a local business. In this one we create a new NextJs project for client's side, make a homepage, add a new model for services and a way to manage them in the admin panel. Enjoy :).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hHjANr2Gjx0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-tip-from-the-video-snippets"&gt;
  &lt;/a&gt;
  A tip from the video: snippets.
&lt;/h2&gt;

&lt;p&gt;For some reason I was very reluctant to make my own snippets. A mean I used build-in ones, or the ones that come with extensions, but I never made my own. Until recently I was using css modules and I got &lt;em&gt;really&lt;/em&gt; tired typing import for my styles.&lt;/p&gt;

&lt;p&gt;So I decided to give it a shot. Turns out even if it does not save you tons of time, I mean typing is like 1% of programming, it surely makes you feel better. So I guess my advice is if you get annoyed about typing something over and over, consider turning that thing into a snippet.&lt;/p&gt;

&lt;p&gt;And here is that css modules snippet I was talking about for VS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Import css module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mcss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"import styles from ./$TM_FILENAME_BASE.module.css'"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Addressing Product Delivery Debt</title>
      <author>Dmitry Amelchenko</author>
      <pubDate>Sun, 03 Oct 2021 19:14:42 +0000</pubDate>
      <link>https://dev.to/dmitryame/addressing-product-delivery-debt-4pc3</link>
      <guid>https://dev.to/dmitryame/addressing-product-delivery-debt-4pc3</guid>
      <description>&lt;p&gt;By now everyone knows what technical debt is, right?&lt;/p&gt;

&lt;p&gt;All the inefficiencies, which have accumulated over time on the project, that are not technical debt -- are called "Product Delivery Debt". &lt;/p&gt;

&lt;p&gt;Just like the Tech Debt, Product Delivery Debt must be paid off --or else, it will cripple your product, or even destroy  your company.&lt;/p&gt;

&lt;p&gt;How does it even happen? Quite natural. In the beginning, you start with nimble team and simple process. Over time your team will grow, every new person on the team will start with evaluating your process and trying to make "improvements" by adding something to your process. Eventually, things will get so complex, that no one will be able to understand how the process works any more. Just like the Tech Debt, this is natural  and unavoidable. The real problem is, that, just like the Tech Debt, the Delivery Debt must be addressed. &lt;/p&gt;

&lt;p&gt;How do you know if you have too much Product Delivery Debt?  Jira is a good place to start. The same idea applies to any Agile project management tool. Jira is a direct reflection of your process complexities. But Jira also directly influences your process. That's why I'm not a big fan of superb Jira customization ability -- it opens a pandoras box and you will complicate things just because you can. &lt;br&gt;
If you have to call all hands meeting to explain how you intend to use Jira -- that's one giant red flag. If you have to explain it to your staff more than once -- you are doing it all wrong. Here are typical Jira red flags to look out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;too many columns/states &lt;/li&gt;
&lt;li&gt;too many types of stories&lt;/li&gt;
&lt;li&gt;too many cards in any given column&lt;/li&gt;
&lt;li&gt;creating new card takes more than 1 click -- you have to remember to select values in 10 different customizable drop downs before you can click submit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#jira-customizations"&gt;
  &lt;/a&gt;
  Jira customizations
&lt;/h1&gt;

&lt;p&gt;It all starts at the Product BackLog. The product owner is responsible for keeping the backlog in order (at least the top portion of it). Only top 10-20 stories need to be groomed -- requirements well defined and stories estimated by the engineering team. These 10-20 stories must also be always properly prioritized by the PO -- the only way to define priorities in Jira should be the order of the backlog. Having customized fields like "Priority", "Urgency", "Emergency" etc... create ambiguity and confusion. If the card must be worked on right away -- move it to the top of the backlog.&lt;/p&gt;

&lt;p&gt;I've heard many complains from the PO's that everyone in the company has a way too much power to dump anything they want in the backlog, which makes the backlog a mess. If you (the PO) only concentrate on the top 10-20 stories -- it really should not matter what else  is added to the backlog or how big it grows. If an urgent story is added to the backlog, which needs to be dealt with the highest priory -- you will know one way or another. Just move it to the top of the backlog, take the back sit and relax -- your job is done here. Don't worry about the things you can't control.&lt;/p&gt;

&lt;p&gt;When the next highest priority story is picked by an engineer from the top of the backlog, it enters the Delivery Pipeline.&lt;br&gt;
Efficient process does not have to have more than 3 columns (states) in the pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WIP (Work In Progress)&lt;/li&gt;
&lt;li&gt;In Testing&lt;/li&gt;
&lt;li&gt;Released&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've seen Jira projects which have 20!!! different columns defined -- this kind of complexity is impossible to manage and is unacceptable.&lt;br&gt;
Why do you need  to have  columns like "Ready for Testing", "In Testing Review", "Testing Blocked", "Waiting for User Acceptance Testing", "In Testing", "Testing Completed"? When you are  (the engineer) done writing  code -- move the story from "WIP" to "In Testing" column.  Let the QA team figure out how they want to deal with it.  As soon as the story shows up in "In Testing" column, it becomes a priority for the testing team. &lt;/p&gt;

&lt;p&gt;Similar idea applies to everything else in Jira. You may think that Jira gives you ultimate  flexibility to  reflect the "unique" complexities of your "special" project by creating all these customized columns? Whom are  you kidding? Jira is evil in this regard. I wish Jira had only 3 predefined columns and no way to customize it. When you start adding these "special case columns", you are making your life miserable, as well as the life of everyone else around you. All the complexities can and should be mapped to 3 columns model. &lt;/p&gt;

&lt;p&gt;Same idea for customizing different stories types. I've seen engineering teams endlessly arguing about if a particular card has to be recorded as a Story, a Task, a Chore, or a Bug. Why? It's all work that needs to be done one way or another, why would it matter how it's recorded in the system? Every unit of work should be a story (which conceptually maps to a yellow sticky -- this is how agile was born). &lt;/p&gt;

&lt;p&gt;Another important thing to keep in mind -- avoid having too many stories in flight. Too many stories in any of the given Jira columns means that some of these stories are in waiting state or blocked by external dependencies. No one can work on too many things at the same time. On average agile squad of 5 people you should not have more than 20 stories in-flight. Even 20 pushing it too high. If you have more than 20 -- start moving stories back to the backlog.&lt;/p&gt;

&lt;p&gt;Keep it simple -- offload all these complexities from your brain -- you need it (the brain) for solving your business and technology challenges, not for remembering and managing all the tool customizations.&lt;/p&gt;

&lt;p&gt;To succeed with this approach -- make sure to clearly set expectations to your team.  And, in order for your team to commit to the goal -- it has to be simple and easy to understand.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#agile-team-goal"&gt;
  &lt;/a&gt;
  Agile Team Goal
&lt;/h1&gt;

&lt;p&gt;There is only one goal that is truly Agile -- &lt;strong&gt;Move stories through the development pipeline as quickly as possible&lt;/strong&gt;. &lt;br&gt;
The goal you set has to be measurable  -- make sure you have the right metrics in place. &lt;br&gt;
&lt;strong&gt;Cycle time&lt;/strong&gt; is much better metric than the traditionally tracked &lt;strong&gt;velocity&lt;/strong&gt;. Velocity is badly abused and is easy to manipulate, as such it offers little value. &lt;/p&gt;

&lt;p&gt;You process should revolve about your simple goal. If the process is too complex (has too many columns, too many types of Jira cards, too many cards in any column), the stories will stall -- it will be easier for your team to hide the real issues in the complexities. &lt;br&gt;
But, how do you deal with the delays which your team can't control? Don't you need, for instance, more columns to draw attention to the stalled stories? No! Not really. Every time you can't make progress on a story for what ever reason, the story either stays in current column until it's unblocked, or goes back to the Backlog if it can't be unblocked reasonably fast. Adding "In Waiting" or "On Hold" columns does not solve the issue -- it postpones it or even worse -- hides it.&lt;br&gt;&lt;br&gt;
When you start to accumulate too many stories in any of the columns -- that's clear indicator of an issue. To address it, start moving the stalled story to the backlog, and let your PO help you re-prioritize. If no one can help the engineers to address the dependencies -- it means only one thing -- no one cares, as such -- it's not a priority.&lt;/p&gt;

&lt;p&gt;Make sure your entire team (including PO, UI/UX designers, Devs, QA's. Dev ops) signs off on few simple rules which support your Agile Team Goal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the story is moved from the Backlog to the WIP column -- it becomes a priority for the entire team to move it through the pipe-line all the way to the end -- to the "Released" column.&lt;/li&gt;
&lt;li&gt;The story is not done until it's in the "Released" state. &lt;/li&gt;
&lt;li&gt;Never move things from the "Released" column to the Backlog -- create a new BounceBack story in the Backlog. If the original story was not done correctly the first time, it's an entirely new unit of work which needs to be prioritized, and enter the pipe-line just like any other story in the Backlog. This will also allow you to more accurately record the history of BounceBacks. Too many BounceBacks pertaining to a particular story is a problem that needs to be fixed. &lt;/li&gt;
&lt;li&gt;Never  have more than 20 stories in-flight (have your team figure out what's the right number of the in-flight stories they can handle).&lt;/li&gt;
&lt;li&gt;Record intermittent state changes at the story level in Jira. Branching, rebasing, merging, creating and reviewing pull requests, releasing to staging, signing off on testing results etc... -- all this must be recorded in the story log so that anyone can always know exactly what's been done.&lt;/li&gt;
&lt;li&gt;Measure Cycle time. If it's starts to go up -- fix it.  Don't hesitate to ask for help the higher level authority of your company -- this is their job to help you remove impediments so that you (the engineer) can do your job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#estimates"&gt;
  &lt;/a&gt;
  Estimates
&lt;/h1&gt;

&lt;p&gt;Estimates are costly because they take time and effort away from your development team. Why bother if the estimates, no matter how accurate they are, will always be wrong? If all you care about is to deliver stories as quickly as possible -- do not spend valuable resources on something that has little value.  Instead of providing fine-grained Fibonacci numbers or Power of two based estimates, simplify it -- use T-shirt sizing: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;small&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;large
Have the engineering team define what these sizes mean. Use relative approach -- any story larger than Large must be split in smaller pieces. Identifying the larger stories so that they can be split in smaller pieces is the only benefit of the estimates. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#branching-strategy-and-cicd"&gt;
  &lt;/a&gt;
  Branching strategy and CICD
&lt;/h1&gt;

&lt;p&gt;If your goal is to implement true Agile delivery cycle, you'd want to pursue Continuous Delivery model. The only way to build efficient Continuous Delivery is to keep it simple.&lt;br&gt;
Many branching strategies invented to help to deal with complexities of the Product Delivery.&lt;br&gt;
GitFlow is good example of such an attempt. While  GitFlow model generally speaking works well and is recognized as the industry standard, it's already complex enough from the start. If you want to adopt this model on your project -- it will make your process more complex than you need. Is this something you want?&lt;br&gt;
I propose to start with the simplest branching model possible. &lt;br&gt;
If done right, you can manage any use-case with the &lt;strong&gt;single stable branch&lt;/strong&gt; model. &lt;br&gt;
Forget about "Main", "Development", "Feature", "Release", "Hotfix" branches. Who in the right mind would be able to understand end remember when to create particular type of branch and how to manage it correctly? All you really need -- "Main" and "Feature" branches.&lt;/p&gt;

&lt;p&gt;Here is how it works:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main&lt;/strong&gt; branch -- single source of truth, stable, always reflects what's in production. &lt;br&gt;
&lt;strong&gt;Feature&lt;/strong&gt; branch -- any progress on the project is made on the feature branches,  either new feature development, or hotfix, or client acceptance testing. &lt;/p&gt;

&lt;p&gt;Few simple things your team has to agree upon to make it work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always create new Feature branch from the latest "Main"&lt;/li&gt;
&lt;li&gt;Feature branch is created for any type of work you need to perform on code:

&lt;ul&gt;
&lt;li&gt;small story that takes up to few days to implement&lt;/li&gt;
&lt;li&gt;larger story that will be ongoing development for couple of weeks&lt;/li&gt;
&lt;li&gt;bugs, regardless of how long they take to fix&lt;/li&gt;
&lt;li&gt;hotfix that needs to go to prod ASAP. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;It becomes developer's responsibility to keep all their Feature branches up to date with the Main branch at all times. &lt;/li&gt;
&lt;li&gt;As soon as something is merged to the Main -- all Feature branches have to be rebased off of the latest to include that change. That's another reason you should never have too many stories in-flight. &lt;/li&gt;
&lt;li&gt;Continuous rebasing of the Feature branches helps to make sure that the integration testing happens early, and all merge conflicts are resolved on the Feature branch ahead of time, which minimizes merge conflicts mistakes. &lt;/li&gt;
&lt;li&gt;If you ever need to resolve merge conflict on the Main branch -- you are doing it wrong.&lt;/li&gt;
&lt;li&gt;The testing, the QA sign-off, the User Acceptance testing -- all of that happens on the Feature branch. The Feature branch always contains the latest from the Main as well as the Feature work.&lt;/li&gt;
&lt;li&gt;Releasing feature to production becomes simple and reliable, since all the merge conflicts are already solved and all the integration/regression testing already happened on the Feature branch.&lt;/li&gt;
&lt;li&gt;Never accumulate non released state on the Main branch. As soon as there is a merge to Main -- release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Continuous improvement is one of the foundational Agile principles. Unfortunately, it's easy to forget what that means. Most understand "improvements" as adding more things. Sometimes adding an extra step or a missing piece makes sense. Most of the times -- improvements can and should be achieved by removing/simplifying things. &lt;br&gt;
In "The Aviator" movie, Howard Hughes takes a sledge hammer and smashes second row wings off of the airplane to reduce the air drag and to improve the speed characteristics. Agile is your sledge hammer -- use it wisely.&lt;/p&gt;

&lt;p&gt;And that's all folks. &lt;/p&gt;

&lt;p&gt;To wrap things up, here are few of my favorite Einstein quotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything should be made as simple as possible, but no simpler.&lt;/li&gt;
&lt;li&gt;If you can't explain it simply, you don't understand it well enough.
Hope, in this post I was able to explain simply how to deal with the Product Delivery Debt. If you still have questions, comments or would like to collaborate on this topic -- I would love to hear from you.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally posted on &lt;a href="https://www.echowaves.com/post/addressing-product-delivery-debt"&gt;echowaves.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>agile</category>
      <category>product</category>
      <category>team</category>
      <category>techdebt</category>
    </item>
    <item>
      <title>How to use Bootstrap with Flask</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 03 Oct 2021 19:09:44 +0000</pubDate>
      <link>https://dev.to/sm0ke/how-to-use-bootstrap-with-flask-e41</link>
      <guid>https://dev.to/sm0ke/how-to-use-bootstrap-with-flask-e41</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article explains &lt;strong&gt;&lt;a href="https://blog.appseed.us/how-to-use-bootstrap-with-flask/"&gt;How to use Bootstrap with Flask&lt;/a&gt;&lt;/strong&gt; and code professional web apps with a responsive layout. For newcomers, &lt;strong&gt;Bootstrap&lt;/strong&gt; is the most popular CSS framework with more than 150k Github stars and a huge ecosystem behind it. &lt;strong&gt;Flask&lt;/strong&gt; is an open-source framework used to code from simple one-page projects to complex APIs, microservices, or even complex eCommerce solutions.&lt;/p&gt;

&lt;p&gt;In order to make this article more useful, we will take a look at an open-source Flask project that provides a beautiful UI styled with Bootstrap in two flavors: a minimum version that uses components downloaded from the official &lt;strong&gt;Bootstrap Samples&lt;/strong&gt; page and a production-ready version with more pages (home, about, contact) and a complete set of components.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Section #1 - &lt;strong&gt;What is Bootstrap&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Section #2 - &lt;strong&gt;What is Flask&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Section #3 - &lt;strong&gt;Set up the environment&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Section #4- &lt;strong&gt;Code a Flask app&lt;/strong&gt; (with authentication)&lt;/li&gt;
&lt;li&gt;Section #5 - &lt;strong&gt;Integrate a fully-fledged UI Kit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Free sample with more modules: &lt;strong&gt;&lt;a href="https://appseed.us/apps/flask-apps/flask-pixel-bootstrap-uikit"&gt;Flask Bootstrap Pixel Lite&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYI6J9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nicdel27lh0rfoggbnp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYI6J9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nicdel27lh0rfoggbnp1.png" alt="Bootstrap with Flask - Pixel Lite Sample."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-bootstrap"&gt;
  &lt;/a&gt;
  What is Bootstrap
&lt;/h2&gt;

&lt;p&gt;In a single sentence, Bootstrap helps us to code faster and easier user interfaces by providing a set of HTML, and CSS templates for creating UI components like buttons, dropdowns, forms, alerts, modals, tabs, accordions, etc. Reusing the assets provided by the Bootstrap framework we might win time and also improve the quality of our end-product.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reasons to use Bootstrap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Easy to use&lt;/strong&gt; - any developer with basic programming knowledge can use and combine Bootstrap components to prototype fast a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsiveness&lt;/strong&gt; - Bootstrap components are built to adapt and display properly on desktop and mobile devices with a wide range of resolutions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Alive Community&lt;/strong&gt; - this amazing framework is actively supported and versioned by a huge open-source community&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cross-Browser Compatibility&lt;/strong&gt; - Bootstrap keeps up the codebase with the latest standards for a smooth deployment on all well-known browsers: Chrome, Safari, IE, or Firefox.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To getting started with Bootstrap and code a new web page is pretty easy. Just copy below snippet, save it locally and after, visualize the file using Chrome or Safari browser.  &lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My First Bootstrap Page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

      &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Get started with Bootstrap
    &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;       

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap Javascripts --&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Simple Bootstrap Page - browser view&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YoYtzv_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rab10e2d762z0172qr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YoYtzv_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rab10e2d762z0172qr0.png" alt="Bootstrap - Simple Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In the same way we can download more &lt;a href="https://getbootstrap.com/docs/5.1/examples/"&gt;components and samples&lt;/a&gt; from the official website and build more complex pages with a left menu, a navigation bar, footer, and horizontal sections.  &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZTZsXWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/preykd0p84gjnm1nlvb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZTZsXWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/preykd0p84gjnm1nlvb1.png" alt="Bootstrap - Components and Samples."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-flask"&gt;
  &lt;/a&gt;
  What is Flask
&lt;/h2&gt;

&lt;p&gt;Flask is an open-source web framework coded in Python using a lightweight codebase and flexible by design. By default, Flask is not coming with a database or any other hard dependency empowering the developers with total freedom in terms of used modules and how to structure the project. To use Flask and code a test application, Python3 should be properly installed in the workstation and accessible in the terminal window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command install &lt;code&gt;Flask&lt;/code&gt; using &lt;code&gt;PIP&lt;/code&gt; the official package manager for Python. Once Flask is installed, we can code a simple app and run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; 
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Flask is great!'&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we execute the above snippet and open &lt;code&gt;http://localhost:5000&lt;/code&gt; in the browser we should see the message Flask is great. Even if not too much, we've just coded an usable Flask application that we can improve with more features and modules.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#set-up-environment"&gt;
  &lt;/a&gt;
  Set Up Environment
&lt;/h2&gt;

&lt;p&gt;To run successfully the all samples and code snippets provided in this article a minimal programming kit is required to be properly install in our workstation and fully accessible by the terminal window.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A modern editor&lt;/strong&gt; - VSCode or Atom&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python3&lt;/strong&gt; - a modern script language used for many types of projects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIT&lt;/strong&gt; - a command-line tool used to download sources from Github&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VSCode&lt;/strong&gt; - a popular and free code editor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;VsCode helps us to visualize and edit the sources, execute our projects and investigate the issues that might occur during the programming process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tV7T5yoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkgspzcy6r4d41zuhoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tV7T5yoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkgspzcy6r4d41zuhoe.png" alt="VsCode - Modern Code Editor"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Python Interpreter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python is a general-purpose coding language—which means that, unlike HTML, CSS, and JavaScript, it can be used for other types of programming and software development besides web development. Python is an interpreted language (translated into bytecode at runtime) and can be used for things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic programming: using strings, adding numbers, open files&lt;/li&gt;
&lt;li&gt;Writing OS system scripts&lt;/li&gt;
&lt;li&gt;Back end (or server-side) web and mobile app development&lt;/li&gt;
&lt;li&gt;Desktop applications and software development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python can be downloaded and installed from the &lt;a href="https://www.python.org/"&gt;official website&lt;/a&gt; with just few clicks. Once is installed, we can check the installation in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
Python 3.7.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wjzOtvfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2nw43qgrtvrgbius9oy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjzOtvfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2nw43qgrtvrgbius9oy.png" alt="Programming Kit - Python Interpreter."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;GIT command-line versioning tool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git is a free version control system designed to handle everything from small to very large projects with speed and efficiency. Using GIT we can clone/download and manage projects from Github and BitBucket with ease.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1xjMvzc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygihkpt5tem70kacts5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xjMvzc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygihkpt5tem70kacts5w.png" alt="Programming Kit - GIT versioning tool."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;With this minimal set up we can move forward and code a simple Flask app that provides a session-based authentication and a few pages like SignIN, SignUP built with components downloaded from Bootstrap.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-flask-app-with-authentication"&gt;
  &lt;/a&gt;
  Code Flask App (with authentication)
&lt;/h2&gt;

&lt;p&gt;The project aims to be pretty simple with an intuitive codebase structure, SQLite persistence, and three pages (index, login, register) styled with Bootstrap 5. To cover all requirements a few Python modules should be installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Flask&lt;/code&gt; - the framework that powers the app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Login&lt;/code&gt; - a popular library used to manage the sessions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Bcrypt&lt;/code&gt; - used for password encryption&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-SqlAlchemy&lt;/code&gt; - a popular library to access the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the codebase structure, Flask allows up to configure the files without any constraints. Here is a possible structure that isolates the design from the functional part (routes, models) nicely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- index.html           &lt;span class="c"&gt;# Index File&lt;/span&gt;
   |    |    |-- login.html           &lt;span class="c"&gt;# Login Page&lt;/span&gt;
   |    |    |-- register.html        &lt;span class="c"&gt;# Registration Page&lt;/span&gt;
   |    |    
   |    |
   |   config.py                      &lt;span class="c"&gt;# Provides APP Configuration &lt;/span&gt;
   |   forms.py                       &lt;span class="c"&gt;# Defines Forms (login, register) &lt;/span&gt;
   |   models.py                      &lt;span class="c"&gt;# Defines app models &lt;/span&gt;
   |   views.py                       &lt;span class="c"&gt;# Application Routes &lt;/span&gt;
   |
   |-- requirements.txt
   |-- run.py
   |
   |-- &lt;span class="k"&gt;**************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this simple structure, the most relevant files are listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;run.py&lt;/code&gt; - the entry point and the value of FLASK_APP environment variable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app directory&lt;/code&gt; bundles all files and assets used in our  project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/config.py&lt;/code&gt; - defines app configuration&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/forms.py&lt;/code&gt; - defines SignIN, SignUP authentication forms&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/models.py&lt;/code&gt; - defines the Users table (saves users and passwords)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/views.py&lt;/code&gt; - handles the app routing like login, logout and register&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another important location is the &lt;code&gt;templates directory&lt;/code&gt; where are defined the &lt;code&gt;index&lt;/code&gt; file and &lt;code&gt;SignIN&lt;/code&gt;, &lt;code&gt;SignUP&lt;/code&gt; pages. In order to use Bootstrap, the CSS and JS assets are loaded via CDN, a remote blazing-fast storage server without any local storage.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Index.html&lt;/strong&gt; - Styled with Bootstrap&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Mark Otto, Jacob Thornton, and Bootstrap contributors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Hugo 0.88.1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Flask Authentication | Bootstrap v5.1&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- CSS only --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/static/assets/css/custom.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- PAGE Content --&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- JavaScript Bundle with Popper --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code (simplified version for clarity proposes) will produce the following layout without built entirely from downloaded components. The functional part of our project detects if the user is authenticated or not and suggest to &lt;code&gt;login&lt;/code&gt; or &lt;code&gt;register&lt;/code&gt; a new account.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XA1Q3EPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5zlh19xhoab7gx4a5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XA1Q3EPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5zlh19xhoab7gx4a5h.png" alt="Bootstrap and Flask - Index page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Guest users are able to create a new account via a simple page as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6OUxpgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/151yfv5d6csuy2yaea20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6OUxpgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/151yfv5d6csuy2yaea20.png" alt="Bootstrap and Flask - SignUP Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Flask Bootstrap Sample&lt;/strong&gt; - SignIN Page  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--orr-bWcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr0230kmacflflfm21i8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--orr-bWcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr0230kmacflflfm21i8.png" alt="Bootstrap and Flask - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#integrate-pixel-lite"&gt;
  &lt;/a&gt;
  Integrate Pixel Lite
&lt;/h2&gt;

&lt;p&gt;Using a minimal UI kit might be ok for most projects but using a design crafted by an agency is probably better. In order to add more value to our sample we will use an open-source Bootstrap 5 design crafted by Themesberg: Pixel Lite. This amazing design comes with pre-built pages (signIn, signUp, about) and a rich set of UI components that we can use and combine. Bellow are the pages integrated into our simple project:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Pixel Bootstrap Kit - Freelancer Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwB9MkcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unp5bmct9k6k942m88bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwB9MkcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unp5bmct9k6k942m88bo.png" alt="Flask Bootstrap Pixel - Freelancer page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Pixel Bootstrap Kit - About Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8HP203H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xgksbk82rqaqr27hyc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8HP203H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xgksbk82rqaqr27hyc6.png" alt="Flask Bootstrap Pixel - About page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can easily see that this new design is definitely better. Let's compile the free sample published on Github by following the build instructions provided in the &lt;a href="https://github.com/app-generator/flask-how-to-use-with-bootstrap/blob/main/README.md"&gt;README&lt;/a&gt; file saved at the root of the project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-how-to-use-with-bootstrap.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-how-to-use-with-bootstrap 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set Up Environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #5&lt;/strong&gt; - Start the app&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the application will redirect guest users to authenticate (SignIN page). Once we create a new user and sign in, the app provides access to all private pages.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgrzOQMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6silj8wpa66mv6wrmahv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgrzOQMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6silj8wpa66mv6wrmahv.png" alt="Flask Bootstrap Pixel - Login page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/apps/flask-apps"&gt;Flask Apps&lt;/a&gt; and &lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Dashboards&lt;/a&gt; - free &amp;amp; commercial
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.admin-dashboards.com/bootstrap-5-templates/"&gt;Bootstrap 5 Templates&lt;/a&gt; - Open-source and FREE
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>boostrap</category>
      <category>flask</category>
    </item>
    <item>
      <title>Looking for a project to contribute to this Hacktoberfest? I've got a few.</title>
      <author>Jason F </author>
      <pubDate>Sun, 03 Oct 2021 18:38:41 +0000</pubDate>
      <link>https://dev.to/juniordevforlife/looking-for-a-project-to-contribute-to-this-hacktoberfest-i-ve-got-a-few-686</link>
      <guid>https://dev.to/juniordevforlife/looking-for-a-project-to-contribute-to-this-hacktoberfest-i-ve-got-a-few-686</guid>
      <description>&lt;p&gt;Hello all! If you're looking for a project to contribute to, please feel free to check out my Hacktoberfest repo's below. All skill levels are welcome to contribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;p&gt;Here are my projects that are open for Hacktoberfest contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#news-from-the-wormhole"&gt;
  &lt;/a&gt;
  News From The Wormhole
&lt;/h3&gt;

&lt;p&gt;This project was built with React, Typescript, Tailwind, Vite, and the Spaceflight News API. This project lists news articles and blog posts that are related to space flight. You can find the repo link &lt;a href="https://github.com/JasonFritsche/news-from-the-wormhole"&gt;here&lt;/a&gt;, and can see the site &lt;a href="https://jasonfritsche.github.io/news-from-the-wormhole/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivational-cats"&gt;
  &lt;/a&gt;
  Motivational Cats
&lt;/h3&gt;

&lt;p&gt;This project does not use a SPA framework. It uses plain ol' vanilla JS, Materialize CSS, and makes a couple of api calls (one to grab cat images, another to grab a motivational quote). This is this project's third Hacktoberfest! I kinda just let the Hacktoberfest contributions from the last two years drive the look and feel of the project and it's been fun to watch it change. It's in a broken state as of the time I'm writing this post. Please contribute, let's give this project another Hacktoberfest. &lt;br&gt;
You can find the repo &lt;a href="https://github.com/JasonFritsche/motivationalCats"&gt;here&lt;/a&gt; and can see the site &lt;a href="https://jasonfritsche.github.io/motivationalCats/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-is-the-iss"&gt;
  &lt;/a&gt;
  Where is the ISS
&lt;/h3&gt;

&lt;p&gt;This project shows you where the International Space Station is in real time. This project was made using Angular, Angular Material, and Leaflet. You can view the repo &lt;a href="https://github.com/JasonFritsche/where-is-the-iss"&gt;here&lt;/a&gt;, and see the site &lt;a href="https://jasonfritsche.github.io/where-is-the-iss/app-map"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-hacking"&gt;
  &lt;/a&gt;
  Happy Hacking
&lt;/h2&gt;

&lt;p&gt;Please feel free to work on any open issues in the projects I've listed. Also, if you find something you want to fix, or have an idea for a style change, or have an idea for an enhancement, then please create an issue in the project. I hope you all have a happy Hacktoberfest!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
