<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web3 for Dummies</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 07 Dec 2021 13:21:45 +0000</pubDate>
      <link>https://dev.to/abhirajb/web3-for-dummies-gj</link>
      <guid>https://dev.to/abhirajb/web3-for-dummies-gj</guid>
      <description>&lt;p&gt;You've probably heard of Web3 unless you've been living under a rock. Web3 is widely regarded as the Internet's future, and Web3 apps have recently become all the rage. What is Web3? How can developers create Web3 apps? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;The first phase of the Internet, Web1, was mainly about providing online content and information. As such, Web1 was largely static and practically only allowed users to read information. &lt;/p&gt;

&lt;p&gt;The cloud, which is a remote data storage and processing service accessible over the internet, powers most online services like email, social networking, and shopping. Cloud services are available through Amazon Web Services, Google Cloud, Microsoft Azure, and other platforms. This means that any information shared by users on these platforms is stored by the cloud service provider employed by an online business, such as food delivery or e-commerce. That is known as Web2&lt;/p&gt;

&lt;p&gt;Web3 is the next generation of the internet, with blockchain-based services. Data in Web3 is shared rather than owned by centralised institutions. Furthermore, Web3 prioritises back-end functionality, whereas Web2 prioritised front-end functionality. The advent of dApps, or decentralised applications, which could eventually replace standard applications, is another notable element of the Web3 era. &lt;/p&gt;

&lt;p&gt;You may have heard about "Web3.js" while learning about Web3 and its practical uses. What exactly is Web3.js? The Web3.js library is the primary JavaScript library you'll use while creating Web3 applications. This library is primarily used to interface with the Ethereum blockchain. Web3.js can be thought of as an Ethereum JavaScript API. As a developer, you can use the Web3.js library to create clients or applications that communicate with the Ethereum blockchain. If you wish to properly deal with an Ethereum blockchain from JavaScript, you'll need to bridge the gap between JavaScript and Web3.&lt;/p&gt;

&lt;p&gt;The transition to Web3 is, without a doubt, the Internet’s most significant paradigm shift since the emergence of Web2. So, what is Web3? Well, whereas Web1 was a largely static, read-only web, and Web2 was a dynamic, read-write web, Web3 will provide a decentralized, unmediated read-write Internet. &lt;br&gt;
Obviously, cryptocurrency is a key building block for Web3 since one needs to transact crypto coins or tokens to participate in them. But Web3 is a lot more than that and its use cases are still evolving.&lt;br&gt;
The best example of the Web3 universe is NFTs or non-fungible tokens, which are bought using crypto coins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-metaverse-and-web3-related"&gt;
  &lt;/a&gt;
  Are Metaverse and Web3 related?
&lt;/h2&gt;

&lt;p&gt;Though there is a lot of interest around both, experts said both are not correlated. The metaverse is about creating digital avatars and interacting with others in virtual spaces, be it offices or arcades. It does not have to be on a blockchain.&lt;/p&gt;

&lt;p&gt;Most role-playing games offer similar services. Imagine metaverse as a role-playing game in a 3D realm. Microsoft is rolling out metaverses through MS Teams in 2022, which will probably run on Azure rather than Ethereum or Solana.&lt;/p&gt;

&lt;p&gt;The whole point of Web3 is decentralisation. While building a metaverse on blockchain is a possibility, it does not make it a purely Web3 use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An example
&lt;/h2&gt;

&lt;p&gt;Below, I shall list the differences between Web1, Web2 and Web3 for clearer understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mW7QEaPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image5-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mW7QEaPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image5-2.png" alt="web1" width="880" height="481"&gt;&lt;/a&gt; - Web1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acaTMAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image2-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acaTMAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image2-2.png" alt="web2" width="880" height="488"&gt;&lt;/a&gt; - Web2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HnmzxLMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image3-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HnmzxLMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image3-1.png" alt="web3" width="880" height="320"&gt;&lt;/a&gt; - Web 3&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading.
&lt;/h2&gt;

&lt;p&gt;Subscribe to my newsletter to never miss out on my blogs and tech news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getrevue.co/profile/abhiraj"&gt;Abhiraj's Dev-letter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>RudderStack’s Transformations API</title>
      <author>RudderStack</author>
      <pubDate>Tue, 07 Dec 2021 13:03:20 +0000</pubDate>
      <link>https://dev.to/rudderstack/rudderstacks-transformations-api-3hbe</link>
      <guid>https://dev.to/rudderstack/rudderstacks-transformations-api-3hbe</guid>
      <description>&lt;p&gt;RudderStack Transformations let you transform any data that you send through RudderStack. You can use them across Event Stream, Warehouse Actions, and Cloud Extract pipelines. They are easy to build, debug, and manage; and they run in real-time, after data collection and before it is delivered to your destination. Simply put, they're data transformations that work like you think they should.&lt;/p&gt;

&lt;p&gt;Although Transformations is one of the most popular RudderStack features, its API wasn't accessible to users -- until now. We are pleased to release the RudderStack Transformations API. With it, you can programmatically add and remove transformations to the platform, create an organization-wide sandbox where your team can store transformations before publishing them to the live environment, define libraries, and version control your transformations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-rudderstack-transformations-api"&gt;
  &lt;/a&gt;
  What is the RudderStack Transformations API?
&lt;/h2&gt;

&lt;p&gt;The Transformations API allows you to perform various operations on your transformations and libraries via HTTP API calls. The API is integrated with the RudderStack UI so that you can easily access and manage your transformations and libraries. You can even publish multiple transformations in a single operation, functionality that is not yet available on the RudderStack UI.&lt;/p&gt;

&lt;p&gt;The Transformations API is a RESTful API. It lets you create and use a transformation and get a JSON object as a response. You can leverage the standard HTTP response codes to determine the success or failure of your API requests.&lt;/p&gt;

&lt;p&gt;Some other key features of the Transformations API include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Lets you version control all your transformations so that every change in a transformation creates a new version.&lt;/li&gt;
&lt;li&gt;  Lets you store your transformations in an organization-wide sandbox before publishing them.&lt;/li&gt;
&lt;li&gt;  Works with Transformation libraries -- modular, reusable JavaScript blocks which you can use in transformations.&lt;/li&gt;
&lt;li&gt;  Authenticates via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication/"&gt;Basic HTTP Authentication&lt;/a&gt; mechanism.&lt;/li&gt;
&lt;li&gt;  Checks for successful compilation and execution of new transformations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#crud-operations-on-transformations"&gt;
  &lt;/a&gt;
  CRUD Operations on Transformations
&lt;/h2&gt;

&lt;p&gt;The Transformations API allows you to perform the standard CRUD (Create, Retrieve, Update, Delete) operations on your transformations.&lt;/p&gt;

&lt;p&gt;Typically, you can create a transformation and get a JSON object as a response. Updating the transformation with any changes creates a new version or revision. The API also offers an optional parameter (&lt;code&gt;publish)&lt;/code&gt; for these operations, which allows you to publish the latest version of the transformation and make the code live for the incoming event traffic.&lt;/p&gt;

&lt;p&gt;The API assigns an ID to every published transformation. You can leverage this ID to retrieve, update or delete a transformation. Also, you can get all the revisions made to that transformation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-control"&gt;
  &lt;/a&gt;
  Version Control
&lt;/h2&gt;

&lt;p&gt;The API creates a new version of the transformation or the library with every change, allowing you to track the whole lineage of that transformation/library.&lt;/p&gt;

&lt;p&gt;The way the Transformations API implements version control is quite interesting. Let's say you create a transformation. Any update or change in it causes RudderStack to save the older version of the transformation as a revision. You can make multiple such changes to the transformation, and the API will record every such revision, while the current version is always available for you to publish and use. The API also allows you to roll back and use any specific version of the transformation you want to publish via its Publish API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transformation-libraries"&gt;
  &lt;/a&gt;
  Transformation Libraries
&lt;/h2&gt;

&lt;p&gt;The Transformation API exposes libraries for a better development workflow for your transformations. They give you the flexibility to reuse and maintain different versions of your transformation code while sparing you manual, repetitive coding work.&lt;/p&gt;

&lt;p&gt;As mentioned above, these libraries are JavaScript functions that you can write, export, and reuse. Let's say you write a function that you want to reuse across multiple transformations configured per destination in RudderStack. All you have to do is export it and import the module by the library name in the desired transformation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can apply all the CRUD operations mentioned in the above section to the libraries as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information and technical details on using the RudderStack Transformations API, check out the &lt;a href="https://docs.rudderstack.com/adding-a-new-user-transformation-in-rudderstack/"&gt;docs&lt;/a&gt;. We've also built some handy transformation templates that you can use to create your transformations. Find them in our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>api</category>
      <category>rudderstack</category>
      <category>datatransformation</category>
      <category>datawarehouse</category>
    </item>
    <item>
      <title>Serverless مقدمة عن </title>
      <author>Mohammed Ismaeel</author>
      <pubDate>Tue, 07 Dec 2021 13:03:07 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/serverless-mqdm-n-2bjb</link>
      <guid>https://dev.to/awsmenacommunity/serverless-mqdm-n-2bjb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#serverless-%D9%85%D8%A7-%D9%87%D9%88-%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  Serverless ما هو ال
&lt;/h2&gt;

&lt;p&gt;مجموعة من الخدمات السحابية التي  تتيحُ لك                                     بناء وتشغيل التطبيقات والخدمات دون الحاجة إلى التفكير بالسيرفير&lt;br&gt;&lt;br&gt;
&lt;br&gt;                                  الحوسبة بدون خوادم او سيرفرات تتيح للمطور بناء وتشغيل التطبيقات والخدمات دون الحاجة الى التفكير بالخوادم. ان خدمات السيرفيرلس لا تتطلب منك تجهيز او ادارة او توسيع البنية التحتية. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
يمكن استخدام خدمات السيرفيرلس تقريبا في جميع المجالات كاتطوير المواقع او تطوير تطبيقات الموبايل او في الذكاء الصناعي &lt;br&gt;
&lt;br&gt;                              تعتبر خدمات السيرفرلس اقتصاديه جدا فانت كمظور لا تدفع للخدمه اذا كانت في الوضع الخامل انت تدفع فقط في حالة استعمال الخدمة وهذا شي رائع بالنسبة للشركات الصغيرة او الناشئة او في حال كنت تريد ان تجرب شي جديد&lt;br&gt;&lt;br&gt;
&lt;br&gt;                          من الجدير بالذكر ان جميع التحديثات الامنية وتوفر الخدمة على مدار الساعة هي مسؤولية مزود الخدمة. ان تطوير او بناء خدمات بتقنية السيرفرلس تساعد الموطورين على التركيز على المنتج النهائي وهذا يؤدي الى سرعة الوصول الى السوق والمستخدم  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-services-%D9%85%D8%A7-%D9%87%D9%8A"&gt;
  &lt;/a&gt;
  Serverless services ما هي
&lt;/h2&gt;

&lt;p&gt;تنقسم الى ثلاثة اقسام كما مبين ادناه&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-compute"&gt;
  &lt;/a&gt;
  1. Compute
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;AWS Fargate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-integration"&gt;
  &lt;/a&gt;
  2. Integration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;EventBridge&lt;/li&gt;
&lt;li&gt;Step Function&lt;/li&gt;
&lt;li&gt;SQS&lt;/li&gt;
&lt;li&gt;SNS&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;AppSync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-data-store"&gt;
  &lt;/a&gt;
  3. Data Store
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;RDS Proxy&lt;/li&gt;
&lt;li&gt;Aurora Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#serverless-%D9%85%D8%A7-%D9%87%D9%8A-%D8%A7%D9%81%D8%B6%D9%84-%D8%A7%D8%B3%D8%AA%D8%AE%D8%AF%D9%85%D8%A7%D8%AA-%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  Serverless ما هي افضل استخدمات ال
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;معالجة الملفات&lt;/li&gt;
&lt;li&gt;معالجة البيانات&lt;/li&gt;
&lt;li&gt;ألشبكات&lt;/li&gt;
&lt;li&gt;انترنت الاشياء&lt;/li&gt;
&lt;li&gt;تطبيقات الويب والمحمول&lt;/li&gt;
&lt;li&gt;تطبيقات قائمة على الأحداث Event Driven Application&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%D9%81%D9%8A%D8%AF%D9%8A%D9%88-%D8%AA%D8%B9%D9%84%D9%8A%D9%85%D9%8A"&gt;
  &lt;/a&gt;
  فيديو تعليمي
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=c2jS5HOEz7U&amp;amp;list=PLOoZRfEtk6kVk4xHNFi_4cukuzsL-BNz3"&gt;youtube 1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=OpcLz3BHO34&amp;amp;list=PLOoZRfEtk6kVk4xHNFi_4cukuzsL-BNz3&amp;amp;index=3"&gt;youtube 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D8%B1%D9%88%D8%A7%D8%A8%D8%B7-%D8%B0%D8%A7%D8%AA-%D8%B5%D9%84%D8%A9"&gt;
  &lt;/a&gt;
  روابط ذات صلة
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://serverlessland.com/"&gt;Serverless Land&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/serverless/"&gt;AWS Serverless Services&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/event-driven-architecture/"&gt;Event-Driven Architecture&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.serverless.com/"&gt;Serverless Framework&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>career</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Start using JSON Schema validation with AJV</title>
      <author>Clara Dios</author>
      <pubDate>Tue, 07 Dec 2021 12:58:03 +0000</pubDate>
      <link>https://dev.to/dcsl-guidesmiths/start-using-json-schema-validation-with-ajv-21c6</link>
      <guid>https://dev.to/dcsl-guidesmiths/start-using-json-schema-validation-with-ajv-21c6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why JSON Schema validation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main advantage you get from JSON Schema over other validation options is that it's cross-platform. JSON Schema validators can be found for almost every programming language. This means that you can write a JSON Schema, and use it on the frontend and the backend no matter the language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait, what is a JSON Schema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://json-schema.org/"&gt;https://json-schema.org/&lt;/a&gt; JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.&lt;/p&gt;

&lt;p&gt;Let's start validating something. Imagine we have a collection of emojis:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:smiling_face_with_tear:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone is laughing to tears&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:slightly_smiling_face:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🙂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone is happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone wants to make a passive aggressive statement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:middle_finger:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🖕&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disagreement in a strong way with someone or something&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;go f*** yourself&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:gem:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It means diamond, wealth, marriage, and jewelry. It is mostly used to suggest marriage engagements, expensiveness, and aristocracy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A schema that would help us to validate the elements of this collection would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meanings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's a bit too generic. Let's add more information about each property inside the object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meaning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can go further by adding information about the schema itself, such as a title and a description. We can also limit the number of properties allowed. Additionally, when the property has the type "integer" we can specify a range of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emoji - English translator schema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Here you can add some info about the schema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meanings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The emoji's official name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If the emoji can be used without fear in a formal context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The different interpretations of that emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emotional intensity from 0 - 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now, how do we get a validation output using the schema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first let's choose a validation library. Here you can find different validators for different languages: &lt;a href="https://json-schema.org/implementations.html"&gt;https://json-schema.org/implementations.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we are going to use AJV for node.js: &lt;a href="https://ajv.js.org/"&gt;https://ajv.js.org/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's create a simple project. You can find the code here: &lt;a href="https://github.com/claradios/json-schema-validation-sample"&gt;https://github.com/claradios/json-schema-validation-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The structure will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQrUgLqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btybd4lpvbcyywuikxx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQrUgLqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btybd4lpvbcyywuikxx7.png" alt="project structure" width="193" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will need to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add node &lt;code&gt;npm init&lt;/code&gt; on the root folder.&lt;/li&gt;
&lt;li&gt;install the AJV JSON-Schema validation library &lt;code&gt;npm i ajv&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;inside &lt;code&gt;index.js&lt;/code&gt; import it, and create an &lt;code&gt;AJV&lt;/code&gt; instance.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to import our collection to validate and the schema we have created for that purpose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./schemas/emoji.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emojiCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./emojiCollection.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And validate as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// index.js&lt;/span&gt;

&lt;span class="nx"&gt;emojiCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;emojiItem&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// loop collection elements for validation&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;validation&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`emoji: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is correctly built`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`emoji: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has the following errors: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ajv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that AJV will return by default the first error it finds. If we want to get all errors we pass the following when instantiating:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ajv = new Ajv({ allErrors: true })&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now we are ready to run our code (&lt;code&gt;node index.js&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;) and see the validation output on a terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWkUFV9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5q1nolsp4vrerlr7g73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWkUFV9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5q1nolsp4vrerlr7g73.png" alt="validation logs on terminal" width="801" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first three elements of our collection seem to be perfectly fine but the diamond has several problems:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_7ToNu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38x7fbuv8cw5uv7cyj8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_7ToNu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38x7fbuv8cw5uv7cyj8g.png" alt="diamond validation logs" width="477" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work with errors output and make them human-readable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given that the error output for a given element can bring a huge amount of information we may want to reshape what those errors look like, in order to make them easier to read. If so, we can install: &lt;code&gt;npm install ajv-errors&lt;/code&gt; to our schema and adjust our imports like this and then add the keyword &lt;code&gt;errorMessage&lt;/code&gt;to our schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;allErrors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Ajv option allErrors is required&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv-errors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="cm"&gt;/*, {singleError: true} */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can, for example, create specific messages for each keyword to make them more understandable, or return a single message that communicates the core error in a simpler way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be an object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will not replace internal "type" error for the properties listed above&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a string property 'emojiName'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a boolean property 'polite'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have an array of strings property 'meanings'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have an integer property 'emotionalIntensity'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a string property 'symbol'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;additionalProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should not have properties other than emojiName, polite, meanings, emotionalIntensity, symbol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's next and what can AJV be used for?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a real-life example, Disco is a backend project I am working on. It is based on microservices architecture that translates XML files into JSON and serves them through an API to be rendered.&lt;/p&gt;

&lt;p&gt;During the translation process, the JSON schema validator verifies that the resulting JSON files are valid and consistent to continue through the chain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We have created different instances of AJV. Each instance contains a collection of several schemas. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some schemas are used inside others. That is possible thanks to a &lt;code&gt;$ref&lt;/code&gt; property that allows you to create links between them. This also helps us to recursively validate content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have wrapped the AJV library into our own custom library and published as an NPM package so we can install it in several parts of the chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have visually documented our schemas in a React.js + d3.js that renders all the schemas and properties our content should match. This in fact could be the subject of another article.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all for now, hope it was useful, cheers!&lt;/p&gt;

</description>
      <category>node</category>
      <category>ajv</category>
      <category>json</category>
      <category>validation</category>
    </item>
    <item>
      <title>Simplifying Event Filtering and Value Aggregation with RudderStack</title>
      <author>RudderStack</author>
      <pubDate>Tue, 07 Dec 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</link>
      <guid>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</guid>
      <description>&lt;p&gt;Dealing with event data is dirty work at times. Developers may transmit events with errors because of a change a developer made. Also, sometimes errors could be introduced if the data engineering team decides to change something on the data warehouse schema. Due to these changes to the schema, data type conflict may occur. How can someone deal with all the different event data issues that might arise in a production environment? This blog discusses how &lt;a href="http://www.rudderstack.com/"&gt;RudderStack&lt;/a&gt; handles event filtering and value aggregation without introducing manual errors.&lt;/p&gt;

&lt;p&gt;RudderStack's solution is a sophisticated mechanism. Here, you can implement custom logic using JavaScript to define transformations. You can apply these transformations to the incoming events.&lt;/p&gt;

&lt;p&gt;Having an expressive environment like RudderStack offers endless possibilities of how a data engineering team can interact with the data. In this blog post, we will explore just two of the most common use cases we've encountered among the RudderStack community. Event filtering and value aggregation are universal, simple to implement, yet very powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-transformation-for-event-filtering-and-value-aggregation"&gt;
  &lt;/a&gt;
  User Transformation for Event Filtering and Value Aggregation
&lt;/h2&gt;

&lt;p&gt;You can define user transformations in the Configuration Plane of your RudderStack setup. Few sample user transformations are available on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt;. This blog provides an insight into one such sample transformation that you can use for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Event Filtering: This stops events from passing to a destination. You might need to filter events where an organization employs multiple tools/platforms for addressing different business requirements. Also, you may want to route only specific events to specific tool/platform destinations.&lt;/li&gt;
&lt;li&gt;  Value Aggregation: This allows aggregation of values on specific attributes of particular event types. You might need to aggregate values where an organization is not looking to employ a tool/platform to perform transaction-level record keeping and/or analysis. Instead, they want consolidated records/analytics. So, this kind of transformation helps in reducing the network traffic, and request/message volume. This is because the system can replace multiple events of a particular type by a single event of the same type with the aggregated value(s). This transformation also helps in cost reduction, where the destination platform charges by volume of events/messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view the sample transformation on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt; page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;You need to contain all logic within the &lt;code&gt;transform&lt;/code&gt; function, which takes an array of events as input and returns an array of transformed events. The &lt;code&gt;transform&lt;/code&gt; function is the entry-point function for all user transformations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Add list of event names that you want to filter out&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;game_load_time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lobby_fps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

 &lt;span class="c1"&gt;//remove events whose name match those in above list&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above shows how you can use the &lt;code&gt;filter&lt;/code&gt; function of JavaScript arrays to filter out events based on the event name.&lt;/p&gt;

&lt;p&gt;A variation of this code is also possible. Here, the values in the array of event names are the ones you &lt;em&gt;want&lt;/em&gt; to retain, and you remove the not (&lt;code&gt;!&lt;/code&gt;) condition from the &lt;code&gt;return&lt;/code&gt; statement in the penultimate line.&lt;/p&gt;

&lt;p&gt;Below code shows event removal based on a simple check like event name match but more complex logic involving checking the presence of value for a related attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the above examples, you can use the filtered array available as output from one step as the input to the next. As a result, you can daisy-chain the transformation conditions.&lt;/p&gt;

&lt;p&gt;Finally, the following code shows how you can prepare aggregates for specific attributes across events of a particular type present in a batch. After this, the code returns a single event of the concerned type. Also, the code returns the aggregated values for the corresponding attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In the above snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, the code collects the &lt;code&gt;spin_result&lt;/code&gt; events into an array.&lt;/li&gt;
&lt;li&gt;  Then, the code aggregates the values for three attributes -- &lt;code&gt;bet_amount&lt;/code&gt;, &lt;code&gt;win_amount&lt;/code&gt;, and &lt;code&gt;no_of_spin&lt;/code&gt; by iterating over the elements of the above array.&lt;/li&gt;
&lt;li&gt;  After this, the system assigns the aggregated values to the respective attributes of the first &lt;code&gt;spin_result&lt;/code&gt; event in the array.&lt;/li&gt;
&lt;li&gt;  Now, the code separates the events that are not of the target type (&lt;code&gt;spin_result&lt;/code&gt; in this case) into another array. If there were no such events, an empty array is created.&lt;/li&gt;
&lt;li&gt;  Finally, the system adds the &lt;code&gt;single spin_result&lt;/code&gt; event to the array created in the previous step, and the result is returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>eventfiltering</category>
      <category>valueaggregation</category>
      <category>eventdata</category>
      <category>rudderstack</category>
    </item>
    <item>
      <title>Creating Super Buttons for Like, Share and Subscribe</title>
      <author>Mohit Maroliya</author>
      <pubDate>Tue, 07 Dec 2021 12:46:59 +0000</pubDate>
      <link>https://dev.to/mohitm15/creating-super-buttons-for-like-share-and-subscribe-gef</link>
      <guid>https://dev.to/mohitm15/creating-super-buttons-for-like-share-and-subscribe-gef</guid>
      <description>&lt;p&gt;Whenever you watches any YouTube video, I'm sure you have come across the terms &lt;code&gt;Like&lt;/code&gt;, &lt;code&gt;Share&lt;/code&gt; and &lt;code&gt;Subscribe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I wanted to create a cool &lt;code&gt;html-css&lt;/code&gt; button that represents the feeling of Like-Share-Subscribe.&lt;/p&gt;

&lt;p&gt;For this we require a html file &lt;code&gt;index.html&lt;/code&gt;, css file &lt;code&gt;style.css&lt;/code&gt; and javaScript file &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The end result for &lt;code&gt;Like&lt;/code&gt; button is like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fill-heart-ldp1v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-input-structure"&gt;
  &lt;/a&gt;
  Setting up the input structure
&lt;/h2&gt;

&lt;p&gt;Lets get started by setting up the basic structure. We had used &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; of type &lt;code&gt;checkbox&lt;/code&gt; here which is also known as &lt;code&gt;toggle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So for our &lt;code&gt;index.html&lt;/code&gt; file, all we need is the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;label id="Likebtn" for="myBtn" class="star-button" onclick="fillheart()"&amp;gt;
      &amp;lt;input type="checkbox" id="myBtn" /&amp;gt;
      &amp;lt;div class="heart"&amp;gt;
        &amp;lt;i id="un-filled-heart" class="far fa-heart"&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="btn-text"&amp;gt;
        &amp;lt;span&amp;gt;Like&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;Liked&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="active-heart"&amp;gt;
        &amp;lt;i class="fas fa-heart"&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/label&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;script src="src/index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: just define the fillheart() function with a console.log statement as of now in &lt;code&gt;index.js&lt;/code&gt; or under &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since, we have defined the &lt;code&gt;ids&lt;/code&gt; and &lt;code&gt;classes&lt;/code&gt; for the html components, so now its time to add some styling and animations to them. 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-styles"&gt;
  &lt;/a&gt;
  Adding the Styles
&lt;/h2&gt;

&lt;p&gt;We first add styling to input checkbox, label (&lt;em&gt;star-button&lt;/em&gt;) and the icon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I have used the &lt;code&gt;cdn&lt;/code&gt; link of &lt;strong&gt;FontAwesome&lt;/strong&gt; to use the icons. Check &lt;a href="https://fontawesome.com/v5.15/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont"&gt;here&lt;/a&gt; for the cdn link.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  height: 50vh;
  display: grid;
  place-items: center;
  overflow: hidden;
  background: rgb(218, 216, 216);
}

input {
  display: none;
}

.star-button {
  position: relative;
  width: 250px;
  height: 85px;
  margin-top: 70px;
  border-radius: 15px;
  cursor: pointer;
  background: rgb(255, 255, 255);
  z-index: 2;
  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.096);
}

.heart {
  position: absolute;
  left: 15%;
  top: 55%;
  font-size: 45px;
  transform: translateY(-50%);
  color: rgb(196, 196, 196);
  z-index: 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we add some styling to the text over the button and on the span component of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.btn-text {
  position: absolute;
  left: 50%;
  width: 130px;
  height: 100%;
  background: rgb(228, 51, 66);
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  border-radius: 15px;
  overflow-x: hidden;
}

.btn-text span{
  color: rgb(255, 255, 255);
  transform: translateX(55%);
  font-size: 35px;
  padding: 20px;
  font-family: "sans-serif";
  transition: 0.2s;
  user-select: none;
}

.active-heart {
  position: absolute;
  right: 15%;
  top: 20%;
  font-size: 50px;
  z-index: -1;
  color: rgb(219, 219, 219);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we add the styling to all the corresponding components when the &lt;em&gt;input checkbox is checked.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input:checked + .heart {
  animation: move 0.7s ease-in forwards;
  color: rgb(228, 51, 66);
}

input:checked ~ .active-heart {
  color: rgb(228, 51, 66);
  transition-delay: 0.7s;
  animation: shake 0.8s 0.2s forwards;
  animation-delay: 0.7s;
}

input:checked ~ .btn-text span {
  transform: translateX(-45%);
  transition-delay: 0.7s;
}

input:checked ~ .btn-text {
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you observed that we have used two types of animation named &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;shake&lt;/code&gt; for the icon heart. So now we define the above-mentioned animation using &lt;a href="https://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp"&gt;keyframes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#move-animation"&gt;
  &lt;/a&gt;
  move animation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes move {
  10% {
    transform: translateX(-330%) scale(1.2);
    left: 20%;
    opacity: 1;
  }
  30% {
    transform: translateY(150%);
  }
  50% {
    transform: translateX(300%);
    opacity: 1;
  }
  75% {
    transform: translateY(200%);
    left: 65%;
    opacity: 1;
  }
  85% {
    left: 70%;
  }
  100% {
    transform: translateY(-600%);
    left: 70%;
    opacity: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shake-animation"&gt;
  &lt;/a&gt;
  shake animation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes shake {
  0% {
    transform: scale3d(1, 1, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  30% {
    transform: scale3d(1.25, 0.75, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  40% {
    transform: scale3d(0.75, 1.25, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  50% {
    transform: scale3d(1.15, 0.85, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  65% {
    transform: scale3d(0.95, 1.05, 1);
    text-shadow: 0 0 2px #ff0000, 0 0 5px #0000ffb7;
  }
  75% {
    transform: scale3d(1.05, 0.95, 1);
    text-shadow: 0 0 1px #ff0000, 0 0 5px #0000ff83;
  }
  100% {
    transform: scale3d(1, 1, 1);
    text-shadow: 0 0 1px rgb(153, 151, 151), 0 0 5px rgb(174, 174, 179);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we only left to add javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-javascript-logic"&gt;
  &lt;/a&gt;
  Adding JavaScript Logic
&lt;/h2&gt;

&lt;p&gt;Either create a seperate &lt;code&gt;index.js&lt;/code&gt; file or write within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; in index.html .&lt;/p&gt;

&lt;p&gt;Add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let myBtn = document.getElementById("myBtn");

    function fillheart() {
      if (myBtn.checked === 1) {
        document
          .getElementById("un-filled-heart")
          .setAttribute("class", "fas fa-heart");
      } else {
        document
          .getElementById("un-filled-heart")
          .setAttribute("class", "far fa-heart");
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Cheers! 🍻, you have build the &lt;code&gt;SuperLike&lt;/code&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fill-heart-ldp1v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you can come up with as many stylings to this small application. You can take up some challenges by making &lt;code&gt;SuperShare&lt;/code&gt; and &lt;code&gt;SuperSubcribe&lt;/code&gt; button as given below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supershare"&gt;
  &lt;/a&gt;
  SuperShare
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/delicate-feather-bvu7b"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supersubscribe"&gt;
  &lt;/a&gt;
  SuperSubscribe
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/subscribe-button-roukv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for your time. Since this is my second post, please share your valuable feedback in comments also.&lt;/p&gt;

&lt;p&gt;Happy Coding ! ☘️&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 10 DevOps Tools You Should Know</title>
      <author>Kuldeep Tarapara</author>
      <pubDate>Tue, 07 Dec 2021 12:31:40 +0000</pubDate>
      <link>https://dev.to/kuldeeptarapara/top-10-devops-tools-you-should-know-4nb8</link>
      <guid>https://dev.to/kuldeeptarapara/top-10-devops-tools-you-should-know-4nb8</guid>
      <description>&lt;p&gt;DevOps is a method to integrate IT operations and software development. So, in this article, we will see the Top 10 DevOps Tools You Should Know for Flutter App Development.&lt;/p&gt;

&lt;p&gt;Top 10 DevOps Tools You Should Know.&lt;br&gt;
DevOps allows businesses to use automation to release new software and make changes to their users as soon as possible. Due to the rapid adoption of DevOps practices, the demand for DevOps tools is very high. DevOps software tools ensure that automation, transparency, and collaboration are top priorities.&lt;/p&gt;

&lt;p&gt;These tools provide teams with a variety of options for efficiently sharing and exchanging data and technical knowledge among all involved parties in order to develop efficient products. Nowadays, many DevOps automation tools are available to suit your DevOps needs. Take a look at these important DevOps automation tools for 2021!&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Kubernetes or K8s&lt;/strong&gt;&lt;br&gt;
Kubernetes is an open-source system to automate the deployment, scaling, and management of containerized applications. This open-source system treats containers extensively and seeks to take containerization to another level. Manage containerized apps in logical units to facilitate discovery and management, scaling, and deployment automation.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Docker&lt;/strong&gt;&lt;br&gt;
Docker is a lightweight DevOps tool that uses a combination of methods to simplify and accelerate various SDLC workflows. A Docker container image is an applicable standalone package that contains everything you need to run your app. You can access the container using the Docker Engine. This allows the app to run in a remote environment.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Nagios&lt;/strong&gt;&lt;br&gt;
This is another popular DevOps tool that acts as a watchdog for your infrastructure and your entire system. The IT infrastructure monitoring team uses Nagios to troubleshoot infrastructure-related issues and provide solutions before the team is at risk. Therefore, monitor databases, networks, logs, apps, and event logs.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;Ansible&lt;/strong&gt;&lt;br&gt;
This tool was developed for automation processes and collaboration. Increase productivity by helping you integrate and automate testing, development, performance management, and deployment. Ansible makes it easy to automate the entire IT process and app lifecycle. Ansible contains several modules to enable various apps. You can avoid complexity at all stages.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;Git&lt;/strong&gt;&lt;br&gt;
Git is one of the most affordable tools for open-source workers and remote teams. It is also one of the most popular and widely used DevOps tools. This is a distributed source code management (SCM) tool that developers can use to track the progress of app development by maintaining different source code versions.&lt;/p&gt;

&lt;p&gt;Developers can easily revert to previous versions if needed. BitBucket and GitHub are currently two popular hosting services in Git repositories. BitBucket provides an unlimited private repository for teams of up to 5 members. GitHub, on the other hand, only provides free access to public repositories.&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;Puppet&lt;/strong&gt;&lt;br&gt;
This open-source tool is designed to quickly monitor, manage, and maintain your infrastructure. As the most successful cross-platform configuration management tool, Puppet can be deployed safely and quickly. It’s also the perfect DevOps program for handling multiple servers.&lt;/p&gt;

&lt;p&gt;The puppet contains a master/slave infrastructure. It allows you to manage many resources and teams. Includes various modules that facilitate problem management and combine with other popular DevOps tools. By treating the entire infrastructure as code, Puppet can automate infrastructure management.&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;Selenium&lt;/strong&gt;&lt;br&gt;
Selenium is primarily used to automate web-based apps. You can automate testing and management tasks for web-based apps. It consists of three main components.&lt;/p&gt;

&lt;p&gt;Grid Run tests on different devices to extend your testing work and handle many environments from the core.&lt;br&gt;
IDE is a Firefox and Chrome add-on that makes it easy to record and play browser actions.&lt;br&gt;
You can create your own browser-based regression automation suite to help you examine WebDriver scripts and distribute them to multiple sources.&lt;br&gt;
8) &lt;strong&gt;Prometheus&lt;/strong&gt;&lt;br&gt;
Prometheus is an open-source community-driven toolkit for monitoring systems and performance. It is based on a time-series data model and generates warnings based on this. In addition, it also supports container monitoring. The Prometheus monitoring process is widely used by the entire DevOps team and cloud organizations.&lt;/p&gt;

&lt;p&gt;9) &lt;strong&gt;Splunk&lt;/strong&gt;&lt;br&gt;
This DevOps tool provides a great analytical solution with a functional understanding that gives the DevOps team operational awareness. This allows you to compare logs from various sources such as devices, websites, and applications that are part of your entire IT infrastructure to identify problems. Splunk is the perfect platform for a smooth entry into IoT integration. It collects and interprets data and provides insights to help you make systematic business decisions.&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;Jenkins&lt;/strong&gt;&lt;br&gt;
Jenkins is a persistent built-in server tool that you can use to run various jobs repeatedly. This software is provided on the main server where the software development takes place. As the leading open source automation server, the Jenkins automation engine allows DevOps teams to easily access and integrate project changes and quickly identify problems. Jenkins is tailored for projects of all sizes and complexity. Written in Java. Jenkins has hundreds of add-ons and plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;br&gt;
There are many DevOps tools are available for DevOps development. In this article, we have listed the Top 10 DevOps Tools You Should Know. The choice of tool which you want to choose will depend on the teams involved and the environment.&lt;/p&gt;

&lt;p&gt;Do let us know your feedback/comments on the same. Flutter Agency is the best &lt;a href="https://flutteragency.com/"&gt;&lt;strong&gt;Flutter App development company&lt;/strong&gt;&lt;/a&gt; dedicated to Flutter Technology and Flutter Developers. The portal is full of cool resources from Flutter like Flutter Widget Guide, Flutter Projects, Code libs and etc. So, contact us for your next project.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>splunk</category>
      <category>flutter</category>
    </item>
    <item>
      <title>How to join MySQL and Postgres in a live materialized view</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 07 Dec 2021 12:27:48 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-join-mysql-and-postgres-in-a-live-materialized-view-5864</link>
      <guid>https://dev.to/bobbyiliev/how-to-join-mysql-and-postgres-in-a-live-materialized-view-5864</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a self-contained demo using &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This demo would show you how to use Materialize to join MySQL and Postgres in a live materialized view. &lt;/p&gt;

&lt;p&gt;For this demo, we are going to monitor the orders on our demo website and generate events that could, later on, be used to send notifications when a cart has been abandoned for a long time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUmRZ6JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143267063-2dbb1ec2-d48d-4ba5-8da8-f0d9ac1404e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUmRZ6JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143267063-2dbb1ec2-d48d-4ba5-8da8-f0d9ac1404e4.png" alt="mz-abandoned-cart-demo" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you need to make sure that you have Docker and Docker Compose installed.&lt;/p&gt;

&lt;p&gt;You can follow the steps here on how to install Docker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://materialize.com/docs/third-party/docker/"&gt;Installing Docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;As shown in the diagram above we will have the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A mock service to continually generate orders.&lt;/li&gt;
&lt;li&gt;The orders would be stored in a MySQL database.&lt;/li&gt;
&lt;li&gt;As the database writes occur, Debezium streams the changes out of MySQL to a Redpanda topic.&lt;/li&gt;
&lt;li&gt;We also would have a Postgres database where we would get our users from.&lt;/li&gt;
&lt;li&gt;We would then ingest this Redpanda topic into Materialize directly along with the users from the Postgres database.&lt;/li&gt;
&lt;li&gt;In Materialize we will join our orders and users together, do some filtering and create a materialized view that shows the abandoned cart information.&lt;/li&gt;
&lt;li&gt;We will then create a sink to send the abandoned cart data out to a new Redpanda topic.&lt;/li&gt;
&lt;li&gt;You could, later on, use the information from that new topic to send out notifications to your users and remind them that they have an abandoned cart.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;As a side note here, you would be perfectly fine using Kafka instead of Redpanda. I just like the simplicity that Redpanda brings to the table, as you can run a single Redpanda instance instead of all of the Kafka components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-the-demo"&gt;
  &lt;/a&gt;
  Running the demo
&lt;/h2&gt;

&lt;p&gt;First, start by cloning the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-abandoned-cart-demo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you can access the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-abandoned-cart-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start by first running the Redpanda container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d redpanda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, start all of the services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to Launch the Materialize CLI, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is just a shortcut to a docker container with &lt;code&gt;postgres-client&lt;/code&gt; pre-installed, if you already have &lt;code&gt;psql&lt;/code&gt; you could run &lt;code&gt;psql -U materialize -h localhost -p 6875 materialize&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-a-materialize-kafka-source"&gt;
  &lt;/a&gt;
  Create a Materialize Kafka Source
&lt;/h3&gt;

&lt;p&gt;Now that you're in the Materialize CLI, let's define the &lt;code&gt;orders&lt;/code&gt; tables in the &lt;code&gt;mysql.shop&lt;/code&gt; database as Redpanda sources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;'mysql.shop.orders'&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;
&lt;span class="n"&gt;ENVELOPE&lt;/span&gt; &lt;span class="n"&gt;DEBEZIUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to check the available columns from the &lt;code&gt;orders&lt;/code&gt; source by running the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would be able to see that, as Materialize is pulling the message schema data from the Redpanda registry, it knows the column types to use for each attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="n"&gt;name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;nullable&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="k"&gt;type&lt;/span&gt;
&lt;span class="c1"&gt;--------------+----------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;user_id&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;order_status&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
 &lt;span class="n"&gt;price&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;
 &lt;span class="n"&gt;created_at&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
 &lt;span class="n"&gt;updated_at&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-materialized-views"&gt;
  &lt;/a&gt;
  Create materialized views
&lt;/h3&gt;

&lt;p&gt;Next, we will create our first Materialized View, to get all of the data from the &lt;code&gt;orders&lt;/code&gt; Redpanda source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;orders_view&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;order_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;revenue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders_view&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;order_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now use &lt;code&gt;SELECT * FROM abandoned_orders;&lt;/code&gt; to see the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information on creating materialized views, check out the &lt;a href="https://materialize.com/docs/sql/create-materialized-view/"&gt;Materialized Views&lt;/a&gt; section of the Materialize documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-postgres-source"&gt;
  &lt;/a&gt;
  Create Postgres source
&lt;/h3&gt;

&lt;p&gt;There are two ways to create a Postgres source in Materialize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Debezium just like we did with the MySQL source.&lt;/li&gt;
&lt;li&gt;Using the Postgres Materialize Source, which allows you to connect Materialize direct to Postgres so you don't have to use Debezium.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this demo, we will use the Postgres Materialize Source just as a demonstration on how to use it, but feel free to use Debezium instead.&lt;/p&gt;

&lt;p&gt;To create a Postgres Materialize Source run the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="nv"&gt;"mz_source"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;POSTGRES&lt;/span&gt;
&lt;span class="k"&gt;CONNECTION&lt;/span&gt; &lt;span class="s1"&gt;'user=postgres port=5432 host=postgres dbname=postgres password=postgres'&lt;/span&gt;
&lt;span class="n"&gt;PUBLICATION&lt;/span&gt; &lt;span class="s1"&gt;'mz_source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the above statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MATERIALIZED&lt;/code&gt;: Materializes the PostgreSQL source’s data. All of the data is retained in memory and makes sources directly selectable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mz_source&lt;/code&gt;: The name for the PostgreSQL source.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONNECTION&lt;/code&gt;: The PostgreSQL connection parameters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUBLICATION&lt;/code&gt;: The PostgreSQL publication, containing the tables to be streamed to Materialize.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we've created the PostgreSQL source, in order to be able to query the PostgreSQL tables, we would need to create views that represent the upstream publication’s original tables. In our case, we only have one table called &lt;code&gt;users&lt;/code&gt; so the statement that we would need to run is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;mz_source&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the available views execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;FULL&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you can query the new views directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's go ahead and create a few more views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-kafka-sink"&gt;
  &lt;/a&gt;
  Create Kafka sink
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-sink/"&gt;Sinks&lt;/a&gt; let you send data from Materialize to an external source.&lt;/p&gt;

&lt;p&gt;For this Demo, we will be using &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redpanda is a Kafka API-compatible and Materialize can process data from it just as it would process data from a Kafka source.&lt;/p&gt;

&lt;p&gt;Let's create a materialized view, that will hold all of the high volume unpaid orders:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;high_value_orders&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
      &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revenue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
      &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
      &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
      &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
      &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="n"&gt;revenue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, here we are actually joining the &lt;code&gt;users&lt;/code&gt; view which is ingesting the data directly from our Postgres source, and the &lt;code&gt;abandond_orders&lt;/code&gt; view which is ingesting the data from the Redpanda topic, together.&lt;/p&gt;

&lt;p&gt;Let's create a Sink where we will send the data of the above materialized view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SINK&lt;/span&gt; &lt;span class="n"&gt;high_value_orders_sink&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;high_value_orders&lt;/span&gt;
    &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;'high-value-orders-sink'&lt;/span&gt;
    &lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt;
    &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to connect to the Redpanda container and use the &lt;code&gt;rpk topic consume&lt;/code&gt; command, you will be able to read the records from the topic.&lt;/p&gt;

&lt;p&gt;However, as of the time being, we won’t be able to preview the results with &lt;code&gt;rpk&lt;/code&gt; because it’s AVRO formatted. Redpanda would most likely implement this in the future, but for the moment, we can actually stream the topic back into Materialize to confirm the format.&lt;/p&gt;

&lt;p&gt;First, get the name of the topic that has been automatically generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_kafka_sinks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                              &lt;span class="n"&gt;topic&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1637586945&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13670686352905873426&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For more information on how the topic names are generated check out the documentation &lt;a href="https://materialize.com/docs/sql/create-sink/#kafka-sinks"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then create a new Materialized Source from this Redpanda topic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;high_volume_orders_test&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;' high-volume-orders-sink-u12-1637586945-13670686352905873426'&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to change the topic name accordingly!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, query this new materialized view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;high_volume_orders_test&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have the data in the topic, you can have other services connect to it and consume it and then trigger emails or alerts for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metabase"&gt;
  &lt;/a&gt;
  Metabase
&lt;/h2&gt;

&lt;p&gt;In order to access the &lt;a href="https://materialize.com/docs/third-party/metabase/"&gt;Metabase&lt;/a&gt; instance visit &lt;code&gt;http://localhost:3030&lt;/code&gt; if you are running the demo locally or &lt;code&gt;http://your_server_ip:3030&lt;/code&gt; if you are running the demo on a server. Then follow the steps to complete the Metabase setup.&lt;/p&gt;

&lt;p&gt;Make sure to select Materialize as the source of the data.&lt;/p&gt;

&lt;p&gt;Once ready you will be able to visualize your data just as you would with a standard PostgreSQL database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stopping-the-demo"&gt;
  &lt;/a&gt;
  Stopping the Demo
&lt;/h2&gt;

&lt;p&gt;To stop all of the services run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, this is a very simple example of how to use Materialize. You can use Materialize to ingest data from a variety of sources and then stream it to a variety of destinations.&lt;/p&gt;

&lt;p&gt;As a second part of this demo, we will build upon the current demo and add more functionality to make represent a more realistic eCommerce website and a more realistic data pipeline.&lt;/p&gt;

&lt;p&gt;To learn more about SQL, I could suggest this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;&lt;code&gt;CREATE SOURCE: PostgreSQL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;&lt;code&gt;CREATE SOURCE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-views"&gt;&lt;code&gt;CREATE VIEWS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/select"&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>mysql</category>
      <category>postgres</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Using Elixir's "with" statement.</title>
      <author>Martin Nijboer</author>
      <pubDate>Tue, 07 Dec 2021 12:22:04 +0000</pubDate>
      <link>https://dev.to/martinthenth/using-elixirs-with-statement-5e36</link>
      <guid>https://dev.to/martinthenth/using-elixirs-with-statement-5e36</guid>
      <description>&lt;p&gt;Elixir has many features to make code readable, maintainable, and correct. One of them is the &lt;code&gt;with&lt;/code&gt; statement.   Unfortunately, the &lt;code&gt;with&lt;/code&gt; statement can be confusing to work with, because there are some hidden assumptions on how it's used.&lt;/p&gt;

&lt;p&gt;Today I will introduce you to why, where, and when you would want to use a &lt;code&gt;with&lt;/code&gt; statement, and how you can deal with some of the challenges and underlying assumptions. Additionally, you'll read about a readability and differentiation trick using annotation tuples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-worst%C2%A0case"&gt;
  &lt;/a&gt;
  1. The worst "case".
&lt;/h2&gt;

&lt;p&gt;The use-case for &lt;code&gt;with&lt;/code&gt; statements is apparent when we look at the worst &lt;code&gt;case&lt;/code&gt; statement implementation. Nesting &lt;code&gt;case&lt;/code&gt; statements quickly leads to a pyramid of unreadable code (literally! tilt your head 90°):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
              &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;

                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                        &lt;span class="ss"&gt;:error&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;

                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="ss"&gt;:error&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;

              &lt;span class="n"&gt;_email_address&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="ss"&gt;:error&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;

          &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="ss"&gt;:error&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="ss"&gt;:error&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;:error&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What this code does well, is matching all possible returns from every function that is called; therefore the code is correct.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What this code does badly, is it's unreadable for you, me, and any other developer looking at it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need something better to maintain readability, while keeping the case statement's functionality and correctness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-simple-with-statements"&gt;
  &lt;/a&gt;
  2. Simple "with" statements.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;with&lt;/code&gt; statements work like &lt;code&gt;case&lt;/code&gt; statements, but with a focus on successful function call results. The following statements are equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-handling-of-nonmatching-results"&gt;
  &lt;/a&gt;
  Implicit  handling of non-matching results.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;with&lt;/code&gt; statements do not need to handle non-matching clauses. Instead, the &lt;code&gt;with&lt;/code&gt; statement will return the non-matching clause directly to the parent scope.&lt;/p&gt;

&lt;p&gt;The Phoenix framework comes with context generators that will output controller functions with &lt;code&gt;with&lt;/code&gt; statements like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:accepted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"show.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the function &lt;code&gt;Users.create_user/1&lt;/code&gt; can return either &lt;code&gt;{:ok, user}&lt;/code&gt; or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, the clause &lt;code&gt;{:error, changeset}&lt;/code&gt; is not caught in the &lt;code&gt;with&lt;/code&gt; statement. Let's see what this &lt;code&gt;with&lt;/code&gt; statement does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the expected clause matches, because it is &lt;code&gt;{:ok, user}&lt;/code&gt;, we continue with the function inside the &lt;code&gt;with&lt;/code&gt; statement and &lt;code&gt;user&lt;/code&gt; is available within the scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the expected clause does not match, for example we receive &lt;code&gt;{:error, changeset}&lt;/code&gt;, then the result is immediately returned to the parent scope (i.e. &lt;code&gt;create/2&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the function &lt;code&gt;create/2&lt;/code&gt; returns either the result of the successful clause (an updated &lt;code&gt;conn&lt;/code&gt;) or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explicit-handling-of-nonmatching-results"&gt;
  &lt;/a&gt;
  Explicit handling of non-matching results.
&lt;/h3&gt;

&lt;p&gt;We can explicitly handle the non-matching clauses in a &lt;code&gt;with&lt;/code&gt; statement by using the &lt;code&gt;else&lt;/code&gt; clause. The &lt;code&gt;else&lt;/code&gt; clause requires us to pattern match on &lt;strong&gt;all non-matching results&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:accepted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"show.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does the same as the previous example. It will return either the result of the successful clause (an updated &lt;code&gt;conn&lt;/code&gt;) or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we are explicitly handling non-matching clauses, we must add pattern matches for &lt;strong&gt;all non-matching clauses&lt;/strong&gt; in the &lt;code&gt;else&lt;/code&gt; block. If we miss a returned clause, we will receive a &lt;code&gt;** (WithClauseError) no with clause matching&lt;/code&gt; error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the reason why Dialyzer will complain "The pattern can never match the type", because if a returned clause is not explicitly handled, it may crash the process at runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-chained-functions-in-with-statements"&gt;
  &lt;/a&gt;
  3. Chained functions in "with" statements.
&lt;/h2&gt;

&lt;p&gt;Chaining function calls in a &lt;code&gt;with&lt;/code&gt; statement is fairly straightforward. We can rewrite the "case pyramid" from the introduction by chaining the consecutive expressions in a &lt;code&gt;with&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Returns `...` or `:error`&lt;/span&gt;
&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much cleaner and shorter than the original. And with syntax-highlighting in an IDE, this code will be much more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges.
&lt;/h3&gt;

&lt;p&gt;In the previous examples, we always return &lt;code&gt;:error&lt;/code&gt; when a function call does not return the desired result. But this is rarely what we want in practice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We may want to differentiate between similar clauses in the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to handle &lt;strong&gt;all non-matching clauses&lt;/strong&gt; in the &lt;code&gt;else&lt;/code&gt; block, of &lt;strong&gt;every chained function call&lt;/strong&gt;, or we will introduce app-crashing bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dialyzer will definitely complain if any of the functions does not return an expected clause (i.e. &lt;code&gt;:error&lt;/code&gt; in this example).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-advanced-with-statements"&gt;
  &lt;/a&gt;
  4. Advanced "with" statements.
&lt;/h2&gt;

&lt;p&gt;Let's add custom error-handling, differentiation of function calls and results, and readability improvements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-errorhandling"&gt;
  &lt;/a&gt;
  Custom error-handling.
&lt;/h3&gt;

&lt;p&gt;Let's introduce some custom error-handling to the rewritten "case pyramid"in a &lt;code&gt;with&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now we can return different error messages depending on  which non-matching clause is returned.&lt;/p&gt;

&lt;p&gt;But what if the &lt;code&gt;with&lt;/code&gt; statement has multiple functions that return the same non-matching results, and we want to handle each return differently?&lt;/p&gt;

&lt;p&gt;For example, when two functions can return &lt;code&gt;false&lt;/code&gt;, and one version must return &lt;code&gt;{:error, :bad_request}&lt;/code&gt;, and the other must return &lt;code&gt;{:error, :conflict}&lt;/code&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;# Return either '{:error, :bad_request} or '{:error, :conflict}'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how we can differentiate the returned &lt;code&gt;false&lt;/code&gt; clause.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differentiating-nonmatching-clauses"&gt;
  &lt;/a&gt;
  Differentiating non-matching clauses.
&lt;/h3&gt;

&lt;p&gt;We can use a simple mathematical trick to differentiate the returned results. If &lt;code&gt;x * y = z&lt;/code&gt;, then &lt;code&gt;x * y + c = z + c&lt;/code&gt; must be true as well. Therefore we can add some annotation tuples to the function calls and clauses, and write the previous example as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using tuples on both sides of the function calls, we can differentiate the returning values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-readability-for-large-with-statements"&gt;
  &lt;/a&gt;
  Improving readability for large "with" statements.
&lt;/h3&gt;

&lt;p&gt;We can improve readability of large &lt;code&gt;with&lt;/code&gt; statements by using the trick from the previous section. That is, by annotating function calls and pattern matches in the &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; block with tuples.&lt;/p&gt;

&lt;p&gt;Let's rewrite the "case pyramid" &lt;code&gt;with&lt;/code&gt; statement with annotation tuples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:user_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:user_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this &lt;code&gt;with&lt;/code&gt; statement we chain six functions, and add the following tuples to make the code more readable: &lt;code&gt;{:is_email, _}&lt;/code&gt;, &lt;code&gt;{:is_code, _}&lt;/code&gt;, &lt;code&gt;{:confirmation_fetch, _}&lt;/code&gt;, &lt;code&gt;{:email_fetch, _}&lt;/code&gt;, &lt;code&gt;{:user_create, _}&lt;/code&gt;, and &lt;code&gt;{:email_create, _}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once again, in an IDE with syntax-highlighting this will look much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-common-issues-and-how-to-solve%C2%A0them"&gt;
  &lt;/a&gt;
  5. Common issues and how to solve them.
&lt;/h2&gt;

&lt;p&gt;Be mindful of all the possible returned values from the functions you call in a &lt;code&gt;with&lt;/code&gt; statement. Properly handling matching and non-matching clauses will solve most of your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use formatting to make &lt;code&gt;with&lt;/code&gt; blocks more readable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;else&lt;/code&gt; block in a with statement to handle non-matching results manually.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always pattern match &lt;strong&gt;all possible returned non-matching values&lt;/strong&gt; in &lt;code&gt;else&lt;/code&gt; blocks to prevent app-crashing bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pattern matches on structs. For example &lt;code&gt;with %User{is_banned: false} &amp;lt;- Users.get_user(id) do&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To differentiate function calls and results, annotate the function call and their results with tuples (e.g. &lt;code&gt;{:is_email, true}&lt;/code&gt; and &lt;code&gt;{:is_available, true}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make large &lt;code&gt;with&lt;/code&gt; statements more readable, consider annotating function calls and their results with tuples (e.g. &lt;code&gt;{:user_fetch, user}&lt;/code&gt; and &lt;code&gt;{:user_update, updated_user}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dialyzer may show the warning &lt;code&gt;"The pattern can never match the type"&lt;/code&gt;. This means you've missed a result from one (or multiple) of the called functions in the &lt;code&gt;else&lt;/code&gt; block. Add the missing return clause, and the warning will resolve.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I hope you learned something today. I'm a big fan of Elixir's &lt;code&gt;with&lt;/code&gt; clause, and of all the other readability, maintainability, and code correctness features that Elixir offers. The next post will be about Dialyzer, and why  you should (always) use it for development. Follow me to get a notification in January!&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Emoji Bug in Heading Tags or Wherever The Emoji Has 500+ Font Weight 🤔</title>
      <author>SYAUQIZAIDAN KHAIRAN KHALAF</author>
      <pubDate>Tue, 07 Dec 2021 12:15:58 +0000</pubDate>
      <link>https://dev.to/syaufy/emoji-bug-in-heading-tags-or-wherever-the-emoji-has-500-font-weight-533n</link>
      <guid>https://dev.to/syaufy/emoji-bug-in-heading-tags-or-wherever-the-emoji-has-500-font-weight-533n</guid>
      <description>&lt;p&gt;Well, well, well&lt;/p&gt;

&lt;p&gt;Have you realized it? This started 2/3 weeks ago when I created a landing page for my app. I noticed that the emoji on my landing page suddenly turned black and white. I searched for a solution for several hours and realized that the emojis in the [p] tags are still the same but the heading [h1], [h2], [h3] tags and tags that have a font-weight class that has a value of 500 and above will create emojis are black and white.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;❎ Bugged emoji because the bold font weight 👇🏻&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHVm7hIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhdcvutacfd7t3tvbgck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHVm7hIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhdcvutacfd7t3tvbgck.png" alt="Emoji bugged because the bold font weight" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ I try to change the font-weight to 400 and it works and the emoji has a color now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3fcUve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctyfpbyssxfsn111xevr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3fcUve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctyfpbyssxfsn111xevr.png" alt="I try to change the font-weight to 400 and it works and the emoji has a color now" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But how to get emoji color without losing the tags font weight? 🤔&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Well you can go use span between the emojis and make write the inline style to make the span has a 400 font weight
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QQPvctR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y12zqr3grmh75m4fbix1.png" alt="Well you can go use span between the emojis and make write the inline style to make the span has a 400 font weight
" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you experienced it too? or is it just me experiencing it? Let me know in the comments 👇🏻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Get Comfortable With CSS Selectors</title>
      <author>Cess</author>
      <pubDate>Tue, 07 Dec 2021 12:05:39 +0000</pubDate>
      <link>https://dev.to/cesscode/get-comfortable-with-css-selectors-1b8p</link>
      <guid>https://dev.to/cesscode/get-comfortable-with-css-selectors-1b8p</guid>
      <description>&lt;p&gt;HTML and CSS to a front-end developer are like a knife and a fork to a chef. The more you get used to using  HTML and CSS skills together, the better a front-end developer you will become.&lt;/p&gt;

&lt;p&gt;And the best way to learn how to use these skills together is to understand the different &lt;strong&gt;CSS Selectors.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This blog will look at the different types of CSS selectors and how you can use them to build efficient CSS code. &lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are CSS Selectors?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS selectors&lt;/strong&gt; is the opening part of a CSS ruleset,  it determines how you apply styles to HTML elements on a web page.  &lt;/p&gt;

&lt;p&gt;There are many different types of CSS selectors, each with its own unique syntax. These tell the browser which elements to apply CSS property values to.&lt;/p&gt;

&lt;p&gt;The element or elements targeted by a CSS selector are  the &lt;strong&gt;“subject of the selector.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can select a subject based on its element type, class, ID name, or pseudo-state. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS selectors&lt;/strong&gt; are case-sensitive, they must match element names and attribute values exactly.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;.coding&lt;/code&gt; class selector is not the same as &lt;code&gt;.CODING&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is advisable to use small letters to avoid making mistakes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;selector {
CSS-property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#there-are-two-types-of-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;There are two types of CSS selectors:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic CSS selectors.&lt;/li&gt;
&lt;li&gt;Advanced CSS selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;BASIC CSS SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Basic CSS selectors&lt;/strong&gt; are the most common type of CSS selectors. They style specific elements on a website, in the basic selectors we have selectors such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS class Selectors&lt;/li&gt;
&lt;li&gt;CSS ID Selectors&lt;/li&gt;
&lt;li&gt;Element Type Selectors&lt;/li&gt;
&lt;li&gt;CSS Universal Selectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-css-class-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Class Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;CSS class selector&lt;/strong&gt; identifies an element based on its &lt;strong&gt;class attribute&lt;/strong&gt;. You can use CSS class selectors to style many HTML elements.&lt;/p&gt;

&lt;p&gt;You can use the &lt;strong&gt;CSS class selector&lt;/strong&gt; on any HTML element.&lt;/p&gt;

&lt;p&gt;To select elements with a specific class, write a &lt;strong&gt;period (.) character&lt;/strong&gt;, followed by the &lt;strong&gt;class name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS Class Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class-name {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Examples of CSS Class selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the example below ⬇️ the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element has a &lt;code&gt;class="text"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p class="text"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element using the CSS class selector, we:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.text {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All Html element with &lt;code&gt;class="text"&lt;/code&gt; will align to the center, have orange text color and a font-size of 20px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remember-you-can-use-the-css-class-selector-to-style-many-html-elements-right"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Remember you can use the CSS class selector to style many HTML elements right?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;let us see how it works  🙂&lt;/p&gt;

&lt;p&gt;I want both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element to have the same exact CSS style, so I give both the same &lt;code&gt;class="code"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Football&amp;lt;h1&amp;gt;
&amp;lt;p class="code"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Rejoice&amp;lt;/h2&amp;gt;
&amp;lt;button class="code"&amp;gt;Submit&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you noticed that both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element have the same &lt;code&gt;class="code"&lt;/code&gt; in the above  ⬆ example? 🤔&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.code {
  text-align: center;
  color: green;
  font-size: 18px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in the example above  ⬆ will have the same text color, font size, and will align to the center of the web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-specify-that-a-class-should-affect-only-a-specific-html-element"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You can also specify that a class should affect only a specific HTML element&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In the example below ⬇️ both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element have the same &lt;code&gt;class="code"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Football&amp;lt;h1&amp;gt;
&amp;lt;p class="code"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Rejoice&amp;lt;/h2&amp;gt;
&amp;lt;button class="code"&amp;gt;Submit&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-want-to-style-only-the-raw-ltpgt-endraw-element-how-do-we-do-that"&gt;
  &lt;/a&gt;
  &lt;strong&gt;I want to style only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, How do we do that?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remember both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; have the same class name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.code {
  text-transform: capitalize;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above  ⬆ only paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements with &lt;code&gt;class="code"&lt;/code&gt; will be orange, and have a font-size of 20px. It won't affect the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-id-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Id Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;CSS Id selector&lt;/strong&gt; identifies an element based on its ID attribute.  ID selector is unique and you should only use them once per page to select one unique element.  &lt;/p&gt;

&lt;p&gt;To select an element with a specific id, write a hash (#) character, followed by the id of the element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS id Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#id-name {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of CSS Id Selector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the example below  ⬇ the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element has a &lt;code&gt;id="coding"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p id="coding"&amp;gt;football is no longer fun&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element using the CSS Id selector, we:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#coding {
  text-align: center;
  color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above ⬆, the CSS rule will apply to the HTML element with id="coding".&lt;/p&gt;

&lt;p&gt;Remember that the Id Class selector is a unique identifier. It means that in an HTML document, you can't have more than one element with the same id; you can only select one element. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use  Id selectors rarely and only on elements that need to always appear the same. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-css-class-selectors-and-id-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is the Difference Between CSS Class selectors and Id selector?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can repeat the same &lt;strong&gt;CSS class selector&lt;/strong&gt; value across many Html elements but you can only use an ID once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#element-type-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Element Type Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Element Type Selectors&lt;/strong&gt; are the most common basic CSS selectors. They select HTML elements based on the element name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Element Type Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of Element Type Selectors:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
text-align: center;
font-size: 20px;
color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above  ⬆ example, all paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements will align to the center, have a font size of 20px, and text color of red.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-universal-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Universal Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The universal selector (*) selects all HTML elements on the page. &lt;/p&gt;

&lt;p&gt;Every HTML element, from the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;,' follows the universal selector's style.&lt;/p&gt;

&lt;p&gt;The asterisk (*)  character represents Universal selectors.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Universal Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
CSS-Property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of CSS Universal Selector&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
text-align: center;
text-transform: Uppercase;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every single element on the web page will align to the center of the page and have uppercase letters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-grouping-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Grouping Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS grouping selectors&lt;/strong&gt; select all the HTML elements with the same style definitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS grouping selectors&lt;/strong&gt; save time and help you to write clearer codes.&lt;/p&gt;

&lt;p&gt;You may want to apply the same exact styles to several Html components at times.  For example, all your &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;,  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements should have a red background,  a font-weight of 700 and a font-size of 28px. &lt;/p&gt;

&lt;p&gt;One approach is to style each HTML element in your CSS stylesheet,  &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and  &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; as different selectors  . There's nothing wrong with this, but if you do it, you'll get a CSS stylesheet full of repeated declarations. &lt;/p&gt;

&lt;p&gt;A better solution is to use one CSS ruleset with many declarations separated by a comma(,).&lt;/p&gt;

&lt;p&gt;Take a close look at the CSS codes below  ⬇️; you'll see that the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements all have the same CSS style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;  
}

h2 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}

h3 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above  ⬆️  we gave &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; the same exact CSS style, will it work that way? Yes, it will work but it will be better to group the selectors to avoid repetition and make our codes easier to read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To group selectors, we separate each selector with a comma(,).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's group the above CSS codes with a Comma (,)  😄&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1, h2, h3 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's possible for us to use comma(,) to group them together because &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; have the same exact CSS styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The selectors don't have to match before you group them, as long as you give them the same exact CSS styling. For example, we can group &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; as long as we give them the same styles. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can also group a CSS Class selector with ID selectors if we want them to have the same exact CSS styling.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 id="tech"&amp;gt;Coding is life&amp;lt;/h1&amp;gt;
&amp;lt;p class="future"&amp;gt;Coding is fun&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To group the above Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#tech,
.future {
font-size: 20px;
color: red;
text-transform: capitalize;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember we use the Comma(,) cause we want them to have the same exact CSS style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-we-do-when-raw-lth1gt-endraw-raw-lth2gt-endraw-and-raw-lth3gt-endraw-have-a-few-comparable-css-stylings-but-different-font-sizes-and-colors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do we do when &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;,  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and  &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; have a few comparable CSS stylings but different font sizes and colors?&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*group the selectors cause they have the same styles*/
h1,
h2,
h3 {
text-align: center;
text-transform: uppercase;
}


/*apply individual styles to all 3 selectors*/
h1 {
font-size: 30px;
color: red;
}

h2 {
font-size: 25px;
color: orangered;
}


h3 {
font-size: 20px;
color: green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, and &lt;code&gt;h3&lt;/code&gt; all have  &lt;code&gt;text-align: center;&lt;/code&gt; &lt;code&gt;text-transform: uppercase;&lt;/code&gt;  so I grouped them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;font size&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; are different for  &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, so I applied the &lt;code&gt;font size&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; to all three selectors.  &lt;/p&gt;

&lt;p&gt;I hope you understand basic CSS selectors?  😄 . &lt;/p&gt;

&lt;p&gt;Let's move on to &lt;strong&gt;Advanced CSS Selectors&lt;/strong&gt;.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/ussoccer-dance-happy-26DOpJRJMhRPGqUsE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ADVANCED CSS SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Advanced CSS selectors enable us to do more than what Basic CSS allows us to do.&lt;/p&gt;

&lt;p&gt;In advanced CSS selectors we have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Combination Selectors.&lt;/li&gt;
&lt;li&gt;Pseudo-class-selectors.&lt;/li&gt;
&lt;li&gt;CSS Attribute Selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#combination-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;COMBINATION SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Combination Selectors&lt;/strong&gt; select elements based on a specific relationship between them.&lt;/p&gt;

&lt;p&gt;There are 4 types of combination selectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Descendant selectors.&lt;/li&gt;
&lt;li&gt;Child selectors.&lt;/li&gt;
&lt;li&gt;Adjacent sibling selectors.&lt;/li&gt;
&lt;li&gt;General sibling selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS selectors rely on the HTML Family Tree.  It's vital to grasp the relationships between HTML elements before I go further.&lt;/p&gt;

&lt;p&gt;The HTML family tree is also referred to as the HTML document tree.&lt;/p&gt;

&lt;p&gt;The family tree consists of descendants, parents, children, and sibling elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A parent&lt;/strong&gt; element contains other elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The child element&lt;/strong&gt; is an element that is immediately contained by another element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A sibling&lt;/strong&gt; is an element that shares the same parent with another element.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;div&amp;gt;
2 &amp;lt;img src="" alt=""&amp;gt;

3 &amp;lt;article&amp;gt;
4 &amp;lt;h1&amp;gt;coding is life&amp;lt;/h1&amp;gt;
5 &amp;lt;p&amp;gt;Code everyday&amp;lt;/p&amp;gt;
6 &amp;lt;/article&amp;gt;

7 &amp;lt;aside&amp;gt;
8 &amp;lt;h2&amp;gt;Make out time to take care of yourself as a developer&amp;lt;/h2&amp;gt;
9 &amp;lt;p&amp;gt;It's okay to read something else other than a coding book&amp;lt;/p&amp;gt;
10 &amp;lt;/aside&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is &lt;strong&gt;the parent.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; in line 2, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; in line 3 and the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element in line 7 are the &lt;strong&gt;children&lt;/strong&gt; of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element in line 3 is &lt;strong&gt;the parent&lt;/strong&gt; of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5 are &lt;strong&gt;siblings&lt;/strong&gt; with the same parent &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5 are the children of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; and &lt;strong&gt;the grandchildren&lt;/strong&gt; of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element in line 7 is &lt;strong&gt;the parent&lt;/strong&gt; of the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 8 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 9.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at each of these selectors one by one, using examples to help us grasp how they function 😄.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#descendant-combinator-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Descendant Combinator Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Descendant Combinator selectors&lt;/strong&gt; match all elements that are descendants of a specified element. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Descendant Combinator selectors&lt;/strong&gt; select the children, grand-children e.tc when used.&lt;/p&gt;

&lt;p&gt;To select &lt;strong&gt;Descendants&lt;/strong&gt; use multiple selectors separated by spaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Descendant Combinator Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;selector1  selector2 {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 0f Descendant Combinator selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2 &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;
5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7 &amp;lt;p&amp;gt;I prefer using CSS flexbox to Grid&amp;lt;/p&amp;gt;
8 &amp;lt;/div&amp;gt;

9 &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In the above example:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in &lt;em&gt;line 1&lt;/em&gt; is outside the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 3, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in line 4 and &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements in &lt;em&gt;line 5&lt;/em&gt; are the children of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 6 and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 7 are the children of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element in line 5 which makes them the grandchildren&lt;br&gt;
of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember Descendant selector selects both the children and the grand-children when used.&lt;/p&gt;

&lt;p&gt;let's style all the  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; inside the &lt;code&gt;article&lt;/code&gt; element using the Descendant selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article h2 {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example selects all &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;' elements within the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;' element because they are within the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;' element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-combinator-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Child Combinator Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Child selectors&lt;/strong&gt; match an element that is an immediate child of another element. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Child Combinator Selectors&lt;/strong&gt; selects only the child elements. &lt;/p&gt;

&lt;p&gt;Child combinator selector does not select the grandchildren elements like the &lt;strong&gt;Descendant selector&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The greater-than sign (&amp;gt;) character is often used to represent a child selector.&lt;/p&gt;

&lt;p&gt;You place the greater than sign (&amp;gt;)  between the parent and child element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Child Combinator Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Parent-selector &amp;gt; Child-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 0f Child Combinator selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7 &amp;lt;p&amp;gt;I prefer using CSS flexbox to Grid&amp;lt;/p&amp;gt;
8  &amp;lt;/div&amp;gt;
9  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article &amp;gt; h2 {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The above ⬆️ example will target only the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in line 3 cause it falls within the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will ignore any &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; that is outside of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element or contained inside another element. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-descendant-combinator-selector-and-child-combinator-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the difference between Descendant Combinator Selector and Child Combinator Selector?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The child combinator selector ( &amp;gt; ) targets an element that is a child of its parent.  It does not target descendants beyond the children. &lt;/p&gt;

&lt;p&gt;The descendant combinator selects all the children or grandchildren of a given element. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adjacent-sibling-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Adjacent sibling selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Adjacent sibling&lt;/strong&gt; selects an element that is after another specific element.&lt;/p&gt;

&lt;p&gt;Sibling elements must have the same parents. They must be immediately following each other.&lt;/p&gt;

&lt;p&gt;The plus (+) character represents adjacent sibling selectors. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Adjacent sibling selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first-sibling-selector + second-sibling-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way you read this combinator is from right to left.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first sibling element comes first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second sibling element comes second and is the targeted element. the targeted element is the element you intend styling &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Adjacent sibling selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7  &amp;lt;/div&amp;gt;
8  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h2 + P {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example will target only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 4. It is exactly after the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element and they both share the same parent element. &lt;/p&gt;

&lt;p&gt;Remember the &lt;strong&gt;Adjacent sibling&lt;/strong&gt; selects the second sibling when it appears right after the first sibling element and they share the same parent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-sibling-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;General sibling selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;General sibling selectors&lt;/strong&gt; select the elements that follow and share the same parent. &lt;/p&gt;

&lt;p&gt;It is not necessary that the second element immediately follows the first element.&lt;/p&gt;

&lt;p&gt;The tilde (~) character represents general sibling selectors.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for General sibling selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first-sibling-selector ~ second-sibling-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first sibling element comes first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second sibling element comes second and is the targeted element. The targeted element is the element you intend styling &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 0f General sibling selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4  &amp;lt;img src="...." alt="..."&amp;gt;
5 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7  &amp;lt;/div&amp;gt;
8  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h2 ~ p {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example will target only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5. It is exactly after the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in line 3 and they both share the same parent element.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General sibling selector&lt;/strong&gt; will operate when both sibling elements have the same parent.&lt;/p&gt;

&lt;p&gt;As long as the siblings have the same parent, it doesn't matter if they are born immediately after each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-attribute-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS ATTRIBUTE SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Attribute selectors select all elements that have a given attribute or attribute value.&lt;/p&gt;

&lt;p&gt;An attribute is a piece of the markup language used to change how an HTML element behaves or displays.&lt;/p&gt;

&lt;p&gt;You include attributes in an HTML element's opening tag &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="https://www.twitter.com/cessss_" target="_blank"&amp;gt;Connect with me on twitter&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above &lt;code&gt;target="_blank" is an attribute of the anchor tag&lt;/code&gt;&lt;a&gt;&lt;/a&gt;`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are 7 types of Attribute selectors:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Present Attribute Selector&lt;/li&gt;
&lt;li&gt;Equals Attribute Selector&lt;/li&gt;
&lt;li&gt;Begins With Attribute Selector (^)&lt;/li&gt;
&lt;li&gt;Ends With Attribute Selector ($)&lt;/li&gt;
&lt;li&gt;Contains Attribute Selector (*)&lt;/li&gt;
&lt;li&gt;Attribute Spaced Attribute Selector (~)&lt;/li&gt;
&lt;li&gt;Hyphen Attribute Selector (|)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#present-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Present Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Present attribute selector&lt;/strong&gt; select elements with a specified attribute &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Present Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Present attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[target] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The CSS styles above  ⬆️  will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"target"&lt;/code&gt; attribute. &lt;/p&gt;

&lt;p&gt;Styles will not apply to all other &lt;code&gt;a&lt;/code&gt; elements that don't have a &lt;code&gt;target&lt;/code&gt; attribute. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#equals-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Equals Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Equals attribute selectors select elements with a specified attribute and value. &lt;/p&gt;

&lt;p&gt;The equals (=) character represents Equals attribute selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Equals Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Equals attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="www.codecademy.com" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href="www.codecademy.com"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The example above  ⬆️  will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;'href'&lt;/code&gt; attribute set to &lt;code&gt;"www.codecademy.com"&lt;/code&gt; and apply the CSS styles to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#begins-with-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Begins With Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Begins with selector&lt;/strong&gt; select elements whose attribute value begins with a specific value. &lt;/p&gt;

&lt;p&gt;You don't have to write down the whole word of the value you specify when using  &lt;strong&gt;Begins with selector&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The circumflex accent (^) character represents Begins with selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Begins with selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute^="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Begins with attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="https://www.codecademy.com" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href^="https://"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;href&lt;/code&gt; attribute that starts with &lt;code&gt;"https://"&lt;/code&gt; and apply the CSS styles to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ends-with-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ends With Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ends with selector&lt;/strong&gt; select elements whose attribute value ends with a specific value. &lt;/p&gt;

&lt;p&gt;You don't have to write down the whole word of the value you specify when using  &lt;strong&gt;Ends with selector&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ends with selector&lt;/strong&gt; is the opposite of the &lt;strong&gt;begins with selector&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;The dollar sign ($) character represents Ends with selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Ends with selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute$="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Ends with attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="https://www.codecademy.com/docs/menu.pdf"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href$=".pdf"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;''href''&lt;/code&gt; attribute that ends with &lt;code&gt;".pdf"&lt;/code&gt; and apply the CSS styles to it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attribute-spaced-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Attribute spaced Selector&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Attribute spaced Selector&lt;/strong&gt; is also called white space attribute selector. &lt;/p&gt;

&lt;p&gt;It matches any element whose attribute value is a list of space-separated values. One of the values used will be equal to any of the values in the space-separated values. &lt;/p&gt;

&lt;p&gt;By space-seperated values, I mean attribute values like  &lt;code&gt;class="fun coding"&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The tilde (~) character represents the attribute spaced selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Attribute spaced selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute~="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Attribute spaced selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" rel="tag nofollow"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[rel~="tag"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;''rel''&lt;/code&gt; attribute with a value of &lt;code&gt;"tag"&lt;/code&gt; and apply the CSS styles to it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contains-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contains Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contains attribute selector&lt;/strong&gt; select elements whose attribute value contains a specified value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The asterisk (*) character represents Contains Attribute selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Contains Attribute selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute*="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Contains Attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="/signin.com"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href*="signin"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The CSS styles will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"href"&lt;/code&gt; attribute that contains a value of  &lt;code&gt;"signin"&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hyphen-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hyphen Attribute Selector&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hyphen attribute-selector select elements with the specified attribute starting with the specified value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It selects all elements whose attribute has a hyphen-seperated list of values. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text"! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The vertical line (|) character represents Hyphen Attribute Selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Hyphen Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute|="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Hyphen Attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" lang="en-US"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[lang|="en"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 The CSS styles will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"lang"&lt;/code&gt; attribute that contains a value of  &lt;code&gt;"en"&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It matches the elements with the &lt;code&gt;lang&lt;/code&gt; attribute that has the values &lt;code&gt;en&lt;/code&gt; &lt;code&gt;en-US&lt;/code&gt; &lt;code&gt;en-GB&lt;/code&gt; and so on but not &lt;code&gt;US-en&lt;/code&gt;, &lt;code&gt;GB-en&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-selectors"&gt;
  &lt;/a&gt;
  PSEUDO SELECTORS
&lt;/h2&gt;

&lt;p&gt;There are two types of pseudo-selectors: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pseudo Class Selectors.&lt;/li&gt;
&lt;li&gt;Pseudo Element Selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-class-selectors"&gt;
  &lt;/a&gt;
  PSEUDO CLASS SELECTORS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A pseudo-class is used to define a special state of an element.&lt;/p&gt;

&lt;p&gt;For example, it can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;style an element when a user mouses over it.&lt;/li&gt;
&lt;li&gt;style visited and unvisited links.&lt;/li&gt;
&lt;li&gt;style an element when it focus.     &lt;a href="https://www.w3schools.com/css/css_pseudo_classes.asp"&gt;w3schools&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pseudo-class&lt;/strong&gt; names are not case-sensitive. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;:Hover&lt;/code&gt; is the same as &lt;code&gt;:hover&lt;/code&gt;. I will advise you always use small letters when writing selectors.&lt;/p&gt;

&lt;p&gt;The colon (:) character represents Pseudo class selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Pseudo class selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:pseudo-class {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are 3 main types of Pseudo-class selectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Action Pseudo-classes.&lt;/li&gt;
&lt;li&gt;link Pseudo-classes.&lt;/li&gt;
&lt;li&gt;Structural And Positional Pseudo-classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-action-pseudoclasses"&gt;
  &lt;/a&gt;
  USER ACTION PSEUDO-CLASSES
&lt;/h2&gt;

&lt;p&gt;User Action Pseudo-classes works when the user interacts with your web page. &lt;/p&gt;

&lt;p&gt;The most used User Action Pseudo-classes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:hover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; works when the user moves their cursor over an element but does not select it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:hover&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:hover {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
%[&lt;a href="https://codepen.io/cesscode/pen/QWdaZYw"&gt;https://codepen.io/cesscode/pen/QWdaZYw&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the example above, the color of the link will change to red when you hover over the link.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:Active&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The :active selector is used to select and style the active link.&lt;/p&gt;

&lt;p&gt;A link becomes active when you click on it.  :active selector can be used on all elements, not only links.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:active&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:active {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;:focus&lt;/code&gt; selects an element that is being focused on by the user. "focused on by the user" means it accepts keyboard or any other user input. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on user input elements used in forms and is triggered as soon as the user clicks on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:focus&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:focus {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/OJWzBWB"&gt;https://codepen.io/cesscode/pen/OJWzBWB&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The background color of the input field when focused changes to yellow in the example above ⬆️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-pseudoclasses"&gt;
  &lt;/a&gt;
  link Pseudo-classes
&lt;/h2&gt;

&lt;p&gt;There are two link pseudoclasses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;:link&lt;/strong&gt;
Link Pseudo class selector selects a link that the user has not visited before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for link selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:link {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;:visited&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;:visited&lt;/code&gt; selects a link that the user has clicked on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use them to control the colors of the links and also whether they are to appear underlined or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:visited&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:visited {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:visited&lt;/code&gt; can be overridden by a link pseudo-class with equal specificity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.&lt;/p&gt;

&lt;p&gt;Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.   &lt;a href="https://www.w3schools.com/css/css_specificity.asp"&gt;W3schools&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make link pseudo-class work, It is advisable to use the LVHA rule in the exact order to style them&lt;/p&gt;

&lt;p&gt;LVHA stands for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a:link&lt;/li&gt;
&lt;li&gt;a:visited&lt;/li&gt;
&lt;li&gt;a:hover&lt;/li&gt;
&lt;li&gt;a:active&lt;/li&gt;
&lt;li&gt;a:focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/zYErbKL"&gt;https://codepen.io/cesscode/pen/zYErbKL&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structural-and-positional-pseudoclasses"&gt;
  &lt;/a&gt;
  Structural And Positional Pseudo-classes.
&lt;/h2&gt;

&lt;p&gt;The most common structural and positional pseudo-classes you will likely come across are the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:first-child: Applies style to the first child of the element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:first-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:first-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:last-child: Applies style to an element if is the last child within its parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:last-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:last-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/NWaNqVx"&gt;https://codepen.io/cesscode/pen/NWaNqVx&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the above example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li:first-child&lt;/code&gt; selects line 1 cause is the first list item within the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li:last-child&lt;/code&gt; selects line 4 cause is the last item within the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;:Only-child: Applies style to an element if is the only element within a parent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:only-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:only-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;The first child will be red&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
li:only-child {&lt;br&gt;
background-color: red;&lt;br&gt;
color: white;&lt;br&gt;
padding: .7em;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The above ⬆️ CSS styles will apply &lt;code&gt;background-color: red;&lt;/code&gt; to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element cause is the only child.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-elements"&gt;
  &lt;/a&gt;
  PSEUDO ELEMENTS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s) &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The double colon (::) represents pseudo-element selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::pseudo-element {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#textual-pseudoelements"&gt;
  &lt;/a&gt;
  Textual Pseudo-elements
&lt;/h2&gt;

&lt;p&gt;The textual pseudo-elements consist of the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::first-letter pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::first-letter&lt;/code&gt; applies the style to the first letter of the element&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::first-letter&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-letter {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:first-line pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::first-line&lt;/code&gt; applies the style to the first line of the element&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::first-line&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-line {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;::first-line&lt;/code&gt; and the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element work only for block elements&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/qBPZObQ"&gt;https://codepen.io/cesscode/pen/qBPZObQ&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generated-content-pseudoelements"&gt;
  &lt;/a&gt;
  Generated Content Pseudo-elements
&lt;/h2&gt;

&lt;p&gt;The generated pseudo-element consist of the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::before pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::before&lt;/code&gt; adds content before the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::before&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::before {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::after pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::after&lt;/code&gt; adds content after the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::after&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-line {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
When using the  &lt;code&gt;::after&lt;/code&gt; and &lt;code&gt;::before&lt;/code&gt; pseudo-elements you must use the  &lt;code&gt;content&lt;/code&gt; property to make your styles visible.&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/mdBPeMJ"&gt;https://codepen.io/cesscode/pen/mdBPeMJ&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the example above ⬆️, I added &lt;code&gt;'&lt;/code&gt; to before and after the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. You can also add images using the &lt;code&gt;content: URL("image_link.jpg")&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-pseudoclass-and-pseudoelement"&gt;
  &lt;/a&gt;
  Difference between pseudo-class and pseudo-element
&lt;/h2&gt;

&lt;p&gt;The two main differences between a pseudo-class and pseudo-element are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.&lt;br&gt;
Pseudo-elements are preceded with two colons &lt;code&gt;::&lt;/code&gt; instead of one, although these days modern browsers are more forgiving and support both &lt;code&gt;:&lt;/code&gt; and double  &lt;code&gt;::&lt;/code&gt; colons for the pseudo-elements. It is best practice to use double colons &lt;code&gt;::&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
Pseudo-classes are all about the state, states like a visited link, a focused input field, an image that is being hovered upon, e.tc. While pseudo-elements are used to style sections or a particular part of an element, things like the first letter in a word, first-line e.tc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out some of these resources for a more in-depth look into CSS pseudo-classes and pseudo-elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/css/css_pseudo_elements.asp"&gt;W3schools CSS Pseudo-elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN CSS Pseudo-elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN CSS Pseudo-classes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this post and that it helps you on your way to becoming a better front-end developer.&lt;/p&gt;

&lt;p&gt;Start experimenting with the various CSS selectors to see how you can improve your CSS code.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/espn-smile-drake-drizzy-2UqWGeC4upMYXtvqR8"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GraphQL Editor - the journey from  initial release to version 5.0</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 07 Dec 2021 11:57:24 +0000</pubDate>
      <link>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</link>
      <guid>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</guid>
      <description>&lt;p&gt;From the very beginning of our adventure with GraphQL, we were impressed by how great its community is. The amount of content, libraries and great tools generated by GraphQL users amazed us from the very start. The more time we spent working with GraphQL the more things we saw that could be improved to make working with it easier and better. We also knew that we wanted to give something back to its wonderful community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-origins"&gt;
  &lt;/a&gt;
  The origins
&lt;/h2&gt;

&lt;p&gt;Three years ago we were working on quite a schema with a lot of complicated relationships, then a thought occurred to us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It would be nice to be able to visualize it well enough to understand all the connections."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes there were several solutions on the market that would let us do that, but hey everyone knows how it works. The question always arises, why not do it differently, better, and most importantly in our own way. A few days after saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"OK, lets do it"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;came&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What if we could build a GraphQL scheme out of visual blocks?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that's how it all started. We begun with the PoC version, which included just these two functionalities, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL schema visualization,&lt;/li&gt;
&lt;li&gt;the ability to build it using viusal elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLvDxpDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxf3ptvt6s4i3jml1etq.png" alt="Old GraphQL Editor UI" width="656" height="464"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;The very first version of GraphQL Editor from 2018&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Our project has been very warmly received by the GraphQL community which resulted in quickly amassing &lt;a href="https://github.com/graphql-editor"&gt;3 000 stars on GitHub&lt;/a&gt;. Users were not only happy to use these two simple features but also started suggesting some cool new ones. Users were not only happy to use these two simple features but also started suggesting some cool features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-graphql-editor-50"&gt;
  &lt;/a&gt;
  What's new in GraphQL Editor 5.0
&lt;/h2&gt;

&lt;p&gt;When we started we had a roadmap in mind which we tried to stick to, as much as it was possible. But with all the additional feedback we also kept adding features suggested by the community, which after more than 2 years has led us to the point we are at now, namely the release of &lt;strong&gt;&lt;a href="https://graphqleditor.com/"&gt;GraphQL Editor 5.0&lt;/a&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLDuHRMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5z9y3nsul6i9v9f1eu.png" alt="New GraphQL Editor UI" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Many graph improvements &amp;amp; various view modes&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So once again we would like to thank all our users for their valuable feedback, including those that were critical, it all really helped us improve. So without further ado, let's get into the new features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h3&gt;

&lt;p&gt;It's the most exciting as well as the most requested feature. What's even more satisfying about it finally being released, is that, we've been trying to figure out how to tackle this one since the first release of GraphgQL Editor. &lt;strong&gt;GraphQL Microservices&lt;/strong&gt; allow users instantly deploy their GraphQL backend prototypes using JavaScript or TypeScript. What's worth mentioning is microservices is powered by our open-source library called Stucco.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/graphql-editor"&gt;Stucco&lt;/a&gt; is a backend engine for our microservices. Its main goal is to keep you in charge of your infrastructure decisions. No risk of vendor lock-in, no worries. With Stucco you can use TypeScript, JavaScript or Golang to create GraphQL backends &amp;amp; deploy them easily using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Editor Shared worker&lt;/li&gt;
&lt;li&gt;Local environment&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can deploy microservices directly from our built-in Live Editor (similar to those you may know from Git-based platforms), but the recommended way is to do it using &lt;a href="https://github.com/graphql-editor/graphql-editor-cli"&gt;graphql-editor-cli&lt;/a&gt;. Although microservices are great for testing and development purposes, we do not recommend using them on production as they run on very small machines with rate limit of 200 requests per minute &amp;amp; 1 000 000 requests per month. Additionally this feature is very much work-in-progress and is being released mostly because we need live testers to iterate on it and improve it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXkJFKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o3u87fypvkix4q6t3ru.png" alt="Microservices" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;With Microservices you can deploy NodeJS GraphQL backends using JavaScript or TypeScript&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#jamstack-engine"&gt;
  &lt;/a&gt;
  JAMStack Engine
&lt;/h3&gt;

&lt;p&gt;Although JAMStack was introduced a couple versions back, in this one it received a significant update. We have added TypeScript and the most popular JS library for building user interfaces support - ReactJS. Among other notable features you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;better ES modules support&lt;/strong&gt; - j just give our Live Service a CDN URL &amp;amp; it will fetch all types from your server and also look for typings,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;relative ES modules imports&lt;/strong&gt; -  now you can have user relative ES module imports inside our online code editor,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deployment&lt;/strong&gt; - built-in static page deployment feature to easily show off your work to your team or a wider audience.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61dxKfns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqydfal3to1z1cysjzt1.png" alt="JAMStack engine" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;JAMStack with ReactJS, TS support &amp;amp; easy static deployment&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#graphql-cloud"&gt;
  &lt;/a&gt;
  GraphQL Cloud
&lt;/h3&gt;

&lt;p&gt;We want GraphQL Editor to become a self-sufficient IDE for GraphQL based project development. Following this goal we’re adding more and more "responsibilities" for our tools. Now you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create your own queries with ease,&lt;/li&gt;
&lt;li&gt;preview easily using built-in GraphiQL,&lt;/li&gt;
&lt;li&gt;save &amp;amp; access your work anytime you need from any device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have also added a proxy to support every GraphQL URL &amp;amp; CORS issues which frequently appear during development.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3k-A1iO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohajo2qv4e08amw7l1yy.png" alt="GraphQL Cloud" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;GraphQL Cloud offers GraphiQL-like queries preview, configurable mock backend &amp;amp; CORS support&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#last-but-not-least"&gt;
  &lt;/a&gt;
  Last but not least
&lt;/h2&gt;

&lt;p&gt;Aside from core features we have also been working on some quality of life improvements like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Graph improvements&lt;/strong&gt; - the graph module has been significantly improved:

&lt;ul&gt;
&lt;li&gt;node &amp;amp; fields creation is now much faster thanks to keyboard support,&lt;/li&gt;
&lt;li&gt;relation view includes all scalar fields,&lt;/li&gt;
&lt;li&gt;selected node state persists between view,&lt;/li&gt;
&lt;li&gt;code editor view can be toggled anytime now,&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spotlight menu (CTRL/CMD + K)&lt;/strong&gt; - spotlight menu added for easier navigation,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Color Themes&lt;/strong&gt; - we have added 4 new color themes,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning center&lt;/strong&gt; - from now on every start, you will be welcomed with recent projects and a learning center to level up your editor skills,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as tons of bug fixes &amp;amp; minor UI improvements.&lt;/p&gt;




&lt;p&gt;So that's basically what we've been working on for the last 12 months. I must say it feels great to be able to finally share all these new features with a broader audience (thanks David!). If your are using GraphQL already I would love to hear your feedback, if not I hope GraphQL Editor would make working with it even more efficient as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If once you start down the GraphQL path, forever will it &lt;br&gt;
dominate your destiny.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zoIKUCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur7var8ljvdb5tzhyjz9.png" alt="Try GraphQL Editor" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
