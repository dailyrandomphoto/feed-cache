<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use Case of JavaScript in today's industry.</title>
      <author>bhat sumair</author>
      <pubDate>Fri, 25 Jun 2021 12:54:40 +0000</pubDate>
      <link>https://dev.to/bhatsumair/use-case-of-javascript-in-today-s-industry-53f1</link>
      <guid>https://dev.to/bhatsumair/use-case-of-javascript-in-today-s-industry-53f1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Uber and javascript&lt;/strong&gt;&lt;br&gt;
Uber needs to handle loads of data in real time. They have millions of requests coming in continuously, and that’s not just hits on a page. Uber needs to track driver locations, rider locations, and incoming ride requests. It has to seamlessly sort that data and match riders as fast as possible.&lt;/p&gt;

&lt;p&gt;All of that plays to NodeJS’s and JavaScript’s strengths. Node is designed to handle requests and hand off data quickly. It’s asynchronous capabilities are a huge part of that. Node is central to Uber’s user facing stack for just that reason.&lt;/p&gt;

&lt;p&gt;Uber’s core trip execution engine was originally written in Node.js because of its asynchronous primitives and simple, single-threaded processing. (In fact, we were one of the first two companies to deploy Node.js in production.) Node.js gives us the ability to manage large quantities of concurrent connections. We’ve now written many services in Go, and this number continues to increase. We like Go for its concurrency, efficiency, and type-safe operations.&lt;br&gt;
The frontline API for our mobile apps consists of over 600 stateless endpoints that join together multiple services. It routes incoming requests from our mobile clients to other APIs or services. It’s all written in Node.js&lt;br&gt;
&lt;strong&gt;Highly Available, Self-Healing, Persistent&lt;/strong&gt;&lt;br&gt;
Having to support the highest availability demands, the Marketplace stack must receive and execute in real time. Even brief interruptions in this area have major consequences for our users and our business. Much of Marketplace’s stack was built by and for Marketplace engineers first.&lt;br&gt;
Ringpop, a library for building cooperative distributed systems, solved some of Marketplace’s problems before its adoption in other teams at Uber and beyond. It gives the high-availability, partition-tolerant properties of distributed databases like DynamoDB or Riak to developers at the application level.&lt;br&gt;
The systems that handle pings from riders and drivers in real-time and then match them are written in Node.js and Go. These teams use Ringpop and Sevnup for cooperation and shifting of object ownership when a node in a hashring goes down, or when another node takes ownership of the keyspace. Riak is their distributed database. Redis provides caching.&lt;br&gt;
&lt;strong&gt;Seeing and Using Data&lt;/strong&gt;&lt;br&gt;
A group within Marketplace turns Marketplace data into useful visualizations to help the team understand and observe the state of the world. We use JavaScript for web front-end applications. React+Flux, D3, and Mapbox are the libraries and frameworks behind this group. For the back end, it’s the same Node.js server used by Uber’s web engineers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How we make Flutter work with CallKit Call Directory</title>
      <author>Irina Maximova</author>
      <pubDate>Fri, 25 Jun 2021 12:53:56 +0000</pubDate>
      <link>https://dev.to/imaximova/how-we-make-flutter-work-with-callkit-call-directory-5334</link>
      <guid>https://dev.to/imaximova/how-we-make-flutter-work-with-callkit-call-directory-5334</guid>
      <description>&lt;p&gt;Disclaimer: This will be a long read that my colleague wrote for &lt;a href="https://habr.com/ru/company/Voximplant/blog/553422/"&gt;Habr.ru&lt;/a&gt; and I decided to translate it to share with you guys!&lt;/p&gt;

&lt;p&gt;Stock up on snacks, make yourself comfortable, and let’s begin!&lt;/p&gt;




&lt;p&gt;In this long read, I will tell you how we (at &lt;a href="https://voximplant.com/?utm_source=habr&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_flutter"&gt;Voximplant&lt;/a&gt;) decided to create our own Flutter plugin to use &lt;a href="https://developer.apple.com/documentation/callkit"&gt;CallKit&lt;/a&gt; in a Flutter app. And appeared to be the first who made call blocking &amp;amp; identification work for Flutter using &lt;a href="https://developer.apple.com/documentation/callkit/cxcalldirectoryextensioncontext"&gt;Call Directory&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-callkit"&gt;
  &lt;/a&gt;
  What is CallKit?
&lt;/h2&gt;

&lt;p&gt;Apple CallKit is a framework used for integration calls from 3rd party apps to the system.&lt;/p&gt;

&lt;p&gt;If a call from a 3rd party app is displayed as native, it means that CallKit is used here. If a call from a 3rd party app is in the list of system application calls (Phone) – it is also CallKit. Third-party applications that act as a caller ID – CallKit. Calls from third-party apps that can't get through Do Not Disturb mode – well, you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CQ9-61i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5vx5uuh7au4si5vymhk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CQ9-61i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5vx5uuh7au4si5vymhk.jpeg" alt="CallKit is"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;CallKit provides third-party developers with a system UI for displaying calls&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-with-callkit-on-flutter"&gt;
  &lt;/a&gt;
  What’s with CallKit on Flutter?
&lt;/h2&gt;

&lt;p&gt;CallKit is a part of iOS SDK, but it can be accessed from Flutter by interacting with native code. To use the framework’s functionality, you need to connect a third-party plugin that encapsulates the Flutter interaction with iOS. Or you can implement everything yourself, for example, this way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lEn5_0PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58upx1nmphg6ct0k6mg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEn5_0PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58upx1nmphg6ct0k6mg.jpeg" alt="Scheme"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;An example of CallKit service implementation for Flutter, where iOS application code (platform code) connects Flutter application to the system&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#readymade-callkit-flutter-solutions"&gt;
  &lt;/a&gt;
  Ready-made CallKit Flutter solutions
&lt;/h3&gt;

&lt;p&gt;So, we needed to integrate our Flutter application for VoIP calls with the system. First, we looked through most of the existing third-party solutions and chose one of them to use for a while. However, this and the rest of the available options had their problems.&lt;/p&gt;

&lt;p&gt;Existing plugins partially or completely wrap the CallKit API in their own high-level API. Because of that flexibility is lost and some features are unavailable. Due to their implementation of architecture and interfaces, such plugins contained their bugs. The documentation was incomplete or absent, and the authors of some of them stopped supporting almost immediately, which is especially dangerous on the fast-growing Flutter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-we-came-up-with-our-solution"&gt;
  &lt;/a&gt;
  How we came up with our solution
&lt;/h3&gt;

&lt;p&gt;For simple scenarios, this worked at first, but a specific case gave us some trouble. We had to study the source code to find out how this particular plugin interacted with CallKit. In the end, we discovered that we wouldn't be able to implement what we wanted because of the high-level API limitations.&lt;/p&gt;

&lt;p&gt;We thought about implementing our solution with those disadvantages in mind.&lt;/p&gt;

&lt;p&gt;We wanted to preserve the architecture and interfaces of CallKit. This way we would give users all the flexibility and the ability to use the original documentation, and we could protect them from potential bugs in our implementation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-implementation"&gt;
  &lt;/a&gt;
  Our implementation
&lt;/h2&gt;

&lt;p&gt;We managed to move the entire CallKit API to Dart, preserving the hierarchy of classes and mechanisms of interaction with them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbgBKWUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu3ez5kumg6we3a4th7j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbgBKWUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu3ez5kumg6we3a4th7j.jpeg" alt="Plugin scheme"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;Our plugin covers all work with the platform and provides an identical interface&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The communication between Flutter and iOS is asynchronous, so it took us a while to implement some of the details. The main difficulty was the functionality that required synchronous communication on one side or the other.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;CXProviderDelegate.provider(_:execute:)&lt;/code&gt; native CallKit API requires synchronously returning a Bool value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;optional&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="nv"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXTransaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is called every time a new &lt;code&gt;CXTransaction&lt;/code&gt; needs to be processed. You can return &lt;code&gt;true&lt;/code&gt; to process the transaction yourself and notify the system about it. If you return &lt;code&gt;false&lt;/code&gt; (default behavior), the corresponding handler method in &lt;code&gt;CXProviderDelegate&lt;/code&gt; is called for each &lt;code&gt;CXAction&lt;/code&gt; contained in the transaction.&lt;/p&gt;

&lt;p&gt;To use this API in the plugin, we needed to declare it in Dart code so that the user could control this behavior despite the asynchronous nature of data exchange between the platforms. By returning &lt;code&gt;true&lt;/code&gt; in native code, we managed to move transaction control to Dart code, where we perform manual or automatic &lt;code&gt;CXTransaction&lt;/code&gt; processing depending on the value received from the user.&lt;/p&gt;

&lt;p&gt;Problems with asynchrony arise in the native part as well. For example, there is the PushKit iOS framework that is not part of CallKit but they are often used together, so it was necessary to integrate it. When you receive a VoIP push, you need to immediately notify CallKit of an incoming call in native code, otherwise the application will crash. To handle this we decided to allow reporting incoming calls directly to CallKit from native code without an asynchronous "hook" in the form of Flutter. As a result, for this integration, we implemented several helpers in the native part of the plugin (available via the &lt;code&gt;FlutterCallkitPlugin&lt;/code&gt; iOS class) and several on the Flutter side (available via the &lt;code&gt;FCXPlugin&lt;/code&gt; Dart class).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We declared additional features of the plugin in its class to separate the plugin interface from the CallKit interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  How to report an incoming call directly to CallKit
  &lt;p&gt;When a VoIP push is received, one of the &lt;code&gt;PKPushRegistryDelegate.pushRegistry(_: didReceiveIncomingPushWith:)&lt;/code&gt; methods is called. Here you need to create a &lt;code&gt;CXProvider&lt;/code&gt; instance and call &lt;code&gt;reportNewIncomingCall&lt;/code&gt; to notify CallKit of the call. Since the same provider instance is required to further handle the call, we added the &lt;code&gt;FlutterCallkitPlugin.reportNewIncomingCallWithUUID&lt;/code&gt; method from the native side of the plugin. When the method is called, the plugin reports the call to the &lt;code&gt;CXProvider&lt;/code&gt; and also executes &lt;code&gt;FCXPlugin.didDisplayIncomingCall&lt;/code&gt; on the Dart side to continue working with the call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;pushRegistry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;didReceiveIncomingPushWith&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushPayload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Retrieve the necessary data from the push&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uuidString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"UUID"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;uuidString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uuidString&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;localizedName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"identifier"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;callUpdate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localizedCallerName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localizedName&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXProviderConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;localizedName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ExampleLocalizedName"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Report the call to the plugin and it will report it to CallKit&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportNewIncomingCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;callUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;callUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;providerConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;pushProcessingCompletion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completion&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;To sum up: the main feature of our plugin is that using it on Flutter is almost the same as using the native CallKit on iOS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-more-thing"&gt;
  &lt;/a&gt;
  One more thing
&lt;/h3&gt;

&lt;p&gt;But there still is one thing about Apple CallKit that we haven't implemented (and no one has implemented in available third-party solutions). It's the Call Directory App Extension support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-directory-is"&gt;
  &lt;/a&gt;
  Call Directory is
&lt;/h2&gt;

&lt;p&gt;CallKit can block and identify calls. Developers can access these features using a special system extension – Call Directory. Read more about iOS app extensions in the &lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2kVqz9wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kejbqm007zd4t7n5rqt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2kVqz9wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kejbqm007zd4t7n5rqt.jpeg" alt="Call Directory"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;Call Directory app extension allows you to block and/or identify numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In short, it is a separate iOS app target that runs independently of the main application at the request of the system.&lt;/p&gt;

&lt;p&gt;For example, when receiving an incoming call, iOS tries to identify or find the caller in the list of blocked by standard means. If the number is not found, the system can request data from available Call Directory extensions to somehow handle the call. At this point, the extension has to "retrieve" these numbers from storage. The application itself can add numbers from its databases in there at any time. Thus there is no interaction between the extension and the application, the data is exchanged through the shared storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAAu0P5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeet9nq3n7yduyqzsss.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAAu0P5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeet9nq3n7yduyqzsss.jpeg" alt="Call Directory implementation"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of how one can implement a Call Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Read more about iOS App Extensions: &lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#call-directory-extension-in-flutter"&gt;
  &lt;/a&gt;
  Call Directory Extension in Flutter
&lt;/h2&gt;

&lt;p&gt;Not so long ago a user asked if we can add Call Directory support. We started to study the possibility of implementing this feature and found out that it won’t be able to provide a Flutter API without making the users write native code. The problem is that the Call Directory works in the extension. It is launched by the system, runs for a very short time, and does not depend on the application (including Flutter). Thus, to support this functionality, the user of the plugin will need to create an app extension and data storage on his own eventually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQkiuPlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpueoh2ut2br0lk3phg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQkiuPlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpueoh2ut2br0lk3phg.jpeg" alt="Call Directory in Flutter"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of working with Call Directory in Flutter application&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#decision-we-made"&gt;
  &lt;/a&gt;
  Decision we made
&lt;/h3&gt;

&lt;p&gt;Despite the difficulties with the native code, we were determined to make using Call Directory as convenient as possible for our framework's users.&lt;/p&gt;

&lt;p&gt;Having tested the ability of such an extension to work with a Flutter app, we started designing it. The solution had to retain all the Call Directory Manager APIs, require the user to write a minimum of native code, and be easy to interact with via Flutter.&lt;/p&gt;

&lt;p&gt;This is how we created version 1.2.0 with Call Directory Extension support.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-we-implemented-call-directory-for-flutter"&gt;
  &lt;/a&gt;
  How we implemented Call Directory for Flutter
&lt;/h2&gt;

&lt;p&gt;To implement this functionality, we had to consider several aspects. We needed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transfer the interface of CXCallDirectoryManager class (CallKit object that allows managing Call Directory);&lt;/li&gt;
&lt;li&gt;Decide what to do with the app extension and its numbers storage;&lt;/li&gt;
&lt;li&gt;Create a convenient way to transfer data from Dart code to the native code and back to manage the list of numbers from the Flutter app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#transfer-cxcalldirectorymanager-interfaces-to-flutter"&gt;
  &lt;/a&gt;
  Transfer CXCallDirectoryManager interfaces to Flutter
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code presented in this article was simplified on purpose to make it easy to perceive. Find the full version of the code following the links at the end of the article. We used Objective-C to implement the plugin since it was chosen as the main language in our project earlier. The CallKit interfaces are written in Swift for simplicity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;First of all, let's see what exactly needs to be transferred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;EnabledStatus&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;reloadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;withIdentifier&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getEnabledStatusForExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;withIdentifier&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;EnabledStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;openSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's recreate the equivalent of the &lt;code&gt;CXCallDirectoryManager.EnabledStatus&lt;/code&gt; enum with Dart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;enabled&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can declare the class and methods. There is no need for &lt;code&gt;sharedInstance&lt;/code&gt; in our interface, so let's make a regular Dart class with static methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;FCXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;reloadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getEnabledStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openSettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Preserving the API is important, but it is just as important to consider the platform and language code style so that the interface is clear and convenient for plugin users.&lt;br&gt;
For the API in Dart, we used a shorter name (the long name was from objective-C) and replaced the completion block with Future. Future is the standard mechanism used to get the result of asynchronous methods in Dart. We also return Future from most Dart plugin methods because communication with native code is asynchronous.&lt;br&gt;
Before – &lt;code&gt;getEnabledStatusForExtension(withIdentifier:completionHandler:)&lt;/code&gt;&lt;br&gt;
After – &lt;code&gt;Future getEnabledStatus(extensionIdentifier)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To make communication between Flutter and iOS possible, we use &lt;code&gt;FlutterMethodChannel&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read more about the features of this communication channel &lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;MethodChannel&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MethodChannel&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MethodChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'plugins.voximplant.com/flutter_callkit'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first thing we do is subscribe the iOS plugin class to the &lt;code&gt;FlutterPlugin&lt;/code&gt; protocol to interact with Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@interface&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPlugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When initializing the plugin, create a &lt;code&gt;FlutterMethodChannel&lt;/code&gt; with the same identifier we used above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;registerWithRegistrar&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPluginRegistrar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterMethodChannel&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;FlutterMethodChannel&lt;/span&gt; 
          &lt;span class="nv"&gt;methodChannelWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"plugins.voximplant.com/flutter_callkit"&lt;/span&gt;
          &lt;span class="nv"&gt;binaryMessenger&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="n"&gt;messenger&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="nv"&gt;sharedPluginWithRegistrar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="nv"&gt;addMethodCallDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="nv"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use this channel to call iOS methods from Flutter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's take a closer look at the implementation of Dart methods and the native part of the plugin using the &lt;code&gt;getEnabledStatus&lt;/code&gt; example.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Dart implementation will be as simple as possible. We will call MethodChannel.invokeMethod with the necessary arguments and process the result of that call.&lt;/p&gt;

&lt;p&gt;
  About MethodChannel
  &lt;code&gt;MethodChannel&lt;/code&gt; API allows us to asynchronously get the result of a call from native code using &lt;code&gt;Future&lt;/code&gt; but imposes restrictions on the data types that we pass. 

&lt;/p&gt;

&lt;p&gt;We pass the method name (we'll use it in the native code to identify the call) and the &lt;code&gt;extensionIdentifier&lt;/code&gt; argument to &lt;code&gt;MethodChannel.invokeMethod&lt;/code&gt; and then convert the result from the int type to &lt;code&gt;FCXCallDirectoryManagerEnabledStatus&lt;/code&gt;. We should also handle &lt;code&gt;PlatformException&lt;/code&gt; in case of an error in the native code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Use MethodChannel with extensionIdentifier&lt;/span&gt;
    &lt;span class="c1"&gt;// as an argument to call the corresponding &lt;/span&gt;
    &lt;span class="c1"&gt;// method in the platform code&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.getEnabledStatus'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Convert the result to the&lt;/span&gt;
    &lt;span class="c1"&gt;// FCXCallDirectoryManagerEnabledStatus enum&lt;/span&gt;
    &lt;span class="c1"&gt;// and return its value to the user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// If we get an error, we pass it to FCXException&lt;/span&gt;
    &lt;span class="c1"&gt;// and then return it to the user in special type&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Pay attention to the method identifier that we used:&lt;br&gt;
&lt;code&gt;Plugin.getEnabledStatus&lt;/code&gt;&lt;br&gt;
The word before the dot is used to define the module responsible for a particular method.&lt;br&gt;
&lt;code&gt;getEnabledStatus&lt;/code&gt; is equal to the name of the method in Flutter, not in iOS (or Android).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we move to the platform code and implement the backend for this method.&lt;/p&gt;

&lt;p&gt;Calls through &lt;code&gt;FlutterMethodChannel&lt;/code&gt; go straight to the &lt;code&gt;handleMethodCall:result:&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Using the previously passed identifier, we can determine what method was called, get the arguments from it and execute the main part of the code. Detailed information is in the comments here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;handleMethodCall&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;FlutterMethodCall&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
                  &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;FlutterResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Calls from Flutter can be initiated by name,&lt;/span&gt;
    &lt;span class="c1"&gt;// which is passed to `FlutterMethodCall.method` property&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.getEnabledStatus"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// When passing arguments with MethodChannel, &lt;/span&gt;
        &lt;span class="c1"&gt;// they are packed to `FlutterMethodCall.arguments`.&lt;/span&gt;
        &lt;span class="c1"&gt;// Extract extensionIdentifier, which we passed &lt;/span&gt;
        &lt;span class="c1"&gt;// from the Flutter code earlier&lt;/span&gt;
        &lt;span class="kt"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// If the arguments are invalid, return an error&lt;/span&gt;
            &lt;span class="c1"&gt;// using the `result` handler.&lt;/span&gt;
            &lt;span class="c1"&gt;// The error should be packed to `FlutterError`.&lt;/span&gt;
            &lt;span class="c1"&gt;// It’ll be thrown as PlatformException in Dart code&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"extensionIdentifier must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// When the method is detected and the arguments&lt;/span&gt;
        &lt;span class="c1"&gt;// are extracted and validated,&lt;/span&gt;
        &lt;span class="c1"&gt;// we can write the logic&lt;/span&gt;

        &lt;span class="c1"&gt;// To interact with this CallKit functionality&lt;/span&gt;
    &lt;span class="c1"&gt;// we need the CallDirectoryManager instance&lt;/span&gt;
        &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Call the CallDirectoryManager method&lt;/span&gt;
        &lt;span class="c1"&gt;// and wait for the result&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="nv"&gt;getEnabledStatusForExtensionWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;
            &lt;span class="nv"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CXCallDirectoryEnabledStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                           &lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// completion handler (containing the result of &lt;/span&gt;
            &lt;span class="c1"&gt;// the CallDirectoryManager method) is executed, &lt;/span&gt;
            &lt;span class="c1"&gt;// now we need to pass the result to Dart&lt;/span&gt;
            &lt;span class="c1"&gt;// But first we convert it to the в suitable type, &lt;/span&gt;
            &lt;span class="c1"&gt;// because only certain data types can be passed &lt;/span&gt;
            &lt;span class="c1"&gt;// through  MethodChannel&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;// Our errors are packed to `FlutterError`&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;// Numbers are packed to `NSNumber`&lt;/span&gt;
                &lt;span class="c1"&gt;// This enum is `NSInteger`, so we&lt;/span&gt;
                &lt;span class="c1"&gt;// make the required conversion&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="nv"&gt;convertEnableStatusToNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;enabledStatus&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Implement the two remaining &lt;code&gt;FCXCallDirectoryManager&lt;/code&gt; methods in the same way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Set an identifier, pass the argument, &lt;/span&gt;
    &lt;span class="c1"&gt;// and call the platform method&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.reloadExtension'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;openSettings&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// This method does not accept arguments&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.openSettings'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.reloadExtension"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"extensionIdentifier must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
        &lt;span class="nv"&gt;reloadExtensionWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;
        &lt;span class="nv"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.openSettings"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;13.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="nv"&gt;openSettingsWithCompletionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorLowiOSVersionWithMinimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"13.4"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! CallDirectoryManager is implemented and ready to be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;Learn more about Platform-Flutter interaction&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-extension-and-number-storage"&gt;
  &lt;/a&gt;
  App Extension and number storage
&lt;/h2&gt;

&lt;p&gt;Since, due to the presence of the Call Directory in the iOS extension, we will not be able to provide its implementation with the plugin and working with platform code is usually unfamiliar for Flutter developers, we will try to help them as much as possible providing ... Documentation!&lt;/p&gt;

&lt;p&gt;Let's create a complete app extension and storage samples and connect them to the example app of our plugin.&lt;/p&gt;

&lt;p&gt;As the simplest version of the storage, we will use &lt;code&gt;UserDefaults&lt;/code&gt;, which we will wrap in &lt;code&gt;propertyWrapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the interface of our storage looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Access to the storage from the iOS app&lt;/span&gt;
&lt;span class="kd"&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;AppDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FlutterAppDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blockedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;blockedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BlockableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Access to the storage from the app extension&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;CallDirectoryHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blockedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;blockedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BlockableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@NullableUserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lastUpdate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;lastUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storage implementation code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/UserDefault.swift"&gt;UserDefaults&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS app code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/AppDelegate.swift"&gt;iOS App Delegate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS extension code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/CallDirectoryExtensionExample/CallDirectoryHandler.swift"&gt;iOS App Extension&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the storage and extension samples are not part of the plugin, but rather part of the example application that comes with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pass-numbers-from-flutter-to-ios-and-vice-versa"&gt;
  &lt;/a&gt;
  Pass numbers from Flutter to iOS and vice versa
&lt;/h2&gt;

&lt;p&gt;So, the app extension is configured and connected to the storage, the necessary methods of CallDirectoryManager are implemented, the last detail – to learn how to take numbers from Flutter and put them in the platform storage or, conversely, request them from the platform storage.&lt;/p&gt;

&lt;p&gt;The easiest way as it may seem is to make the user of the plugin deal with the data. He'll have to set up his own MethodChannel or use other third-party storage management solutions. It will certainly suit some people! :) And for the rest, we will make a simple API to pass numbers directly through our framework. This functionality will be optional so we don’t limit those who are more comfortable using their ways of transferring data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;Let’s see which interfaces we need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add blocked/identifiable numbers to the storage&lt;/li&gt;
&lt;li&gt;Delete blocked/identifiable numbers from the repository&lt;/li&gt;
&lt;li&gt;Request blocked/identifiable numbers from the repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We previously decided to use the &lt;code&gt;FCXPlugin&lt;/code&gt; (Flutter) and &lt;code&gt;FlutterCallkitPlugin&lt;/code&gt; (iOS) classes for the helpers. However, Call Directory is a highly specialized functionality that is not used in every project. That's why I want to put it in a separate file but leave the access through the &lt;code&gt;FCXPlugin&lt;/code&gt; class object. The extension will do this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin_CallDirectoryExtension&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeAllBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeAllIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To let Flutter access numbers that are in storage on the iOS side, the user of the plugin needs to somehow connect his database of numbers and the plugin. Let’s give him the interface to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@interface&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPlugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;getBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didAddBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveAllBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveAllIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each type of interaction with the repository has its handler. It is called by our framework every time the corresponding helper is called from the Flutter side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Handlers are optional which allows you to use only some part of this functionality or use your own solution instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Now let's implement the communication between the declared helper methods in Flutter and the handlers in iOS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a lot of methods but they all work almost the same. That’s why we will focus on two of them, the ones with the opposite direction of data movement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-identifiable-numbers"&gt;
  &lt;/a&gt;
  Get identifiable numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the platform method and save the result    List&amp;lt;dynamic&amp;gt; numbers = await _methodChannel.invokeMethod(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.getIdentifiablePhoneNumbers'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Type the result and return it to the user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'label'&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.getIdentifiablePhoneNumbers"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if the handler exists,&lt;/span&gt;
        &lt;span class="c1"&gt;// if not, return an error&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorHandlerIsNotRegistered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"getIdentifiablePhoneNumbers"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Using the handler, request numbers from a user&lt;/span&gt;
    &lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableArray&lt;/span&gt; &lt;span class="nv"&gt;arrayWithCapacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Wrap each number in the dictionary type &lt;/span&gt;
    &lt;span class="c1"&gt;// so we could pass them via MethodChannel &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSMutableDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableDictionary&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"number"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSNumber&lt;/span&gt; &lt;span class="nv"&gt;numberWithLongLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt; &lt;span class="nv"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the numbers to Flutter&lt;/span&gt;
    &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-identifiable-numbers"&gt;
  &lt;/a&gt;
  Add identifiable numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Prepare the numbers to be passed via MethodChannel&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_toMap&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the numbers to the native code&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.addIdentifiablePhoneNumbers'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;arguments&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.addIdentifiablePhoneNumbers"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if the handler exists,&lt;/span&gt;
        &lt;span class="c1"&gt;// if not, return an error&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorHandlerIsNotRegistered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"didAddIdentifiablePhoneNumbers"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Get the numbers passed as arguments&lt;/span&gt;
    &lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if they’re valid&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"numbers must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Type the numbers&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"number"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;__auto_type&lt;/span&gt; &lt;span class="n"&gt;identifiableNumber&lt;/span&gt;
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;initWithNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longLongValue&lt;/span&gt;
                                                                                     &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"label"&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt; &lt;span class="nv"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the typed numbers to the handler&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Tell Flutter about the end of operation&lt;/span&gt;
    &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest of the methods are implemented the same way, here is the full code for Flutter and iOS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/lib/src/call_directory/call_directory_extension.dart"&gt;Flutter side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/ios/Classes/FlutterCallkitPlugin.m"&gt;iOS side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#usage-samples"&gt;
  &lt;/a&gt;
  Usage samples
&lt;/h2&gt;

&lt;p&gt;Now we move to the user side of the plugin and see how our user can use our interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reload-extension"&gt;
  &lt;/a&gt;
  Reload extension
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reloadExtension(withIdentifier:completionHandler:)&lt;/code&gt; method is used to reload the Call Directory extension. You may need it, for example, after adding new numbers to the storage so that they get into CallKit.&lt;/p&gt;

&lt;p&gt;Use it the same way you use native CallKit API: call &lt;code&gt;FCXCallDirectoryManager&lt;/code&gt; and request reload by the given &lt;code&gt;extensionIdentifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_extensionID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="s"&gt;'com.voximplant.flutterCallkit.example.CallDirectoryExtension'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;FCXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_extensionID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-identified-numbers"&gt;
  &lt;/a&gt;
  Get identified numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We request a list of identifiable numbers using our plugin class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;getIdentifiablePhoneNumbers&lt;/code&gt; handler, which the plugin uses to pass the specified numbers to Flutter. We will use it to pass the numbers from our &lt;code&gt;identifiedNumbers&lt;/code&gt; storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callKitPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;

&lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Add a phone number request event handler&lt;/span&gt;
&lt;span class="n"&gt;callKitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Return the numbers from the storage to the handler&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the numbers from the user storage will go to the handler and then to Flutter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-identified-numbers"&gt;
  &lt;/a&gt;
  Add identified numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We pass the numbers that we want to identify to the plugin object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiedNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;didAddIdentifiablePhoneNumbers&lt;/code&gt; handler, which the plugin uses to notify the platform code about receiving new numbers from Flutter. In the handler, we save the received numbers to the number storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callKitPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;

&lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Add an event handler for adding numbers&lt;/span&gt;
&lt;span class="n"&gt;callKitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Save the numbers to the storage &lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;contentsOf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;identifiableNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// The numbers in Call Directory must be sorted&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now numbers from Flutter go to the plugin, then to the event handler, and eventually to the user's number storage. Next time you reload the Call Directory extension, they will be available for CallKit for call identification.&lt;/p&gt;

&lt;p&gt;Full code samples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/AppDelegate.swift"&gt;iOS Example App Delegate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/CallDirectoryExtensionExample/CallDirectoryHandler.swift"&gt;iOS Example App Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/lib/call_service.dart"&gt;Flutter Example Call Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h2&gt;

&lt;p&gt;We managed to make an opportunity to use the CallKit Call Directory from Flutter!&lt;/p&gt;

&lt;p&gt;The details of platform communications are still hidden in the depths of the plugin, the native API is preserved, and the custom iOS implementation is well documented.&lt;/p&gt;

&lt;p&gt;Now it is relatively easy to block and/or identify numbers using the native Call Directory in Flutter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--177SDEih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvgo4kjurcqpd2xwwvto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--177SDEih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvgo4kjurcqpd2xwwvto.png" alt="Final scheme"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of working with Call Directory in Flutter application using flutter_callkit_voximplant&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completely moved CallDirectoryManager interface &lt;/li&gt;
&lt;li&gt;Created an easy way to pass the numbers from Flutter code to iOS, leaving the option to use your data transfer solutions&lt;/li&gt;
&lt;li&gt;Described the architecture of the solution in the README with visual diagrams for better understanding&lt;/li&gt;
&lt;li&gt;Added a full-fledged working example app that uses all Call Directory functionality and implements platform modules samples (iOS extension and data storage)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit"&gt;flutter_callkit code on GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/tree/master/example"&gt;Example app code on GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/doc/call_directory/README.md"&gt;Full docs on usage Call Directory with flutter_callkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/callkit?language=objc"&gt;CallKit Framework Documentation by Apple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide by Apple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;Writing custom platform-specific code by Flutter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Page Speed Insights (Lighthouse) went through an upgrade on 1st June 2021 - what changed and how will it affect you? </title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 25 Jun 2021 12:40:20 +0000</pubDate>
      <link>https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g</link>
      <guid>https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g</guid>
      <description>&lt;p&gt;Page Speed Insights is now running Lighthouse 8.0 and let me tell you, the changes that have been made to the scoring are going to really ruin some of your scores!&lt;/p&gt;

&lt;p&gt;With that being said, if you aren't building a site with JavaScript in the browser you will probably actually benefit!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell:&lt;/strong&gt; It is time to ditch those heavy front-end frameworks for sites that you want to rank well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-this-post-for"&gt;
  &lt;/a&gt;
  Who is this post for?
&lt;/h2&gt;

&lt;p&gt;People building websites that need to rank well in Google.&lt;/p&gt;

&lt;p&gt;With the upcoming &lt;a href="https://developers.google.com/search/blog/2021/04/more-details-page-experience"&gt;Web Vitals update to Google Search Algorithm starting to be rolled out&lt;/a&gt;, and being rolled out fully by the end of August, it is &lt;strong&gt;essential&lt;/strong&gt; you start working on fixing these things now if you rely on SEO for traffic.&lt;/p&gt;

&lt;p&gt;And unlike other articles on the subject I am going to assume you have at least heard of and used Page Speed Insights or a similar speed checking service before.&lt;/p&gt;

&lt;p&gt;With that being said I will refer to all of these services under the term "Lighthouse" so I better give you a super quick bit of info:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lighthouse-in-20-seconds"&gt;
  &lt;/a&gt;
  Lighthouse in 20 seconds
&lt;/h2&gt;

&lt;p&gt;For those of you who don't know, &lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;Lighthouse&lt;/a&gt; is the engine that powers &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;page speed insights&lt;/a&gt;, &lt;a href="https://web.dev/measure/"&gt;web.dev/measure&lt;/a&gt;, &lt;a href="https://gtmetrix.com/"&gt;GT Metrix&lt;/a&gt; etc. &lt;/p&gt;

&lt;p&gt;It is probably the most widely used testing utility for website load speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-so-what-have-they-changed-this-time"&gt;
  &lt;/a&gt;
  OK so what have they changed this time?
&lt;/h2&gt;

&lt;p&gt;The score weightings have been updated once again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v6-v7-scoring"&gt;
  &lt;/a&gt;
  V6 / V7 scoring
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;First Contentful Paint        15%
Speed Index                   15%
Largest Contentful Paint      25%
Time to Interactive           15%
Total Blocking Time           25%
Cumulative Layout Shift        5%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#v8-scoring-new-scoring"&gt;
  &lt;/a&gt;
  V8 scoring (new scoring)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;First Contentful Paint        10% -
Speed Index                   10% -
Largest Contentful Paint      25% 
Time to Interactive           10% -
Total Blocking Time           30% +
Cumulative Layout Shift       15% +
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;metric&lt;/th&gt;
&lt;th&gt;v6 + v7 weight&lt;/th&gt;
&lt;th&gt;v8 weight&lt;/th&gt;
&lt;th&gt;change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;First Contentful Paint (FCP)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speed Index (SI)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Largest Contentful Paint (LCP)&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time To Interactive (TTI)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total Blocking Time (TBT)&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cumulative Layout Shift (CLS)&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#in-english-please-these-metrics-mean-nothing-to-me"&gt;
  &lt;/a&gt;
  In English please, these metrics mean nothing to me!
&lt;/h2&gt;

&lt;p&gt;In short, the focus has shifted to when the page is actually ready to use, rather than when things first start appearing.&lt;/p&gt;

&lt;p&gt;It is actually a little more complex than that and is beyond the scope of this post but here is a summary of what you need to know:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-heavy-sites-are-going-to-take-a-hit"&gt;
  &lt;/a&gt;
  JavaScript heavy sites are going to take a hit.
&lt;/h3&gt;

&lt;p&gt;If you are downloading 100kb of JS just to render the above the fold content (the initial content you can see without scrolling) then your score is likely going to go down (again! It is time to take the hint! Stop using React for brochure sites unless you know how to tree shake and code split!).&lt;/p&gt;

&lt;p&gt;This is linked to the "Total Blocking Time (TBT)" metric. It measures how many tasks within your JS take longer than 50ms, then it adds up any tasks that take longer minus the original 50ms allowance.&lt;/p&gt;

&lt;p&gt;To make that more clear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Task A: 30ms (less than 50ms so 0ms added to TBT)&lt;/li&gt;
&lt;li&gt;Task B: 55ms (55ms - 50ms, so 5ms added to TBT)&lt;/li&gt;
&lt;li&gt;Task C: 10ms (less than 50ms again so TBT is still 5ms)&lt;/li&gt;
&lt;li&gt;Task D: 95ms (95ms - 50ms, so 45ms added making TBT 50ms total).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the TBT would be 50ms in the above scenario.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; This may seem super easy to pass, but consider that "mobile first" is Google's policy. So when you run a report on Page Speed Insights, the Lighthouse tab in Chrome etc. look at the &lt;strong&gt;mobile scores.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;For mobile there is throttling applied to simulate a mid-tier mobile phone (a 4x CPU slowdown) and a slow 4G connection.&lt;/p&gt;

&lt;p&gt;You can find out &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/throttling.md"&gt;more info about throttling in Lighthouse here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is why I do not recommend looking at pingdom.com and GT Metrix (unless you have a PRO account), they both monitor desktop speeds and it is really easy to get a decent score there.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inlining-critical-css-is-even-more-important"&gt;
  &lt;/a&gt;
  Inlining critical CSS is even more important
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.smashingmagazine.com/2015/08/understanding-critical-css/"&gt;critical CSS&lt;/a&gt; is all the CSS required to render the above the fold content.&lt;/p&gt;

&lt;p&gt;You need to inline this in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag within the document so that the page can load and display the page without needing a second network request to have completed.&lt;/p&gt;

&lt;p&gt;This helps improve Largest Contentful Paint and minimise Layout Shifts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-sure-you-stop-layout-shifts"&gt;
  &lt;/a&gt;
  Make sure you stop layout shifts
&lt;/h3&gt;

&lt;p&gt;People tend to get confused by this one. Basically if you see something load on the page, it should not move, get larger or smaller, unless it is a direct result of pressing a button etc.&lt;/p&gt;

&lt;p&gt;For this reason I would suggest you read this post on how to stop images causing a Layout Shift:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/quick-tips-how-to-fix-image-elements-do-not-have-explicit-width-and-height-in-page-speed-insights-lighthouse-3776" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Quick Tips: How to fix "Image elements do not have explicit width and height" in Page Speed Insights / Lighthouse&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jun 6 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;If you are using JS to fetch data then make sure you have a correctly sized placeholder for it...but if you are doing that for above the fold content you are already in trouble, as for the fastest rendering all above the fold content should be served within the initial HTML.&lt;/p&gt;

&lt;p&gt;In fact the above the fold content should fit into 14kb for insane speeds, 42kb for super fast speeds or 98kb for good speeds (kind of). It is all to do with how TCP works and something called &lt;a href="https://en.wikipedia.org/wiki/TCP_congestion_control#:~:text=TCP%20uses%20a%20mechanism%20called,size%20(MSS)%20in%20size."&gt;TCP slow start&lt;/a&gt;...but that is for another post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-still-need-to-ensure-your-largest-contentful-paint-is-good"&gt;
  &lt;/a&gt;
  You still need to ensure your Largest Contentful Paint is good
&lt;/h3&gt;

&lt;p&gt;Largest Contentful Paint (LCP) is actually quite straight forward. &lt;/p&gt;

&lt;p&gt;Say you have a page with 4 elements that appear above the fold. If one of those elements takes up 40% of the space (element A) and the other 3 each take up 20% (elements B,C and D) then element A would be the element that is the Largest Paint element.&lt;/p&gt;

&lt;p&gt;The score is based on how quickly that element is rendered to the page. The quicker that element appears the better your score.&lt;/p&gt;

&lt;p&gt;Now we have covered inlining critical CSS within the HTML so we don't need to wait for an additional network request before we can render the page, but what if that element is an image?&lt;/p&gt;

&lt;p&gt;One technique is to use a &lt;a href="https://www.robinosborne.co.uk/2018/01/05/image-placeholders-do-it-right-or-dont-do-it-at-all-please/"&gt;Low Quality Image Placeholder (LQIP)&lt;/a&gt;. Yet again the detail of how to do that is for another post but in essence you use a small very low quality image (say 32px by 18px for a 16:9 aspect ratio) and then inline that using a data URI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src= &lt;/span&gt;&lt;span class="s"&gt;"data:image/jpg;base64,[data encoded with base64]"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"your alt"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1600"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then swap in the actual image using JS once the core page content has loaded.&lt;/p&gt;

&lt;p&gt;There are loads of different ways to achieve this and so it deserves its own post as I said, the idea of this post is to give you things to research yourself and suggestions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-that-dont-affect-your-score-but-to-be-mindful-of"&gt;
  &lt;/a&gt;
  Things that don't affect your score but to be mindful of
&lt;/h2&gt;

&lt;p&gt;Nearly every major update that has been released in the last few months has had an update to do with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policies (CSP)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This update is no exception. &lt;/p&gt;

&lt;p&gt;They have introduced an audit called "csp-xss" under "Best practices" (which isn't on Page Speed Insights but is available in Lighthouse in developer tools etc.). &lt;/p&gt;

&lt;p&gt;This still has no scoring weight associated with it but you should start thinking about it now as they keep putting more and more effort into this.&lt;/p&gt;

&lt;p&gt;If you want to see the state of your sites security headers may I suggest using &lt;a href="https://observatory.mozilla.org/"&gt;https://observatory.mozilla.org/&lt;/a&gt; to test your site and start learning about headers that protect your clients from malicious actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The idea of this post was not to tell you how to fix everything, but rather to let you know what has changed and what it means for you, even if you don't understand everything about Page Speed Insights.&lt;/p&gt;

&lt;p&gt;Lighthouse is trying to steer you away from using heavy JS frameworks for brochure sites or even e-commerce sites where page speed is essential and search rankings are important.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g&amp;amp;text=%22Lighthouse%20is%20trying%20to%20steer%20you%20away%20from%20using%20heavy%20JS%20frameworks%20for%20brochure%20sites%20or%20even%20e-commerce%20sites%20where%20page%20speed%20is%20essential%20and%20search%20rankings%20are%20important.%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pMHpmDTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo4rtxyay0orh7gmnin.jpg" alt='Click to Tweet: "Lighthouse is trying to steer you away from using heavy JS frameworks for brochure sites or even e-commerce sites where page speed is essential and search rankings are important."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need help with a &lt;strong&gt;specific&lt;/strong&gt; issue on your site then let me know in the comments.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>5 GitHub Projects to make you a better DevOps Engineer ⚡</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 25 Jun 2021 12:32:37 +0000</pubDate>
      <link>https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl</link>
      <guid>https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl</guid>
      <description>&lt;p&gt;DevOps is one of the most challenging fields to be in, and to stay relevant you need to learn constantly.&lt;/p&gt;

&lt;p&gt;So today, I want to share 5 amazing GitHub projects which will help you become a better DevOps engineer. These 5 Github projects can come in handy for anyone looking to learn and want good resources to dive in. 🏊‍♀️&lt;/p&gt;

&lt;p&gt;So let's get started👊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-book-of-secret-knowledge"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;The book of secret knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 42k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repository is a collection of various materials and tools aimed towards System and Network administrators, DevOps, Pentesters, and Security Researchers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trimstray"&gt;
        trimstray
      &lt;/a&gt; / &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;
        the-book-of-secret-knowledge
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cZbHG7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trimstray/the-book-of-secret-knowledge/raw/master/static/img/the-book-of-secret-knowledge-preview.png" alt="Master"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;Knowledge is powerful, be careful how you use it!&lt;/i&gt;"&lt;/p&gt;

&lt;h4&gt;
A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools, and more.&lt;/h4&gt;



&lt;p&gt;
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/pulls"&gt;
    &lt;img src="https://camo.githubusercontent.com/d29d75f2930f80fe8a37354d3d3d44518d4e6b4a31f8b646b90c56e7e0d1e463/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f6c6f6e6743616368653d74727565" alt="Pull Requests"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/LICENSE.md"&gt;
    &lt;img src="https://camo.githubusercontent.com/2ee5364f0e08ac47e00119204cf1ab24dd21ec87b4fb81bb657feae43ec88ed4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d6c69676874677265792e7376673f6c6f6e6743616368653d74727565" alt="MIT License"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c43b110bed909475c271c4eeb9255d8aa76e2e14be650239653f02cdab85ae4c/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7472696d73747261792e7376673f6c6f676f3d74776974746572"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
  Created by
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;trimstray&lt;/a&gt; and
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/graphs/contributors"&gt;contributors&lt;/a&gt;

&lt;/div&gt;




&lt;h2&gt;
📔  What is it?&lt;/h2&gt;
&lt;p&gt;This repository is a collection of various materials and tools that I use every day in my work. It contains a lot of useful information gathered in one piece. It is an invaluable source of knowledge for me that I often look back on.&lt;/p&gt;
&lt;h2&gt;
🚻  For whom?&lt;/h2&gt;
&lt;p&gt;For everyone, really. Here everyone can find their favourite tastes. But to be perfectly honest, it is aimed towards System and Network administrators, DevOps, Pentesters, and Security Researchers.&lt;/p&gt;
&lt;h2&gt;
ℹ️  Contributing&lt;/h2&gt;
&lt;p&gt;If you find something which doesn't make sense, or something doesn't seem right, please make a pull request and please add valid and well-reasoned explanations about your changes or comments.&lt;/p&gt;
&lt;p&gt;A few simple rules for this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inviting and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-awesome-scalability"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;Awesome Scalability&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 32.5k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo has an organized reading list for illustrating the patterns of scalable, reliable, and performant large-scale systems. This is one of the best resources on scalability with real examples from large organizations.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/binhnguyennus"&gt;
        binhnguyennus
      &lt;/a&gt; / &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;
        awesome-scalability
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Patterns of Scalable, Reliable, and Performant Large-Scale Systems
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="http://awesome-scalability.com/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6a8pgi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/logo.png" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An updated and organized reading list for illustrating the patterns of scalable, reliable, and performant large-scale systems. Concepts are explained in the articles of prominent engineers and credible references. Case studies are taken from battle-tested systems that serve millions to billions of users.&lt;/p&gt;
&lt;h4&gt;
If your system goes slow&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Understand your problems: scalability problem (fast for a single user but slow under heavy load) or performance problem (slow for a single user) by reviewing some &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#principle"&gt;design principles&lt;/a&gt; and checking how &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#scalability"&gt;scalability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#performance"&gt;performance&lt;/a&gt; problems are solved at tech companies. The section of &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#intelligence"&gt;intelligence&lt;/a&gt; are created for those who work with data and machine learning at big (data) and deep (learning) scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
If your system goes down&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;"Even if you lose all one day, you can build all over again if you retain your calm!" - Thuan Pham, former CTO of Uber. So, keep calm and mind the &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#availability"&gt;availability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#stability"&gt;stability&lt;/a&gt; matters!&lt;/p&gt;
&lt;/blockquote&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/binhnguyennus/awesome-scalability"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-devops-exercises"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/bregman-arie/devops-exercises"&gt;DevOps Exercises&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 8.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains questions and exercises on technical topics related to DevOps and SRE.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bregman-arie"&gt;
        bregman-arie
      &lt;/a&gt; / &lt;a href="https://github.com/bregman-arie/devops-exercises"&gt;
        devops-exercises
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops_exercises.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb09dzMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops_exercises.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ℹ️  This repo contains questions and exercises on various technical topics, sometimes related to DevOps and SRE :)&lt;/p&gt;
&lt;p&gt;📊  There are currently &lt;strong&gt;1553&lt;/strong&gt; questions&lt;/p&gt;
&lt;p&gt;📚  To learn more about DevOps and SRE, check the resources in &lt;a href="https://github.com/bregman-arie/devops-resources"&gt;devops-resources&lt;/a&gt; repository&lt;/p&gt;
&lt;p&gt;⚠️  You can use these for preparing for an interview but most of the questions and exercises don't represent an actual interview. Please read &lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/common-qa.md"&gt;Q&amp;amp;A&lt;/a&gt; for more details&lt;/p&gt;
&lt;p&gt;👥  &lt;a href="https://www.facebook.com/groups/538897960007080" rel="nofollow"&gt;Join&lt;/a&gt; our &lt;a href="https://www.facebook.com/groups/538897960007080" rel="nofollow"&gt;DevOps community&lt;/a&gt; where we have discussions and resources on DevOps&lt;/p&gt;
&lt;p&gt;📝  You can add more questions and exercises by submitting pull requests :) Read about contribution guidelines &lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/CONTRIBUTING.md"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#devops"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNtHkNqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops.png" width="70px;" height="75px;" alt="DevOps"&gt;&lt;br&gt;&lt;b&gt;DevOps&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#jenkins"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dg5AdRYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/jenkins.png" width="85px;" height="85px;" alt="Jenkins"&gt;&lt;br&gt;&lt;b&gt;Jenkins&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#git"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUlFk_8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/git.png" width="80px;" height="75px;" alt="Git"&gt;&lt;br&gt;&lt;b&gt;Git&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#ansible"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5deOUih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/ansible.png" width="75px;" height="75px;" alt="ansible"&gt;&lt;br&gt;&lt;b&gt;Ansible&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#Network"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jbLqGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/network.png" width="80x;" height="75px;" alt="Network"&gt;&lt;br&gt;&lt;b&gt;Network&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#linux"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4gBbxA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/linux.png" width="75x;" height="75px;" alt="Linux"&gt;&lt;br&gt;&lt;b&gt;Linux&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#terraform"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXcBiZVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/terraform.png" width="70px;" height="75px;" alt="Terraform"&gt;&lt;br&gt;&lt;b&gt;Terraform&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#programming"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nD1n1xQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/programming.png" width="75px;" height="75px;" alt="programming"&gt;&lt;br&gt;&lt;b&gt;Programming&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#python"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C1IOISE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/python.png" width="80px;" height="75px;" alt="Python"&gt;&lt;br&gt;&lt;b&gt;Python&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#go"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLtC_nLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/Go.png" width="75px;" height="75px;" alt="go"&gt;&lt;br&gt;&lt;b&gt;Go&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#shell-scripting"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0AbH1mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/bash.png" width="70px;" height="75px;" alt="Bash"&gt;&lt;br&gt;&lt;b&gt;Shell Scripting&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#kubernetes"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZcVsYx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/kubernetes.png" width="75px;" height="75px;" alt="kubernetes"&gt;&lt;br&gt;&lt;b&gt;Kubernetes&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#prometheus"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oLro69O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/prometheus.png" width="75px;" height="75px;" alt="Prometheus"&gt;&lt;br&gt;&lt;b&gt;Prometheus&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#mongo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCxBdvkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/mongo.png" width="75px;" height="75px;" alt="Mongo"&gt;&lt;br&gt;&lt;b&gt;Mongo&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#cloud"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6offB----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/cloud.png" width="110px;" height="75px;" alt="Cloud"&gt;&lt;br&gt;&lt;b&gt;Cloud&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#aws"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoSnHdDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/aws.png" width="75px;" height="75px;" alt="aws"&gt;&lt;br&gt;&lt;b&gt;AWS&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#azure"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpgkvCC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/azure.png" width="75px;" height="75px;" alt="azure"&gt;&lt;br&gt;&lt;b&gt;Azure&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#gcp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKYaZXFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/googlecloud.png" width="80px;" height="75px;" alt="Google Cloud Platform"&gt;&lt;br&gt;&lt;b&gt;Google Cloud Platform&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#openstack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Sy93A5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/openstack.png" width="75px;" height="75px;" alt="openstack"&gt;&lt;br&gt;&lt;b&gt;OpenStack&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#security"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxLpQsn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/security.png" width="75px;" height="75px;" alt="security"&gt;&lt;br&gt;&lt;b&gt;Security&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#puppet"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKdgDjIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/puppet.png" width="75px;" height="75px;" alt="puppet"&gt;&lt;br&gt;&lt;b&gt;Puppet&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfbkjAzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/monitoring.png" width="75px;" height="75px;" alt="Monitoring"&gt;&lt;br&gt;&lt;b&gt;Monitoring&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#elastic"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WrKgy75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/elastic.png" width="110px;" height="75px;" alt="Elastic"&gt;&lt;br&gt;&lt;b&gt;Elastic&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#virtualization"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3s6DIgIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/virtualization.png" width="75px;" height="75px;" alt="Virtualization"&gt;&lt;br&gt;&lt;b&gt;Virtualization&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#dns"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oDa-4tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/dns.png" width="75px;" height="75px;" alt="DNS"&gt;&lt;br&gt;&lt;b&gt;DNS&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#operating-system"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xR1YZDBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/os.png" width="75px;" height="75px;" alt="Operating System"&gt;&lt;br&gt;&lt;b&gt;Operating System&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#distributed"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vz7c0jRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/distributed.png" width="110px;" height="75px;" alt="Distributed"&gt;&lt;br&gt;&lt;b&gt;Distributed&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#general"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMmBNbCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/general.png" width="110px;" height="75px;" alt="General"&gt;&lt;br&gt;&lt;b&gt;General&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#testing"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0X0X3mgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/testing.png" width="75px;" height="75px;" alt="Testing"&gt;&lt;br&gt;&lt;b&gt;Testing&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#databases"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3imgOYm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/databases.png" width="75px;" height="75px;" alt="Databases"&gt;&lt;br&gt;&lt;b&gt;Databases&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#regex"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJDAwVtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/regex.png" width="75ph;" height="75px;" alt="RegEx"&gt;&lt;br&gt;&lt;b&gt;Regex&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#system-design"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JiQuC29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/design.png" width="110px;" height="75px;" alt="Design"&gt;&lt;br&gt;&lt;b&gt;System Design&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#hardware"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXLHGsIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/hardware.png" width="110px;" height="75px;" alt="Hardware"&gt;&lt;br&gt;&lt;b&gt;Hardware&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#big-data"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yNlL3qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/big-data.png" width="110px;" height="75px;" alt="Big Data"&gt;&lt;br&gt;&lt;b&gt;Big Data&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#questions-you-ask"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAarJQgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/you.png" width="110px;" height="75px;" alt="you"&gt;&lt;br&gt;&lt;b&gt;Questions you ask&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#certificates"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYoAbZam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/certificates.png" width="75px;" height="75px;" alt="Certificates"&gt;&lt;br&gt;&lt;b&gt;Certificates&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#containers"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piwJpywR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/containers.png" width="70px;" height="75px;" alt="Containers"&gt;&lt;br&gt;&lt;b&gt;Containers&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#sql"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cso8Jjt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/sql.png" width="75px;" height="75px;" alt="sql"&gt;&lt;br&gt;&lt;b&gt;SQL&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#openshift"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQI81TUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/openshift.png" width="75px;" height="75px;" alt="OpenShift"&gt;&lt;br&gt;&lt;b&gt;OpenShift&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#storage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7GzMc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/storage.png" width="75px;" height="75px;" alt="Storage"&gt;&lt;br&gt;&lt;b&gt;Storage&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#HR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYZxXM2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/HR.png" width="110px;" height="75px;" alt="HR"&gt;&lt;br&gt;&lt;b&gt;HR&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#exercises"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rciNPz3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/exercises.png" width="110px;" height="75px;" alt="Exercises"&gt;&lt;br&gt;&lt;b&gt;Exercises&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
DevOps&lt;/h2&gt;

What is…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bregman-arie/devops-exercises"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-test-your-sysadmin-skills"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;Test your sysadmin skills&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 7.2k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This project contains test questions and answers that can be asked during an interview/exam for positions such as Linux System Administrator.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trimstray"&gt;
        trimstray
      &lt;/a&gt; / &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;
        test-your-sysadmin-skills
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of Linux Sysadmin Test Questions and Answers. Test your knowledge and skills in different fields with these Q/A.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZLA4kAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trimstray/test-your-sysadmin-skills/raw/master/static/img/sysadmin_preview.png" alt="Master"&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;⭐&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;A great Admin doesn't need to know everything, but they should be able to come up with amazing solutions to impossible projects.&lt;/i&gt;" - cwheeler33 (ServerFault)&lt;/p&gt;

&lt;p&gt;⭐&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;My skills are making things work, not knowing a billion facts. [...] If I need to fix a system I’ll identify the problem, check the logs and look up the errors. If I need to implement a solution I’ll research the right solution, implement and document it, the later on only really have a general idea of how it works unless I interact with it frequently... it’s why it’s documented.&lt;/i&gt;" - Sparcrypt (Reddit)&lt;/p&gt;



&lt;p&gt;
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills/pulls"&gt;
    &lt;img src="https://camo.githubusercontent.com/d29d75f2930f80fe8a37354d3d3d44518d4e6b4a31f8b646b90c56e7e0d1e463/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f6c6f6e6743616368653d74727565" alt="Pull Requests"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/trimstray/test-your-sysadmin-skills/master/LICENSE.md"&gt;
    &lt;img src="https://camo.githubusercontent.com/2ee5364f0e08ac47e00119204cf1ab24dd21ec87b4fb81bb657feae43ec88ed4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d6c69676874677265792e7376673f6c6f6e6743616368653d74727565" alt="MIT License"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c43b110bed909475c271c4eeb9255d8aa76e2e14be650239653f02cdab85ae4c/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7472696d73747261792e7376673f6c6f676f3d74776974746572"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
  Created by
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;trimstray&lt;/a&gt; and
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills/graphs/contributors"&gt;contributors&lt;/a&gt;

&lt;/div&gt;



&lt;br&gt;
&lt;br&gt;

&lt;p&gt;ℹ️  This project contains &lt;strong&gt;284&lt;/strong&gt; test questions and answers that can be used as a test your knowledge or during an interview/exam for position such as &lt;strong&gt;Linux (*nix) System Administrator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;✔️  The answers are only &lt;strong&gt;examples&lt;/strong&gt; and do not exhaust…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#5-how-they-sre"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/upgundecha/howtheysre"&gt;How they SRE&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 4.8k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo is a curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/upgundecha"&gt;
        upgundecha
      &lt;/a&gt; / &lt;a href="https://github.com/upgundecha/howtheysre"&gt;
        howtheysre
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
How they SRE&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt; &lt;a href="https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXEhLQc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml/badge.svg" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/upgundecha/howtheysre/main/banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9DMdVtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/upgundecha/howtheysre/main/banner.png" alt="Alt" title="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How They SRE&lt;/strong&gt; is a curated knowledge repository of best practices, tools, techniques, and culture of SRE adopted by the leading technology or tech-savvy organizations.&lt;/p&gt;
&lt;p&gt;Many organizations regularly come forward and share their best practices, tools, techniques and offer an insight into engineering culture on various public platforms like engineering blogs, conferences &amp;amp; meetups. The content is curated from these avenues and shared in this repository.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note to readers: This list refers to some of the articles, posts, videos, tools, and techniques published before 2015. Please use such material with caution as there may be recent advances in technology and practices which offer better alternatives and perspectives.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Site Reliability Engineering&lt;/li&gt;
&lt;li&gt;Hiring and Building SRE teams&lt;/li&gt;
&lt;li&gt;SRE Culture&lt;/li&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;Monitoring &amp;amp; Observability&lt;/li&gt;
&lt;li&gt;Alerting&lt;/li&gt;
&lt;li&gt;Incident Response…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/upgundecha/howtheysre"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;I hope you enjoyed this list. I will be coming up with more such amazing resources soon. So, stay tuned! 🙂&lt;/p&gt;




&lt;p&gt;Currently building &lt;a href="https://bit.ly/3h6mOMc"&gt;Signoz&lt;/a&gt; - an open-source APM and observability tool. 💙&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. It is an open-source alternative to DataDog, New Relic, etc.👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
👇 Features:&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>devops</category>
      <category>github</category>
      <category>cloud</category>
      <category>docker</category>
    </item>
    <item>
      <title>Cloud Computing- An Overview</title>
      <author>Neha Soni</author>
      <pubDate>Fri, 25 Jun 2021 12:00:36 +0000</pubDate>
      <link>https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3</link>
      <guid>https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3</guid>
      <description>&lt;p&gt;Hi everyone 👋🏻,&lt;br&gt;&lt;br&gt;
In this blog post, I am going to give you an overview of cloud computing. We will look at the examples of cloud computing and the old way of doing things. After that, I will also discuss the service models for cloud computing. &lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's get started&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#traditional-computing"&gt;
  &lt;/a&gt;
  Traditional Computing
&lt;/h1&gt;

&lt;p&gt;It is a computing environment historically used for hosting services, applications, and data that are owned, managed, and controlled by the same organization. In this computing, the user can have access to data only on the system in which data is stored. It is a possess of using physical &lt;strong&gt;data centers&lt;/strong&gt; for storing digital assets and running complete networking systems for daily operations. Now, &lt;br&gt;&lt;em&gt;What is a data center?&lt;/em&gt; &lt;br&gt;In a layman language, the data center is a building somewhere and in that building, we have routers, switches, firewalls, storage systems, servers, and application delivery controllers. And a data center is not really a cheap thing to build and maintain. For maintaining a data center there must be special air conditioning systems, redundant power supplies, redundant network connectivity, and lots of infrastructures to make sure that your services run &lt;strong&gt;24/7&lt;/strong&gt;. So there is a lot of headache in maintaining data centers. That's why many companies say goodbye to traditional IT and move to &lt;strong&gt;cloud computing&lt;/strong&gt;. But it doesn't mean it has gone away. It's still used in some companies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HL-KXqaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618019386/Th2NNlJdd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HL-KXqaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618019386/Th2NNlJdd.jpeg" alt="traditional it.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-cloud-computing"&gt;
  &lt;/a&gt;
  What is Cloud Computing?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;"Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing. Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider."&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HXCj_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618174731/dmV3tgDq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HXCj_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618174731/dmV3tgDq7.png" alt="cloud.png"&gt;&lt;/a&gt;&lt;br&gt;
There are many cloud service providers in the market, some of these are:-&lt;br&gt;
1.) Amazon Web services&lt;br&gt;
2.) Microsoft Azure&lt;br&gt;
3.) Google Cloud&lt;br&gt;
4.) Alibaba Cloud&lt;br&gt;
5.) IBM Cloud&lt;br&gt;
6.) Oracle Cloud&lt;br&gt;
7.) Cloud Sigma&lt;br&gt;
8.) SAP&lt;br&gt;
....and many more&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-computing-examples"&gt;
  &lt;/a&gt;
  Cloud computing examples
&lt;/h1&gt;

&lt;p&gt;Let's take examples of some services or applications that use cloud services to understand what cloud computing is.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TwD1yyso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618329205/2-AQFQfPuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TwD1yyso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618329205/2-AQFQfPuo.png" alt="examples.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;1.) Gmail, Dropbox, Facebook&lt;/strong&gt;:- These all are examples of cloud storage providers and the number of cloud storage providers is increasing day by day.&lt;br&gt;
&lt;strong&gt;Gmail&lt;/strong&gt; is one of Google’s most important email service providers that provide unlimited storage on the cloud. It is used by billions of people. Gmail is a consumer service as well as it comes as a business package too.&lt;br&gt;
&lt;strong&gt;Dropbox&lt;/strong&gt; is established in 2008 and right now is a true leader in cloud storage. It is a storage service to offers up to 1 TB of storage space for free and allows users to access files on any device through its website.&lt;br&gt;
&lt;strong&gt;Facebook&lt;/strong&gt; is the largest social media platform globally with 2.6 billion monthly active users worldwide. It can store a large amount of information, images, videos on your profile.&lt;br&gt;
&lt;strong&gt;2.) Microsoft Office 365&lt;/strong&gt;:-  Microsoft office 365 is cloud-based product access by lots of users through the internet. With the help of Office 365, you can work from anywhere and share the work documents with your colleagues worldwide. There are number of benefits of office 365 like it improves user productivity, provides 1 TB storage with OneDrive. You can easily recover data from the cloud if you lose your computer or it crashes etc.&lt;br&gt;
&lt;strong&gt;3.) Dell’s Secure Healthcare Cloud&lt;/strong&gt;:- Dell is one of the most used cloud service providers in Healthcare. It allows nurses, physicians, and administrators to share information quickly from anywhere and patients can access it remotely without any delay. It ensures patients receive the best possible care without unnecessary delay.&lt;br&gt;
There are many more examples of cloud computing in different areas like in education there is AWS(Amazon web services),  SlideRocket, Ratatype. For the government, there are IT consolidation, shared services, citizen services, etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-computing-deployment-models"&gt;
  &lt;/a&gt;
  Cloud Computing Deployment Models
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;"A cloud deployment model is defined according to where the infrastructure for the deployment resides and who has control over that infrastructure."&lt;/strong&gt; There are four deployment models associated with cloud computing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuXi_4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624602777282/iiOCcHU8p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuXi_4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624602777282/iiOCcHU8p.jpeg" alt="Cloud-Computing-types-Cloud-1.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-public-cloud"&gt;
  &lt;/a&gt;
  a.) Public cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pY7zrq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605300408/H8PO0gs55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pY7zrq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605300408/H8PO0gs55.png" alt="publiccloud.png"&gt;&lt;/a&gt;&lt;br&gt;
Amazon, Google, Microsoft are examples of public cloud. These companies support all users who want to make use of a computing resource and provide both services as well as the infrastructure on a subscription basis. The main advantage of a public cloud is its &lt;strong&gt;versatility&lt;/strong&gt; and &lt;strong&gt;pay as you go&lt;/strong&gt; structure that allows customers to provide more capacity on demand. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b-private-cloud"&gt;
  &lt;/a&gt;
  b.) Private cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUnV7zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605468764/_ulsM30YK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUnV7zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605468764/_ulsM30YK.png" alt="download.png"&gt;&lt;/a&gt;&lt;br&gt;
Private cloud usually resides behind the firewall and is used exclusively by a single business or organization. It may be physically located on the company’s on-site data center or sometimes companies also pay third-party service providers to host their private cloud. Private clouds are more expensive than public clouds due to the capital expenditure involved in acquiring and maintaining them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-hybrid-cloud"&gt;
  &lt;/a&gt;
  c.) Hybrid Cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbowYK6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605954231/phQaBrZGe.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbowYK6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605954231/phQaBrZGe.webp" alt="hybrid-cloud-diagram.webp"&gt;&lt;/a&gt;&lt;br&gt;
Hybrid cloud combines public cloud with private cloud. They are designed to allow the two platforms to interact seamlessly. Many organizations make use of this deployment model to scale up their IT infrastructure rapidly. It’s the perfect solution for organizations that needs a little bit of both options, usually dependent upon industry and size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d-community-cloud"&gt;
  &lt;/a&gt;
  d.) Community Cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPhcm-rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624606449839/3F4ikKpib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPhcm-rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624606449839/3F4ikKpib.png" alt="community-cloud.png"&gt;&lt;/a&gt;&lt;br&gt;
This deployment model supports multiple organizations sharing computing resources that are part of a community. The users are typically operating within the same industry or field and share common concerns in terms of security, compliance, and performance. It is not commonly used as the other three models. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-cloud-computing-over-traditional-it"&gt;
  &lt;/a&gt;
  Benefits of Cloud Computing over Traditional IT
&lt;/h1&gt;

&lt;p&gt;Let's discuss some benefits of cloud computing over Traditional IT and understands why companies choose to say goodbye to traditional IT.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Traditional IT infrastructure&lt;/th&gt;
&lt;th&gt;Cloud computing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;organizations will have to acquire a large number of servers, routers, switches, firewalls, storage systems with proper security&lt;/td&gt;
&lt;td&gt;All the hardware, networking, storage, and everything is provided by cloud service provider&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maintenance&lt;/td&gt;
&lt;td&gt;organizations will have to do regular checkups of their hardware and also have to ensure software being used are regularly updated&lt;/td&gt;
&lt;td&gt;Regular maintenance of hardware is handled by cloud service providers and they also handle software updates for services managed by service provider&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disaster recovery&lt;/td&gt;
&lt;td&gt;organizations will have to do necessary backups of data and setup so in case of disaster the users don’t face any downtimes&lt;/td&gt;
&lt;td&gt;cloud service providers have a global infrastructure with multiple data centers within one region, so in case of any disaster, services are uninterrupted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT staff&lt;/td&gt;
&lt;td&gt;a team of trained IT professionals had to be hired to monitor the entire infrastructure&lt;/td&gt;
&lt;td&gt;cloud service providers have highly trained IT staff that works 24/7 to ensure best services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flexibility and scaling&lt;/td&gt;
&lt;td&gt;to handle increasing workloads, more powerful hardware have to be set up so the user doesn’t feel any lag in services&lt;/td&gt;
&lt;td&gt;Cloud hosting offers an enhanced level of flexibility and scalability. Cloud servers can scale up or down depending on the level of traffic your website receives.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automation&lt;/td&gt;
&lt;td&gt;most of the processes of scaling up or down, backups, monitoring, etc. are manual and time-consuming&lt;/td&gt;
&lt;td&gt;from deploying the infrastructure, monitoring, backups to customers, and taking necessary actions in case of failures, all the things are automated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;running cost&lt;/td&gt;
&lt;td&gt;you will need to purchase equipment and additional server space upfront to adapt to business growth&lt;/td&gt;
&lt;td&gt;cloud service providers charge for the time resources are used or the amount of storage is being used.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#types-of-cloud-computing-services"&gt;
  &lt;/a&gt;
  Types of cloud computing services
&lt;/h1&gt;

&lt;p&gt;A lot of different types of cloud services fall under the overall category of cloud computing. The NIST(The National Institute of Standards and Technology) cloud computing definition identifies three cloud service models: software as a service (SaaS), platform as a service (PaaS), and infrastructure as a service (IaaS).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLjE1KMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613119966/Xo49fqqRL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLjE1KMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613119966/Xo49fqqRL.png" alt="spi4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saas"&gt;
  &lt;/a&gt;
  SaaS
&lt;/h3&gt;

&lt;p&gt;SaaS(Software as a Service) provides clients with the ability to use software applications on a remote basis via an internet web browser. Examples of SaaS include Google Applications and internet-based email applications like Mail, Hotmail, and Gmail. The most popular among online retailers, allows merchants to run direct sales applications such as shopping carts in the cloud without their customers having to download or install programs to make a purchase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paas"&gt;
  &lt;/a&gt;
  PaaS
&lt;/h3&gt;

&lt;p&gt;PaaS(Platform as a Service) provides clients with the ability to develop and publish customized applications in a hosted environment via the web. It represents a new model for software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iaas"&gt;
  &lt;/a&gt;
  IaaS
&lt;/h3&gt;

&lt;p&gt;IaaS(Infrastructure as a Service) allows clients to remotely use IT hardware and resources on a "pay-as-you-go" basis. It is also referred to as HaaS(Hardware as service). Major IaaS players include companies like IBM, Google, and Amazon. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#future-of-cloud-computing"&gt;
  &lt;/a&gt;
  Future of cloud computing
&lt;/h1&gt;

&lt;p&gt;Cloud computing is the future of enterprise applications and solutions. The International Data Corporation (IDC) estimates that already in 2018 at least half of IT spending is cloud-based. It has many benefits that it provides to its users and businesses. There are no standards or regulations worldwide that provided data through cloud computing. &lt;/p&gt;

&lt;p&gt;If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k"&gt;How to Build a Strong Professional Network Online&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>aws</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>AWS SSM Agent - Connection Error</title>
      <author>Vu Dao</author>
      <pubDate>Fri, 25 Jun 2021 11:49:21 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-ssm-agent-connection-error-3kn9</link>
      <guid>https://dev.to/awscommunity-asean/aws-ssm-agent-connection-error-3kn9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#when-trying-to-access-ec2-instance-using-aws-ssm-cli-or-ssm-connect-manager-and-get-error-raw-plugin-with-name-standardstream-not-found-step-name-standardstream-endraw-no-worry-this-post-shows-you-how-to-trouble-shoot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When trying to access EC2 instance using AWS ssm cli or SSM connect manager and get error &lt;code&gt;Plugin with name Standard_Stream not found. Step name: Standard_Stream&lt;/code&gt;. No worry, this post shows you how to trouble shoot&lt;/strong&gt;
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-What-is-the-error"&gt;What is the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Investigate-and-Apply-solution"&gt;Investigate and Apply solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-is-the-error"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-What-is-the-error"&gt;What is the error&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We got error when trying access EC2 instance using SSM agent and AWS CLI
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ aws ssm start-session --target i-123abc456efd789xx --region ap-northeast-2

Starting session with SessionId: userdev-004f77465f262084d


SessionId: userdev-004f77465f262084d : Plugin with name Standard_Stream not found. Step name: Standard_Stream
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Event from console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90uRWFGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ssm-agent/blob/master/troubleshoot/img/error.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90uRWFGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ssm-agent/blob/master/troubleshoot/img/error.png%3Fraw%3Dtrue" alt="Alt-text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we need to install Session Manager plugin? It's optional but not the rootcause yet
&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"&gt;(Optional) Install the Session Manager plugin for the AWS CLI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#investigate-and-apply-solution"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Investigate-and-Apply-solution"&gt;Investigate and Apply solution&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So far you need to access the EC2 using SSH with key-pem to debug (ask you admin)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running &lt;code&gt;tail -f&lt;/code&gt; got issue&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail: inotify resources exhausted
tail: inotify cannot be used, reverting to polling
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Restart ssm-agent service also got issue &lt;code&gt;No space left on device&lt;/code&gt; but it's not about disk space&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@env-test ec2-user]# systemctl restart amazon-ssm-agent.service
Error: No space left on device

[root@env-test ec2-user]# df -h |grep dev
devtmpfs         32G     0   32G   0% /dev
tmpfs            32G     0   32G   0% /dev/shm
/dev/nvme0n1p1  100G   82G   18G  83% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So the error itself means that system is getting low on inotify watches, that enable programs to monitor file/dirs changes. To see the currently set limit (including output on my machine)&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ cat /proc/sys/fs/inotify/max_user_watches
8192
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check which processes using &lt;code&gt;inotify&lt;/code&gt; to improve your apps or increase &lt;code&gt;max_user_watches&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for foo in /proc/*/fd/*; do readlink -f $foo; done | grep inotify | sort | uniq -c | sort -nr
      5 /proc/1/fd/anon_inode:inotify
      2 /proc/7126/fd/anon_inode:inotify
      2 /proc/5130/fd/anon_inode:inotify
      1 /proc/4497/fd/anon_inode:inotify
      1 /proc/4437/fd/anon_inode:inotify
      1 /proc/4151/fd/anon_inode:inotify
      1 /proc/4147/fd/anon_inode:inotify
      1 /proc/4028/fd/anon_inode:inotify
      1 /proc/3913/fd/anon_inode:inotify
      1 /proc/3841/fd/anon_inode:inotify
      1 /proc/31146/fd/anon_inode:inotify
      1 /proc/2829/fd/anon_inode:inotify
      1 /proc/21259/fd/anon_inode:inotify
      1 /proc/1934/fd/anon_inode:inotify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Notice that the above &lt;code&gt;inotify&lt;/code&gt; list include PID of ssm-agent processes, it explains why we got issue with SSM when &lt;code&gt;max_user_watches&lt;/code&gt; reached limit
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ps -ef |grep ssm-ag
root      3841     1  0 00:02 ?        00:00:05 /usr/bin/amazon-ssm-agent
root      4497  3841  0 00:02 ?        00:00:33 /usr/bin/ssm-agent-worker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- Final Solution:&lt;/strong&gt; Permanent solution (preserved across restarts)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "fs.inotify.max_user_watches=1048576" &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Verify:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ aws ssm start-session --target i-123abc456efd789xx --region ap-northeast-2

Starting session with SessionId: userdev-03ccb1a04a6345bf5
sh-4.2$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This issue comes from EC2 instance not about SSM agent&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://dev.to/vumdao/understand-amazon-ssm-agent-in-2-minutes-1363"&gt;🔗&lt;/a&gt; to undestanding SSM agent in 2 minutes.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>ssm</category>
      <category>ec2</category>
      <category>cloudopz</category>
    </item>
    <item>
      <title>My opinion on Lua</title>
      <author>JavaCode7</author>
      <pubDate>Fri, 25 Jun 2021 11:47:37 +0000</pubDate>
      <link>https://dev.to/javacode7/my-opinion-on-lua-4d39</link>
      <guid>https://dev.to/javacode7/my-opinion-on-lua-4d39</guid>
      <description>&lt;p&gt;Lua is my fifth favourite programming language and for good reason. I like its speed, its syntax and the fact that it is so simple. Lua is written in C and can be used for gamedev, webdev and sometimes even appdev.&lt;/p&gt;

&lt;p&gt;My first time using lua was in my thulium esolang. I used it in the lexer and found it nice and I was able to use it to do what I needed with minimal setup.&lt;/p&gt;

&lt;p&gt;I didn't touch lua again until I made chromium about a month later. I copied a lot of the code from thulium and in the end I got it done.&lt;/p&gt;

&lt;p&gt;I would say that lua is a language good for beginners but not the best for framework programming (excluding gamedev). The syntax is at least somewhat intuitive and thanks to its small size it is quite fast. It is also good in scripting.&lt;/p&gt;

&lt;p&gt;I like it mostly because of its applications in scripting (because I am not a framework dev) but its main weakness is the fact that it is... well... &lt;em&gt;weak&lt;/em&gt;. It doesn't have much functionality in the world of webdev and appdevs usually favour languages like JS and Python as opposed to Lua.&lt;/p&gt;

</description>
      <category>lua</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Parallelize Processing a Large AWS S3 File</title>
      <author>Idris Rampurawala</author>
      <pubDate>Fri, 25 Jun 2021 11:15:54 +0000</pubDate>
      <link>https://dev.to/idrisrampurawala/parallelize-processing-a-large-aws-s3-file-8eh</link>
      <guid>https://dev.to/idrisrampurawala/parallelize-processing-a-large-aws-s3-file-8eh</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/idrisrampurawala/efficiently-streaming-a-large-aws-s3-file-via-s3-select-4on"&gt;last post&lt;/a&gt;, we discussed achieving the efficiency in processing a large AWS S3 file via S3 select. The processing was kind of sequential and it might take ages for a large file. So how do we parallelize the processing across multiple units? 🤔 Well, in this post we gonna implement it and see it working!&lt;/p&gt;

&lt;p&gt;📝 &lt;em&gt;I highly recommend checking out my last post on &lt;a href="https://dev.to/idrisrampurawala/efficiently-streaming-a-large-aws-s3-file-via-s3-select-4on"&gt;streaming S3 file via S3-Select&lt;/a&gt; to set the context for this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I always like to break down a problem into the smaller pieces necessary to solve it (analytical approach). Let's try to solve this in 3 simple steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-find-the-total-bytes-of-the-s3-file"&gt;
  &lt;/a&gt;
  1. Find the total bytes of the S3 file
&lt;/h3&gt;

&lt;p&gt;Very similar to the 1st step of our last post, here as well we try to find file size first.&lt;br&gt;
The following code snippet showcases the function that will perform a HEAD request on our S3 file and determines the file size in bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_s3_file_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Gets the file size of S3 object by a HEAD request

    Args:
        bucket (str): S3 bucket
        key (str): S3 object path

    Returns:
        int: File size in bytes. Defaults to 0 if any error.
    """&lt;/span&gt;
    &lt;span class="n"&gt;aws_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AWS_PROFILE_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s3_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_profile&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ResponseMetadata'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'HTTPHeaders'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'content-length'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ClientError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Client error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-create-a-celery-task-to-process-a-chunk"&gt;
  &lt;/a&gt;
  2. Create a celery task to process a chunk
&lt;/h3&gt;

&lt;p&gt;Here, we would define a celery task to process a file chunk (which will be executed in parallel later). The overall processing here will look like this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; of this chunk as an argument&lt;/li&gt;
&lt;li&gt;Fetch this part of the S3 file via S3-Select and store it locally in a temporary file (as CSV in this example)&lt;/li&gt;
&lt;li&gt;Read this temporary file and perform any processing required&lt;/li&gt;
&lt;li&gt;Delete this temporary file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📝 I term this task as a file chunk processor. It processes a chunk from a file. Running multiple of these tasks completes the processing of the whole file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/tasks.py
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.chunk_file_processor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunk_file_processor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Creates and process a single file chunk based on S3 Select ScanRange start and end bytes
    """&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;start_byte_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'start_byte_range'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;end_byte_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'end_byte_range'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;header_row_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'header_row_str'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'.&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BASE_DIR'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'temp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Processing &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; chunk range &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;end_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 1. fetch data from S3 and store it in a file
&lt;/span&gt;        &lt;span class="n"&gt;store_scrm_file_s3_content_in_local_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;end_byte_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_row_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. Process the chunk file in temp folder
&lt;/span&gt;        &lt;span class="n"&gt;id_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# perform any other processing here
&lt;/span&gt;                &lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; --&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 3. delete local file
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error in file processor: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-execute-multiple-celery-tasks-in-parallel"&gt;
  &lt;/a&gt;
  3. Execute multiple celery tasks in parallel
&lt;/h3&gt;

&lt;p&gt;This is the most interesting step in this flow. We will create multiple celery tasks to run in parallel via &lt;a href="https://docs.celeryproject.org/en/stable/userguide/canvas.html#groups"&gt;Celery Group&lt;/a&gt;.&lt;br&gt;
Once we know the total bytes of a file in S3 (from step 1), we calculate &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; for the chunk and call the task we created in step 2 via the celery group. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; range is a continuous range of file size. Optionally, we can also call a callback (result) task once all our processing tasks get completed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/tasks.py
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.s3_parallel_file_processing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;s3_parallel_file_processing_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Creates celery tasks to process chunks of file in parallel
    """&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="c1"&gt;# 1. Check file headers for validity -&amp;gt; if failed, stop processing
&lt;/span&gt;        &lt;span class="n"&gt;desired_row_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'latitude'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'longitude'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'monthly_income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'experienced'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_headers_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validate_scrm_file_headers_via_s3_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;desired_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;desired_row_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_headers_valid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file headers validation failed'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file headers validation successful'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. fetch file size via S3 HEAD
&lt;/span&gt;        &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_s3_file_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file size invalid &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'We are processing &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file about &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; bytes :-o'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. Create celery group tasks for chunk of this file size for parallel processing
&lt;/span&gt;        &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_PROCESSING_CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;chunk_file_processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'start_byte_range'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'end_byte_range'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'header_row_str'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header_row_str&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;
            &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_PROCESSING_CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;chunk_file_processor_callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error processing file: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.chunk_file_processor_callback'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunk_file_processor_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Callback task called post chunk_file_processor()
    """&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Callback called'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_scrm_file_s3_content_in_local_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                             &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Retrieves S3 file content via S3 Select ScanRange and store it in a local file.
       Make sure the header validation is done before calling this.

    Args:
        bucket (str): S3 bucket
        key (str): S3 key
        file_path (str): Local file path to store the contents
        start_range (int): Start range of ScanRange parameter of S3 Select
        end_range (int): End range of ScanRange parameter of S3 Select
        delimiter (str): S3 file delimiter
        header_row (str): Header row of the local file. This will be inserted as first line in local file.
    """&lt;/span&gt;
    &lt;span class="n"&gt;aws_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AWS_PROFILE_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s3_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_profile&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'SELECT * FROM S3Object'&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_object_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ExpressionType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'SQL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;InputSerialization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'CSV'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'FileHeaderInfo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'USE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'FieldDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'RecordDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;OutputSerialization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'CSV'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'FieldDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'RecordDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;ScanRange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'Start'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'End'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="s"&gt;"""
        select_object_content() response is an event stream that can be looped to concatenate the overall result set
        """&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# we receive data in bytes and hence opening file in bytes
&lt;/span&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Payload'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Records'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Payload'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ClientError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Client error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it! 😎 Now, instead of streaming the S3 file bytes by bytes, we parallelize the processing by concurrently processing the chunks. It wasn't that tough, isn't it? 😅&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#mag-comparing-the-processing-time"&gt;
  &lt;/a&gt;
  🔍 Comparing the processing time
&lt;/h3&gt;

&lt;p&gt;If we compare the processing time of the same file we processed in our last post with this approach, the processing runs approximately &lt;strong&gt;68% faster&lt;/strong&gt; (with the same hardware and config). 😆&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Streaming S3 File&lt;/th&gt;
&lt;th&gt;Parallel Processing S3 File&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;File size&lt;/th&gt;
&lt;td&gt;4.8MB&lt;/td&gt;
&lt;td&gt;4.8MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Processing time&lt;/th&gt;
&lt;td&gt;~37 seconds&lt;/td&gt;
&lt;td&gt;~12 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DArdG87O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113337/dev.to/s3-select-demo/s3-select-file-streaming-sequential-output_je6hqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DArdG87O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113337/dev.to/s3-select-demo/s3-select-file-streaming-sequential-output_je6hqa.png" alt="Sequential processing terminal output"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5HwLUcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113340/dev.to/s3-select-demo/s3-select-file-streaming-parallel-output_f3rx04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5HwLUcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113340/dev.to/s3-select-demo/s3-select-file-streaming-parallel-output_f3rx04.png" alt="Parallel processing terminal output"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#heavycheckmark-benefits-of-this-approach"&gt;
  &lt;/a&gt;
  ✔️ Benefits of this approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A very large file containing millions of records can be processed within minutes. I have been using this approach in the production environment for a while, and it's very blissful&lt;/li&gt;
&lt;li&gt;Computing and processing is distributed among distributed workers&lt;/li&gt;
&lt;li&gt;Processing speed can be tweaked by the availability of worker pools&lt;/li&gt;
&lt;li&gt;No more memory issues&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;📌 You can check out my GitHub repository for a complete working example of this approach 👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/idris-rampurawala"&gt;
        idris-rampurawala
      &lt;/a&gt; / &lt;a href="https://github.com/idris-rampurawala/s3-select-demo"&gt;
        s3-select-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This project showcases the rich AWS S3 Select feature to stream a large data file in a paginated style.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AWS S3 Select Demo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/idris-rampurawala/s3-select-demo/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/808ccc68602d230e5c22372310fa34f0e8ca851adf0b094860005ccf122787d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="The MIT License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project showcases the rich &lt;code&gt;AWS S3 Select&lt;/code&gt; feature to stream a large data file in a &lt;code&gt;paginated style&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Currently, &lt;code&gt;S3 Select&lt;/code&gt; does not support &lt;code&gt;OFFSET&lt;/code&gt; and hence we cannot paginate the results of the query. Hence, we use &lt;code&gt;scanrange&lt;/code&gt; feature to stream the contents of the S3 file.&lt;/p&gt;
&lt;h1&gt;
Background&lt;/h1&gt;
&lt;p&gt;Importing (reading) a large file leads &lt;code&gt;Out of Memory&lt;/code&gt; error. It can also lead to a system crash event. There are libraries viz. Pandas, Dask, etc. which are very good at processing large files but again the file is to be present locally i.e. we will have to import it from S3 to our local machine. But what if we do not want to fetch and store the whole S3 file locally at once? 🤔&lt;/p&gt;
&lt;p&gt;Well, we can make use of &lt;code&gt;AWS S3 Select&lt;/code&gt; to stream a large file via it's &lt;code&gt;ScanRange&lt;/code&gt; parameter. This approach…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/idris-rampurawala/s3-select-demo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#bookmarktabs-resources"&gt;
  &lt;/a&gt;
  📑 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/idris-rampurawala/s3-select-demo"&gt;My GitHub repository demonstrating the above approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.select_object_content"&gt;AWS S3 Select boto3 reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html"&gt;AWS S3 Select userguide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;center&gt;See ya! until my next post 😋&lt;/center&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How Should I Learn Web Development?</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 25 Jun 2021 11:11:21 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-should-i-learn-web-development-4end</link>
      <guid>https://dev.to/tyaga001/how-should-i-learn-web-development-4end</guid>
      <description>&lt;h2&gt;
  &lt;a href="#as-a-mentor-i-am-constantly-asked-the-following"&gt;
  &lt;/a&gt;
  As a mentor, I am constantly asked the following:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Which programming language should I learn if I’m new?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Which programming language is most in-demand for jobs?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What’s the most popular programming language?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#as-per-the-2020-stack-overflow-survey"&gt;
  &lt;/a&gt;
  As per the 2020 Stack Overflow survey,
&lt;/h3&gt;

&lt;p&gt;Most Popular Technologies are like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYZhc0Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618345408/LmALfSNmv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYZhc0Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618345408/LmALfSNmv.jpeg" alt="tech.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That list is great for checking whether a particular programming language is in use today. &lt;/p&gt;

&lt;p&gt;However, if you’re new to programming, I don’t recommend choosing a language solely based on a list.&lt;/p&gt;

&lt;p&gt;In my Engineering days, studying Computer and Science Engineering. &lt;/p&gt;

&lt;p&gt;I wasn't at all interested in coding and all that tech stuff.&lt;/p&gt;

&lt;p&gt;Until one day, my Mentor recommended a Udemy Course to me on Web Development.&lt;/p&gt;

&lt;p&gt;Well, I ended up watching the course two hours a day because I liked it. &lt;/p&gt;

&lt;p&gt;But at that time I wasn't practicing coding on my laptop like many of you.&lt;/p&gt;

&lt;p&gt;Within days, I learned the basics of HTML and CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-begin-learning-how-to-code"&gt;
  &lt;/a&gt;
  Before you begin learning how to code,
&lt;/h2&gt;

&lt;p&gt;The biggest mistake you can make as an aspiring programmer is giving up because you don’t think you’re smart enough to learn to program. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Learning to code has nothing to do with your intelligence.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, it’s difficult to learn to program.&lt;/p&gt;

&lt;p&gt;If the current topic you’re learning doesn’t make sense to you, stay where you are. &lt;/p&gt;

&lt;p&gt;Do not proceed to the next topic.&lt;/p&gt;

&lt;p&gt;Skipping ahead is like trying to attach a roof to a house that lacks a frame, walls, and a foundation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"I find myself in this situation all the time."&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re searching on YouTube for educational tutorials, check the stats first. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a quick look at the rating and/or the view count.&lt;/p&gt;

&lt;p&gt;If you’re still unsure if a video is worth your time, read some of the comments to gage others’ opinions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A lot of topics aren’t going to make sense the first time around.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, refrain from negative self-thoughts.&lt;/p&gt;

&lt;p&gt;As you progress through the learning path, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You need to self-reflect.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#you-can-focus-on-frontend-development-or-backend-development"&gt;
  &lt;/a&gt;
  You can focus on front-end development OR back-end development.
&lt;/h2&gt;

&lt;p&gt;For e.g. &lt;/p&gt;

&lt;p&gt;For Front-end development, you need to learn HTML, CSS, JavaScript, and a library or frameworks like React, Angular, or Vue.js.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JavaScript is a programming language used to help web pages be more interactive.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While HTML and CSS give structure and style to web pages, JavaScript provides web pages with interactive elements that engage a user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-you-dont-have-to-be-strong-in-math-to-be-a-programmer"&gt;
  &lt;/a&gt;
  No, you don’t have to be strong in math to be a programmer.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Math skills can be helpful, but they’re not necessary.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#leverage-stack-overflow"&gt;
  &lt;/a&gt;
  Leverage "Stack Overflow"
&lt;/h2&gt;

&lt;p&gt;Where programmers can get free help with their code.&lt;/p&gt;

&lt;p&gt;If you get stuck and want to ask a question, search for it first.&lt;/p&gt;

&lt;p&gt;If you can’t find your question, create an account and post the question yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-want-to-learn-to-code-this-is-the-best-time"&gt;
  &lt;/a&gt;
  If you want to learn to code, this is the best time:
&lt;/h2&gt;

&lt;p&gt;And to motivate you, here are some facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are a ton of great and high-quality free resources out there. Yes, you can learn everything related to Web Development for free.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can earn money in numerous tech-fields.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#best-website-ive-ever-visited-in-my-life-is-freecodecamp"&gt;
  &lt;/a&gt;
  Best website I've ever visited in my life is freeCodeCamp.
&lt;/h2&gt;

&lt;p&gt;Then you can find good courses on Udemy &amp;amp; YouTube.&lt;/p&gt;

&lt;p&gt;With the help of HTML, CSS, JavaScript, and any of the frameworks. &lt;/p&gt;

&lt;p&gt;Try to build projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By contributing to open-source projects, you will learn a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#as-a-selfstarter-you-should-always-be-willing-to-ask-the-right-questions"&gt;
  &lt;/a&gt;
  As a self-starter, you should always be willing to ask the right questions.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is by far the greatest skill to have.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a self-starter, you must always be willing to take risks. &lt;/p&gt;

&lt;p&gt;Also, you shouldn’t postpone things.&lt;/p&gt;

&lt;p&gt;That's It for today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;We should not judge people by their peak of excellence, but by the distance, they have traveled from the point where they started.&lt;/p&gt;

&lt;p&gt;— Henry Ward Beecher&lt;/p&gt;

&lt;p&gt;Thanks for reading. If you like this might be you are interested in my Book as well.&lt;/p&gt;

&lt;p&gt;I have written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;p&gt;Currently running on 50% discount, only $9.50&lt;/p&gt;

&lt;p&gt;Grab the book now.. &lt;a href="https://gumroad.com/l/nextgendev/grow/gumroad"&gt;ThePrimeGuide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtPEzgRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622969340878/j1oDA44p8.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you would like to discuss about your career growth issues in detail with me 1-1, you can hire me on HireTheAuthor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hiretheauthor.com/theankurtyagi"&gt;Book 1-1 Call or Chat Subscription &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Hello World</title>
      <author>Ahmad Sufyan</author>
      <pubDate>Fri, 25 Jun 2021 11:01:25 +0000</pubDate>
      <link>https://dev.to/fyndev/hello-world-450e</link>
      <guid>https://dev.to/fyndev/hello-world-450e</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>The Great PWA migration</title>
      <author>Patrick Waweru</author>
      <pubDate>Fri, 25 Jun 2021 10:45:52 +0000</pubDate>
      <link>https://dev.to/patrickweb/the-great-pwa-migration-3i32</link>
      <guid>https://dev.to/patrickweb/the-great-pwa-migration-3i32</guid>
      <description>&lt;p&gt;For me the greatest highlight of yesterday's Windows 11 reveal was the new Microsoft Store. Finally Microsoft has heard the cries and mostly complaints from the developers and the users. The former Microsoft store was filled problems. From the  payment /pricing issues that caused many developers to opt out of investing in the Microsoft store  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fssA0Q8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcfkg6ci1yanks3bx2j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fssA0Q8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcfkg6ci1yanks3bx2j.jpeg" alt="Statement from Boxy Svg team"&gt;&lt;/a&gt; to the difficult process of getting a non UWP apps to the store.&lt;/p&gt;

&lt;p&gt;But that is now in the past. Microsoft is making big strides in helping out developers. I will be discussing all the changes to the Microsoft store in the next article but for now lets talk  about one particular special feature. Progressive Web App support.&lt;/p&gt;

&lt;p&gt;Microsoft has been really pushing for PWA support. Let me quickly list out the efforts:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-microsoft-edge-integration"&gt;
  &lt;/a&gt;
  1. Microsoft Edge integration
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Edge is by far the leading browser in pushing users  to install progressive web apps.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oE3mQDdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa7gqb2snhx704jdsz6r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oE3mQDdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa7gqb2snhx704jdsz6r.jpg" alt="Edge PWA install prompt"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yj27I1hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owen4fg2d07xva3jpc43.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yj27I1hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owen4fg2d07xva3jpc43.jpg" alt="Edge Apps"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-windows-10-integration"&gt;
  &lt;/a&gt;
  2. Windows 10 integration
&lt;/h3&gt;

&lt;p&gt;PWA apps have been beautifully  integrated into Windows to a point where users can't even differentiate them with native desktop apps.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JGy-nGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0t534zvkhg0krhkvlop.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JGy-nGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0t534zvkhg0krhkvlop.jpg" alt="Windows 10 PWA integration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And now the Microsoft Store. Microsoft unveiled that there will be full support for Progressive web apps in the MS Store.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M45QZ0Vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzmsa4vf3yxtilsgrzgd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M45QZ0Vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzmsa4vf3yxtilsgrzgd.jpg" alt="Microsoft Store"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft is just pouring out resources to support PWA technology. I mean they even have this &lt;a href="https://blog.pwabuilder.com/posts/introducing-the-brand-new-pwa-builder/"&gt;https://blog.pwabuilder.com/posts/introducing-the-brand-new-pwa-builder/&lt;/a&gt; dedicated PWA builder to help developers in creating well integrated and optimized PWAs. The Store Page for PWAs is no different from the native apps. From all this its quite clear that Microsoft is dedicated to Pushing for PWAs. And its not just Microsoft.&lt;/p&gt;

&lt;p&gt;Google. My goodness, I could divulge into an all nerdy rant of all the efforts google has been making for the PWA technology. But let me chill and just calmly list them out.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-pwas-on-playstore"&gt;
  &lt;/a&gt;
  1. PWAs on PlayStore 🤯
&lt;/h3&gt;

&lt;p&gt;YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ddbHp8tGBwQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pwa-billing-double-shocked-emoji"&gt;
  &lt;/a&gt;
  2. PWA Billing (Double shocked Emoji)
&lt;/h3&gt;

&lt;p&gt;YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ge7VkPC2eM0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-file-system-access"&gt;
  &lt;/a&gt;
  3. File System Access
&lt;/h3&gt;

&lt;p&gt;YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GNuG-5m4Ud0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-quick-actions"&gt;
  &lt;/a&gt;
  4. Quick Actions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAShd0yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl0n07nizoxu2eay2zzv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAShd0yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl0n07nizoxu2eay2zzv.jpg" alt="PWA Quick Actions"&gt;&lt;/a&gt;&lt;br&gt;
And a lot more...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpueKV4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtfutkzrfjfuvnuv5utk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpueKV4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtfutkzrfjfuvnuv5utk.jpg" alt="What PWA Can Do"&gt;&lt;/a&gt;&lt;br&gt;
Companies are all over dedicating their resources to migrating their webapps/websites(debate later) to Progressive Web Apps, which brings us to the meat of this article. There will never be a native desktop app for twitter or Facebook or YouTube and for many other popular websites. Many Companies have opted to investing in PWA technology instead of technologies like Electron. And this is a trend that will soon become a norm. Many companies and developers will be  opting to build PWAs instead of native apps. Its obvious decision to choose PWA over other tech if your product does not require access to most OS level features. For example, in my opinion WhatsApp, slack and discord would be better off investing in PWA tech instead of their current electron apps since they work perfectly as websites. There's no need of wrapping them app in another browser and having to deal with hustles of this technology. Many Companies and devs will come to this realization soon. &lt;/p&gt;

&lt;p&gt;To put it bluntly I believe that in the end PWA tech will beat electronjs(The current king), UWP and Flutter Desktop(Yes I said it Flutter Devs, kill me🤣) and many other desktop development technologies. But this realization was not bolstered by PWA but mealy supported. The even bigger statement is this (Beware⚠ Controversial Statement ahead🤣) &lt;/p&gt;

&lt;p&gt;The Web Will win. I mean look at Figma vs Adobe XD. A web app vs a Native Desktop App. Most people prefer Figma. Adobe Illustrator vs Gravit Designer. Gravit doesn't win but its still amazing how it gives AI a run for its money. Check out Spline and see the power of 3D in the web. Browser based Gaming, Video Editing, Photo Editing, AR, VR, Video Calling, Chatting..... the web is clearly on its way to win.&lt;/p&gt;

&lt;p&gt;Am not naïve though. There are areas that native wins like: Performance, Design that fits the OS and System Level access. But this does not deter the WEB in this "race". Strides are being made in this shortcomings. Strides that will hopefully lead to their eradication. &lt;/p&gt;

&lt;p&gt;Shameless plug time 🤣&lt;br&gt;
Do check a product of mine FLB Music 👉 &lt;a href="https://feelthebeat.xyz"&gt;https://feelthebeat.xyz&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvEQkD2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwt6k5g6sjiu33xcefau.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvEQkD2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwt6k5g6sjiu33xcefau.jpg" alt="FLB Music ScreenShot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would Love to here your thoughts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
      <category>news</category>
    </item>
    <item>
      <title>Know Your Indices</title>
      <author>InterSystems Developer</author>
      <pubDate>Fri, 25 Jun 2021 10:43:36 +0000</pubDate>
      <link>https://dev.to/intersystems/know-your-indices-37mi</link>
      <guid>https://dev.to/intersystems/know-your-indices-37mi</guid>
      <description>&lt;p&gt;
  This is the first in a pair of articles on SQL indices.
&lt;/p&gt;

&lt;h1&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Part 1 - Know your indices&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/h1&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h2&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;What is an index, anyway?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Picture the last time you went to a library. Typically they have books sorted by subject matter (and then author and title), and each shelf has an end-plate with a code describing the subject of its books. If you wanted to collect books of a certain subject, instead of walking across every aisle and reading the inside cover of every book, you could head straight for the bookshelf labelled with your desired subject matter and choose your books. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;A SQL index has the same general function: improving performance by giving a quick reference to the value of fields for each row in a table. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Setting up indices is one of the main steps in preparing your classes for optimal SQL performance. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;In this article, we’ll cover:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;What is an index and why/when should I use them?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;What types of indices exist and which scenarios are they ideal for?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;What does an index look like?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;&lt;span&gt;&lt;span&gt;How do I create one?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;&lt;span&gt;&lt;span&gt;And when I have indices, what do I do with them?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;I will be referring to classes from our Sample schema. These are available through the following Github repository, and they are also provided in the Samples namespace in Caché and Ensemble installations:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://github.com/intersystems/Samples-Data"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://github.com/intersystems/Samples-Data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h2&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The basics&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;You can index any persistent property and any property that can be reliably computed from persistent data.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Say we want to index the property TaxID in Sample.Company. In Studio or Atelier, we would add the following to the class definition:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;                &lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;TaxIDIdx On TaxID&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The equivalent DDL SQL statement would look something like this:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                &lt;span&gt;CREATE INDEX TaxIDIdx ON Sample.Company (TaxID); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The default global index structure is as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;               &lt;span&gt; ^Sample.CompanyI("TaxIDIdx&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;span&gt;",&amp;lt;TaxIDValueAtRowID&amp;gt;,&amp;lt;RowID&amp;gt;) = ""&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Note that there are fewer subscripts to read than fields in a typical data global. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Consider the query “&lt;span&gt;SELECT Name,TaxID FROM Sample.Company WHERE TaxID = 'J7349'&lt;/span&gt;”. It’s logically straightforward, and the query plan for executing this query reflects this:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMRf3iiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb6x6a8ebv1tfy41isj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMRf3iiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb6x6a8ebv1tfy41isj4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;This plan essentially says we check the index global for rows with the given TaxID value, then refer back to the data global (“master map”) to retrieve the matching row. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Now consider the same query without an index on TaxIDX. The resulting query plan is, as expected, less efficient:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bf2NFcyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9uvode8jaqe4fq4zbmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bf2NFcyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9uvode8jaqe4fq4zbmf.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Without indices, IRIS's underlying query execution relies on reading into memory and applying the WHERE clause’s condition to each row of the table – and since we would not logically expect any company to share a TaxID, we’re doing all this work for just one row!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Of course, having indices means having index and row data on disk. Depending on what we have a condition on and how much data our table contains, this can prove to have its own challenges when we create and populate an index. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;So when do we add an index to a property? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;The blanket case is when we frequently condition on a property. Some examples are identifying information such as a person’s SSN or a banking account number. You can also consider birth dates or an account’s funds.  Going back to Sample.Company, perhaps the class would benefit from indexing property Revenue if we wanted to collect data on high-earning organizations. Conversely, properties we’re unlikely to condition on are less fitting to be indexed: say a company slogan or description. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Simple – except we must also consider which type of index is best!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h2&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Types of Indices&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;There are six major types of indices I’ll go over here: standard, bitmap, compound, collection, bitslice, and data. I’ll also touch briefly on iFind indices, which are based on streams. There are possible overlaps here, and we’ve already touched on standard indices with the example above. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;I will share examples on how to create indices in your class definition, but adding new indices to a class is more involved than simply adding a line in your class definition. We’ll go over additional considerations in the next part. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Let’s use Sample.Person as an example. Note that Person has subclass Employee, which will be relevant in understanding some examples. Employee shares its data global storage with Person, and all of Person’s indices are inherited by Employee – this means Employee uses Person’s index global for these inherited indices. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;If you’re unfamiliar, here’s a general overview of these classes: Person has properties SSN, DOB, Name, Home (an embedded Address object containing State and City), Office (also an Address), and list collection FavoriteColors. Employee has additional property Salary (which I myself defined).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Standard&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;DateIDX On DOB;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Here I’m using ‘standard’ loosely to refer to indices that store the plain value of a property (as opposed to a binary representation). If the value is a string, it will be stored under some collation – SQLUPPER by default.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Compared to bitmap or bitslice indices, standard indices are more human-readable and relatively effortless to maintain. We have one global node for each row in the table.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Below is how DateIDX is stored at a global level. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("DateIDX",51274,100115)="~Sample.Employee~" ; Date is 05/20/81&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Note the first subscript after the index’s name is the date value, the last subscript is the ID of the Person with that DOB, and the value stored at this global node indicates that this Person is also a member of the subclass Sample.Employee. If this Person were not a member of any subclass, the value at the node would be an empty string. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;This base structure will be consistent with most non-bit indices, where indices on more than one property create more subscripts in the global, and having more than one value stored at the node produces a $listbuild object, for example:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;                &lt;span&gt;^Package.ClassI(IndexName,IndexValue1,IndexValue2,IndexValue3,RowID) = $lb(SubClass,DataValue1,DataValue2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Bitmap – A bitwise representation of the set of IDs corresponding to a property value.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;HomeStateIDX On Home.State [ &lt;/span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;= bitmap];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Bitmap indices are stored per unique value as opposed to standard indices, which are stored per row.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Going further into the example above, let’s say the Person with ID 1 lives in Massachusetts, ID 2 in New York, ID 3 in Massachusetts, and ID 4 in Rhode Island. HomeStateIDX is essentially stored as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      ID
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
      2
    &lt;/td&gt;
    
    &lt;td&gt;
      3
    &lt;/td&gt;
    
    &lt;td&gt;
      4
    &lt;/td&gt;
    
    &lt;td&gt;
      (…)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      (…)
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      -
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      MA
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      -
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      NY
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      -
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      RI
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
      -
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      (…)
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      -
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;If we wanted a query to return data from people living in New England, the system performs a bitwise OR on the bitmap index’s relevant rows. It’s quick to see that we must load into memory Person objects with ID 1, 3, and 4 at the very least.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Bitmaps can be efficient for AND, RANGE, and OR operators in your WHERE clauses.  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;While there is no official cap of how many unique values you can have for a property before a bitmap index will be less efficient than a standard index, the general rule of thumb is up to about 10,000 distinct values. So, while a bitmap index may be effective on a US state, a US city or county bitmap index would not be as useful. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Another concept to consider is storage efficiency. If you’re planning on adding and removing rows from your table frequently, your bitmap index’s storage can become less efficient. Consider the example above: say we removed many rows for whatever reason, and we no longer have people in our table who live in less populated states such as Wyoming or North Dakota. The bitmap thus has several rows with only zeroes. On the other side of the coin, creating new rows on large tables can eventually become slower as large bitmap storage must accommodate more unique values. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;In these examples, I have about 150,000 rows in Sample.Person. Each global node stores up to 64,000 IDs, so the bitmap index global at value MA is split into three parts:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;      ^Sample.PersonI("HomeStateIDX"," MA",1)=$zwc(135,7992)_$c(0,(...))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("HomeStateIDX"," MA",2)=$zwc(404,7990,(…))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("HomeStateIDX"," MA",3)=$zwc(132,2744)_$c(0,(…))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Special case: Extent Bitmap&lt;/b&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;An extent bitmap, often named $&amp;lt;ClassName&amp;gt;, is a bitmap index on the IDs of a class – this gives IRIS a quick way of knowing whether a row exists and can be helpful for COUNT queries or queries on subclasses. These indices are generated automatically when a bitmap index is added to the class; you can also manually create a bitmap extent index in a class definition as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;Company [ &lt;/span&gt;&lt;span&gt;Extent&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;SqlName &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;"$Company"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;= bitmap ];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Or via DDL keyword BITMAPEXTENT:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;CREATE BITMAPEXTENT INDEX "$Company" ON TABLE Sample.Company &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Compound – Indices based on two or more properties&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;OfficeAddrIDX On (Office.City, Office.State);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;The general use case of compound indices is having frequent queries conditioning on two or more properties. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;The order of properties in a compound index matters due to how the index is stored on a global level. Having the more selective property first is more performance efficient because it will save initial disk reads of the index global; in this example, Office.City is first because there more unique cities than states in the US. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Having a less selective property first is more space efficient. In terms of global structure, the index tree would be more balanced were State to be first. Think about it: each state contains plenty of cities, but some city names belong to only one state.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;You can also consider whether you’d expect to run frequent queries conditioning on only one of either property – this can save you from defining yet another index. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Here’s an example of the compound index’s global structure:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("OfficeAddrIDX"," BOSTON"," MA",100115)="~Sample.Employee~"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Aside: Compound index or bitmap indices?&lt;/b&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;For queries with conditions on multiple properties, you may also want to consider whether separate bitmap indices would be more effective than a single compound index. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Bitwise operations on two different indices may be more efficient provided that bitmap indices suit each property appropriately. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;You can also have compound bitmap indices – these are bitmap indices where the unique value is the intersection of the multiple properties you’re indexing on. Consider the table given in the previous section, but instead of states we have every possible pair of a state and city (e.g. Boston, MA, Cambridge, MA, even Los Angeles, MA, etc.), and cells get 1’s for rows that adhere to both values. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Collection – Indices based on collection properties&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Here we have property FavoriteColors defined as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Property &lt;/span&gt;&lt;span&gt;FavoriteColors &lt;/span&gt;&lt;span&gt;As list Of %String&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;With each of the following indices defined for demonstration purposes:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;fcIDX1 On FavoriteColors(ELEMENTS);&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;fcIDX2 On FavoriteColors(KEYS);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Here I’m using ‘collection’ to refer more broadly to single-cell properties containing more than one value. List Of and Array Of properties are relevant here, and if you want, even delimited strings. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Collection properties are automatically parsed to build their indices. For delimited properties, say a phone number, you’d need to define this method, &amp;lt;PropertyName&amp;gt;BuildValueArray(value, .valueArray), explicitly. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Given the above example for FavoriteColors, fcIDX1 would look something like this for a Person with favorite colors blue and white:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("fcIDX1"," BLUE",100115)="~Sample.Employee~"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;(…) &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("fcIDX1"," WHITE",100115)="~Sample.Employee~"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;fcIDX2 would look like:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;      &lt;span&gt;   ^Sample.PersonI("fcIDX2",1,100115)="~Sample.Employee~"       &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("fcIDX2",2,100115)="~Sample.Employee~"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;In this case, since FavoriteColors is a List collection, an index based on its keys is less useful than an index based on its elements. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Please refer to our documentation for more in-depth considerations of creating and managing indices on collection properties:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GSQLOPT_indices#GSQLOPT_indices_collections"&gt;https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=GSQLOPT_indices#GSQLOPT_indices_collections&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Bitslice – Bitmap representation of the bit string representation of numeric data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;SalaryIDX On Salary [ &lt;/span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;= bitslice ]; //In Sample.Employee&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Unlike bitmap indices, which contain flags representing which rows contain a specific value, bitslice indices first convert numeric values from decimal to binary, then create a bitmap on each digit of the binary value. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Let’s take the example above and, for realism’s sake, simplify Salary as being in units of $1000 – so If an employee’s salary is stored as 65, it is understood to represent $65,000.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Say we have Employee with ID 1 who has Salary 15, ID 2 Salary 40, ID 3 Salary 64, and ID 4 Salary 130. The corresponding bit values are:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      15
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      40
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      64
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      130
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      1
    &lt;/td&gt;
    
    &lt;td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Our bit string spans over 8 digits. The corresponding bitmap representation – the bitslice index values – is essentially stored as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",1,1) = "1000" ; Row 1 has value in 1’s place&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",2,1) = "1001" ; Rows 1 and 4 have values in 2’s place&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",3,1) = "1000" ; Row 1 has value in 4’s place&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",4,1) = "1100" ; Rows 1 and 2 have values in 8’s place&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",5,1) = "0000" ; etc…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",6,1) = "0100"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",7,1) = "0010"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("SalaryIDX",8,1) = "0001"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Note that operations modifying Sample.Employee or its rows’ salaries, i.e. INSERTs, UPDATES, and DELETEs, now require each of these global nodes, or bitslices, to be updated. Adding a bitslice index to multiple properties in a table or a frequently modified property can have performance risks. In general, maintaining a bitslice index is more costly than maintaining standard or bitmap indices. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Bitslice indices are highly specialized and thus have specific use cases: queries that need to perform aggregate calculations, e.g. SUM, COUNT, or AVG. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;In addition, they can only be effectively used on numeric values – character strings are converted to a binary 0.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Note that if the data table, as opposed to indices, must be read to check a query’s condition, bitslice indices will not be chosen to execute the query. Let’s say Sample.Person does not have an index on Name. If we were to calculate the average salary of employees with the last name Smith – “&lt;span&gt;SELECT AVG(Salary) FROM Sample.Employee WHERE Name %STARTSWITH 'Smith,' &lt;/span&gt;“ – we would need to read data rows to apply the WHERE condition, and thus the bitslice index would not be used in practice. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;There are similar storage concerns for bitslice and bitmap indices on tables where rows are frequently created or removed. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Data - Indices with data stored at their global nodes. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Index &lt;/span&gt;&lt;span&gt;QuickSearchIDX On Name [ &lt;/span&gt;&lt;span&gt;Data &lt;/span&gt;&lt;span&gt;= (SSN, DOB, Name) ];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;In several of the previous examples, you may have observed the string “~Sample.Employee~” stored as the value at the node itself. Recall that Sample.Employee inherits indices from Sample.Person. When we query on Employees in particular, we read the value at index nodes matching our property condition to check that said Person is also an Employee. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;We can also explicitly define what values to store. Having data defined at your index global nodes can save reads of the data global altogether; this can be useful for frequent selective or ordered queries. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Take the above index as an example. If we wanted to pull identifying information about a person given all or part of their name (e.g. to search for clients’ information in a front-desk application), we could have a query such as “&lt;span&gt;SELECT SSN, Name, DOB FROM Sample.Person WHERE Name %STARTSWITH 'Smith,J' ORDER BY Name&lt;/span&gt;”. Since our query conditions on Name and the values we’re retrieving are all contained within the QuickSearchIDX global nodes, we only need to read our I global to execute this query. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Note that data values cannot be stored with bitmap or bitslice indices. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;^Sample.PersonI("QuickSearchIDX"," LARSON,KIRSTEN A.",100115)=$lb("~Sample.Employee~","555-55-5555",51274,"Larson,Kirsten A.")&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;h3&gt;
  &lt;u&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;iFind Indices&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;Ever heard of these? Neither have I. iFind indices are used on stream properties, but to use them you need to specify their names with keywords in the query. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;I could explain more, but Kyle Baxter already has a helpful article on this:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://community.intersystems.com/post/free-text-search-way-search-your-text-fields-sql-developers-are-hiding-you"&gt;https://community.intersystems.com/post/free-text-search-way-search-your-text-fields-sql-developers-are-hiding-you&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  See Part 2, on managing defined indices, &lt;a href="https://community.intersystems.com/post/index-handling"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
  [EDIT 04/16/2020:  Adjustments for readability.]
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

&lt;p&gt;
   
&lt;/p&gt;

</description>
      <category>indexing</category>
      <category>performance</category>
      <category>sql</category>
      <category>practice</category>
    </item>
  </channel>
</rss>
