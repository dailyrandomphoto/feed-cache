<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use puppeteer on the server in non-headless mode</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Fri, 23 Jul 2021 02:49:40 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/use-puppeteer-on-the-server-in-non-headless-mode-25bk</link>
      <guid>https://dev.to/sudarshansb143/use-puppeteer-on-the-server-in-non-headless-mode-25bk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  📓📓 TL:DR
&lt;/h2&gt;

&lt;p&gt;Using puppeteer on the server is necessary use case when you want to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Crawl millions of web pages of a certain URL &lt;/li&gt;
&lt;li&gt;Perform Web Automation &lt;/li&gt;
&lt;li&gt;Automate the testing of web apps&lt;/li&gt;
&lt;li&gt;Implement Bot-like activities on web sites 
etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, using it in non - headless mode is such a pain. Especially, when you have any Unix-like OS i.e. ubuntu, centos installed on the remote machine and you are using the machine over SSH or any other remote connection tool like putty.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-how-to-do-it-"&gt;
  &lt;/a&gt;
  🛠 How to do it :
&lt;/h2&gt;

&lt;p&gt;So, in spite of all these extreme cases we can still use it and in this article we will take a look at one of the ways to implement it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%95%B6-some-background-"&gt;
  &lt;/a&gt;
  🕶  Some Background :
&lt;/h2&gt;

&lt;p&gt;Puppeteer at it's core uses the chromium browser, which does all the heavy lifting stuff like &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Exposing  DOM API's for interactions&lt;/li&gt;
&lt;li&gt;Perform DOM manipulations and code injection &lt;/li&gt;
&lt;li&gt;Cookie management and session handling &lt;/li&gt;
&lt;li&gt;Navigation and context maintenance 
etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Chromium needs the display adapters to launch the chromium window on the host machine. Regardless of the host OS, it uses the available display adapter API available. &lt;/p&gt;

&lt;p&gt;When we are serving puppeteer using virtual machine or any other remote machine, by default we don't have any displays because all the work is done by Bash (AKA command line). &lt;/p&gt;

&lt;p&gt;If we have windows server, then there is no big deal. Just connect  the server using Remote Desktop Connection and  you are good to go. But, if you have Ubuntu, centos or any other UNIX based OS installed on the remote machine, then you have to do some extra efforts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  👉 Steps
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#%E2%9A%92-1-regular-stpes-"&gt;
  &lt;/a&gt;
  ⚒ 1. Regular stpes :-
&lt;/h3&gt;

&lt;p&gt;Before doing anything else, lets update host by some OLD school stuff&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get upgrade 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-%F0%9F%96%A5-install-desktoplike-enviroments"&gt;
  &lt;/a&gt;
  2. 🖥 Install desktop-like enviroments
&lt;/h3&gt;

&lt;p&gt;For installing the desktop based utility known as XRDP, I have installed core utilities like &lt;code&gt;ubuntu-mate-core&lt;/code&gt; and &lt;code&gt;ubuntu-mate-desktop&lt;/code&gt; by using this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-install-recommends&lt;/span&gt; ubuntu-mate-core ubuntu-mate-desktop &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Ubuntu Mate Core :-&lt;/p&gt;

&lt;p&gt;This utility converts the basic Ubuntu machine to complete workstation by adding some extra applications.&lt;/p&gt;

&lt;p&gt;Ubuntu Mate Desktop :-&lt;/p&gt;

&lt;p&gt;This is on such desktop like environments for Ubuntu. This exposes  the interface for handling the local as well as networked files, perform calculations etc.  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-install-xrdp-"&gt;
  &lt;/a&gt;
  3. 💻 Install XRDP :-
&lt;/h3&gt;

&lt;p&gt;After doing above steps, we have to install XRDP server which will give us  the access of Remote Desktop Connection for host machine. We will also install some secondary dependencies for implementing complete desktop like environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;mate-core mate-desktop-environment mate-notification-daemon xrdp &lt;span class="nt"&gt;-y&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-create-remote-user-"&gt;
  &lt;/a&gt;
  👮 4. Create remote user :-
&lt;/h3&gt;

&lt;p&gt;As suggested by numerous manuals, we will now create non-root user for performing all of our remaining tasks. &lt;/p&gt;

&lt;p&gt;Create a XYZ user and grant the sudo access to newly created user for avoiding any permission conflicts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
adduser xseven

usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; admin xseven

usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;xseven

su - xseven

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-configuring-mate-session-"&gt;
  &lt;/a&gt;
  🔧 5. Configuring Mate Session :
&lt;/h3&gt;

&lt;p&gt;We  now will configure the necessary Mate Session. This will help use to customize the available desktop like enviroment as per our needs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;mate-session&amp;gt; ~/.xsession

&lt;span class="nb"&gt;sudo cp&lt;/span&gt; /home/xseven/.xsession /etc/skel

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#6-restart-xrdp-"&gt;
  &lt;/a&gt;
  🚀🚀🚀 6. Restart XRDP :-
&lt;/h3&gt;

&lt;p&gt;Final step is to restart XRDP to apply all the configrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;service xrdp restart

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once restarted, we can connect to the remote machine by using RDC  or any other compatible tool&lt;/p&gt;

&lt;p&gt;This is how we can run puppteer in non-headless mode on server. There are many other alternatives like &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing GNome or KDE for desktop machines &lt;/li&gt;
&lt;li&gt;Host applications on desktop ubuntu enviroment &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;etc.&lt;/p&gt;

&lt;p&gt;Thanks For Reading....&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Useful Python String Methods </title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 23 Jul 2021 00:43:23 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7</link>
      <guid>https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7</guid>
      <description>&lt;p&gt;Hi!, my name is &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, on this beautiful day, I'm going to share with you 5 useful string methods in &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, we need to know that all python methods do not change the original value of the string, they return new values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#startswith"&gt;
  &lt;/a&gt;
  startswith()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;startswith(&lt;em&gt;prefix, start = 0, end = len(str) - 1&lt;/em&gt;)&lt;/strong&gt;: checks if a string starts with a giving value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters-of-startswith"&gt;
  &lt;/a&gt;
  Parameters of startswith
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;prefix&lt;/em&gt;: to check that the string starts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;start = 0&lt;/em&gt;: the starting index where the giving prefix is needed to be checked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;end = len(str) - 1&lt;/em&gt;: the ending index where the giving needs to be checked.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/python-string-startswith/"&gt;more details...&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'+212123456789'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'34'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'+212'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'56'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'78'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#replace"&gt;
  &lt;/a&gt;
  replace()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;replace(&lt;em&gt;old_value, new_value, count&lt;/em&gt;)&lt;/strong&gt;: replace a specific substring with a giving new value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;old_value&lt;/em&gt;: the specific substring that you want to replace it&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;new_value&lt;/em&gt;: the new value to replace it with &lt;em&gt;old_value&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;count&lt;/em&gt;: (&lt;em&gt;optional&lt;/em&gt;) number specifying how many occurrences of the old value you want to replace. Default is all occurrences
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;country_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'212'&lt;/span&gt;
&lt;span class="n"&gt;user_phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;country_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;6123452129'&lt;/span&gt;
&lt;span class="c1"&gt;# 2126123452129
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# 066123452129
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'06'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  title()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;title()&lt;/strong&gt;: this string method converts each word's first character to uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;article_slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'5-html-tags-that-almost-nobody-knows'&lt;/span&gt;
&lt;span class="n"&gt;article_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 5 HTML Tags That Almost Nobody Knows
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#upper-lower"&gt;
  &lt;/a&gt;
  upper(), lower()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;upper()&lt;/strong&gt;: converts string's characters to uppercase&lt;br&gt;
&lt;strong&gt;lower()&lt;/strong&gt;: converts string's characters to lowercase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Aya Bouchiha'&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# AYA BOUCHIHA
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# aya bouchiha
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;find(valueToSearch, startIndex=0, endIndex=len(str))&lt;/strong&gt;: returns the index of the first occurence of the giving substring. It is  similar to &lt;strong&gt;index()&lt;/strong&gt;, but it returns &lt;em&gt;-1&lt;/em&gt; instead of raising an exception. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;valueToSearch&lt;/strong&gt;: string to search&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;startIndex = 0&lt;/strong&gt;: index to start searching&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;endIndex = len(str)&lt;/strong&gt;: index to end searching
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Tanger is a beautiful city'&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Tanger, Morocco'&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'en-us'&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'beautiful'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 12
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Morocco'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'fr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# -1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;startswith&lt;/strong&gt;: checks if a string starts with a giving value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt;: converts each word's first character to uppercase.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;replace&lt;/strong&gt;: replace a specific substring with a giving new value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;upper, lower&lt;/strong&gt;: converts string's characters to uppercase, lowercase&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;find&lt;/strong&gt;: returns the index of the first occurrence of the giving substring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Matching Properties and Values in the Object.</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 22 Jul 2021 23:27:53 +0000</pubDate>
      <link>https://dev.to/rthefounding/matching-properties-and-values-in-the-object-4g4e</link>
      <guid>https://dev.to/rthefounding/matching-properties-and-values-in-the-object-4g4e</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Welcome back I'm sorry that it took me a while to post something. Anyways let's get back straight to it. 
In this post let's make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection.&lt;/li&gt;
&lt;li&gt;For example, if the first argument is &lt;code&gt;[{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }]&lt;/code&gt;, and the second argument is &lt;code&gt;{ last: "Rivera" }&lt;/code&gt;, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#alright-lets-get-to-it-then-below-is-already-pre-written-for-you"&gt;
  &lt;/a&gt;
  Alright let's get to it then. Below is already pre written for you.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  var arr = [];
  // Only change code below this line


  // Only change code above this line
  return arr;
}

names([{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }], { last: "Rivera" });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  let keys = Object.keys(target);

  return collection.filter(function(obj) {
    for (let i = 0; i &amp;lt; keys.length; i++) {
    if (!obj.hasOwnProperty(keys[i]) || obj[keys[i]] !== target[keys[i]]) {
      return false;
    }
  }
    return true;
  })
}

names([{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }], { last: "Rivera" }); // console.log would display the entire object [{ first: 'Diego', last: 'Rivera' }]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;!obj&lt;/code&gt; basically means if the &lt;code&gt;obj&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;There's also a slightly different way of doing the for loop as well.&lt;/li&gt;
&lt;li&gt;Ex:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  let keys = Object.keys(target);

  return collection.filter(function(obj) {
    for (let key of keys) {
    if (!obj.hasOwnProperty(key) || obj[keys] !== target[keys]) {
      return false;
    }
  }
    return true;
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Secure your GitHub Personal Access Tokens with an Expiration Date</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 22 Jul 2021 23:12:41 +0000</pubDate>
      <link>https://dev.to/github/secure-your-github-personal-access-tokens-with-an-expiration-date-5cl</link>
      <guid>https://dev.to/github/secure-your-github-personal-access-tokens-with-an-expiration-date-5cl</guid>
      <description>&lt;p&gt;GitHub has just introduced the ability to set an &lt;strong&gt;optional expiration date on personal access tokens&lt;/strong&gt; (PATs). Users are now able to choose an expiration from a set of preset values, or specify a custom expiration date using a calendar drop-down.&lt;/p&gt;

&lt;p&gt;Let's take a look at this new feature!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7t7cJp2v00"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/f7t7cJp2v00"&gt;Link to the video: https://youtu.be/f7t7cJp2v00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;Personal Access Tokens, or PATs, provide users with a quick way to create OAuth access tokens which they can use instead of passwords to make API calls or use services.&lt;/p&gt;

&lt;p&gt;However, until now PATs &lt;strong&gt;didn't offer an expiration option&lt;/strong&gt;, meaning they exist until they are manually disabled. Long-lived tokens can create &lt;strong&gt;large security implications&lt;/strong&gt; if they leak. &lt;/p&gt;

&lt;p&gt;Now this new optional expiration date increases both user's and organization's ability to secure how their data is accessed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-the-expiration-date"&gt;
  &lt;/a&gt;
  Set the Expiration Date
&lt;/h3&gt;

&lt;p&gt;To set the expiration date to a PAT just go to the &lt;em&gt;PAT creation&lt;/em&gt;, under &lt;code&gt;Your Profile &amp;gt; Settings &amp;gt; Developer Setting &amp;gt; Personal Access Tokens&lt;/code&gt;, and in here after clicking on the "&lt;em&gt;Generate new token&lt;/em&gt;" button you'll have, among the other things, the new "Expiration" drop down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZs8YYcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiwv0jp0v0fmofmhaenk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZs8YYcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiwv0jp0v0fmofmhaenk.png" alt="Dropdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can select any of the pre-defined options, between 7 and 90 days, or insert a custom expiration date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWCOWX2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t09q1uvq2jahcpb21xc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWCOWX2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t09q1uvq2jahcpb21xc7.png" alt="Dropdown values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is still the possibility to have non-expiring tokens, as you can see, but it is &lt;strong&gt;highly not recommended&lt;/strong&gt; since, as I've mentioned before, that could represent a security issue in case the tokens leak.&lt;/p&gt;

&lt;p&gt;It is also possible to update existing tokens, adding the expiration date... however, that requires the re-generation of the token key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below what do you think about this feature. And if you are new to Personal Access Tokens in GitHub, I highly encourage you to checkout &lt;a href="https://dev.to/n3wt0n/how-to-create-a-personal-access-token-pg7"&gt;this post&lt;/a&gt; or &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;this video&lt;/a&gt; where I explain everything you need to know about them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7t7cJp2v00"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>security</category>
      <category>authentication</category>
    </item>
    <item>
      <title>➡️ Counter Up Animation | JavaScript✨</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 22 Jul 2021 21:46:36 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/counter-up-animation-javascript-b92</link>
      <guid>https://dev.to/robsonmuniz16/counter-up-animation-javascript-b92</guid>
      <description>&lt;p&gt;Hey DEVs, in this tutorial we're going to use JavaScript to build a visual Counting Animation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-number-will-start-at-0-and-it-will-count-up-until-it-reaches-the-target-number"&gt;
  &lt;/a&gt;
  A number will start at 0 and it will count up until it reaches the target number.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#-youtube-283yrecrym-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/283-YReCRYM"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;p&gt;📚Resources: &lt;br&gt;
Font-Awesome: &lt;a href="https://cdnjs.com/libraries/font-awesome"&gt;https://cdnjs.com/libraries/font-awesome&lt;/a&gt; &lt;br&gt;
Markup: &lt;a href="https://www.facebook.com/WebdevMadeEasy"&gt;https://www.facebook.com/WebdevMadeEasy&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cross-site scripting (XSS) attack - Part 2</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Thu, 22 Jul 2021 21:09:20 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-scripting-part-2-1d1l</link>
      <guid>https://dev.to/ms_74/cross-site-scripting-part-2-1d1l</guid>
      <description>&lt;p&gt;In the last post I went through what is Cross-site scripting and Stored XSS attack, a type of cross-site scripting caused by stored javascript in database from user inputs. If you haven't read it, here is the &lt;a href="https://dev.to/ms_74/cross-site-scripting-xss-attack-part-1-3d9a"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As frontend developers we are constantly adding and releasing new features or fixing bugs as per business requirements, and it's hard to keep vigilance on the security side of things. It has become a secondary concern and we are far behind the backend and Devops engineers for whom this is a primary and regular part of their thinking in development process. Today security attacks are on the rise and we need to take measures from both server side and client side before its too late.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I will go through another type of XSS attack and how to defend against it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reflected-crosssite-scripting-attack"&gt;
  &lt;/a&gt;
  2. Reflected Cross-site scripting attack
&lt;/h2&gt;

&lt;p&gt;Suppose a webpage has a form page and on submission a HTTP request is made to check if the username exists. If the validation error then displays back the username entered within its error message, the hacker can take advantage of this vulnerability and enter a script into the input field. When the validation error message throws back the the error message with the script, the script gets executed. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaMG9nAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubt9weayo1minqijjeq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaMG9nAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubt9weayo1minqijjeq9.png" alt="Reflected xss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another instance is when someone search for a search term, say &lt;em&gt;tesla&lt;/em&gt; in their favourite search engine &lt;code&gt;https://www.dooble.com/search?q=tesla&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8OJEtQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k5iyjuohwwdwly9lw31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8OJEtQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k5iyjuohwwdwly9lw31.png" alt="Search result for Tesla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine if the search term &lt;em&gt;tesla&lt;/em&gt; displays above the search results from the search term in the URL, a hacker can possibly replace the &lt;em&gt;tesla&lt;/em&gt; parameter in the URL with malicious script, and have that script code execute whenever anybody opens that URL in their browser (Most search engines are possibly protected against this). An attacker could email the URL with the malicious code as a link to a victim, or trick a user into visiting with the URL through a form. On clicking the link the user is then taken to the vulnerable web site, which reflects the attack back to the user’s browser. As it came from a “trusted” server, the browser executes the code.&lt;/p&gt;

&lt;p&gt;When the injected script is reflected off the web server as above, we call this type of attack a &lt;strong&gt;reflected cross-site scripting attack&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defence-1-again-escape-the-content-received-from-http-requests"&gt;
  &lt;/a&gt;
  Defence #1 - Again... Escape the content received from HTTP requests
&lt;/h3&gt;

&lt;p&gt;The prevention for these type of attacks are again is to escape the HTML by replacing its special characters with their corresponding entities.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--916n3VS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atrzorsvcrk6zhhx5c1v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--916n3VS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atrzorsvcrk6zhhx5c1v.jpg" alt="Again gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I mentioned earlier that most modern UI frameworks protects against XSS (make sure you read the security recommendations in the framework's documentation) and also about the javascript function &lt;code&gt;encodeURI()&lt;/code&gt; that encodes strings, (specifically URI's). This function encodes special characters except &lt;code&gt;,/?:@&amp;amp;=+$#'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://example.com/blog/1?comment=&amp;lt;script&amp;gt;alert(XSS1)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://example.com/blog/1?comment=%3Cscript%3Ealert(XSS1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may as well look into the function &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;encodeURIComponent()&lt;/a&gt; which encodes strings that is part of a URI. &lt;/p&gt;

&lt;p&gt;Note that both the functions does not escape the &lt;code&gt;'&lt;/code&gt; (single quote) character, as it is a valid character for URIs.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;'&lt;/code&gt; character is commonly used as an alternative to &lt;code&gt;"&lt;/code&gt;(double quote) for HTML attributes, e.g. href='MyUrl', which may introduce vulnerabilities. As it won't be escaped, input that includes it, will break the syntax resulting in an injection.&lt;/p&gt;

&lt;p&gt;If you are constructing HTML from strings, either use &lt;code&gt;"&lt;/code&gt; instead of &lt;code&gt;'&lt;/code&gt; for attribute quotes, or add an extra layer of encoding (&lt;code&gt;'&lt;/code&gt; can be encoded as %27).&lt;/p&gt;

&lt;p&gt;It is also recommended to use npm libraries like &lt;a href="https://www.npmjs.com/package/xss-filters"&gt;xss-filters&lt;/a&gt; and &lt;a href="https://github.com/cure53/DOMPurify"&gt;DOMPurify&lt;/a&gt; which provides filtering of unsafe characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const safeUsername = xssFilters.inHTMLData(unsafeUsername);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;xss-filters&lt;/code&gt; comes with some warnings, &lt;a href="https://www.npmjs.com/package/xss-filters#api-documentations"&gt;read it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using validation on forms, try to use npm packages similar to &lt;a href="https://github.com/validatorjs/validator.js"&gt;validator.js&lt;/a&gt; to sanitise the string inputs.  &lt;/p&gt;

&lt;p&gt;In the next post I will be going through the next type of XSS attack, &lt;em&gt;DOM based XSS attack&lt;/em&gt; and how to defend against it. Stay tuned! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>Accessing Arrays in JavaScript</title>
      <author>Swarnali Roy</author>
      <pubDate>Thu, 22 Jul 2021 20:59:38 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/accessing-arrays-in-javascript-4loe</link>
      <guid>https://dev.to/swarnaliroy94/accessing-arrays-in-javascript-4loe</guid>
      <description>&lt;p&gt;Hello Readers! &lt;br&gt;
This episode of the series &lt;strong&gt;Basic Data Structure in JavaScript: Arrays&lt;/strong&gt; includes how to &lt;em&gt;access an array&lt;/em&gt; in JS.&lt;/p&gt;

&lt;p&gt;Before starting that, we need to know two very important things.&lt;/p&gt;

&lt;p&gt;1)JavaScript arrays are &lt;em&gt;zero-based&lt;/em&gt; indexed. In other words, the &lt;em&gt;first element&lt;/em&gt; of an array starts at &lt;em&gt;index 0&lt;/em&gt;, the &lt;em&gt;second element&lt;/em&gt; starts at &lt;em&gt;index 1&lt;/em&gt;, and so on.&lt;/p&gt;

&lt;p&gt;2) How to Get an Array Size. &lt;/p&gt;

&lt;p&gt;So, let's start with that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-array-size-with-length-property"&gt;
  &lt;/a&gt;
  Getting Array Size with 'length' property
&lt;/h3&gt;

&lt;p&gt;Typically, all arrays have a &lt;code&gt;length&lt;/code&gt; property which returns the number of elements or in other words, size of an array. &lt;/p&gt;

&lt;p&gt;Let's see an example of an simple &lt;em&gt;one-dimensional array&lt;/em&gt; and get it's size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let petsArr = ['cats','dogs','cows','fishes','birds'];
console.log(petsArr.length);

//output: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;output&lt;/em&gt; shows 5 as it has &lt;em&gt;five&lt;/em&gt; elements occupying five indices from 0 to 4. So the size of this array is 5.&lt;/p&gt;

&lt;p&gt;Now, let's see another example of a &lt;em&gt;multi-dimensional array&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let petsArr = [
'cats',['bulldog','husky'],'cows','fishes',
{bird1: 'crow', bird2: 'parrot'}
];
console.log(petsArr.length);

//output: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;output&lt;/em&gt; is still 5 but it is a complex array which includes another array as it's 3rd element and an JS Object as it's 5th element. But that does not increase the length/size of that array as it is still occupying total 5 indices , from 0 to 4.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-array-elements"&gt;
  &lt;/a&gt;
  Accessing Array Elements
&lt;/h3&gt;

&lt;p&gt;Now let's talk about &lt;code&gt;How to Access the Array Elements&lt;/code&gt; in JavaScript.&lt;/p&gt;

&lt;p&gt;To access an element in an array, you specify an &lt;em&gt;index&lt;/em&gt; in the &lt;code&gt;square brackets []&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;basic syntax&lt;/em&gt; is :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arrayName[];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should not use any spaces between the array name and the square brackets, &lt;em&gt;like array [0]&lt;/em&gt;. Although JavaScript is able to process this correctly, but this is not the best practice and this may confuse other programmers reading the code. &lt;/p&gt;

&lt;p&gt;The following is a simple example of an &lt;em&gt;one-dimensional array&lt;/em&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numArr = [50,60,70];

console.log(numArr[0]); //output 50

let data = numArr[1];
console.log(data); //output 60
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As arrays are zero-based indexed, the numArr[0] has the value 50 and the data variable stores the value 60 now.&lt;/p&gt;

&lt;p&gt;Another example given below is of an &lt;em&gt;multi-dimensional array&lt;/em&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numArr = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
    [[10,11,12], 13, 14]
  ];
  console.log(numArr[3]); //output [[10,11,12], 13, 14]
  console.log(numArr[3][0]); //output [10,11,12]
  console.log(numArr[3][0][1]); //output 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;outputs&lt;/em&gt; clearly show how the multi-dimensional array elements are accessed. The index 3 has the value [[10,11,12], 13, 14], as the index 3 holds another array in it's 0 index, &lt;em&gt;numArr[3][0]&lt;/em&gt; holds [10,11,12] and the last one simply accessed the data of 1st index of the array [10,11,12] which is 11.&lt;/p&gt;

&lt;p&gt;In the next episode, we will see, how we can modify an array with array indices and other methods as well.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>React-Redux : Guide du débutant</title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 22 Jul 2021 20:56:35 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/react-redux-guide-du-debutant-12ck</link>
      <guid>https://dev.to/ericlecodeur/react-redux-guide-du-debutant-12ck</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Votre application devient de plus en plus complexe ?&lt;/h2&gt;

&lt;p&gt;Au fil du temps, votre application React devient plus complexe, avec plus de component et plus de données entrant et sortant. La gestion simultanée du 'state' de plusieurs component et sous-component peut devenir très complexe.&lt;/p&gt;

&lt;p&gt;Existe-t-il un meilleur moyen de gérer l'état de tous les components et sous-component de votre application ? Oui et cette bibliothèque s'appelle Redux.&lt;/p&gt;

&lt;h2&gt;Qu'est-ce que Redux&lt;/h2&gt;

&lt;p&gt;Redux est la solution de gestion de 'state' la plus populaire. &lt;/p&gt;

&lt;p&gt;À ce jour, Redux est la norme adoptée par les grandes entreprises.&lt;/p&gt;

&lt;p&gt;Redux utilise un 'store', de sorte que tout les 'state' de l'application sont géré par un objet central.&lt;/p&gt;

&lt;p&gt;Voici trois principes fondamentaux de Redux :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Le 'state' de l'ensemble de votre application est stocké dans une arborescence d'objets au sein d'un seul 'store' qui agit comme la seule source de vérité pour votre application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S'assurer que le 'state' est en lecture seule et nécessite des modifications en émettant une action descriptive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spécifie comment les 'state' sont transformé par les actions, vous écrivez des fonctions 'reducer' pures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le 'state' complet de votre application est centralisé en un seul endroit.&lt;/p&gt;

&lt;p&gt;Plus besoin de utiliser un paquet de 'props' entre les components et les sous-components.&lt;/p&gt;

&lt;p&gt;Pas besoin d'envoyer des 'props' aux components enfants ou des fonctions 'callback' aux components parents.&lt;/p&gt;

&lt;p&gt;Avec Redux, votre 'state' est désormais centralisé en un seul endroit et chaque component peut y accéder directement.&lt;/p&gt;

&lt;p&gt;Lorsque vous utilisez Redux, le 'store' centralisé est désormais le seul endroit où le 'state' sera modifié dans votre application.&lt;/p&gt;

&lt;p&gt;Le 'state' peut être modifié dans votre 'store' en envoyant différentes actions. Par exemple une action à ajouter, une autre action à mettre à jour, une autre action à supprimer, etc.&lt;/p&gt;

&lt;h2&gt;Installation de Redux&lt;/h2&gt;

&lt;p&gt;À partir d'un dossier de projet React déjà créé, vous pouvez taper dans le terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install @reduxjs/toolkit react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;create-react-app&lt;/h2&gt;

&lt;p&gt;Si votre application n'est pas encore créée, vous pouvez la créer avec redux store déjà installé et pré-configuré.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter. Pour ce tutoriel, nous n'utilisons pas create-react-app --template redux&lt;/p&gt;

&lt;p&gt;Dans ce tutoriel, nous configurons une application Redux à partir de zéro en utilisant Redux Toolkit pour configurer un 'store' Redux&lt;/p&gt;

&lt;h3&gt;Outils de développement Redux&lt;/h3&gt;

&lt;p&gt;Vous pouvez également installer un DevToll dans votre navigateur qui sera pratique pour le déboguage. Pour Chrome, il existe un extension nommé Redux DevTools&lt;/p&gt;

&lt;h2&gt;Comment fonctionne Redux ?&lt;/h2&gt;

&lt;p&gt;Redux change la façon dont vous allez coder votre application. Redux introduit également de nombreux nouveaux termes spécifiques à Redux tels que 'store', 'provider', 'splice', 'reducer', 'selector', action, etc.&lt;/p&gt;

&lt;p&gt;Avant de créer tous ces éléments et de faire fonctionner votre store. Nous devons prendre du recul et essayer de comprendre le concept dans son ensemble.&lt;/p&gt;

&lt;p&gt;L'objectif que nous essayons d'atteindre est de trouver un moyen plus efficace de gérer le state de tous nos composants et sous-composants sans utiliser le 'props drilling'.&lt;/p&gt;

&lt;p&gt;Pour ce faire, nous utilisons Redux. Redux centralise tout notre state en un seul endroit. Cet endroit centralisé s'appelle le store.&lt;/p&gt;

&lt;p&gt;Création d'un store&lt;br&gt;
La première étape consiste à créer votre store Redux.&lt;/p&gt;

&lt;p&gt;Créez un fichier js : src/app/store.js et tapez le code d'initialization suivant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cici va créer un store Redux avec un reducer (vide pour le moment) Je vais expliquer le reducer un peu plus tard.&lt;/p&gt;

&lt;h2&gt;Rendre le store disponible pour React&lt;/h2&gt;

&lt;p&gt;Une fois le store créé, nous pouvons le rendre disponible pour nos components React en plaçant un 'provider' React-Redux autour de notre application dans src/index.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Importez le store Redux que nous venons de créer, placez un provider autour de votre application et transmettez le store en tant que 'props'. Désormais, le store est disponible pour tous les components du provider.&lt;/p&gt;

&lt;h3&gt;Selectors&lt;/h3&gt;

&lt;p&gt;Étant donné que l'e state de nos components est à un endroit central, nous avons besoin d'un moyen de faire appel à ce store pour récupérer un state. Redux a une fonction Hook pour aider à faire exactement cela.&lt;/p&gt;

&lt;p&gt;Par exemple, dans votre store, vous pouvez avoir un selector nommé selectItems (nous le créerons plus tard). Ce sélecteur, par exemple, pourrait renvoyer tous les articles de votre panier e-commerce.&lt;/p&gt;

&lt;p&gt;Dans votre component, vous pouvez utiliser un Hook pour appeler ce sélecteur et récupérer vos articles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comme vous pouvez le voir, la récupération de l'état de votre store est très facile. Où que vous soyez dans votre components, vous pouvez toujours facilement récupérer le state..&lt;/p&gt;

&lt;h3&gt;Reducers&lt;/h3&gt;

&lt;p&gt;Qu'en est-il de la modification du state ? Par exemple, ajouter ou supprimer des éléments ? Comment pouvez-vous dire à votre store que vous souhaitez ajouter ou supprimer un article ? Vous utiliserez une fonction de type 'reducer' .&lt;/p&gt;

&lt;p&gt;Les fonctions 'reducer' ne change jamais le state actuel. Il renvoie toujours un nouvel objet state mis à jour.&lt;/p&gt;

&lt;p&gt;Par exemple, vous pouvez avoir un nom de fonction 'reducer' addItemToBasket. Cette fonction renverra le nouveau state qui inclut le nouvel élément.&lt;/p&gt;

&lt;p&gt;Dans votre composant, vous pouvez appeler la fonction 'reducer' en utilisant le hook dispatch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addItemToBasket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./basketSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addItemToBasket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Où et comment déclarons-nous les 'selector' et les 'reducer' ?&lt;/h3&gt;

&lt;p&gt;Les selector et les reducer peuvent être créés à l'aide de la fonction createSlice.&lt;/p&gt;

&lt;p&gt;Le nom « Slice » vient de l'idée que nous divisons le state de notre application en plusieurs « tranches » .&lt;/p&gt;

&lt;p&gt;Par exemple, pour une application e-commerce, une 'slice' peut être le panier, une autre pour les utilisateurs, une autre pour les produits, etc.&lt;/p&gt;

&lt;p&gt;C'est une bonne idée car nous avons besoin d'un moyen de regrouper nos selector et reducer, nous ne pouvons pas mettre toutes ces fonctions dans un seul gros fichier. Mieux vaut donc les regrouper par slice.&lt;/p&gt;

&lt;p&gt;Par exemple, si vous souhaitez créer une slice pour le state de votre panier, vous créerez un fichier : scr/app/features/basketSlice.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPhone10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iPadPro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iWatch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nextId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basketSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;addItemToBasket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nextId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="nx"&gt;nextId&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;removeItemFromBasket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addItemToBasket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeItemFromBasket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basketSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;basketSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This basket slice contain 2 reducers and one selector.&lt;/p&gt;

&lt;h3&gt;C'est tout ?&lt;/h3&gt;

&lt;p&gt;Pouvons-nous maintenant utiliser ces reducer et selector dans nos components ? Pas encore. Nous devons enregistrer le réducteur auprès du store. Pour cela revisitez le store.js que vous avez créé plus tôt et ajoutez le reducer basketSlice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;basketReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../features/basket/basketSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;basketReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maintenant, le basket slice est disponible pour tous les composants de notre application&lt;/p&gt;

&lt;h3&gt;Résumé&lt;/h3&gt;

&lt;p&gt;Bon récapitulons :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous avons un store qui contient toutle state de notre application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nous créons notre app store dans : scr/app/store.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pour rendre ce store disponible pour vos components Nous ajoutons la balise Provider entre notre composant de niveau supérieur (App)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pour récupérer ou muter les données du store, nous devons utiliser des selector et des reducer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les selector et les reducer sont regroupés par slice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pour appeler un selector, nous utilisons le hook useSelector(). Par exemple : items = useSelector(basketItems)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pour appeler l'action du reducer, nous utilisons le hook useDispatch(). Par exemple : dispatch(addItemToBasket(item))&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ouf c'est beaucoup de concept en une seule lecture. Si vous ne comprenez pas tout, c'est normal. Lisez cet article plus d'une fois et poursuivez votre apprentissage sur le Web avec d'autres tutoriels.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>french</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to add a map to a Website or Web App using Mapbox</title>
      <author>Matthew Rungwe</author>
      <pubDate>Thu, 22 Jul 2021 20:48:27 +0000</pubDate>
      <link>https://dev.to/matthewrungwe/how-to-add-a-map-to-a-website-or-web-app-using-mapbox-5214</link>
      <guid>https://dev.to/matthewrungwe/how-to-add-a-map-to-a-website-or-web-app-using-mapbox-5214</guid>
      <description>&lt;p&gt;Have you ever wanted to add a map to your application to make it look nice? You might have wanted to build an entire application dedicated to using a map or add it to your contact page.&lt;/p&gt;

&lt;p&gt;In the article, we will look at a few steps to help you get started with adding a map to your website or web application using Mapbox. At the end of the article, you should know how to prepare an HTML page that shows a map using the Mapbox API. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#html"&gt;Get your HTML file ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-account"&gt;Create a Mapbox account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapbox-code"&gt;Get the Mapbox map code to integrate to your application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#result"&gt;The result of the HTML file after adding the code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preview"&gt;Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reading"&gt;Further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="html"&gt;Get your HTML file ready&lt;/h3&gt;

&lt;p&gt;We want our map to render somewhere on the website. So, we need to have a file with an &lt;code&gt;.html&lt;/code&gt; extension. For this article, we will use &lt;code&gt;index.html&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Treat this &lt;em&gt;how-to&lt;/em&gt; article as a  project. Place your files into a folder dedicated to learning how to add the map, for example, &lt;em&gt;./documents/Map-with-Mapbox/index.html&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Adding a map to your website or web application using Mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Styles --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Header --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-align: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Map with Mapbox&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Main --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Add your div tag --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Scripts --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3 id="create-account"&gt;Create a Mapbox account&lt;/h3&gt;

&lt;h4&gt;What is Mapbox?&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://mapbox.com"&gt;Mapbox&lt;/a&gt; is a provider. A provider for online location data to integrate into your websites or applications. Their APIs allow you to gain access to their tools and services using programmatic skills. &lt;/p&gt;

&lt;p&gt;To create an account, go to &lt;a href="https://mapbox.com"&gt;mapbox.com&lt;/a&gt;. Create an account for yourself and sign in. In your Dashboard, you will have the information you need to get started with integrating a map into your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--en8dRdv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KmJfWTh/mapbox-account-dashboard.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--en8dRdv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KmJfWTh/mapbox-account-dashboard.jpg" alt="Mapbox dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="mapbox-code"&gt;Get the Mapbox code to add to your application&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href="https://www.mapbox.com/install/"&gt;Integrate Mapbox&lt;/a&gt; link in the Dashboard.&lt;/li&gt;
&lt;li&gt;Choose the &lt;a href="https://www.mapbox.com/install/js/"&gt;JS Web&lt;/a&gt; SDK link.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mapbox.com/install/js/cdn-install/"&gt;Use the Mapbox CDN&lt;/a&gt; link.&lt;/li&gt;
&lt;li&gt;Copy the styles &lt;code&gt;link&lt;/code&gt; below into the &lt;code&gt;head&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Copy the &lt;code&gt;script&lt;/code&gt; tag below towards the bottom of the &lt;code&gt;body&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Press the &lt;strong&gt;Next &amp;gt;&lt;/strong&gt; button to get the &lt;code&gt;script&lt;/code&gt; that accesses the Mapbox API and allocates a container:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Add your Access Token Here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add a &lt;code&gt;div&lt;/code&gt; tag into the &lt;code&gt;body&lt;/code&gt; with an &lt;code&gt;id&lt;/code&gt;  that matches the container in the &lt;code&gt;script&lt;/code&gt; above:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;'width: 400px; height: 300px;'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3 id="result"&gt;The result of the HTML file after adding the code&lt;/h3&gt;

&lt;p&gt;I have included a sample of the result of the HTML file after I have added the code from the Mapbox CDN. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Adding a map to yor website or web application using Mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Styles --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Header --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-align: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Map with Mapbox&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Main --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;'width: 400px; height: 300px; margin: 0 auto;'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Scripts --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Add your Access Token Here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;28.112268&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;26.270760&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// [Longitude, Latitude]&lt;/span&gt;
            &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// Initial zoom&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3 id="preview"&gt;Preview&lt;/h3&gt;

&lt;p&gt;After you have saved and rendered your HTML file, the map will display on your web page. The image added below is a &lt;strong&gt;preview&lt;/strong&gt; of how the code above displays in the browser.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chrome&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKgInzNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/xXRB4q0/map-with-mapbox.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKgInzNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/xXRB4q0/map-with-mapbox.jpg" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="reading"&gt;Further reading&lt;/h3&gt;

&lt;p&gt;To get more from Mapbox, read the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/"&gt;Documentation&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mapbox.com/help/tutorials/"&gt;Tutorials&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mapbox.com/blog"&gt;Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The information can help you to grow your map into something more robust and preformat.&lt;/p&gt;




&lt;p&gt;This article was supposed to serve as an introduction to &lt;a href="https://mapbox.com"&gt;Mapbox&lt;/a&gt; and how you can integrate it into your website.&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read. Please, share your thoughts about the article in the comments. You can also let me know of any additions or changes  I can make to this article.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Event Stream - Server Side</title>
      <author>Eduardo Julião</author>
      <pubDate>Thu, 22 Jul 2021 20:38:23 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/event-stream-server-side-55n2</link>
      <guid>https://dev.to/eduardojuliao/event-stream-server-side-55n2</guid>
      <description>&lt;p&gt;For this post, we're going to explore a way to stream data to the client using a Web Api and C#.&lt;/p&gt;

&lt;p&gt;Picture this requirement, you need to process an array of data, lets say of a 100 items, once each item is processed, the api should return to the client, without TCP/IP and SignalR, just pure HttpRequest.&lt;/p&gt;

&lt;p&gt;To do this, in this example, we will have an worker that will return a &lt;code&gt;IAsyncEnumerable&lt;/code&gt; and between each iteration, the method will wait between 5 to 10 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Service.cs&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;_random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Wait a random amount of time to simulate some work.&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;secondsToWait&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Timespan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondsToWait&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the simulated service in place, we can move on to the &lt;code&gt;Controller&lt;/code&gt;. For the endpoint, we're going to have an &lt;code&gt;async Task&lt;/code&gt; &lt;code&gt;Get&lt;/code&gt; method that will write the result to the Response and send it for every item it was processed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// StreamController.cs&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IService&lt;/span&gt; &lt;span class="n"&gt;_service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;StreamController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IService&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{amount:int:min(1)}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;GetStreamData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Set Content-Type to text/event-stream&lt;/span&gt;
    &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"text/event-stream"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// this can be anything, even just a json object&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dataItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Convert the text to a byte array&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;utf8DataitemBytes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Write the byte array to the HttpResponse&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utf8DataitemBytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utf8DataitemBytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Push&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FlushAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the endpoint is called, it'll send a new "line" of data instead of waiting for all items to be processed to be sent at once.&lt;/p&gt;

</description>
      <category>csharp</category>
    </item>
    <item>
      <title>Amazing Mini Image Editor with Vanilla JavaScript – Day 3 of JavaScript30</title>
      <author>Ashutosh Mishra</author>
      <pubDate>Thu, 22 Jul 2021 20:24:15 +0000</pubDate>
      <link>https://dev.to/ashutoshmishra4/amazing-mini-image-editor-with-vanilla-javascript-day-3-of-javascript30-48fh</link>
      <guid>https://dev.to/ashutoshmishra4/amazing-mini-image-editor-with-vanilla-javascript-day-3-of-javascript30-48fh</guid>
      <description>&lt;p&gt;Welcome to Day 3 of the JavaScript30 challenge, and today we’re going to build this amazing Mini Image Editor with pure HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;If you want to know more about JavaScript30, watch the video below and go &lt;a href="https://javascript30.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2Df21S3J1GQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Those of you who want to know how will our finished project look like, click &lt;a href="https://java-script30-challenge.vercel.app/challenges/03%20-%20CSS%20Variables/index.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starter-files"&gt;
  &lt;/a&gt;
  Starter Files
&lt;/h2&gt;

&lt;p&gt;Before moving forward, copy the initial HTML, and CSS files from the snippets below and set up your local environment to get started&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Scoped CSS Variables and JS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Update CSS Variables with &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'hl'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JS&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"spacing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Spacing:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"spacing"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"spacing"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;data-sizing=&lt;/span&gt;&lt;span class="s"&gt;"px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"blur"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blur:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blur"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"blur"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"25"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;data-sizing=&lt;/span&gt;&lt;span class="s"&gt;"px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"base"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Base Color&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"base"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"base"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"#ffc600"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://source.unsplash.com/7bwQXzbF6KE/800x500"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*
    misc styles, nothing to do with CSS variables
*/&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#193549&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'helvetica neue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.controls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you’re done with setting up the code locally, your HTML file will look like this 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chUD3ymQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/clearprogrammer.com/wp-content/uploads/2021/07/Screenshot-2021-07-22-at-22-18-47-Scoped-CSS-Variables-and-JS.png%3Fresize%3D1024%252C653%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chUD3ymQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/clearprogrammer.com/wp-content/uploads/2021/07/Screenshot-2021-07-22-at-22-18-47-Scoped-CSS-Variables-and-JS.png%3Fresize%3D1024%252C653%26ssl%3D1" alt="Screenshot of our Mini Editor"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Screenshot of our Mini Editor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The project is fine, but the spacing, blur, and color will not work, as we have to do that with JavaScript, but before going towards JavaScript, let’s first learn about CSS Variables.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-variables"&gt;
  &lt;/a&gt;
  CSS Variables
&lt;/h2&gt;

&lt;p&gt;The main purpose of this project is to teach us CSS variables,&lt;/p&gt;

&lt;p&gt;So let’s learn what CSS variable is how are we going to use it on our project, we’ll take the example which we have used in the code above –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSS Variables can have a global or local scope, global variables can be used throughout the document while local variable can be used&lt;/li&gt;
&lt;li&gt;To declare a global variable, you have to use :root{} selector, and then you can declare a custom property with — in the beginning with any valid CSS value&lt;/li&gt;
&lt;li&gt;Now, you can use this variable with any property with the help of var() function, e.g. In the above code we have declared a –spacing variable and reused it with padding property of img using var(–spacing)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript-logic"&gt;
  &lt;/a&gt;
  JavaScript Logic
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To make our inputs function, we’ll first store our inputs in a variable.&lt;/li&gt;
&lt;li&gt;Create a function to handle the update of inputs.&lt;/li&gt;
&lt;li&gt;Add a event listener to call this function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.controls input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sizing&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;//blank value is for color as they don't hold px value&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleUpdate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleUpdate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We wrote a function called handleUpdate() to make the inputs function&lt;/li&gt;
&lt;li&gt;Suffix variable stores the string ‘px’ or a blank string for colors to be suffixed with the value of inputs&lt;/li&gt;
&lt;li&gt;document.getElement is used to get access to the  element of the HTML document, we used the same to change the value of spacing, blur and color on the  element so that it automatically affects the whole document.&lt;/li&gt;
&lt;li&gt;In the end, we added ‘change’ event listener for the color and ‘mousemove’ for spacing and blur to work dynamically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you’ve made it this far and your Editor should be working fine now.&lt;/p&gt;

&lt;p&gt;If not or you have any question or confusion regarding this project, shoot a comment below.&lt;/p&gt;

&lt;p&gt;I’ll see you in the next post, till then,&lt;/p&gt;

&lt;p&gt;Happy Coding &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to use Redis and Lua Scripts in a C# ASP.NET Core Microservice Architecture</title>
      <author>Christian Zink</author>
      <pubDate>Thu, 22 Jul 2021 20:23:33 +0000</pubDate>
      <link>https://dev.to/christianzink/how-to-use-redis-and-lua-scripts-in-a-c-asp-net-core-microservice-architecture-28ad</link>
      <guid>https://dev.to/christianzink/how-to-use-redis-and-lua-scripts-in-a-c-asp-net-core-microservice-architecture-28ad</guid>
      <description>&lt;p&gt;Use StackExchange.Redis and run Redis in Docker to Cache Aggregated Database Data for a Scaled C# Application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WYnaEfml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2722/1%2AaO2_ixUXznFFlGZoWuUtnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYnaEfml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2722/1%2AaO2_ixUXznFFlGZoWuUtnw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis has many great use-cases&lt;/strong&gt; like session or full page &lt;strong&gt;caching&lt;/strong&gt;, &lt;strong&gt;queues&lt;/strong&gt;, &lt;strong&gt;pub/sub&lt;/strong&gt; and &lt;strong&gt;leaderboards/counting&lt;/strong&gt;, etc. Usable in your applications and microservice architectures.&lt;/p&gt;

&lt;p&gt;In this article, I show you how to use &lt;strong&gt;&lt;a href="https://stackexchange.github.io/StackExchange.Redis/"&gt;StackExchange.Redis&lt;/a&gt; in ASP.NET Core&lt;/strong&gt; to access a &lt;strong&gt;Redis server running in Docker&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l"&gt;example application&lt;/a&gt; lets users write posts in categories&lt;/strong&gt;. It uses Redis to &lt;strong&gt;cache aggregated data&lt;/strong&gt; for top categories and users while the &lt;strong&gt;database stores the item/line data as “source of truth”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This article starts with a &lt;strong&gt;simple first use-case&lt;/strong&gt; and then advances to a more &lt;strong&gt;complex one with Lua scripting&lt;/strong&gt; and &lt;strong&gt;the inbox pattern&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setup Redis in Docker and Prepare the .NET Core Project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement the Top Categories&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Top Users, the Inbox Pattern, and Lua Scripting for Atomicity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Final Thoughts and Outlook&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-setup-redis-in-docker-and-prepare-the-net-core-project"&gt;
  &lt;/a&gt;
  1. Setup Redis in Docker and Prepare the .NET Core Project
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows"&gt;Docker Desktop&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create the Redis container:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker run --name redis -d redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;a href="https://visualstudio.microsoft.com/en/vs/community/"&gt;Visual Studio Community&lt;/a&gt;&lt;/strong&gt; (it’s free) with the ASP.NET and web development workload. Open an ASP.NET Core 5 Web API project with EntityFramework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the following NuGet packages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft.EntityFrameworkCore.Tools&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;StackExchange.Redis&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create the following entities:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-implement-the-top-categories"&gt;
  &lt;/a&gt;
  2. Implement the Top Categories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-top-categories"&gt;
  &lt;/a&gt;
  Add Top Categories
&lt;/h3&gt;

&lt;p&gt;Increment the count for a category when inserting a new post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Line 1: Connect a Redis multiplexer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lines 7–11: Insert the post and update the category count in a transaction&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lines 13–15: Read the latest count for the category and add/update the entry in the Redis &lt;a href="https://redislabs.com/ebook/part-2-core-concepts/chapter-3-commands-in-redis/3-5-sorted-sets/"&gt;sorted set&lt;/a&gt; “&lt;em&gt;CategoriesByPostCount&lt;/em&gt;”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://redis.io/commands/ZADD"&gt;ZADD&lt;/a&gt; command has an optional &lt;em&gt;GT&lt;/em&gt; parameter: The value is only updated if it is greater than the current value. This prevents race conditions where another thread also increased and updated the count.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#read-top-categories"&gt;
  &lt;/a&gt;
  Read Top Categories
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;SortedSetRangeByRankWithScore&lt;/em&gt; is a wrapper for the Redis &lt;a href="https://redis.io/commands/zrange"&gt;ZRANGE&lt;/a&gt; command. It reads the category and the count. Use the &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; parameters for paging.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#3-top-users-the-inbox-pattern-and-lua-scripting-for-atomicity"&gt;
  &lt;/a&gt;
  3. Top Users, the Inbox Pattern, and Lua Scripting for Atomicity
&lt;/h2&gt;

&lt;p&gt;For the users, I show you how to count the posts in Redis instead of the DB. This is e.g. needed in a sharded environment where the user’s posts are scattered over all shards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#atomically-add-posts-with-lua-scripting"&gt;
  &lt;/a&gt;
  Atomically Add Posts with Lua Scripting
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;PublishOutstandingPosts&lt;/em&gt; method sends new posts to Redis. It uses the inbox pattern and a &lt;a href="https://redislabs.com/ebook/part-3-next-steps/chapter-11-scripting-redis-with-lua/"&gt;Lua script&lt;/a&gt; to make the operation “idempotent”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Further reading: &lt;a href="https://event-driven.io/en/outbox_inbox_patterns_and_delivery_guarantees_explained/"&gt;Outbox, Inbox patterns and delivery guarantees explained&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Line 3–8: Prepare the Lua script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Line 13: Read the last sent post ID from Redis&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Line 15: Load the unsent posts from the DB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Line 17–21: Execute the Lua script to add the post to the user&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Line 22: Set the post count for the user in &lt;em&gt;UsersByPostCount&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Line 25: Update the last sent ID after all operations are finished&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The Lua script tries to add the post ID and timestamp to the &lt;em&gt;PostsByTimestamp&lt;/em&gt; sorted set of the user.&lt;/p&gt;

&lt;p&gt;If it can add the key, it also increments the &lt;em&gt;PostCount&lt;/em&gt; of the user. The script makes the ZADD and ZINCRBY commands atomic. If the post ID already exists, it returns the existing &lt;em&gt;PostCount&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An extra counter per user is needed so that all key parameters map to the same &lt;a href="https://redislabs.com/blog/redis-clustering-best-practices-with-keys/"&gt;Redis hash tag&lt;/a&gt;. And therefore would be placed on the same Redis shard. The curly braces like in the key “{User:5}:PostsByTimestamp” are signifiers for a Redis hash tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#read-the-top-users"&gt;
  &lt;/a&gt;
  Read the Top Users
&lt;/h3&gt;

&lt;p&gt;Use &lt;em&gt;SortedSetRangeByRankWithScore&lt;/em&gt; to read the IDs of the top users. Then read the names:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#4-final-thoughts-and-outlook"&gt;
  &lt;/a&gt;
  4. Final Thoughts and Outlook
&lt;/h2&gt;

&lt;p&gt;You used &lt;strong&gt;StackExchange.Redis to access Redis from C#&lt;/strong&gt;. See &lt;a href="https://dev.to/christianzink/how-to-cache-aggregated-data-with-redis-and-lua-scripts-for-a-scaled-microservice-architecture-4k3e"&gt;my previous article&lt;/a&gt; if you want to &lt;strong&gt;manually access Redis via redis-cli&lt;/strong&gt; or want &lt;strong&gt;more information about the example data model and use-cases&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The code in this article focuses on the Redis-related part. The &lt;strong&gt;basis for the code can be found in the solution from &lt;a href="https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l"&gt;my article about database sharding&lt;/a&gt;&lt;/strong&gt; if you want to build and run the service.&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;many other use-cases for you to use Redis in your applications!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please contact me if you have any questions, ideas, or suggestions.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>redis</category>
      <category>microservices</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
