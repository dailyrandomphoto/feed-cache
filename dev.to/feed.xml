<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Execution Model of JavaScript</title>
      <author>Dharmarajsinh Jethva </author>
      <pubDate>Sun, 26 Sep 2021 09:53:18 +0000</pubDate>
      <link>https://dev.to/gokukun/execution-model-of-javascript-3hko</link>
      <guid>https://dev.to/gokukun/execution-model-of-javascript-3hko</guid>
      <description>&lt;p&gt;JS has been often classified as a scripting interpreted language. However, the truth to this matter is that there are more than one ways of interpreting (pun intended &amp;amp; left to your interpretation).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#models-of-execution"&gt;
  &lt;/a&gt;
  Models of Execution
&lt;/h2&gt;

&lt;p&gt;The usual method that we think of, when the phrase &lt;em&gt;interpreted language&lt;/em&gt; is mentioned, is the line by line execution of the source code. In this processing model, each line is transformed into machine code, the transformed line of code is executed and only after that does the processing model continue to the next line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGSNJoNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nt4eemvogzlko2pisj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGSNJoNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nt4eemvogzlko2pisj.png" alt="interpreted execution model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is another processing model called &lt;em&gt;compilation&lt;/em&gt; where the entire source code is taken and transformed at once into machine instructions and these instructions are saved into another file. Once the compiled machine instructions file is created, executing this file will run the output of original code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzeN2sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7ijg2bixh27zkc4z3d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cVzeN2sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7ijg2bixh27zkc4z3d9.png" alt="compiled execution model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-js-interpreted-a-prologue-to-js-execution"&gt;
  &lt;/a&gt;
  Is JS interpreted? A prologue to JS execution
&lt;/h2&gt;

&lt;p&gt;The question still remains that whether JS employs this method of line by line conversion of code, followed by execution, we commonly refer to as 'interpretation'? Well, the answer is little more subtle than a yes or a no answer. JavaScript engines have amalgamated both of these above mentioned processing models into how they execute JS. Even though, these engines don't generate a compiled machine instruction file, JS is still compiled before it starts executing. I know. I know. That was a lot to take in just one sentence but just give this idea &lt;a href="https://signalvnoise.com/posts/3124-give-it-five-minutes"&gt;five minutes&lt;/a&gt; and the pieces to the puzzle of JS's execution mechanism will suddenly start to fit. Keeping this idea in mind that JS first compiles the entire code, let's continue ahead.&lt;/p&gt;

&lt;p&gt;The behavior that JS compiles it's code first, is noticeable through something as plain as 'syntax errors' and 'hoisting'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-syntactical-error"&gt;
  &lt;/a&gt;
  Making a Syntactical Error
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this won't be printed&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wrongJS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this will throw an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If JS was interpreted, transformed, and executed line by line without moving to the next line before completing this process, the first line would've printed "Hello World" to the console because the error lies on line 2. But, it doesn't get executed line by line without getting compiled first and it didn't print to the console because of the syntax error. This is one such example portraying that there are certain elements of compilation at play here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoisting-a-function-declaration"&gt;
  &lt;/a&gt;
  Hoisting a Function Declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, if JS was interpreted line by line, it couldn't have looked ahead on line 3 without executing line 1. That would mean that JS didn't know what &lt;code&gt;print_hello()&lt;/code&gt; is on line 1 and it should've rightfully thrown a reference error. But, it didn't throw an error and instead, it successfully executed the function and printed to the console. &lt;/p&gt;

&lt;p&gt;These examples clearly poke some holes in the theory that JS is a strictly interpreted language. So, does that mean JS is entirely a compiled language? Hold your horses. As I said, JS engines implement a mixture of both these methods. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From the evidence of the above give peculiar cases, it should suffice to say that JS engines have a compiler which compiles the code into a byte code and this byte code is then fed into an interpreter which generates a machine code to be executed. This is a high level explanation of how JS code gets run without getting into the details of the baseline compilers, JIT compilers, interpreters and what not.&lt;/p&gt;

&lt;p&gt;Fun fact: As JS engines don't have typical compilation step of being compiled ahead of time, the compiled code isn't always optimized because they don't always have as much time to optimize it. Hence, they use optimizing compilers to optimize the repeated pieces of code during the execution by keeping a track of executed code and the data that's used for execution.&lt;/p&gt;

&lt;p&gt;Hopefully, the idea about how JS engines execute code has started to make more sense. We'll explore this concept more in future post of scoping mechanisms.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>intepreted</category>
      <category>compiled</category>
    </item>
    <item>
      <title>Skeleton Loading for Social Media Embeds using CSS and JavaScript 🔥</title>
      <author>murtuza</author>
      <pubDate>Sun, 26 Sep 2021 08:56:15 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/skeleton-loading-for-social-media-embeds-using-css-and-javascript-4njb</link>
      <guid>https://dev.to/murtuzaalisurti/skeleton-loading-for-social-media-embeds-using-css-and-javascript-4njb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This post is inspired by &lt;a href="https://youtu.be/ZVug65gW-fc"&gt;Web Dev Simplified&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Social media embeds take some time to load and render, hence the user experience is not so good! Here's an example of twitter embeds:&lt;/p&gt;

&lt;p&gt;Without applying skeleton loading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNRHgYU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fi3mvfp595v20gx5oqm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNRHgYU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fi3mvfp595v20gx5oqm.gif" alt="Without skeleton loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After applying skeleton loading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcWjfzxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqcsp8h77v63c9bsn9ny.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcWjfzxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqcsp8h77v63c9bsn9ny.gif" alt="after applying skeleton loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, the user experience without skeleton loading is not so good! So, let's see how can we implement skeleton loading on twitter embeds!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embedding-tweets"&gt;
  &lt;/a&gt;
  Embedding Tweets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    //tweets
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have created a container which will contain all our twitter embeds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        //tweet 1 (paste the twitter embed code here without the script tag)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        //tweet 2 (paste the twitter embed code here without the script tag)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    .
    .
    .
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the embed code of your tweet as shown above. Here's how you can get the embed code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your tweet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the more menu&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBa55kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doopwfm8w7jwev3mwhe3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBa55kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doopwfm8w7jwev3mwhe3.jpg" alt="more_menu"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the 'Embed Tweet' option&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--os0nfxko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5yb2cka8ac8bl65ujr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--os0nfxko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5yb2cka8ac8bl65ujr1.jpg" alt="embed tweet option"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will be redirected to a new tab and you can copy the embed code from there itself.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7tKaKt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz3f3cbcpsn5q2ka1k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7tKaKt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz3f3cbcpsn5q2ka1k.jpg" alt="twitter embed code"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that you don't need to add multiple script tags for different tweets. You can add just one script tag at the bottom of the body element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//add this just before the &amp;lt;/body&amp;gt; tag.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://platform.twitter.com/widgets.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have done that, it's time to style the embeds using CSS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-embeds-using-css"&gt;
  &lt;/a&gt;
  Styling the embeds using CSS!
&lt;/h3&gt;

&lt;p&gt;You can do that by applying Flexbox properties to the container just like this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweets&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also customize the width of the embed! But note that the tweet embed can only shrink upto a certain limit. If you go beyond that threshold, the embed will overflow, so keep that in mind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweet&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it's time to create a skeleton for these tweets!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-skeleton-for-embeds"&gt;
  &lt;/a&gt;
  Creating Skeleton for Embeds
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets-skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweet-skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's style this skeleton using CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweets&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweets-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.05rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.content-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.content-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your tweet skeleton should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFTsqJzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq03683q9ebguv8jxmxk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFTsqJzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq03683q9ebguv8jxmxk.jpg" alt="tweet skeleton"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's animate this skeleton to make it look like something is loading in the background! We will do that by using the concept of 'keyframes' in CSS and animating the background color of the lines of text as well as the image!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we will define the animation properties for the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tweet-skeleton&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tweet-skeleton&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nchWgCbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giw4zssl4g30gul8yz6m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nchWgCbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/giw4zssl4g30gul8yz6m.gif" alt="skeleton loading animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As Kyle Cook wonderfully explains in his video, here's how you can create multiple skeleton templates based on your requirement using JavaScript!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweets-skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweet_skeleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweet-skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tweet_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here comes the fun part! How to show the skeleton while the tweet embed is rendering? We are going to do that by using the &lt;code&gt;setTimeout&lt;/code&gt; function in JavaScript. &lt;/p&gt;

&lt;p&gt;The idea is to hide the tweet embeds for a certain time until they are rendered as &lt;code&gt;iframes&lt;/code&gt; and showing the skeleton instead. After the specified time, the skeleton will hide itself and the tweet embeds will be shown. This is certainly not the best way to do this. Another approach is to &lt;a href="https://stackoverflow.com/a/5529841"&gt;detect the network speed&lt;/a&gt; of the client and accordingly decide the timing.&lt;/p&gt;

&lt;p&gt;But to make things simple, we are going to use the &lt;code&gt;setTimeout&lt;/code&gt; function which will be executed after 4 seconds.&lt;/p&gt;

&lt;p&gt;Add these styles to the tweets container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tweets"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"visibility: hidden; display: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visibility: hidden;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;tweets_skeleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display: none;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If there are large number of tweets, the loading time may increase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's the final output:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/seekertruth/embed/ExXWXjZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all for now! I'm on twitter as &lt;a href="https://twitter.com/murtuza_surti"&gt;murtuza_surti&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Linux, Should you use it? Can you use it?</title>
      <author>Rachit Khurana</author>
      <pubDate>Sun, 26 Sep 2021 08:30:43 +0000</pubDate>
      <link>https://dev.to/dilutewater/linux-should-you-use-it-can-you-use-it-4aeo</link>
      <guid>https://dev.to/dilutewater/linux-should-you-use-it-can-you-use-it-4aeo</guid>
      <description>&lt;h3&gt;
  &lt;a href="#some-context"&gt;
  &lt;/a&gt;
  Some context:
&lt;/h3&gt;

&lt;p&gt;I'm just a student and I have been using windows from my childhood, but I switched  to linux about a month ago. I install ubuntu on my main PC as windows was lagging a lot. My PC is a very low end PC so I taught to give linux a try. I then installed kde plasma environment on my ubuntu. And I am so happy with it that I would never switch to windows again.&lt;br&gt;
P.S. I'm not a die-hard programmer or a hacker, I am just a common user with some python knowledge.&lt;/p&gt;

&lt;p&gt;Linux has a lot of awesome features. Lemme list few of the notable ones. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Completely Free :&lt;/strong&gt;&lt;br&gt;
Unlike windows, Linux has  multiple distros that are completely free. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customisation :&lt;/strong&gt;&lt;br&gt;
Believe me when I say that Linux can customised to the fullest. You can customise every element of the operating system. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexibility :&lt;/strong&gt;&lt;br&gt;
If you don't like something in your Linux operating system , you can change it according to your preferences. You are not bonded to use the default softwares/packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Runs better on low end hardware :&lt;/strong&gt;&lt;br&gt;
Some linux distros have very low system requirements and can run perfectly on lowend hardware. &lt;br&gt;
I have a low end PC and windows used to lag a lot but linux doesn't. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many other features...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-should-use-linux-instead-of-windows"&gt;
  &lt;/a&gt;
  Who should use Linux instead of Windows?
&lt;/h1&gt;

&lt;p&gt;If you are a developer, there is a high chance you are already using linux, but if you are not, then you can give it a try. &lt;br&gt;
Installing linux &amp;amp; other softwares can something cause some issues, so if you are good at troubleshooting or googling then you can give it a try. &lt;br&gt;
Or you are just bored of Windows and like to tinker around with your computer. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#which-are-the-most-user-friendly-linux-distros"&gt;
  &lt;/a&gt;
  Which are the most user friendly Linux Distros?
&lt;/h1&gt;

&lt;p&gt;I haven't tried many distros but according to me , you can try Ubuntu for basic users. Or you can try Kubuntu, it has KDE environment &amp;amp; has a lot of customisation features while is still very user friendly. &lt;/p&gt;

&lt;p&gt;After all linux is used everywhere from the high end servers to your android smartphones, so why not give it a try on your desktop computer as well. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;TL;DR - Give Linux a try, especially KDE plasma environment (Kubuntu)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Bench-marking RESTful APIs | Part - II: On the Cloud</title>
      <author>Nikhil Akki</author>
      <pubDate>Sun, 26 Sep 2021 08:07:43 +0000</pubDate>
      <link>https://dev.to/gochronicles/bench-marking-restful-apis-part-ii-on-the-cloud-fd0</link>
      <guid>https://dev.to/gochronicles/bench-marking-restful-apis-part-ii-on-the-cloud-fd0</guid>
      <description>&lt;p&gt;Have you ever load tested your APIs on the cloud? In this post we explore how to load test and benchmark different RESTful framework's performance&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap 🤠
&lt;/h3&gt;

&lt;p&gt;In our previous post, we did some benchmarks of frameworks from different languages. Our test hardware/server was my Raspberry Pi 3 Model B from 2016, it was a good experiment, but this time around we needed something more realistic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - We used Kubernetes 😉 on Cloud (Google Cloud Platform) -&amp;gt; jump to benchmarks section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get back to our story if are following the storyline from the first post 😄&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dave went back to his peers to show benchmark results that he had got in the initial tests which he ran on his Raspberry Pi 3, while some of his peers liked the idea and appreciated the outcome, some pointed out that they would need the test on real production-grade hardware to believe the results! Dave went back to his garage to tweak his test bench.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Our setup is quite straightforward, each RESTful service gets the same amount of CPU and memory (enforced via k8s config). The entire setup takes few minutes to initialize, thanks to tools like gcloud CLI, Terraform &amp;amp; Pulumi. You can get it up and running with the environment without much hassle. And if you want to run the benchmark without fancy infra (i.e. without private VPC etc.). We recommend that you use the CLI wrapper as it is built over gcloud SDK and for the adventurous type, we have a slightly more elaborate setup with Terraform (GCP) &amp;amp; Pulumi (GCP &amp;amp; Digital Ocean).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-review"&gt;
  &lt;/a&gt;
  Environment Review
&lt;/h3&gt;

&lt;p&gt;Kubernetes is a planet scale tool that can orchestrate containerized applications and more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Checkout our series on Kubernetes it is swell! 😃&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we didn't want to scale the application as load increases, we have put some limits. The config ensures that the deployments stay put and do not auto-scale in the K8s cluster. The whole point of this exercise is to simulate a prod environment (but without auto-scaling). We then load test and measure performance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quite the step up from the test on Raspberry Pi 3, isn't it? 😉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It took us a while to figure out the right configuration for the cluster so that you could replicate the tests on your own with the optimal amount of resources. The K8s environment can be setup on GCP free tier (at the time of writing this article)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source code link for this entire project is given the references section! 😎&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#lets-review-our-ks-config-file"&gt;
  &lt;/a&gt;
  Let's review our K8️⃣s Config file
&lt;/h3&gt;

&lt;p&gt;Deployment config looks like this - 👀&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io/gochronicles/benchmark-rest-frameworks/rest-net-http-golang:latest&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IfNotPresent&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1Gi"&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;500m"&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Notice that we have allocated memory - 1Gi and CPU 500m or half vCPU. This constraint is given to all frameworks, this will ensure that the amount of compute given to each deployment is consistent.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt; &lt;span class="c1"&gt;# provide public ip to the service&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rest-net-http-golang&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Service config exposes the RESTful apps in the cluster network via Public IP so that our bench-marking client can connect and run load simulations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#our-attack-tool-for-load-testing"&gt;
  &lt;/a&gt;
  Our attack tool for load testing🍾
&lt;/h3&gt;

&lt;p&gt;This time around, we decided to play around with different benchmark &amp;amp; load testing tools. Finally, we chose Hey.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey is a drop-in replacement for ab tool (Apache benchmark).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hey &lt;span class="nt"&gt;-c&lt;/span&gt; 800 &lt;span class="nt"&gt;-n&lt;/span&gt; 35000 &amp;lt;http://ip-addr-url/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will send 800 concurrent &amp;amp; total 35k requests to the RESTful API services on the K8s cluster.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#honorable-mentions-"&gt;
  &lt;/a&gt;
  Honorable mentions -
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Locust!&lt;/strong&gt; 🛩️-
This was the ideal tool for this test for couple of important reasons.
We could deploy this python based web app like load test tool on K8s cluster and run benchmarks from with in the cluster network (no need for public IP)
It comes with a nice UI dashboard to visualize the results.
The test results was same across frameworks, it looked like we couldn't schedule enough number of workers to really push the throttle on the RESTful APIs.
We had a limit on the number of processors we could deploy on our GCP instance (free tier has 8CPU limit for the entire project)
If you want to tinker with locust, here's the k8s config we created.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Apache Benchmark&lt;/strong&gt; - 
Good old tool we could still probably use, but the results were better and faster with hey and it shares the almost similar CLI options.
CPU monitoring tool (htop) revealed that ab tool didn't take advantage of all the CPU cores, where as hey tool fired up on all CPU cores with same parameters out of the box.
Benchmarks 📈
The order of slowest to fastest framework is as expected in the benchmark results. Go frameworks are at a minimum 10x faster than Node &amp;amp; Python-based frameworks. However, the interesting bit is FastAPI (Python framework) isn't too far off from NestJS (which is about ~12% faster).&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;FastAPI (Python)&lt;/p&gt;

&lt;p&gt;NestJS (Node)&lt;/p&gt;

&lt;p&gt;ExpressJS (Node)&lt;/p&gt;

&lt;p&gt;Gin (Golang)&lt;/p&gt;

&lt;p&gt;Net-http (Go std libray)&lt;/p&gt;

&lt;p&gt;Fiber (Golang)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#close-thoughts"&gt;
  &lt;/a&gt;
  Close thoughts 🤔
&lt;/h3&gt;

&lt;p&gt;Results are as we anticipated - Go-based frameworks are at least 10x faster than Node &amp;amp; Python-based frameworks. One thing surprised us and possible areas for more research -&lt;/p&gt;

&lt;p&gt;In our local testing, Gin has always performed faster than Net/HTTP (Golang). However, in this test, it has scored lower. The source code for this service and the Kubernetes config can be found here and here respectively.&lt;/p&gt;

&lt;p&gt;Let us know in the comments if you found a better way to do these tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Your feedback 💁 and support🤝 means a lot, do share some love🥰 by sharing our posts on social media and subscribe to our newsletter! Until next time! 🎂😎&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;



&lt;p&gt;&lt;em&gt;This article was originally published on&lt;/em&gt; &lt;strong&gt;&lt;em&gt;GoChronicles.com&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;by the same author and has been repost with permission.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>kubernetes</category>
      <category>node</category>
      <category>benchmarks</category>
    </item>
    <item>
      <title>What are your Mac/PC specs?</title>
      <author>Madza</author>
      <pubDate>Sun, 26 Sep 2021 07:24:26 +0000</pubDate>
      <link>https://dev.to/madza/what-are-your-pc-specs-5g48</link>
      <guid>https://dev.to/madza/what-are-your-pc-specs-5g48</guid>
      <description>&lt;p&gt;It is well known fact, that you don't need a workstation with quantum computing superpowers to be a developer.&lt;/p&gt;

&lt;p&gt;I work on an average machine too, which I use for like 4-5 years already. Here is the extract from the manufacturer:&lt;/p&gt;

&lt;p&gt;MSI GS70 2PE Stealth Pro:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intel Core i7-4710HQ (Clock Speed: 2.5GHz, Max Turbo Frequency: 3.5GHz)&lt;/li&gt;
&lt;li&gt;2x128GB SSD MSATA HDD (RAID)&lt;/li&gt;
&lt;li&gt;1TB 5400RPM 2.5" HDD&lt;/li&gt;
&lt;li&gt;NVIDIA Geforce GTX 870M 3GB&lt;/li&gt;
&lt;li&gt;17.3" Full HD (1920x1080) LED Anti-Glare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are your computer specs? 💻&lt;/p&gt;

&lt;p&gt;Share them in the comments below! 👇&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>hardware</category>
      <category>pc</category>
      <category>mac</category>
    </item>
    <item>
      <title>Rendering all WordPress pages in Next.js</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 26 Sep 2021 06:59:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/rendering-all-wordpress-pages-in-next-js-3iin</link>
      <guid>https://dev.to/dailydevtips1/rendering-all-wordpress-pages-in-next-js-3iin</guid>
      <description>&lt;p&gt;We started looking at &lt;a href="https://daily-dev-tips.com/posts/loading-wordpress-posts-in-nextjs/"&gt;how to load all WordPress posts in our Next.js website&lt;/a&gt;. However, we can also have pages in WordPress which we most likely want to load.&lt;/p&gt;

&lt;p&gt;In this article, we'll create a unique page for each of our WordPress pages in Next.js.&lt;/p&gt;

&lt;p&gt;If you want to follow along, use &lt;a href="https://github.com/rebelchris/next-tailwind/tree/wordpress-posts-home"&gt;this branch&lt;/a&gt; as your starting point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-unique-pages-in-nextjs"&gt;
  &lt;/a&gt;
  Creating unique pages in Next.js
&lt;/h2&gt;

&lt;p&gt;What we want to achieve with our pages is that they are accessible on the top-level domain.&lt;br&gt;
So we want to be able to visit: &lt;code&gt;https://ourwebsite.com/our-page&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this to work, we need to work in the &lt;code&gt;pages&lt;/code&gt; folder directly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Small note: Make sure you don't have hardcoded Next.js pages with the same slug&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a file called &lt;code&gt;[slug].js&lt;/code&gt; in your &lt;code&gt;pages&lt;/code&gt; folder.&lt;br&gt;
You might recall this &lt;code&gt;[]&lt;/code&gt; means it's a variable page from my article on &lt;a href="https://daily-dev-tips.com/posts/nextjs-page-options-and-how-they-work/"&gt;Next.js page options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meaning, this will create pages dynamically and provide a &lt;code&gt;slug&lt;/code&gt; variable for each of them.&lt;/p&gt;

&lt;p&gt;Since this is a single page but can have multiple versions (&lt;code&gt;page-1&lt;/code&gt;, &lt;code&gt;page-2&lt;/code&gt;, etc.), we need to use both &lt;code&gt;getStaticPaths&lt;/code&gt; and &lt;code&gt;getStaticProps&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getStaticPaths&lt;/code&gt;: Will be used to creating all unique pages for each of our WordPress slugged pages.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getStaticProps&lt;/code&gt;: This will be the page we are loading and load more details for that specific slug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's setup our basic structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TODO&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// HTML&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be the basic outline for our pages.&lt;/p&gt;

&lt;p&gt;We'll get started on the static paths, which will render a unique page for every slug it finds.&lt;/p&gt;

&lt;p&gt;But for this to happen, we need to query our GraphQL API and retrieve all unique slugs for our pages.&lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;lib/api.js&lt;/code&gt; file and create the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllPagesWithSlugs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  {
    pages(first: 10000) {
      edges {
        node {
          slug
        }
      }
    }
  }
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function gets all our pages (10000 limit) that have a slug and returns those slugs.&lt;/p&gt;

&lt;p&gt;Now let's see how we can use this function in our &lt;code&gt;[slug].js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First, import this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getAllPagesWithSlugs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use this in our &lt;code&gt;getStaticPaths&lt;/code&gt; to render pages for each of the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pagesWithSlugs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllPagesWithSlugs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pagesWithSlugs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila, we now have at least a unique page for each of our WordPress pages.&lt;/p&gt;

&lt;p&gt;However, they don't have any content yet.&lt;br&gt;
To work, we need to create a function that can retrieve details for a specific slug.&lt;/p&gt;

&lt;p&gt;Head back over to your &lt;code&gt;lib/api.js&lt;/code&gt; file and add the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPageBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  {
    page(id: "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;", idType: URI) {
      title
      content
    }
  }
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function queries for a single page with a specific slug. As you can see, the slug is passed as a variable.&lt;br&gt;
We use &lt;code&gt;URI&lt;/code&gt; for the type, which is set in the GraphQL options of WordPress GraphQL.&lt;/p&gt;

&lt;p&gt;And for each page, we want to return the title and the content field. (You can extend this with more data if needed).&lt;/p&gt;

&lt;p&gt;Now back in our &lt;code&gt;[slug].js&lt;/code&gt; file, we can start by importing this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getAllPagesWithSlugs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPageBySlug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then leverage it in the &lt;code&gt;getStaticProps&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPageBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing we need to do is add some HTML to our main &lt;code&gt;Page&lt;/code&gt; function.&lt;br&gt;
This function can now return the page variable we just set in the &lt;code&gt;getStaticProps&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col p-10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mb-5 text-4xl font-bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base text-grey-darker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go, you can now visit any of your slugs and view the page on our Next.js website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqab6Dhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632029610600/xxecMILgU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqab6Dhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632029610600/xxecMILgU.png" alt="Render WordPress pages in Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see the complete code, it's hosted &lt;a href="https://github.com/rebelchris/next-tailwind/tree/wordpress-pages"&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>Vocabulary Building Day 19</title>
      <author>vindhya Hegde </author>
      <pubDate>Sun, 26 Sep 2021 06:50:08 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-19-6n5</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-19-6n5</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;maverick&lt;/strong&gt;(noun): someone who exhibits great independence in thought and action.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8q_hdZSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mamanatural.com/wp-content/uploads/name-images/girls/m/maverick-name-meaning-baby-girl-h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8q_hdZSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mamanatural.com/wp-content/uploads/name-images/girls/m/maverick-name-meaning-baby-girl-h.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=frivolous&amp;amp;oq=frivolous&amp;amp;aqs=chrome..69i57j0i433i512l3j0i131i433i512j0i512l2j0i433i512l2j0i512.7395j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;panache&lt;/strong&gt;(noun): distinctive and showy elegance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3jqBfeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/D6DTrkfWkAAHx9s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3jqBfeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/D6DTrkfWkAAHx9s.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=panache&amp;amp;oq=panache&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i512l2j46i175i199i512j0i512l3j46i175i199i512j46i199i465i512.3412j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;heyday&lt;/strong&gt;(noun): the period of a person's or thing's greatest success, popularity, activity.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Spw3I9SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thesaurus.plus/img/sentences/23/Anime_Tekkonkinkreet.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Spw3I9SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thesaurus.plus/img/sentences/23/Anime_Tekkonkinkreet.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=proselytize&amp;amp;oq=prosely&amp;amp;aqs=chrome.0.69i59j69i57j0i131i433i512l2j0i433i512l2j0i512j0i433i512j0i512l2.8956j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;heretic&lt;/strong&gt;(noun): a person believing in or practicing religious heresy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShtYtoga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EBST2YkXYAEO5KU.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShtYtoga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EBST2YkXYAEO5KU.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=heretic+meaning&amp;amp;oq=heretic&amp;amp;aqs=chrome.0.0i20i263i433i512j69i57j0i512l3j46i512j0i512l2j46i512j0i512.7193j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;lachrymose&lt;/strong&gt;(adjective): tearful or given to weeping.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2NWT2eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dxuoddg10rgxw.cloudfront.net/wp-content/uploads/2011/05/17024004/Lachrymose-post.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2NWT2eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dxuoddg10rgxw.cloudfront.net/wp-content/uploads/2011/05/17024004/Lachrymose-post.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=lachrymose+meaning&amp;amp;oq=lachrymose&amp;amp;aqs=chrome.0.0i20i263i433i512j69i57j0i20i263i512j0i512l7.6724j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>What's the most beginner-friendly Linux distro?</title>
      <author>Madza</author>
      <pubDate>Sun, 26 Sep 2021 06:50:08 +0000</pubDate>
      <link>https://dev.to/madza/what-s-the-most-beginner-friendly-linux-distro-2bb5</link>
      <guid>https://dev.to/madza/what-s-the-most-beginner-friendly-linux-distro-2bb5</guid>
      <description>&lt;p&gt;There are &lt;a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions"&gt;hundreds&lt;/a&gt; of Linux distributions out there each varying in their purpose of use and the level of expertise the user needs. &lt;/p&gt;

&lt;p&gt;There are tools like &lt;a href="http://distrowatch.org/search.php#advanced"&gt;DitroWatch&lt;/a&gt; to help users narrow down their options, but, still, choosing the right one could be quite a challenge. &lt;/p&gt;

&lt;p&gt;What are some of the Linux distros you would recommend to users switching from other OS with no prior knowledge?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>linux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tall Stack</title>
      <author>SumantaGitWeb</author>
      <pubDate>Sun, 26 Sep 2021 06:30:48 +0000</pubDate>
      <link>https://dev.to/sumanta_thefrontdev/tall-stack-3eb2</link>
      <guid>https://dev.to/sumanta_thefrontdev/tall-stack-3eb2</guid>
      <description>&lt;p&gt;It is a Stack of 4 frameworks for web dev namel --&lt;br&gt;
1) Tailwind CSS&lt;br&gt;
2) Alpine JS&lt;br&gt;
3) Laravel&lt;br&gt;
4) Laravel - LiveWire&lt;/p&gt;

&lt;p&gt;Tall Stack says = "&lt;br&gt;
&lt;b&gt;A new way to build rich, reactive web apps.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Learn &lt;em&gt;Laravel&lt;/em&gt;, style it easily with &lt;em&gt;Tailwind&lt;/em&gt;, and write &lt;em&gt;Laravel-like Livewire&lt;/em&gt; components and a dash of &lt;em&gt;Alpine.js&lt;/em&gt;, and you've got a full-stack reactive and interactive platform for creation.&lt;br&gt;
"&lt;/p&gt;

&lt;p&gt;Its Website = "&lt;a href="https://tallstack.dev/"&gt;https://tallstack.dev/&lt;/a&gt;"&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Freelance Journey: Starting Off to Top Rated in 4 Months</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 26 Sep 2021 06:28:05 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/freelance-journey-starting-off-to-top-rated-in-4-months-3h8k</link>
      <guid>https://dev.to/ruppysuppy/freelance-journey-starting-off-to-top-rated-in-4-months-3h8k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mn0JI1Y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ulc0jp4012v47w2kfvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mn0JI1Y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ulc0jp4012v47w2kfvn.png" alt="Upwork Badges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are into &lt;strong&gt;Freelance&lt;/strong&gt;, you must have come across &lt;strong&gt;UpWork&lt;/strong&gt;, one of the largest &lt;strong&gt;Freelance Marketplace&lt;/strong&gt; on the planet. &lt;strong&gt;UpWork&lt;/strong&gt; provides &lt;strong&gt;Freelancers&lt;/strong&gt; with badges to signify the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rising Talent&lt;/strong&gt;: Success &lt;em&gt;early on&lt;/em&gt; in the &lt;strong&gt;Freelance Game&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top Rated&lt;/strong&gt;: Top &lt;em&gt;12%&lt;/em&gt; of the &lt;strong&gt;Freelancers&lt;/strong&gt; on the Platform&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top Rated Plus&lt;/strong&gt;: Top &lt;em&gt;3%&lt;/em&gt; of the &lt;strong&gt;Freelancers&lt;/strong&gt; on the Platform&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expert Vetted&lt;/strong&gt;: Top &lt;em&gt;1%&lt;/em&gt; of the &lt;strong&gt;Freelancers&lt;/strong&gt; on the Platform and verified by &lt;strong&gt;UpWork&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am a &lt;strong&gt;Freelancer&lt;/strong&gt; who went from Starting Off to &lt;strong&gt;Top Rated&lt;/strong&gt; in just &lt;em&gt;4 months&lt;/em&gt; (on average takes &lt;em&gt;1 to 2 years&lt;/em&gt;). In this article, I will be sharing how I managed to &lt;em&gt;pull off this feat&lt;/em&gt; in such a &lt;em&gt;small timespan&lt;/em&gt;. &lt;strong&gt;Let's Get Started!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd5hqkAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t5r4zxdslt7enh6h85v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd5hqkAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t5r4zxdslt7enh6h85v.gif" alt="Get Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This article will &lt;strong&gt;NOT&lt;/strong&gt; provide you with &lt;strong&gt;any shortcut&lt;/strong&gt; to becoming &lt;strong&gt;Top Rated&lt;/strong&gt;, but share how I became &lt;strong&gt;Top Rated&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-began"&gt;
  &lt;/a&gt;
  How it Began
&lt;/h1&gt;

&lt;p&gt;If you go through my profile, you will find I started &lt;strong&gt;Freelancing&lt;/strong&gt; on &lt;em&gt;11th May 2021&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p3kR6S_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8upbbm8m73ftjda7c6xt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p3kR6S_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8upbbm8m73ftjda7c6xt.PNG" alt="Start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I became &lt;strong&gt;Top Rated&lt;/strong&gt; on &lt;em&gt;19th September 2021&lt;/em&gt;, in only &lt;strong&gt;4 Months and 8 days&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fBVo_FGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2pvh8routr64fsf2n5m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBVo_FGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2pvh8routr64fsf2n5m.PNG" alt="Top Rated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On paper, I might have become &lt;strong&gt;Top Rated&lt;/strong&gt; in &lt;em&gt;4 months&lt;/em&gt; &lt;strong&gt;on paper&lt;/strong&gt;, but the things that led me to become &lt;strong&gt;Top Rated&lt;/strong&gt; started &lt;strong&gt;4 YEARS&lt;/strong&gt; ago! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-things-snowballs"&gt;
  &lt;/a&gt;
  How things Snowballs
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bf9t2gs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avndq1k4hbpdk7ar33et.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bf9t2gs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avndq1k4hbpdk7ar33et.gif" alt="Snowball"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every &lt;strong&gt;gig&lt;/strong&gt; I landed on &lt;strong&gt;Upwork&lt;/strong&gt; was a &lt;em&gt;direct (yet completely unexpected) consequence&lt;/em&gt; of something I did a long time back.&lt;/p&gt;

&lt;p&gt;The first &lt;strong&gt;gig&lt;/strong&gt; was writing technical articles (landing the &lt;strong&gt;gig&lt;/strong&gt; result of &lt;strong&gt;posting &lt;a href="https://dev.to/ruppysuppy"&gt;new articles&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;every week&lt;/em&gt;), the second was developing a &lt;strong&gt;SaaS&lt;/strong&gt; product with &lt;strong&gt;Material UI&lt;/strong&gt; (the result of being one of the &lt;a href="https://github.com/ruppysuppy"&gt;contributors&lt;/a&gt; of &lt;strong&gt;Material UI&lt;/strong&gt;), and the final one was due to the &lt;em&gt;client found my blogs&lt;/em&gt; and &lt;em&gt;contacted me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All other &lt;strong&gt;gigs&lt;/strong&gt; were me working with the &lt;strong&gt;previous clients&lt;/strong&gt; or through &lt;strong&gt;referrals&lt;/strong&gt; from them.&lt;/p&gt;

&lt;p&gt;As you can see, everything you do has a &lt;strong&gt;direct impact on your future&lt;/strong&gt;. Make sure you &lt;em&gt;use this knowledge to your advantage&lt;/em&gt; and work on things that have &lt;em&gt;the potential to rocket your future&lt;/em&gt;. Of course, while working on the stuff, you will not know how it &lt;strong&gt;affects you in the future&lt;/strong&gt;, but &lt;strong&gt;improving your skills&lt;/strong&gt; will &lt;em&gt;always have a positive impact&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-to-levelup-fast-at-freelancing"&gt;
  &lt;/a&gt;
  Tips to level-up fast at Freelancing
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuwQErHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymmpuht8zx39yeojtsiu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuwQErHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymmpuht8zx39yeojtsiu.gif" alt="level up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though I am still quite new to &lt;strong&gt;Freelancing&lt;/strong&gt;, through my journey I learned &lt;em&gt;quite a few lessons&lt;/em&gt;, which you can apply to avoid some of the &lt;strong&gt;unnecessary pain&lt;/strong&gt; I went through:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Before you start, make sure you have &lt;strong&gt;practical skills&lt;/strong&gt;. I have seen a lot of my friends &lt;em&gt;watching some tutorials&lt;/em&gt; and &lt;em&gt;thinking they have the necessary skills&lt;/em&gt;. When they land a &lt;strong&gt;gig&lt;/strong&gt;, they sadly get &lt;em&gt;slaughtered by the client&lt;/em&gt; as they can't deliver. &lt;strong&gt;Theoretical skills&lt;/strong&gt; are completely useless. You learn something by DOING not STUDYING.&lt;/p&gt;

&lt;p&gt;There is another &lt;strong&gt;caveat&lt;/strong&gt; to this. You will &lt;em&gt;never think that you are ready to start &lt;strong&gt;Freelancing&lt;/strong&gt;&lt;/em&gt;. But if you have &lt;em&gt;demonstrated your skills&lt;/em&gt; (at least one decent project), &lt;strong&gt;don't shy away&lt;/strong&gt; from starting your &lt;strong&gt;freelance&lt;/strong&gt; journey.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are starting, &lt;em&gt;keep your rates low&lt;/em&gt;, but not &lt;strong&gt;too low&lt;/strong&gt;. My first client (before my &lt;strong&gt;Upwork&lt;/strong&gt; days) offered me $50 for a &lt;strong&gt;gig&lt;/strong&gt; that should have paid $500 considering a rate of $10/hour. Needless to say, the &lt;em&gt;experience wasn't great&lt;/em&gt; for &lt;strong&gt;either of us&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Put the client first.&lt;/strong&gt; It might be tempting to &lt;em&gt;charge the client higher&lt;/em&gt; or &lt;em&gt;cut corners&lt;/em&gt;, but I can &lt;strong&gt;absolutely assure you&lt;/strong&gt; that it will come back and bite you in the long run.&lt;/p&gt;

&lt;p&gt;The client is &lt;em&gt;hiring you to solve their problem&lt;/em&gt;, when you &lt;strong&gt;over-deliver&lt;/strong&gt;, the client will &lt;strong&gt;endorse you&lt;/strong&gt; to their &lt;strong&gt;friends&lt;/strong&gt; and will also &lt;strong&gt;come back to you in the future&lt;/strong&gt;, leading to more business.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be smart about the &lt;strong&gt;gigs&lt;/strong&gt; you apply to. In &lt;strong&gt;gigs&lt;/strong&gt; where there are already &lt;em&gt;20+ applications&lt;/em&gt;, it is &lt;em&gt;highly unlikely&lt;/em&gt; that &lt;em&gt;you apply&lt;/em&gt; and &lt;em&gt;the client would select you&lt;/em&gt;. Apply only on the &lt;strong&gt;gigs&lt;/strong&gt; which are &lt;strong&gt;recent&lt;/strong&gt;, &lt;strong&gt;doesn't have much activity&lt;/strong&gt;, and are a &lt;strong&gt;strong match for your skills&lt;/strong&gt; to maximize the likelihood of being selected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep improving your skills&lt;/strong&gt;. You don't have to learn a &lt;strong&gt;new framework&lt;/strong&gt; every month, but &lt;strong&gt;just a few minor new tweaks&lt;/strong&gt; to your &lt;strong&gt;skillset&lt;/strong&gt; now and then &lt;em&gt;would work wonders&lt;/em&gt;. Just improving &lt;em&gt;1%&lt;/em&gt; every day would incredibly improve your skills in just 1 year (&lt;strong&gt;1.01³⁶⁵ = 37.8, but 1³⁶⁵ = 1&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_Ec25Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dtsq9nl1hqwylpzdn8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_Ec25Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dtsq9nl1hqwylpzdn8.gif" alt="Sum up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering &lt;em&gt;"Everything mentioned in this article is so simple. It won't work for me"&lt;/em&gt;. This is the most common excuse encountered in the world of &lt;strong&gt;Self Development&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Everyone is looking for some &lt;strong&gt;mind-blowing&lt;/strong&gt; trick, which &lt;em&gt;when used&lt;/em&gt; would make them &lt;strong&gt;successful overnight&lt;/strong&gt;. Sorry to break your dream, such a trick doesn't exist. It takes &lt;strong&gt;hard work&lt;/strong&gt; to become good at anything, and &lt;strong&gt;every pro you know once started off as a noob&lt;/strong&gt; (in gamer's terms).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It takes half a decade of hard work to become an overnight success&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every &lt;strong&gt;overnight success&lt;/strong&gt; story you hear, has &lt;em&gt;thousands of hours&lt;/em&gt; preceding it which you know nothing about.&lt;/p&gt;

&lt;p&gt;Ok. Enough with the &lt;strong&gt;Self Development&lt;/strong&gt; stuff. Let's get back to the &lt;strong&gt;Freelance&lt;/strong&gt; world.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;starting are the hardest&lt;/strong&gt;, as long as you &lt;em&gt;keep developing your skills&lt;/em&gt; and &lt;em&gt;keep delivering your best consistently&lt;/em&gt;, you will definitely become one of the best &lt;strong&gt;freelancers&lt;/strong&gt; in the world. Hope that you become a great &lt;strong&gt;freelancer&lt;/strong&gt; soon. &lt;strong&gt;Best of luck on your journey!!!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsQxD-Tk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyuj8iwgydbxwge4mpd3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsQxD-Tk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyuj8iwgydbxwge4mpd3.gif" alt="Good Luck"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>freelance</category>
    </item>
    <item>
      <title>Vocabulary Building Day 18</title>
      <author>vindhya Hegde </author>
      <pubDate>Sun, 26 Sep 2021 06:20:46 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-18-4mn</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-18-4mn</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;frivolous&lt;/strong&gt;(adjective): not having any serious purpose or value.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4VDuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://slideplayer.com/slide/16230546/95/images/2/frivolous%2BDefinition%253A%2Black%2Bof%2Bseriousness%2Bor%2Bsense.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4VDuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://slideplayer.com/slide/16230546/95/images/2/frivolous%2BDefinition%253A%2Black%2Bof%2Bseriousness%2Bor%2Bsense.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=frivolous&amp;amp;oq=frivolous&amp;amp;aqs=chrome..69i57j0i433i512l3j0i131i433i512j0i512l2j0i433i512l2j0i512.7395j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prescience&lt;/strong&gt;(noun): the fact of knowing something in advance; foreknowledge.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYbSGbyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thesaurus.plus/img/synonyms/217/prescience.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYbSGbyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thesaurus.plus/img/synonyms/217/prescience.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=prescience&amp;amp;oq=prescience&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.58208j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;proselytize&lt;/strong&gt;(verb): convert or attempt to convert (someone) from one religion, belief, or opinion to another.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNx6cqjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dailytrojan.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-12.19.00-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNx6cqjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dailytrojan.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-12.19.00-AM.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=proselytize&amp;amp;oq=prosely&amp;amp;aqs=chrome.0.69i59j69i57j0i131i433i512l2j0i433i512l2j0i512j0i433i512j0i512l2.8956j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;advent&lt;/strong&gt;(noun): The time when a big change started or arrived.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97E1Nni0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ourlittleroses.org/wp-content/uploads/2019/12/what-is-advent-season-e1607639233895.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97E1Nni0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ourlittleroses.org/wp-content/uploads/2019/12/what-is-advent-season-e1607639233895.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=advent+meaning&amp;amp;oq=advent+meaning&amp;amp;aqs=chrome.0.69i59j69i57j0i271l3j69i61.5627j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cupidity&lt;/strong&gt;(noun): greed for money or possessions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2Px6W4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/tOQvs1lQ-jo/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2Px6W4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/tOQvs1lQ-jo/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=cupidity+meaning&amp;amp;oq=cupidity&amp;amp;aqs=chrome.0.0i433i512j69i57j0i20i263i512j0i512l7.4174j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>How to convert DoTween to UniTask and wait to complete all sequences.</title>
      <author>KENTO⚽️XR Engineer😎</author>
      <pubDate>Sun, 26 Sep 2021 06:18:58 +0000</pubDate>
      <link>https://dev.to/kento/how-to-convert-dotween-to-unitask-and-wait-to-complete-all-sequences-4n7b</link>
      <guid>https://dev.to/kento/how-to-convert-dotween-to-unitask-and-wait-to-complete-all-sequences-4n7b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I thought that I want to treat as UniTask and wait all of sequences when I use DoTween.&lt;/p&gt;

&lt;p&gt;I write the way down on this article so I won't forget.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#environments"&gt;
  &lt;/a&gt;
  Environments
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unity&lt;/td&gt;
&lt;td&gt;2020.3.4f1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676"&gt;DOTween (HOTween v2)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.2.632&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/Cysharp/UniTask/releases"&gt;UniTask&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;First we’ll import DoTween and UniTask to our unity project.&lt;/p&gt;

&lt;p&gt;Next set &lt;code&gt;UNITASK_DOTWEEN_SUPPORT&lt;/code&gt; on &lt;code&gt;Scripting Define Symbols&lt;/code&gt; and select &lt;code&gt;Apply&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf25Zrtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c89jh2nadbodm01qoi4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf25Zrtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c89jh2nadbodm01qoi4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But under my environment it wasn't applied to change settings for unknown reasons.&lt;/p&gt;

&lt;p&gt;So I opened whatever assembly definition assets in the project, modified them once, and revert them.&lt;/p&gt;

&lt;p&gt;In my case, it worked that way.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Cysharp.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;DG.Tweening&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine.UI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Sample of DoTween which treats as UniTask and wait to finish the task. &lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WaitDoTweenTaskSample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// For task text&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SerializeField&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;_taskTexts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// For completion text&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SerializeField&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;_completeTaskText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Wait to complete task gave to argument.&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;UniTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhenAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;FadeTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCancellationTokenOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="c1"&gt;//When completed, fade in the text.&lt;/span&gt;
        &lt;span class="n"&gt;_completeTaskText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DOFade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2.0f&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Return task list that converted the fade sequences.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="ct"&amp;gt;CancelToken &amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;Task list&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UniTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;FadeTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;taskList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UniTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;taskText&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_taskTexts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;randomValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5.0f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
            &lt;span class="n"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;taskText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DOFade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;randomValue&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;ToUniTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;taskList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;After all of fade sequences completed, a completion text starts fade in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvNHWamZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4kg5mo5e8lz2oozvmo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvNHWamZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4kg5mo5e8lz2oozvmo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://qiita.com/YamadaGames/items/4801ea2f9cd931e0bf69"&gt;UniTaskでDoTweenを使う In 2020/11&lt;/a&gt;&lt;/p&gt;

</description>
      <category>unity3d</category>
      <category>csharp</category>
    </item>
  </channel>
</rss>
