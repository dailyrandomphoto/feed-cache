<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to generate thousands of usernames and halfway decent passwords with Bash💯💯</title>
      <author>Pascal Thormeier</author>
      <pubDate>Mon, 17 May 2021 09:09:59 +0000</pubDate>
      <link>https://dev.to/thormeier/how-to-generate-thousands-of-usernames-and-halfway-decent-passwords-with-bash-43m9</link>
      <guid>https://dev.to/thormeier/how-to-generate-thousands-of-usernames-and-halfway-decent-passwords-with-bash-43m9</guid>
      <description>&lt;p&gt;Have you ever needed, say, an astonishing number of user names and passwords? I recently did and thought to myself: &lt;strong&gt;"I can automate that!"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But, first of all...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-kind-of-user-names-and-passwords-are-we-talking-about"&gt;
  &lt;/a&gt;
  What kind of user names and passwords are we talking about?
&lt;/h1&gt;

&lt;p&gt;Some tools use them a lot, especially for anonymous users: Positive adjectives together with animal names. For example: "Knowledgeable ibex" or... See, it's quite hard to come up with those, especially if English isn't your first language. I was thinking for a good 5 minutes and the ibex was the only example I could come up with. To be fair, I haven't had a coffee yet... I'm getting off topic. Where was I? Anyways, you get the idea: "Positive adjective + animal". Such user names can be used as testing data, anonymous users or basically any use case where a lot of unique user names are necessary.&lt;/p&gt;

&lt;p&gt;The password should ideally be something random, too. 16 characters, including numbers, uppercase and lowercase letters, and some special characters like &lt;code&gt;!._-,;?^$+"*%&amp;amp;/()=&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-the-data"&gt;
  &lt;/a&gt;
  Getting the data
&lt;/h1&gt;

&lt;p&gt;So, let's first gather some data. I need animals and positive adjectives. I found a pretty large list of animals over at &lt;a href="https://a-z-animals.com/animals/"&gt;a-z-animals.com&lt;/a&gt; and a large list of positive adjectives at &lt;a href="https://grammar.yourdictionary.com/parts-of-speech/adjectives/list-of-positive-adjectives.html"&gt;grammar.yourdictionary.com&lt;/a&gt;. Perfect. I create two lists, separated by newlines and put them in two files, namely &lt;code&gt;animals.txt&lt;/code&gt; and &lt;code&gt;adjectives.txt&lt;/code&gt;. So far so good, that's all the data I need, the rest is done with Bash.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mapping-a-file-using-raw-mapfile-endraw-"&gt;
  &lt;/a&gt;
  Mapping a file using &lt;code&gt;mapfile&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Since Bash 4.0 there's a neat command called &lt;a href="https://ss64.com/bash/mapfile.html"&gt;&lt;code&gt;mapfile&lt;/code&gt;&lt;/a&gt; that reads a file line by line and creates an array out of it. I use this to read out all adjectives and animals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;mapfile &lt;/span&gt;ADJECTIVES &amp;lt; ./adjectives.txt
&lt;span class="nb"&gt;mapfile &lt;/span&gt;ANIMALS &amp;lt; ./animals.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#generating-the-usernames"&gt;
  &lt;/a&gt;
  Generating the usernames
&lt;/h1&gt;

&lt;p&gt;To generate a large number of user names, I could now randomly select one of each and concatenate them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;mapfile &lt;/span&gt;ADJECTIVES &amp;lt; ./adjectives.txt
&lt;span class="nb"&gt;mapfile &lt;/span&gt;ANIMALS &amp;lt; ./animals.txt

&lt;span class="nv"&gt;RANDOM_ADJECTIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;RANDOM_ANIMAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using &lt;code&gt;$RANDOM&lt;/code&gt; here to generate a random number. This random number mod the size of the list guarantees to create a random number that is one of the array indices of that list. with &lt;code&gt;${LIST[...]}&lt;/code&gt; I then get the randomly chosen element.&lt;/p&gt;

&lt;p&gt;Next, I concatenate them and massage the string a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nv"&gt;RANDOM_ADJECTIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;RANDOM_ANIMAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Concat&lt;/span&gt;
&lt;span class="nv"&gt;ADJECTIVE_ANIMAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$RANDOM_ADJECTIVE&lt;/span&gt;-&lt;span class="nv"&gt;$RANDOM_ANIMAL&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Make it machine readable&lt;/span&gt;
&lt;span class="nv"&gt;MACHINEREADABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ADJECTIVE_ANIMAL&lt;/span&gt; | iconv &lt;span class="nt"&gt;-t&lt;/span&gt; ascii//TRANSLIT | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; s/[^a-zA-Z0-9]+/-/g | &lt;span class="nb"&gt;tr &lt;/span&gt;A-Z a-z&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, all characters that are not ASCII are transliterated as such using &lt;code&gt;iconv&lt;/code&gt;, for example &lt;code&gt;äàá&lt;/code&gt; should all become &lt;code&gt;a&lt;/code&gt;. Then I replace all non-alphanumeric characters with &lt;code&gt;-&lt;/code&gt; using &lt;code&gt;sed -r&lt;/code&gt;. In the last step, I transform the string to lower case using &lt;code&gt;tr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This now produces things like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fantastic-poodle
giving-dalmadoodle
glowing-sheepadoodle
focused-pointer
articulate-fly
glittering-stag-beetle
articulate-leopard-frog
unique-estrela-mountain-dog
excellent-russell-terrier
splendid-echidna
brilliant-italian-greyhound
magnificent-barnacle
polite-saint-bernard
glittering-eastern-bluebird
imaginative-manta-ray
willing-doberman-pinscher
faithful-drever
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gotta love the &lt;code&gt;fantastic poodle&lt;/code&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generating-the-password"&gt;
  &lt;/a&gt;
  Generating the password
&lt;/h1&gt;

&lt;p&gt;Now for the fun part: Generating a decent password. I rely on the OS here by using &lt;code&gt;/dev/urandom&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-cd&lt;/span&gt; &lt;span class="s1"&gt;'[:graph:]'&lt;/span&gt; | &lt;span class="nb"&gt;fold&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 24 | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 1&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So a random bit string is read from &lt;code&gt;/dev/urandom&lt;/code&gt;, which is then transformed into a string containing all printable characters (using &lt;code&gt;[:graph:]&lt;/code&gt;). The string is then folded into words with 24 characters length. The first one of these words is then selected with &lt;code&gt;head -n 1&lt;/code&gt;. This produces passwords like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Lb6UR+-iF5xj5`q}g1t(d3Dn
W]Aai"t,&amp;lt;H:)M[QV$lJi~H.%
V~2=Jq2InaGAU^Y\Uzx^9500
+XuY\[7-]g&amp;lt;[FyYKpE+"G[r7
=LYmTQ$D"}MN5]wC{$;ySE.}
jsE:y+A)NV{0CHvO-D)wazx*
2TB1~~Q~8d&amp;lt;_'Zj)ED$1yQ8\
!=bV.w0ko0F/Y"98M`ZzS1'%
IVmd4XfNR3'iffVUuwJ"[_IT
CR,Iq`},c5X7JdFfF7b@bi3!
:{y%'0%M~ys1lhR=$d,xNE"%
D*0AJikOKcBUo&amp;amp;6hku]g&amp;lt;(ZC
fQK'%R8("+*/o;.Vfd&amp;lt;7;/"W
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks pretty secure to me. Let's test &lt;code&gt;=LYmTQ$D"}MN5]wC{$;ySE.}&lt;/code&gt; with some "password security testing tools" that a popular search engine is suggesting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53HqlHYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkm543hw9ihij0guj8jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53HqlHYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkm543hw9ihij0guj8jh.png" alt="Password strength checker number 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJeTFwEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rke1vz4ue0sr9ut93jz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJeTFwEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rke1vz4ue0sr9ut93jz0.png" alt="Password strength checker number 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9nN8bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swakq5rrl3wifs96s0q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9nN8bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swakq5rrl3wifs96s0q7.png" alt="Password strength checker number 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, those numbers are dizzying, but differ widely. Here's a checker that actually tells you how they calculate the strength of a password:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhbT_Y5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqeglocvi25zanu63dmv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhbT_Y5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqeglocvi25zanu63dmv.png" alt="A verbose password strength checker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sounds good to me. For a one time login/password, that should be more than enough.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-final-script"&gt;
  &lt;/a&gt;
  The final script
&lt;/h1&gt;

&lt;p&gt;I also added a loop around the thing to generate multiple usernames and passwords.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;mapfile &lt;/span&gt;ANIMALS &amp;lt; ./animals.txt
&lt;span class="nb"&gt;mapfile &lt;/span&gt;ADJECTIVES &amp;lt; ./adjectives.txt

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="p"&gt;;&lt;/span&gt; N&amp;lt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; N++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nv"&gt;RANDOM_ADJECTIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ADJECTIVES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;RANDOM_ANIMAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="p"&gt; % &lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;ANIMALS&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt; ]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;ADJECTIVE_ANIMAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$RANDOM_ADJECTIVE&lt;/span&gt;-&lt;span class="nv"&gt;$RANDOM_ANIMAL&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;MACHINEREADABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ADJECTIVE_ANIMAL&lt;/span&gt; | iconv &lt;span class="nt"&gt;-t&lt;/span&gt; ascii//TRANSLIT | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; s/[^a-zA-Z0-9]+/-/g | &lt;span class="nb"&gt;tr &lt;/span&gt;A-Z a-z&lt;span class="si"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-cd&lt;/span&gt; &lt;span class="s1"&gt;'[:graph:]'&lt;/span&gt; | &lt;span class="nb"&gt;fold&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 24 | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 1&lt;span class="si"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$MACHINEREADABLE&lt;/span&gt; &lt;span class="nv"&gt;$PASSWORD&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter of the script now determines the number of user name/password pairs generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@dir $ ./create-users.sh 10
amazing-carp ACytS~_(Z+|&amp;lt;4fi}V&amp;lt;Mjy*g~
splendid-glen-of-imaal-terrier \#AK@]m[7R*&amp;gt;hzuOO^%r1ZY@
capable-blue-lacy-dog ?;CnSkJW's.&amp;lt;|PN:wQDOikI/
considerate-eastern-lowland-gorilla zQxT`]miaE4m$*W`Z8tpa@N5
powerful-puffin Kh=SUqh&amp;lt;no18.[A$Fea+LLXg
philosophical-bernese-shepherd 1h),NV(hi&amp;lt;vG)~{A]x^2I?bH
hardworking-american-foxhound \pbzUC~*~VLk}$wy6dHWFcw(
amazing-canadian-eskimo-dog -x{8PIwiI$/NcZ5#}'$Wlod-
responsible-umbrellabird eDzW\1H/U/(L_fHS^(U&amp;amp;:ltd
agreeable-termite |Kcgx-go&amp;gt;$7`:}nn7-\P&amp;amp;"}b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Amazing! Only need to copy/paste that now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whats your favorite positive-adjective + animal username you could generate? Leave a comment!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ❤️ &lt;em&gt;or a&lt;/em&gt; 🦄&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ☕&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; 🐦&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>File Upload With Multer Node.js ad Express</title>
      <author>Joel Ndoh</author>
      <pubDate>Mon, 17 May 2021 09:09:55 +0000</pubDate>
      <link>https://dev.to/ndohjapan/file-upload-with-multer-node-js-ad-express-f1e</link>
      <guid>https://dev.to/ndohjapan/file-upload-with-multer-node-js-ad-express-f1e</guid>
      <description>&lt;p&gt;Handling file input from client in the server is a very important part of both web and software development. Ranging from handling profile images of your users to handling pdf documents containing any important info about your users.&lt;/p&gt;

&lt;p&gt;For long, anytime a project got to the stage of receiving files from the client side, I saw it as strange. &lt;/p&gt;

&lt;p&gt;I tried avoiding it but I found out it was something I could not just run away from as a web developer.&lt;/p&gt;

&lt;p&gt;In the post I showed everything you must know about file upload  in Node.js.&lt;/p&gt;

&lt;p&gt;By the end of this post you should know how to upload files from the client side, receive it properly and work with the file in your Node.js server. Won't that be great 🤗🤗&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-uploading-files"&gt;
  &lt;/a&gt;
  Steps To Uploading Files
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create your Node.js project folder&lt;/li&gt;
&lt;li&gt;Install necessary modules&lt;/li&gt;
&lt;li&gt;Create a simple Node.js server with Express&lt;/li&gt;
&lt;li&gt;Create Html file which client will use in uploading files&lt;/li&gt;
&lt;li&gt;Serve Html file from the Node.js server to the client&lt;/li&gt;
&lt;li&gt;Create Route for receiving the files&lt;/li&gt;
&lt;li&gt;Create location for storing files in server and setting restrictions to these files using multer&lt;/li&gt;
&lt;li&gt;Pass the received file to Multer from the route created in step 6 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each step will is explained below&lt;/p&gt;

&lt;p&gt;I will be writing the codes in snippets and at the end of the post you will see the whole code in one place 😎😎. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is expected that you have node installed on your computer and it is up and running else  &lt;a href="https://www.guru99.com/download-install-node-js.html"&gt;click here&lt;/a&gt; and when you are done you can continue with the post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should have had basic knowledge of express. How to create a route for any request method (GET, POST, PUT, DELETE)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you met the above requirements, let's jump right in and rock 🥳🥳.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-your-nodejs-project-folder"&gt;
  &lt;/a&gt;
  1. Creating Your Node.js Project Folder
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ Before we start, I want you know that every file are made up of bytes and its only the extension name that determines how the computer reads these files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So create a folder and name it "upload"&lt;/p&gt;

&lt;p&gt;Go to the directory of the folder in you terminal and type the following command in order to create a node project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;MINGW64&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/Desktop/u&lt;/span&gt;&lt;span class="nx"&gt;pload&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a node.js project with a file "package.json" in the folder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-installing-necessary-modules"&gt;
  &lt;/a&gt;
  2. Installing Necessary Modules
&lt;/h3&gt;

&lt;p&gt;We will use Node Package Manager (npm) to install the 2 modules we will be using for the simple project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multer&lt;/li&gt;
&lt;li&gt;express&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In your command line, install the above modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the modules to the node modules folder in your project directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creating-simple-nodejs-server-with-express"&gt;
  &lt;/a&gt;
  3. Creating Simple Node.js Server with Express
&lt;/h3&gt;

&lt;p&gt;Create a file in the directory with name as "app.js"&lt;/p&gt;

&lt;p&gt;In the file type or paste the below code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Include the express module into the poject for creating the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Include the multer module into the project for accepting files&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Include the path module (It is built-in and so need to install)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Path module will be used to get extension name of every file entering the server&lt;/span&gt;

&lt;span class="c1"&gt;// We will set the object received from the express() function to a variable "app"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Set a port on which the server will run on&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="c1"&gt;// Create the server and let it run on the port 3000&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the server code from the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Run the server form the terminal&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="c1"&gt;// Server is running on port 3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From your browser,  make a request to the server using localhost:3000. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVADmHrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxfzokdr3wmmui6zzrba.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVADmHrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxfzokdr3wmmui6zzrba.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that our server is up and running but do not have any route to receive any request I make to the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-simple-html-for-sending-files-to-the-server"&gt;
  &lt;/a&gt;
  4. Create Simple HTML for sending files to the server
&lt;/h3&gt;

&lt;p&gt;The next thing to do, will be to create an HTML file through which users can send files to your Node.js server.&lt;/p&gt;

&lt;p&gt;In the same directory, create a folder named "public" and in the folder create a file named "index.html"&lt;/p&gt;

&lt;p&gt;Paste the HTML text below into the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;File Upload&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;File Upload&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--Create a form to send the file to a route  "upload"--&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--Set the request method to POST--&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--Set the encytype to "multipart/form-data" in order to send files and not just text--&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"file-field input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn grey"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"myImage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the file, the next question should be "How will you show the users this HTML file for them to insert their files?" 🤷‍♂️🤷‍♂️.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-serve-the-html-file-from-the-server-once-a-request-is-made"&gt;
  &lt;/a&gt;
  5. Serve the HTML file From The Server Once A Request Is Made
&lt;/h3&gt;

&lt;p&gt;At the top of  your code in "app.js", insert the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// Server will render the html file in the public folder which is index.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above line of code will tell express to serve anything to the client from the "public" folder&lt;/p&gt;

&lt;p&gt;In your terminal restart the app by press "Ctrl+C"  for windows and "Cmd+C" on Mac and typing in &lt;code&gt;node app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now make a request from your browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bE-Avp2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txhbg1wl82gslddxaodb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bE-Avp2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txhbg1wl82gslddxaodb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the html file rendered 🥳🥳&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-create-route-for-receiving-files-from-the-user"&gt;
  &lt;/a&gt;
  6. Create Route For Receiving Files From The User
&lt;/h3&gt;

&lt;p&gt;Now that the user can upload files from the browser, we will have to create a route to recieve these files in the server.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;app.js&lt;/code&gt; , add the &lt;code&gt;POST&lt;/code&gt; route to receive the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is the response sent to the user in the browser once the file recieved&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you send a file from the browser to the server, you will see a response of "Hello World"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pfl_BNlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74iygfzzzccvsnxqv48.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pfl_BNlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74iygfzzzccvsnxqv48.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
And now that the user is getting a response, the next thing to do will be to handle these files in our server.&lt;/p&gt;

&lt;p&gt;We will stores the files and even validate them 😎😎.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-create-location-for-storing-these-files-with-multer"&gt;
  &lt;/a&gt;
  7. Create Location For Storing These Files With Multer
&lt;/h3&gt;

&lt;p&gt;Here I will show you how to set restrictions to the type of file coming into your server . &lt;/p&gt;

&lt;p&gt;I guess as developer, you wouldn't want to receive pdfs into your server when you need images or would you ? 🤷‍♂️🤷‍♂️.&lt;/p&gt;

&lt;p&gt;However, with the multer object we will create a location for storing the files.&lt;/p&gt;

&lt;p&gt;The multer object has 3 main options passed to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;storage and dest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileFilter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;limits&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#storage-and-dest"&gt;
  &lt;/a&gt;
  Storage and dest
&lt;/h3&gt;

&lt;p&gt;They are used to set the storage location for the file in your server but &lt;code&gt;storage&lt;/code&gt; gives you more options. e.g to reset the name of the file in the server. &lt;/p&gt;

&lt;p&gt;while &lt;code&gt;dest&lt;/code&gt; just sets the location for storing the file and nothing else. &lt;/p&gt;

&lt;p&gt;In this I will be using &lt;code&gt;storage&lt;/code&gt; .&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#filefilter"&gt;
  &lt;/a&gt;
  fileFilter
&lt;/h3&gt;

&lt;p&gt;This is used to control file type coming into the server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ Never trust file input from clients and so you must always validate the type of file to avoid people injecting codes into your server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#limits"&gt;
  &lt;/a&gt;
  limits
&lt;/h3&gt;

&lt;p&gt;It is used to set limit to either number of files, file size or any other property of files coming into the server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read through the lines of code and paste at the top section of your code in "app.js"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diskstorage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/upload/images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Storage location&lt;/span&gt;
        &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// return a unique file name for every file              &lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;

    &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fileSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// This limits file size to 2 million bytes(2mb)&lt;/span&gt;

    &lt;span class="na"&gt;fileFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validFileTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/jpg|jpeg|png/&lt;/span&gt; &lt;span class="c1"&gt;// Create regex to match jpg and png&lt;/span&gt;

        &lt;span class="c1"&gt;// Do the regex match to check if file extenxion match&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;validFileTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;// Return true and file is saved&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Return error message if file extension does not match&lt;/span&gt;
             &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error: Images Only!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of the code, I set the storage location to a folder "upload/images" which is in the public folder and I set the file size limit to 20000000 bytes (2mb).&lt;/p&gt;

&lt;p&gt;And right at the bottom of the code I did a regex match (I will publish a post on regex very soon) to ensure that all files coming in had an extension of either "png", "jpg" or "jpeg".&lt;/p&gt;

&lt;p&gt;Once all these are in place, the next we will do will be to pass these files into this variable "upload". "upload" is like an instance of multer class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-pass-the-received-file-to-multer-from-the-route-created-in-step-6"&gt;
  &lt;/a&gt;
  8. Pass the received file to Multer from the route created in step 6
&lt;/h3&gt;

&lt;p&gt;At the route where the &lt;code&gt;POST&lt;/code&gt;  request is made, add the &lt;code&gt;update&lt;/code&gt; variable and pass users request into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is the response sent to the user in the browser once the file recieved&lt;/span&gt;
    &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// This will display the error message to the user&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File Uploaded Successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// This shows the file has beem successfully uploaded&lt;/span&gt;
        &lt;span class="c1"&gt;// The image will be found in the public folder&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above code when you send image files from the browser to the server, they are stored in the set location "upload/images" else the &lt;code&gt;err&lt;/code&gt; message is displayed on the browser.&lt;/p&gt;

&lt;p&gt;And finally we have come to the end 🥳🥳&lt;/p&gt;

&lt;p&gt;Full code for "app.js"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Include the express module into the poject for creating the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Include the multer module into the project for accepting files&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Include the path module to extract file extension from every file entering the server.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// We will set the object received from the express() function to a variable "app"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Set a port on which the server will run on&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diskstorage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/upload/images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Storage location&lt;/span&gt;
                &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                        &lt;span class="c1"&gt;// return a unique file name for every file             &lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fileSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// This limits file size to 2 million bytes(2mb)    fileFilter: &lt;/span&gt;
    &lt;span class="na"&gt;fileFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create regex to match jpg and png&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validFileTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/jpg|jpeg|png/&lt;/span&gt;

        &lt;span class="c1"&gt;// Do the regex match to check if file extenxion match&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mimetype&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="c1"&gt;// Return true and file is saved&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Return error message if file extension does not match&lt;/span&gt;
        &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error: Images Only!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is the response sent to the user in the browser once the file recieved&lt;/span&gt;
    &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// This will display the error message to the user&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File Uploaded Successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// This shows the file has beem successfully uploaded&lt;/span&gt;
        &lt;span class="c1"&gt;// The image will be found in the public folder&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Create the server and let it run on the port 3001&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that's it! I have certainly learnt a lot from writing this down. I will be happy to answer questions in the comments 🤗🤗. &lt;/p&gt;

&lt;p&gt;My next post will be how we can store these files into our database (MongoDB) instead of our server system to avoid over loading it. &lt;/p&gt;

&lt;p&gt;Don't forget to like and share if you enjoyed and learnt something new from the post 🤗🤗.&lt;/p&gt;

</description>
      <category>node</category>
      <category>expressjs</category>
      <category>multer</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Asynchronous Javascript</title>
      <author>Ayush Saini</author>
      <pubDate>Mon, 17 May 2021 08:58:39 +0000</pubDate>
      <link>https://dev.to/ayushcodes/asynchronous-javascript-4a2</link>
      <guid>https://dev.to/ayushcodes/asynchronous-javascript-4a2</guid>
      <description>&lt;p&gt;🎉 Brief Overview of what you will learn in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is asynchronicity in Javascript?&lt;/li&gt;
&lt;li&gt;How javascript code is executed under the hood?&lt;/li&gt;
&lt;li&gt;Introduction to Web APIs like &lt;code&gt;setTimeout&lt;/code&gt; and how they work&lt;/li&gt;
&lt;li&gt;Basics of Event Loop, Call Stack, and Callback Queue.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The word &lt;em&gt;asynchronous&lt;/em&gt; generally refers to two or more events &lt;strong&gt;not&lt;/strong&gt; happening at the same time. It means a task-A can be done while waiting for another task-B to be done. Let's me show you what that means by an example:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-scenario-to-understand-asynchronous-tasks"&gt;
  &lt;/a&gt;
  🍔 A Scenario to understand asynchronous tasks:
&lt;/h3&gt;

&lt;p&gt;Suppose you go out to a burger king restaurant and ordered a cheeseburger but the restaurant was quite busy that day therefore the staff noted your order and told you that it will take some time to process your order and will notify you when it's done. Now you see a soft drink machine and purchased a coke while your burger order was still processing. This is a simple example of an asynchronous event in which while you were waiting for your order to process, you continued with another task of buying coke, instead of scheduling the task of buying coke after you got your burger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronicity-in-javascript"&gt;
  &lt;/a&gt;
  Asynchronicity in Javascript
&lt;/h2&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getDataAndWait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// it could take any amount of time&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine if there is a function &lt;code&gt;getDataAndWait()&lt;/code&gt; which gets the data from a remote source and returns it. Here, the code after line 3 would not run until the &lt;code&gt;getDataAndWait&lt;/code&gt; function returns something and therefore it prevents the execution of further code. This is because javascript is actually a synchronous language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronous-wha"&gt;
  &lt;/a&gt;
  🤷‍♂️ Synchronous... Wha???
&lt;/h3&gt;

&lt;p&gt;Javascript is synchronous (each line is executed in order the code appears) and single-threaded Language (one command executing at a time). Although it's synchronous in nature, we would still want to perform some tasks asynchronously like waiting for data to come from an API server or perhaps waiting for a timer to finish but we also do not want to block the rest of the code from executing while we are waiting. This is why we need to figure out a way to use asynchronicity in a language that is synchronous.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-what-our-end-goals-are"&gt;
  &lt;/a&gt;
  ✅ Defining what our end goals are
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We would like to be able to do a task that takes some time to complete, like fetching data from an API&lt;/li&gt;
&lt;li&gt;We would want to simultaneously execute the rest of the code line by line while waiting for a response from a long time taking task&lt;/li&gt;
&lt;li&gt;When that time-consuming task completes, we would want to be able to know that the task and its functionality are done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Earlier I said that we need a way to use asynchronicity in javascript. But javascript is synchronous, right. So how can we do that? The answer is we don't need to because that is where Web APIs come into play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-apis-amp-amazing-features-of-a-browser"&gt;
  &lt;/a&gt;
  🌈 Web APIs &amp;amp; amazing features of a browser
&lt;/h2&gt;

&lt;p&gt;The browser you are using right now is actually quite powerful in the way that it can perform various tasks that javascript cannot. It has amazing tools like a timer, local storage, indexedDB, getting a client's geolocation, interacting with the DOM elements, fetching data from the internet, and so on. For example, the function &lt;code&gt;setTimeout&lt;/code&gt; is actually a web API and not part of the javascript language itself. The &lt;code&gt;console&lt;/code&gt; is another example of web API, 😲 surprising isn't it?&lt;br&gt;
The web browser exposes the web API like &lt;code&gt;console&lt;/code&gt; which can be accessed from any global object. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-solution"&gt;
  &lt;/a&gt;
  A Solution:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's dive a little deep into the execution of the code line by line. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-summary-of-how-code-is-executed-under-the-hood"&gt;
  &lt;/a&gt;
  Brief summary of how code is executed under the hood
&lt;/h3&gt;

&lt;p&gt;Everything in Javascript happens inside the &lt;strong&gt;Execution Context&lt;/strong&gt;. Whenever a program is run, a global execution context is created inside the &lt;strong&gt;Call Stack&lt;/strong&gt; and when the program is done executing, the global execution context is popped off the call stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When line 1 is executed since you know that &lt;code&gt;console&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; are not part of javascript but actually features of Browser. The &lt;code&gt;console.log()&lt;/code&gt; will use the &lt;code&gt;console&lt;/code&gt; API of the browser and log the string &lt;code&gt;start&lt;/code&gt; into the console window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxJ0w3gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgxralrfkjuzptdmo20a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxJ0w3gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgxralrfkjuzptdmo20a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now on line 3, &lt;code&gt;setTimeout()&lt;/code&gt; will use the timer feature and activate the time for 1000 milliseconds and register the &lt;code&gt;cb()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtkiwMbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d7q35oxp5o4mp8lnc3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtkiwMbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d7q35oxp5o4mp8lnc3a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now control moves over the next line of code and logs &lt;code&gt;end&lt;/code&gt; to the console window. Since there is no code left, the program is executed and the global execution context is popped off the Call Stack. The synchronous Javascript code is done now. But wait, what about the function &lt;code&gt;cb&lt;/code&gt; because after that 1000 ms timer expires, the &lt;code&gt;cb&lt;/code&gt; function needs to be executed, but that doesn't happen directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_5CzLU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol88kg5e650dkpv78lec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_5CzLU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol88kg5e650dkpv78lec.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#event-loop-amp-callback-queue"&gt;
  &lt;/a&gt;
  Event Loop &amp;amp; Callback Queue
&lt;/h3&gt;

&lt;p&gt;As soon as the timer expires, the function &lt;code&gt;cb&lt;/code&gt; is moved inside the &lt;strong&gt;Callback Queue&lt;/strong&gt; which is a &lt;em&gt;queue&lt;/em&gt; having code that is waiting to be pushed inside the Call Stack. But when is this function allowed to go in? Something that continuously loops and checks if the call stack is empty or not. If there's some code waiting to be executed in the Callback Queue, it quickly pushes it into the Call Stack and then the code is executed. That something is known as &lt;strong&gt;Event Loop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvzlYVvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4xxxlvbhms07l3egn8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvzlYVvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4xxxlvbhms07l3egn8k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hence, the &lt;code&gt;cb&lt;/code&gt; is executed and it logs the word &lt;code&gt;hello&lt;/code&gt; on the browser console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K01qrKjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm6q0eucpq175s8pz5zv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K01qrKjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm6q0eucpq175s8pz5zv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//This is the output of the code&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look like we have got what we wanted. The &lt;code&gt;cb&lt;/code&gt; function is executed after some time without blocking the execution of the rest of the code. But there are some drawbacks with this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main task of &lt;code&gt;cb&lt;/code&gt; was to log &lt;code&gt;hello&lt;/code&gt; into the browser console window, but that is available in the callback function. This doesn't sound much of a problem because the example was very short. But in a real-world application, the asynchronous code often ends up with a callback inside another callback and so on. This is known as Callback Hell.&lt;/li&gt;
&lt;li&gt;Passing a function into another function might feel a bit odd just to execute it after some time.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;👋 That all for this article, I don't want to bore you people so, in the next article, we will look at another solution to write asynchronous code through promises. If there's something you would like to talk about you can ask me in the comments or, you can directly reach out to me on Twitter &lt;a href="https://twitter.com/AyushCodes"&gt;@AyushCodes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  📖 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"&gt;MDN Asynchronous Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/javascript-new-hard-parts"&gt;Javascript: The New Hard Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8zKuNo4ay8E&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;amp;index=17"&gt;Namaste Javascript: Episode No. 15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>web</category>
      <category>api</category>
      <category>asynchronous</category>
    </item>
    <item>
      <title>Client-Side Rendering vs Server-Side Rendering vs Static-Site Generator</title>
      <author>Bibek</author>
      <pubDate>Mon, 17 May 2021 08:48:59 +0000</pubDate>
      <link>https://dev.to/bibekkakati/client-side-rendering-vs-server-side-rendering-vs-static-site-generator-447n</link>
      <guid>https://dev.to/bibekkakati/client-side-rendering-vs-server-side-rendering-vs-static-site-generator-447n</guid>
      <description>&lt;p&gt;Hello everyone👋&lt;/p&gt;

&lt;p&gt;Technology has evolved in different ways and in the same way the concepts of building products or tools. Frontend web development is one of the domains which is changing rapidly with the growing community and requirements of faster development. Many libraries and frameworks have been introduced to the developers starting from jquery to react, angular etc. Every technology, concept, library and framework have its own pros and cons but they know how to stand out as per the requirement.&lt;/p&gt;

&lt;p&gt;In this article, I am going to discuss different methods of creating frontend sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#topics"&gt;
  &lt;/a&gt;
  Topics
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Vanilla HTML Websites&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Client-Side Rendering&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Server-Side Rendering&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Static-Site Generator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vanilla-html-websites"&gt;
  &lt;/a&gt;
  Vanilla HTML Websites
&lt;/h3&gt;

&lt;p&gt;Vanilla HTML or Static Websites are the raw form of websites that we build using &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;. They are directly served from a web host or CDN.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yFnwhbrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621176481419/sVusuh4Lb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFnwhbrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621176481419/sVusuh4Lb.jpeg" alt="Static Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It is easy to get started with.&lt;/li&gt;
&lt;li&gt;Generally, not so complex.&lt;/li&gt;
&lt;li&gt;SEO optimization can be done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Less modularity; Hard to update/maintain pages as we need to rewrite a lot of the same code for every page.&lt;/li&gt;
&lt;li&gt;New request to the server for every page.&lt;/li&gt;
&lt;li&gt;Generally, do not contain dynamic data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#clientside-rendering"&gt;
  &lt;/a&gt;
  Client-Side Rendering
&lt;/h3&gt;

&lt;p&gt;You may have heard this term many times, it is also known as CSR in short. So what happens in Client-Side Rendering?&lt;/p&gt;

&lt;p&gt;When we build a site with React, Angular or Vue, it creates a SPA (Single Page Application) that doesn't have any pre-rendered &lt;code&gt;HTML&lt;/code&gt; pages. When the browser requests the server for the site, the initial request is for a blank HTML page and then it fetches the JS scripts that manipulate the DOM and render the pages. Routing, data handling etc., are also done within the browser itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ES63I5VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621177704707/CzL1inkZ7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ES63I5VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621177704707/CzL1inkZ7.png" alt="Client Side Rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy to maintain codebase.&lt;/li&gt;
&lt;li&gt;Modular approach.&lt;/li&gt;
&lt;li&gt;It's fast except for the initial request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It is not SEO friendly.&lt;/li&gt;
&lt;li&gt;It can become complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;React.js&lt;/code&gt;, &lt;code&gt;Angular&lt;/code&gt;, &lt;code&gt;Vue&lt;/code&gt; can be used to build SPAs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can optimize these kinds of sites with Server-Side Rendering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering"&gt;
  &lt;/a&gt;
  Server-Side Rendering
&lt;/h3&gt;

&lt;p&gt;In Server-Side Rendering, the pages are rendered on the server on every request for it. The server aggregates the data from its source like a database and fed it to the templates to render the requested HTML pages. And rendered pages are then sent back to the browser, to display to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2yVVnFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621178361766/o92jvSxda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2yVVnFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621178361766/o92jvSxda.png" alt="Server Side Rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy to maintain codebase.&lt;/li&gt;
&lt;li&gt;Modular approach.&lt;/li&gt;
&lt;li&gt;SEO friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Network latency can impact.&lt;/li&gt;
&lt;li&gt;New request for every page.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Next.js&lt;/code&gt; for React and &lt;code&gt;Nuxt.js&lt;/code&gt; for Vue can be used for Server-Side Rendering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a hybrid approach to get benefits of both CSR and SSR which we will be discussing next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#staticsite-generator"&gt;
  &lt;/a&gt;
  Static-Site Generator
&lt;/h3&gt;

&lt;p&gt;In Static-Site Generator, the static pages are compiled at the build-time i.e, before deployment with some initial data. The static pages are then deployed to a web server. After the initial request, the site behaves more like a Single-Page Application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46fkW4p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621179375849/uDbKkaMo5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46fkW4p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621179375849/uDbKkaMo5.png" alt="Static Site Generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy to maintain codebase.&lt;/li&gt;
&lt;li&gt;Modular approach.&lt;/li&gt;
&lt;li&gt;SEO friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It can become complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Gatsby.js&lt;/code&gt; with React can be used for Static-Site Generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There is no hard and fast rule on which one you should use. It depends on your application and its usage.&lt;/p&gt;

&lt;p&gt;In my opinion, Client-Side Rendering is suited for applications where users will stay for a longer time and will interact often and want a user experience similar to a desktop application. For example, a trading platform.&lt;/p&gt;

&lt;p&gt;Server-Side Rendering is good for applications like @&lt;a href="https://dev.to@hashnode"&gt;Hashnode&lt;/a&gt;, a blogging platform.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/types-of-frontend-websites"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>angular</category>
      <category>vue</category>
    </item>
    <item>
      <title>3 ways to clone an object in Javascript</title>
      <author>Nithish Kumar</author>
      <pubDate>Mon, 17 May 2021 08:38:10 +0000</pubDate>
      <link>https://dev.to/nithish_13/3-ways-to-clone-an-object-in-javascript-5gml</link>
      <guid>https://dev.to/nithish_13/3-ways-to-clone-an-object-in-javascript-5gml</guid>
      <description>&lt;p&gt;Before proceeding, let me explain very briefly about Primitive and Reference types in Javascript. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#primitive-and-reference-type"&gt;
  &lt;/a&gt;
  Primitive and Reference type
&lt;/h1&gt;

&lt;p&gt;Javascript has 5 data types that can contain values. &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. These are referred to as &lt;strong&gt;primitive&lt;/strong&gt; data types. Basically these are passed by value.&lt;br&gt;
Javascript has 3 data types that are passed by reference. &lt;code&gt;Object&lt;/code&gt;,&lt;code&gt;Functions&lt;/code&gt; and  &lt;code&gt;Arrays&lt;/code&gt;. Technically,  these are all objects and called as &lt;strong&gt;reference&lt;/strong&gt; data types&lt;br&gt;
Primitive data types are immutable, which means their value cannot be modified once created.&lt;br&gt;
Whereas, objects and arrays are mutable , meaning their value can be altered after creation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consider-the-following-examples"&gt;
  &lt;/a&gt;
  Consider the following examples.
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Let us start by copying/cloning a string&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello everyone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message1&lt;/span&gt;
&lt;span class="nx"&gt;message2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'hello everyone' ✅&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'hello world' ✅&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for so good,, everything is working as expected .&lt;br&gt;
&lt;em&gt;Let us implement the same logic for &lt;code&gt;object&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj1&lt;/span&gt;
&lt;span class="nx"&gt;myObj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{name: 'Michael', age: 34} 😲 -&amp;gt; why does the original object `myObj2` got affected ?&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{name: 'Michael', age: 34} ✅&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤔🤔&lt;br&gt;
That's because objects are reference type(passed by reference). So, when you use '=', the pointer to the memory address of &lt;code&gt;myObj1&lt;/code&gt; is copied to &lt;code&gt;myObj2&lt;/code&gt;. Not the actual value is copied. Since, reference type don't hold values, they are pointer to the value in memory space.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-how-do-you-clone-an-object"&gt;
  &lt;/a&gt;
  So,, how do you clone an object?
&lt;/h2&gt;

&lt;p&gt;We can use variety of techniques such as the spread operator(...) or Object.assign() or with JSON.parse() and JSON.stringify().&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-using-spread-"&gt;
  &lt;/a&gt;
  1. Using spread (...)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;myObj1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;myObj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {name: "John Doe", age: 34} ✅ Original object `myObj1` is not changed&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {name: "Michael", age: 34} ✅&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-using-objectassign"&gt;
  &lt;/a&gt;
  2. Using Object.assign()
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;pen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pencil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {pen: 23, pencil: 45} ✅ Original object `item1` is not changed&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {pen: 100, pencil: 45} ✅&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both of the above techniques only does a shallow copy(only the outer part). If you want to perform a deep copy(nested part), there are a few approaches to this problem. The simple technique is by using our well known friend &lt;code&gt;JSON.parse()&lt;/code&gt; and &lt;code&gt;JSON.stringify()&lt;/code&gt;. But, it is not recommended to do deep copy using this technique, instead , you can use libraries such&lt;br&gt;
as lodash, which is easy to implement and also robust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#3-using-json-not-recommended"&gt;
  &lt;/a&gt;
  3. Using JSON (Not Recommended)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {a: 1,b: 2,c: {d: 3}} ✅&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {a: 1,b: 2,c: {d: 45}} ✅&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you try to do the above example with spread or &lt;code&gt;Object.assign()&lt;/code&gt;,it only modifies &lt;br&gt;
the outer part(shallow). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shallowObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;shallowObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="nx"&gt;shallowObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shallowObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{a: 1,b: 20,c: {d: 30}} 😎&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{a: 1,b: 2,c: {d: 30}}  🤯 -&amp;gt; Notice that only `b` value is not modified from the original `obj`, whereas, `d` value is modified&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;A shallow copy means the first level is copied, deeper levels are referenced.&lt;/strong&gt;&lt;br&gt;
This is where, shallow and deep copy plays an important role.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post 🙌🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  👉 Additional Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN Web Docs:Object.assign()&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"&gt;MDN Web Docs:JSON.parse()&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;MDN Web Docs:JSON.stringify()&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/@manjuladube/understanding-deep-and-shallow-copy-in-javascript-13438bad941c"&gt;Shallow vs Deep Copy&lt;/a&gt;&lt;br&gt;
&lt;a href="https://itnext.io/javascript-interview-prep-primitive-vs-reference-types-62eef165bec8"&gt;Primitive vs Reference Type&lt;/a&gt;&lt;br&gt;
&lt;a href="https://flaviocopes.com/how-to-clone-javascript-object/#:~:text=Lodash%20offers%20the%20very%20convenient,the%20size%20of%20the%20dependency.&amp;amp;text=In%20this%20simple%20example%20we,copy%2C%20and%20edit%20the%20i."&gt;Why should you use lodash for deep copy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating an internationalised site with Strapi and Nuxt</title>
      <author>Gemma Vincent</author>
      <pubDate>Mon, 17 May 2021 08:13:26 +0000</pubDate>
      <link>https://dev.to/lilgemvincent/creating-an-internationalised-site-with-strapi-and-nuxt-3lbj</link>
      <guid>https://dev.to/lilgemvincent/creating-an-internationalised-site-with-strapi-and-nuxt-3lbj</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was first published on our site, you can subscribe for more posts like this here: &lt;a href="https://www.pixelhop.io/writing/"&gt;&lt;/a&gt;&lt;a href="https://www.pixelhop.io/writing/"&gt;https://www.pixelhop.io/writing/&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We were really excited when Strapi released a new update a few weeks ago that included internationalisation! This post will show you the basics of creating an internationalised site using Strapi and Nuxt.&lt;/p&gt;

&lt;p&gt;Watch the video or follow along below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AZh7m8ysI0U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you are the kind of person that likes to dive straight into code, we have created example repositories for both the Nuxt and Strapi parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strapi 👉 &lt;a href="https://github.com/pixelhop/strapi-i18n"&gt;&lt;/a&gt;&lt;a href="https://github.com/pixelhop/strapi-i18n"&gt;https://github.com/pixelhop/strapi-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Nuxt 👉 &lt;a href="https://github.com/pixelhop/nuxt-i18n"&gt;&lt;/a&gt;&lt;a href="https://github.com/pixelhop/nuxt-i18n"&gt;https://github.com/pixelhop/nuxt-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-strapi"&gt;
  &lt;/a&gt;
  Setting up Strapi
&lt;/h2&gt;

&lt;p&gt;First things first, let's set up our &lt;a href="https://strapi.io/"&gt;Strapi CMS&lt;/a&gt;. Create a folder to hold this project, and then let's create a new Strapi project using your terminal and the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-strapi-app strapi &lt;span class="nt"&gt;--quickstart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After npm is finished installing your new Strapi instance, it will start the Strapi dev server and ask you to create an admin login. Go ahead and make your user, and voilà you've got a brand spanking shiny new headless CMS at your disposal. &lt;em&gt;"Now we're sucking on diesel"&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;*We have been watching far too much Line of Duty.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-some-content"&gt;
  &lt;/a&gt;
  Adding some content
&lt;/h3&gt;

&lt;p&gt;What's the point of a CMS if you've got no content? For the purpose of this demo, we are going to create a basic content type.&lt;/p&gt;

&lt;p&gt;Head to the Content Types Builder in the Strapi admin: &lt;a href="http://localhost:1337/admin/plugins/content-type-builder/content-types/"&gt;&lt;/a&gt;&lt;a href="http://localhost:1337/admin/plugins/content-type-builder/content-types/"&gt;http://localhost:1337/admin/plugins/content-type-builder/content-types/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once there, let's create a new single type by clicking the "+ Create new single type" link in the left sidebar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUtX9glu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aox8usffi4p33vtf4jcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUtX9glu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aox8usffi4p33vtf4jcu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's give our content type a name of "Home", and before clicking "Continue", navigate to the "Advanced settings" tab. Once there, make sure to check the "Enable localisation for the Content-Type" checkbox. You need to do this for any content type you would like to be localised. Once you have done that, it's safe to click "Continue".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iOybTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uubfdzn78md8f4fhac4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iOybTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uubfdzn78md8f4fhac4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-fields"&gt;
  &lt;/a&gt;
  Adding fields
&lt;/h3&gt;

&lt;p&gt;A content type can't hold any content if it doesn't add any fields, so the next step is to add some. We are going to keep it super simple and will add three fields.&lt;br&gt;
Create a text field called "Title":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVZc0Gkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2z8evz26t2ns8z3xuvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVZc0Gkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2z8evz26t2ns8z3xuvk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "+ Add another field". Then add a rich text field called "Body":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDqtXB6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us6ajtth65r2gc7q9ql5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDqtXB6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us6ajtth65r2gc7q9ql5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "+ Add another field", and finally let's add media field called "Image" and set its' type to "Single media" so we only need to upload one image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ3pEAKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etzvqwbeakelcaaqgejl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ3pEAKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etzvqwbeakelcaaqgejl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, go to the "Advanced settings" tab.&lt;/p&gt;

&lt;p&gt;Frequently when creating a localised site, you won't want all fields to be localised. By default, you will have to re-enter content for each field in the new language when you switch between locales.&lt;/p&gt;

&lt;p&gt;In our case, we want the Image field to keep the same image across all languages.&lt;br&gt;
&lt;strong&gt;Uncheck the "Enabled for localisation" checkbox.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXBNu-vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wswbt6mtpl6w1h2owdp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXBNu-vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wswbt6mtpl6w1h2owdp0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can click "Finish" to create our fields. Take a second to give yourself a pat on the back; you're one step closer to localisation euphoria.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-your-locales"&gt;
  &lt;/a&gt;
  Adding your locales
&lt;/h3&gt;

&lt;p&gt;Next up, we need to add your desired locales in Strapi. The locales are basically the different languages you want your site to support.&lt;/p&gt;

&lt;p&gt;You can get to the locale settings by going to Settings &amp;gt; Internationalisation: &lt;a href="http://localhost:1337/admin/settings/internationalization"&gt;&lt;/a&gt;&lt;a href="http://localhost:1337/admin/settings/internationalization"&gt;http://localhost:1337/admin/settings/internationalization&lt;/a&gt; in the Strapi admin.&lt;/p&gt;

&lt;p&gt;Once you are there, you should see that you already have one locale, English. You can add another one by clicking the "Add locale" button in the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AAa3d0aZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtqhxcq2kg8oggjqpn5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAa3d0aZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtqhxcq2kg8oggjqpn5r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your desired language in the modal that appears and click the "Add locale" button. Just like that, your CMS is now multilingual! Add as many languages as you need.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#set-content-type-permissions"&gt;
  &lt;/a&gt;
  Set content type permissions
&lt;/h3&gt;

&lt;p&gt;We are going to need Nuxt to be able to access our Stapi API to pull in content. By default, Strapi makes any new content type private, so we will need to change that.&lt;/p&gt;

&lt;p&gt;Go to Settings, and under the "Users &amp;amp; Permissions Plugin" heading, click "Roles".&lt;/p&gt;

&lt;p&gt;Click on the "Public" role, scroll down to the permissions and tick the "find" checkbox under "Home"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6aAEX0oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp7rs1oheeldppth2kv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aAEX0oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp7rs1oheeldppth2kv9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save your changes. This will make the GET [&lt;a href="http://localhost:1337/home"&gt;http://localhost:1337/home&lt;/a&gt;](&lt;a href="http://localhost:1337/home"&gt;http://localhost:1337/home&lt;/a&gt;) endpoint publicly accessible.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#add-some-content"&gt;
  &lt;/a&gt;
  Add some content
&lt;/h3&gt;

&lt;p&gt;We are done setting up Strapi, and now it's time to add some content. Click "Home" under the "Single Types" section of the admin sidebar and enter content for your default locale.&lt;/p&gt;

&lt;p&gt;Once you are happy you have created a masterpiece, save and publish it.&lt;/p&gt;

&lt;p&gt;Now it's time to get out your foreign language dictionary and enter content for your second locale. To change the current locale, use the dropdown switch found in the right sidebar. We fancied French next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64Njm0ZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk39ijk3cd6eb7hn44rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64Njm0ZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk39ijk3cd6eb7hn44rd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to save and publish again. Each locale gets published separately. Repeat for all your locales. Hopefully, none of you decided to add the world's 6500+ languages; otherwise, it might take you longer than expected to finish this tutorial!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#next-up-is-nuxt"&gt;
  &lt;/a&gt;
  Next up is Nuxt
&lt;/h2&gt;

&lt;p&gt;Your time as a content editor has come to an end, and now you need to get into your favourite hacker pose and start coding.&lt;/p&gt;

&lt;p&gt;First up is creating a new Nuxt site. In a new folder, use the terminal to run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nuxt-app nuxt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer the questions via the CLI. In our case, we choose the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Language: &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Package manager: &lt;strong&gt;NPM&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;UI framework: &lt;strong&gt;TailwindCSS&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Linter: &lt;strong&gt;ESLint&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Rendering mode: &lt;strong&gt;Singe Page App&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Deployment target: &lt;strong&gt;Static&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once that has done, cd into the new nuxt folder and start the dev server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Nuxt site should now be running at &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-nuxt-strapi-and-i18n"&gt;
  &lt;/a&gt;
  Install Nuxt Strapi and i18n
&lt;/h3&gt;

&lt;p&gt;Next, we need to install a few Nuxt modules. The Nuxt Strapi module will allow us to easily communicate with our Strapi API, and the Nuxt i18n module will enable us to add localisation.&lt;/p&gt;

&lt;p&gt;Install both the modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nuxt-i18n @nuxtjs/strapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, we need to add both modules to nuxt.config.js and configure them with options. First, let's register the modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// nuxt.config.js&lt;/span&gt;
&lt;span class="c1"&gt;// Modules: https://go.nuxtjs.dev/config-modules&lt;/span&gt;
&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/strapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nuxt-i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we can configure the i18n module. Add the following to your &lt;code&gt;nuxt.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;defaultLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above tells the i18n plugin that we will have three locales English, French and German. &lt;/p&gt;

&lt;p&gt;Feel free to adjust those to whichever languages you set up earlier in Strapi. &lt;strong&gt;It's important to note the locale codes you use should match the ones used when setting up locales in Strapi.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also set the sites default locale.&lt;/p&gt;

&lt;p&gt;Now we can move on to configuring the Strapi module. Add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;strapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells the module that we have a content type called "home" and it's a  single. This will allow us to retrieve it easily later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading-localised-content-from-strapi-into-nuxt"&gt;
  &lt;/a&gt;
  Loading localised content from Strapi into Nuxt
&lt;/h3&gt;

&lt;p&gt;Now it's time to load content from Strapi into Nuxt. In pages/index.vue replace the script section with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$strapi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$strapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;home&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To load in the data, we can use the asyncData hook that will be run at build time. The Nuxt i18n plugin adds the i18n object to the context object that is passed into the function. This allows us to get the current locale with i18n.locale.&lt;/p&gt;

&lt;p&gt;The Nuxt Strapi plugin also injects itself into the asyncData context, so we can then make a request to our API to get the home content. The import part here is how we filter the request by locale to retrieve the correct language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$strapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All being well, the home content should now be available in your page component. Let's add it to the template. Replace the &lt;code&gt;pages/index.vue&lt;/code&gt; template with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container flex flex-col items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col items-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-4 text-pink-700 font-bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ home.Title }}
      &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-4 text-green-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ home.Body }}
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- Usually you should store the Strapi host in an env var --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;:src=&lt;/span&gt;&lt;span class="s"&gt;"`http://localhost:1337${home.Image.url}`"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-1/4 mb-6"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Featured Image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There should be nothing that surprises you here; we just use standard Vue.js templating to output our page title, body and bind the image URL to the image src.&lt;/p&gt;

&lt;p&gt;Hopefully, by this point, you can see the content you added appearing on your page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aWtKMon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgboqhun85uk8309rhpw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aWtKMon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgboqhun85uk8309rhpw.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;
        &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locale in availableLocales&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;py-4 px-4 text-xl font-bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nuxt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;switchLocalePath(locale)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nuxt-link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;availableLocales&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, let's break down what's happening here.&lt;br&gt;
First, we get a list of the available locales in a computed function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;availableLocales&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we loop over these in our template using a v-for and we add a nuxt-link to allow us to switch between each site. The switchLocalePath function is added by the Nuxt i18n module returns the current routes localised variants. &lt;/p&gt;

&lt;p&gt;For example, we were on a page "/about" and we called the function like this switchLocalePath('fr') it would return "/fr/about".&lt;/p&gt;

&lt;p&gt;See here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"locale in availableLocales"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"locale"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-4 px-4 text-xl font-bold"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"switchLocalePath(locale)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ locale }}
    &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's the locale switcher finished.&lt;/p&gt;

&lt;p&gt;Now let's add it in to our page component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container flex flex-col items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mb-4 text-pink-700 font-bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mb-4 text-green-700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:1337${home.Image.url}`&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-1/4 mb-6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Featured Image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocaleSwitcher&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LocaleSwitcher&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/components/LocaleSwitcher.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;LocaleSwitcher&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$strapi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$strapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;home&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have an easy way to switch between your locales!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap
&lt;/h2&gt;

&lt;p&gt;And that's it. You should now have a fantastic internationalised site powered by Strapi and Nuxt. We have only touched on the basics, but hopefully, it gives you a good idea of what's involved in building this sort of site.&lt;/p&gt;

&lt;p&gt;We are super impressed with how easy the Strapi and Nuxt teams have made this, so big props to them!&lt;/p&gt;

&lt;p&gt;As always, if you have any questions or like this post, let us know on Twitter: &lt;a href="https://twitter.com/pixelhopio"&gt;@pixelhopio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to see more posts like this then subscribe to our site, we promise we won't spam you! You can sign up here &lt;a href="https://www.pixelhop.io/writing/"&gt;&lt;/a&gt;&lt;a href="https://www.pixelhop.io/writing/"&gt;https://www.pixelhop.io/writing/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>nuxt</category>
      <category>strapi</category>
      <category>i18n</category>
    </item>
    <item>
      <title>Going 3 Dimensional With Three.JS</title>
      <author>Akash Shyam</author>
      <pubDate>Mon, 17 May 2021 08:01:09 +0000</pubDate>
      <link>https://dev.to/akashshyam/going-3-dimensional-with-three-js-3oc4</link>
      <guid>https://dev.to/akashshyam/going-3-dimensional-with-three-js-3oc4</guid>
      <description>&lt;p&gt;We've all wanted to create those cool websites with those amazing moving shapes which look 3 dimensional. The technology used for this is called WebGL. It's great and gives us a lot of freedom and flexibility. &lt;/p&gt;

&lt;p&gt;However, with this, comes a price. WebGL is complex and we need to write a lot of code for something as simple as a cube. Here's where &lt;a href="http://threejs.org/"&gt;three.js&lt;/a&gt; comes into play. &lt;a href="http://threejs.org/"&gt;Three.js&lt;/a&gt; adds a layer above WebGL while allowing almost the same amount of flexibility.&lt;/p&gt;

&lt;p&gt;This is a the first post in a series of Three JS posts. Today, I'll show you how to create some basic shapes in three JS. &lt;/p&gt;

&lt;p&gt;We can use Three JS through NPM or by a CDN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i three
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;canvas&lt;/code&gt; element for our 3d figures. Canvas is used for drawing, it's in the name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;canvas width="800" height="600" id="threejs-canvas"&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's select this canvas through javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#threejs-canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scene"&gt;
  &lt;/a&gt;
  Scene
&lt;/h3&gt;

&lt;p&gt;Firstly, let's begin by creating a &lt;code&gt;Scene&lt;/code&gt;. A scene can be understood as the container for our 3d figures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Scene&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parts-of-objects"&gt;
  &lt;/a&gt;
  Parts of Objects
&lt;/h3&gt;

&lt;p&gt;A basic object in Three JS has 3 fundamental parts:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#geometry"&gt;
  &lt;/a&gt;
  Geometry
&lt;/h5&gt;

&lt;p&gt;It is the shape/outline of an object. Now, we'll create a geometry of a cube.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Params are width &amp;amp; height&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#material"&gt;
  &lt;/a&gt;
  Material
&lt;/h5&gt;

&lt;p&gt;It is the color/texture of the object. We can add unique looks and appearances by combining colors and textures. I'll create a detailed post on this very soon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use various color formats like &lt;code&gt;hexadecimal&lt;/code&gt;, &lt;code&gt;rgb&lt;/code&gt;, &lt;code&gt;hsl&lt;/code&gt; etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mesh"&gt;
  &lt;/a&gt;
  Mesh
&lt;/h3&gt;

&lt;p&gt;It is used to combine the geometry and the material. We can also use it for rotations, scaling, transformations etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the code, you'll see a black background but no cube. We may have created the cube but we have not added the cube to the scene.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running that again, there's still no cube:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuj4uIyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04fkmf2byafdoqk75ig3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuj4uIyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04fkmf2byafdoqk75ig3.png" alt="Screenshot 2021-05-16 at 20.32.42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because we need to render our scene.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Dimensions of the canvas&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are various renders but &lt;code&gt;WebGLRenderer&lt;/code&gt; is what we need. Finally, we can see our cube:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViGjUIc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubihpstulqij1h8sms6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViGjUIc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubihpstulqij1h8sms6b.png" alt="Screenshot 2021-05-16 at 20.36.40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controls"&gt;
  &lt;/a&gt;
  Controls
&lt;/h3&gt;

&lt;p&gt;I think it be great if we could look around the cube i.e. view it from other angles. We can do this by changing the position of the camera. We could implement this on our own but three JS gives us a &lt;code&gt;class&lt;/code&gt; we can use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Adding easing for better UX&lt;/span&gt;
&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableDamping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's try some other shapes:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sphere"&gt;
  &lt;/a&gt;
  Sphere
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The first argument is the radius&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SphereGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sphere&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the code, we get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--donaQ5kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qgzjp4tg6bau25pf4fp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--donaQ5kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qgzjp4tg6bau25pf4fp.png" alt="Screenshot 2021-05-16 at 20.47.49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the edges are jagged. People who have used 3d software tools like blender, 3d max etc will know why this happens. This is because we lack detail on the sphere which is necessary for creating a smooth sphere. In fact, everything we create in three JS is made of triangles. So, we want to increase the number of triangles(or segments according to the docs). &lt;/p&gt;

&lt;p&gt;It's important that we don't go overboard with this because the amount the GPU has to compute is directly proportional to the number of segments. I'd recommend increasing the value slightly until most of the sharp edges disappear. The controls in most cases are used for debugging and the user will probably have a fixed camera angle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SphereGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sphere&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we get a nice and smooth sphere:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShgRARzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fukut590ig5s9nhlxzp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShgRARzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fukut590ig5s9nhlxzp7.png" alt="Screenshot 2021-05-16 at 21.00.29"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#torus"&gt;
  &lt;/a&gt;
  Torus
&lt;/h3&gt;

&lt;p&gt;Most of the code is the same, we just need to change the class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Params is the radius of the torus, radius of inner circle&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TorusGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;torus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;torus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we execute the code, we can see that the torus is lacking some detail(same issue we had with the sphere). So, let's add some more segments to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6Q4kf-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47jmlly741cwtopykcmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6Q4kf-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47jmlly741cwtopykcmf.png" alt="Screenshot 2021-05-16 at 22.25.40"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TorusGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;torus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;torus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There, it looks much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVitb-BT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szyxiw6ulw4a67dl7j8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVitb-BT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szyxiw6ulw4a67dl7j8z.png" alt="Screenshot 2021-05-16 at 22.30.41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cone"&gt;
  &lt;/a&gt;
  Cone
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Radius of bottom, height&lt;/span&gt;
&lt;span class="c1"&gt;// I've added segments to give it a smooth texture&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ConeGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how it looks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sr9242Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6f2bwfupoms77143ux3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sr9242Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6f2bwfupoms77143ux3.png" alt="Screenshot 2021-05-16 at 22.40.25"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have the segment problem again. Let's fix that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ConeGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our nice looking cone:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BMmUs01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qexit8sc4ccws2mchiuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BMmUs01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qexit8sc4ccws2mchiuk.png" alt="Screenshot 2021-05-16 at 22.41.44"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#torusknot"&gt;
  &lt;/a&gt;
  TorusKnot
&lt;/h3&gt;

&lt;p&gt;This is an interesting shape and I think it's cool and unique.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TorusKnotGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;torusKnot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;torusKnot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmZhFDOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/579c6oqicfn27nfqr6ix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmZhFDOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/579c6oqicfn27nfqr6ix.png" alt="Screenshot 2021-05-16 at 22.45.38"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many more geometries that are available &lt;a href="https://threejs.org/docs/index.html?q=Geometry#manual/en/introduction/Creating-a-scene"&gt;here&lt;/a&gt; in three JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug-panels"&gt;
  &lt;/a&gt;
  Debug Panels
&lt;/h3&gt;

&lt;p&gt;These come real handy when we want to make little changes to test out colors, positions, angles etc. I like using &lt;a href="https://www.npmjs.com/package/dat.gui"&gt;dat.gui&lt;/a&gt; for this. Let's install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dat.gui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to initialize the GUI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GUI&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dat.gui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see a panel at the top right:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dmOI1rUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euv5jrhgdype6qqn9mag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dmOI1rUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euv5jrhgdype6qqn9mag.png" alt="Screenshot 2021-05-16 at 23.00.09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a property called &lt;code&gt;wireframe&lt;/code&gt; on our object. It removes the color/texture i.e. is the material and exposes the geometry(the outline of the object).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TorusGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;torus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wireframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;torus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adW-dVpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0mj0x854dml7ubjw2hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adW-dVpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0mj0x854dml7ubjw2hl.png" alt="Screenshot 2021-05-17 at 13.05.27"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there are a lot of criss-crossing lines. These are the segments(the triangles) of the shape.&lt;/p&gt;

&lt;p&gt;Let's use this property in our debug GUI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wireframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;gui.add()&lt;/code&gt; takes in an object and &lt;code&gt;wireframe&lt;/code&gt; is the property we want to toggle. The &lt;code&gt;gui.add()&lt;/code&gt; method can take in various types of properties(the second argument which needs to be changed). We can use functions, booleans, numbers, ranges etc. One thing to note is that we have decided to change the &lt;code&gt;wireframe&lt;/code&gt; property, if we specify something else(like &lt;code&gt;jdfkdfjkd&lt;/code&gt; instead of &lt;code&gt;wireframe&lt;/code&gt;), it won't work.&lt;/p&gt;

&lt;p&gt;Here's how our GUI looks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7u4VzzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2zszmydwggftaa9nlud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7u4VzzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2zszmydwggftaa9nlud.png" alt="Screenshot 2021-05-17 at 13.18.03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the label for the property is the property itself(we gave the second argument as &lt;code&gt;wireframe&lt;/code&gt; and that is also used as the label).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set the label to "Name1"&lt;/span&gt;
&lt;span class="nx"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wireframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After changing our label, here's how our GUI looks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGb_3Bb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4echixxra6q73a68z0oa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGb_3Bb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4echixxra6q73a68z0oa.png" alt="Screenshot 2021-05-17 at 13.25.20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Three JS is super interesting and I think this could be the way to go in the future! Thanks for reading until here. Next,  I'll be writing about animating our figures by transformations, rotations etc. Bye for now 🤟 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>3d</category>
      <category>threejs</category>
    </item>
    <item>
      <title>Staying active during the work day - Customized Pomodoro</title>
      <author>whatminjacodes [she/they]</author>
      <pubDate>Mon, 17 May 2021 07:49:10 +0000</pubDate>
      <link>https://dev.to/whatminjacodes/staying-active-during-the-work-day-customized-pomodoro-40ii</link>
      <guid>https://dev.to/whatminjacodes/staying-active-during-the-work-day-customized-pomodoro-40ii</guid>
      <description>&lt;p&gt;My goal this year has been to get my inactive time during the day lower. I'll let you know how I got this habit started and how it's going now in this blog post.&lt;/p&gt;

&lt;p&gt;I also made a customized pomodoro technique that I'm using when I need to concentrate for a longer period and feel that I might stay inactive for too long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-did-i-start-focusing-on-my-inactive-time"&gt;
  &lt;/a&gt;
  Why did I start focusing on my inactive time?
&lt;/h3&gt;

&lt;p&gt;I didn't just decide one day that I want to be more active or have healthier habits. This has been an ongoing goal for few years already. I started from small things like cooking healthier meals, eventually getting exercising into my weekly routine and started standing while working at least part of my day.&lt;/p&gt;

&lt;p&gt;So the logical next step is to lessen the time I spend inactive during the day. My daily inactive time can get high since I'm a software developer and spend most of my day sitting (or statically standing) in front of a desk all day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maw2v8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndm956m5axxh3rejozmy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maw2v8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndm956m5axxh3rejozmy.jpg" alt="Two graphs displaying my inactivity levels during a day. Left picture has long grey areas (inactivity) and right picture has less."&gt;&lt;/a&gt; Grey areas are inactivity during a day. Left picture shows what a day with lots of inactivity looks like (about 11h of inactivity) and right picture shows how much inactivity during a day I get nowadays (about 8h 30min of inactivity). &lt;/p&gt;

&lt;p&gt;I have a Oura smart ring which I use for tracking my sleep, activity and recovery from exercise, few drinks or a badly slept night. It reminds me to move every hour and stretch and even though I do that I noticed my inactive time was often 9-12h a day, which is a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhh9gL69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi783qhk38n924rcko28.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhh9gL69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi783qhk38n924rcko28.jpg" alt="A screenshot from Oura app screen that displays weekly summary."&gt;&lt;/a&gt; Oura weekly summary saying my average inactivity last week was 8 hours 34 minutes. &lt;/p&gt;

&lt;p&gt;Oura suggests that anything between 5-8h or less inactivity is considered a good practise and a habit that improves your health. So I set the goal that my weekly average during a day would be less than 8h. I still haven't reached that goal, but I'm slowly moving towards it. Now my weekly average is about 8.5h inactivity/day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-got-started"&gt;
  &lt;/a&gt;
  How I got started?
&lt;/h3&gt;

&lt;p&gt;I started to practise standing by just making it a habit first. I had two reminders during the day: one in the morning and one after lunch time. I started by standing just for 10 minutes, and even that felt difficult at first, but slowly I was able to stand for longer periods of time.&lt;/p&gt;

&lt;p&gt;Making a habit was the most important step for me. It didn't really matter how long I stood, as long as I remembered to do it every day. After a while I also started to stand during meetings. I wasn't able to stand the whole time but I started the meeting standing and stood for as long as it felt good.&lt;/p&gt;

&lt;p&gt;I also added stretching to my routine. Whenever I was creating a new build, listening to a podcast or reading an article, I started stretching at the same time. Rotating shoulders, doing squats and just overall moving my body.&lt;/p&gt;

&lt;p&gt;At first I had a simple setup where I just used a cardboard box to get my laptop on correct height and I also used a wireless keyboard and a mouse. After I got the habit started and I noticed I actually spend time standing, I got a proper laptop stand for my kitchen table.&lt;/p&gt;

&lt;p&gt;Now that I've used this temporary setup for couple months, I'm thinking of getting a standing desk mat and eventually maybe even upgrading to a proper standing desk. But it's definitely okay to start simple and not spend so much money on making the setup more suitable for standing!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customized-pomodoro"&gt;
  &lt;/a&gt;
  Customized pomodoro
&lt;/h3&gt;

&lt;p&gt;I wanted to mention this customized pomodoro that I came up with and thought it's a fun way to make sure I move enough during the day.&lt;/p&gt;

&lt;p&gt;I created a playlist that first has 20-25 minutes of music that I usually listen to when I want to concentrate and after that there's one song that always makes me want to dance and move. This way I automatically start to dance for the few minutes that the song lasts at least twice/hour.&lt;/p&gt;

&lt;p&gt;The link to my playlist in Spotify can be found from &lt;a href="https://open.spotify.com/playlist/16uhlookdDVdZO6oSVebIQ"&gt;here&lt;/a&gt; if you want to take inspiration from it :)&lt;/p&gt;

&lt;p&gt;Do you have any tips on how to be more active during the day when basically the whole work day is spent in front of a computer?&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Website lesson 1: structure of HTML</title>
      <author>Yuri Filatov</author>
      <pubDate>Mon, 17 May 2021 07:32:03 +0000</pubDate>
      <link>https://dev.to/filatovv/website-lesson-1-structure-of-html-4oo4</link>
      <guid>https://dev.to/filatovv/website-lesson-1-structure-of-html-4oo4</guid>
      <description>&lt;p&gt;As I've already told you, I've decided to make my own school. So the idea is to make by the end your own project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;You already have resources to learn tags by yourself. So let's make everything on the example of some website (an easy one).&lt;/p&gt;

&lt;p&gt;Open &lt;a href="https://app.moqups.com/sign-up"&gt;Moqups&lt;/a&gt; to start making your template. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-a-good-simple-website-needs"&gt;
  &lt;/a&gt;
  What a good simple website needs?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Menu with links that are good visible (no need to scroll down to find the page you need, maybe it can be both in the upper side and  lower side). &lt;/li&gt;
&lt;li&gt;Pictures (or animated such as slideshow). Less text on the main page, but more visuals.&lt;/li&gt;
&lt;li&gt;Good font (size, color, family). It is always more pleasant to read "beautiful" text. &lt;/li&gt;
&lt;li&gt;Your heading and logo that catch eyes. &lt;/li&gt;
&lt;li&gt;The main page should contain a small introduction and lower things that show the idea of your website. &lt;/li&gt;
&lt;li&gt;Communication. There should always be the way to share something and to express feelings (comments, likes)&lt;/li&gt;
&lt;li&gt;Contact page (side) with social medias&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to make something yours just to learn how it works. You will need your template later. Using this template, you will define the width/height (for example) of different objects.&lt;/p&gt;

&lt;p&gt;You can check &lt;a href="https://app.moqups.com/RNZGJ9YNkB/view/page/ad64222d5"&gt;my simple website idea&lt;/a&gt;, the easy project we will work on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-first-steps"&gt;
  &lt;/a&gt;
  Making first steps
&lt;/h2&gt;

&lt;p&gt;Open your tool/app or just notepad where you are going to begin. If it is a specified tool, you already have the template:&lt;br&gt;
&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/hmtl&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head"&gt;
  &lt;/a&gt;
  Head
&lt;/h3&gt;

&lt;p&gt;The main thing that MUST be used is&lt;br&gt;
&lt;code&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&amp;gt;&lt;/code&gt;&lt;br&gt;
You define your content type.&lt;/p&gt;

&lt;p&gt;First of all, let's define the title of our website, that you see in browser as a tab name. &lt;br&gt;
&lt;code&gt;&amp;lt;title&amp;gt;Sonnenberg&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Head is the part where you connect your CSS file with HTML. You can write style tags in this part, but the rule of the beautiful code - structure. So if you still haven't made an empty CSS file, it is the right time. Better to save all your files (HTML, CSS, JS) in one folder, so you don't need to write the direction of your file.&lt;br&gt;
&lt;code&gt;&amp;lt;link rel="stylesheet" type="text/css" href="style.css"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Rel&lt;/em&gt; is the part where you define. &lt;br&gt;
&lt;em&gt;href&lt;/em&gt; links. So instead of the name of your CSS file, you can use any link to a CSS file. &lt;br&gt;
Now all your style tags you just write in your CSS file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#body"&gt;
  &lt;/a&gt;
  Body
&lt;/h3&gt;

&lt;p&gt;Body is the main part of your website - content. Everything you want to be displayed on your page should be written here. Remember one thing that this HTML file is only for one page. If you want to make another page like not &lt;em&gt;Home&lt;/em&gt;, but &lt;em&gt;Contact&lt;/em&gt; make another HTML file. One useful thing: all your names should have max value. If you make a page &lt;em&gt;Home&lt;/em&gt;, then name your HTML file &lt;em&gt;Home.html&lt;/em&gt;. So with classes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#table-or-blocks"&gt;
  &lt;/a&gt;
  Table or blocks?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://24directory.com.ar"&gt;Table sites&lt;/a&gt; are just like dinosaurs. They are really old and not beautiful if we can say so. &lt;/p&gt;

&lt;p&gt;We will use blocks and only blocks!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#div"&gt;
  &lt;/a&gt;
  DIV
&lt;/h4&gt;

&lt;p&gt;(On my template) You devide your website into 3 or more rectangles (parts), for example: header with menu part, introduction part with a picture and a text right to it, line "Top Reiseangebote", 4 tours, line after that and a footer part. &lt;br&gt;
The idea - devide into rectangles. &lt;br&gt;
Every your rectangle (block) is &lt;em&gt;Div&lt;/em&gt;. &lt;br&gt;
&lt;code&gt;&amp;lt;div&amp;gt; ... content tags ... &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; ... &amp;lt;/div&amp;gt; ...&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h4&gt;

&lt;p&gt;One more important thing - your tags aren't always empty. Inside of your tags you can write &lt;a href="https://www.w3schools.com/html/html_attributes.asp"&gt;attributes&lt;/a&gt;. &lt;br&gt;
The main attribute that is must to be used - CLASS.&lt;br&gt;
As you see, you have, for example, 3 rectangles = 3 div. How do you understand which div is for header and which for footer? So we use &lt;em&gt;class&lt;/em&gt; to define our objects (to give them a name).&lt;br&gt;
&lt;code&gt;&amp;lt;div class="header"&amp;gt;....&amp;lt;/div&amp;gt;&amp;lt;div class="introduction"&amp;gt;...&amp;lt;/div&amp;gt;...&lt;/code&gt;&lt;br&gt;
Why do we need it? &lt;br&gt;
When you write style tags for objects, you won't write for every div but for div header. &lt;/p&gt;

&lt;p&gt;There is no problem in using tags as it is free on the Internet (check my previous articles for resources). My idea is to make it all understandable. So for the first lesson you don't really need to make any code. Your idea - to try to make your template or repeat mine, cause all coding I will make accourding to my template.&lt;/p&gt;

&lt;p&gt;Hopefully, it is all understandable! &lt;br&gt;
Follow me for the next lessons.&lt;/p&gt;

&lt;p&gt;Good luck in your job!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS open source news and updates #68</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 17 May 2021 07:20:25 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-68-3ohf</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-68-3ohf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-17th-2021-instalment-68"&gt;
  &lt;/a&gt;
  May 17th, 2021 - Instalment #68
&lt;/h2&gt;

&lt;p&gt;Newsletter #68. &lt;/p&gt;

&lt;p&gt;What better way that to celebrate my 100th post on dev.to with the latest AWS open source news and updates. This week we have posts covering Rust, OpenSearch, SaaS Boost, Apache Airflow, Kubernetes, Taurus, Spring Boot, Jenkins, GraphQL, Redis and more. If you are looking for projects, make sure you check out SaaS Boost which generated a lot of buzz last week, as well as the first beta of OpenSearch, sls-test-tools, aws-assume-role-lib and more. On top of that, check out the workshops this week, covering Apache Airflow and Laravel and finally some new videos and events for your diaries.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback please&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let us know how we can improve this newsletter by &lt;a href="https://eventbox.dev/survey/CNW711A"&gt;completing this very short survey&lt;/a&gt; that will take you less than 60 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/CNW711A"&gt;Take me to the survey&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Ben Kehoe, Kyle Davis, Andrew Hopp, Becki Lee, Drew Wright, James Sorling, Ernest Chiang, Sebastian Bille, Vu Dao, Jimmy Ray, Alexei Ledenev, Ajay Swamy,  George Lenz, Rotem Bar, Adrian De Luca, Mikhail Vasilyev, Brian Carlson, Claudio Sidi, Jim Gallagher, Mirus Lu, Arjan Schaaf, Benjamin Meyer, Shane Miller, James Sun, Alon Gendler, Dima Breydo, Michael Song, Rajesh Mikkilineni, Matheen Raza and Aaron Miller.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-saas-boost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/if"&gt;aws-saas-boost&lt;/a&gt; announced during re:Invent 2020, AWS SaaS Boost is an open source tool that helps software developers migrate their existing solutions to a Software-as-a-Service (SaaS) delivery model, removing the complexities of building SaaS solutions with ready-to-use core software elements. Those elements include tenant management, deployment automation, analytics dashboards, billing and metering, an administrative web interface, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--So8bdH08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/aws-saas-boost/raw/main/docs/images/gs-install-flow.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--So8bdH08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/aws-saas-boost/raw/main/docs/images/gs-install-flow.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the announcement blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/ig"&gt;AWS SaaS Boost released as open source&lt;/a&gt; from Adrian De Luca to find out more. This announcement generated a LOT of interest last week, but rather than share the links here I suggest if you are interested in this project, check out some of the other posts that the tech press has written to get some additional perspectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hz"&gt;OpenSearch&lt;/a&gt; big news last week from the OpenSearch team, who shared the first beta of OpenSearch and OpenSearch Dashboards. Check out the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/i0"&gt;OpenSearch Beta 1&lt;/a&gt; from Kyle Davis and Andrew Hopp. Download links are available from that blog post, or if you prefer you can always check out the GitHub repos and the source code. Finally, keep up to date with the latest news by bookmarking the webpage, &lt;a href="https://opensearch.org/"&gt;https://opensearch.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a related note, the &lt;a href="https://aws-oss.beachgeek.co.uk/ic"&gt;Apache SkyWalking&lt;/a&gt; project wrote last week, &lt;a href="https://aws-oss.beachgeek.co.uk/id"&gt;OpenSearch, a new storage option to avoid ElasticSearch's SSPL&lt;/a&gt; sharing that they had begun work on supporting OpenSearch and that they were supporting it as a storage option for their project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sls-test-tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iw"&gt;sls-test-tools&lt;/a&gt; from the same folks that brought you the amazing sls-dev-tools we have an alpha of sls-test-tools, an open source tool that provides a range of utilities, setup, teardown and assertions to make it easier to write effective and high quality integration tests for Serverless Architectures on AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-assume-role-lib&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iu"&gt;aws-assume-role-lib&lt;/a&gt; this library from AWS Hero Ben Kehoe is something you will find useful if you work with AWS in Python and you do role assumption. As Ben &lt;a href="https://twitter.com/ben11kehoe/status/1393701765749436418"&gt;tweeted&lt;/a&gt; yesterday:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yesterday I had to write a script that iterated over every account and assumed the Organizations access role in each one to do some work. The amount of thinking/remembering about the details of sts.assume_role was zero.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find that script over at &lt;a href="https://aws-oss.beachgeek.co.uk/iv"&gt;his Gists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dragoneye&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ir"&gt;dragoneye&lt;/a&gt; dragoneye is an open source tool from Indeni written in Python that is used to collect data about your AWS environment using the cloud provider's APIs. It is intended to function as component in other tools who have the need to collect data quickly (multi-threaded), or as a command line to collect a snapshot of a cloud account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;staticweb-open-wp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/i5"&gt;staticweb-open-wp&lt;/a&gt; this is an open-source, customisable template for Static WordPress stacks on AWS that uses WP2Static to deploy HTML files to AWS S3. The generated website is served by AWS CloudFront and you can read more about this project in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/i6"&gt;Open-Source WordPress Stack&lt;/a&gt; that provides a generator that create the CloudFormation stack to deploy this project. If you deploy WordPress sites, make sure you take a look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Open Distro for Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ie"&gt;SSRF in Open Distro for Elasticsearch&lt;/a&gt; I enjoyed this post from Rotem Bar that dives deep into CVE-2021-31828, an issue that effects Open Distro for ElasticSearch (ODFE), versions until 1.12.0.2. The post covers the background, the time line and the remediation process, and is a fascinating read for those wanting to know more about how these kinds of vulnerabilities are managed responsibly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/i7"&gt;Serverless Framework vs SAM vs AWS CDK&lt;/a&gt; Sebastian Bille shares his thoughts and experiences as he compares a number of open source developer tools that developers can use when building serverless applications. Seb takes the approach of trying these different tools to build and deploy the same application, sharing his thoughts as he goes along. Nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of Kubernetes related community posts this week. First up we have, &lt;a href="https://aws-oss.beachgeek.co.uk/i8"&gt;AWS CDK for EKS — Kubernetes Manifest Handling&lt;/a&gt; where Jimmy Ray follows up from a previous post on using AWS CDK to deploy a sample Java application on Amazon EKS, with this post that dives deeper into Kubernetes YAML manifests. From what these are to how to use them with AWS CDK, this is a great post to understand what your options are when managing Kubernetes manifests and the resulting Kubernetes resources that get created.&lt;/p&gt;

&lt;p&gt;Following that we have Vu Dao with, &lt;a href="https://aws-oss.beachgeek.co.uk/i9"&gt;Add Taints To AWS EKS Cluster And Trouble Shooting&lt;/a&gt; which takes a look at a newly released feature within AWS EKS, Kubernetes node taints (see Quick Updates below for more info), and how you can get started with these to help you with managing and troubleshooting your EKS Clusters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spotinfo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ia"&gt;Spotinfo — a new CLI for AWS Spot&lt;/a&gt; a couple of weeks back I covered a great new open source tool from Alexei Ledenev called &lt;a href="https://dev.to/aws/aws-open-source-news-and-updates-66-1bhj"&gt;spotinfo&lt;/a&gt;, a command-line tool that helps you determine AWS Spot instance types with the least chance of interruption and provides the savings you get over on-demand rates. Alexei has put together this post shows you how it works and how to get started. If you like this tool like I do, then remember to check out the GitHub repo and give it some love.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regula&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week Fugue posted news that their open source tool Regula, now supported AWS CloudFormation. You can read the full post from Drew Wright, &lt;a href="https://aws-oss.beachgeek.co.uk/i2"&gt;Regula Adds Support for AWS CloudFormation Security Checks&lt;/a&gt; and then if that piques your interest, why not take the next step and follow their clear tutorial, &lt;a href="https://aws-oss.beachgeek.co.uk/i1"&gt;Checking AWS CloudFormation IaC Security with Regula&lt;/a&gt; that Becki Lee has put together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/it"&gt;Working with the RedshiftToS3Transfer operator and Amazon Managed Workflows for Apache Airflow&lt;/a&gt; something I worked on last week after some discussions in the Apache Airflow community slack channel, where a community member was getting some unexpected behaviour when using the Airflow operator that lets you move data from Redshift to S3. Took me a while to get this working in a secure way, so have made this super easy for you to reproduce in this blog post now. How to work and integration Amazon Redshift with your Apache Airflow workflows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iq"&gt;Migrating from self-managed Kubernetes to Amazon EKS? Here are some key considerations&lt;/a&gt; Matheen Raza and Aaron Miller talk about some of the things to think about when planning your migration from your own, self managed Kubernetes clusters to Amazon EKS. They cover topics such as versions, security, networking and storage as well as some ideas on how to approach testing. If this is something you have been thinking about, this post is for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Rust language builds on the superpowers of other languages and innovates when required to deliver big on performance, reliability, productivity, and accessibility. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/im"&gt;Innovating with Rust&lt;/a&gt; Shane Miller takes a look at the missions and goals of Rust within AWS, how we working with the open source community, the AWS Rust team and the future.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/il"&gt;Manage and process your big data workflows with Amazon MWAA and Amazon EMR on Amazon EKS&lt;/a&gt; James Sun, Alon Gendler, and Dima Breydo provided a great deep dive in how you can orchestrate an ETL pipeline using Amazon MWAA with EMR on EKS, using the sample Citi Bike dataset and providing you with everything you need so you can reproduce this in your own environment. That is my weekend sorted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMb05Oj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/04/bdb1232-worfklows-mwaa-emr-eks-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMb05Oj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/04/bdb1232-worfklows-mwaa-emr-eks-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ip"&gt;How Takeda uses the GraphQL API with AWS AppSync to support data scientists&lt;/a&gt; Michael Song and Rajesh Mikkilineni from Takeda show you how you can deploy an API using JupyterHub to access data via GraphQL, and use JupyterHub to run queries to fetch the dataset using the GraphQL API.     They have taken this approach to provide API-based access to data as the flexibility of GraphQL enables researchers to access data the way they need it. To dive deeper, read on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Taurus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taurus is an open source tool that simplifies the process of performance and functional tests with an automation-friendly convenience wrapper for a number of open source testing tools such as JMeter, Gatling, Locust.io, Grinder and Selenium WebDriver. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ib"&gt;Ensure Optimal Application Performance with Distributed Load Testing on AWS&lt;/a&gt; Ajay Swamy and George Lenz walk you through a new open sourced solution, Distributed Load Testing on AWS, to help you automate the performance testing of your software applications at scale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kU0R5Q4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/05/12/Fig2-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kU0R5Q4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/05/12/Fig2-2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ik"&gt;Unify your iOS mobile app CI/CD pipeline with Amazon EC2 Mac Instances&lt;/a&gt; Benjamin Meyer shares with you how you can use Jenkins to build a CI/CD pipeline with the new Amazon EC2 Mac instance types to build and test your iOS and macOS applications. The post also talks about Fastlane, an open-source platform aimed at simplifying Android and iOS deployment, and the walk through shows you how you can incorporate to automate the development and release workflow of mobile applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEcsFHM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/05/07/Fastlane9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEcsFHM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/05/07/Fastlane9.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ii"&gt;Manage AWS ElastiCache for Redis access with Role-Based Access Control, AWS Secrets Manager, and IAM&lt;/a&gt; Claudio Sidi, Jim Gallagher, and Mirus Lu collaborate on this solution to address the lack of an out-of-the-box way to grant IAM entities (roles, users, or groups) read and write access to Redis when using RBAC. The post shows you how you can associate IAM entities with ElastiCache RBAC users and ACLs, through the use of AWS Secrets Manager as a proxy for granting access to ElastiCache RBAC user credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csbZdHEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/05/07/dbblog_1523__02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csbZdHEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/05/07/dbblog_1523__02.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ij"&gt;Amazon DynamoDB single-table design using DynamoDBMapper and Spring Boot&lt;/a&gt; Arjan Schaaf with a great post for Java/Spring Boot fans, taking a look at how to us a single-table design approach in conjunction with Spring Data (used by Spring Boot based application for data access) when using a nonrelational database, in this case DynamoDB. Check out the code in the GitHub repo and suggestions of how you can tailor this solution for your own needs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-on-aws"&gt;
  &lt;/a&gt;
  Open Source on AWS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ih"&gt;Choosing a CI/CD approach: Open Source on AWS, an Iponweb story&lt;/a&gt; Mikhail Vasilyev and Brian Carlson take a look at how one customer, Iponweb, approached choosing a continuous integration, continuous deployment (CI/CD) environment using open source tools running on AWS. &lt;/p&gt;

&lt;p&gt;I loved the quote from Michael Benuhis, CTO at Iponweb.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Iponweb was able to get the best of open-source software and public cloud services by building the continuous integration platform on Amazon Web Services. Open-source tools provided Iponweb platform agnosticism for serving our diverse customer base, while managed Amazon EKS on EC2 Spot Instances eliminated the operational burden of managing our own Kubernetes infrastructure, and with greater cost efficiency.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Ranger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR integration with Apache Ranger is now available on EMR 6.3, allowing you to define, enforce, and audit fine-grained data access control. With this feature, you can define and enforce 1/ database, table, and column level authorisation policies for Apache Spark and Apache Hive users to access data through Hive Metastore, and 2/ prefix and object level authorisation policies when accessing data in Amazon S3 via the Amazon EMR File System (EMRFS), leveraging Amazon CloudWatch to capture auditing logs.&lt;/p&gt;

&lt;p&gt;Apache Ranger is an open-source tool to enable, monitor, and manage comprehensive data security across the Hadoop platform. Previously, you can use Apache Ranger to enforce fine-grained authorisation on data in HDFS with Apache Hive using this blog post. Now this native integration enables additional capabilities. You can define three types of authorisation policies on Apache Ranger Policy Admin server. You can set table, column, and row level authorisation for Apache Hive, table and column level authorisation for Apache Spark, and prefix and object level authorisation for Amazon S3. Amazon EMR automatically installs and configures the corresponding Apache Ranger plugins on the cluster. These Ranger plugins sync up with the Policy Admin server for authorisation polices, enforce data access control, and send auditing events to Amazon CloudWatch Logs.&lt;/p&gt;

&lt;p&gt;Check out the full announcement here, &lt;a href="https://aws-oss.beachgeek.co.uk/hw"&gt;Amazon EMR 6.3 now supports Apache Ranger for fine-grained data access control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elastic Kubernetes Service (EKS) managed node groups now supports Kubernetes node taints, simplifying node lifecycle management for clusters with varying application resource requirements.&lt;/p&gt;

&lt;p&gt;With managed node group support for Kubernetes node taints, you can easily section off groups of Amazon EC2 instances in your cluster as designated for only certain applications. You can apply a toleration to your pods that allows them to be scheduled onto nodes with matching taints. Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshop"&gt;
  &lt;/a&gt;
  Workshop
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Really good to see this new workshop, &lt;a href="https://aws-oss.beachgeek.co.uk/hx"&gt;Apache Airflow for Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this workshop, you will learn how to build and orchestrate data and ML pipelines that include services such as Amazon S3, Amazon Redshift, Amazon EMR, AWS Glue, and Amazon SageMaker. You will gain familiarity and a better understanding of the hooks and operators available as part of Airflow to manage your pipelines/workflows on AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/i4"&gt;laravel-on-aws-ecs-workshops&lt;/a&gt; I somehow missed this when it surfaced a few months ago, but better late than never. If you are a PHP/Laravel developer, then this workshop from Ernest Chiang will guide you to deploying your Laravel applications onto AWS, guiding you through a number of different steps that improve your architecture and enable you to move to support production workloads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Copilot and Wordpress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In last weeks Containers from the Couch session, Austin Ely from the Copilot team walks you through what it takes to build a highly available, containerised Wordpress site. This video includes building a network file system using Amazon EFS, and a serverless relational MySQL database using Aurora Serverless. All that is done while diving into the latest features we've added to the AWS Copilot CLI!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nvW1i33my3o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevSecOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week I enjoyed listening to &lt;a href="https://aws-oss.beachgeek.co.uk/i3"&gt;Security Superfriends | James Sorling, Security Architect, WirelessCar&lt;/a&gt; which talks about meeting developers where they were, in their toolchains, and in their workflows and getting them to scan their infrastructure as code (IaC) early in development. This often uses open source tools, and James (who I featured last week) is a contributor to CFN-nag and integration of that into tools like SonarQube. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aYwSd1Wu28Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Open Sourcing AWS DeepRacer&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 18th, 8:00PM CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently we expanded AWS DeepRacer’s educational capabilities to coding robotics applications with the introduction of AWS DeepRacer Open Source. Now, aspiring ROS developers can use their AWS DeepRacer device to experiment with sample projects developed by our GitHub community, and contribute their own projects for a chance to be featured. During this tech talk we’ll provide an overview of DeepRacer Open Source, how to access sample projects in the DeepRacer GitHub community, and finally we’ll show you how to program your DeepRacer to scare off unwanted critters with the DeepRacer Robocat project.&lt;/p&gt;

&lt;p&gt;Find out more and register by clicking over&lt;a href="https://aws-oss.beachgeek.co.uk/in"&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Run Your First HPC Job on AWS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 8:00PM CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this online webinar you will learn how to set up your first HPC cluster on AWS. We'll cover everything from installing AWS ParallelCluster (and open source cluster management tool to deploy and manage HPC clusters in the AWS cloud), selecting the your Amazon EC2 instances, when to use Spot Instances to save up to 90% on compute, to launching your first MPI “hello world” job from the command line.&lt;/p&gt;

&lt;p&gt;Find out more and register by clicking over&lt;a href="https://aws-oss.beachgeek.co.uk/io"&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Face detection using openCV python.</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Mon, 17 May 2021 07:17:57 +0000</pubDate>
      <link>https://dev.to/rishabh062/face-detection-using-opencv-python-g6b</link>
      <guid>https://dev.to/rishabh062/face-detection-using-opencv-python-g6b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#face-detection-is-really-fun-attractive-and-it-has-its-own-use"&gt;
  &lt;/a&gt;
  Face detection is really fun, attractive and it has its own use.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Without going in much definition let's jump to our implementation.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opencv"&gt;
  &lt;/a&gt;
  What is openCV?
&lt;/h2&gt;

&lt;p&gt;openCV stands for &lt;strong&gt;Open source computer vision.&lt;/strong&gt; it is a library of programming functions mainly aimed at real-time computer vision.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For making task easier they have pretrained model name &lt;a href="https://github.com/opencv/opencv/tree/master/data/haarcascades"&gt;haarcascade&lt;/a&gt;&lt;br&gt;
which provides good accuracy.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach"&gt;
  &lt;/a&gt;
  Approach.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;install opencv at first.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import libraries
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import cv2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Attach &lt;a href="https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml"&gt;frontal-face&lt;/a&gt; and apply basic logic.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
# Read the input image
img = cv2.imread('your-image')
# convert it into gray code from BGR
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
# apply a scale of 1.1 and 4
faces = face_cascade.detectMultiScale(gray, 1.1, 4)

# Make rectangle around face of blue colour and thickness of 3.
for (x, y , w ,h) in faces:
  cv2.rectangle(img, (x,y), (x+w, y+h), (255, 0 , 0), 3)

# Display the output
cv2.imshow('img', img)
cv2.waitKey()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And here you are done.... Output image
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZuh_Xe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x76xdnhmp1oxm0scbioa.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#this-code-will-detect-multiple-faces-on-any-image-with-great-accuracy"&gt;
  &lt;/a&gt;
  This code will detect multiple faces on any image with great accuracy.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;It is also possible to detect multiple faces in realtime in videos.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;That will be a part of my next blog.&lt;/strong&gt;&lt;br&gt;
(You can ask doubt in comment section.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rishabh Dwivedi.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>watercooler</category>
      <category>discuss</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How I Got My First Fiverr Order. And Here is How You Can Too!</title>
      <author>Muhimen</author>
      <pubDate>Mon, 17 May 2021 07:16:38 +0000</pubDate>
      <link>https://dev.to/muhimen123/how-i-got-my-first-fiverr-order-and-here-is-how-you-can-too-2pbi</link>
      <guid>https://dev.to/muhimen123/how-i-got-my-first-fiverr-order-and-here-is-how-you-can-too-2pbi</guid>
      <description>&lt;p&gt;If you are a busy person and don't have enough patience to go through the whole post, here is the main take way,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It takes time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are not busy and have enough patience to go through the whole post, here is how you can utilize the time properly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-check-for-buyer-requests"&gt;
  &lt;/a&gt;
  1. Check For Buyer Requests
&lt;/h3&gt;

&lt;p&gt;If a buyer doesn't reach you out, why don't you reach them? Pretty simple, right? In your &lt;a href="https://www.fiverr.com/"&gt;fiverr dashboard&lt;/a&gt;, navigate to &lt;code&gt;more &amp;gt; buyer request&lt;/code&gt;. There you will find custom requests buyers have sent in Fiverr. Go through them one by one, if you find some interesting, make an offer. If you are lucky, the buyer will then contact you, and voila! You got your first order(this is how I got my first order :P).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pm4KDM-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234906/POST38_BUYERREQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pm4KDM-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234906/POST38_BUYERREQ.png" alt="Buyer Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, don't expect to get accepted on your first attempt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-keep-your-gig-updated"&gt;
  &lt;/a&gt;
  2. Keep Your Gig Updated
&lt;/h3&gt;

&lt;p&gt;If you don't have any activity in your &lt;a href="https://www.fiverr.com/support/articles/360010451397"&gt;gig&lt;/a&gt;, Fiverr will stop showing your gigs in search result. Getting orders is the best activity you can expect. But hey! You are reading this post because you don't have any activity, right? &lt;/p&gt;

&lt;p&gt;So don't worry, I got your back. 😉&lt;/p&gt;

&lt;p&gt;Try chaning your gig description or &lt;a href="https://forum.fiverr.com/t/change-gig-image/28742"&gt;gig photos&lt;/a&gt; once in a while. Hopefully you will see the difference in &lt;a href="https://www.fiverr.com/support/articles/360010750318-Viewing-Gig-Statistics#:~:text=Viewing%20your%20Gig's%20statistics%20can,the%20Selling%20menu%2C%20click%20Gigs."&gt;gig statistics&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-advertise-your-gigs"&gt;
  &lt;/a&gt;
  3. Advertise Your Gigs
&lt;/h3&gt;

&lt;p&gt;If people don't know about your gig, people won't buy your gig. As simple as it sounds. And the best way to reach many people is by advertising it. &lt;em&gt;Speaking of advertising, you can view my gig here :P&lt;/em&gt; &lt;a href="https://www.fiverr.com/share/7K5zok"&gt;https://www.fiverr.com/share/7K5zok&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Okay, in seriousness though, reach out to your friends on social media platforms like &lt;a href="https://www.linkedin.com/"&gt;linkedin&lt;/a&gt;, &lt;a href="https://www.facebook.com/"&gt;Facebook&lt;/a&gt;, &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; or whatever platform you prefer. &lt;/p&gt;

&lt;p&gt;Not necessarily they will buy the gig. But what is important here is they are increasing traffic(so-called "clicks" in Fiverr) in your gig. And as a result, it will help your gig appear before many other gigs when a buyer searches for it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  BONUS 🥳🥳🥳
&lt;/h3&gt;

&lt;p&gt;Here is a cool hack that I recently discovered(and it surprisingly works pretty well!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xa4-ero--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234939/POST38_INBOX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xa4-ero--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234939/POST38_INBOX.png" alt="Inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, if you didn't receive any message from the buyer at all and your inbox stays empty, try asking any of your friends (who have a Fiverr account) to send you a message via Fiverr. And that should be it! So, it's kinda like tricking the Fiverr algorithm(if that's a thing). When your response rate is better, Fiverr will automatically rank your gig up than those who don't have a response rate to start with. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--df2_BgAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234965/POST38_RESPONSE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--df2_BgAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1621234965/POST38_RESPONSE.png" alt="response rate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried this trick with 2 friends of mine. And surprisingly, the first friend got his order 2 hours after my message, and the second one got it after 1 day. Not that bad, right? &lt;/p&gt;

&lt;p&gt;So, that's all I had to share today. The tricks are not guaranteed to work all the time, but hey! It's better to try something than just sitting doing nothing at all. Who knows, you might even hit the jackpot! &lt;/p&gt;

&lt;p&gt;How did you get our first Fiverr order? Don't forget to share the story. 😉&lt;/p&gt;

&lt;p&gt;All the best if your Fiverr selling career. &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
