<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 cool JavaScript features that most developers don't know about</title>
      <author>Matvey Romanov</author>
      <pubDate>Tue, 04 Jan 2022 08:55:10 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</link>
      <guid>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</guid>
      <description>&lt;p&gt;You can use JavaScript to do the same thing in different ways. With the release of each new ECMAScript specification, new methods and operators are added to make the code shorter and more readable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" alt="Code" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-objectentries"&gt;
  &lt;/a&gt;
  1. Object.entries
&lt;/h2&gt;

&lt;p&gt;Most developers use the &lt;strong&gt;Object.keys&lt;/strong&gt; method to iterate through an object. This method returns only an array of object keys, not values. You can use &lt;strong&gt;Object.entries&lt;/strong&gt; to get both the key and the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['name', 'age']&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [['name', 'Nick'], ['age', 27]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To iterate over an object, we can do the following::&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// using records to get the key and value&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// expected result:&lt;/span&gt;
&lt;span class="c1"&gt;// name is Nick&lt;/span&gt;
&lt;span class="c1"&gt;// age is 27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both approaches described above return the same result, but &lt;strong&gt;Object.entries&lt;/strong&gt; makes it easy to get a key-value pair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-replaceall-method"&gt;
  &lt;/a&gt;
  2. The replaceAll method
&lt;/h2&gt;

&lt;p&gt;In JavaScript, to replace all occurrences of a string with another string, we need to use a regular expression like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Red-Green-Blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// replaces only the first entry&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green-Blue&lt;/span&gt;

&lt;span class="c1"&gt;// use a regular expression to replace all entries&lt;/span&gt;
&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in ES12, a new replaceAll &lt;strong&gt;method was added to String.prototype&lt;/strong&gt;, which replaces all occurrences of the string with another string value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-numeric-separator"&gt;
  &lt;/a&gt;
  3. Numeric separator
&lt;/h2&gt;

&lt;p&gt;You can use the underscore "_" as a numeric separator to simplify counting the number of zeros in a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// less readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;billion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// more readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readableBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readableBillion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns 1000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The separator can also be used with BigInt numbers, as in the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trillion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the number more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-documentdesignmode"&gt;
  &lt;/a&gt;
  4. document.designMode
&lt;/h2&gt;

&lt;p&gt;Linked to front-end JavaScript, &lt;strong&gt;design Mode&lt;/strong&gt; lets you edit any content on the page. Just open the browser console and enter the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;designMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/662198650" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is useful for designers, as they don't need to change something in the code every time to match the changes on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-logical-assignment-operator"&gt;
  &lt;/a&gt;
  5. Logical assignment operator
&lt;/h2&gt;

&lt;p&gt;Logical assignment operators are a combination of the logical operators &lt;strong&gt;&amp;amp;&amp;amp;, ||, ??&lt;/strong&gt; and the assignment operator &lt;strong&gt;=&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to a &amp;amp;&amp;amp; (a = b);&lt;/span&gt;
&lt;span class="c1"&gt;// OR another way&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it checks whether the value of &lt;strong&gt;a&lt;/strong&gt; matches true, and if so, we update its value. The same can be done with the logical &lt;strong&gt;OR //&lt;/strong&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also with the help of an operator &lt;strong&gt;??&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The operator &lt;strong&gt;??&lt;/strong&gt; checks only for null or undefined values.&lt;/p&gt;

&lt;p&gt;Note that logical assignment operators have been added since &lt;strong&gt;ES 12/ES 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These tricks and features can speed up the developer's work, and their use is not only necessary, but also useful. Continue to explore the hidden features of the language, learn all sorts of tricks and improve your skills.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Code splitting (bundle-split) in React</title>
      <author>Nitsan Cohen</author>
      <pubDate>Tue, 04 Jan 2022 07:56:04 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</link>
      <guid>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</guid>
      <description>&lt;p&gt;As you probably already know, when you build your React app (npm run build), Webpack will bundle all of your files into one big chunk.&lt;/p&gt;

&lt;p&gt;If your app is not that big that's usually just fine. But what happens when your app grows dramatically? You can end up with a really big JS file and that can hurt your UX, especially the initial loading time.&lt;/p&gt;

&lt;p&gt;Luckily there is a simple solution we can implement. Its name is code-splitting. By splitting our bundle, we can tell React (or Webpack) to load only the code that is absolutely necessary for the initial load (-for the current page, for example).&lt;/p&gt;

&lt;p&gt;Later, we can "lazy load" the rest of our code upon request (when navigating or scrolling down).&lt;/p&gt;

&lt;p&gt;One of the easiest ways to implement code splitting is by using a dynamic import. As the name suggests, the dynamic import will asynchronously import our file and will return a promise.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default (numA, numB) =&amp;gt; numA * numB

async function loadModule() {

 const dynamicImport = await import('./file1')

 dynamicImport.default(10, 10)
}

loadModule() //output: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we want to dynamically import a component?&lt;br&gt;
Let's assume we have a component that is used by our app only on page B. We don't want to import it when we are on page A. Well, with &lt;code&gt;React.lazy&lt;/code&gt; it's a breeze!&lt;/p&gt;

&lt;p&gt;Have a look at the attached image. All we have to do is use React.lazy to import our component. This component will now be excluded from our bundle and imported only on runtime when we load that specific page.&lt;br&gt;
We are also using the Suspense component to render a fallback while the user is retrieving the bundle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" alt="Image description" width="880" height="673"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Functional JS</title>
      <author>Varenya Thyagaraj</author>
      <pubDate>Tue, 04 Jan 2022 07:36:14 +0000</pubDate>
      <link>https://dev.to/varenya/functional-js-1ee</link>
      <guid>https://dev.to/varenya/functional-js-1ee</guid>
      <description>&lt;p&gt;There are few functional patterns that have become popular/semi-popular in JS world.&lt;/p&gt;

&lt;p&gt;Javascript as a language is extremely malleable to different patterns/preferences and that can be a good thing and a bad thing.&lt;/p&gt;

&lt;p&gt;The good thing is it can align with any of varied sensibilities in developer community. Bad thing is within a team, individuals with different preferences can write code completely different way within the same app which hurts readability considerably.&lt;/p&gt;

&lt;p&gt;So I wanted to tackle this topic with regards to functional patterns which I am particularly familiar with and have experienced its pro's and con's in the JS world.&lt;/p&gt;

&lt;p&gt;So let’s get started then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#point-free-pattern"&gt;
  &lt;/a&gt;
  Point Free Pattern
&lt;/h2&gt;

&lt;p&gt;This is basically a famous pattern in FP world where in you basically avoid passing function arguments when they basically pass through.&lt;/p&gt;

&lt;p&gt;An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*  I want to add one to a array of integers */&lt;/span&gt;

&lt;span class="cm"&gt;/* Way One */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="cm"&gt;/* Way Two */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically instead of explicitly calling the function and adding another layer of anonymous function we are using the function name itself and the arguments get passed implicitly.&lt;/p&gt;

&lt;p&gt;So is this a good to have? My Take &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Reason being its very easy to shoot your self in the foot with this pattern. Lets see how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* convert string of numbers to integers using parseInt */&lt;/span&gt;

&lt;span class="cm"&gt;/* Using pointfree */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pointFree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* Expected result : [1,2,3] *

/* Actual Result : [1,NaN,NaN] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the &lt;strong&gt;NaN's&lt;/strong&gt;? Well &lt;strong&gt;parseInt&lt;/strong&gt; take's two arguments basically the string and the base to which it needs to convert to. And &lt;strong&gt;map&lt;/strong&gt; actually sends in the current index along with current item in the list so the result is messed up.&lt;/p&gt;

&lt;p&gt;So how to fix the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fixedWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See explicit is better than implicit! you end up writing few more lines of code but you get the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions-immutability"&gt;
  &lt;/a&gt;
  Pure Functions / Immutability
&lt;/h2&gt;

&lt;p&gt;The idea is quite well known in the community. I won’t dig too deep here since it's been discussed/documented quite well now.&lt;/p&gt;

&lt;p&gt;This is a great thing to simplify your code.&lt;/p&gt;

&lt;p&gt;So my personal approach is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To break down a particular functionality into pure functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use immutable data structures to maintain state.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach works well with TDD. Makes code a lot more compositional to build other functionality in general.&lt;/p&gt;

&lt;p&gt;But there are some nuances here that are worth discussing in the context of Javascript.&lt;/p&gt;

&lt;p&gt;Javascript is a language that doesn’t enforce these rules at the language level. It's up to developers to make sure the rules are enforced. You can enforce it in the form of tests or other mechanisms but you cannot take it for granted.&lt;/p&gt;

&lt;p&gt;The above fact has consequences. For example, some built-in functions in JS won’t adhere to those rules. A good example is the &lt;strong&gt;&lt;em&gt;sort&lt;/em&gt;&lt;/strong&gt; function and &lt;strong&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/strong&gt; function which mutates the input you provide them. So when we are using them together with other parts of your software that is pure. The software as a whole won’t be pure anymore.&lt;/p&gt;

&lt;p&gt;So you can run into subtle issues that can be hard to nail down and it's not just built-in JS functions that can cause this. It can be any piece of JS code - external libraries.&lt;/p&gt;

&lt;p&gt;So should we give up on the idea? Well no - purism is good to have but trying to achieve perfection - not so much. Real life is rarely ever so pure 😉.&lt;/p&gt;

&lt;p&gt;Local mutations are okay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Here both variables i and total are */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep your state mutations in a single place to so that you can easily know where to look when something breaks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Pure functions */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* impure functions with state updates and mutations */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialCount&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the above feels familiar then your right - its basically what &lt;strong&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/strong&gt; does!&lt;/p&gt;

&lt;p&gt;Before I wrap this section up its important to know that immutability and pure functions can be costly when it comes to performance. If you are building a performance sensitive application updating objects through spread operator can be costly operation and can be source of problem.&lt;/p&gt;

&lt;p&gt;But in my experience those instances have been rare. This is good advice to follow in general:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;make it work, make it right, make it fast - Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reduce-the-use-of-reduce"&gt;
  &lt;/a&gt;
  Reduce the use of reduce
&lt;/h2&gt;

&lt;p&gt;Although &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is quite a handy higher order function and very flexible it can be taken to an extreme.&lt;/p&gt;

&lt;p&gt;A good example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// returns "test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having to go through all the items on the list even if the path is not present early on. This could be avoided if we use a simple for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing about &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; compared to &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; is that &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is lot more flexible than the others. So it’s tempting to use it in places where it may not really be a good fit.&lt;/p&gt;

&lt;p&gt;This is a blurry line and takes some experience and intuition to say when one is good and when one is bad.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-compositionpipe"&gt;
  &lt;/a&gt;
  Function Composition/Pipe
&lt;/h2&gt;

&lt;p&gt;Here the idea is that we can send a piece of data through series of operations and modify the data in someway to get a desired result.&lt;/p&gt;

&lt;p&gt;This too is very good pattern in general but comes with a few drawbacks in the context of JS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If any of the operations are having side effects or mutations this can cause really hard to find issues.&lt;/li&gt;
&lt;li&gt;Debugging can be tricky if you are composing multiple functions together - determine where something went wrong can be hard.&lt;/li&gt;
&lt;li&gt;Order of arguments is important and can be easily missed which can be a source of confusion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a proposal currently in stage-2 to make this built into JS - the syntax looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="c1"&gt;// output 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very concise and cool thing to have. The above mentioned drawbacks can be avoided by using few constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always use small pure functions to pipe through.&lt;/li&gt;
&lt;li&gt;In general keep the number of operations at 1-4 to avoid troubles.&lt;/li&gt;
&lt;li&gt;Each function should take at most 1-2 arguments.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal here is to strike a balance between functional patterns and JS primitives.&lt;/p&gt;

&lt;p&gt;Some other takeaways from my experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is a use case where mutating a variable is simplifying your code - go for it. Instead of coming up with a convoluted way of doing the same thing for the sake of purity.&lt;/li&gt;
&lt;li&gt;When it comes to asynchrony separate the effect part from the processing part. Imperative shell and functional core.&lt;/li&gt;
&lt;li&gt;Some libraries make some of the patterns I mentioned earlier turn bad into good. A good example is Ramda: &lt;a href="https://ramdajs.com/"&gt;https://ramdajs.com/&lt;/a&gt;. It’s built on point-free, currying, composition principles.&lt;/li&gt;
&lt;li&gt;Don’t go for fancy Dependency Injection frameworks. Good old higher-order functions are then good enough to get the job done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats it. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>RegExp Cheatsheet to speed up code editing and refactor</title>
      <author>Piyush Kumar Baliyan</author>
      <pubDate>Tue, 04 Jan 2022 07:30:00 +0000</pubDate>
      <link>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</link>
      <guid>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</guid>
      <description>&lt;p&gt;Have you ever asked yourself some of these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I find all the imports of a particular function?&lt;/li&gt;
&lt;li&gt;How do I replace all the variables of the old &lt;code&gt;Service&lt;/code&gt; implementation with &lt;code&gt;ServiceLegacy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;How do I fix the typo across all the files?&lt;/li&gt;
&lt;li&gt;Which files a particular API endpoint is being used?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If yes, you might find this article a little helpful for your future endeavors.&lt;/p&gt;

&lt;p&gt;For some of you, regex might be a mighty beast too difficult to conquer, for a few of the experts out there, my salute to you for mastering the regex magic.&lt;/p&gt;

&lt;p&gt;I myself am pretty average in areas of regex, but I know enough to make some of my tasks easy.&lt;/p&gt;

&lt;p&gt;I'll start with some regex basics, then move to some common patterns, and then discuss using the newfound regex knowledge (i.e. the topic, speed up code editing).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-background"&gt;
  &lt;/a&gt;
  A little background
&lt;/h2&gt;

&lt;p&gt;Regex (or sometimes &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;RegExp&lt;/a&gt; - as in JS), is a sequence of characters that specifies a search pattern.&lt;/p&gt;

&lt;p&gt;Perl was one of the modern languages to provide inbuilt support of regex (as Perl was used for text processing, regex support was a necessity), and many of today's tools and languages (including JS and grep) use Perl inspired regex engines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;^([A-Za-z0-9_.]+)@([A-Za-z0-9-]+)\.([A-Za-z]{2,15})$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;a href="https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript"&gt;Simple email regex&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex-basics"&gt;
  &lt;/a&gt;
  Regex Basics
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;any character except newline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Match 1 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Match 0 or 1 characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[abc]&lt;/td&gt;
&lt;td&gt;Any of a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td&gt;not a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;Any of a to z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^$&lt;/td&gt;
&lt;td&gt;Start and end of string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w\d\s&lt;/td&gt;
&lt;td&gt;word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W\D\S&lt;/td&gt;
&lt;td&gt;not word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{5}a{2,}&lt;/td&gt;
&lt;td&gt;exactly five, two or more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{1,3}&lt;/td&gt;
&lt;td&gt;between one &amp;amp; three&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Find the cheatsheet here &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/"&gt;Regular Expression Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.*&lt;/code&gt; Match anything (Will match if the string is empty)&lt;br&gt;
&lt;code&gt;.+&lt;/code&gt; Match anything (will not match if the string is empty)&lt;br&gt;
&lt;code&gt;^[a-z]+$&lt;/code&gt; Start and end tokens are there, [a-z]+ will match a string containing characters between a-z and &lt;code&gt;+&lt;/code&gt; will match if there is at least 1 character. So the expression will match any alphabetical string.&lt;/p&gt;

&lt;p&gt;You can learn more here &lt;a href="https://regexone.com/"&gt;Regexone&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-regex"&gt;
  &lt;/a&gt;
  Creating Regex
&lt;/h2&gt;

&lt;p&gt;Now let's try making some regex&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-valid-css-color"&gt;
  &lt;/a&gt;
  1. Valid CSS Color
&lt;/h4&gt;

&lt;p&gt;This is simple, should be a hexadecimal string of format RRGGBB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We don't want any stray ending or starting characters, without this, this will match if any random string contains the hexadecimal string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]+$&lt;/code&gt; - match a-f, 0-9, this is now a valid hexadecimal string, but not valid css color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]{6}$&lt;/code&gt; - exact length of 6&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-fA-F0-9]{6}$&lt;/code&gt; - case insensitive match&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#2-mobile-number"&gt;
  &lt;/a&gt;
  2. Mobile Number
&lt;/h4&gt;

&lt;p&gt;The condition is, should start with +, then 91 (India), then 10 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We want number, and not string containing number.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91.*$&lt;/code&gt;, starts with +91, then .* will match anything (&lt;code&gt;+&lt;/code&gt; is special character, so its escaped with &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91[0-9]{10}$&lt;/code&gt;, replace &lt;code&gt;.*&lt;/code&gt; with [0-9]{10} exact 10 occurrences of 0-9 digits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's add another condition, in my country, the number starts with 6,7,8,9, then random 9 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^\+91[6789][0-9]{9}$&lt;/code&gt; - This will do it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the &lt;a href="https://regexr.com/"&gt;RegExr playground&lt;/a&gt; to test my Regex.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#find-and-replace-in-js"&gt;
  &lt;/a&gt;
  Find and replace in JS
&lt;/h2&gt;

&lt;p&gt;In JS RegExp, we can have something called capture groups, with which we can group parts of our regex and use them in string manipulation using regex.&lt;/p&gt;

&lt;p&gt;A simple example, in the string &lt;code&gt;aabbcc&lt;/code&gt;, replace all &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will replace first occurrence of all `c`s in the string&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OR better&lt;/span&gt;
&lt;span class="c1"&gt;// this will replace all `c`s with a&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;/g&lt;/code&gt; is a modifier for global search in regex. Other modifiers are &lt;code&gt;/i&lt;/code&gt; (case insensitive search), &lt;code&gt;/m&lt;/code&gt;, for multiline search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-find-and-replace"&gt;
  &lt;/a&gt;
  VSCode find and replace
&lt;/h2&gt;

&lt;p&gt;Let's say you have a typo in your code, and you named your type as &lt;code&gt;ButonProps&lt;/code&gt;. And you want to replace it with &lt;code&gt;ButtonProps&lt;/code&gt;.&lt;br&gt;
Simple Find and replace in VSCode lets you do that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" alt="VSCode Find and replace" width="386" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just put the required strings in each input box&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" alt="Find and replace typo" width="378" height="74"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-regex-in-vscode"&gt;
  &lt;/a&gt;
  Find Regex in vscode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to find all the occurrences of &lt;code&gt;ButtonProps&lt;/code&gt; import. The syntax will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it can be something more complex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//OR&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes our time to use regex in VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" alt="Regex in VSCode" width="365" height="34"&gt;&lt;/a&gt;&lt;br&gt;
The little button &lt;code&gt;.*&lt;/code&gt; in the search input box is the regex button toggler.&lt;br&gt;
With regex on, we can now use regex in VSCode search.&lt;/p&gt;

&lt;p&gt;So now let's search, and create our regex.&lt;br&gt;
We will first start simple, and then narrow down our search by adding more regex symbols.&lt;br&gt;
Our import statement looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import something ButtonProps something from button;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so our regex will be (replace something with &lt;code&gt;.*&lt;/code&gt;&lt;br&gt;
&lt;code&gt;import .*ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" alt="Find ButtonProps" width="394" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there is some noise, we are also getting IconButtonProps. Let's remove that.&lt;br&gt;
What we don't want is ButtonProps to be prefixed by any alphabets.&lt;br&gt;
&lt;code&gt;import .*[^a-zA-Z]ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now our search is only showing ButtonProps without any noise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replace-regex-in-vscode"&gt;
  &lt;/a&gt;
  Replace regex in VSCode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to rename the &lt;code&gt;Button&lt;/code&gt; component to &lt;code&gt;Btn&lt;/code&gt;.&lt;br&gt;
We will need to replace these three occurrences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;imports (&lt;code&gt;import Button from 'Button'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Usage (&lt;code&gt;&amp;lt;Button &amp;gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Assignments (&lt;code&gt;const MyComponent = Button&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;





&lt;center&gt;Lets start.&lt;/center&gt;


&lt;h4&gt;
  &lt;a href="#1-imports"&gt;
  &lt;/a&gt;
  1. imports
&lt;/h4&gt;

&lt;p&gt;Here the &lt;code&gt;()&lt;/code&gt; are capture groups that we will access using $1, $2 respectively.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" alt="Find and replace imports" width="384" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what VSCode will show you:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" alt="VSCode rename component" width="398" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What we have done here is select everything between &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt; by first capture group, then everything between &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; by second capture group, and so on.&lt;/li&gt;
&lt;li&gt;Then we carefully want to replace only Button with Btn.&lt;/li&gt;
&lt;li&gt;So we replaced the first capture group with itself ($1), the second one with $2, the third one with $3.&lt;/li&gt;
&lt;li&gt;Hence we get our replacement string &lt;code&gt;import$1Button$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now change &lt;code&gt;Button&lt;/code&gt; to &lt;code&gt;Btn&lt;/code&gt;, and we get &lt;code&gt;import$1Btn$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And your button imports are now renamed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-usage"&gt;
  &lt;/a&gt;
  2. Usage
&lt;/h4&gt;

&lt;p&gt;Continuing on above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" alt="Find and replace usage" width="390" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find &lt;code&gt;&amp;lt;Button&lt;/code&gt; that does not have trailing alphabets (to omit something like &lt;code&gt;&amp;lt;ButtonGroup&lt;/code&gt; and maybe have a trailing newline. then replace all of them with &lt;code&gt;&amp;lt;Btn$1&lt;/code&gt; i.e. using $1, replace &lt;code&gt;space&lt;/code&gt; with space, newline with a newline.&lt;/p&gt;

&lt;p&gt;End bracket now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" alt="Find and replace end bracket" width="394" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty easy, but why &lt;code&gt;*&lt;/code&gt;. Since &lt;code&gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;/ Button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/Button &amp;gt;&lt;/code&gt; all are valid JSX.&lt;br&gt;
But why not $1, or $2. Since this will also clean up the code and replace all the above with clean &lt;code&gt;&amp;lt;Btn&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-assignments"&gt;
  &lt;/a&gt;
  3. Assignments
&lt;/h4&gt;

&lt;p&gt;This one should not be that much in your code, and you can directly search for &lt;code&gt;Button&lt;/code&gt; now.&lt;br&gt;
Find - &lt;code&gt;Button[^']&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But what is &lt;code&gt;[^']&lt;/code&gt; for? To exclude all the occurrences of &lt;code&gt;import.*from 'Button';&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, all our occurrences of Button are now Btn. And we now understand Regex a little better and use it to make our work easy.&lt;/p&gt;

&lt;p&gt;In the future, I'll also try to write some articles highlighting more use-cases of regex to make your life easier.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>regex</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Slack workspaces in the browser
</title>
      <author>Nicolas Beauvais</author>
      <pubDate>Tue, 04 Jan 2022 07:25:52 +0000</pubDate>
      <link>https://dev.to/nicolasbeauvais/slack-workspaces-in-the-browser-5470</link>
      <guid>https://dev.to/nicolasbeauvais/slack-workspaces-in-the-browser-5470</guid>
      <description>&lt;p&gt;I always try to avoid using Electron apps when I can, more so when I need them running all day like Slack. It doesn't make much sense to me, it forces my computer to run another WebKit engine just for Slack when it already works perfectly in a browser.&lt;/p&gt;

&lt;p&gt;But Slack does not offer a way to get all workspaces notifications in a single tab, and keeping 3-5 open tabs just for it is annoying, making the Electron app mandatory to use. &lt;/p&gt;

&lt;p&gt;If you were stuck like me in this situation, I have exactly what you need: &lt;strong&gt;a way to activate Slack's workspace switcher in your web browser&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Wuwkpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10pojwrbtzcsx4eq7sv8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Wuwkpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10pojwrbtzcsx4eq7sv8.jpg" alt="Slack's Workspaces switcher in the browser" width="574" height="712"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All you need to make this work is to change your favourite browser's user agent to make Slack think that you are using a chromebook, as detailed in &lt;a href="https://webapps.stackexchange.com/questions/144258/slacks-web-version-shows-workspace-switching-sidebar-but-only-on-chromebooks"&gt;this stack exchange thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use the great Tampermonkey extension, or similar, to easily change your user agent on the Slack website. If you do not know about this extension, it allows you to run a user-defined script on a particular website, and more things outside this article's scope.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en"&gt;Tampermonkey for Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/"&gt;Tampermonkey for Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once installed, you need to create the following script that will change your user agent, and make the Slack website think that you are running the latest Google Chrome version on a Chrome OS laptop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ==UserScript==&lt;/span&gt;
&lt;span class="c1"&gt;// @name        Enable Slack workspaces in the browser&lt;/span&gt;
&lt;span class="c1"&gt;// @namespace   slack.com&lt;/span&gt;
&lt;span class="c1"&gt;// @version     https://dev.to/nicolasbeauvais&lt;/span&gt;
&lt;span class="c1"&gt;// @description Enable Slack workspaces in the browser&lt;/span&gt;
&lt;span class="c1"&gt;// @match       https://app.slack.com/*&lt;/span&gt;
&lt;span class="c1"&gt;// @match       https://app.slack.com/&lt;/span&gt;
&lt;span class="c1"&gt;// @grant       none&lt;/span&gt;
&lt;span class="c1"&gt;// @run-at      document-start&lt;/span&gt;
&lt;span class="c1"&gt;// ==/UserScript==&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userAgent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mozilla/5.0 (X11; CrOS x86_64 10066.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you never used Tampermonkey before, you can find many online tutorials that will show you how to add a script. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be careful with the scripts that you add to Tampermonkey, you should never add code that you do not fully understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that's it, you can now open all your Slack workspaces in a single tab, and receive all notifications, just like with the Electron app.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Web Design Layout Best Practices for Medical Professionals in 2022</title>
      <author>Chriis Watson</author>
      <pubDate>Tue, 04 Jan 2022 06:59:36 +0000</pubDate>
      <link>https://dev.to/watsonnchriis/web-design-layout-best-practices-for-medical-professionals-1f6i</link>
      <guid>https://dev.to/watsonnchriis/web-design-layout-best-practices-for-medical-professionals-1f6i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;
We all know that small changes in your websites can increase or decrease conversion rates. And finding the right marketing campaigns for your healthcare business is an important yet difficult task. Web design should be dynamic because we need to change web design and its features from time to time to beat competitors. Any changes in your websites should ensure the best results for your visitors and Google crawlers.&lt;/p&gt;

&lt;p&gt;You need to learn and implement some best web design practices which can help you get more customers and leads and of course conversion rate. The layout of your web page is very much responsible for the conversion rate. So, let's cover in detail some of the best web design layout practices for your web page or website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Web Design Best Practices Are So Important?&lt;/strong&gt;&lt;br&gt;
Because users care about web design. Web design best practices always make a positive impact on your audience and increase your brand value. Due to this audience will spend more time on your website and then the bounce rate will be decreased.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take a look at some facts:-&lt;/strong&gt;&lt;br&gt;
• Based on visual design, &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.business.com/articles/7-website-design-mistakes-that-can-hurt-conversion/"&gt;75% of users judge a company’s credibility.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; First impressions can last for years.&lt;br&gt;
• Positive initial impressions lead to higher satisfaction. It takes visitors just 50 milliseconds to form a first impression.&lt;br&gt;
• Around 38% of users do not engage with a website that has an unattractive layout and content.&lt;/p&gt;

&lt;p&gt;Quality content matters a lot. But quality content with poor web design is not acceptable. The visual representation and website navigation have the biggest influence on user’s initial impressions of your brand. People are naturally drawn to good design and well-designed websites have more conversion rates than poorly designed and optimized ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about your audience&lt;/strong&gt;&lt;br&gt;
The first task is that you need to think about your audiences before you engage with your design team or healthcare app development company. What does your targeted audience want from you? Think about what your audience will prefer. Will they prefer a simple, plain, traditional web layout or a relish web design layout?&lt;/p&gt;

&lt;p&gt;Create a detailed plan for your target audience and act according to that plan. Once you understand your audience you can move further in the web designing process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compressed Images&lt;/strong&gt;&lt;br&gt;
Everyone loves quality content and it includes quality images too. All the images or info graphics you use for your website should be unique, high quality and eye-catching. But big images with high storage size will reduce page loading speed and make a bad impression among your audience as well as on &lt;strong&gt;&lt;em&gt;&lt;a href="https://developers.google.com/speed"&gt;Google rankings&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. In order to provide quality content, don’t sacrifice your site speed. Use compressed images and JPEG is the best option because it doesn’t lose its quality after compression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better Navigability&lt;/strong&gt;&lt;br&gt;
Better navigation is one of the important aspects of web design layouts. Navigations elements should be as simple as possible for users to easily navigate and make it easier for users. Take an example of the top &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.cronj.com/healthcare-development/healthcare-app-development-company"&gt;healthcare app development company&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; website:-&lt;br&gt;
Big typography is used for navigation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Higher Functionality of a website design makes things easier to find.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web design best practices improve your website credibility and brand value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boost your sales by making your website mobile responsive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always pick a Secure Web Host because small websites are also vulnerable to cyber attacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to use inbound marketing methodology to increase conversion rates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Tomorrow the devices we wear in our everyday lives will play a new role in our health. The best website design layout depends on the goal of the website and its content. You need to try different techniques and tools to create the best design. Flexible and mobile-friendly web designs are more preferred by users. A good web design provides a positive experience among your visitors and helps you to beat your competitors.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>healthcare</category>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>Using Tuya Link SDK to build water level monitoring system.</title>
      <author>Stanley Ruheza</author>
      <pubDate>Tue, 04 Jan 2022 05:22:22 +0000</pubDate>
      <link>https://dev.to/maen/using-tuya-link-sdk-to-build-water-level-monitoring-system-ocm</link>
      <guid>https://dev.to/maen/using-tuya-link-sdk-to-build-water-level-monitoring-system-ocm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hardware-devices-required"&gt;
  &lt;/a&gt;
  Hardware devices required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;Ultrasonic sensor&lt;/li&gt;
&lt;li&gt;Jumper wires&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#software-required"&gt;
  &lt;/a&gt;
  Software required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tuya IoT platform&lt;/li&gt;
&lt;li&gt;Link SDK python package&lt;/li&gt;
&lt;li&gt;Tuya Smart app (mobile app)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-tuya-iot-platform"&gt;
  &lt;/a&gt;
  Getting started with Tuya IoT platform
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-an-account-in-the-platform"&gt;
  &lt;/a&gt;
  Create an account in the platform.
&lt;/h3&gt;

&lt;p&gt;If you already have an account, go on login &lt;a href="https://auth.tuya.com/?_source=f8ce204fc51d1a7082c9e80206711660"&gt;here&lt;/a&gt; or if you don't have an account, then create one in this &lt;a href="https://auth.tuya.com/?_source=f8ce204fc51d1a7082c9e80206711660"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are registered or login successfully, then you'll see this dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkZx_LVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640774667217/oIe2FMj6U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkZx_LVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640774667217/oIe2FMj6U.png" alt="008.png" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then open  &lt;strong&gt;Product&lt;/strong&gt; &amp;gt; &lt;strong&gt;Development&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create&lt;/strong&gt; then scroll down and you'll see &lt;strong&gt;Can't find the category?&lt;/strong&gt; in the left bottom corner. Open up and fill the information like below then &lt;strong&gt;Create&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ID0id8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639814305995/nKoYZNW86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ID0id8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639814305995/nKoYZNW86.png" alt="004.png" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By creating the Product we mean, the project which will exist in the Tuya platform to receive data from the sensors and monitored remotely from the phone or your PC. The information we filled in the platform tries to mimic our hardware devices which we will use in the circuit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-custom-functions"&gt;
  &lt;/a&gt;
  Create custom functions
&lt;/h3&gt;

&lt;p&gt;Here we specify some metrics about the sensor (Ultrasonic sensor) so as it may link correctly as how we want it to be. These metrics including, &lt;code&gt;Data Point (DP)&lt;/code&gt;, &lt;code&gt;Identifier&lt;/code&gt;,&lt;code&gt;Data Transfer Type&lt;/code&gt;, &lt;code&gt;Data Type&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open up our &lt;strong&gt;Product&lt;/strong&gt; and then click ** Function Definition**  &amp;gt; &lt;strong&gt;Custom Function&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add&lt;/strong&gt;, you'll see the form to fill the metrics above. Go ahead and fill like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhGPp5PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639815308278/YmDrzqGfSm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhGPp5PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639815308278/YmDrzqGfSm.png" alt="005.png" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#obtain-credentials-for-your-project"&gt;
  &lt;/a&gt;
  Obtain credentials for your project
&lt;/h3&gt;

&lt;p&gt;Credentials which are needed in &lt;code&gt;tuyalinksdk&lt;/code&gt; are &lt;code&gt;PID&lt;/code&gt;, &lt;code&gt;AUTHKEY&lt;/code&gt; and &lt;code&gt;UUID&lt;/code&gt;. Once you create a Product in the platform, you automatically obtain the PID (aka, Product ID).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjInDMsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639816092846/1hJhzi5YO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjInDMsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639816092846/1hJhzi5YO.png" alt="006.png" width="880" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But for AUTKEY and UUID, you'll have to apply for a license. The license comes with these two credentials. Follow these steps to get the license. Navigate to &lt;strong&gt;Purchase&lt;/strong&gt; &amp;gt; &lt;strong&gt;Material &amp;amp; License&lt;/strong&gt; then click &lt;strong&gt;Buy Now&lt;/strong&gt; the &lt;strong&gt;Generic License&lt;/strong&gt; 2 free licenses for each developer account, you need to buy when you use up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pzsExm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639817006071/9bobxx7tZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pzsExm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639817006071/9bobxx7tZ.png" alt="007.png" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Buy Now **, another window will open then **Select Product&lt;/strong&gt; and &lt;strong&gt;Delivery Mode&lt;/strong&gt; as License.&lt;br&gt;
The order process will take some time to complete. Just relax and worry out meanwhile, get a cup of coffee :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-circuit-hardware-part"&gt;
  &lt;/a&gt;
  The Circuit (Hardware part)
&lt;/h2&gt;

&lt;p&gt;In this section, we're going to build our circuit. Connect the Raspberry Pi on the power source and the keyboard. Mount Ultrasonic sensor on the Raspberry Pi. We use Ultrasonic sensor to measure the level of water calculating the distance from the sensor to the water surface in the tank.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQplcVNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639824560292/ONIJyXUFj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQplcVNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639824560292/ONIJyXUFj.png" alt="image.png" width="800" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDLvnbSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640838988178/19Rj9Hpom.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDLvnbSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640838988178/19Rj9Hpom.jpeg" alt="circuit.jpg" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project-in-tuya-iot-platform-software-part"&gt;
  &lt;/a&gt;
  Project in Tuya IoT platform (Software part)
&lt;/h2&gt;

&lt;p&gt;In this section, we're going to setup our project in the Tuya IoT platform. We already have the credentials which we got in the above steps (by credentials i mean, PID, UUID and AUTHKEY). We will use these credentials in the &lt;code&gt;tuyalinksdk&lt;/code&gt; to setup a link connection between the circuit and platform. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-tuya-sdk-python-library"&gt;
  &lt;/a&gt;
  Link Tuya SDK python library
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;tuyalinksdk&lt;/code&gt; is a Python library which makes the connection between the circuit and the Tuya IoT platform.&lt;br&gt;
We'll install this package in our Raspberry Pi in order to link and upload data from the sensor (in the circuit) to the platform. In the directory of your project in Raspberry Pi, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# install the package
$ pip install tuyalinksdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or install from the github repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/tuya/tuyaos-link-sdk-python.git
$ python3 -m pip install ./tuyaos-link-sdk-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing is to write the codes which establish connection by using this package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tuyalinksdk.client import TuyaClient

client = TuyaClient(productid='PID', uuid='UUID', authkey='AUTHKEY')

def on_connected():
    print('Connected.')

def on_dps(dps):
    print('DataPoints:', dps)
    client.push_dps(dps)

client.on_connected = on_connected
client.on_dps = on_dps
client.connect()
client.loop_start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;on_connected&lt;/code&gt; is the method which checks if the connection is well setup. If everything is okay the print statement will run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;on_dps&lt;/code&gt; is a method which receives the datapoints (values of the sensor) and upload them to the platform so that we can monitor the process from our devices (phones and PC), ie IoT itself. Data are uploaded through &lt;code&gt;client.push_dps()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Write the codes for the Raspberry Pi codes for the ultrasonic sensor alongside the above codes. This is the complete codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/python
import RPi.GPIO as GPIO
import time
import coloredlogs
from tuyalinksdk.client import TuyaClient
from tuyalinksdk.console_qrcode import qrcode_generate
from time import sleep

GPIO.setmode(GPIO.BCM)
coloredlogs.install(level='DEBUG')

client = TuyaClient(
    productid='44apXXXXXXXXXXX',
     uuid='tuya19dXXXXXXXXXXX',
      authkey='uFjw3VqrrfXXXXXXXXXXXXXX')

TRIG = 2
ECHO = 3
i=0

GPIO.setup(TRIG ,GPIO.OUT)
GPIO.setup(ECHO,GPIO.IN)
GPIO.setup(4 ,GPIO.OUT)

GPIO.output(TRIG, False)
print("Starting.....")
sleep(2)

while True:
   GPIO.output(TRIG, True)
   sleep(0.00001)
   GPIO.output(TRIG, False)

   while GPIO.input(ECHO)==0:
      pulse_start = time.time()

   while GPIO.input(ECHO)==1:
      pulse_stop = time.time()

   pulse_time = pulse_stop - pulse_start
   water_level = pulse_time * 17150
   print(round(water_level, 2))

   time.sleep(1)

   if water_level &amp;lt; 4:
       print("Water will overflow")
       GPIO.output(4, True)
       time.sleep(0.5)
       GPIO.output(4, False)
       time.sleep(0.5)
       GPIO.output(4, True)
       time.sleep(0.5)
       GPIO.output(4, False)
       time.sleep(0.5)
   else:
       GPIO.output(4, False)

def on_connected():
    print('Connected.')

def on_qrcode(url):
    qrcode_generate(url)

def on_reset(data):
    print('Reset:', data)

def on_dps(dps):
    print('DataPoints:', dps)
    dps = {'101':True}
    dps['101'] = data
    client.push_dps(dps)

client.on_connected = on_connected
client.on_qrcode = on_qrcode
client.on_reset = on_reset
client.on_dps = on_dps
client.connect()
client.loop_start()

while True:
    data = water_level
    time.sleep(1)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get the starter codes from Tuya's page in Github and edit the codes by adding Raspberry Pi configuration codes. Run these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git clone https://github.com/tuya/tuyaos-link-sdk-python.git
 $ cd examples
# view the starter codes here
 $ cat outlet.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reference is &lt;a href="https://pypi.org/project/tuyalinksdk/#tuyaos-link-sdk-for-python"&gt;here&lt;/a&gt; and the codes can be found  &lt;a href="https://dev.togit"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running the codes at first time will create a connection between your project in Tuya platform and the Tuya mobile application which will enable you to send commands from the application to your Raspberry Pi remotely through the platform. To allow the connection, you'll need to scan the qrcode by using your mobile phone generated once you run the &lt;code&gt;outlets.py&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCzusNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640779236637/HkqwA_U4E.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCzusNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640779236637/HkqwA_U4E.jpeg" alt="WhatsApp Image 2021-12-29 at 14.51.41.jpeg" width="536" height="1080"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets design a monitoring dashboard in the platform which will receive data from our sensor and display visuals and monitoring. Then after, we will connect a smartphone to view this dashboard just like how we view in the platform (in the platform, a web based)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitoring-dashboard"&gt;
  &lt;/a&gt;
  Monitoring dashboard
&lt;/h3&gt;

&lt;p&gt;In the platform, navigate to &lt;strong&gt;Product&lt;/strong&gt; &amp;gt; &lt;strong&gt;Development&lt;/strong&gt;, it will open the product we've just created in the above steps. Open up that Product (aka, the project) and you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6giP9gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639800632724/KsTdmxDBq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6giP9gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639800632724/KsTdmxDBq.png" alt="001.png" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Device Panel&lt;/strong&gt; and select a blank screen where it will open up a new page for designing the mobile view screen for your dashboard. Make the UI design of your choice, this is what i came up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--retlQzZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639802552711/xZBzsPTba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--retlQzZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639802552711/xZBzsPTba.png" alt="002.png" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're done with the design, &lt;strong&gt;Preview&lt;/strong&gt; to check if its okay then &lt;strong&gt;Save As&lt;/strong&gt; and finally &lt;strong&gt;Release&lt;/strong&gt; your design. Up to this point, the dashboard is ready. We can visualize this design from the smartphone by using &lt;a href="https://play.google.com/store/apps/details?id=com.tuya.smart&amp;amp;hl=en&amp;amp;gl=US"&gt;Tuya Smart App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Up to this point, the project is ready for testing and using. You can monitor the water level of your tank remotely from your device (phone for example).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;p&gt;If you follow along up to this point, you should be able to send values directly from your phone remotely to the platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_K9z_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837937509/JLmTAV3ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_K9z_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837937509/JLmTAV3ee.png" alt="device.png" width="385" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5aKDvSU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837950212/G5-dTuA7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5aKDvSU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640837950212/G5-dTuA7a.png" alt="dps.png" width="498" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=oxfzzZoUqGk"&gt;Video demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tuya/tuyaos-link-sdk-python"&gt;Project examples from Tuya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maen08/tuya-linksdk-with-raspberry-pi"&gt;Source codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tuya.com/blog"&gt;Tuya blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tuya/"&gt;Tuya github page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>raspberrypi</category>
      <category>iot</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>CMD tricks </title>
      <author>Call me Kric O_O</author>
      <pubDate>Tue, 04 Jan 2022 04:26:41 +0000</pubDate>
      <link>https://dev.to/i_am_empty/cmd-tricks-44gp</link>
      <guid>https://dev.to/i_am_empty/cmd-tricks-44gp</guid>
      <description>&lt;p&gt;**_Well here are some cool and good tricks of cmd ( command prompt )&lt;/p&gt;

&lt;p&gt;1.md aux\ --- it will create a folder that can't be copy nor deleted&lt;br&gt;
2.attrib -h -s  -r (folder u want to unhide)----------- this will unhide the folder &lt;br&gt;
3.attrib +h +s +r (folder u want to hide)----------- this will hide the folder reload it&lt;br&gt;
4.shutdown -s ----------- it will shut down the computer&lt;br&gt;
5.shutdown -l ----------- it will log off the computer&lt;br&gt;
6.shutdown -r ----------- it will restart  the computer&lt;br&gt;
7.shutdow /s /t (no. of seconds) /c "(Msg u want pop out  befor the shut down )"--------- it will shutdown the pc after the seconds are over and dislpay the msg u have written &lt;br&gt;
8.shutdow /s /t (no. of seconds) --------- it will shutdown the pc after the seconds are over &lt;br&gt;
9.color help ------- it will show the color code&lt;br&gt;
10.color   (background code)(font code ) -------it will customize the cmd by codes eg color help 42 (it changes the backfround to red and font to green)&lt;br&gt;
11.*&lt;em&gt;**prompt (name u want change )$G ---- it will change the prompt&lt;br&gt;
title (whateve u wnat ) ----- it will chane the title _&lt;/em&gt;*&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Living with Imposter Syndrome as a Software Developer</title>
      <author>Rahul Banerjee</author>
      <pubDate>Tue, 04 Jan 2022 04:04:54 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/living-with-imposter-syndrome-as-a-software-developer-2aa2</link>
      <guid>https://dev.to/rahulbanerjee99/living-with-imposter-syndrome-as-a-software-developer-2aa2</guid>
      <description>&lt;h2&gt;Why you should read this article?&lt;/h2&gt;

&lt;p&gt;Like many others, I have experienced imposter syndrome firsthand. During my internships, I often felt as if I was "lucky" or that I am going to fail at the tasks assigned to me. One of my very first tasks was to work on a Flask API and integrate it with an Azure Service. I had prior experience working with Flask but the Azure stuff was pretty new to me. However, the service was well-documented and there were multiple articles related to it as well. It only required a bit of research and the entire task shouldn't have taken more than 2-3 dev days. I had estimated the story points for the task based on that. However, what I had not accounted for was imposter syndrome. It took me around double the time I had initially expected and in the first 2 days, I barely wrote any code. I wanted my code to be perfect and was scared of writing bad code. I over-researched and spent more time on the documentation than I should have. I was scared that not being able to complete my task would make me a bad developer and all those imposter syndrome questions like "Am I good enough?", "Do I deserve this position" started creeping up. Most of my actual development work was done in 2 days and although I thought my code was perfect I still needed multiple revisions to merge it.&lt;/p&gt;

&lt;p&gt;Although with time I felt more comfortable, I still felt waves of imposter syndrome here and there. When I joined another company as an intern, my first PR took me around 10 revisions before I could merge it. This caused me to go down the rabbit hole of imposter syndrome questions again. Again, with time I felt more comfortable.&lt;/p&gt;

&lt;p&gt;I am not saying I have successfully found a way to deal with imposter syndrome or that this article is going to help you with your imposter syndrome but I hope you feel better knowing that there is someone else as well who is going through the same thing as you. I am pretty sure I am going to experience imposter syndrome when I start my FT job as well. The content of this article is written based on my personal experience and the various articles I have read when I experience imposter syndrome. Feel free to critique anything and give feedback.&lt;/p&gt;

&lt;h2&gt;What is imposter syndrome?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S63JFqWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2022/01/pexels-photo-1601495.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S63JFqWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2022/01/pexels-photo-1601495.jpeg" alt="worms eyeview of well" width="880" height="660"&gt;&lt;/a&gt;Photo by Filipe Delgado on &lt;a href="https://www.pexels.com/photo/worms-eyeview-of-well-1601495/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imposter syndrome is a toxic pattern in the minds of many computer programmers. It manifests in the fear that you are not good enough, that everyone else has better ideas or is more competent than you. You might feel like you're always on the verge of being found out that it's only a matter of time before someone sees through your facade and exposes your failures. Imposter syndrome is a dangerous pattern of thinking that makes you feel inadequate in your current job or career path. If you're not careful, it can lead to reduced productivity, poor work ethic, and low self-esteem. It's also something that has been shown to affect many software developers worldwide.&lt;/p&gt;

&lt;h2&gt;Signs of Imposter Syndrome&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One of the most common early signs is difficulty making decisions, doubts over both subjective and objective decision-making. You may feel like you can't make up your mind or that you'll always make the wrong decision. Often, this will lead to not taking any chances, which often makes things worse. When something bad happens, you're quick to blame yourself and become even more indecisive.&lt;/li&gt;
&lt;li&gt;You might also feel like everyone around you is smarter or better at their job than you are. You constantly compare yourself to others in an effort to define your own competence. The problem with this is that it takes away from the value of your own accomplishments, making you feel unworthy of praise. &lt;/li&gt;
&lt;li&gt;Finally, imposter syndrome is often experienced as an inverse effect where the more progress your make or the more positive your accomplishments, the more you feel like a fraud or failure. You might think that it's all going to go away and no one will ever acknowledge your success again. It makes enjoying a job or career difficult due to constant self-doubt even when things are going well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How to deal with imposter syndrome?&lt;/h2&gt;

&lt;p&gt;Although there is no one-size-fits-all answer, here are a few ideas that may help you deal with imposter syndrome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk to someone about how you're feeling. It can be really helpful to talk to someone who will understand what you're going through. Find someone you trust and talk about your experiences, feelings, and thoughts. This can help you gain some perspective on the situation.&lt;/li&gt;
&lt;li&gt;Stop comparing yourself to others. This is easier said than done, but it's important to remember the importance of checking your ego and learning from others' mistakes so you can improve your own work. It's important to be aware of what others are doing so that you can learn from them, but it's not healthy to constantly compare yourself to others.&lt;/li&gt;
&lt;li&gt;Take credit for your successes. Remember all the things you do well? Be proud of them! If you made a mistake, don't dwell on it. Nobody's perfect. This is why you shouldn't compare yourself to others because everyone makes mistakes. Don't be afraid to give yourself credit when you've done something well.&lt;/li&gt;
&lt;li&gt;Keep learning new skills even if they aren't directly related to your job or career path. You might feel like you know everything there is to know about a certain topic, but there is always more to learn. Never stop learning just because you're good at something. Always keep expanding your knowledge so that you can handle new situations and challenges with ease!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Tips for dealing with imposter syndrome as a software developer&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXXye3CB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2022/01/pexels-photo-1181467.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXXye3CB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/wp-content/uploads/2022/01/pexels-photo-1181467.jpeg" alt="person using silver macbook pro" width="880" height="587"&gt;&lt;/a&gt;Photo by Christina Morillo on &lt;a href="https://www.pexels.com/photo/person-using-silver-macbook-pro-1181467/" rel="nofollow"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a software developer, it's important to check your ego and learn from others' mistakes. When you're working in a team, it's crucial to be able to listen to other people's ideas and be open to constructive criticism. You also need to be humble enough to learn from your own mistakes. If you can do this, then you'll be able to become a better developer and contribute more to your team.&lt;/li&gt;
&lt;li&gt;It can also help break up the day or week by taking brief breaks between tasks, reorganizing tasks into categories, or working on side projects that are not related to your job or career path. This allows you time away from the stress of work without sacrificing too much time since the other task isn't work-related.&lt;/li&gt;
&lt;li&gt;Setting short-term goals and trying to envision what it would look like once you achieve those goals.&lt;/li&gt;
&lt;li&gt;You can also try exercising, meditating, or reflecting on your day to help you refocus and find peace within yourself. If you're feeling particularly stressed out by imposter syndrome, it can be helpful to take a few deep breaths before returning to work.&lt;/li&gt;
&lt;li&gt;Lastly, it's important not to compare yourself unfairly to other developers. You need to understand the value of constructive criticism and learn from your mistakes. This way, you'll be able to improve as a developer and contribute more to your team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Living with Imposter Syndrome as a Software Developer&lt;/h2&gt;

&lt;p&gt;Living with Imposter Syndrome as a Software Developer is difficult and most people don't know that they're experiencing it. You might think that you're just not good enough, or that everyone else has better ideas than you do. It can be especially hard if you're in a creative field where your work is simply your own thoughts and opinions. If you suspect that this is what's going on with you, take some time to learn more about it and see if it's the reason for your feelings of insecurity. You may find comfort in knowing that anyone can experience imposter syndrome - no one person is immune to feeling incapable, even when they have been doing their job well for a long time. And while it may take a while for this feeling to disappear, if you follow the steps below it may be possible for you to stop feeling like an imposter in your own mind.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;1. Tackle Your Imposter Thoughts Head On&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;An important thing to know about imposter syndrome is that it's not something that goes away on its own; it's very likely that you'll find yourself continuing to feel like you're an imposter if you don't do anything about it. One of the best ways to combat these thoughts is by simply talking back at them. When you find yourself thinking "I'm not good enough," or "People are going to catch on and see that I'm a fraud," talk back at those thoughts and be as logical as possible. For example, "I may not be the most experienced developer but I've had my job for two years now and it seems like I'm doing just fine."&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;2. Find a Mentor&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Having an outside person who you can talk to about your feelings is helpful because there will always be someone who will remind you that you're actually doing a good job and who will be able to offer insight when you find yourself thinking in circles. Sharing your feelings with a mentor will also help them understand how they can help you since they'll have a better idea of what your specific issues are.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;3. Be Thankful for Your Work So Far&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Try looking back at your past work and finding the things about it that you did well. You might find that you did things better months ago than you do now - but that doesn't mean that you're not good enough to be doing what you're doing today!&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;4. Recognize that People's Judgment of Your Work Isn't Personal&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;One of the hardest things about imposter syndrome is that you might feel like people aren't judging your work, but rather they're judging you as a person. The truth behind this feeling, however, is that when judgment does come it's only because someone found something wrong with your work - and while they may point out your faults, it has nothing to do with you personally. It can be tough to remember this when you have imposter syndrome, but if you keep it in mind then it's easier to push through the fear that someone is making an accusation against your character. As I mentioned earlier, one of my PRs required around 10 revisions but each revision helped me learn something. The comments made on my PR helped me to reduce the number of revisions required for my future PRs and they helped me to be a better developer.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you found this article helpful. Please let me know if you found any other ways to deal with imposter syndrome and if you are comfortable please do share your experience with imposter syndrome as well. It will make me and other developers out there feel more confident. &lt;/p&gt;

&lt;p&gt;Read some of my other articles&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/10-things-every-software-developer-should-know-to-stay-productive/"&gt;10 Things Every Software Developer Should Know To Stay Productive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/some-tips-to-get-hired-as-a-software-developer-in-2022/"&gt;Some Tips To Get Hired As A Software Developer In 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzvSpU1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/the-4-types-of-side-hustles-for-software-developers/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzvSpU1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.realpythonproject.com/the-4-types-of-side-hustles-for-software-developers/" alt="" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Dark Mode Using React</title>
      <author>lrth06</author>
      <pubDate>Tue, 04 Jan 2022 03:41:06 +0000</pubDate>
      <link>https://dev.to/lrth06/dark-mode-using-react-279p</link>
      <guid>https://dev.to/lrth06/dark-mode-using-react-279p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#dark-mode-is-a-common-feature-to-see-on-modern-websites-heres-how-to-make-your-own-with-react"&gt;
  &lt;/a&gt;
  Dark mode is a common feature to see on modern websites, here's how to make your own with React.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally posted &lt;a href="https://www.tobyhagan.com/blog/dark-mode-using-react"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#looks-cool-but-why"&gt;
  &lt;/a&gt;
  Looks Cool, But Why?
&lt;/h3&gt;

&lt;p&gt;If you've ever worked in front of a screen, you probably know how it feels to finally get away from the computer, only to have your eyes strained over the course of the day. One way developers have started to combat this is the use of dark mode. Dark mode uses light text on a dark background, also leading to lower power consumption on certain devices. This is also a great tool in keeping users engaged and interested in your content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-react-app"&gt;
  &lt;/a&gt;
  Creating a React App
&lt;/h3&gt;

&lt;p&gt;First, we need to create a react app. The most popular way to do this is to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app dark-mode-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a directory called &lt;code&gt;dark-mode-example&lt;/code&gt;, and will install React and the necessary dependencies to get you started. Once that is complete, you should see the following in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Success! Created dark-mode-example at /home/example/dark-mode-example
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files &lt;span class="k"&gt;for &lt;/span&gt;production.

  npm &lt;span class="nb"&gt;test
    &lt;/span&gt;Starts the &lt;span class="nb"&gt;test &lt;/span&gt;runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you &lt;span class="k"&gt;do &lt;/span&gt;this, you can’t go back!

We suggest that you begin by typing:

  &lt;span class="nb"&gt;cd &lt;/span&gt;dark-mode-example
  npm start

Happy hacking!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#verifying-installation"&gt;
  &lt;/a&gt;
  Verifying Installation
&lt;/h3&gt;

&lt;p&gt;Now that our React app is set up, lets run &lt;code&gt;cd dark-mode-example&lt;/code&gt; and &lt;code&gt;npm start&lt;/code&gt; to start the development server. A Browser window will open in your default browser, and you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2vtA5mt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/create-react-app.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2vtA5mt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/create-react-app.webp" alt="Default create-react-app template" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can open our favorite text editor and start coding. I recommend using VS Code, so we can stop our development server with &lt;code&gt;ctrl + c&lt;/code&gt; and then run &lt;code&gt;code .&lt;/code&gt; since we're already in the project directory. For the purposes of this tutorial, we'll only be editing two files: &lt;code&gt;src/App.js&lt;/code&gt; and &lt;code&gt;src/App.css&lt;/code&gt;. We can start by editing &lt;code&gt;src/App.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;It should currently look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Edit&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/code&amp;gt; and save to reload&lt;/span&gt;&lt;span class="err"&gt;.
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://reactjs.org&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noopener noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Learn&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the header tag and everything within, only leaving the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can edit &lt;code&gt;src/App.css&lt;/code&gt;. It should currently contain the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.App-logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no-preference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.App-logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;App-logo-spin&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="m"&gt;20s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.App-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282c34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.App-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#61dafb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;App-logo-spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We removed almost everything that relies on this file in the previous step, so remove everything except the &lt;code&gt;.App&lt;/code&gt; class. The file should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While we have this file open, lets update the &lt;code&gt;.App&lt;/code&gt; class, and add a few more classes we'll use in the following steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e3440&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d8dee9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dark&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.dark&lt;/span&gt; &lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d8dee9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e3440&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets talk about what we've done here. The first change you may notice is the &lt;code&gt;*&lt;/code&gt; selector. This is a universal selector, and will apply to all elements. This serves as a simple way to reset the default styles of all elements, creating a consistent look and feel across multiple browsers. We also added a new class called &lt;code&gt;.dark&lt;/code&gt;. This class will be added to the &lt;code&gt;.App&lt;/code&gt; class when the user clicks the dark mode button. The new styles will be applied, and any elements that are not in the &lt;code&gt;.dark&lt;/code&gt; class will not be affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-dark-mode-button"&gt;
  &lt;/a&gt;
  Making a Dark Mode Button
&lt;/h3&gt;

&lt;p&gt;Lets go back to &lt;code&gt;src/App.js&lt;/code&gt; and add some text, and a button to toggle dark mode on and off. We'll assign the class &lt;code&gt;.dark-mode-toggle&lt;/code&gt; to the button, and use the &lt;code&gt;onClick&lt;/code&gt; event to toggle Dark Mode on and off. Because we're using &lt;code&gt;useState&lt;/code&gt; to toggle Dark Mode, we'll import it at the top of the filee. Then we need to create our &lt;code&gt;darkMode&lt;/code&gt; variable and setDarkMode modifier. For the time being we will default to &lt;code&gt;false&lt;/code&gt;, which means the app will use light mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark Mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode-toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark Mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've added the button, you can test it by clicking it. You should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lSpDphNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/light-mode-tutorial.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSpDphNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/light-mode-tutorial.webp" alt="Light Mode Tutorial" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the button and the header and button text should be updated to say &lt;code&gt;Dark Mode&lt;/code&gt;, thanks to the ternary statements we just implemented. Here's what you should see after clicking the button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CURcHZci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/dark-mode-tutorial.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CURcHZci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/dark-mode-tutorial.webp" alt="Dark Mode Tutorial" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-it-do-something"&gt;
  &lt;/a&gt;
  Make it do something
&lt;/h3&gt;

&lt;p&gt;Awesome! We're toggling dark mode on and off with a button, but we're not changing any styling yet. To do this, we'll need to import &lt;code&gt;useEffect&lt;/code&gt; alongside our existing &lt;code&gt;useState&lt;/code&gt; hook. After importing &lt;code&gt;useEffect&lt;/code&gt;, we can use it below our variable declarations. When using &lt;code&gt;useEffect&lt;/code&gt;, we can pass in a function as the second argument. This function will be called after the component mounts, and will be called again whenever the &lt;code&gt;darkMode&lt;/code&gt; variable changes. If the second argument is an empty function, then the effect will only run once when the component mounts. We can use this to add a listener to the &lt;code&gt;darkMode&lt;/code&gt; variable, and then add or remove the &lt;code&gt;.dark&lt;/code&gt; class from the body when it changes. Our &lt;code&gt;useEffect&lt;/code&gt; hook will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this in place, our button starts to actually make some changes! When dark mode is active, we will see the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NIubnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/dark-mode-tutorial-active.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NIubnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/tobyhagan_post_images/dark-mode-tutorial-active.webp" alt="Dark Mode Tutorial" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-it-look-nice"&gt;
  &lt;/a&gt;
  Make it look nice
&lt;/h3&gt;

&lt;p&gt;We need to update our button with a blank div to style into the slider button. First, remove the ternary statement from the label of the button, and replace it with a &lt;code&gt;div&lt;/code&gt; element. Then, add a the class &lt;code&gt;.dark-mode-slider&lt;/code&gt; to the div as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode-toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode-slider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve a nice slider look, we'll update &lt;code&gt;src/App.css&lt;/code&gt; to add the &lt;code&gt;.dark-mode-toggle&lt;/code&gt; and &lt;code&gt;.dark-mode-slider&lt;/code&gt; classes from our button above. Add the following to &lt;code&gt;src/App.css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Button Styles */&lt;/span&gt;

&lt;span class="nc"&gt;.dark-mode-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dark-mode-toggle&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dark-mode-slider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e3440&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.dark&lt;/span&gt; &lt;span class="nc"&gt;.dark-mode-slider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see we have positioned the slider to the left for our default light mode, then when the &lt;code&gt;.dark&lt;/code&gt; class is added to the body, we'll move the slider to the right using CSS transitions. This will give the slider a nice sliding effect, giving your application a nice polished feel. This is just the beginning of what we can do with dark mode, as you can store values to local storage, then access them when the user returns to the site. We'll be covering this in the next tutorial.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>AWS EKS Connector - Manage all your Kubernetes Clusters in one place</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Tue, 04 Jan 2022 03:30:11 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-eks-connector-manage-all-your-kubernetes-clusters-in-one-place-56g8</link>
      <guid>https://dev.to/aws-builders/aws-eks-connector-manage-all-your-kubernetes-clusters-in-one-place-56g8</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html"&gt;Amazon EKS Connector&lt;/a&gt; is now generally available. With EKS Connector, you can now extend the EKS console to view your Kubernetes clusters outside AWS. What !?! Yes, now we can use the EKS console to visualize the Kubernetes clusters, both EKS and non-EKS clusters running in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On-premises Kubernetes Cluster&lt;/li&gt;
&lt;li&gt;Self-managed Clusters running on AWS EC2 instances&lt;/li&gt;
&lt;li&gt;Clusters from other cloud providers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In today's blog, we will see how to connect the kubernetes clusters from my home lab and Azure / GCP Cloud providers along with EKS using eksctl. Once connected, we can see the cluster details, configurations, and workloads in one place on the EKS console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-clusters"&gt;
  &lt;/a&gt;
  Kubernetes Clusters
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Home Lab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have the home lab kubernetes cluster running on my mini pc that's running Linux. It was previously running on Raspberry Pi, and later I switched the lab to mini pc. I often flash Raspberry Pi for my IoT experiments; there are no apparent reasons. You can set up the kubernetes cluster on Raspberry Pi if you wish. I'm using K3s - lightweight kubernetes distribution designed for running production workloads in resource-constrained, IoT edge devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Kubernetes Service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Amazon EKS connector can also connect the Kubernetes clusters running on other cloud providers. I've set up the AKS (Azure Kubernetes Service) for this blog in the Azure environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EKS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've EKS cluster along with the other clusters too. Amazon Elastic Kubernetes Service (Amazon EKS) is a managed container service to run and scale Kubernetes applications in AWS infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-a-cluster"&gt;
  &lt;/a&gt;
  Registering a Cluster
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;eksctl&lt;/code&gt; simplifies registering non-EKS clusters by creating the required AWS resources and generating Kubernetes manifests for EKS Connector to apply to the external cluster.&lt;/p&gt;

&lt;p&gt;To register or connect a non-EKS Kubernetes cluster, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl register cluster &lt;span class="nt"&gt;--name&lt;/span&gt; siva-home-lab &lt;span class="nt"&gt;--provider&lt;/span&gt; rancher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The supported providers are : EKS_ANYWHERE, ANTHOS, GKE, AKS, OPENSHIFT, TANZU, RANCHER, EC2, OTHER&lt;/p&gt;

&lt;p&gt;When registering, eksctl creates three yaml files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;eks-connector.yaml - Deploys EKS connector agent&lt;/li&gt;
&lt;li&gt;eks-connector-clusterrole.yaml - Cluster Role of cluster&lt;/li&gt;
&lt;li&gt;eks-connector-console-dashboard-full-access-group.yaml - Console Dashboard Full Access
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl register cluster &lt;span class="nt"&gt;--name&lt;/span&gt; siva-home-lab &lt;span class="nt"&gt;--provider&lt;/span&gt; rancher
2022-01-03 21:30:07 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  creating IAM role &lt;span class="s2"&gt;"eksctl-20220103213007309381"&lt;/span&gt;
2022-01-03 21:30:17 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  registered cluster &lt;span class="s2"&gt;"siva-home-lab"&lt;/span&gt; successfully
2022-01-03 21:30:17 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  wrote file eks-connector.yaml to /Users/ksivamuthu/personal
2022-01-03 21:30:17 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  wrote file eks-connector-clusterrole.yaml to /Users/ksivamuthu/personal
2022-01-03 21:30:17 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  wrote file eks-connector-console-dashboard-full-access-group.yaml to /Users/ksivamuthu/personal
2022-01-03 21:30:17 &lt;span class="o"&gt;[!]&lt;/span&gt;  note: &lt;span class="s2"&gt;"eks-connector-clusterrole.yaml"&lt;/span&gt; and &lt;span class="s2"&gt;"eks-connector-console-dashboard-full-access-group.yaml"&lt;/span&gt; give full EKS Console access to IAM identity &lt;span class="s2"&gt;"arn:aws:iam::495775103319:user/siva"&lt;/span&gt;, edit &lt;span class="k"&gt;if &lt;/span&gt;required&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;read &lt;/span&gt;https://docs.aws.amazon.com/eks/latest/userguide/connector-grant-access.html &lt;span class="k"&gt;for &lt;/span&gt;more info
2022-01-03 21:30:17 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  run &lt;span class="sb"&gt;`&lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; eks-connector.yaml,eks-connector-clusterrole.yaml,eks-connector-console-dashboard-full-access-group.yaml&lt;span class="sb"&gt;`&lt;/span&gt; before 07 Jan 22 02:30 UTC to connect the cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply the generated YAMLs in your cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; eks-connector.yaml, &lt;span class="se"&gt;\&lt;/span&gt;
            eks-connector-clusterrole.yaml, &lt;span class="se"&gt;\&lt;/span&gt;
            eks-connector-console-dashboard-full-access-group.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dashboard-workloads-configuration-amp-tags"&gt;
  &lt;/a&gt;
  Dashboard - Workloads, Configuration &amp;amp; Tags
&lt;/h2&gt;

&lt;p&gt;Once the cluster is registered and yamls are applied, you can view your non-EKS cluster in EKS Console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dKo4X_Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dke79nvxlccaq6m5rlid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dKo4X_Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dke79nvxlccaq6m5rlid.png" alt="cluster" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the workloads, configuration and manage tags of the non-eks clusters.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRtsIMfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/actwbvnep27bdu2n3rc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRtsIMfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/actwbvnep27bdu2n3rc6.png" alt="cluster" width="880" height="298"&gt;&lt;/a&gt;&lt;br&gt;
Let’s register the AKS cluster by repeating the registration steps.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7FwegKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp9kmy64lble2z44kuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7FwegKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp9kmy64lble2z44kuqa.png" alt="workloads" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deregistering-a-cluster"&gt;
  &lt;/a&gt;
  Deregistering a cluster
&lt;/h2&gt;

&lt;p&gt;To deregister cluster, you can use eksctl command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl deregister cluster &lt;span class="nt"&gt;--name&lt;/span&gt; siva-home-lab &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It deregisters the cluster and we can delete the API server objects using kubectl&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl deregister cluster &lt;span class="nt"&gt;--name&lt;/span&gt; siva-home-lab &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1
2022-01-03 21:56:39 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  deleting IAM role &lt;span class="s2"&gt;"eksctl-20220103213007309381"&lt;/span&gt;
2022-01-03 21:56:39 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  unregistered cluster &lt;span class="s2"&gt;"siva-home-lab"&lt;/span&gt; successfully
2022-01-03 21:56:39 &lt;span class="o"&gt;[&lt;/span&gt;ℹ]  run &lt;span class="sb"&gt;`&lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; eks-connector.yaml,eks-connector-clusterrole.yaml,eks-connector-console-dashboard-full-access-group.yaml&lt;span class="sb"&gt;`&lt;/span&gt; on your cluster to remove EKS Connector resources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;EKS Anywhere and EKS Connector are part of a clear play for businesses embracing hybrid cloud and private infrastructure setups. EKS Connector supports self-managed clusters on EC2, EKS Anywhere clusters running on-premises, and other Kubernetes clusters running outside of AWS to the EKS console. It’s great tool providing single pane of dashboard managing all of your Kubernetes cluster including EKS &amp;amp; Non EKS.&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at &lt;a href="https://www.ceiamerica.com"&gt;Computer Enterprises Inc&lt;/a&gt; from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven’t already. Please follow me &lt;a href="https://www.twitter.com/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt; Twitter or check out my blogs at &lt;a href="https://sivamuthukumar.com"&gt;https://sivamuthukumar.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>containers</category>
    </item>
    <item>
      <title>¿Cómo configurar las posiciones en MGPanel al momento de crear un sitio web?</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Tue, 04 Jan 2022 03:28:18 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/como-configurar-las-posiciones-en-mgpanel-al-momento-de-crear-un-sitio-web-3ah0</link>
      <guid>https://dev.to/eloymanuelch/como-configurar-las-posiciones-en-mgpanel-al-momento-de-crear-un-sitio-web-3ah0</guid>
      <description>&lt;p&gt;Para configurar las posiciones de tu proyecto web, primero debemos entender que son. Las posiciones son la estructura base del sitio web, pero no te confundas esto es html común y silvestre, ¡sí! html que tu ya conoces, si partimos de esto la estructura de un sitio web sería así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
     &amp;lt;head&amp;gt;
     &amp;lt;/head&amp;gt;
     &amp;lt;body&amp;gt;
        Dentro del body estarían las posiciones
     &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En MGPanel tenemos 30 posiciones o secciones dónde vamos a poder construir nuestros módulos, imagínate que son las diferentes partes que va a tener tu sitio web. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f37pE_b4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twz5oirmhyc23m5zzwqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f37pE_b4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twz5oirmhyc23m5zzwqs.png" alt="Image description" width="880" height="708"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Es decir en la web se vería algo así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       &amp;lt;div class="position1 header" id="Header"&amp;gt;
          &amp;lt;div class="container"&amp;gt;
              Aquí es donde se programaría el módulo
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        .
        .
        .
     &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo importante a tener en cuenta es que sí en las &lt;strong&gt;etiquetas de apertura&lt;/strong&gt; abres 2 etiquetas, en las de cierre debes cerrar 2 también. &lt;/p&gt;

&lt;p&gt;Puedes colocar la cantidad de etiquetas html que desees, siempre y cuando cierres la misma cantidad que abriste, a demás estas pueden ser etiquetas semánticas como, article, section, entre otras:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Am6oC2Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8oza90ox9gahbjetvir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Am6oC2Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8oza90ox9gahbjetvir.png" alt="Image description" width="763" height="709"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se veria así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       &amp;lt;section class="loquequieras" &amp;gt;
          &amp;lt;div class="row"&amp;gt;
              Aquí es donde se programaría el módulo
          &amp;lt;/div&amp;gt;
        &amp;lt;/section&amp;gt;
        .
        .
        .
     &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En el siguiente ejemplo podemos ver gráficamente cuales son las posiciones en un sitio web real:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN9XYUvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq9815uvua4qwghq93xs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN9XYUvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq9815uvua4qwghq93xs.jpeg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, dentro de cada posición podemos crear infinito número de módulos, por lo que podemos con una sola posición crear todo el sitio web, claro eso no se recomienda porque la intensión de las posiciones es que puedas reutilizar código, es decir aquellas posiciones que van hacer iguales en todos las páginas del sitio web solo se crearán una vez, pero estas funcionarán en cada página donde esté configurada.&lt;/p&gt;

&lt;p&gt;Para eso podemos decidir si la posición estará disponible en todo el sitio web, solo en el Home o página principal o en todas las páginas excepto en el Home o página principal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6NHYKWC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o62iwv4ciqmqhz8x8gu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NHYKWC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o62iwv4ciqmqhz8x8gu6.png" alt="Image description" width="664" height="177"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;También tenemos la disponibilidad de activar o desactivar módulos si no los estamos usando. &lt;/p&gt;

&lt;p&gt;Por defecto al momento de crear un sitio web en MGPanel, vienen activas unas 4 posiciones, que son las que usa el sitio de muestra al momento de crearlo, pero entre ellos está la posición  No. 12 que tiene por nombre &lt;strong&gt;Interactivo&lt;/strong&gt;, en esta posición es donde se cargarán los contenidos de las sub-páginas del sitio web, dicha posición no debemos desactivarla, ya que sin ella no se mostrarán los contenidos de las otras páginas del sitio web.&lt;/p&gt;

&lt;p&gt;En el mismo momento que entiendas el uso de las posiciones en MGPanel verás el potencial de todo lo que puedes crear, literalmente vas a tener total libertar para crear y segmentar tu código de una forma que será mucho más fácil para mantener a largo plazo. &lt;/p&gt;

&lt;p&gt;¿Quieres ver más contenido en español como este? Sígueme en Dev como &lt;a class="mentioned-user" href="https://dev.to/eloymanuelch"&gt;@eloymanuelch&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;¡Nos vemos en la próxima programadores!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>mgpanel</category>
    </item>
  </channel>
</rss>
