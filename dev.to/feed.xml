<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deploying Multi-Node Kubernetes Cluster on AWS Using Ansible Automation</title>
      <author>Suraj Warbhe</author>
      <pubDate>Wed, 01 Sep 2021 11:31:55 +0000</pubDate>
      <link>https://dev.to/surajwarbhe/deploying-multi-node-kubernetes-cluster-on-aws-using-ansible-automation-1b7e</link>
      <guid>https://dev.to/surajwarbhe/deploying-multi-node-kubernetes-cluster-on-aws-using-ansible-automation-1b7e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usecase"&gt;
  &lt;/a&gt;
  USE-CASE
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create Ansible Playbook to launch 3 AWS EC2 Instance&lt;/li&gt;
&lt;li&gt;Create Ansible Playbook to configure Docker over those instances&lt;/li&gt;
&lt;li&gt;Create Playbook to configure K8S Master, K8S Worker Nodes on the above created EC2 Instances using kubeadm&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite-for-rhel8"&gt;
  &lt;/a&gt;
  Pre-requisite: (FOR RHEL-8)
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Controller node should be setup with ansible installation and configuration, when controller node is RHEL8&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;IAM&lt;/code&gt; user having Administrator Access and note down their &lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;Key pair&lt;/code&gt; in &lt;code&gt;(.pem)&lt;/code&gt; format on AWS Cloud, download it in your local system and transfer it over RHEL-8 through &lt;code&gt;WinSCP&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-ansible-installation-and-configuration"&gt;
  &lt;/a&gt;
  STEP 1 : Ansible Installation and Configuration
&lt;/h3&gt;

&lt;p&gt;Install Ansible on Base OS (RHEL8), configure ansible configuration file. &lt;br&gt;
To do this use below commands-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install python3 -y

pip3 install ansible -y

vim /etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: &lt;code&gt;Python&lt;/code&gt; should be installed on your OS to setup Ansible.&lt;br&gt;
Write below commands in your configuration &lt;code&gt;ansible.cfg&lt;/code&gt; file. For this you can prefer any editor like &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;gedit&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[defaults]
inventory=/root/ip.txt  #inventory path
host_key_checking=False
command_warnings=False
deprecation_warnings=False
ask_pass=False
roles_path= /root/roles      #roles path
force_valid_group_names = ignore
private_key_file= /root/awskey.pem   #your key-pair 
remote_user=ec2-user

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-ansible-roles"&gt;
  &lt;/a&gt;
  STEP 2 : Create Ansible Roles
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside your roles workspace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use Below commands to create 3 different roles&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Kubernetes Cluster&lt;/li&gt;
&lt;li&gt;For Kubernetes Master&lt;/li&gt;
&lt;li&gt;For Kubernetes Slaves
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-galaxy init &amp;lt;role_name&amp;gt;

ansible-galaxy init kube_cluster
ansible-galaxy init k8s_master
ansible-galaxy init k8s_slave
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-write-role-for-kubernetes-cluster"&gt;
  &lt;/a&gt;
  STEP 3 : Write role for Kubernetes Cluster
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 I am going to create cluster over &lt;code&gt;Amazon Linux instances&lt;/code&gt;.&lt;br&gt;
Write below source code inside it-&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Installing boto &amp;amp; boto3 libraries
  pip:
    name: "{{ item }}"
    state: present
  loop: "{{ lib_names }}"

- name: Creating Security Group for K8s Cluster
  ec2_group:
    name: "{{ sg_name }}"
    description: Security Group for allowing all port
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    rules:
    - proto: all
      cidr_ip: 0.0.0.0/0
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0

- name: Launching three EC2 instances on AWS
  ec2:
    key_name: "{{ keypair }}"
    instance_type: "{{ instance_flavour }}"
    image: "{{ ami_id }}"
    wait: true
    group: "{{ sg_name }}"
    count: 1
    vpc_subnet_id: "{{ subnet_name }}"
    assign_public_ip: yes
    region: "{{ region_name }}"
    state: present
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    instance_tags:
      Name: "{{ item }}"
  register: ec2
  loop: "{{ instance_tag }}"

- name: Add 1st instance to host group ec2_master
    add_host:
    hostname: "{{ ec2.results[0].instances[0].public_ip }}"
    groupname: ec2_master

- name: Add 2nd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[1].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Add 3rd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[2].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Waiting for SSH
  wait_for:
    host: "{{ ec2.results[2].instances[0].public_dns_name }}"
    port: 22
    state: started

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are using &lt;code&gt;pip&lt;/code&gt; module to install two packages — &lt;code&gt;boto&lt;/code&gt; &amp;amp; &lt;code&gt;boto3&lt;/code&gt;, because these packages has the capability to contact to AWS to launch the EC2 instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ec2_group&lt;/code&gt; module to create Security Group on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ec2&lt;/code&gt; module to launch instance on AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;register&lt;/code&gt; keyword will store all the Metadata in a variable called &lt;code&gt;ec2&lt;/code&gt; so that in future we can parse the required information from it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;loop&lt;/code&gt; which again using one variable which contains one list. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;item&lt;/code&gt; keyword we are calling the list values one after another.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_host&lt;/code&gt; module which has the capability to create one dynamic inventory while running the playbook. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; keyword tells the values to store in the dynamic host group.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wait_for&lt;/code&gt; module to hold the playbook for few seconds till all the node’s SSH service started.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt; are stored inside &lt;code&gt;vault&lt;/code&gt; files to hide it from other users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔶 Go inside the vars folder. We have to write entire variables inside this folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can directly mention variables inside tasks file but it is good practice to write them inside &lt;code&gt;vars&lt;/code&gt; files so that we can change according to our requirements.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/vars

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;instance_tag:
        - master
        - slave1
        - slave2

lib_names:
        - boto
        - boto3

sg_name: Allow_All_SG
region_name: ap-south-1
subnet_name: subnet-49f0e521
ami_id: ami-010aff33ed5991201
keypair: awskey
instance_flavour: t2.small
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-write-role-for-kubernetes-master"&gt;
  &lt;/a&gt;
  STEP 4 : Write role for Kubernetes Master
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s master-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm, kubelet &amp;amp; kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Ip tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting kubeadm service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting HOME directory for .kube Directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copying file config file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Addons e.g flannel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the token&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store output of token in a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_master/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "systemctl"
  shell: "sysctl --system"

- name: "Starting kubeadm service"
  shell: "kubeadm init  --ignore-preflight-errors=all"

- name: "Creating .kube Directory"
  file:
     path: $HOME/.kube
     state: directory

- name: "Copying file config file"
  shell: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
  ignore_errors: yes

- name: "Installing Addons e.g flannel"
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

- name: "Creating the token"
  shell: "kubeadm token create --print-join-command"
  register: token

- debug:
       msg: "{{ token.stdout }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;p&gt;1.We need to install &lt;code&gt;kubeadm&lt;/code&gt; program on our master node to setup K8s cluster.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are installing &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Kubeadm&lt;/code&gt; &amp;amp; &lt;code&gt;iproute-tc&lt;/code&gt; packages on our Master Instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;service&lt;/code&gt; module is used to start the docker &amp;amp; kubelet service. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt; module to run kubeadm command which will pull all the Docker Images required to run Kubernetes Cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to change our Docker default cgroup to &lt;code&gt;systemd&lt;/code&gt;, otherwise kubeadm won't be able to setup K8s cluster. To do that at first using &lt;code&gt;copy&lt;/code&gt; module we are creating one file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; &amp;amp; putting some content in it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module we are initializing the cluster &amp;amp; then using &lt;code&gt;shell&lt;/code&gt; module we are setting up &lt;code&gt;kubectl&lt;/code&gt; command on our Master Node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module I deployed &lt;code&gt;Flannel&lt;/code&gt; on the Kubernetes Cluster so that it create the overlay network setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the 2nd &lt;code&gt;command&lt;/code&gt; module is used to get the token for the slave node to join the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;register&lt;/code&gt; I stored the output of 2nd &lt;code&gt;command&lt;/code&gt; module in a variable called &lt;code&gt;token&lt;/code&gt;. Now this token variable contain the command that we need to run on slave node, so that it joins the master node.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-5-write-role-for-kubernetes-slaves"&gt;
  &lt;/a&gt;
  STEP 5 : Write role for Kubernetes Slaves
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s slaves-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm,kubelet kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the IP tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the join command which we store while configuring master&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_slave/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: "systemctl"
  shell: "sysctl --system"

- name: joining to Master
  command: "{{ hostvars[groups['ec2_master'][0]]['token']['stdout'] }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-write-ansible-vault-files"&gt;
  &lt;/a&gt;
  STEP 6 : Write Ansible Vault Files
&lt;/h3&gt;

&lt;p&gt;🔶 Go to your roles workspace&lt;br&gt;
🔶 Run below command and create vault file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-vault create &amp;lt;filename&amp;gt;.yml

ansible-vault create cred.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 It will ask to provide one vault password &amp;amp; provide as per your choice.&lt;br&gt;
🔶 Then, open it with editor, create two variables in this file &amp;amp; put your AWS &lt;code&gt;access key&lt;/code&gt; &amp;amp; &lt;code&gt;secret key&lt;/code&gt; as values. &lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;access_key: ABCDEFGHIJKLMN
secret_key: abcdefghijklmn12345
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Save the file with command &lt;code&gt;(:wq)&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-create-setup-file"&gt;
  &lt;/a&gt;
  STEP 7 : Create Setup file
&lt;/h3&gt;

&lt;p&gt;Now it's finally the time to create the &lt;code&gt;setup.yml&lt;/code&gt; file inside same workspace which we gonna run to setup this entire infrastructure on AWS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- hosts: localhost
  gather_facts: no
  vars_files:
         - cred.yml
  tasks:
         - name: "Running kube_cluster role"
           include_role:
                name: kube_cluster


- hosts: ec2_master
  gather_facts: no
  tasks:
    - name: Running K8s_Master Role
      include_role:
        name: k8s_master

- hosts: ec2_slave
  gather_facts: no
  tasks:
    - name: Running K8s_Slave Role
      include_role:
        name: k8s_slave
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 Write proper &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;vault file name&lt;/code&gt; and &lt;code&gt;role name&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-7-run-your-ansible-playbook"&gt;
  &lt;/a&gt;
  STEP 7 : RUN your Ansible Playbook
&lt;/h3&gt;

&lt;p&gt;🔶 use below commands to run your ansible playbook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook setup.yml --ask-vault-pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Next it will prompt you to pass the password of your Ansible Vault (cred.yml file), provide your password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" alt="root@localhost__roles 01-09-2021 02_48_38 PM"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" alt="root@localhost__roles 01-09-2021 02_49_15 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" alt="root@localhost__roles 01-09-2021 02_49_46 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#yay-it-run-successfully-and-setup-entire-infrastructure"&gt;
  &lt;/a&gt;
  YAY!, IT RUN SUCCESSFULLY AND SETUP ENTIRE INFRASTRUCTURE
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" alt="Connect to instance _ EC2 Management Console - Google Chrome 01-09-2021 02_57_17 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-8-testing"&gt;
  &lt;/a&gt;
  STEP 8 : TESTING...
&lt;/h3&gt;

&lt;p&gt;🔶 Now lets check our multi-node cluster is using below commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" alt="Select root@ip-172-31-35-184_~ 01-09-2021 02_53_32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#here-we-can-see-our-who-cluster-is-launched-successfully-and-our-all-nodes-is-ready-phase"&gt;
  &lt;/a&gt;
  🔶 Here we can see our who cluster is launched successfully and our all nodes is ready phase.
&lt;/h6&gt;

&lt;p&gt;🔶 Now lets create a deployment on master node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create deployment myd --image=httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WOJXS35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w9w3hjsnzg5xg3rvlkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WOJXS35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w9w3hjsnzg5xg3rvlkg.png" alt="root@ip-172-31-35-184_~ 01-09-2021 02_57_06 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 here we can see our deployment is created successfully&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#github-link-httpsgithubcomsurajwarbhek8smasterslaveonaws"&gt;
  &lt;/a&gt;
  GitHub Link: &lt;a href="https://github.com/surajwarbhe/K8s-master-slave-on-aws"&gt;https://github.com/surajwarbhe/K8s-master-slave-on-aws&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#linkedin-profile-httpswwwlinkedincominsurajwarbhe"&gt;
  &lt;/a&gt;
  LinkedIn profile: &lt;a href="https://www.linkedin.com/in/suraj-warbhe/"&gt;https://www.linkedin.com/in/suraj-warbhe/&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" alt="68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f69346776387341505f5f586746673d3d2d3931363135303430372e3136316636643238343363343039646134303138393"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ansible</category>
      <category>kubernetes</category>
      <category>aws</category>
      <category>ansiblegalaxy</category>
    </item>
    <item>
      <title>How Coil supports the open-source projects we use</title>
      <author>Uchi Uchibeke</author>
      <pubDate>Wed, 01 Sep 2021 11:02:02 +0000</pubDate>
      <link>https://dev.to/coil/how-coil-supports-the-open-source-projects-we-use-1fb1</link>
      <guid>https://dev.to/coil/how-coil-supports-the-open-source-projects-we-use-1fb1</guid>
      <description>&lt;p&gt;For the past three months at Coil, we have started to develop &lt;a href="https://github.com/interledger/rafiki"&gt;Rafiki&lt;/a&gt;, an open-source All-In-One Solution for Interledger Wallets. Throughout the process, we have continued to think more deeply about how we support the open-source community and the packages that we use in Rafiki and at Coil. In this blog post, we are sharing some discoveries and decisions about what we want sustaining open-source to look like at Coil.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supporting-opensource-projects-and-maintainers"&gt;
  &lt;/a&gt;
  Supporting open-source projects and maintainers
&lt;/h3&gt;

&lt;p&gt;Thinking about how we want to support the projects that we depend on, we derived for principles to consider: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#equitably-support-all-projects"&gt;
  &lt;/a&gt;
  Equitably support all projects
&lt;/h4&gt;

&lt;p&gt;Currently, when you want to fund or donate to an open-source project, your contribution only touches the single package you choose. This approach benefits that package but leaves out the numerous packages that it depends on. If those dependency packages are smaller, don't have a very strong community to back them, or do not run promotions to sustain the project, the gap in support grows even more. This is unfortunately built into most systems. With funding options like GitHub Sponsors, Open Collective, Buy Me A Coffee, and others, donations only go to the single package and maintainers, and not packages that they depend on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#promote-transparency-for-all-maintainers"&gt;
  &lt;/a&gt;
  Promote transparency for all maintainers
&lt;/h4&gt;

&lt;p&gt;With many open-source projects, we can see the history of maintenance, yet we cannot see a history of where donated funds go. Funds sometimes go to events, travel, and compensation for the core team, but not to the packages that enable the parent package to receive funds.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fund-projects-that-drive-impact-for-the-community-and-coil"&gt;
  &lt;/a&gt;
  Fund projects that drive impact for the community and Coil
&lt;/h4&gt;

&lt;p&gt;When we use open-source projects, we want to be able to fund those projects and the projects they depend on. All of the packages used, all the way down the dependency tree&lt;br&gt;
should receive some money from Coil’s monthly donation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#drive-sustainability"&gt;
  &lt;/a&gt;
  Drive sustainability
&lt;/h4&gt;

&lt;p&gt;We want our contribution to open source to drive sustainability for all projects that we use, not only the extremely popular projects. After all, it’s not just the popular projects that are used in our production codebase: it’s every dependency we have, all the way down the dependency trees, that make Coil as amazing as it is.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://xkcd.com/2347/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxE7YJ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ma3ndu4d7p4jhuucov0.png" alt="dependency_2x"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Title text: Someday ImageMagick will finally break for good and we'll have a long period of scrambling as we try to reassemble civilization from the rubble.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#coil-supports-opensource-projects-with-flossbank"&gt;
  &lt;/a&gt;
  Coil supports open-source Projects with Flossbank
&lt;/h3&gt;

&lt;p&gt;As we continue to promote a free and open web, maintainers and communities continue to be a top priority. That’s why we’ve sponsored student Hackathons with Major league Hacking, and MozFest, and W3C’s TPAC, and that’s also why we’re announcing support for project maintainers through &lt;a href="https://flossbank.com/"&gt;Flossbank&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We chose Flossbank as our donation mechanism because of its ability to traverse dependency trees and it's unique way of distributing our donation at each level. It’s by no means perfect, but we’re excited to see the effort being put toward a more equitable distribution of donations.&lt;/p&gt;

&lt;p&gt;Some of the benefits of using Flossbank are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank is maintenance-free.&lt;/strong&gt; It’s impossible for us to continuously determine what our top open-source dependencies are, so we’re thrilled that Flossbank can automatically check out our GitHub to determine what packages should receive our donation, and how much of the donation they should receive.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank supports a wide range of dependencies.&lt;/strong&gt; We believe our open-source dependences are just as valuable as the code our engineers write, down to each and every line. Why should we not compensate the engineers maintaining the open-source code the same way we compensate our own engineers?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank only take a fee to keep the lights on.&lt;/strong&gt; Compared to other donation mechanisms, Flossbank takes only 1% of a donation, which means 99% of our donation hits the maintainers’ bank accounts. Compared to others, which take 10%, this is a huge marginal impact increase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Os-fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwhj90o02mmif5onsraf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Os-fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwhj90o02mmif5onsraf.png" alt="Flossbank"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#donation-impact"&gt;
  &lt;/a&gt;
  Donation impact
&lt;/h4&gt;

&lt;p&gt;With Flossbank, we can measure the impact of our donations and see all the packages our donations have been allocated to. Every month, our donation is spread to the current packages that Coil is using. Over the past few months, this is how it’s shaken out:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#total-toplevel-packages-supported"&gt;
  &lt;/a&gt;
  Total top-level packages supported
&lt;/h5&gt;

&lt;p&gt;During the month of August 2021, we supported 804 top-level Dependencies. These are dependencies we use across all  of our organization’s Github repositories that are defined within our package manifests, files like package.json and requirements.txt, and Gemfile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AllK-3jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1l5h7qy4vqdtc39ijhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AllK-3jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1l5h7qy4vqdtc39ijhm.png" alt="Coil supports open-source projects with Flossbank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-packages-supported"&gt;
  &lt;/a&gt;
  Total packages supported
&lt;/h4&gt;

&lt;p&gt;During the month of August 2021, we supported 2,509 Total Current Package Dependencies. These include our top-level packages, as well as every dependency of those packages, and dependencies of those packages, etc., etc. For example, we use and support node-fetch and, all of the dependencies that node-fetch uses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enterprise.flossbank.com/organization/6041493a8aa076242464df62/ledger"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZD8Hi_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t904r9nbpdt6h65qek39.png" alt="Coil funds over 2,000 open-source projects with Flossbank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As Coil develops more open-source technologies like Rafiki, we think it’s important to compensate developers who have open-sourced their code and actively maintain it. We think Flossbank is the first step to a more equitable and just method of doing so, and we’re excited to see where the open-source community heads from here, and how Coil will play a part in it.&lt;/p&gt;

&lt;p&gt;To learn more about some projects Coil supports, see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flossbank at &lt;a href="https://flossbank.com/"&gt;flossbank.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Rafiki at &lt;a href="https://github.com/interledger/rafiki"&gt;github.com/interledger/rafiki&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tigerbeetle at &lt;a href="https://www.tigerbeetle.com/"&gt;tigerbeetle.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Developer events at &lt;a href="https://developers.coil.com/community/developer-events"&gt;developers.coil.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>coil</category>
      <category>interledger</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 reasons why nobody is reading your articles and how to fix it</title>
      <author>Andrew Baisden</author>
      <pubDate>Wed, 01 Sep 2021 10:09:11 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/10-reasons-why-nobody-is-reading-your-articles-and-how-to-fix-it-36b6</link>
      <guid>https://dev.to/andrewbaisden/10-reasons-why-nobody-is-reading-your-articles-and-how-to-fix-it-36b6</guid>
      <description>&lt;p&gt;It can feel like you are a ghost when your articles get zero likes and low engagement. This is something that many writers have to deal with unfortunately and some never understand why it is happening to them. I have been writing since 2020 and learned a lot during that time. Here are my thoughts on this topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-dont-have-a-strong-brand-presence-yet"&gt;
  &lt;/a&gt;
  1. You don't have a strong brand presence yet
&lt;/h2&gt;

&lt;p&gt;Articles that perform well, tend to be written by writers who are already established. When you are established you have credibility. It can take weeks or months at the very least before you have some sort of brand that people can recognise. If you have just started writing and you are not well known by anyone yet then you don't really have the reputation to go along with the words that you are writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-content-that-you-write-is-off-brand"&gt;
  &lt;/a&gt;
  2. The content that you write is off brand
&lt;/h2&gt;

&lt;p&gt;You have to write in your element and stay on brand if you intend on growing your following. For example if you are not known for building products on ProductHunt then don't write an article about it because you don't have the experience or proof to back it up. If one day you do become good in that area then you have just given yourself credibility to write that article.&lt;/p&gt;

&lt;p&gt;In another example say you are well known for creating marketing products that help people grow on Twitter. And then you write an article about how to create CSS Art. If you have never talked about it before then people are not going to associate you with it and you are likely to get low engagement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-topic-is-boring-and-not-well-known"&gt;
  &lt;/a&gt;
  3. The topic is boring and not well known
&lt;/h2&gt;

&lt;p&gt;If you write an article about something niche that is not popular and nobody is talking about. Then you can't be surprised when nobody reads it. You see search terms are important when it comes to generating ideas for articles. If it is a popular topic like JavaScript frameworks or building a website then it is highly likely that many people will be searching for information on it.&lt;/p&gt;

&lt;p&gt;You can't expect people to be excited about something that is not going to help them generate money, find work or keep them interested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-it-is-a-copy-and-paste-generic-topic"&gt;
  &lt;/a&gt;
  4. It is a copy and paste generic topic
&lt;/h2&gt;

&lt;p&gt;Holding someones interest is key to getting noticed. There are so many blog articles out there already it is almost impossible to be unique. However if you choose to write a topic that has been talked about so many times lately that it has become repetitive. Then you just become another &lt;strong&gt;me too&lt;/strong&gt; person and it is unlikely that people will want to read the same content over again in such a short space of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-all-text-and-no-media-content"&gt;
  &lt;/a&gt;
  5. All text and no media content
&lt;/h2&gt;

&lt;p&gt;Let me first start by saying that you don't need images, gifs or videos to make your articles interesting. However if all of your articles are going to be big blocks of texts with lots of paragraphs then it is going to look unappealing and too long to read. So many people have short attention spans if you put a big block of text in front of them to read they will loose interest fast. Social media and its quick dopamine hits has made this really prevalent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-you-have-a-small-following"&gt;
  &lt;/a&gt;
  6. You have a small following
&lt;/h2&gt;

&lt;p&gt;This one is quite obvious. If you barely have any followers then of course you are unlikely to have a lot of people reading your content. When you grow and become more popular your articles will perform much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-your-posting-schedule-is-bad"&gt;
  &lt;/a&gt;
  7. Your posting schedule is bad
&lt;/h2&gt;

&lt;p&gt;Timing is everything. Remember that we all live in different time zones so your articles are likely to perform differently depending on where you live. I have posted some articles in the morning which started to perform quite slowly. But as the day progressed the views and engagements started to increase a lot. Don't forget that people are busy too they are not going to be looking at your blog 24/7. Give it some time maybe even a few days for your article to get out there and then the engagement will rise.&lt;/p&gt;

&lt;p&gt;If you choose to post an article right before you go to bed then it is possible that it will get lost in the search results and pushed down the rankings by articles that get posted the following morning when people wake up again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-have-a-poor-writing-style"&gt;
  &lt;/a&gt;
  8. You have a poor writing style
&lt;/h2&gt;

&lt;p&gt;This is an area that you can fix overtime and with practice. The more you write the better you will get at it. Using an app like &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; will improve your writing style as well as clearing up any spelling mistakes. Good writers know how to engage with their audience this is why their books sell in the millions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-your-articles-have-a-beginning-but-no-end"&gt;
  &lt;/a&gt;
  9. Your articles have a beginning but no end
&lt;/h2&gt;

&lt;p&gt;Writing is basically the art of storytelling. There needs to be a beginning, middle and end to the content that you write. So for example if you are writing about an experience that you had or something that you learned then the audience is expecting there to be a resolution so they know how it ended and how they can relate and learn from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-the-article-never-left-your-head"&gt;
  &lt;/a&gt;
  10. The article never left your head
&lt;/h2&gt;

&lt;p&gt;If you have something to say then say it. It's no good talking about what you are going to write and then not actually doing it. Nobody can read your work if its stuck in your head we are not mind readers. This is a problem that many aspiring writers have. Instead of actually writing that article they just put it off indefinitely and create excuses for themselves.&lt;/p&gt;

&lt;p&gt;Tough love but nothing will change until you take action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>writing</category>
    </item>
    <item>
      <title>Configuring Github on your Dev Environment Part One</title>
      <author>Asaju Enitan</author>
      <pubDate>Wed, 01 Sep 2021 09:58:26 +0000</pubDate>
      <link>https://dev.to/x1k/configuring-github-on-your-dev-environment-part-one-gl6</link>
      <guid>https://dev.to/x1k/configuring-github-on-your-dev-environment-part-one-gl6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuring-github-on-your-dev-environment-part-one"&gt;
  &lt;/a&gt;
  Configuring Github on your Dev Environment Part One
&lt;/h2&gt;

&lt;p&gt;Terms&lt;br&gt;
&lt;code&gt;$&lt;/code&gt; means running the command as a normal user but make sure to remote it from your command as it already exists on your terminal  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;The first step in setting up git on your dev environment is installing the git to your environment. Although you can use Git with the web version with &lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;, most of the time you will be interacting with Github from within your dev environment using either Terminal and/or applications.&lt;br&gt;
First go to &lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt; and install for your OS.&lt;br&gt;
For Windows user, using the installer will also install the git bash application which you can use to run &lt;code&gt;git&lt;/code&gt; commands.&lt;br&gt;&lt;br&gt;
Linux users will have to download for their distribution &lt;a href="https://git-scm.com/download/linux"&gt;https://git-scm.com/download/linux&lt;/a&gt;&lt;br&gt;&lt;br&gt;
While MacOS users can use &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; to install by running &lt;code&gt;brew install git&lt;/code&gt;. Make sure to install &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; if you don't have it already.&lt;br&gt;&lt;br&gt;
If you like living on the edge, you can build from source with the tarballs from &lt;a href="https://www.kernel.org/pub/software/scm/git"&gt;kernel.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-configuration"&gt;
  &lt;/a&gt;
  Basic Configuration
&lt;/h2&gt;

&lt;p&gt;After going through the installation process for your OS, you will need to make configurations. But before that, you should make sure that &lt;code&gt;git&lt;/code&gt; installed successfully on your environment. For Windows users, during installation, you will be asked if you want to install to path, if you didn't check the box, you will need to add it to your environment variables.&lt;br&gt;&lt;br&gt;
Git comes with a tool called &lt;code&gt;git config&lt;/code&gt; that lets add and read configuration variables that control how you use Git. These variables can be saved in three different places;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/etc/gitconfig&lt;/code&gt; file: The variables saved in this location applies to every user on your system and all the repositories. To save configuration variables to this file you must pass &lt;code&gt;--system&lt;/code&gt; flag to the &lt;code&gt;git config&lt;/code&gt; command. You will need administrative or superuser privilege to use this command because it writes to a system file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$HOME/.gitconfig&lt;/code&gt; or &lt;code&gt;$HOME/.config/git/config&lt;/code&gt; file: The configuration variables saved to this file apply only to a single user, You. You can save configuration variables to this file by passing &lt;code&gt;--global&lt;/code&gt; flag to the &lt;code&gt;git config&lt;/code&gt; command. The variables in this file affects only the repositories that you manage.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config&lt;/code&gt; file in the Git directory i.e &lt;code&gt;.git/&lt;/code&gt; in your project directory. To know if you have this directory in your project folder, you can run &lt;code&gt;ls -al&lt;/code&gt; which displays all the hidden files/folders in your project, you can also access see this by checking &lt;strong&gt;Show hidden files&lt;/strong&gt; in your OS's file explorer.
Now that you know where to store files. Let's add some configuration variables. You will be going with the second option because you will want to apply to yourself and all the repositories you own.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#setting-your-identity"&gt;
  &lt;/a&gt;
  Setting Your Identity
&lt;/h3&gt;

&lt;p&gt;The first thing you should do when you install Git is to set your user name and email address. Git uses this to bind every commit towards you. This is important so that you will be able to keep track of every commit you make.&lt;br&gt;
Open your preferred terminal and type the following;&lt;br&gt;
&lt;code&gt;$ git config --global user.name "John Happer"&lt;/code&gt; This command sets the user name. Replace the &lt;code&gt;John Happer&lt;/code&gt; with your full name.&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global user.email "johnhapper@example.com"&lt;/code&gt; This commands sets the email address. Make sure you replace &lt;code&gt;johnhapper@example.com&lt;/code&gt; with the email you registered your github account with. Using the &lt;code&gt;--global&lt;/code&gt; flag makes sure to set these variables to only you but affects all the repositories.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#editor"&gt;
  &lt;/a&gt;
  Editor
&lt;/h3&gt;

&lt;p&gt;You have set up your identity, you can configure the default text editor that will be used when you need to type messages or make amends to commits. It is not a must though as Git will make use of your system's default editor.&lt;br&gt;&lt;br&gt;
But if you want to use a different editor, for example VSCode, you can run the command like this&lt;br&gt;
&lt;code&gt;$ git config --global core.editor code&lt;/code&gt;. This will use the VSCode executable &lt;code&gt;code&lt;/code&gt;. For windows users, you will need to specify the full path to the editor you want to use. For example, if you want to use VSCode on windows, you will need to type something like this;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global core.editor "C:/Program Files/Visual Studio Code/code.exe"&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Make sure you get the correct path as this can cause issues when Git attempts to open the executable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#default-branch"&gt;
  &lt;/a&gt;
  Default Branch
&lt;/h3&gt;

&lt;p&gt;By default, when you run &lt;code&gt;git init&lt;/code&gt; to initialize a new repository for your project, Git will create a branch called &lt;strong&gt;master&lt;/strong&gt;. But you can set a different name for the initial branch. For example to set &lt;strong&gt;main&lt;/strong&gt; as the default branch name, type&lt;br&gt;
&lt;code&gt;$ git config --global init.defaultBranch main&lt;/code&gt; and it will set &lt;strong&gt;main&lt;/strong&gt; as your default initial branch every time you run &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Phew!, you have done a lot. To check the current variables you have set, you can use the &lt;code&gt;git config --list&lt;/code&gt; to show the list of everything Git has set. This command reads from all the Git &lt;code&gt;config&lt;/code&gt; files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --list
user.name=John Happer
user.email=johnhapper@example.com
core.editor=vim
color.status=auto
color.branch=auto
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;...&lt;/code&gt; The rest of the variables have been truncated.&lt;br&gt;
At any point if you forgot a command, you can run &lt;code&gt;$ git help &amp;lt;verb&amp;gt;&lt;/code&gt; to get a comprehensive manual for that command. For example you can get the documentation for &lt;code&gt;git commit&lt;/code&gt; by running &lt;code&gt;$ git help config&lt;/code&gt;. For short and concise help options, you can use the &lt;code&gt;$ git &amp;lt;verb&amp;gt; -h&lt;/code&gt; for example &lt;code&gt;$ git add -h&lt;/code&gt; to get help for the github add command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;usage: git add [&amp;lt;options&amp;gt;] [--] &amp;lt;pathspec&amp;gt;...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --chmod (+|-)x        override the executable bit of the listed files
    --pathspec-from-file &amp;lt;file&amp;gt;
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all about basic setup for your github. Next up, we will look at setting up your git commit messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-files"&gt;
  &lt;/a&gt;
  Adding Files
&lt;/h3&gt;

&lt;p&gt;You have made changes to your code, and now you need to push to the remote repository. To do that, you will use the &lt;code&gt;git add&lt;/code&gt; command. You can add files in several ways. Running &lt;code&gt;git add .&lt;/code&gt; will add all modified and new files and stage them for commit and push. But you can also specify which file you want to add by running &lt;code&gt;git add path/to/file/in/the/repositiry&lt;/code&gt; i.e &lt;code&gt;git add app/controllers/user.js&lt;/code&gt; will add only the &lt;code&gt;user.js&lt;/code&gt; file and stage it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-files"&gt;
  &lt;/a&gt;
  Removing Files
&lt;/h3&gt;

&lt;p&gt;You can also remove files i.e unstage them from commits by running &lt;code&gt;git rm path/to/file/in/the/repository&lt;/code&gt;. The &lt;code&gt;git rm .&lt;/code&gt; also unstages all files and folders. Not to be confused with &lt;code&gt;git stash&lt;/code&gt;, this command clears the current commit and reverts to the last push commit in the log which can be accessed using the &lt;code&gt;git log&lt;/code&gt; command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commit-messages"&gt;
  &lt;/a&gt;
  Commit Messages
&lt;/h3&gt;

&lt;p&gt;Commit messages are a way to keep note tracks of your project updates. It is very important because it helps when you revisit the codebase or share the repository with someone else. It is very important to make sure your commit messages as descriptive as possible. Avoid short messages such as &lt;em&gt;updated app.js&lt;/em&gt;, &lt;em&gt;the change here is now working&lt;/em&gt;, these kind of messages leave little space for understanding your code and can waste productive time.&lt;br&gt;&lt;br&gt;
That being said, how should you write a good commit message. A good commit message needs to follow a good idea of what the update is about, a summary or it and full text explaining to an extent what the update to the commit is.&lt;br&gt;&lt;br&gt;
An example of this is &lt;code&gt;&amp;lt;scope&amp;gt; &amp;lt;summary&amp;gt; &amp;lt;full text&amp;gt;&lt;/code&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h4&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;scope&amp;gt;&lt;/code&gt; is the feature/function of the commit, i.e is it a feature, a test, a breaking change or a fix.&lt;br&gt;
A way you can do this is using keywords, these keywords has to be descriptive enough, listed below are some examples;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feat&lt;/li&gt;
&lt;li&gt;fix&lt;/li&gt;
&lt;li&gt;breaking changes&lt;/li&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;improve&lt;/li&gt;
&lt;li&gt;refactor, 
etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; shows the TL;DR version of the commit. For example, what function was refactored or what issue was resolved. It is advisable to keep this at 20 words max as you will still give a detailed explanation in the &lt;code&gt;&amp;lt;full text&amp;gt;&lt;/code&gt;. Example might be, &lt;em&gt;Added validator to the create user endpoint&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-text"&gt;
  &lt;/a&gt;
  Full Text
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;full text&lt;/code&gt; contains the full detailed explanation of the explanation, will it affect any other commit?, is there a command that must be run for it work?. You can type as much as you want here since it will help you or anyone checking the code to grasp a full explanation of the commit.&lt;/p&gt;

&lt;p&gt;So a full commit message will be something like &lt;code&gt;$ git commit -m "UPDATE(Added validator to the create user endpoint): To avoid a security issue, user registration now requires the email to be of the email format, username must be more than 3 characters and password must be at least 8 characters. This is going to affect the registration endpoint which might generate error."&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alias"&gt;
  &lt;/a&gt;
  Alias
&lt;/h4&gt;

&lt;p&gt;That being said, typing all these for every commit can be sometimes very tiring 😫. That being said, Git has a tool to exactly help with that and that is the &lt;code&gt;git config --global alias&lt;/code&gt;🙂. With this command, you can set at much as aliases as you want. Let\'s set an alias to make an set a commit message for the &lt;em&gt;initial&lt;/em&gt; commit.&lt;br&gt;&lt;br&gt;
&lt;code&gt;git config --global alias.int '!f() { git commit -m "🎊 INITIAL COMMIT($1): $2; }; f'&lt;/code&gt; Running this command will add the alias command to your &lt;code&gt;config&lt;/code&gt; file. Then when you run &lt;code&gt;git int "Project Setup" "Setting up the base files, we will be using this technology etc..."&lt;/code&gt; it will translate to &lt;code&gt;$ git commit -m "🎊 INITIAL COMMIT(Project Setup): Setting up the base files, we will be using this technology etc..."&lt;/code&gt; which looks cool and you get to type less.&lt;br&gt;&lt;br&gt;
You can add more of these alias and more with the &lt;code&gt;git config --global alias.&amp;lt;keyword&amp;gt;&lt;/code&gt; command. I will share my &lt;code&gt;config&lt;/code&gt; file so you can see how I did mine and edit according to your preference.&lt;/p&gt;

&lt;p&gt;With this all set up, you are well on your way of becoming adept at using git. This is the first in the series and I will be updating as soon as I can.&lt;/p&gt;

&lt;p&gt;Link to my &lt;a href="https://gist.github.com/en1tan/9b9a9c13878aa76c40f0de35bd46539e#file-gitconfig"&gt;config&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you next time 😉❤️&lt;/p&gt;

</description>
      <category>github</category>
      <category>environment</category>
      <category>os</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tile Navigation - How to make navbar for web page with HTML CSS and JS in 2021</title>
      <author>Modern Web</author>
      <pubDate>Wed, 01 Sep 2021 09:57:35 +0000</pubDate>
      <link>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</link>
      <guid>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</guid>
      <description>&lt;p&gt;Hello, welcome. In today's blog, we'll see how to make awesome fully working tile navigation system for your website.&lt;/p&gt;

&lt;p&gt;Tile navigation is very unique navigation that you'll not found most. Make a good impression by using tile navigation on your portfolio. This navigation has good UX which makes better experience than normal navbar.&lt;/p&gt;

&lt;p&gt;For demo, code tutorial with explanation. You can watch the video below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LeaWb_3UDK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to miss more amazing upcoming projects. Make sure to subscribe me on youtube. It really motivates me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, without wasting more time let's see how to code this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You can get my all project's source code in just 5$ membership on &lt;a href="https://www.patreon.com/modernweb"&gt;patreon&lt;/a&gt;. Support my work for more awesome and amazing projects. This is just a beginning.&lt;a href="https://www.patreon.com/posts/55615263"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the tile navigation, we need 3 files - &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;style.css&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt;. And of course we have an &lt;code&gt;img&lt;/code&gt; folder for images.&lt;/p&gt;

&lt;p&gt;So let's start with simply making the NAVIGATION heading. Start by basic HTML Template and give title to it, link &lt;code&gt;style.css&lt;/code&gt; file and don't forget to add &lt;code&gt;app.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" alt="Frame 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's make the important thing tiled navbar. For that make a container which will hold all the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside this container make &lt;code&gt;a&lt;/code&gt; tag as we use this to create links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, maybe you don't know that we can give images inside &lt;code&gt;a&lt;/code&gt; to create images element. Well I didn't knew that before.&lt;/p&gt;

&lt;p&gt;So we need images as a links of course.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy this &lt;code&gt;a&lt;/code&gt; tag 4 more time and change the image path.&lt;/p&gt;

&lt;p&gt;The output will look terrible because of the big images. So let's style the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give &lt;code&gt;links-container&lt;/code&gt; display to &lt;code&gt;flex&lt;/code&gt;. This will make the &lt;code&gt;link&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; side by side. And position &lt;code&gt;fixed&lt;/code&gt; because we want it to stay on the screen irrespective of scroll.&lt;/p&gt;

&lt;p&gt;Now style the &lt;code&gt;a&lt;/code&gt; tag along with its image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add hover effect to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-2deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; this simply means when being hover. So, the whole line or selector simply means give these style to the &lt;code&gt;img&lt;/code&gt; element when &lt;code&gt;.link&lt;/code&gt; element is being hover.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got the effect, but its very bright. And not looking that much appealing. So, let's make a black overlay to the &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For overlay we'll use &lt;code&gt;::after&lt;/code&gt; css pseudo element. You can find about this in detail &lt;a href="https://dev.to/kunaal438/all-about-css-before-and-after-element-css-pseudo-elements-5g1n"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" alt="Untitled design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now as you have seen in the demo, we have texts on the bottom also. So let's make them. To make text just add &lt;code&gt;p&lt;/code&gt; element inside &lt;code&gt;a&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 2.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;project&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    +3 links more
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see the page, You'll not able to see the text. Because texts are behind the images. To make them at top give some CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" alt="Capture2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to create toggle button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- toggle btn --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" alt="Capture3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now of course we want the cross X effect. For that rotate the spans by 45 deg when toggle button have &lt;code&gt;active&lt;/code&gt; class. Like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;active&lt;/code&gt; class to &lt;code&gt;toggle-btn&lt;/code&gt; to see the output.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" alt="Capture4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to hide the links. We'll use &lt;code&gt;hide&lt;/code&gt; class for &lt;code&gt;links-container&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;previous&lt;/span&gt; &lt;span class="err"&gt;styles&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links-container.hide&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pointer-events&lt;/code&gt; property is used to set elements pointer interactivity. In this case we are setting all kind of pointer interaction as a default. But setting no interaction when the links are hidden using &lt;code&gt;hide&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now of course we want JS here to make the classes toggle. We can make this whole effect with pure CSS using check boxes. But we'll do that some other day.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app.js&lt;/code&gt; and first select &lt;code&gt;toggle-btn&lt;/code&gt; and &lt;code&gt;links-container&lt;/code&gt; using &lt;code&gt;querySelector&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.toggle-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linksContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.links-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after that, add click event to &lt;code&gt;toggle-btn&lt;/code&gt; and toggle the classes inside that click event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;linksContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" alt="Untitled design (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done. I hope you understood each and everything. If you have doubt or I missed something let me know in the comments. I have made another tile navigation tutorial. But unfortunately that time I don't used to write blogs. You can check it &lt;a href="https://youtu.be/EsD3QY_wFm8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-awesome-wavy-button-hover-effect-pure-css-wavy-design-1722"&gt;Wave Button Hover Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I really appreciate if you can subscribe my youtube channel. I create awesome web contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What the FOUC is happening: Flash of Unstyled Content</title>
      <author>Estee Tey</author>
      <pubDate>Wed, 01 Sep 2021 09:51:51 +0000</pubDate>
      <link>https://dev.to/lyqht/what-the-fouc-is-happening-flash-of-unstyled-content-413j</link>
      <guid>https://dev.to/lyqht/what-the-fouc-is-happening-flash-of-unstyled-content-413j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#case-study"&gt;
  &lt;/a&gt;
  Case Study
&lt;/h2&gt;

&lt;p&gt;Recently while I was browsing Instagram stories on my phone, a certain ad by Kopidate caught my eye. Despite having 'date' as part of its name, I thought it was interesting that they say it is not a matchmaking site but for humanising 1:1 connections. The "human" part was something that I felt resonating. So I clicked on it to visit the site, but oh boy, it was yet another website that is plagued by the FOUC problem. Observe the difference in styling from when the page just loaded and when the page finishes loading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXXDv6bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXXDv6bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This phenomenon is known as Flash of Unstyled Content (FOUC), and it is a topic covered by a question included in the &lt;a href="https://h5bp.org/Front-end-Developer-Interview-Questions/questions/general-questions/"&gt;hp5b Frontend Interviewer Questions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flash-of-unstyled-content"&gt;
  &lt;/a&gt;
  What is Flash of Unstyled Content?
&lt;/h2&gt;

&lt;p&gt;FOUC is the short moment of truth when you catch your friend turning their head without the zoom filter applied - and often, it is &lt;em&gt;aesthetically less appealing&lt;/em&gt;, just like the example above before the transition happened. FOUC poses a very bad user experience, especially for new visitors who are not aware of this phenomenon. They might even think that your website poses a security threat (my mom asks me that a lot for new sites she visit). Even for users who know of this phenomenon, by its existence, the lag and abruptness of the transition decreases the legitimacy and professionalism of a website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-the-flash-of-unstyled-content-happen"&gt;
  &lt;/a&gt;
  Why does the Flash of Unstyled Content happen?
&lt;/h2&gt;

&lt;p&gt;Dave Hyatt, an author from &lt;em&gt;Webkit&lt;/em&gt;, the open-sourced web browser engine used by Safari sheds the light on the FOUC problem in great detail in this &lt;a href="https://webkit.org/blog/66/the-fouc-problem/"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In particular, the "general how":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This situation occurs whenever a Web browser ends up showing your Web page’s content without having any style information yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the "exactly how":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;when/how a browser ends up committing the crime of FOUCing depends heavily on how the browser’s engine is architected and on interesting assumptions made by Web site authors when designing their sites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rest of his article focuses on how to mitigate FOUC specifically for browsers that implement web engines, and for the &lt;strong&gt;typical web developer&lt;/strong&gt;, accounting for how the web browser engine works is usually out of their usual scope of work, so we will not discuss that here.&lt;/p&gt;

&lt;p&gt;Instead, let's see if we can dig deeper into the latter part which was previously highlighted by the author to avoid FOUC - &lt;em&gt;assumptions made by web site authors when designing their sites.&lt;/em&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#revisiting-the-case-study"&gt;
  &lt;/a&gt;
  Revisiting the Case Study
&lt;/h2&gt;

&lt;p&gt;For emulating what I saw for &lt;a href="https://kopidate.com/"&gt;Kopidate&lt;/a&gt; on my mobile but on my laptop's browser, at the Google Chrome Inspector Network Tab: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changed the network to Fast 3G mode&lt;/li&gt;
&lt;li&gt;Disable cache&lt;/li&gt;
&lt;li&gt;Start recording the process&lt;/li&gt;
&lt;li&gt;Observe the logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try it out too 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiRcoS9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiRcoS9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the .GIF animation below, you can see that it took roughly &lt;strong&gt;11s&lt;/strong&gt; for Fast 3G mode to load finish. The transition felt very laggy and the time it took to load is simply painful for &lt;em&gt;many&lt;/em&gt; mobile users. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-eLk-7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-eLk-7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is the device's browser doing in that 11s? A few observations as a normal user: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text styles changing gradually&lt;/li&gt;
&lt;li&gt;brand image appearing&lt;/li&gt;
&lt;li&gt;text and button being moved down&lt;/li&gt;
&lt;li&gt;a big flash of red background image and changing of the entire style shown in viewport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you're playing around the network logs, you would then roughly understand what is causing the above to happen. For those that are not familiar with the network inspector, although the names of the files that are being retrieved are some randomized junk and not meant to be understood, we can still see the type of the data that is retrieved e.g. base64 is usually image. Then we can click such files to see which image(s) are exactly being retrieved. &lt;/p&gt;

&lt;p&gt;Interestingly, it was spending the majority of the first 2s - 10s fetching and loading a lot of other images that the user cannot see beyond their &lt;a href="https://www.w3schools.com/css/css_rwd_viewport.asp"&gt;device viewport&lt;/a&gt;. It was only in the last second before it finally fetched the red background portion and show the intended layout of styles correctly in the area that the user's device viewport covers. This probably indicates the presence of some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask"&gt;css mask&lt;/a&gt; property where the text will appear differently based on the background image, as the web designer probably assumed the background image is always there and didn't create a fallback for the text styling in the absence of the background image.&lt;/p&gt;

&lt;p&gt;For reference, I was previously using 5G data network to see that the abrupt transition on my phone happening in 1s. So that means that &lt;strong&gt;depending on the network speed, the user's experience will be different&lt;/strong&gt; as well. In summary, the negligence for both the FOUC problem and performance would very likely result in a major turn off of web applications, possibly turning away many potential users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#now-the-finale-how-to-fouc-off"&gt;
  &lt;/a&gt;
  Now the finale: how to FOUC off!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#for-vanilla-websites-that-only-uses-html-css-with-no-shiny-framework"&gt;
  &lt;/a&gt;
  For vanilla websites that only uses HTML, CSS with no shiny framework
&lt;/h3&gt;

&lt;p&gt;At the start of the .html file, put a style for hiding your site&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;doctype&lt;/span&gt; &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;html&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style1.css"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style2.css"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style3.css"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of the last css file to be loaded i.e. &lt;code&gt;style3.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✅ The above guarantees that your html does not show until all the css files have been loaded. So there will not be a shitty transition happening.&lt;/p&gt;

&lt;p&gt;✅ This is also a recommended solution for supporting devices/browsers that don't have Javascript enabled.&lt;/p&gt;

&lt;p&gt;❌ If your website that has a lot of static content, even your &lt;em&gt;fast&lt;/em&gt; 3G users will still be staring at a blank screen for quite some time. Do consider integrating with &lt;a href="https://web.dev/browser-level-image-lazy-loading/"&gt;browser level image lazy-loading&lt;/a&gt; for a more holistic solution!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-are-using-a-shiny-component-framework-like-react-vue-angular-etc"&gt;
  &lt;/a&gt;
  If you are using a shiny component framework like React, Vue, Angular etc
&lt;/h3&gt;

&lt;p&gt;A simple fix is to do something similar to the solution provided above for vanilla websites, but using &lt;strong&gt;component state management&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example with React without fallback 📘&lt;br&gt;
What it does is that the side effect hook ensures that the component is mounted before rendering. And if it is mounted, that means that sequentially in the code, the import statement for the stylesheet would have been triggered before the code block for component, ensuring that it gets the stylesheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppWithoutFallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example for alternative fallback layout that is not dependent on CSS files. Of course for this you have to design it so that when it switches between the states, the transition doesn't look super abrupt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppWithFallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;loading&lt;/span&gt; 
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Fallback content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, for the above, you can incorporate the code with some lazy loading libraries too to improve performance - these will be provided in the resources section later.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this article! &lt;/p&gt;

&lt;p&gt;If you enjoyed reading, please leave some reactions 💌 &lt;/p&gt;

&lt;p&gt;I will be very happy to receive any feedback from you too 🌻&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;p&gt;If you find this article to be too short, feel free to browse through the resources that I've looked at below too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Mask: &lt;a href="https://web.dev/css-masking/"&gt;https://web.dev/css-masking/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Native Lazy Loading: &lt;a href="https://web.dev/browser-level-image-lazy-loading/"&gt;https://web.dev/browser-level-image-lazy-loading/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;React libraries that help with performance

&lt;ul&gt;
&lt;li&gt;Ready Lazy Loading Images: &lt;a href="https://levelup.gitconnected.com/lazy-loading-images-in-react-for-better-performance-5df73654ea05"&gt;https://levelup.gitconnected.com/lazy-loading-images-in-react-for-better-performance-5df73654ea05&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;React loadable: &lt;a href="https://github.com/jamiebuilds/react-loadable"&gt;https://github.com/jamiebuilds/react-loadable&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Side-server rendering with styled-components as a possible solution to FOUC &lt;a href="https://cleverbeagle.com/blog/articles/look-for-simple-fixes-first"&gt;https://cleverbeagle.com/blog/articles/look-for-simple-fixes-first&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;StackOverflow thread on FOUC &lt;a href="https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506"&gt;&lt;/a&gt;&lt;a href="https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506"&gt;https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>react</category>
    </item>
    <item>
      <title>Code that writes code for you -wait what?</title>
      <author>dsvigir</author>
      <pubDate>Wed, 01 Sep 2021 09:45:28 +0000</pubDate>
      <link>https://dev.to/infobipdev/code-that-writes-code-for-you-wait-what-d35</link>
      <guid>https://dev.to/infobipdev/code-that-writes-code-for-you-wait-what-d35</guid>
      <description>&lt;p&gt;I've spent six years as a team leader and one of my responsibilities was performing technical job interviews with potential candidates for our team/company. Soon I've noticed a pattern. Candidates working with JAVA programming language were not using &lt;a href="https://projectlombok.org/"&gt;https://projectlombok.org/&lt;/a&gt; on their projects. Yes, I'm aware it doesn't qualify for the drama-of-the-year category, but this was quite a surprise for me. Projectlombok.org was such an integral part of my daily work, one of those simple life hacks you are happy to share. So why is this simple code-generator so important? Well, if you want to join the church-of-release-from-writing-boring-and-repetitive-code, keep reading!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-would-you-want-to-use-codegenerator"&gt;
  &lt;/a&gt;
  Why would you want to use code-generator?
&lt;/h5&gt;

&lt;p&gt;Simply put, if you want to spend your coding time on something new and challenging, code-generator can save you time spent on repetitive (or boring, as some may refer to it) coding. This fact alone can certainly speed up development and benefit the project or company you're working for. But, as always, first there are some issues to deal with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-matter-of-trust"&gt;
  &lt;/a&gt;
  A matter of Trust
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;"I only trust code that I wrote, should I trust generated code? "&lt;/em&gt; (Unknown Developer)&lt;/p&gt;

&lt;p&gt;The idea of using code generation as a standard operating procedure within our team was first brought up in one of our meetings. We soon figured out that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We wanted to write our own code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We trusted our code more than some auto-generated sequence&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We discussed our coding guidelines, the fact that we do not like how generated code look, how it might be hard to read and understand, it might break OOP principles, clean code principles and so on. Most of the issues we've had with code generators were trust related, and this lack of trust was the first obstacle we wanted to address.&lt;/p&gt;

&lt;p&gt;Since trust takes time, we decided that our first use case should be something simple. There are a lot of really good, simple and helpful code generators.&lt;br&gt;
This blog should help you understand why and when you should use code generators, give you some example how and where we use it and give you overview of some simple code generators that have different purposes.&lt;/p&gt;

&lt;p&gt;Reflecting on my experience and thinking about code generators seems to me that when and why to use it is highly dependent on what project are you working on, what programing language are you using, what are the use cases, how complex is part of code that you want to replace with generated code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I Start?
&lt;/h4&gt;

&lt;p&gt;Remember Project Lombok? Let's give you an overview and see how it can help you to avoid repetitive, boring and error prone coding.&lt;/p&gt;

&lt;p&gt;Let's say we want to implement simple immutable class that will represent Car. It could look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So, to achieve immutability, we needed to write constructor with null checks for fields that are not permitted to be null and get methods for each field. We also override toString, which is something we usually do to be able to print some instance of this class to get human readable data for logs, debugging and so on.&lt;/p&gt;

&lt;p&gt;This is something that needs to be done, but it is repetitive and boring, not to mention error prone. If we lose focus we could easily forget to add Object.requiredNonNull for field that must not be null. The bottom line is that we want to speed this up and let code generator do the writing for us.&lt;/p&gt;

&lt;p&gt;Now let's see how this class looks when we use Lombok:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;It's easy to see that the amount of code we need to write is significantly lower, not to mention that the class looks cleaner, as we also removed a lot of boilerplate code. We really don't need it in in source file to know what this class contains - Lombok annotations will tell us that.&lt;/p&gt;

&lt;p&gt;What did Lombok annotations do for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;@RequiredArgsConstructor&lt;/em&gt; - generates constructor with all fields that have final modifier on them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;@Getter&lt;/em&gt; - generate get method for all fields in class&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;@ToString&lt;/em&gt; - overrides toString method which will use all fields to generate String representation of this class&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is just a small subset of what Lombok can do for us. However, one should be aware that Lombok does not generate new source code (new Car.java) and it doesn't replace anything in original Car.java It injects necessary code during compile time into bytecode of compiled Car.class. You can always decompile Car.class if you want to inspect what exactly Lombok generated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-there-anything-i-shouldnt-do-with-codegenerator"&gt;
  &lt;/a&gt;
  Is there anything I shouldn't do with code-generator?
&lt;/h4&gt;

&lt;p&gt;Code generates can be really powerful. You could probably write most of the project code to be self-generated, and describe project using semantic needed for a code generator to generate project source code without writing a single line of project code yourself.&lt;/p&gt;

&lt;p&gt;It's easy to get carried away and spend your time thinking about projects you could do with code generator rather than finishing the existing ones. Do not auto generate everything that can be auto generated - start with tackling simple, repetitive and boring code sequences. Try and do proof of concept and see where does that lead you to.&lt;br&gt;
 &lt;br&gt;
Some general tips to go by which might point you into direction this is where I should not use code generation. If you are doing proof of concept or you are already using code generation for some time:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you find yourself in need to modify generated code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find yourself in need to inspect generated code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find yourself constantly working on code generator because it is lacking some features&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If maintenance of code generator is taking considerable time compared to gain&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#pros-of-using-code-generators"&gt;
  &lt;/a&gt;
  PROs of using code generators
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less errors&lt;/strong&gt; - code generators do not make mistakes. They will do their job and generated code will be the same no matter how many times they generate it. Code generator doesn't get tired and it doesn't lose focus like humans do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Time saving&lt;/strong&gt; - generating code is fast, much faster than any human can write code. More repetitive tasks and code you need to write means more time you save using code generators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Expected output&lt;/strong&gt; - generated code will always be the one you are expecting. Naming, coding principles, the way code works will be something that will be same no matter who is using it. If a code is written manually by different developers, this kind of consistency usually cannot be achieved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cool, I don't need to write this code again&lt;/strong&gt; - as developers, we often found ourselves writing similar code all over again. This can be really boring, and in the end we should have fun when writing code, and code generators can provide us extra time to write a more meaningful code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#cons-of-using-code-generators"&gt;
  &lt;/a&gt;
  CONs of using code generators.
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We need to modify code generator again&lt;/strong&gt; - our code generator requires constant maintenance. We are finding new use cases for it and it is getting more convoluted and time consuming to maintain it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code generated is not optimized&lt;/strong&gt; - if your code and project needs to squeeze every bit of performance, then code generators might be obstacle. Usually, to optimize code for performance you do it manually, change architecture of code, maybe change order of code lines or just rewrite it completely. If your code is generated, this can be really hard to do, and could require extensive modification on code generator you are using or it just might not be possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generated code is a mess&lt;/strong&gt; - although this technically goes into cons, this should not be your concern and you should not be worried about how the code looks. Code should be something that works for you, strictly utilitarian.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#simple-code-generation-in-our-project"&gt;
  &lt;/a&gt;
  Simple code generation in our project
&lt;/h4&gt;

&lt;p&gt;Our project is microservice oriented so we have multiple instances of various services and uptime of those services is very important. We collect over 200 metrics data and constantly monitor what is the state of our system/services.&lt;/p&gt;

&lt;p&gt;Most of our metrics are custom made. As the number of metrics increased, we found our self spending a lot of time writing a code that collects metrics required for some feature we were working on.&lt;/p&gt;

&lt;p&gt;This was our scenario:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Writing repetitive and error prone code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing it for almost every new feature we added&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It was boring and it was slowing us down&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's say now we want to implement a set of metrics that will count how many red and blue cars we sold:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This is how our base for code generation looks like. Here we used our custom defined annotations (@MetricSchema, @MetricCounter) as metadata that we needed as an input into code generator and our custom defined metric type(ResetableCounter).&lt;/p&gt;

&lt;p&gt;This is how part of our generated source code looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This generated class will be used as our metric object when instanced to collect metric on our application. It has all that we need to start collecting and reporting this metric.&lt;br&gt;
We have static factory method that will help us to instance metrics and we have methods to increment, reset metrics and method to retrieve metric value.&lt;/p&gt;

&lt;p&gt;Next example shows us how to use this generated code to collect metrics:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We are using &lt;a href="https://github.com/jtwig/jtwig-core"&gt;https://github.com/jtwig/jtwig-core&lt;/a&gt; as a code templating engine, and this is how our template looks like. Without going into too much details about jtwig, this template allows us to generate CarMetric class from AbstractCarMetric. This is how we generate all the metric classes that we need.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This is relatively simple code generation. Considering that we are writing and collecting a lot of metrics on our project, we did this to release us from the need to write metrics ourselves.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-simple-code-generators"&gt;
  &lt;/a&gt;
  Some Simple Code Generators
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://projectlombok.org/"&gt;https://projectlombok.org/&lt;/a&gt; — we discussed it earlier, it has a lot of functionality, most commonly used functionality is going to free you from writing repetitive boilerplate code (constructors, getters and setters and so on)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jooq.org/doc/3.14/manual/code-generation/"&gt;https://www.jooq.org/doc/3.14/manual/code-generation/&lt;/a&gt; — this code generator is used in conjunction with library itself. Main job of this code generator is to inspect your database schema and generate classes that represent object model of your database. This is very common case for code generators as writing object model for database manually is very repetitive, error prone and time consuming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/protocol-buffers"&gt;https://developers.google.com/protocol-buffers&lt;/a&gt; — protocol buffers are usually used in conjunction with &lt;a href="https://grpc.io/docs/what-is-grpc/introduction/"&gt;https://grpc.io/docs/what-is-grpc/introduction/&lt;/a&gt; but they do not have to be used for that exclusively. This is example of language agnostic code generator that can generate code from defined protobuff semantic for different programing languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#an-advice-at-the-finish-line-start-with-baby-steps"&gt;
  &lt;/a&gt;
  An advice at the finish line — Start with baby steps
&lt;/h4&gt;

&lt;p&gt;Code generators are a broad and complex topic. It might not be clear where you should start with code generators because use cases for them are virtually endless. You might end up using code generator and walk into something that in the long run will be a really big burden for the project you are working on.&lt;/p&gt;

&lt;p&gt;If you are just starting to use code generators, start with baby steps. Find your simple use case (repetitive, boring, error prone coding), do your research and find if someone already solved your problem.&lt;/p&gt;

&lt;p&gt;When you decide on which code generator you are going to use and what use case you want to cover, do proof of concept for it and move forward from there. Choose wisely I hope this blog post will be of help on your coding path!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hello World with Go!</title>
      <author>M Fariz Wisnu prananda</author>
      <pubDate>Wed, 01 Sep 2021 09:11:15 +0000</pubDate>
      <link>https://dev.to/xvbnm48/hello-world-with-go-55d5</link>
      <guid>https://dev.to/xvbnm48/hello-world-with-go-55d5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5-deKNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dr91kmyorfo73w9e7g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5-deKNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dr91kmyorfo73w9e7g9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hello everyone,&lt;/p&gt;

&lt;p&gt;today i will show you, how to print "hello World" with GoLang&lt;/p&gt;

&lt;p&gt;before starting this tutorial, make sure you have installed golang.&lt;/p&gt;

&lt;p&gt;i'll show you how to install golang firts.&lt;/p&gt;

&lt;p&gt;1.Download golang at web &lt;a href="https://golang.org"&gt;Golang&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsr_99fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t06fo4m0hz36jg8k9vxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsr_99fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t06fo4m0hz36jg8k9vxk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
red for Windows, yellow for MacOs, and Green for Linux &lt;/p&gt;

&lt;p&gt;i'll show you how to install golang at Windows&lt;/p&gt;

&lt;p&gt;2.After you finished download go , setting gopath in your computer like this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDiYnTz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq48vja7i8q39bkxeff4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDiYnTz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq48vja7i8q39bkxeff4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Now you can start coding!&lt;/p&gt;

&lt;p&gt;4.Open Your VS Code , make new folder for code golang&lt;/p&gt;

&lt;p&gt;5.Open CMD with ctrl + j , and type like this &lt;br&gt;
&lt;code&gt;go mod init belajar-golang&lt;/code&gt; &lt;br&gt;
for make go mod&lt;/p&gt;

&lt;p&gt;6.after typing it, there are will be a new file called name &lt;strong&gt;go.mod&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqwnH4hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qm9m19v749kcmctvnzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqwnH4hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qm9m19v749kcmctvnzb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.then create new file named &lt;strong&gt;main.go&lt;/strong&gt; &lt;br&gt;
8.then type code like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9.and after type code , run the file main.go with command like this&lt;br&gt;
&lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;10.The result will be like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17oDWpig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8w4pon5vsqfsyjckypn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17oDWpig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8w4pon5vsqfsyjckypn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that the way to print "Hello World" with Golang&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Gameboy running the Legend of Zelda link's awakening intro and the Pokemon Blue Intro.</title>
      <author>FRADAR</author>
      <pubDate>Wed, 01 Sep 2021 08:57:07 +0000</pubDate>
      <link>https://dev.to/fradar/gameboy-running-the-legend-of-zelda-link-s-awakening-intro-and-the-pokemon-blue-intro-4nim</link>
      <guid>https://dev.to/fradar/gameboy-running-the-legend-of-zelda-link-s-awakening-intro-and-the-pokemon-blue-intro-4nim</guid>
      <description>&lt;p&gt;I created a fully interactive Gameboy running the Legend of Zelda links awakening game demo. &lt;/p&gt;

&lt;p&gt;I have created 2 game intros, one is the Legend of Zelda links awakening  and the other is the Pokemon blue. For the pokemon blue intro change zelda to pokemonblue in line 6 in the Javascript window.&lt;/p&gt;

&lt;p&gt;This is my first time making a Gameboy, so I hope you like it!&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/poeqoNQ"&gt;https://codepen.io/FRADAR/full/poeqoNQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my stuff?&lt;br&gt;
Want more?&lt;br&gt;
Follow me for more shenanigans!&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye! And thanks!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>2d</category>
    </item>
    <item>
      <title>Permissions API &amp; Why should you start using it?</title>
      <author>Mohd Shahid</author>
      <pubDate>Wed, 01 Sep 2021 08:53:56 +0000</pubDate>
      <link>https://dev.to/sidmirza4/permissions-api-why-should-you-start-using-it-2k4d</link>
      <guid>https://dev.to/sidmirza4/permissions-api-why-should-you-start-using-it-2k4d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-guys"&gt;
  &lt;/a&gt;
  Hey guys 👋
&lt;/h2&gt;

&lt;p&gt;In this article I will explain the usage, importance and use cases of Permissions API and why is it so important for user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Where can we use Permissions API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessApi"&gt;Accessing the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clipboardPermissions"&gt;Checking Clipboard permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#geolocationPermissions"&gt;Checking geolocation permissions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;a&gt;Introduction&lt;/a&gt; 🟢
&lt;/h3&gt;

&lt;p&gt;The Permissions API can be used to determine if permission to access a particular API has been granted ✅ or denied ❌.&lt;br&gt;&lt;br&gt;
The Permissions API provides the tools to allow us developers to implement a better user experience as far as permissions are concerned.&lt;br&gt;&lt;br&gt;
Which is vital to increase the accessibility and usability of the application.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Permissions API does not work in Safari and IE.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#where-can-we-use-permissions-api-"&gt;
  &lt;/a&gt;
  &lt;a&gt;Where can we use permissions API 🤔?&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipbaord API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"&gt;Geolocation API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API"&gt;Notification API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API"&gt;Push API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#accessing-the-permissions-api-"&gt;
  &lt;/a&gt;
  &lt;a&gt;Accessing the permissions API 🤔?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;permissions&lt;/code&gt; object is available on &lt;code&gt;Navigator.permissions&lt;/code&gt; property 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For checking the status of permission of a certain API &lt;code&gt;.query()&lt;/code&gt; method is used which is available on &lt;code&gt;permissions&lt;/code&gt; object.&lt;br&gt;&lt;br&gt;
&lt;code&gt;.query()&lt;/code&gt; accepts a parameter say &lt;code&gt;permissionDescriptor&lt;/code&gt; which is an object defining on which API query should fire on.&lt;br&gt;&lt;br&gt;
&lt;code&gt;.query()&lt;/code&gt; will return a promise which will resolve to &lt;code&gt;PermissionStatus&lt;/code&gt; object which will tell us about the status of the certain permission.  &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#enogh-talk-lets-see-it-in-action"&gt;
  &lt;/a&gt;
  Enogh talk 😅, let's see it in action 👇
&lt;/h3&gt;

&lt;p&gt;-&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-permissions-api-for-checking-clipboard-permissions"&gt;
  &lt;/a&gt;
  &lt;a&gt;1️⃣ Using Permissions API for checking Clipboard permissions:&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clipboard-write&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cbWritePermission&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cbWritePermission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "granted"&lt;/span&gt;

&lt;span class="c1"&gt;// clipboard-write permission is granted by the browser automatically&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example the &lt;code&gt;state&lt;/code&gt; property will tell us about the status of the permission. It can have following values:&lt;br&gt;&lt;br&gt;
&lt;code&gt;granted&lt;/code&gt;: Permission is granted.&lt;br&gt;&lt;br&gt;
&lt;code&gt;denied&lt;/code&gt;: Permission is denied.&lt;br&gt;&lt;br&gt;
&lt;code&gt;prompt&lt;/code&gt;: Permission is not yet asked.  &lt;/p&gt;

&lt;p&gt;Let's see an example of &lt;code&gt;clipboard-read&lt;/code&gt; permission 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// suppose a scnerio where you want to do &lt;/span&gt;
&lt;span class="c1"&gt;// something with the text before it get pasted by the user &lt;/span&gt;
&lt;span class="c1"&gt;// in your application. &lt;/span&gt;
&lt;span class="c1"&gt;// or you want to auto-capture copied text&lt;/span&gt;
&lt;span class="c1"&gt;// checking the item before doing anything&lt;/span&gt;
&lt;span class="c1"&gt;// with it is also good for security.&lt;/span&gt;

&lt;span class="c1"&gt;// reading text on a click&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clipboard-read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with the text&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show a nice error message, or ask for the permission nicely&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#checking-raw-geolocation-endraw-permissions-using-permissions-api"&gt;
  &lt;/a&gt;
  &lt;a&gt;2️⃣ Checking &lt;code&gt;geolocation&lt;/code&gt; permissions using Permissions API:&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;building an application where the current location of the user is important for a feature to work in your application? Then this one is for you.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the example below 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;geolocation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// do something with the location&lt;/span&gt;
      &lt;span class="c1"&gt;// show friends around the user for eg&lt;/span&gt;
      &lt;span class="c1"&gt;// or move the map to the user's location&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show warning that certain feature of the app&lt;/span&gt;
    &lt;span class="c1"&gt;// will not work if the location permission is not provided&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Others APIs permissions can be checked using the same procedure as defined above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thank-you-for-giving-it-a-read"&gt;
  &lt;/a&gt;
  Thank you for giving it a read. ❤️
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#please-follow-me-on-twitter"&gt;
  &lt;/a&gt;
  Please follow me on &lt;a href="https://www.twitter.com/sidmirza4"&gt;twitter&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Say hello to sturmglas (a hackathon project)</title>
      <author>Simona Winnekes</author>
      <pubDate>Wed, 01 Sep 2021 07:50:59 +0000</pubDate>
      <link>https://dev.to/winnekes/say-hello-to-sturmglas-a-hackathon-project-3f43</link>
      <guid>https://dev.to/winnekes/say-hello-to-sturmglas-a-hackathon-project-3f43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introducing-sturmglas-dont-weather-your-emotions-alone"&gt;
  &lt;/a&gt;
  Introducing sturmglas - don't weather your emotions alone.
&lt;/h2&gt;

&lt;p&gt;Hello everyone! With a few hours to spare, I am happy to share my contribution to the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;Auth0/Hashnode&lt;/a&gt; hackathon!&lt;/p&gt;

&lt;p&gt;What a fun experience it has been in the last 25 days! I learned more about Next.js, IoT, and authentication/authorization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;Here are the links!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/winnekes/sturmglas"&gt;Sturmglas repository&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But keep reading to find out what these cuties are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration 🌟
&lt;/h2&gt;

&lt;p&gt;Before &lt;a href="https://winnekes.hashnode.dev/from-scrubs-to-slacks"&gt;switching careers&lt;/a&gt; I was a nurse and specialised in cardiology and psychiatry. &lt;/p&gt;

&lt;p&gt;Mental health is such an important part of our life and wellbeing, but often neglected. My nephew for example can never express his feelings without the help of his toys.&lt;/p&gt;

&lt;p&gt;And maybe you just don't want to talk about how you feel or why you feel a certain way but still want the people around you to know. &lt;/p&gt;

&lt;p&gt;Introducing &lt;a href="https://winnekes.hashnode.dev/from-scrubs-to-slacks"&gt;sturmglas&lt;/a&gt; and Companions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-demos"&gt;
  &lt;/a&gt;
  Video demos 📼
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Companion demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://youtu.be/8u_i7pVv38M"&gt;https://youtu.be/8u_i7pVv38M&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop (app only, without companion)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://youtu.be/lWHwMlVTJ20"&gt;https://youtu.be/lWHwMlVTJ20&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Here's a picture with all the Companions! Happy to share more about them. You can find the STL files (the 3d printer files) in the repo as well. &lt;br&gt;
The following companions exist, in emoji form: 🐰🦊​ 🐙🍀☁️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGRjLfpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sH7Lk1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGRjLfpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sH7Lk1o.jpg" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add, edit, delete your mood!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkLlv80m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ekTyBcA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkLlv80m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ekTyBcA.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share your mood as downloadable png!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ImESDPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Uqt1oxk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ImESDPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Uqt1oxk.jpg" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View insights/stats about your moods!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AigGmzNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hzhvb8a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AigGmzNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hzhvb8a.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack 🖥️
&lt;/h2&gt;

&lt;p&gt;We have the PWA (installable web application) and the IoT companions.&lt;/p&gt;

&lt;p&gt;I always wanted to see how I can build a complete server on Next.js and figured out to use GraphQL instead of REST on the backend. type-graphql and TypeORM were a bit of a pain to setup, certain Babel configurations where necessary, but I managed in the end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the PWA (100% TypeScript):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nextjs&lt;/li&gt;
&lt;li&gt;Auth0&lt;/li&gt;
&lt;li&gt;Chakra UI&lt;/li&gt;
&lt;li&gt;Chartjs&lt;/li&gt;
&lt;li&gt;Web Bluetooth API&lt;/li&gt;
&lt;li&gt;GraphQL (server and client)&lt;/li&gt;
&lt;li&gt;TypeORM&lt;/li&gt;
&lt;li&gt;PostgreSQL database (hosted on &lt;a href="https://supabase.io"&gt;supabase.io&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For the IoT companions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TTGO T-Display&lt;/li&gt;
&lt;li&gt;Pizo Buzzer&lt;/li&gt;
&lt;li&gt;LiPo battery (3.7v battery)&lt;/li&gt;
&lt;li&gt;3d-printed case, designed using OpenSCAD and printed on an Ender 3 in different filaments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I used C++ to setup the Bluetooth connection, the buzzer sounds (when connecting and disconnecting) and the way of rendering the cute faces. 😊 &lt;br&gt;
My boyfriend is a wizard and (patiently) taught me a lot about hardware, batteries, memoryd buffer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-one-thing-i-would-change"&gt;
  &lt;/a&gt;
  What is the one thing I would change? 😢
&lt;/h2&gt;

&lt;p&gt;Looking back I believe I should have gone the native way.&lt;/p&gt;

&lt;p&gt;PWA are awesome and I believe they are the future! But they are far from a native app can deliver to the user. The Web Bluetooth API for example is still quite experimental and in early stages despite its age.&lt;/p&gt;

&lt;p&gt;I already see limitations - for example when I connect to a Companion my phone does not indicate that I am connected to a Bluetooth device. Further more I cannot be connected in the background - only while the web app is in the foreground can I interact with the Companion. &lt;/p&gt;

&lt;p&gt;We still can't automatically connect to a Bluetooth device after sucessful pairing - right now the user has to connect to their Companion every time they come back to the app. It is of course a security features so that malicious websites cannot hack into your devices.&lt;/p&gt;

&lt;p&gt;Say hello to refactoring!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-coming-next"&gt;
  &lt;/a&gt;
  What's coming next? ⌛
&lt;/h2&gt;

&lt;p&gt;As mentioned, I will most likely refactor the application to React Native after research Bluetooth more. I want to more use of Auth0's features, especially role-based access.&lt;/p&gt;

&lt;p&gt;Some of the features to come are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Companion&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The Companion is nothing more than a mirror of your emotions at the moment. The idea is that of a Tamagotchi in the future; you take care of the mental health of your Companion 💪&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Habits&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt; wants to help you build better habits and in turn improve your mental health and wellbeing. Say you want to stop smoking? Drink more water? &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt; and your companion will help you stay on track.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mood prediction&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;So far I'm only collecting data and displaying it back to the user. I want to notice trends, suggest targeted challenges/habits/meditation that might help you feel better&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonfires&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Start or join groups to discuss mental health, tips and tricks around those topics, share healthy habits and goals&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For children&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Teaching children how to deal with feelings (especially negative ones) is not easy. With the help of the Companion they can express their emotions in a safe way&lt;/li&gt;
&lt;li&gt;A dashboard for parents if users are underage&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-a-companion-%E2%80%8B"&gt;
  &lt;/a&gt;
  "How do I get a Companion?" 🐰🦊​ 🐙🍀☁️
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The little companions were completely manufactured by me. I listed the resources used, the STL files to print, and the code is available in the &lt;a href="https://github.com/winnekes/sturmglas/iot"&gt;repository&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you want you could build your very own!&lt;/p&gt;

&lt;p&gt;That being said, should this idea have traction and people are requesting a companion I'll do my best to get that production line started for an initial alpha stage of &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please subscribe to my newsletter on &lt;a href="https://winnekes.hashnode.dev"&gt;Hashnode&lt;/a&gt;. if you haven't done so already, feel free to leave a comment if you want to receive updates - I will soon embed a dedicated newsletter on &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please try out the app and give me your honest feedback! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>iot</category>
      <category>nextjs</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>Learning Go by examples: part 8 - Automatically cross-compile &amp; release your Go app</title>
      <author>Aurélie Vache</author>
      <pubDate>Wed, 01 Sep 2021 07:31:03 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a</guid>
      <description>&lt;p&gt;In previous articles we created an &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-2-create-an-http-rest-api-server-in-go-1cdm"&gt;HTTP REST API server&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;CLI&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-4-create-a-bot-for-discord-in-go-43cf"&gt;Bot for Discord&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-6-create-a-grpc-app-in-go-2ja3"&gt;gRPC app&lt;/a&gt; ... and even a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944"&gt;game for Nintendo Game Boy Advance&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As we have already seen, Golang can be used for several of type of applications, but you know, I love creating CLI apps &amp;amp; tools, I love DevOps philosophy and I love Gophers. So in this article we'll create a little tool, with few Go best practices, and automatically generate cross-platform executable binaries and create GitHub releases through GitHub actions.&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h2&gt;

&lt;p&gt;First, create our new repository in GitHub (in order to share and open-source it).&lt;/p&gt;

&lt;p&gt;For that, I logged in &lt;a href="https://github.com/"&gt;GitHub website&lt;/a&gt;, clicked on the &lt;strong&gt;repositories&lt;/strong&gt; link, click on "New" green button and then I created a new repository called &lt;a href="https://github.com/scraly/gophersay"&gt;gophersay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, in your local computer, git clone this new repository where you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/gophersay.git
$ cd gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we have to initialize Go modules (dependency management):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init github.com/scraly/gophersay
go: creating new go.mod: module github.com/scraly/gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create a &lt;code&gt;go.mod&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module github.com/scraly/gophersay

go 1.16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before starting to code our Desktop application, as good practices, we will create a simple code organization.&lt;/p&gt;

&lt;p&gt;Create the following folders organization:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── bin
├── README.md
└── go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it? Yes, the rest of our code organization will be created shortly ;-).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-create-our-app"&gt;
  &lt;/a&gt;
  Let's create our app
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTrczfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrsfks6mf5eexmcqwex0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTrczfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrsfks6mf5eexmcqwex0.png" alt="Fox Gopher"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do we want?&lt;/p&gt;

&lt;p&gt;Do you know "&lt;a href="https://fr.wikipedia.org/wiki/Cowsay"&gt;cowsay&lt;/a&gt;" application? It's a simple app that display your text said by a cow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_VwKlC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gvdm2adkdv0uln4yy2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_VwKlC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gvdm2adkdv0uln4yy2y.png" alt="cowsay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love cow, but I love more Gophers, so we want to create a "cowsay" version with a Gopher instead of a cow.&lt;br&gt;
The program will display a text written by the user and a Gopher, in ASCII, that say the text.&lt;/p&gt;

&lt;p&gt;This app may seem useless but you will see, it will allow us to see some good practices ;-).&lt;/p&gt;

&lt;p&gt;The first thing to do is to retrieve &lt;a href="https://github.com/scraly/gophersay/tree/main/gophers"&gt;Gophers in ASCII format&lt;/a&gt; I created and put them in a new &lt;code&gt;gophers&lt;/code&gt; folder. You need to have a folder like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── gophers
│   ├── gopher0.txt
│   ├── gopher1.txt
│   ├── gopher2.txt
│   └── gopher3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a &lt;code&gt;main.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First, we initialize the package, called &lt;code&gt;main&lt;/code&gt;, and all dependencies/librairies we need to import:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"embed"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, we initialize our variable:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Hey, I want to embed "gophers" folder in the executable binary&lt;/span&gt;
&lt;span class="c"&gt;// Use embed go 1.16 new feature (for embed gophers static files)&lt;/span&gt;
&lt;span class="c"&gt;//go:embed gophers&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Thanks to awesome &lt;strong&gt;embed&lt;/strong&gt; feature included since &lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;Go 1.16&lt;/a&gt; version, we tell that we embed &lt;code&gt;gophers/&lt;/code&gt; folder in the variable &lt;code&gt;embedGopherFiles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's create the &lt;code&gt;main()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Display usage/help message&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"--help"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"GopherSay is inspired by Cowsay program.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Usage:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay MESSAGE&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Example:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay hello Gopher lovers"&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nbChar&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbChar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" &amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"        &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"         &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Generate a random integer depending on get the number of ascii files&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;randInt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Display random gopher ASCII embed files&lt;/span&gt;
        &lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during read gopher ascii file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's time to explain the &lt;code&gt;main()&lt;/code&gt; function step by step.&lt;/p&gt;

&lt;p&gt;First, if the user execute our app/tool without argument, or with "-h" option and or "--help" option, we display an usage/a help message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="c"&gt;// Display usage/help message&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"--help"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"GopherSay is inspired by Cowsay program.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Usage:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay MESSAGE&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Example:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay hello Gopher lovers"&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, if user execute the &lt;code&gt;gophersay&lt;/code&gt; app with an argument, a text, we define a variable message that retrieve all arguments and a variable with the number of characters of the message.&lt;br&gt;
We print out this message surrounded by "bubble", like "cowsay" program does:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nbChar&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbChar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" &amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"        &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"         &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After that, we generate a random integer between 0 and the number of gopher files we have -1 (4-1 at this time but I plan to add more):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="c"&gt;// Generate a random integer depending on get the number of ascii files&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;randInt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wait... why do we execute &lt;code&gt;rand.Seed()&lt;/code&gt; function?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rand.Intn(int)&lt;/code&gt; returns a non negative pseudo-random number in [0,n]. It's cool, but … it produces a deterministic sequence of values!&lt;br&gt;
So the solution, in order to have "real" random number is to use &lt;code&gt;rand.Seed()&lt;/code&gt; in order to initialize the default source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWsJ-uoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a385vkldksuvwfqov1p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWsJ-uoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a385vkldksuvwfqov1p2.png" alt="crypto/rand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go back to our code, we then want to display our cute ASCII Gopher:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="c"&gt;// Display random gopher ASCII embed files&lt;/span&gt;
        &lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during read gopher ascii file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And finally, create the function that return the number of ASCII Gopher image files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadDir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during reading gophers folder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;nbOfFiles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nbOfFiles&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nbOfFiles&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-what-is-this-famous-embed"&gt;
  &lt;/a&gt;
  OK, but what is this famous embed??
&lt;/h3&gt;

&lt;p&gt;If we package only our &lt;code&gt;main.go&lt;/code&gt; file in an executable binary, when we will execute it, we'll have a problem because "gophers/" folder not exists in your computer.&lt;/p&gt;

&lt;p&gt;Before Go version 1.16, there were several solutions but not as easy as the new &lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;&lt;code&gt;embed&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new &lt;code&gt;embed&lt;/code&gt; package provides access to files embedded in the program during compilation using the new &lt;code&gt;//go:embed directive&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The new &lt;code&gt;//go:embed&lt;/code&gt; directive allow to embed static files and folders into application binary at compile-time without using an external tool.&lt;/p&gt;

&lt;p&gt;In order to use it, first we have to declare a variable for the embedded content. In our example we embed our &lt;code&gt;gophers/&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:embed gophers&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, we can read one file in this folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And retrieve a list of the files in this folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadDir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also embed a file directly:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:embed gophers/gopher0.txt&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myFile&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;/!\ If the embed pattern names a folder, all files are embedded (recursively), except the files with names beginning with "." or "_". &lt;br&gt;
If you want to embed them, you need to specify the folder like this: &lt;code&gt;myfolder/*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it!
&lt;/h2&gt;

&lt;p&gt;After code explanation, it's time to test our little app!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
GopherSay is inspired by Cowsay program.
GopherSay allow you to display a message said by a cute random Gopher.

Usage:
   gophersay MESSAGE

Example:
   gophersay hello Gopher lovers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run main.go &lt;span class="nt"&gt;--help&lt;/span&gt;
GopherSay is inspired by Cowsay program.
GopherSay allow you to display a message said by a cute random Gopher.

Usage:
   gophersay MESSAGE

Example:
   gophersay hello Gopher lovers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Cool, we have our usage message.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run main.go Hello Gopher lovers!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFghxKwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0q9ffp82llncebyzkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFghxKwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0q9ffp82llncebyzkc.png" alt="gophersay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah! Our text is said by one of our cute ASCII Gophers!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#build-it"&gt;
  &lt;/a&gt;
  Build it!
&lt;/h2&gt;

&lt;p&gt;Your application is now ready, you can build it.&lt;/p&gt;

&lt;p&gt;In previous articles, we used &lt;a href="https://taskfile.dev/#/"&gt;Taskfile&lt;/a&gt; in order to automate our common tasks.&lt;/p&gt;

&lt;p&gt;I created a &lt;code&gt;Taskfile.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go run main.go&lt;/span&gt;

    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go build -o bin/gophersay main.go&lt;/span&gt; 

    &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rm -rf dist&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, now we can build our app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task build
task: [build] GOFLAGS=-mod=mod go build -o bin/gophersay main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But... the executable binary is only for our environment, our OS, our platform, and I want to share my &lt;code&gt;gophersay&lt;/code&gt; worldwide so it's time to find a way to easily cross-compile our app!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#goreleaser"&gt;
  &lt;/a&gt;
  GoReleaser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MDvOWtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb7x7cs422mu5d886xrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MDvOWtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb7x7cs422mu5d886xrt.png" alt="GoReleaser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://goreleaser.com/"&gt;GoReleaser&lt;/a&gt;, it's possible to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-compile Go project&lt;/li&gt;
&lt;li&gt;Release to GitHub, GitLab and Gitea&lt;/li&gt;
&lt;li&gt;Create Docker images and manifests&lt;/li&gt;
&lt;li&gt;Create Linux packages and Homebrew taps&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, come on, it's exactly what do we want!&lt;/p&gt;

&lt;p&gt;First, we need to &lt;a href="https://goreleaser.com/install/"&gt;install GoReleaser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For MacOS:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install goreleaser/tap/goreleaser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the init command to create a &lt;code&gt;.goreleaser.yml&lt;/code&gt; configuration file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ goreleaser init
   • Generating .goreleaser.yml file
   • config created; please edit accordingly to your needs file=.goreleaser.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's watch this new generated file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is an example .goreleaser.yml file with some sane defaults.&lt;/span&gt;
&lt;span class="c1"&gt;# Make sure to check the documentation at http://goreleaser.com&lt;/span&gt;
&lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# You may remove this if you don't use go modules.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;go mod tidy&lt;/span&gt;
    &lt;span class="c1"&gt;# you may remove this if you don't need go generate&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;go generate ./...&lt;/span&gt;
&lt;span class="na"&gt;builds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CGO_ENABLED=0&lt;/span&gt;
    &lt;span class="na"&gt;goos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;linux&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;windows&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;darwin&lt;/span&gt;
&lt;span class="na"&gt;archives&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;replacements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;darwin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Darwin&lt;/span&gt;
      &lt;span class="na"&gt;linux&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Linux&lt;/span&gt;
      &lt;span class="na"&gt;windows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Windows&lt;/span&gt;
      &lt;span class="na"&gt;386&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;i386&lt;/span&gt;
      &lt;span class="na"&gt;amd64&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;x86_64&lt;/span&gt;
&lt;span class="na"&gt;checksum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name_template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;checksums.txt'&lt;/span&gt;
&lt;span class="na"&gt;snapshot&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name_template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;incpatch&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;.Version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}-next"&lt;/span&gt;
&lt;span class="na"&gt;changelog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;asc&lt;/span&gt;
  &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;^docs:'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;^test:'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's pretty cool. Because we don't use &lt;code&gt;go generate&lt;/code&gt; in our application, we can remove the &lt;code&gt;- go generate ./...&lt;/code&gt; line ;-).&lt;/p&gt;

&lt;p&gt;Let's run a "local-only" release to generate a release of our Go app locally:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ goreleaser release --snapshot --skip-publish --rm-dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;/!\ Don't forget to call this &lt;code&gt;goreleaser release&lt;/code&gt; command with &lt;code&gt;--rm-dist&lt;/code&gt; option or you can execute &lt;code&gt;task clean&lt;/code&gt; target in order to remove &lt;strong&gt;dist/&lt;/strong&gt; folder. If not, you'll have an issue because this folder need to be empty ^^.&lt;/p&gt;

&lt;p&gt;If we take a look into new &lt;code&gt;dist/&lt;/code&gt; generated folder, we can see that GoReleaser generate, for us, cross-platform executable binaries, and checksum:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dist
├── checksums.txt
├── config.yaml
├── gophersay_0.0.1-next_Darwin_arm64.tar.gz
├── gophersay_0.0.1-next_Darwin_x86_64.tar.gz
├── gophersay_0.0.1-next_Linux_arm64.tar.gz
├── gophersay_0.0.1-next_Linux_i386.tar.gz
├── gophersay_0.0.1-next_Linux_x86_64.tar.gz
├── gophersay_0.0.1-next_Windows_i386.tar.gz
├── gophersay_0.0.1-next_Windows_x86_64.tar.gz
├── gophersay_darwin_amd64
│   └── gophersay
├── gophersay_darwin_arm64
│   └── gophersay
├── gophersay_linux_386
│   └── gophersay
├── gophersay_linux_amd64
│   └── gophersay
├── gophersay_linux_arm64
│   └── gophersay
├── gophersay_windows_386
│   └── gophersay.exe
└── gophersay_windows_amd64
    └── gophersay.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's perfect!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-github-action-meet-goreleaser"&gt;
  &lt;/a&gt;
  When GitHub Action meet GoReleaser...
&lt;/h2&gt;

&lt;p&gt;And what about generate a new release automatically?&lt;/p&gt;

&lt;p&gt;Now, the next step is to execute GoReleaser, and publish a new associated Release in GitHub everytime we tag a new version of our application in our Git repository.&lt;/p&gt;

&lt;p&gt;Let's do this!&lt;/p&gt;

&lt;p&gt;Our Git repository is hosted in GitHub so we will use &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; for our CI (Continuous Integration) pipeline.&lt;/p&gt;

&lt;p&gt;Create our workflow:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir .github/workflows
$ cd .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside it, create &lt;code&gt;goreleaser.yml&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;goreleaser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Go&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-go@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;go-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run GoReleaser&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser/goreleaser-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;distribution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser&lt;/span&gt;
          &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release --rm-dist&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This workflow contains one job that we'll checkout the repository, package our app with GoReleaser and generate a GitHub release.&lt;/p&gt;

&lt;p&gt;/!\ In order to release to GitHub, GoReleaser need a valid GitHub token with the &lt;code&gt;repo&lt;/code&gt; scope. Fortunately, GitHub automatically &lt;a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret"&gt;creates a GITHUB_TOKEN secret&lt;/a&gt; to use in a workflow. &lt;/p&gt;

&lt;p&gt;After pushed your modification in the Git repository, now we can create a Git tag and push it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git tag -a v1.0.0 -m "First release"

$ git push --tags
Énumération des objets: 1, fait.
Décompte des objets: 100% (1/1), fait.
Écriture des objets: 100% (1/1), 157 octets | 157.00 Kio/s, fait.
Total 1 (delta 0), réutilisés 0 (delta 0), réutilisés du pack 0
To https://github.com/scraly/gophersay.git
 * [new tag]         v1.0.0 -&amp;gt; v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's go in our GitHub repository, and click on &lt;a href="https://github.com/scraly/gophersay/actions"&gt;"Actions"&lt;/a&gt; tab in order to watch running, failed and successfull workflows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UwGSD_02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gr8445ycbpm1ep9ij4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UwGSD_02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gr8445ycbpm1ep9ij4d.png" alt="Gh actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, our workflow successfully runned.&lt;/p&gt;

&lt;p&gt;A new GitHub release have been automatically created:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0cL6Qki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnzgk0uv3t5ogpfk9wg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0cL6Qki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnzgk0uv3t5ogpfk9wg4.png" alt="GH release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxMQBcrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8600bo86sg2omork79k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxMQBcrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8600bo86sg2omork79k.png" alt="GH release details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, each time I will update my app and create a Git tag and push it, automatically a new (GitHub) GH release will be created with cross-platform binaries :-).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

&lt;p&gt;If you like this article/tutorial and the cute &lt;code&gt;gophersay&lt;/code&gt; app, don't hesitate to add a star on GitHub :-)&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/gophersay"&gt;
        gophersay
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GopherSay allow you to display a message said by a cute random Gopher.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GopherSay&lt;/h3&gt;
  &lt;p&gt;
    &lt;a href="https://github.com/scraly/gophersay/releases/latest"&gt;&lt;img alt="GitHub release" src="https://camo.githubusercontent.com/8b668cd7bb4acd91638ddbfc503694207a68b8fa1e26176d1145291e62f3f16d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f736372616c792f676f706865727361792e7376673f6c6f676f3d676974687562267374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://goreportcard.com/report/github.com/scraly/gophersay" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8503ee18cf50db0ba88357f96a86286e6325350f669663012f042fd5b518789/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f736372616c792f676f70686572736179" alt="Code Status"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
About&lt;/h1&gt;
&lt;p&gt;Welcome in GopherSay!&lt;/p&gt;
&lt;p&gt;GopherSay is inspired by Cowsay program.&lt;/p&gt;
&lt;p&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/p&gt;
&lt;h1&gt;
Installation&lt;/h1&gt;
&lt;p&gt;For MacOS:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;brew tap scraly/tools
brew install gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;
Pre-requisites&lt;/h1&gt;
&lt;p&gt;Install Go in 1.16 version minimum.&lt;/p&gt;
&lt;h1&gt;
Build the app&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;$ go build -o bin/gophersay main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ task build&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Run the app&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;$ ./bin/gophersay&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ task run&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Test the app&lt;/h1&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/gophersay Hello Gopher lovers
 ---------------------
&amp;lt; Hello Gopher lovers! &amp;gt;
 ---------------------
        \
         \
                                          ,
                             (%..**,,,,,.&amp;amp; .,,.**
                            ,%,*..,,,. .** **.,*,,**./
                           ./*,,.. .**,.,..,.,**.**..(.
                      .   (@.,*%.**.,,**,.,,%*..**,*,/(
                  ,..../../&amp;amp;&amp;amp;%................%///#.,***.....
                   /....,..........................@*@%...,.,
                     .....................................,
                    &amp;amp;*   #@................................
                 &amp;amp;           ...............................
                #             .........................%       @
               /@     @,      ........................*          *
              *.,            @.......................@    /@@
             /....%        ..........................&amp;amp;
            /........%@@..............................%         %
           ,....................................................*   *   .%
           .........................@,,,,,,,@...................* @   *****#
          *........................@,,,,,,/&amp;amp;(...................  /. ****,**
         ........................@,,,,,,,,,,,, ................/ #/////( ,*,
         //.....................@,,,,,,,,,,,,#................., #//////////
      ...........................,@@@   /  @................../....**//////(
      ...,.........................@@      @.......................///*//*/(
         ...........................&amp;amp;@@@@@@..................   @///////////
         ,..................................................*   @///////&amp;amp;* *
         /..................................................    @/@..,(@.&amp;amp; (
         ,.................................................     @ @/ .(#   .
          ................................................,     @ ,.%(#,**
          .............................................../      @ . @////*/&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scraly/gophersay"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create multiple different applications in Go... and to automatize build and cross-compilation.&lt;br&gt;
This time we didn't use Cobra, Viper and other frameworks because I wanted to show you we ca do a very small CLI without it :-).&lt;/p&gt;

&lt;p&gt;All the code of our &lt;strong&gt;GopherSay&lt;/strong&gt; app in Go is available in: &lt;a href="https://github.com/scraly/gophersay"&gt;https://github.com/scraly/gophersay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
