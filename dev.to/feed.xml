<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>6 Nullish coalescing operators every javascript programmer must know !</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Mon, 03 May 2021 03:58:48 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/6-nullish-coalescing-operators-every-javascript-programmer-must-know-12m2</link>
      <guid>https://dev.to/sudarshansb143/6-nullish-coalescing-operators-every-javascript-programmer-must-know-12m2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr-"&gt;
  &lt;/a&gt;
  TL:DR :
&lt;/h1&gt;

&lt;p&gt;Most of the time out javascript code becomes clumsier if we inserted the multiple null checks for the several entities. Those checks are kind of mandatory and if those checks were removed then this happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;TypeError: Cannot &lt;span class="nb"&gt;read &lt;/span&gt;property &lt;span class="s1"&gt;'xyz'&lt;/span&gt; of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For preventing  the  programme from crashing and also making a code a bit neater, in this article I will explain some ways to handle this tricky situations&lt;/p&gt;




&lt;p&gt;For the sake of examples, I will use following object to show you some example usage of  the operators&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;secodn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chess&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ternary operator is most commonly used operator in the code. Most programmers use this as the replacement of inline  if --- else. This operator mainly used in the conditional rendering of components in React&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ternary &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy Sud &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy Stranger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty straight forward. before &lt;strong&gt;?&lt;/strong&gt; is  the condition. immediately after &lt;strong&gt;?&lt;/strong&gt; symbol is the block for true value of condition and other is for false result of condition&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#super-powered-ternary-operator"&gt;
  &lt;/a&gt;
  💥 Super Powered Ternary Operator 💥
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ternary operator really shines when it is nested  with itself and can be replace if ...... else ladder completely  is used properly. In the following snippet, I used the operator as the if else block and made the  code more readable for anyone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ternary as if else &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isAdult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; You are adult :)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You are on the way &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No Kids here &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAdult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty simple here, Append multiple conditions with consecutive block and then put last else block for default condition &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#default-assignment-with-"&gt;
  &lt;/a&gt;
  Default Assignment with &lt;em&gt;??&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Default assignment is one of my favorite once. This allows me  to provide the placeholder value with minimal code by which we can trust the values and can implement type safety at logical level&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Sud's age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;sudsAge&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are assigning the default value to &lt;em&gt;sudsAge&lt;/em&gt;  if the person.age is undefined. It is pretty helpful. Thanks to this operator for saving us lengthy checks ❤&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#multi-condition-evaluation-with-includes"&gt;
  &lt;/a&gt;
  Multi Condition Evaluation with  &lt;em&gt;.includes()&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Many  times we have to check many conditions for both true / false values. For doing these,  I used to write multi-line nested code of  if and else block or use the switch statement. But here is the trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//check with multiple conditions&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isSporty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cricket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSporty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By replacing array values with real condition, we  can check for all true values. If any values returns false then it will won't proceed . &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-presence-of-property-in-object-using-"&gt;
  &lt;/a&gt;
  Check Presence of Property In Object Using &lt;em&gt;?.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
This is most useful operator in day to day life. Whether you are dealing with async API calls or dealing with blocking tasks, we easily assume the key will be present in the response of an API or output JSON object of any operation  But, what if key is absent of undefined. Here is the trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsHobbyFirst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;third&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sudsHobbyFirst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this operator we can make sure the property is present or not and perform checks / operations according to result.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#chaining-default-assignment-and-membership-operator"&gt;
  &lt;/a&gt;
  Chaining Default Assignment and Membership Operator
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Previously mentioned operator can be super powered if chained with the default assignment. We will assign the default value to variable if the property is undefined or absent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//?. with ?? &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsHobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;third&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nothing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sudsHobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are assigning the placeholder value for &lt;em&gt;sudsHobby&lt;/em&gt; &lt;br&gt;
&lt;em&gt;(🤣 you will use  this a lot 🤣 )&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
This my small try to explain you all the  usage of some operators which could possibly make your code neater and smaller rather than your previous code &lt;/p&gt;

&lt;p&gt;🤗Please let me know your thoughts in comments&lt;/p&gt;

&lt;p&gt;🙏hanks For Reading ...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HackerRank Series #1: Simple Array Sum</title>
      <author>Olasupo Funke</author>
      <pubDate>Mon, 03 May 2021 02:00:54 +0000</pubDate>
      <link>https://dev.to/roxie/hackerrank-series-1-simple-array-sum-p49</link>
      <guid>https://dev.to/roxie/hackerrank-series-1-simple-array-sum-p49</guid>
      <description>&lt;h4&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h4&gt;

&lt;p&gt;Given an array of integers, find the sum of its elements.&lt;/p&gt;

&lt;p&gt;For example, if the array &lt;code&gt;$ar = [1,2,3]&lt;/code&gt;, 1+2+3 =6, so return 6.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#function-description"&gt;
  &lt;/a&gt;
  Function Description
&lt;/h4&gt;

&lt;p&gt;Complete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.&lt;/p&gt;

&lt;p&gt;simpleArraySum has the following parameter(s):&lt;/p&gt;

&lt;p&gt;ar: an array of integers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sample Input : 1 2 3 4 10 11
Sample Output : 31
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h4&gt;

&lt;p&gt;In our text editor on HackerRank, we already have the &lt;code&gt;simpleArraySum()&lt;/code&gt; function declared with the parameter &lt;code&gt;$ar&lt;/code&gt; which can be any given array. All you need to do is write a set of instructions in the function that will calculate the sum of all array elements so whenever the function is called, it can calculate the sum of the array elements of any simple array.&lt;br&gt;
 For example in our Sample Input [1, 2, 3, 4, 10, 11], we expect an output of 31 seeing 1 +2+ 3+ 4 +10 +11 = 31.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Ponder: How do we get all the elements of an array🤔? A loop should work fine!😎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#psuedocodes"&gt;
  &lt;/a&gt;
  Psuedocodes
&lt;/h5&gt;

&lt;p&gt;Let's try to solve this problem without using codes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize &lt;code&gt;sum&lt;/code&gt; to 0.&lt;/li&gt;
&lt;li&gt;Loop through the array and get the array elements and add the value to &lt;code&gt;sum&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At each loop &lt;code&gt;sum&lt;/code&gt; is updated with the latest sum value after the previous array element has been added.&lt;/li&gt;
&lt;li&gt;After the loop, return &lt;code&gt;sum&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now, let's go coding!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will be using the &lt;code&gt;for&lt;/code&gt; method in &lt;code&gt;Javascript&lt;/code&gt; and  &lt;code&gt;foreach&lt;/code&gt; method in &lt;code&gt;PHP&lt;/code&gt; to loop through the array and solve this problem. This isn't static so you can use any valid method to loop through the array in your preferred language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we can write the &lt;code&gt;Javascript&lt;/code&gt; code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;simpleArraySum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can write the &lt;code&gt;PHP&lt;/code&gt; code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;simpleArraySum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ar&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;This would return an output of the sum of the array as a single integer. When using the &lt;code&gt;for&lt;/code&gt; method,  we are fetching the array elements based on their index so be careful not to do &lt;code&gt;i&amp;lt;=ar.length;&lt;/code&gt; in your condition statement. Avoid this common error because an array starts at index [0].&lt;/p&gt;

&lt;p&gt;Congratulations!🎉🎈 You completed your first warmup challenge on HackerRank.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S: This is the beginning of a series on the warmup algorithm challenges from HackerRank so stay tuned for more amazing challenges.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>algorithms</category>
      <category>hackathon</category>
      <category>hackerrank</category>
    </item>
    <item>
      <title>HackerRank Series #2: Compare the Triplets</title>
      <author>Olasupo Funke</author>
      <pubDate>Mon, 03 May 2021 01:54:42 +0000</pubDate>
      <link>https://dev.to/roxie/hackerrank-series-2-compare-the-triplets-50gp</link>
      <guid>https://dev.to/roxie/hackerrank-series-2-compare-the-triplets-50gp</guid>
      <description>&lt;h4&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h4&gt;

&lt;p&gt;Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.&lt;/p&gt;

&lt;p&gt;The rating for Alice's challenge is the triplet &lt;code&gt;a = (a[0], a[1], a[2])&lt;/code&gt;, and the rating for Bob's challenge is the triplet &lt;code&gt;b = (b[0], b[1], b[2])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The task is to find their comparison points by comparing &lt;code&gt;a[0]&lt;/code&gt; with &lt;code&gt;b[0]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt; with &lt;code&gt;b[1]&lt;/code&gt;, and &lt;code&gt;a[2]&lt;/code&gt; with &lt;code&gt;b[2]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;a[i] &amp;gt; b[i]&lt;/code&gt;, then Alice is awarded 1 point.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;a[i] &amp;lt; b[i]&lt;/code&gt;, then Bob is awarded 1 point.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;a[i] = b[i]&lt;/code&gt;, then neither person receives a point.
Comparison points are the total points a person earned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a and b, determine their respective comparison points.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;a = [1, 2, 3]&lt;/p&gt;

&lt;p&gt;b = [3, 2, 1]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For elements &lt;strong&gt;[0]&lt;/strong&gt;, Bob is awarded a point because &lt;code&gt;a[0]&amp;gt;b[0]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the element &lt;strong&gt;[1]&lt;/strong&gt; ,&lt;code&gt;a[1]&lt;/code&gt; and &lt;code&gt;b[1]&lt;/code&gt; are equal ,so no points are earned .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, for elements &lt;strong&gt;[2]&lt;/strong&gt;, &lt;code&gt;a[2] &amp;gt; b[2]&lt;/code&gt; so Alice receives a point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The return array is &lt;code&gt;[1, 1]&lt;/code&gt; with Alice's score first and Bob's second.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#function-description"&gt;
  &lt;/a&gt;
  Function Description
&lt;/h4&gt;

&lt;p&gt;Complete the function compareTriplets in the editor below.&lt;/p&gt;

&lt;p&gt;compareTriplets has the following parameter(s):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;int a[3]: Alice's challenge rating&lt;/li&gt;
&lt;li&gt;int b[3]: Bob's challenge rating
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sample Input: 
17 28 30
99 16 8

Sample Output
2 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h4&gt;

&lt;p&gt;The function &lt;code&gt;compareTriplets()&lt;/code&gt; has already declared alongside its parameters &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; which are the challenge ratings for Alice and Bob respectively. All you need to do now is to write instructions in that function to award them points when their ratings are compared with the conditions above and return the comparison array with Alice score coming first.&lt;/p&gt;

&lt;p&gt;Let's use our sample input as an example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;b[0] &amp;gt; a[0]&lt;/code&gt; so Bob is awarded one point.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a[0] &amp;gt; b[0]&lt;/code&gt; so Alice is awarded one point.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a[0] &amp;gt; b[0]&lt;/code&gt; so Alice is awarded one point.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives Alice a total of 2 points and Bob, 1 point. Now we return an array with the comparison results.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The comparison array is &lt;code&gt;[2,1]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h4&gt;

&lt;p&gt;After reading the problem, we can observe 2 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The comparison array must come with Alice score first.&lt;/li&gt;
&lt;li&gt;If both ratings are equal, nobody receives a point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#psuedocodes"&gt;
  &lt;/a&gt;
  Psuedocodes
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Pseudocode is a plain language description of the steps in an algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the above observations, our pseudocode can be executed as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize the score for Alice and Bob to 0, respectively.&lt;/li&gt;
&lt;li&gt;Loop through both arrays for their ratings.&lt;/li&gt;
&lt;li&gt;For every loop, compare both ratings based on the array index and assign one point to the score of the person with the greater rating.&lt;/li&gt;
&lt;li&gt;After the loop, return the comparison array with the cumulative points of Alice and Bob.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now let's get coding!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here is a solution to this problem in &lt;code&gt;Javascript&lt;/code&gt; and &lt;code&gt;PHP&lt;/code&gt;. I hope it gives you an idea to solve it in any preferred language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we can write the &lt;code&gt;Javascript&lt;/code&gt; code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareTriplets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;aScore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bScore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;aScore&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;bScore&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;comparison_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;aScore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nx"&gt;bScore&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;comparison_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can write the &lt;code&gt;PHP&lt;/code&gt; code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;compareTriplets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$aScore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$bScore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$aScore&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$bScore&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$aScore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bScore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quite an easy one right? Well done😎.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;This is a very good example of an easy question in HackerRank. Although it's very tricky because it looks very complicated at the first read but the first step in solving it is understanding the problem statement. Then you'll be able to solve it easily. If you have any questions or suggestions, do well to drop them in the comment section. Thank you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HackerRank series for Algorithm Warmup Challenges continues, so stay tuned!🥰&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>algorithms</category>
      <category>hackathon</category>
      <category>hackerrank</category>
    </item>
    <item>
      <title>Are you actually good at CSS?</title>
      <author>🅰️ GEEK</author>
      <pubDate>Mon, 03 May 2021 01:32:33 +0000</pubDate>
      <link>https://dev.to/ageekdev/are-you-actually-good-at-css-3jk1</link>
      <guid>https://dev.to/ageekdev/are-you-actually-good-at-css-3jk1</guid>
      <description>&lt;p&gt;According to &lt;a href="https://2020.stateofcss.com/en-US/demographics/#css_proficiency"&gt;State of CSS 2020&lt;/a&gt;, at least 61% developers rated themselves as CSS experts as following proficiency scales:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;None&lt;/strong&gt;: Virtually no knowledge of CSS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Beginner&lt;/strong&gt;: Using CSS frameworks and tweaking existing styles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Intermediate&lt;/strong&gt;: Knowing specificity rules, being able to create layouts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Advanced&lt;/strong&gt;: Mastering animations, interactions, transitions, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expert&lt;/strong&gt;: Able to style an entire front-end from scratch following a consistent methodology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you actually good at CSS after years of styling websites? Developers tend to assess themselves good at something after years using it because the illusion of equalizing experience with knowledge.&lt;/p&gt;

&lt;p&gt;I used to interview many developers for my company and I was shocked when modern developers rarely learn anything inside-out or read a book from cover to cover. They need something, they search it, read some tutorials, follow the instructions, finish the tasks, and call it a day.&lt;/p&gt;

&lt;p&gt;Many popular tech twitters often tweet like "After [x] years of doing [y] I'm still searching [z]" or "It’s all about knowing how to figure it out and look it up." to lower the expectation. Popularity doesn't mean expert, but the followers often expect so.&lt;/p&gt;

&lt;p&gt;You'll be amazed by the fact that CSS is actually &lt;strong&gt;easy to pick up but hard to master&lt;/strong&gt;. Same with &lt;strong&gt;Git&lt;/strong&gt; and &lt;strong&gt;Bash&lt;/strong&gt;. The reason behind all of this is we learn and use different language categories in different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;General purpose programming languages&lt;/strong&gt; (Java, JavaScript, Python, etc.): They are used to solve problems in many domains by allowing users writing arbitrary logics using common concepts (types, operators, loops, functions, classes, etc.) Learning one language will translate very well to another even they have different syntax but most likely share above common concepts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Domain specific programming languages&lt;/strong&gt; (HTML, CSS, SQL, etc): They expressively solve specific goals mostly by combining constructs (rules, keywords, APIs, shorthands, etc.). The more features they want to support, the more constructs they add.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are jokes around writing domain specific programming languages is not programming. People do respect a general purpose language like Javascript more to learn it inside-out, and consider CSS as ignorable already-working-just-fine stuff.&lt;/p&gt;

&lt;p&gt;A domain-specific language like CSS is easy-to-learn and straightforward to get started, you only need a small set of its constructs to be productive on daily basis. Imagine how many times in a year you actually do following CSS stuff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manually write fancy animations, transitions, or transforms&lt;/li&gt;
&lt;li&gt;Manually calculate selector specificity&lt;/li&gt;
&lt;li&gt;Manually write fancy hover effects&lt;/li&gt;
&lt;li&gt;Manually write fancy border styles&lt;/li&gt;
&lt;li&gt;Manually debug broken styles on devtools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Majority of the time of writing CSS, you often just write basic layouts and styles. Anything more complicated than that you'll use libraries, frameworks, or copy some code snippets elsewhere.&lt;/p&gt;

&lt;p&gt;CSS syntax is simple and there are only a few &lt;a href="https://ageek.dev/css"&gt;key CSS concepts&lt;/a&gt;. The hard part is memorizing hundreds of CSS properties/values and explicit/implicit meanings behind them. Even if you try to remember tons of them, you'll forget eventually.&lt;/p&gt;

&lt;p&gt;There is no official CSS documentation for public users, the best you can find are tons of module specifications written for browser vendors and some online learning resources here and there.&lt;/p&gt;

&lt;p&gt;Will you ever be actually expert at CSS? I think 99% frontend developer will be at intermediate-level for life without ever wanted or needed to push forward pass that level unless you're doing CSS-heavy tasks like developing CSS libraries, CSS frameworks, CSS books, or web browsers.&lt;/p&gt;




&lt;p&gt;This article was originally published at &lt;a href="https://ageek.dev"&gt;ageek.dev&lt;/a&gt; as part of online book &lt;a href="https://ageek.dev/css"&gt;Advanced CSS&lt;/a&gt; which covers some topics &lt;strong&gt;beyond the basics&lt;/strong&gt; that might bring your CSS skill to the next level.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Only 1 way to organize your messy articles</title>
      <author>Oimo</author>
      <pubDate>Mon, 03 May 2021 00:33:45 +0000</pubDate>
      <link>https://dev.to/oimob13/only-1-way-to-organize-your-messy-articles-ome</link>
      <guid>https://dev.to/oimob13/only-1-way-to-organize-your-messy-articles-ome</guid>
      <description>&lt;h1&gt;
  &lt;a href="#you-suffer-from-your-messy-articles-in-dev-community-and-messy-google-search-results"&gt;
  &lt;/a&gt;
  You suffer from your messy articles in Dev Community and messy google search results.
&lt;/h1&gt;

&lt;p&gt;I know you have wrote many articles in Dev Community. I know you feel your articles are messy to find out. &lt;/p&gt;

&lt;p&gt;Or, I'm sure you are in this situation many times. During coding, you often search a lot of things such as algorithms, syntax, trouble shooting, and so on. Finally, you accomplish your work through trial and error. &lt;/p&gt;

&lt;p&gt;Congratulations! &lt;/p&gt;

&lt;p&gt;However, you notice that you forget all and search the same things again in next project (or next day). At that time, you might be irritated because you could not find the same page you found before or face to 404. If you memorized them in your cookbook, you could have found it out soon.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#only-1-way-to-organize-your-messy-articles"&gt;
  &lt;/a&gt;
  Only 1 way to organize your messy articles
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://owncookbook.tech"&gt;ownCookbook&lt;/a&gt; is the platform that you make your own cookbooks and share the recipes easily. The uniquest point of ownCookbook is that you can arrange your articles in each book. It means you can make your own cookbooks, like '&lt;a href="https://amzn.to/3dCyMwp"&gt;Modern C++ Programming Cookbook&lt;/a&gt;', '&lt;a href="https://amzn.to/2QrIFUR"&gt;Python Cookbook&lt;/a&gt;', '&lt;a href="https://amzn.to/3sPFTGp"&gt;Go Programming Cookbook&lt;/a&gt;', and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-can-organize-your-articles-in-each-book"&gt;
  &lt;/a&gt;
  You can organize your articles in each book
&lt;/h1&gt;

&lt;p&gt;You can arrange your messy articles in each book. It is very useful to arrange your knowledge and skills, and it is easy to find out your article later. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--McMYj2gK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijv42qczilflo2jekp7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--McMYj2gK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijv42qczilflo2jekp7y.png" alt="ownCookbook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#user-friendly-markdown-editor"&gt;
  &lt;/a&gt;
  User friendly markdown editor
&lt;/h1&gt;

&lt;p&gt;Markdown editor of &lt;a href="https://owncookbook.tech"&gt;ownCookbook&lt;/a&gt; is very user friendly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UK2WqEI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b90bjfmdivnwqf3jjp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UK2WqEI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b90bjfmdivnwqf3jjp7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can write down your article and check its preview at the same time. &lt;/p&gt;

&lt;p&gt;Don't worry if you don't remember the markdown syntax. Convenient icons help you to write markdown like WYSIWYG editor.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-perfectly-free"&gt;
  &lt;/a&gt;
  It's perfectly free.
&lt;/h1&gt;

&lt;p&gt;It's perfectly free and you can stop using any time. Let's try it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#owncookbook"&gt;
  &lt;/a&gt;
  ownCookbook
&lt;/h1&gt;

&lt;p&gt;Access: &lt;a href="https://owncookbook.tech"&gt;https://owncookbook.tech&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create an Image Magnifier with React</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 02 May 2021 20:53:39 +0000</pubDate>
      <link>https://dev.to/anxinyang/create-an-image-magnifier-with-react-3fd7</link>
      <guid>https://dev.to/anxinyang/create-an-image-magnifier-with-react-3fd7</guid>
      <description>&lt;p&gt;Today, let's create a simple image magnifier component.&lt;/p&gt;

&lt;p&gt;First, let's create the basic structure of the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ImageMagnifier&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;magnifierHeight&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;magnifieWidth&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;zoomLevel&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// the container&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// the image&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="c1"&gt;// a div for the magnifier&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to add a state that controll the display of magnifier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showMagnifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and, the event handler that update the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onMouseEnter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onMouseLeave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to add a state that holds x, y position of magnifier, and update it when mouse move hover the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;setXY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// update cursor position&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="c1"&gt;// calculate cursor position on the image&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageXOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;setXY&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pageX/Y&lt;/code&gt; coordinates are relative to the left/top corner of current page.&lt;br&gt;
The &lt;code&gt;pageXOffset/pageYOffset&lt;/code&gt; are the scroll offsets of the page.&lt;br&gt;
The &lt;code&gt;left/top&lt;/code&gt; are the coordinates of the image left/top position.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageXOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two calculations will give us the cursor's x/y coordinates based on the image.&lt;/p&gt;

&lt;p&gt;In order to calculate the position of the magnifier, we also need to have the size of image in pixels, so let's update it when mouse is entering the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;onMouseEnter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// update image size and turn-on magnifier&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can add the position and other basic styles to the magnifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMagnifier&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="c1"&gt;// prevent magnifier blocks the mousemove event of img&lt;/span&gt;
        &lt;span class="na"&gt;pointerEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// set size of magnifier&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;magnifierHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;magnifieWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// move element center to cursor pos&lt;/span&gt;
        &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// reduce opacity so you can verify position&lt;/span&gt;
        &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px solid lightgray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// show the border of magnifier&lt;/span&gt;
        &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`url('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;backgroundRepeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-repeat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to zoom the image inside the magnifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;//calculate zoomed image size&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we need to center the image in the magnifier base on cursor position on the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;//calculate position of zoomed image.&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundPositionX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundPositionY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We done it. Here is the full code and a demo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ImageMagnifier&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;magnifierHeight&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;magnifieWidth&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;zoomLevel&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;setXY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;imgWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgHeight&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showMagnifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onMouseEnter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// update image size and turn-on magnifier&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// update cursor position&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="c1"&gt;// calculate cursor position on the image&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageXOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;setXY&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onMouseLeave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// close magnifier&lt;/span&gt;
          &lt;span class="nx"&gt;setShowMagnifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMagnifier&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

          &lt;span class="c1"&gt;// prevent magnifier blocks the mousemove event of img&lt;/span&gt;
          &lt;span class="na"&gt;pointerEvents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// set size of magnifier&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;magnifierHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;magnifieWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// move element center to cursor pos&lt;/span&gt;
          &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// reduce opacity so you can verify position&lt;/span&gt;
          &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1px solid lightgray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`url('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundRepeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-repeat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

          &lt;span class="c1"&gt;//calculate zoomed image size&lt;/span&gt;
          &lt;span class="na"&gt;backgroundSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
            &lt;span class="nx"&gt;imgHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

          &lt;span class="c1"&gt;//calculate position of zoomed image.&lt;/span&gt;
          &lt;span class="na"&gt;backgroundPositionX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;magnifieWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;backgroundPositionY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;zoomLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;magnifierHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/3jsqs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you all!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Vite.js - O build tool que vai facilitar a sua vida</title>
      <author>Camilo Micheletto</author>
      <pubDate>Sun, 02 May 2021 20:41:44 +0000</pubDate>
      <link>https://dev.to/lixeletto/vite-js-o-build-tool-que-vai-facilitar-a-sua-vida-15ho</link>
      <guid>https://dev.to/lixeletto/vite-js-o-build-tool-que-vai-facilitar-a-sua-vida-15ho</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-vitejs"&gt;
  &lt;/a&gt;
  O que é ViteJS?
&lt;/h2&gt;

&lt;p&gt;Vamos supor que você esteja começando um projeto de HTML, CSS e Javascript e queira dar uma apimentada instalando um processador de CSS como Sass ou Less, já começaria a desanimar um pouco né? Você teria que escolher um bundler¹ como Webpack ou Parcel, talvez uma automatização com Gulp. Com todas essas opções e configurações, além do seu projeto aumentar em tamanho e dependências, o tempo que você precisa configurar coisas até a hora que você efetivamente vai programar aumenta.&lt;/p&gt;

&lt;p&gt;O Vite (pronuncia-se /vit/ em  francês,significa rápido) surgiu levando essas dores em conta, sendo um bundler e um dev-server que você consegue usar compiladores e frameworks direto da caixa, com zero configuração.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Bundlers¹&lt;/strong&gt; combinam os diferentes módulos da sua aplicação em um arquivo que você consiga usar em ambiente de produção. Antes da chegada dos JS Modules para os browsers, você só conseguia trabalhar com arquivos contendo módulos importados (Ex: &lt;code&gt;import React from&lt;/code&gt; 'react' com a ajuda de um &lt;em&gt;bundler&lt;/em&gt; como Webpack ou Parcel)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#caracter%C3%ADsticas-principais"&gt;
  &lt;/a&gt;
  Características principais
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A rapidez&lt;/strong&gt;&lt;br&gt;
Quando você inicia um projeto em Vite a primeira coisa que ele faz é dividir seu código em duas partes: código fonte e dependências. As dependências geralmente são arquivos de Javascript que não sofrerão alterações, então elas são pré-compiladas usando o ESBuild, que é escrito em Go e é de 10-100 x mais rápido do que bundlers feitos com Javascript.&lt;/p&gt;

&lt;p&gt;Já o código fonte, que geralmente vai ser um código que vai precisar sofrer alguma alteração (JSX, Typescript, etc) são servidos como módulos javascript nativos, deixando que o browser auxilie no trabalho do bundler. Quando você faz uma alteração em um arquivo, o browser faz a requisição apenas dele, tornando muito mais rápidas as operações de Hot Module Replacement².&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Hot Module Replacement²&lt;/strong&gt; ou HMR é uma tecnologia que permite que suas mudanças em ambiente de desenvolvimento reflitam no navegador em tempo real.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com essas features e o cacheamento de dependências que o Vite faz por padrão, após o primeiro build da aplicação em desenvolvimento, todos os builds subsequentes não levam mais do que 300ms. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experiência de desenvolvimento&lt;/strong&gt;&lt;br&gt;
Isso significa que, por exemplo, você pode criar um projeto de HTML, Sass e Typescript, incluir seu arquivo .ts direto em uma tag &lt;code&gt;&amp;lt;script type="module"&amp;gt;&lt;/code&gt; e ele será compilado pelo ESBuild de 20 a 30 vezes mais rápido que o TSC e atualizado no front com uma latência de 230 a 300ms, independente do tamanho do projeto.&lt;/p&gt;

&lt;p&gt;Isso resolve o problema de bundlers como Webpack que pelo fato de terem que recompilar toda a aplicação pra fazer o build e seu HMR ainda não utiliza ESModules, conforme a aplicação vai crescendo, o tempo de build e atualização em tempo real vão ficando cada vez maiores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build e Produção&lt;/strong&gt;&lt;br&gt;
O build tool do Vite é construído em cima do Rollup, pois o suporte do ESBuild pra code-splitting e CSS ainda é bem fraco, mas há planos para a migração total. O build ja é pré-configurado com minificação, tree shaking (remove dependências não utilizadas), code-splitting e carregamento assíncrono e pré-optimizado de módulos.&lt;/p&gt;

&lt;p&gt;Por último, o Vite é agnóstico de plataformas e frameworks, podendo ser usado com a maioria dos frameworks modernos conhecidos, tanto à partir de um projeto Vite como utilizando a sua API de Javascript.&lt;/p&gt;

&lt;p&gt;Em relação a outros toolings de front-end, Vite possui a grande maioria das características. Os frameworks usados na comparação foram ESbuild, Snowpack e WMR, o artigo mais completo do comparativo pode ser encontrado no site &lt;a href="https://css-tricks.com/comparing-the-new-generation-of-build-tools/"&gt;CSS Tricks, em inglês.&lt;/a&gt;&lt;br&gt;
&lt;small&gt; &lt;em&gt;Removi a feature de HTM transforms da lista pois não achei fontes para explicar sobre o que é&lt;/em&gt; &lt;/small&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1vvlohK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o4l5k34e18yqrz7qze9.png" alt="Features"&gt; Features&lt;/th&gt;
&lt;th&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGnJ3d3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjx5eyd43aj1l8cxibup.png" alt="Tem ou não?"&gt; Tem?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Templates pra diversos frameworks front-end&lt;/td&gt;
&lt;td&gt;✅ Tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Servidor de desenvolvimento com HMR&lt;/td&gt;
&lt;td&gt;✅ Tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Streaming imports&lt;/td&gt;
&lt;td&gt;❌ Não tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Build de produção pré-configurado&lt;/td&gt;
&lt;td&gt;✅ Tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conversão automática pra PostCSS e preprocessadores&lt;/td&gt;
&lt;td&gt;✅ Tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Suporte pra plugins Rollup&lt;/td&gt;
&lt;td&gt;✅ Tem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tamanho em disco (Instalação Padrão)&lt;/td&gt;
&lt;td&gt;18M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#pontos-negativos"&gt;
  &lt;/a&gt;
  Pontos negativos
&lt;/h2&gt;

&lt;p&gt;Os contras dessa nova ferramenta são três:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O Vite até o presente momento ainda possui alguns bugs então deve ser usado em produção por sua conta e risco.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;O suporte 'direto da caixa' conta que você esteja escrevendo Javascript moderno, não oferecendo suporte legado pra IE por padrão.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vite ainda não possui um bom suporte SSR (Server Side Rendering), ainda é mais recomendado usar meta-frameworks como Next ou Nuxt até um release mais estável.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Não tem suporte pra streaming imports³ como Snowpack e WMR tem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Streaming Imports³&lt;/strong&gt; é a capacidade de importar pacotes ou livrarias sem o &lt;code&gt;npm | yarn install&lt;/code&gt;, essas dependências requisitadas diretamente de onde elas estão hospedadas e incorporadas no processo de build. Mais detalhes no site do &lt;a href="https://www.snowpack.dev/guides/streaming-imports"&gt;Snowpack, em inglês&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#como-come%C3%A7ar-a-usar"&gt;
  &lt;/a&gt;
  Como começar a usar?
&lt;/h2&gt;

&lt;p&gt;Vamos supor que você queira iniciar um projeto usando React e Sass, pra esse exemplo vou usar o yarn como package manager.&lt;/p&gt;

&lt;p&gt;Primeiro iniciamos um projeto com um template de React&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create @vitejs/app my-react-app &lt;span class="nt"&gt;--template&lt;/span&gt; react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida instalamos Sass:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E bem... é isso, você pode usar todas as features que usaria com create-react-app, só que MUITO mais rápido.&lt;/p&gt;

&lt;p&gt;Outro jeito de fazer seria apenas instalar Vite, Sass e React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; vite react react-dom sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Criar um arquivo .jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;main.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pra fins de teste, vamos só criar um Hello World&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, uma aplicação React direto da caixa!&lt;/p&gt;




&lt;p&gt;Se quiser saber mais sobre Vite, a documentação é ótima e tem um bom passo-a-passo pra usuários iniciantes, você pode encontrar a &lt;a href="https://vitejs.dev/guide/"&gt;documentação em inglês aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Boa parte do material sobre Vite que escrevi veio &lt;a href="https://www.youtube.com/watch?v=UJypSr8IhKY&amp;amp;t=1304s"&gt;desse episódio de Open Source Friday&lt;/a&gt; do canal do Github com &lt;a href="https://twitter.com/bdougieYO"&gt;bDougie (Brian Douglas)&lt;/a&gt; com &lt;a href="https://twitter.com/youyuxi"&gt;Evan You, criador do Vite e do Vue.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pra ficar a par das informações e novidades do Vite.js, &lt;a href="https://twitter.com/vite_js"&gt;sigam eles no twitter&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Ficou com dúvidas, achou um erro, discorda de mim? Deixa ai no comentário, bora conversar?&lt;/p&gt;

&lt;p&gt;Gostou do artigo? Compartilha com quem você acha que vai se beneficiar do conteúdo.&lt;/p&gt;

&lt;p&gt;Qualquer coisa só dar um salve no &lt;a href="https://twitter.com/lixeletto"&gt;meu twitter, @lixeletto&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vite</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to accept command line arguments in Node.js scripts?</title>
      <author>Mohammad Moallemi</author>
      <pubDate>Sun, 02 May 2021 20:34:35 +0000</pubDate>
      <link>https://dev.to/mmoallemi99/how-to-accept-command-line-arguments-in-node-js-scripts-b6b</link>
      <guid>https://dev.to/mmoallemi99/how-to-accept-command-line-arguments-in-node-js-scripts-b6b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dij_LUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1650/0%2AwgRH9wqUzTTXeTJO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dij_LUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1650/0%2AwgRH9wqUzTTXeTJO.png" alt="How to accept command line arguments in Node.js scripts?"&gt;&lt;/a&gt;How to accept command line arguments in Node.js scripts?&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In this short blog post, we’re going to see how we can write a Node.js script that accepts command line arguments and named arguments.&lt;/p&gt;

&lt;p&gt;As we know in any Node.js script we have an object called &lt;code&gt;process&lt;/code&gt; which contains a lot of information about the current running process from environment variables to PID and etc...&lt;/p&gt;

&lt;p&gt;One of the available keys in &lt;code&gt;process&lt;/code&gt; object is &lt;code&gt;argv&lt;/code&gt; and we can easily access it via &lt;code&gt;process.argv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The two first items are Node.js executable path and JavaScript file path followed by provided command-line arguments unless you run it in an interactive Node.js shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// From script file named main.js  
console.log(process.argv)  
[ '/usr/bin/node', '/home/mmoallemi/main.js' ]  

// From interactive node  
❯ node  
Welcome to Node.js v15.14.0.  
Type ".help" for more information.  
&amp;gt; process.argv  
[ '/usr/bin/node' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should use &lt;code&gt;process.argv.slice(2)&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node main.js first second third  

~   
❯ node main.js  first second third  
[  
  'first',  
  'second',  
  'third'  
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! So far we have achieved to pass positional arguments to our script but if we want to use named arguments or some kind of flags?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node main.js extract --input=test.txt --output=results.txt  
[  
  'extract',  
  '--input=test.txt',  
  '--output=results.txt'  
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We passed one positional argument and two named arguments, we can go ahead and clean the values and split them by &lt;code&gt;=&lt;/code&gt; and this kind of stuff, but let's do it right.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;minimist&lt;/code&gt; using your favorite package manager, I use yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add minimist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then pass arguments to &lt;code&gt;minimist&lt;/code&gt; to parse it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// node main.js extract --input=test.txt --output=results.txt  
// main.js script  
const minimist = require('minimist')  

const args = process.argv.slice(2)  

const parsedArgs = minimist(args)  

console.log('Parsed Arguments:', parsedArgs)  

console.log('Input:', parsedArgs.input)  
console.log('Output:', parsedArgs.output)  

console.table(parsedArgs)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enjoy the results!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Parsed Arguments: { _: [ 'extract' ], input: 'test.txt', output: 'results.txt' }  

Input: test.txt  
Output: results.txt  

┌─────────┬───────────┬───────────────┐  
│ (index) │     ۰     │    Values     │  
├─────────┼───────────┼───────────────┤  
│    _    │ 'extract' │               │  
│  input  │           │  'test.txt'   │  
│ output  │           │ 'results.txt' │  
└─────────┴───────────┴───────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy scripting!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at&lt;/em&gt; &lt;a href="https://mmoallemi99.com/blog/how-to-accept-command-line-arguments-in-node-js-scripts/"&gt;&lt;em&gt;https://mmoallemi99.com&lt;/em&gt;&lt;/a&gt; &lt;em&gt;on May 2, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to install Anbox on Debian</title>
      <author>Sylvain Bellone</author>
      <pubDate>Sun, 02 May 2021 20:00:25 +0000</pubDate>
      <link>https://dev.to/sbellone/how-to-install-anbox-on-debian-1hjd</link>
      <guid>https://dev.to/sbellone/how-to-install-anbox-on-debian-1hjd</guid>
      <description>&lt;p&gt;While waiting to see how it works on the PinePhone, I've recently tried to install &lt;a href="https://anbox.io/"&gt;Anbox&lt;/a&gt; on a Debian (Bullseye), and found out that the official documentation or other online articles don't have proper Debian instructions. Most of those articles are based on Snap, while nowadays everything is present to install it the Debian way.&lt;/p&gt;

&lt;p&gt;After digging around, it turns out that most of what I will describe here is properly documented in the dedicated Debian README (&lt;code&gt;/usr/share/doc/anbox/README.Debian&lt;/code&gt;), but I have to admit that it took me time to find it and I personally often prefer a simple and visual tutorial.&lt;/p&gt;

&lt;p&gt;So, here is what I had to do to run Anbox and the F-Droid apk on Debian!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#core-installation"&gt;
  &lt;/a&gt;
  Core installation
&lt;/h1&gt;

&lt;p&gt;The first thing to do is of course to install Anbox itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install anbox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, as stated in the &lt;a href="https://docs.anbox.io/userguide/install.html#install-kernel-modules"&gt;official doc&lt;/a&gt;, check that the necessary kernel modules are enabled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -1 /dev/{ashmem,binder}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo modprobe ashmem_linux
$ sudo modprobe binder_linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If like me, &lt;code&gt;/sbin&lt;/code&gt; is not in your &lt;code&gt;$PATH&lt;/code&gt; (&lt;code&gt;modprobe: command not found&lt;/code&gt;), add it or use the full path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo /sbin/modprobe ashmem_linux
$ sudo /sbin/modprobe binder_linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At that point, if you try to run it (&lt;code&gt;anbox session-manager&lt;/code&gt;), you will probably get the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Failed to connect to socket /run/anbox-container.socket: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#android-image"&gt;
  &lt;/a&gt;
  Android image
&lt;/h1&gt;

&lt;p&gt;Anbox indeed expect to find an Android image at &lt;code&gt;/var/lib/anbox/android.img&lt;/code&gt;.&lt;br&gt;
Download the latest image available at &lt;a href="https://build.anbox.io/android-images/"&gt;https://build.anbox.io/android-images/&lt;/a&gt; and move it there:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo mv ~/Downloads/android_amd64.img /var/lib/anbox/android.img&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart the service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo service anbox-container-manager restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to run Anbox, either from your Desktop environment launcher, or with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HnZyZdO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7j2ikppgdlcg674g2aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HnZyZdO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7j2ikppgdlcg674g2aj.png" alt="Anbox in XFCE Whisker Menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-and-running-apks"&gt;
  &lt;/a&gt;
  Installing and running APKs
&lt;/h1&gt;

&lt;p&gt;This last part is well explained in the &lt;a href="https://docs.anbox.io/userguide/install_apps.html"&gt;doc&lt;/a&gt;. Start by installing adb:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install android-tools-adb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have everything needed to install new applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the Anbox Application Manager&lt;/li&gt;
&lt;li&gt;Download F-Droid: &lt;code&gt;$ wget https://f-droid.org/F-Droid.apk&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install the apk: &lt;code&gt;$ adb install F-Droid.apk&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should now see F-Droid in Anbox Application Manager!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUm53ON0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2v2b5ve6566xrbzp0um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUm53ON0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2v2b5ve6566xrbzp0um.png" alt="Anbox Application Manager"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Refs:&lt;br&gt;
&lt;a href="https://superuser.com/a/1464899"&gt;https://superuser.com/a/1464899&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.debian.org/debian-user/2021/01/msg00894.html"&gt;https://lists.debian.org/debian-user/2021/01/msg00894.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/anbox/anbox/issues/123"&gt;https://github.com/anbox/anbox/issues/123&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>android</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How many hours per day you should spend learning programming</title>
      <author>DevPool</author>
      <pubDate>Sun, 02 May 2021 20:00:03 +0000</pubDate>
      <link>https://dev.to/devpool3000/how-many-hours-per-day-you-should-spend-learning-programming-56o1</link>
      <guid>https://dev.to/devpool3000/how-many-hours-per-day-you-should-spend-learning-programming-56o1</guid>
      <description>&lt;p&gt;As a Fullstack Software Engineer, I have already walked the path of learning. I wanted to share some of my tips, what I have witnessed from others and what worked for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Every number is different for each person:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyone can sit and start learning to program, but each person will arrive at the destination based on the path they took and if they had any help on the way. I have seen people taking almost a year and some just about 4 months to become web developers and find their first job. People that took a long time to learn had to make a lot of try and error, and unfortunately, no one was there to guide them. So if you are starting in web or software development in general, don't get discouraged because it's taking you a long time to understand a topic. But use this as an opportunity to learn and perhaps try to find a mentor who walked that path and can guide you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Consistency is the key:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have decided to become a web developer (or any software developer), give yourself a deadline and how many hours you can allocate a day to work toward that goal. Now, this part is very important, ready? Be honest with yourself. If you say 12 hours a day and your deadline is 6 months from now. Can you study every day for 12 hours consistently for 6 months? Well, first, you shouldn't do that, so be reasonable and very critical of this part as you may discourage or burn yourself out halfway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Be patient:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like for anything in life, you need to be patient about the process. 4 months or 1 year, and it will take time one way or the other. All you can do is prepare and have fun while doing it. There is nothing much to say about this one, but it is essential to point that out since many of us want to get to the destination fast and forget that it takes time, and you do need patience for this.&lt;/p&gt;

&lt;p&gt;These are my top 3 points that should help you predict how many hours you may need before getting that first job. You can subscribe to my channel DevPool as my goal is to help beginners and juniors succeed in the tech industry.&lt;/p&gt;

&lt;p&gt;&lt;a href="//youtube.com/channel/UC03vw5F2isFkbJhyEZU5bvg?sub_confirmation=1"&gt;YouTube - DevPool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>devjournal</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Self Healing UI Test Automation</title>
      <author>Tejas Deshpande</author>
      <pubDate>Sun, 02 May 2021 19:30:17 +0000</pubDate>
      <link>https://dev.to/tkdeshpande/self-healing-ui-test-automation-4j2j</link>
      <guid>https://dev.to/tkdeshpande/self-healing-ui-test-automation-4j2j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Simulating human-machine interactions using UI Automation tools has been one of the best productivity improvements in validating application quality in a scalable and performant manner. &lt;/p&gt;

&lt;p&gt;However the possibility of dynamic selector(s) has always caused flaky tests and has been the cause for major reservations for many.&lt;/p&gt;

&lt;p&gt;Although experts know ways to robustly develop/fix automated UI tests, they are quite ill perceived by many others and are thereby avoided.&lt;/p&gt;

&lt;p&gt;We are going to checkout an easy way handle those dynamic selectors using &lt;a href="https://testproject.io"&gt;TestProject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TestProject provides us with a self healing test automation platform which renews failing locator using AI to identify new locators.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is how it works...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the sake of this tutorial I will be focusing on the test creation part.&lt;br&gt;&lt;br&gt;
For the installation guide &lt;a href="https://docs.testproject.io/getting-started/installation-and-setup"&gt;check here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-setup"&gt;
  &lt;/a&gt;
  Test Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a new test by clicking on New Test and setting any desired &lt;em&gt;name&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For this tutorial select &lt;strong&gt;Web&lt;/strong&gt; as the &lt;strong&gt;test type&lt;/strong&gt;. And click Next.

  Details (Step: 1 &amp;amp; 2)
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ti5gNwDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nit4xuyckvglhuz8tkg5.gif" alt="New Test" title="New Test"&gt; 

&lt;/li&gt;
&lt;li&gt;Now on the Select web application dialog, click on the &lt;strong&gt;Web applications&lt;/strong&gt; dropdown and select &lt;strong&gt;Add a new application for testing&lt;/strong&gt;.
&lt;em&gt;I will be using the &lt;a href="https://the-internet.herokuapp.com"&gt;the internet heroku app&lt;/a&gt; for this tutorial.&lt;/em&gt;
To follow along set following parameters:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Name: internet heroku app
URL: https://the-internet.herokuapp.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;
  Details
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9H75hbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iesnkmn9opl3l8192a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9H75hbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iesnkmn9opl3l8192a.gif" alt="New Application" title="New Application"&gt;&lt;/a&gt; 

&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Since the AI based Self Healing functionality is available in the Web interface of TestProject, select to store the test on the cloud.&lt;/li&gt;
&lt;li&gt;For simplicity's sake I have used the recording feature to get you familiar with the UI of the test editor. This is the same UI that will assist us later to stabilize identification of the dynamic elements.

  Details
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbUEQZLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7i38025ofvqqjvwblr4.gif" alt="Get Started" title="Get Started"&gt; 

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#test-steps"&gt;
  &lt;/a&gt;
  Test Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Launch &lt;a href="https://the-internet.herokuapp.com"&gt;the internet heroku app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click on Dynamic Content link.
  Details
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctgCit6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c56n6hyyo0696ndrp1j8.gif" alt="TestSteps" title="Test Steps"&gt; 

&lt;/li&gt;
&lt;li&gt;Select the first paragraph on the page for Dynamic Content and check if it is correctly recognized by highlighting it in the UI.
  Details
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOooCeg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n45ylexvjepp88jluqp9.gif" alt="SelectFirstPara" title="Select First Paragraph"&gt; 

&lt;/li&gt;
&lt;li&gt;Refresh page and try to highlight the same element again. This time it will fail since initially the achor was the text content itself which has now changed.
  Details
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNTU47ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tydmjtrvrn5ajz1o2ba2.gif" alt="refreshpage" title="Select First Paragraph"&gt; 


Now things get interesting. We have arrived at the stage where the dynamic element is not recognized by the automation. Now think... how can we fix this...
Think of all the ways in which you can fix this test to make it robust. Once you're done, read the next step.
&lt;/li&gt;
&lt;li&gt;Fixing the dynamic locator failure is as simple as re-running the test or specific step. TestProject will run AI analysis and finds a replacement locator. To avoid AI bias, you get approval over the selections.
  Details
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thL0PV0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m57jspn0akgbohod0ero.gif" alt="updatelocator" title="Update Locator"&gt; 

&lt;/li&gt;
&lt;li&gt;Once confirmed go back to the test and re-run it as many times as you like and the dynamic content is handled just fine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the power of AI to automatedly fix dynamic locators could never have been any easier. Although many coders are skeptical about record-playback style tools, I urge all to give it a shot. It just might be worth your time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-more-detailed-illustration-refer-following-video"&gt;
  &lt;/a&gt;
  For more detailed illustration, refer following video:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Pila6IZ3J6U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>testautomation</category>
      <category>ai</category>
      <category>testing</category>
      <category>testdev</category>
    </item>
    <item>
      <title>FOUR USEFUL PYTHON LIBRARIES YOU DON'T KNOW ABOUT</title>
      <author>Ice or Fire</author>
      <pubDate>Sun, 02 May 2021 19:27:42 +0000</pubDate>
      <link>https://dev.to/iceorfiresite/four-useful-python-libraries-you-don-t-know-about-4lhl</link>
      <guid>https://dev.to/iceorfiresite/four-useful-python-libraries-you-don-t-know-about-4lhl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#i-introduce-4-python-libraries-and-make-a-mini-project"&gt;
  &lt;/a&gt;
  I Introduce 4 Python Libraries And Make A Mini Project
&lt;/h1&gt;

&lt;p&gt;In &lt;a href="https://www.iceorfire.com/post/four-useful-python-libraries-you-dont-know-about"&gt;this post&lt;/a&gt;, I teach you how to use Delorean, FuzzyWuzzy, Emoji and Inflect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delorean"&gt;
  &lt;/a&gt;
  Delorean
&lt;/h2&gt;

&lt;p&gt;It's more than just a time-traveling car! Delorean makes using Datetime objects simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fuzzywuzzy"&gt;
  &lt;/a&gt;
  FuzzyWuzzy
&lt;/h2&gt;

&lt;p&gt;He may be a bear with no hair but he's also a powerful fuzzy matching library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emoji"&gt;
  &lt;/a&gt;
  Emoji
&lt;/h2&gt;

&lt;p&gt;You can easily use all of your favorite emojis in your Python code with this library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inflect"&gt;
  &lt;/a&gt;
  Inflect
&lt;/h2&gt;

&lt;p&gt;Inflect is an amazing library that will help you write better messages/output for your users as well as a boatload of other things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show Me The Code
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.iceorfire.com/post/four-useful-python-libraries-you-dont-know-about"&gt;View the code and build our small MadLibs project&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
