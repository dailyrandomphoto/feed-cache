<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀#3 JavaScript Project Series.</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Wed, 15 Sep 2021 05:55:52 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/3-javascript-project-series-3gfj</link>
      <guid>https://dev.to/chetan_atrawalkar/3-javascript-project-series-3gfj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-coders"&gt;
  &lt;/a&gt;
  Hello Coders!👋
&lt;/h2&gt;

&lt;p&gt;Welcome back to the Javascript project series. Today i'm share another amazing project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-this-series-for-upcoming-projects"&gt;
  &lt;/a&gt;
  💟 Save This Series For Upcoming Projects.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmVSNJzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwe6tfibcylath1kobw6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmVSNJzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwe6tfibcylath1kobw6.gif" alt="thumbs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;💥 Let's get started....🚀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-animated-menu-indicator-using-javascript"&gt;
  &lt;/a&gt;
  📜 3. Animated Menu Indicator using JavaScript.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this, we're going to see how you can create an animated Menu Navbar using JavaScript. Navbar is an essential part of any website. It gives the user a functionality to navigate through the website efficiently and easily. It guides the user accordingly so the user will not get lost or loose interest. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-preview"&gt;
  &lt;/a&gt;
  Here's a preview:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6JkzwnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9v86aa2thqnxosbiu2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6JkzwnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9v86aa2thqnxosbiu2.jpg" alt="view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codepen-link-for-result"&gt;
  &lt;/a&gt;
  🔸 &lt;a href="https://codepen.io/codev_land/pen/LYLjrpM"&gt;CodePen Link For Result&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;That being said, let us get started.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 1:-&lt;/strong&gt; Like always, create 3 files - Index.html, Style.css and Script.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 2:-&lt;/strong&gt; Copy the below HTML code and paste it into your code editor.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  Index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Animated menu indicator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item is-active"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Project&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"rebeccapurple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-indicator"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step - 3:-&lt;/strong&gt; Below is the CSS code for styling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css?family=DM+Sans:500,700&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f6f7fc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;159&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#83818c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"DM Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dfe2ea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.is-active&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.is-active&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-indicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step - 4:-&lt;/strong&gt; Below is the JavaScript code which is the most important part in this Animation. Here, we're creating two constants - &lt;strong&gt;indicator and items&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;"indicator"&lt;/code&gt;&lt;/strong&gt; will store the information of the class &lt;strong&gt;&lt;code&gt;".nav-indicator"&lt;/code&gt;&lt;/strong&gt;, that is the line below. And &lt;strong&gt;&lt;code&gt;"items"&lt;/code&gt;&lt;/strong&gt; will store the information of the class &lt;strong&gt;&lt;code&gt;".nav-items"&lt;/code&gt;&lt;/strong&gt;, that is the menu-items. &lt;/li&gt;
&lt;li&gt;Next define function &lt;strong&gt;&lt;code&gt;handleIndicator&lt;/code&gt;&lt;/strong&gt; that's check the which item is clicked by used as per click perform particular task.&lt;/li&gt;
&lt;li&gt;In this function used &lt;strong&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/strong&gt; loop is an Array method that executes a custom callback function on each item in an array.&lt;/li&gt;
&lt;li&gt;Read the code and you will understand how things really works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  Script.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav-indicator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. You're done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-this-series-for-upcoming-projects"&gt;
  &lt;/a&gt;
  💟 Save This Series For Upcoming Projects.
&lt;/h3&gt;

&lt;p&gt;🛑 And If you need more content like this follow &lt;strong&gt;@codev_land&lt;/strong&gt; on instagram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>JavaScript Hacker</author>
      <pubDate>Wed, 15 Sep 2021 05:55:09 +0000</pubDate>
      <link>https://dev.to/codinghacker/7-best-tools-for-developers-they-can-t-live-without-it-k8k</link>
      <guid>https://dev.to/codinghacker/7-best-tools-for-developers-they-can-t-live-without-it-k8k</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/&amp;amp;ved=2ahUKEwjQg9arpYDzAhVFgOYKHdJuB5YQFnoECAUQAQ&amp;amp;usg=AOvVaw1L8LdsK7AZhqLDllCtK7lz"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>How To Install TinyMCE Editor In Laravel</title>
      <author>Techsolutionstuff</author>
      <pubDate>Wed, 15 Sep 2021 03:26:28 +0000</pubDate>
      <link>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</link>
      <guid>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</guid>
      <description>&lt;p&gt;In this artical we will give you example how to Install tinymce editor in laravel, Tinymce editor is rich-text opensource editor, It has the ability to convert HTML textarea fields or other HTML elements to editor instances, here we will see how to use tinymce editor in laravel.&lt;/p&gt;

&lt;p&gt;Tinymce provides many features like PowerPaste, Spell Checker Pro, Image Upload, Accessibility Checker, Link Checker, Format Painter, Premium Skins &amp;amp; Icons and many more.&lt;/p&gt;

&lt;p&gt;So, let's see how to implement tinymce editor in laravel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;title&amp;gt;How To Install TinyMCE Editor In Laravel - techsolutionstuff.com&amp;lt;/title&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1 style="text-align: center;"&amp;gt;How To Install TinyMCE Editor in Laravel - techsolutionstuff.com&amp;lt;/h1&amp;gt;
  &amp;lt;textarea id="texteditor"&amp;gt; &amp;lt;/textarea&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script&amp;gt;
tinymce.init({
    selector: '#texteditor',
    height:350,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" alt="How To Install TinyMCE Editor In Laravel&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You might also like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-generate-qrcode-in-laravel"&gt;Read More : How To Generate QRcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://techsolutionstuff.com/post/how-to-generate-barcode-in-laravel"&gt;Read More : How To Generate Barcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-delete-multiple-records-using-checkbox-in-laravel"&gt;Read More : How To Delete Multiple Records Using Checkbox In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>tinymce</category>
      <category>texteditor</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS - Video Inside A Computer</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 15 Sep 2021 03:14:57 +0000</pubDate>
      <link>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</link>
      <guid>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#create-a-pure-css-video-inside-a-computer"&gt;
  &lt;/a&gt;
  Create a pure css video inside a computer 🔥
&lt;/h1&gt;



&lt;p&gt;Guys Before we begin i want to tell you guys that 😊 Please subscribe to my channel - &lt;a href="https://youtube.com/codingfire?sub_confrimation=1"&gt;https://youtube.com/codingfire?sub_confrimation=1&lt;/a&gt; please.. But More than that hope you are safe and happy 💖🔥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One
&lt;/h2&gt;

&lt;p&gt;So the first step is to download the necessary image and video, in this project we will need 1 image and 1 video. image is for the frame of the computer and video which will be inside the computer. Guys the tutorial video is also there so if you want to check feel free to do it 😊🙏&lt;/p&gt;

&lt;p&gt;See this image -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" alt="One image used is the frame and the video inside the computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-links-to-download-the-image-and-the-video"&gt;
  &lt;/a&gt;
  Here are the links to download the image and the video 😊
&lt;/h3&gt;

&lt;p&gt;Image Link - &lt;a href="https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png"&gt;https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-02"&gt;
  &lt;/a&gt;
  Step 02
&lt;/h3&gt;

&lt;p&gt;So in this step we will start from html and the step 03 will be the css, the html is very small and basic&lt;/p&gt;

&lt;p&gt;Here we are creating a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of computer and then we are inserting our image and then our video&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Coding by CodingFire - youtube.com/CodingFire --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS - Video Inside a Computer | CodingFire&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- Computer Image --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computerBorder"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./computer.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- video --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"video.mp4"&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-03"&gt;
  &lt;/a&gt;
  Step 03
&lt;/h1&gt;

&lt;p&gt;So the last step is css&lt;/p&gt;

&lt;p&gt;here the main part is we are fitting the video and computer frame image in such a way that it look like the video is inside the computer. We are using position absolute and relative to do it. check the css code below btw source code is also providing and video also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computerBorder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Put this value too  */&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like the blog and it helped you 💖😊&lt;br&gt;
as i said the source code and the video is also available so here it is &lt;/p&gt;

&lt;p&gt;Source Code Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - this video is made by me and please subscribe to my channel it really motivates me to do more &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IWiYWezOqm8"&gt;https://www.youtube.com/watch?v=IWiYWezOqm8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 💖&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Octo: The Open Source Static Site Generator</title>
      <author>Luigi Zaccagnini</author>
      <pubDate>Wed, 15 Sep 2021 02:56:52 +0000</pubDate>
      <link>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</link>
      <guid>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</guid>
      <description>&lt;p&gt;After my &lt;a href="https://dev.to/luigizaccagnini/starting-my-journey-in-opensource-1m4n"&gt;first blog post&lt;/a&gt; I decided what was a better way to start into open source then building my own open source project! I then built a static site generator in Javascript called &lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;Octo&lt;/a&gt;. The project was created with the idea of shipping a finished product is better than shipping when the product is perfect. This is important because if I shipped a perfect product, I would not be writing this post and most likely would still be writing code for an infinite amount of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-static-site-generator"&gt;
  &lt;/a&gt;
  What is a Static Site Generator?
&lt;/h2&gt;

&lt;p&gt;A SSG(static site generator) is a tool that creates static HTML pages based off of a template or some raw data provided. Octo is designed to only accept .txt files and create static html documents based off of the content within the text files. Octo will read the text data and make paragraph elements every time there is a space between content. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-setup"&gt;
  &lt;/a&gt;
  Tool Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;This builds Octo so you can access it anywhere on your computer using the &lt;code&gt;octo&lt;/code&gt; command. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository &lt;/li&gt;
&lt;li&gt;cd into the folder &lt;/li&gt;
&lt;li&gt;run npm i to install all dependencies &lt;/li&gt;
&lt;li&gt;run npm install -g .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-i or --input&lt;/code&gt; flag means the input path. This will look for all texts files with the given path. You can give a .txt file as input or a directory. This is a required field for the program to work. Any files/directories with spaces should be entered with quotes: &lt;/p&gt;

&lt;pre&gt;octo -i "Sherlock Holmes Selected Stories/test.txt"&lt;/pre&gt;


&lt;center&gt;&lt;strong&gt;Only text files work with this program.&lt;/strong&gt;&lt;/center&gt;
&lt;br&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#file-input"&gt;
  &lt;/a&gt;
  File Input
&lt;/h5&gt;

&lt;p&gt;This will take the content from the text file and output a HTML file.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt
&lt;/pre&gt;

&lt;h5&gt;
  &lt;a href="#directory-input"&gt;
  &lt;/a&gt;
  Directory Input
&lt;/h5&gt;

&lt;p&gt;This will go though a directory named test and look for all nested .txt files.&lt;/p&gt;

&lt;pre&gt;
    octo -i test
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;The output allows the user to specify the path where the files/directories can be exported. &lt;br&gt;
This is not a required field and will default to './dist' if no option is given.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;-o or --output&lt;/code&gt; flag means the output path. This will create a folder called htmlFiles outside of the current directory.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt -o ../hmtlFiles
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#recursive-file-searching"&gt;
  &lt;/a&gt;
  Recursive File Searching
&lt;/h3&gt;

&lt;p&gt;If a input is a directory, Octo will recursively go through all the child directories and convert all the text files into HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After creating my own open source project, I was able to grow as a software developer! Although it may seem to be not as difficult of a task, the few things that were difficult for me were: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publishing my code online for everyone to see&lt;/li&gt;
&lt;li&gt;Submitting code that could possibly be buggy&lt;/li&gt;
&lt;li&gt;Not having a 100% completed software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those thoughts might have made it difficult at first but, I was able to move past this and understand that &lt;strong&gt;these things are okay!&lt;/strong&gt; Comment some features that you would like to see with this project, I would love to add them to the Github repository. I am also excited to get pull requests from people in the community to help make this tool better! If you want to contribute to the project or check out the link to the sample site, the links will be under here!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Github Repository&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;https://github.com/LuigiZaccagnini/octo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sample Site&lt;/td&gt;
&lt;td&gt;&lt;a href="https://luigizaccagnini.github.io/octo/"&gt;https://luigizaccagnini.github.io/octo/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Go/Golang Basics</title>
      <author>Tarun Kumar J</author>
      <pubDate>Wed, 15 Sep 2021 02:51:01 +0000</pubDate>
      <link>https://dev.to/tarunj096/go-golang-basics-246c</link>
      <guid>https://dev.to/tarunj096/go-golang-basics-246c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt; is Open Source Programming language that is  &lt;code&gt;statically typed&lt;/code&gt; . Although it is statically typed, It's so fast that it feels like it's an Interpreted language. &lt;/p&gt;

&lt;p&gt;So let's start with the basics. As Go is a Compiled language, Its Code has to be converted to an executable/binary file. Go has a compiler that translates the code into a binary file.&lt;/p&gt;

&lt;p&gt;If your file's name was helloworld.go then to compile it on the terminal, The command would look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go build helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command would create a "helloworld" file. To execute that, call &lt;code&gt;./helloworld&lt;/code&gt;  in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./helloworld

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a run command that both compiles and executes the code. Although the run command will not create a binary file.&lt;/p&gt;

&lt;p&gt;For example to run the command on helloworld.go file, It would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Go program should have a package declaration. After the package declaration, We have import statement right below it. It looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the package name has to be enclosed in &lt;code&gt;double quotes&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;The functions in Go are declared with &lt;code&gt;func&lt;/code&gt; keyword and that is followed by name of the function.&lt;br&gt;
Let's see a basic program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

func main() {

        fmt.Println(" Hello World! ")

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above program in function main we have used the &lt;code&gt;fmt&lt;/code&gt; package which helps us call Println to print.&lt;/p&gt;

&lt;p&gt;To run the command we use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would print the message "Hello World!".&lt;/p&gt;

&lt;p&gt;In Go language, the main package is a special package which is used with the programs that are executable and this package contains main() function. Go automatically calls the main function and there is no need to explicitly call it.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;go doc&lt;/strong&gt; on the command line for more information about the packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command gives us information about fmt package. &lt;br&gt;
For more specific information you could use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt.Println
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Lastly, For more information about Go lang ,You can always check the documentation.   &lt;a href="https://golang.org"&gt;&lt;strong&gt;&lt;em&gt;This&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is the official site 💯.&lt;/p&gt;

&lt;p&gt;If you are learning Go language and would want to know more, Below are some resources 🔥.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Watch a video course on &lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt; &lt;strong&gt;freecodecamp&lt;/strong&gt;&lt;/a&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a free course on Codecademy too. You can check it out  &lt;a href="https://www.codecademy.com/learn/learn-go"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1.3 - AWS Amplify Admin UI</title>
      <author>Alex Patterson</author>
      <pubDate>Wed, 15 Sep 2021 02:32:12 +0000</pubDate>
      <link>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</link>
      <guid>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</guid>
      <description>&lt;p&gt;Original: &lt;a href="https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel"&gt;https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/p33Q9cT_dNQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1VaD0we7TmA8t6YCEaL4sw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
      <category>devops</category>
      <category>aws</category>
    </item>
    <item>
      <title>How I started Technical Writing</title>
      <author>Estee Tey</author>
      <pubDate>Wed, 15 Sep 2021 02:29:24 +0000</pubDate>
      <link>https://dev.to/lyqht/how-i-started-technical-writing-1k8n</link>
      <guid>https://dev.to/lyqht/how-i-started-technical-writing-1k8n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#where-it-began"&gt;
  &lt;/a&gt;
  Where it began
&lt;/h2&gt;

&lt;p&gt;5 years ago, being a typical  &lt;a href="https://www.urbandictionary.com/define.php?term=Mugger"&gt;mugger&lt;/a&gt;  (Singlish term for a studious person 🍺) in my school days, writing notes for myself and sharing it with my friends was a norm for me. There used to be a local popular &lt;a href="https://www.seab.gov.sg/home/examinations/gce-a-level"&gt;A-Level&lt;/a&gt; notes platform called &lt;a href="http://owlcove.sg"&gt;owlcove.sg&lt;/a&gt;, where I uploaded such notes.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPorXKGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624505510/l6_Xm-J2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPorXKGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624505510/l6_Xm-J2d.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just wanted to find a screenshot of the platform, and I was surprised that after so long, my notes were still there 😆&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#improving-my-writing-with-github"&gt;
  &lt;/a&gt;
  Improving my writing with GitHub
&lt;/h2&gt;

&lt;p&gt;However, it was only until the second year of my university where I started writing notes for more technical courses, which included mathematics and of course - computer engineering/programming related stuff. It was also then that I got to know of some cool folks that started an &lt;strong&gt;open source community&lt;/strong&gt; within the university called &lt;a href="https://github.com/OpenSUTD"&gt;OpenSUTD&lt;/a&gt;. They organize a lot of events and initiatives in school, and one of them included a &lt;a href="https://opensutd.org/course-notes/"&gt;course notes platform&lt;/a&gt; for people to contribute to. However, the course platform didn't have a UI for people to contribute their notes easily like &lt;a href="http://owlcove.sg"&gt;owlcove.sg&lt;/a&gt;, as the people behind OpenSUTD were staunch advocates of using GitHub and insisted on using it for communication as well. So I learnt how to create a pull request (I was still new to programming and never used GitHub beyond just uploading &lt;em&gt;single-commit&lt;/em&gt; repositories) and made &lt;a href="https://github.com/OpenSUTD/course-notes/pull/3"&gt;my first pull request&lt;/a&gt;. I was lucky enough to get a reviewer who gave me a lot of tips on improving my writing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8haRFX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624527858/A8sSUs5_Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8haRFX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624527858/A8sSUs5_Y.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tips included &lt;strong&gt;how to improve markdown formatting&lt;/strong&gt; of my notes, since I didn't know there were specific markdown elements such as code blocks for showing code (yes I was once one of the people who  copy-pasted code in plain text) and the importance of heading levels. He also gave me tips on &lt;strong&gt;how to phrase my explanations better&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;From then on, I became a lot more conscious about how I explain stuff to people over text and digital notes. And in every new repository that I make for my school and side projects, I always made sure to include a descriptive &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-practice"&gt;
  &lt;/a&gt;
  Writing Practice
&lt;/h2&gt;

&lt;p&gt;This habit carried on even as I attend community events and workshops outside of my school, where I helped to contribute documentation in the form of GitHub gist or an extensive README.md to the accompanying repository for participants to follow along the repository even after the physical workshop is over.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nf_UCFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624550093/748gtVCCfN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nf_UCFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631624550093/748gtVCCfN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An &lt;a href="https://github.com/chukmunnlee/insidethebox"&gt;example of a community workshop&lt;/a&gt; that I attended and contributed notes for&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eventually, school got a lot busier. I stopped attending external events and working on side commitments. By the time I graduated and transitioned to work during the COVID19 period a year ago, there weren't any more physical events. I also lost motivation to work on side projects 😢. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-first-article-idea"&gt;
  &lt;/a&gt;
  The first article idea
&lt;/h2&gt;

&lt;p&gt;That is until I was placed in a grad training programme in my company where I often taught my peers about React fundamentals and I had a lot of spare time after work. At the same time, I also picked up a game called Genshin Impact - &lt;em&gt;which I still play on a daily basis now&lt;/em&gt; 🤪. The combination of both factors then gave me the idea that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It will be cool if there are tutorials out there that use content from games or anime to make websites, rather than the plain old Star Wars/Marvel/whatever. Maybe I can try write such a tutorial series for people new to web development like my fellow grad co-workers, using an API that fetches graphics from the game that I like. Maybe it will attract fellow gamers or anime fans to pick up web development if they were ever keen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So then I had the following preparation process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I will only use very basic HTML, CSS and JS to create a simple website that shows a character profile card rendered using data from an open source game details API. &lt;strong&gt;This took 2 hours.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Then I relooked at my own code to see how I can split it up into smaller portions that cover different fundamentals and tools for web development that a newbie can learn. Based on the split, I figured I could write a total of &lt;strong&gt;3 articles&lt;/strong&gt; for each portion respectively and &lt;strong&gt;make a series&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;However, &lt;strong&gt;writing the first article alone took around 7-8 hours&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Because I was uncertain if the article was too long, I tried to &lt;strong&gt;get feedback&lt;/strong&gt; from one of my friends based on the draft. Luckily, he does &lt;strong&gt;match my target audience&lt;/strong&gt; of people who have not done web development before. &lt;/li&gt;
&lt;li&gt;Based on his rough estimate, it takes around 20 minutes to go through the article entirely in one sit - where he did not skip any practical. He thought that the time was just right for a tutorial article, even though he has never read any other tutorial article before. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The preparation process above gave me confidence to publish the article the world. But the next hurdle will be to decide where to post the article itself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#publishing-the-article-to-the-world"&gt;
  &lt;/a&gt;
  Publishing the article to the world
&lt;/h2&gt;

&lt;p&gt;The only blog platforms I've heard of was Dev.to because of my previous participation in Hacktoberfest. Coincidentally at that time, they were advertising the CodeNewbie Community on their website. So I decided to take the plunge and post my first official tutorial article to the world on CodeNewbie Community, since the users seem to match my target audience more.&lt;/p&gt;

&lt;p&gt;After a day of posting, I was elated to see the following tweet.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-3mTrLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/944462588640923648/S5BZ6NrW_normal.jpg" alt="CodeNewbie profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CodeNewbie
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @codenewbies
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "APIs are intended to be abstracted so that they can be used easily without going into depth on what they are or how they work."&lt;br&gt;&lt;br&gt;👏🏿  &lt;a href="https://twitter.com/estee_tey"&gt;@estee_tey&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CodeNewbie"&gt;#CodeNewbie&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JwLI5fedOV"&gt;community.codenewbie.org/lyqht/how-to-n…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:42 PM - 04 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1367560983095443458" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1367560983095443458" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1367560983095443458" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Later on, they also featured that article on CodeNewbie's weekly newsletter 💕 It made me really pumped to continue writing. I proceeded to write and publish the second article to the tutorial series after a few days. &lt;/p&gt;

&lt;p&gt;However, as days pass, I noticed that &lt;strong&gt;the second article that I wrote wasn't getting as much traction&lt;/strong&gt;. I wondered if I did something wrong. I asked the same reader to review my article and he enjoyed reading it as a sequel, so I was pretty confused. &lt;/p&gt;

&lt;p&gt;Not soon after, there was an internal blogging contest in my company, so I tried my luck and wrote a new article that was based on the lunch &amp;amp; learn session that I was  &lt;a href="https://www.dictionary.com/e/slang/voluntold/"&gt;voluntold&lt;/a&gt; to do at work. Since this topic this round targets the general developer rather than just newbies, I posted it on Dev.to instead. Somehow &lt;a href="https://dev.to/lyqht/3-reasons-why-you-should-know-about-atomic-design-as-a-developer-5aea"&gt;this article&lt;/a&gt; got &lt;strong&gt;way better reception&lt;/strong&gt; than my first and second article &lt;em&gt;combined&lt;/em&gt;, &lt;strong&gt;even though it took a lot less effort to write&lt;/strong&gt;. But that might be due to the previous hours that I have already spent to prepare the lunch &amp;amp; learn session previously, and also artificial inflation of views due to my co-workers checking out the blog contest entries.&lt;/p&gt;

&lt;p&gt;Although I got the 2nd prize for that blogging contest, I started having seeds of doubt planted in my mind. I wondered if the articles that I have written so far were actually useful to anybody. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#burnout"&gt;
  &lt;/a&gt;
  Burnout
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I apologize in advance that I cannot disclose too much about my work projects due to the nature of my job. You will understand why if you do choose to look up my company. This burnout section might be a bit distressing, but I hope that you don't skip it to paint a more complete portrait of what I've been through (and many other writers) rather than just the good parts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was later assigned to work on a project that was &lt;strong&gt;emotionally and mentally draining&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Still, I tried to push on with writing. The lack of reception on my second article of that tutorial series often came back to haunt me and cast doubt on whether anyone would even read the final article of the series. Even though I had a proper plan before to conclude the series (as you saw above), I could no longer make myself write it and publish it. Then, in an attempt to get out of that &lt;em&gt;writer's block&lt;/em&gt;, I tried to publish 2 generic articles to expand my boundaries of writing but they too received dismal traction. Because of the lack of written feedback from online readers, I really couldn't tell what I was doing wrong. At that point of time, I came to a depressed conclusion. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If what I'm writing isn't benefitting anyone, then maybe I should just learn stuff by myself without spending extra time to bother putting it all into words. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, the confusion and disappointment coupled with the stress from my work made me lose my drive to write once again. For the time period that I was in the project, I feel like the cat below every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DT4C6ONQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZMhO9ZgeOdMAAAAM/cat.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DT4C6ONQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZMhO9ZgeOdMAAAAM/cat.gif" alt="https://c.tenor.com/ZMhO9ZgeOdMAAAAM/cat.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that project, I was assigned to yet another project - but this one was even worse because of the nature of the project and because I was the only grad in an already closely knitted team of seniors. I try my best everyday to keep up but I still feel like I'm tumbling down. I even had emotional breakdowns outside of working hours because of the cumulative stress from my project and also because I failed to live up to my own expectations of myself. I also started binging DOTA out of despair, and while it is fun, it didn't help a lot in helping me find a &lt;strong&gt;sense of purpose&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This is when I know I have to change my lifestyle - some way somehow - beyond my work. I had to find something that I enjoy doing and enriches my soul. I reflected upon my life and I realized that I didn't really want to stop writing. When I created notes when I was younger, it was never about the reactions after all. I just wanted to share my knowledge and hopefully leave remnants of my knowledge and existence around that make people feel proud of themselves, happier and richer in life. &lt;/p&gt;

&lt;p&gt;This month, I gathered my courage to try writing articles again, despite the doubts I still have about my writing ability and amateur developer experience. So here I am, once again writing about stuff that I've learnt along the way in becoming a better developer, joining  &lt;a href="https://hashnode.com/challenge/2articles1week"&gt;#2Articles1Week challenge&lt;/a&gt;  and &lt;a href="https://hashnode.com/bootcamp/lyqht"&gt;Hashnode Bootcamp&lt;/a&gt; for improving my Technical Writing. &lt;/p&gt;




&lt;p&gt;To end off this article on a positive note, I would like to share this cool illustration that my co-worker shared with you who may also be struggling with something and feel stuck on something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZzPvtZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631628955532/lPW2Kj8tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZzPvtZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631628955532/lPW2Kj8tj.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You too can change from 1 to 1.01, starting today. 🧡&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;Shoutout to the smol blue birb fans that I have on &lt;a href="https://twitter.com/estee-tey"&gt;Twitter&lt;/a&gt;, the followers I have on  &lt;a href="https://community.codenewbie.org/lyqht"&gt;CodeNewbie&lt;/a&gt; ,  &lt;a href="https://dev.to/lyqht"&gt;Dev.to&lt;/a&gt;  and  &lt;a href="https://hashnode.com/@lyqht"&gt;Hashnode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Big kudos to my wholesome life companion Teck who has always been supporting me throughout my life.&lt;/p&gt;

&lt;p&gt;And of course - &lt;strong&gt;you&lt;/strong&gt;, who has read the article all the way till here 😄&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading the article! &lt;/p&gt;

&lt;p&gt;If you enjoyed reading it, &lt;em&gt;react&lt;/em&gt;, &lt;em&gt;feedback&lt;/em&gt; and &lt;em&gt;follow&lt;/em&gt; me  &lt;strong&gt;&lt;a href="https://community.codenewbie.org/lyqht"&gt;here&lt;/a&gt;&lt;/strong&gt;  and  &lt;a href="https://twitter.com/estee-tey"&gt;Twitter&lt;/a&gt; ! 🌻🐦&lt;/p&gt;

&lt;p&gt;And if you have any questions or stories to share, please leave them below the article.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>watercooler</category>
      <category>devjournal</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Infrastructure as SQL</title>
      <author>depombo</author>
      <pubDate>Wed, 15 Sep 2021 01:39:45 +0000</pubDate>
      <link>https://dev.to/depombo/infrastructure-as-sql-81i</link>
      <guid>https://dev.to/depombo/infrastructure-as-sql-81i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Infrastructure State is Data, Infrastructure Change is Code. It's as simple as that.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What software you have deployed on what machines and how they can communicate with each other and the outside world is not a program, not a set of steps to run, it is information about your infrastructure. Changing your infrastructure &lt;em&gt;is&lt;/em&gt; a set of operations to perform, a program. A SQL database is a set of information and SQL queries read or change that data.&lt;/p&gt;

&lt;p&gt;And manipulating your infrastructure in this way is natural.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ami_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ec2_instance_type_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ami&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ec2_instance_type&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt;   &lt;span class="n"&gt;amis&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt;  &lt;span class="n"&gt;image_name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'amzn-ami-hvm-%'&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
    &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ami&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;  &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'t2.micro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#relations-and-types-matter-for-infrastructure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Relations and Types Matter for Infrastructure&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Representing your infrastructure as SQL resolves the primary issue of YAML-based infrastructure tools by making the relations between pieces of your infrastructure first-class citizens, and enforcing type safety on the data and changes to it.&lt;/p&gt;

&lt;p&gt;You can't set the EC2 instance type as &lt;code&gt;t2.mucro&lt;/code&gt; and have your deploy system try and fail to create such an instance. The &lt;code&gt;insert&lt;/code&gt; statement will fail and tell you zero rows were inserted and you can quickly see why.&lt;/p&gt;

&lt;p&gt;Similarly, if you have a record in the &lt;code&gt;security_group&lt;/code&gt; table, you can't delete it if there are any references to it in the &lt;code&gt;ec2_security_groups&lt;/code&gt; join table. The relational structure of IaSQL prevents you from putting your infrastructure into an invalid state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-powers-explore-query-and-automate-your-infrastructure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;New Powers: Explore, Query, and Automate Your Infrastructure&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Because your infrastructure is presented as a SQL database, you can connect to it with a SQL client of your choice and explore what you have and what the possibilities are.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can query for unusual usage patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;ec2_instance_type&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ec2_instance_type_id&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vcpus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;ait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vcpus&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since it is a database, you can create your own tables with their own meaning and associate them with your infrastructure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;company_team_ec2s&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;cte&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;cte&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aws_ec2_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws_ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;company_teams&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cte&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;company_team_id&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Data Engineering'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, your applications can know much more about what infrastructure they need than any auto-scaler solution out there. If you had a very infrequent but CPU/GPU-intensive job you need to handle at an unknown interval, you could give your application access to your IaSQL database and let it temporarily create and then destroy those resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ec2_instance_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;iasql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  INSERT INTO aws_ec2 (ami_id, ec2_instance_type_id)
  SELECT ami.id, ait.id
  FROM ec2_instance_type as ait, (
      SELECT id
      FROM amis
      WHERE image_name = 'application-job-runner'
  ) as ami
  WHERE ait.instance_name = 'g3.4xlarge'
  RETURNING id;
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;iasql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  INSERT INTO ec2_security_groups (ec2_id, security_group_id)
  SELECT &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ec2_instance_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, sg.id
  FROM security_groups AS sg
  WHERE sg.name = 'application-job-group';
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Only large-enough job runners will take it based on job metadata&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myMassiveJob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;iasql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  DELETE FROM aws_ec2
  WHERE id = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ec2_instance_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#you-dont-need-to-learn-a-new-api-probably"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You Don't Need to Learn a New API (Probably)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Nearly all cloud backend systems depend on a database, and most likely a SQL database, so you do not need to learn a new language to manipulate the infrastructure in this way.&lt;/p&gt;

&lt;p&gt;And likely you're using a &lt;a href="https://en.wikipedia.org/wiki/Schema_migration"&gt;migration system&lt;/a&gt; in your backend to review changes to your database, which you can continue to use here, making it code to be reviewed, just like Infrastructure-as-Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-test-too"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You Can Test, Too&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since the safety guarantees are provided by the types and relations between tables, you can simply copy your production infrastructure database into a local database and run your changes/migration against that and verify it works before you run it on your actual Infrastructure-as-SQL database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recover-with-ease"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Recover With Ease&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It's 3AM and your service has gone down. You reverted the most recent IaSQL migration, but that didn't resolve the issue, and you aren't sure which change across which service today caused the outage. So, you simply replace the state of the IaSQL database with a snapshot from yesterday to bring everything back online to a known-good-state, and then take your time after you're well-rested to figure out what actually went wrong.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sign up for our waitlist &lt;a href="https://iasql.com"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>terraform</category>
      <category>sql</category>
    </item>
    <item>
      <title>Conversational AI should be in every developer toolbox. Here's why.</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Wed, 15 Sep 2021 01:35:49 +0000</pubDate>
      <link>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</link>
      <guid>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</guid>
      <description>&lt;p&gt;Hi folks. I’ve posted a few conversational AI tutorial articles here. I realize that I failed to talk about one important thing - why you, as a developer, should even think about adding conversational technologies to your stack of tools. &lt;/p&gt;

&lt;p&gt;Fair warning: I work for a startup with the world’s most advanced conversational AI APIs and a studio built specifically for developers. Because of this, the examples of use cases and approaches below will be based on the art of the possible with Dasha. I will also talk to you about Google Dialogflow and Rasa AI which offer great sets of tools for some use cases. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-think-about-conversational-voice-technologies-in-the-first-place%C2%A0%C2%A0"&gt;
  &lt;/a&gt;
  Why think about conversational voice technologies in the first place  
&lt;/h2&gt;

&lt;p&gt;Voice is the native interface for human-human communication. And that’s it. That’s your reason for why you should think about conversational AI technologies. The tactile way in which we communicate with machines today is a stepping stone. &lt;/p&gt;

&lt;p&gt;Look at science fiction to show you the way (I have been doing this since I learned to read and it hasn’t steered me wrong). HAL 5000 in 2001: A Space Odyssey, Eddie the ship's computer in HHGTTG, Jarvis in Iron Man. These are all machines that communicate with humans at a level indistinguishable from a human being. In this communication commands are born not in the simple command-response ways of today’s Alexa. &lt;/p&gt;

&lt;p&gt;These machines parse deep intent from the words of the human that is conversing with them, from their intonations, emotional tone and from the wider context of the conversation. Which is the same thing that humans do. Which makes the human feel comfortable in conversing with the machines. Which, in other words, passes the Turing test. &lt;/p&gt;

&lt;p&gt;In order for voice user interfaces to become ubiquitous, we need conversational AI that communicates at a level indistinguishable from a human, without falling into an uncanny valley trap. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-conversational-voice-ai-today%C2%A0"&gt;
  &lt;/a&gt;
  Where is conversational voice AI today 
&lt;/h2&gt;

&lt;p&gt;What is done with conversational AI today: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chatbots. Mainly simple, often multiple-choice apps. Great for taking an order or routing a customer to the right support agent. I felt I had to mention, though the focus of this article is on voice. &lt;/li&gt;
&lt;li&gt;Basic voice user interfaces - Alexa Skills, Siri assistant and such. They are great for fulfilling a single function, for example, tell you the weather or play a song. As these are command-response interactions, they do not aim to pass the Turing test and they are limited in scope of application. &lt;/li&gt;
&lt;li&gt;Voice AI business automation. Call center automation from simple voice (not touch tone) menus to more complex outbound applications. Some of these applications (mainly outbound today) do aim to pass the Turing test and oftentimes do pass it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re not yet at the point where conversational AI can fully replace tactile interfaces. Yet we are getting there. Here is me giving a demo of a conversational app which I recently built: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/46nyWBTSHgs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fairly simple demo. It only took me a few of hours to build from scratch. Using the same technology already today some Dasha users are building conversations with hundreds of logical nodes. In live call center environments, some apps are performing better than their human agent counterparts were before them. &lt;/p&gt;

&lt;p&gt;If you want to try building an app like the one in point 3, just look at my post history for some tutorials or pop in to our conversational AI dev &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt;. You'll get an API key and instructions automatically upon joining. @ me in the intro channel, I’ll help where I can. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-adding-conversational-ai-to-your-toolbox-give-you-as-a-developer"&gt;
  &lt;/a&gt;
  What will adding conversational AI to your toolbox give you, as a developer?
&lt;/h2&gt;

&lt;p&gt;It will give you two things. The ability to build voice interfaces for your apps and the ability to run automated telephone conversations with an API call. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voice-user-interfaces"&gt;
  &lt;/a&gt;
  Voice user interfaces
&lt;/h3&gt;

&lt;p&gt;With a deep voice interface you can let your users engage every interaction in your app with their voice. &lt;/p&gt;

&lt;p&gt;A few use cases for this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your app is designed to be used on the go (walking, running, driving), for example, it’s a navigation app, a music app, etc.&lt;/li&gt;
&lt;li&gt;If there is a use case in which your app runs in the background, while the user switches to another app. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think in the future, VUIs will be standard fare in most new software products. &lt;/p&gt;

&lt;p&gt;In the meantime, you can implement a voice user interface with Dasha using a connector to our Node.js SDK. Next year, we will roll out Swift and Kotlin SDKs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-telephone-conversations"&gt;
  &lt;/a&gt;
  Automated telephone conversations
&lt;/h3&gt;

&lt;p&gt;Kind of like Twilio giving developers the ability to use SMS text messages with the call of an API, a proper conversational AI API gives you the ability to conduct automated calls with the call of an API. &lt;/p&gt;

&lt;p&gt;Here are just a few use cases you might want to use this for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call a user who abandoned their shopping cart and ask if they need any help completing the purchase or have some questions they need answered.&lt;/li&gt;
&lt;li&gt;Call a user to verify some details or call them up as a part of an onboarding process. &lt;/li&gt;
&lt;li&gt;Set up a fully automated customer service line for your product. You can take calls through telephony or in-app using voice over GRPC.
&lt;/li&gt;
&lt;li&gt;Call back a newly generated lead in less than a minute to convert them into a user. &lt;/li&gt;
&lt;li&gt;Build a voice Discord bot that can do pretty much anything you can think of. &lt;/li&gt;
&lt;li&gt;Literally build a replacement for a call center agent and impress your boss at the big bank. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-you-need-to-build-with-conversational-ai"&gt;
  &lt;/a&gt;
  What skills do you need to build with conversational AI?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analytical"&gt;
  &lt;/a&gt;
  Analytical
&lt;/h3&gt;

&lt;p&gt;Analytical skills are important for two reasons. One - you need to logically structure your conversation before you begin developing it. Two - you will need to analyze live conversations that your AI app has with real human users and implement changes to improve the app. Rasa AI calls this second part Conversation Driven Development. I love this term. We at Dasha call it training the application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#google-dialogflow"&gt;
  &lt;/a&gt;
  Google Dialogflow
&lt;/h4&gt;

&lt;p&gt;Interestingly enough, with Google Dialogflow, the analytical skill is the only one you will need to create conversations - it is an in-browser GUI for creating automated dialogues.  You can provide intents training data, create scripts,  STT and TTS comes out of the box. Two software engineers who tested all three platforms felt that their learning curve was higher with Dialogflow even though it was a no-code environment, than with Rasa or Dasha. Pros: no-code platform. Biggest cons: speech synthesis sounds very robotic, hard to make dialogue paths handle digressions. You may need a bit of technical knowledge to set up integrations through web hooks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rasa-ai"&gt;
  &lt;/a&gt;
  Rasa AI
&lt;/h4&gt;

&lt;p&gt;To use Rasa, you will need to have Python installed to use Rasa Open Source. Knowledge of Python will be needed as you build. You can specify intents, as a part of training data. As mentioned earlier, Rasa is a technology for chatbots. If you want to use it with voice, you will need to connect external text to speech and speech to text. Connecting to external services obviously adds delays which detracts from the conversational user experience. &lt;/p&gt;

&lt;p&gt;There are multiple dialogue policies which can be used simultaneously and which dictate conversation flow (I found this a bit confusing). Rasa has a great low-code/no-code GUI for conversational design. You describe dialogue using stories and intents using NLU data. You can also specify bot responses, forms (collecting data) and rules. The open source Rasa server runs on your machine and connects to your app. &lt;/p&gt;

&lt;p&gt;Its main pro is that you can quickly build simple, straightforward text conversations. Its main drawback is that it is a bot builder. It does not aspire to let you create conversations which are human-like in form and content.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dasha-ai"&gt;
  &lt;/a&gt;
  Dasha AI
&lt;/h4&gt;

&lt;p&gt;To use Dasha, you will need to have Node.js installed. You will also want to know JavaScript. DashaScript is a domain-specific language which you use to script the dialogue between the machine and the user. &lt;/p&gt;

&lt;p&gt;You specify intents training data, much as you do with Rasa, but with Dasha you can also define named entities which can be used for slot filling. You define AI responses in the phrase map or right within the body of your dialogue script. You can define &lt;a href="https://dasha.ai/en-us/blog/using-digressions"&gt;digressions&lt;/a&gt; (send conversation to a specific node at any point based on what the user has said), to emulate how humans do dialogue. Human-like speech synthesis and text to speech come out of the box. Dasha SDK runs within your Node.js app, the conversation gets executed in the Dasha Cloud. &lt;/p&gt;

&lt;p&gt;Dasha’s main pro is that you can build simple human-like conversations quickly or take longer to build complex conversations of nearly unlimited depth. Its main drawback is that we are still in Beta and polishing up some details with user feedback. All the more reason to join our &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt; and be one of the folks giving their input to this AI as a service engine. Don’t get it twisted though, we have paying customers using the product even in its Beta. Dasha AI is processing close to 10 million conversations monthly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In closing
&lt;/h2&gt;

&lt;p&gt;To summarize, you’ll be able to add conversational AI to your stack of developer tools even if you have only a few months of programming experience. I’m a case in point - I started building with Dasha, then started teaching myself JavaScript with FreeCodeCamp. I have used Rasa Open Source and had no problem with it even though my Python skills are almost non-existent.&lt;/p&gt;

&lt;p&gt;You should hold some of these tools in your stack because they let you engage with users in ways that differentiate the user experience.  &lt;/p&gt;

&lt;p&gt;Have you used conversational AI dev tools before? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vercel's pkg - Package your Node.js app into a single executable</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Wed, 15 Sep 2021 01:28:51 +0000</pubDate>
      <link>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</link>
      <guid>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</guid>
      <description>&lt;p&gt;Hello all, In this short post, we will take a look at Vercel's pkg - how we can package the Node.js app into a single executable. &lt;/p&gt;

&lt;p&gt;When we are developing a Node.js application, it totally makes sense to install dev tools, dependencies to build and run an application. In the end, the user is interested in running the app and not the code and libraries the developer integrates. In the Node.js world, it's getting tougher that - when we release the packages, the sources are also released along with the 100s of dependency code as node_modules. It brings the necessity of the package mechanism to build and distribute the node library as a single executable - with the runtime or as a single file to run on already installed nodejs runtime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-the-nodejs-app-into-a-single-file-ncc"&gt;
  &lt;/a&gt;
  Build the Node.js app into a single file - ncc
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/ncc"&gt;
        ncc
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Compile a Node.js project into a single file. Supports TypeScript, binary addons, dynamic requires.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;ncc - Simple CLI for compiling a Node.js module into a single file, together with all its dependencies, gcc-style.&lt;/p&gt;

&lt;p&gt;Install the ncc using the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm i -g @vercel/ncc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Build the project using this simple command. It will output the Node.js compact build of app.js into dist/app.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;ncc build app.js -o dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#package-the-nodejs-app-into-a-single-executable-pkg"&gt;
  &lt;/a&gt;
  Package the Node.js app into a single executable - pkg
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/pkg"&gt;
        pkg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Package your Node.js project into an executable
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;pkg - This command-line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.&lt;/p&gt;

&lt;p&gt;Install the pkg using the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm install -g pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the pkg build targeting multiple platforms. It will create the executable in the dist directory&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;pkg -t node12-linux,node14-linux,node14-win index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Targets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pkg&lt;/code&gt; can generate executables for several target machines at a time. You can specify a comma-separated list of targets via &lt;code&gt;--targets&lt;/code&gt; option. A canonical target consists of 3 elements, separated by dashes, for example &lt;code&gt;node12-macos-x64&lt;/code&gt; or &lt;code&gt;node14-linux-arm64&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;nodeRange&lt;/strong&gt; (node8), node10, node12, node14, node16 or latest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform&lt;/strong&gt; alpine, linux, linuxstatic, win, macos, (freebsd)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;arch&lt;/strong&gt; x64, arm64, (armv6, armv7)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Check out this repo &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ksivamuthu"&gt;
        ksivamuthu
      &lt;/a&gt; / &lt;a href="https://github.com/ksivamuthu/vercel-pkg-demo"&gt;
        vercel-pkg-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vercel PKG Demo
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run locally and verify whether it's logging the telemetry in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;➜ vercel-pkg-demo git:(main) npm i
➜ vercel-pkg-demo git:(main) node index.js
IoT Device Initialized
Telemetry: {"temperature":"56.12","humidity":"52.11"}
Telemetry: {"temperature":"68.30","humidity":"51.90"}
Telemetry: {"temperature":"53.78","humidity":"53.72"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to build the package into executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;"scripts": {
    "build": "npx pkg -t linux,macos,win . --out-path dist"
 },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build steps are added in GitHub Actions and you can see the executable files are added as artifacts after build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's download the executable and run and see whether we are seeing the same output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;./hvac-demo-device-macos
➜  dist git:(main)  ./hvac-demo-device-macos
IoT Device Initialized
Telemetry: {"temperature":"70.59","humidity":"46.23"}
Telemetry: {"temperature":"69.76","humidity":"49.93"}
Telemetry: {"temperature":"62.15","humidity":"58.93"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make a commercial version of your application without sources&lt;/li&gt;
&lt;li&gt;Make a demo/evaluation/trial version of your app without sources&lt;/li&gt;
&lt;li&gt;Instantly make executables for other platforms (cross-compilation)&lt;/li&gt;
&lt;li&gt;No need to install Node.js and npm to run the packaged application&lt;/li&gt;
&lt;li&gt;Put your assets inside the executable to make it even more portable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I've found vercel's pkg very useful in order to achieve a similar target and package a whole application into standalone executables for multiplatform. It's nice to have a single file that can be started right away without any external dependency. And also, it prevents from having to distribute the full sources. You can extend it for including assets and other requirements.&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at Computer Enterprises Inc from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven’t already. Please follow me &lt;a class="mentioned-user" href="https://dev.to/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt;
 Twitter or check out my blogs at blog.sivamuthukumar.com&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>57 Essential HTML Tags To Know As A Beginner</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 14 Sep 2021 23:48:44 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f</link>
      <guid>https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f</guid>
      <description>&lt;p&gt;Hi everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, after creating two posts about 10 important HTML Tags, I decided to talk about 57 essential HTML tags to know as a beginner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but if you're not familiar with 'HTML tags', I highly recommend checking at least one of the given resources in this post. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/resources-to-learn-html-css-cko"&gt;Resources To Learn HTML &amp;amp; CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#57-essential-html-tag-that-is-good-to-know-as-beginner"&gt;
  &lt;/a&gt;
  57 Essential HTML Tag That Is Good To Know As Beginner.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;div&amp;gt;&lt;/strong&gt;: for defining a division.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;header&amp;gt;&lt;/strong&gt;: for creating a header.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;section&amp;gt;&lt;/strong&gt;: for defining a section.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;address&amp;gt;&lt;/strong&gt;: is a tag that displays the contact information like email and phone number of the author of a document or an article&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;nav&amp;gt;&lt;/strong&gt;: for creating navigation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;main&amp;gt;&lt;/strong&gt;: for assigning the main content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;footer&amp;gt;&lt;/strong&gt;: for creating a footer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;form&amp;gt;&lt;/strong&gt;: for defining a form which is a section that almost contains some input fields that the user should enter for sharing his information like login &amp;amp; sign up forms.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;time&amp;gt;&lt;/strong&gt;: for representing a specific period in time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;label&amp;gt;&lt;/strong&gt;: for specifying a label like name, email, password for an input field.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;input&amp;gt;&lt;/strong&gt;: for creating an input field.&lt;/li&gt;
&lt;li&gt;&amp;lt;textarea /&amp;gt;: for creating a multiline input so that the user could write a text such as description or bio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;select&amp;gt;&lt;/strong&gt;: for creating a drop-down menu. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;option&amp;gt;&lt;/strong&gt;: for creating an option of a drop-down menu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;datalist&amp;gt;&lt;/strong&gt;: for creating a list of options that are established in advance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;fieldset&amp;gt;&lt;/strong&gt;: for grouping a set of elements that discuss the same idea in a form element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;legend&amp;gt;&lt;/strong&gt;: for defining a title of the fieldset element&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;wbr&amp;gt;&lt;/strong&gt;: for defining a word break chance.&lt;/li&gt;
&lt;li&gt;&amp;lt;br/&amp;gt;: for breaking a line&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;button&amp;gt;&lt;/strong&gt;: for creating a clickable element like text, image, video&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;code&amp;gt;&lt;/strong&gt;: used for defining a text as a code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;kbd&amp;gt;&lt;/strong&gt;: used to define keyboard input, it is displayed with a monospace font&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;var&amp;gt;&lt;/strong&gt;: for indicating mathematical variables like x, y, and z.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;samp&amp;gt;&lt;/strong&gt;: is used to define sample output from a program.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;pre&amp;gt;&lt;/strong&gt;: for formatting a specific text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dl&amp;gt;&lt;/strong&gt;: is used with &lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt; and &lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt; to define a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt; defines a term in a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt; describes a term in a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;del&amp;gt;&lt;/strong&gt;: defining a deleted text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ins&amp;gt;&lt;/strong&gt;: for defining an inserted text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;em&amp;gt;&lt;/strong&gt;: create an emphasized (important) text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;i&amp;gt;&lt;/strong&gt;: create a text with italic styling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;u&amp;gt;&lt;/strong&gt;: defining an underlined text, (not recommended to use)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;b&amp;gt;&lt;/strong&gt;: for creating a bold text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;strong&amp;gt;&lt;/strong&gt;: for specifying an important text with bold styling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;small&amp;gt;&lt;/strong&gt;: for creating a text with a small size&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dfn&amp;gt;&lt;/strong&gt;: used to specify a term that is going to be defined, most browsers display this element with an italic font style.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;abbr&amp;gt;&lt;/strong&gt;: defining an abbreviation, like HTML.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;h1&amp;gt;&lt;/strong&gt;: (h1, h2, h3,..., h6) for specifying a header of specific content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;a&amp;gt;&lt;/strong&gt;: (anchor tag)for creating a link (hyperlink).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;mark&amp;gt;&lt;/strong&gt;: for highlighting a text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;progress&amp;gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;meter&amp;gt;&lt;/strong&gt;: for representing either a scalar value within a known range or a fractional value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;noscript&amp;gt;&lt;/strong&gt;: for displaying alternate HTML content if the browser does not support scripting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;q&amp;gt;&lt;/strong&gt;: for defining a "quote".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;bloquote&amp;gt;&lt;/strong&gt;: for specifying that a text is taken from another place.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;table&amp;gt;&lt;/strong&gt;: for defining a table in your document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;thead&amp;gt;&lt;/strong&gt;: (table head)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;tbody&amp;gt;&lt;/strong&gt;: (table body)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;th&amp;gt;&lt;/strong&gt;: for creating a title of a specific cell in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;td&amp;gt;&lt;/strong&gt;: for creating a cell in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;tr&amp;gt;&lt;/strong&gt;: (table row) for creating a row in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;video&amp;gt;&lt;/strong&gt;: for displaying a video in your document.&lt;/li&gt;
&lt;li&gt;&amp;lt;img /&amp;gt;: for displaying an image in your document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ol&amp;gt;&lt;/strong&gt;: for creating an ordered list. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ul&amp;gt;&lt;/strong&gt;: for creating an unordered list. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;li&amp;gt;&lt;/strong&gt;: for creating an item of a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/TAGS/default.ASP"&gt;www.w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
