<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simple and maintainable error-handling in TypeScript</title>
      <author>James Elderfield</author>
      <pubDate>Mon, 31 May 2021 11:31:31 +0000</pubDate>
      <link>https://dev.to/supermetrics/simple-and-maintainable-error-handling-in-typescript-56lm</link>
      <guid>https://dev.to/supermetrics/simple-and-maintainable-error-handling-in-typescript-56lm</guid>
      <description>&lt;p&gt;Sometimes things fail — that's a fact of life and programming. So as a programmer, you're going to have to write error-handling code. Thankfully TypeScript has some handy features which can help us to create simple and maintainable error-handling code.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://supermetrics.com/"&gt;Supermetrics&lt;/a&gt; one error-handling approach we take is to encode error states into the TypeScript type system. What does this mean? Simply, I’m referring to code where the semantic property of "being an error" is indicated by a variable's type. For a simplified example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No information in the type that this is an error,&lt;/span&gt;
&lt;span class="c1"&gt;// you would have to inspect the value to check&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something terrible occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TERRIBLE_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// It is clearly indicated in the type that this is an error,&lt;/span&gt;
&lt;span class="c1"&gt;// the exact value of the variable is less important&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TERRIBLE_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something terrible occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, why is using the type system in this way so great?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-potential-errors-are-indicated-in-function-signatures"&gt;
  &lt;/a&gt;
  1. Potential errors are indicated in function signatures
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomethingRisky&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a consumer of this function, it’s clear that it may produce an error instead of the expected &lt;code&gt;number&lt;/code&gt;. Some developers like to add documentation on potential errors to the function. While documentation is great, it isn’t tied closely to the code and it’s easy for docs and code to diverge over time - in this case either indicating errors that can never occur or missing new errors added later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-compiler-will-not-allow-you-to-forget-to-check-errors"&gt;
  &lt;/a&gt;
  2. The compiler will not allow you to forget to check errors
&lt;/h2&gt;

&lt;p&gt;Using the example function from point 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doSomethingRisky&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Compiler error because you can't add a TerribleError and a number&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badComputedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is ok as we've guarded against the error case&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means you can't forget to check the errors, although it doesn't force you to handle them in any particular way. Simple static analysis like this is a great safety net for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-it-can-be-used-to-standardize-error-handling"&gt;
  &lt;/a&gt;
  3. It can be used to standardize error handling
&lt;/h2&gt;

&lt;p&gt;When you have a generic type like &lt;code&gt;Error&amp;lt;E&amp;gt;&lt;/code&gt; where &lt;code&gt;E&lt;/code&gt; is some wrapped data about the error, you now have a generic way of handling errors throughout your codebase. You may even want to go a step further and wrap the good path in some kind of &lt;code&gt;Success&lt;/code&gt; type — we often use the pattern of a &lt;code&gt;Result&lt;/code&gt; type that is defined as something like &lt;code&gt;type Result&amp;lt;T, E&amp;gt; = Success&amp;lt;T&amp;gt; | Error&amp;lt;E&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is incredibly useful for writing generic code like this snippet which implements a function to call a potentially failing function with retries and could be used with any function returning your &lt;code&gt;Result&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfAttempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfAttempts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// isError is a simple custom type guard implemented elsewhere&lt;/span&gt;
    &lt;span class="c1"&gt;// https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar patterns can also be useful for many other cases like chaining operations that could fail, memoization of flaky functions, or handling errors from plugins or other 3rd party code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-all-errors-are-the-same"&gt;
  &lt;/a&gt;
  4. Not all errors are the same
&lt;/h2&gt;

&lt;p&gt;You’ll likely have operations that can fail in many exciting ways, which can also be encoded in these types. For example, by a discriminated union:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NETWORK_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;httpCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note that error types can have different properties to include only&lt;/span&gt;
&lt;span class="c1"&gt;// the necessary information&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EndOfUniverseError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END_OF_UNIVERSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doVeryRiskyThing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;EndOfUniverseError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maybeError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doVeryRiskyThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// These type guards cause the type of maybeError to be narrowed within&lt;/span&gt;
&lt;span class="c1"&gt;// the different scopes&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NETWORK_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Network request failed with code &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END_OF_UNIVERSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-function-polymorphism-can-be-used-to-indicate-when-errors-might-occur"&gt;
  &lt;/a&gt;
  5. Function polymorphism can be used to indicate when errors might occur
&lt;/h2&gt;

&lt;p&gt;By having functions that are polymorphic in arguments and return types, you can write very general functions that provide rich information on when errors can occur. For a contrived example, let's say you have an in-memory cache as part of your application and a more-full-featured and longer-term cache as part of another service. You might use a simple flag on your &lt;code&gt;cache&lt;/code&gt; function to indicate this like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Stores a value to local or remote cache with a given key&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Accessing the remote cache introduces many new failure modes, such as network errors. By writing polymorphic function definitions with your error types, you can indicate this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If using local cache then nothing interesting returned&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// If using remote cache we may return a NetworkError&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Implementation signature&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Implementation here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;The above patterns are by no means unique to TypeScript. For example, similar types are commonly used in functional-style programming in other languages, such as &lt;code&gt;Result&lt;/code&gt; in Rust or &lt;code&gt;Either&lt;/code&gt; in Haskell. You may also spot resemblance in some of these patterns to checked exceptions in Java or the mandatory error handling of &lt;code&gt;error&lt;/code&gt; in Go.&lt;/p&gt;

&lt;p&gt;It's very easy to build your own versions of the above error handling yourself, and in fact, I'd recommend it as a learning exercise if you want to become more familiar with TypeScript. But of course, there are many packages out there to help you. Some examples — in no particular order — include, &lt;a href="https://gigobyte.github.io/purify/"&gt;purify-ts&lt;/a&gt;, &lt;a href="https://github.com/gcanti/fp-ts"&gt;fp-ts&lt;/a&gt;, and &lt;a href="https://github.com/supermacro/neverthrow"&gt;neverthrow&lt;/a&gt;. You’ll notice that a couple of those examples are functional programming libraries, this is because errors can be well-modelled with monads.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>errors</category>
    </item>
    <item>
      <title>How to use custom fonts in React-Native.</title>
      <author>ReenyDavidson</author>
      <pubDate>Mon, 31 May 2021 11:29:58 +0000</pubDate>
      <link>https://dev.to/reenydavidson/how-to-use-custom-fonts-in-react-native-2dlc</link>
      <guid>https://dev.to/reenydavidson/how-to-use-custom-fonts-in-react-native-2dlc</guid>
      <description>&lt;p&gt;Have you tried using font-family in react-native and it didn't seem to work? It's fine, you have nothing to worry about. The pattern used to render a font in CSS for the web is quite different from the way you will render it in a react-native app. LET'S DIVE IN!&lt;/p&gt;

&lt;p&gt;To render a custom font in a react-native app, two main libraries are needed. These libraries are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;expo-font&lt;/li&gt;
&lt;li&gt;expo-app-loading&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#expofont"&gt;
  &lt;/a&gt;
  &lt;strong&gt;expo-font&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;expo-font is a library that allows one to load fonts from the web and use it in a react-native component. It does this with the help of a method called &lt;strong&gt;loadAsync&lt;/strong&gt;. To use expo-font, we will need to install it with expo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expo&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;expo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expoapploading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;expo-app-loading&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While the font from expo-font is still loading, expo-app-loading makes sure that a loading screen component or splash screen is running or being displayed. Once the font is loaded, it automatically allows the component with the font in it to display and allows the loading screen or splash screen to unmount. It does this with the help of a component called &lt;strong&gt;Apploading&lt;/strong&gt;. We can use it by installing expo-app-loading with expo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expo&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;expo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to do is to download the fonts which you would want to use in your app and store them in the assets folder of your react-native app workspace. You can download google fonts at &lt;em&gt;&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/em&gt; they have wonderful fonts over there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's Build&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Firstly, we import our libraries :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Font&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-font&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Apploading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-app-loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;We import Apploading from expo-app-loading, which makes sure that the splash screen component or loading screen component is visible while it is mounted and we also import everything in expo-font as Font so as to load fonts.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFonts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadAsync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;limelight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Limelight/Limelight- 
    Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;indie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Indie_Flower/IndieFlower- 
    Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use loadAsync method to asynchronously load static or remote resources that can be used in the react-native application. In this case, we are using it to asynchronously load the required font needed in the react-native app. It registers the font in a name which will be used while referring to it with &lt;em&gt;fontFamily&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;//you can return any component of your choice here&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;working&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Apploading&lt;/span&gt;
        &lt;span class="nx"&gt;startAsync&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getFonts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onFinish&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use useState to monitor if the fonts is loaded or not and then we use the conditional statement to render a particular component depending depending on if the fonts is loaded or not. In the snippet above, if fonts is loaded(fontsloaded), then we return the component where the font is specified or else we return a component called Apploading. Apploading takes in three props which includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;startAsync&lt;/li&gt;
&lt;li&gt;onFinish&lt;/li&gt;
&lt;li&gt;onError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;startAsync&lt;/strong&gt;&lt;br&gt;
startAsync returns a promise. This promise is what is being loaded or resolved while the a loading screen or splash screen is mounted or running. In the case above, the getFont function is what is being called in startAsync.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onFinish&lt;/strong&gt;&lt;br&gt;
This guy takes in a function setFontLoaded and sets it to true. In the case above, the onFinish prop waits for startAsync to load the fonts from getFont function and then it updates the state of the react-native app thereby rendering the font being loaded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onError&lt;/strong&gt;&lt;br&gt;
onError catches every possible error that might be thrown from startAsync and handles it properly.&lt;/p&gt;

&lt;p&gt;Now, we can use our font in any component we wish to use it in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;indie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see above, the name of the font family is the specified name given to the font when loading it from loadAsync. We can now use the loaded font and also specify weight and other attributes to the font loaded.&lt;/p&gt;

&lt;p&gt;Full code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-status-bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Font&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-font&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Apploading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-app-loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFonts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadAsync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;limelight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Limelight/Limelight-Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;indie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Indie_Flower/IndieFlower-Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;//you can return any component of your choice here&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;working&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Apploading&lt;/span&gt;
        &lt;span class="nx"&gt;startAsync&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getFonts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onFinish&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;indie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this little tutorial, I hope you are able to load a font properly in your react-native app. Go forth and be great!!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to filter an array in javascript? </title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 31 May 2021 11:12:17 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-filter-an-array-in-javascript-non</link>
      <guid>https://dev.to/hrishikesh1990/how-to-filter-an-array-in-javascript-non</guid>
      <description>&lt;p&gt;In this short tutorial, we look at why the JavaScript filter array method is used we also look at the syntax and code to facilitate a better understanding of the concept.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this &lt;a href="#code-amp-explanation"&gt;link&lt;/a&gt;.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-the-javascript-filter-function-do"&gt;What does the JavaScript filter function do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practical-uses-of-javascript-filter-function"&gt;Practical uses of JavaScript filter function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-amp-explaination"&gt;Code &amp;amp; Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-amp-caveats-while-using-javascript-filter"&gt;Limitation &amp;amp; Caveats while using JavaScript filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-javascript-filter-function-do"&gt;
  &lt;/a&gt;
  What does the JavaScript filter function do?
&lt;/h2&gt;

&lt;p&gt;The JavaScript &lt;code&gt;filter&lt;/code&gt; array function filters an array based on criteria and creates a new array with the values that pass. The JavaScript filter function iterates over the values in the array and returns the values that pass i.e. returns &lt;code&gt;true&lt;/code&gt;.  The search criteria in the JavaScript filter function are passed using a &lt;code&gt;callbackfn&lt;/code&gt; that takes in various parameters, we discuss them in detail below. Arrow functions can also be used to make JavaScript filter array code more readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-javascript-filter"&gt;
  &lt;/a&gt;
  Syntax of JavaScript filter():
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;thisValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;array&lt;/code&gt; refers to the original array that you are looking to filter&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;function&lt;/code&gt; - Required. A function or search criteria that would be used to filter each value in the array

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - Required, the value if current element in the iteration&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index&lt;/code&gt; - Optional, in case you would like to start the iteration from a specific index&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arr&lt;/code&gt; - The array object being called upon&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;thisValue&lt;/code&gt; - Optional, and as the name suggests, the value present would be passed in case the parameter is empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#practical-uses-of-javascript-filter-function"&gt;
  &lt;/a&gt;
  Practical uses of JavaScript filter function
&lt;/h2&gt;

&lt;p&gt;We have all come across filters on websites and they help us find things easily, the JavaScript filter array function is what allows this to happen. For example, we're looking for a freelancer with a skill JavaScript skillset. We use the JavaScript filter array function to return freelancers containing the particular skillset. This is made possible as the JavaScript filter does not mutate the string but rather creates a new one hence the original string is not affected. &lt;/p&gt;

&lt;p&gt;Similarly, websites with filters all make use of the JavaScript filter array function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-amp-explaination"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explaination:
&lt;/h2&gt;

&lt;p&gt;Let us start with a simple array and later move on to an array containing objects. So first, let us take an array containing numerical values and remove negative values using the JavaScript filter array function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;positive_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positive_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [0, 1, 5, 12, 19, 20]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you could see, we have defined a function that returns values that are greater than or equal to &lt;code&gt;0&lt;/code&gt;. In case you are comfortable with arrow functions you can use them to make your code more readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;positive_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positive_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [0, 1, 5, 12, 19, 20]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us look at a code where we use the JavaScript filter array function on an array of objects. Let's continue with the earlier example of filtering freelancers with JavaScript as a skillset.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freelancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;javascript_freelancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;freelancers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;freelancer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;freelancer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javascript_freelancers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [{ name: "Harry", skill: "JavaScript" }, { name: "David", skill: "JavaScript" }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the JavaScript filter array code for objects is also quite straightforward once you have understood the concept. Feel free to use the arrow function to increase readability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-amp-caveats-while-using-javascript-filter"&gt;
  &lt;/a&gt;
  Limitation &amp;amp; Caveats while using Javascript filter
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The JavaScript filter array does not mutate the array and hence remember to save the filtered array in case you plan on using it later.&lt;/li&gt;
&lt;li&gt;The JavaScript filter will not execute the function in case the array is empty&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>25 YouTube Channels to Learn Web Development for Free</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 31 May 2021 11:10:49 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/25-youtube-channels-to-learn-web-development-for-free-45np</link>
      <guid>https://dev.to/theinsightfulcoder/25-youtube-channels-to-learn-web-development-for-free-45np</guid>
      <description>&lt;p&gt;Web Development is one of the highest-paying careers today. According to the U.S. Bureau of Labor Statistics, web development provided employment to 174,300 developers in the US alone. Going forward, the industry is expected to grow 8% from 2019 to 2029, faster than most other occupations. With such increasing demand, peers are always in the search for valuable resources which don't burn a hole in their pocket. Keeping that in mind, I've compiled a list of 25 Awesome YouTube Channels to Learn Web Development for free!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-clever-programmer"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/channel/UCqrILQNl5Ed9Dz6CGMyvMTQ"&gt;Clever Programmer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKbQSoVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniwccxGvXvGzzwka5f73aPbmdxvEX4G_cUd7TEzkw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKbQSoVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniwccxGvXvGzzwka5f73aPbmdxvEX4G_cUd7TEzkw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite channels, Clever Programmer, founded by Rafeh Qazi offers one of the best courses on Web Development. From actionable insights to website clones and earning a 6 figure salary as a developer, this channel covers it all. Clever Programmer currently has over 956k subscribers with over 39 million views already. I definitely suggest you visit this channel once if you haven't already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sonny-sangha"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.youtube.com/user/ssangha32"&gt;Sonny Sangha&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhoc4lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngXcU2LcXQqcPyZFVwF_sV2zjB04K5RVFGE7heEwc4%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhoc4lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngXcU2LcXQqcPyZFVwF_sV2zjB04K5RVFGE7heEwc4%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sonny Sangha aka Papa React is one of the best mentors you could ask for. From being in the team of Clever Programmer and building a personal brand, Sonny has come a long time. Sonny builds amazing clones of websites such as Amazon, LinkedIn, Netlfix, live step by step. Sonny has recently started his own Youtube channel which has gained over 1 million views and 46k subscribers already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-akshay-saini"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.youtube.com/channel/UC3N9i_KvKZYP4F84FPIzgPQ"&gt;Akshay Saini&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_5m57R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnin7zykyU20uPntBE42IfNsj9SAL7tKeE7eiNuUYA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_5m57R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnin7zykyU20uPntBE42IfNsj9SAL7tKeE7eiNuUYA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Akshay Saini's course Namaste Javascript is one of the best in-depth, conceptual, simple, and effective tutorials you'd ever find. I've personally seen students thanking Akshay for his amazing explanation which has improved their skills by bounds. Akshay currently has 94k subscribers with 3 million views on his Youtube channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-new-boston"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.youtube.com/user/thenewboston"&gt;The New Boston&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pt0grnu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnglVjQeNSAVO9GgKkrjIbCO_y0rOx7Yxx-2bv9r_A%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pt0grnu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnglVjQeNSAVO9GgKkrjIbCO_y0rOx7Yxx-2bv9r_A%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The New Boston is one of the biggest channels providing tons of free content on a plethora of topics. It has playlists for React, Angular, Node.js, ES6, Redux, Django, and more. The New Boston currently has 2.55 million subscribers and a whopping 479 million views!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-traversy-media"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3KrjGC0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng963DN2_MIbKuvMWRrN4KG920h3Y4YHg6KET9vZg%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3KrjGC0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng963DN2_MIbKuvMWRrN4KG920h3Y4YHg6KET9vZg%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traversy Media needs no introduction. As the about section reads, "Traversy Media features the best online web development and programming tutorials for all of the latest web technologies including Node.js, Angular 2, React.js, PHP, Rails, HTML, CSS and much more." Traversy Media currently has 1.53 million subscribers and 138 million views. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-code-with-harry"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww"&gt;Code with Harry&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hb5OBvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjeHnMHZ7T341QLHqPhQPfsG6ugvg_SV6z6FkYqGw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hb5OBvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjeHnMHZ7T341QLHqPhQPfsG6ugvg_SV6z6FkYqGw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The saviour of Indian students, Haris Khan at his channel, Code with Harry teaches coding techniques to people in a short time which took him ages to learn. Harry has a Web Development Playlist consisting of over 100 videos that teach you web development from the basics to making an end to end responsive website. Code with Harry has 1.39 million subscribers and over 111 million views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-simplified"&gt;
  &lt;/a&gt;
  7.  &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mw1T91RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhIz_0Su6HhW6Ym50QCroJCAnF10X9xnnMDboN2%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mw1T91RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhIz_0Su6HhW6Ym50QCroJCAnF10X9xnnMDboN2%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll let the description of Web Dev Simplified do the talking. Web Dev Simplified is all about teaching web development skills and techniques in an efficient and practical manner. If you are just getting started in web development Web Dev Simplified has all the tools you need to learn the newest and most popular technologies to convert you from a no stack to a full stack developer. Web Dev Simplified also deep dives into advanced topics using the latest best practices for you seasoned web developers. This channel has 549k subscribers and 28 million views at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-the-net-ninja"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;The Net Ninja&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfjA4LWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwni-Wm0ZBDYJYFwySP2esxgc8s9mKiwmI3yJrmjlHQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfjA4LWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwni-Wm0ZBDYJYFwySP2esxgc8s9mKiwmI3yJrmjlHQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Net Ninja has over 1k tutorials on topics such as Modern JavaScript (beginner to advanced), Node.js, React, Vue.js, Firebase, MongoDB, HTML &amp;amp; CSS, PHP &amp;amp; MySQL, Laravel, React Native, and Flutter. It is one of the channels that gain viewers by word of mouth communication. The Net Ninja has 717k subscribers and 83 million views overall.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-coder-coder"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.youtube.com/channel/UCzNf0liwUzMN6_pixbQlMhQ"&gt;Coder Coder&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnTyffap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngKKP6FGC5DptI89tz1cD-2Cv6DY0at2lAvwPC04g%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnTyffap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngKKP6FGC5DptI89tz1cD-2Cv6DY0at2lAvwPC04g%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jessica at Coder Coder, provides incredible practical tips on Web Development. She has a limited number of videos on her channel but has garnered 170k subscribers and 3 million views on her channel. Surely one to look for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-corey-schafer"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.youtube.com/user/schafer5"&gt;Corey Schafer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUabRZM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngomgNvn2XgfFWEVlxCl_tUVEOhmUTUTlesdnuD%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUabRZM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngomgNvn2XgfFWEVlxCl_tUVEOhmUTUTlesdnuD%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Corey Schafer is another guy who needs no introduction. You'll gain a ton of knowledge on  Python, Git, Development Environments, Terminal Commands, SQL, Programming Terms, JavaScript, Computer Science Fundamentals among others. Corey has 776k subscribers and 57 million views on his channel right now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-wes-bos"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://www.youtube.com/user/wesbos"&gt;Wes Bos&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6CSaDiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjP0LxkG0UhtUeCq8BnTJgxRCn7Ot1wLrkOguP5Cpw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6CSaDiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjP0LxkG0UhtUeCq8BnTJgxRCn7Ot1wLrkOguP5Cpw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wes Bos, famously known for his Javascript 30 challenge, is one of the YouTubers you should definitely look out for. At the Javascript 30 challenge, you learn to build 30 Javascript projects using vanilla Javascript. Wes Bos has an amazing 131k subscribers and 6 million views on his channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-tanay-pratap"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://www.youtube.com/channel/UCNFmBuclxQPe57orKiQbyfA"&gt;Tanay Pratap&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1Nz9N5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnibnmzbi8nfRHEAzdI-8lpPGsrD1F6Cg3mAImtQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1Nz9N5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnibnmzbi8nfRHEAzdI-8lpPGsrD1F6Cg3mAImtQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tanay Pratap, a Microsoft engineer shares his knowledge on Web Development on his YouTube channel. He has amazing long tutorials on HTML, CSS, JS, Git, Hosting, and more. Tanay has over 23k subscribers and half a million views on his channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-derek-banas"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.youtube.com/user/derekbanas"&gt;Derek Banas&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYeufoqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjUAaFsikVB8U9VFt_TE6w074PwyaM48yC3HobDbQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYeufoqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjUAaFsikVB8U9VFt_TE6w074PwyaM48yC3HobDbQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Derek Banas has tutorials on a wide range of topics including HTML, CSS, PHP, JS,  AJAX, Git, Web Services, Django, and more. Derek Banas is currently making videos on Data Science and Machine Learning. His channel holds  1.12 subscribers and 107 million views in total. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-jonas-schmedtmann"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://www.youtube.com/channel/UCNsU-y15AwmU2Q8QTQJG1jw"&gt;Jonas Schmedtmann&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pC6p3cbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnizoYDfYjC-eOXV1g6cht2ss2biEtcLDoTphm56tw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pC6p3cbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnizoYDfYjC-eOXV1g6cht2ss2biEtcLDoTphm56tw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonas Schmedtmann might not have many videos but does provide a mini-course and an overview of what you'll learn in Web Development. If you just want to spend a day, getting started with Web Dev, try Jonas. Jonas currently holds 24.9k subscribers and 1 lakh views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-academind"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w"&gt;Academind&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yD6eBUAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhuAGr98acrEv0S1Q3Ikz0giWPmHmM1J3h6pANWCg%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yD6eBUAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhuAGr98acrEv0S1Q3Ikz0giWPmHmM1J3h6pANWCg%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max &amp;amp; Manuel at Academind creates courses and tutorials that teach you everything related to web development. No matter if it's programming languages like JavaScript, runtimes like NodeJS, or popular frameworks like ReactJS, Angular, or VueJS. They got you covered. Academind currently has 675k subscribers and 52 million plays already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-hitesh-choudhary"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://www.youtube.com/user/hiteshitube"&gt;Hitesh Choudhary&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzZrKsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnihtV8Mb0JZFkkAEf9KKN4m4WNNeHkxUb6Wuvc_5w%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzZrKsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnihtV8Mb0JZFkkAEf9KKN4m4WNNeHkxUb6Wuvc_5w%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hitesh Choudhary is a guy who creates content every single week, He covers a wide range of subjects like programming, new frameworks, open-source products, and more. He personally has a keen interest in topics like Javascript, Python, PHP, and Machine Learning. He also offers a MERN full stack development course for under 3$(₹ 199) Hitesh has over 633k subscribers and 37 million views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-adam-khoury"&gt;
  &lt;/a&gt;
  17. &lt;a href="https://www.youtube.com/user/flashbuilding"&gt;Adam Khoury&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwr-VFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnioOS1ThaFgeVeaqTRDNOkJG4AdOWKsKirrI4JWHA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwr-VFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnioOS1ThaFgeVeaqTRDNOkJG4AdOWKsKirrI4JWHA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adam Khoury at his channel helps to master technologies like JavaScript, PHP, SQL, HTML, CSS, ActionScript, and more. His videos are concise, conceptual, and effective. Adam currently has 197k subscribers to his channel and more than 32 million views overall.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-code-course"&gt;
  &lt;/a&gt;
  18. &lt;a href="https://www.youtube.com/user/phpacademy"&gt;Code Course&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9n33TKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngHnzFJMjhx1S_B-kKr6EeGMIBzAjwuguhbt4Jx0w%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9n33TKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngHnzFJMjhx1S_B-kKr6EeGMIBzAjwuguhbt4Jx0w%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're someone who's a fan of PHP and Lavarel, Code Course is the channel for you. Code Course covers numerous concepts related to PHP, Lavarel, APIs, and more. It currently has 340k subscribers and more than 33 million views in total.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-leveluptuts"&gt;
  &lt;/a&gt;
  19. &lt;a href="https://www.youtube.com/user/LevelUpTuts"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPnwTaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhG70hoc2gsqGaYrXDU1J31FfG_eW4NXeuN18R-XA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPnwTaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhG70hoc2gsqGaYrXDU1J31FfG_eW4NXeuN18R-XA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scott Tolinski at his channel(formerly along with Ben Schaaf), LevelUpTuts provide high-quality content on Web Development. Their tutorials are aimed to be accessible and easy to follow while maintaining high production values. LevelUpTuts has 335k subscribers and 32 million views on its channel to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-cs50"&gt;
  &lt;/a&gt;
  20. &lt;a href="https://www.youtube.com/channel/UCcabW7890RKJzL968QWEykA"&gt;CS50&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjDwxn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjo89LMRtwUAmOGuunMTbJTrIDby7FWPECLm799hA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjDwxn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjo89LMRtwUAmOGuunMTbJTrIDby7FWPECLm799hA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CS50 is Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. It offers a free course on Web Programming with Python and Javascript where it covers where they cover concepts like Git, Flash, SQL, ORM, API, Javascript, Django, Scalability, and Security of websites. I highly recommend taking this course if you're a beginner and want to start the journey of web development with an excellent foundation. CS50 has 690k subscribers to its channel with 43 million views. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-quentin-watt-tutorials"&gt;
  &lt;/a&gt;
  21. &lt;a href="https://www.youtube.com/user/QuentinWatt"&gt;Quentin Watt Tutorials&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5A9BVLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngEbgqSe1QSDY9I5UVQLyOgyy35KHk55AoIBXCirQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5A9BVLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngEbgqSe1QSDY9I5UVQLyOgyy35KHk55AoIBXCirQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quentin Watt teaches technologies like JavaScript, PHP using popular frameworks like Vue.js and Laravel. With over a decade of experience to share he makes short video tutorials aimed at equipping an individual skill needed to develop their career. Quentin currently holds 162k subscribers and 19 million views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-devtips"&gt;
  &lt;/a&gt;
  22. &lt;a href="https://www.youtube.com/user/DevTipsForDesigners"&gt;DevTips&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--macY5PQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng7UMURAsfCu7U3zhssYa3bLWjg5Ht0dn8PGnbeow%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--macY5PQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng7UMURAsfCu7U3zhssYa3bLWjg5Ht0dn8PGnbeow%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevTips has weekly discussions and tutorials on various technologies such as CSS, Bootstrap, React, Docker, etc. The tutorials are fun and easy to follow, two factors I definitely look for in a great resource.  DevTips has 356k subscribers and 16 million views on the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-learnwebcode"&gt;
  &lt;/a&gt;
  23. &lt;a href="https://www.youtube.com/user/LearnWebCode"&gt;LearnWebCode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_aHe_lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjrFXkpkMWqEtC2KhHqHcfQ7mFAy8LHU2fLSDby%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_aHe_lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjrFXkpkMWqEtC2KhHqHcfQ7mFAy8LHU2fLSDby%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brad, at LearnWebCode has insightful tutorials on HTML, CSS, MongoDB, API, JSON, Bootstrap, and more. With 288k subscribers and 20 million views, LearnWebCode is a channel that gives a quick overview of and helps understand concepts quickly. LearnWebCode currently has 288k subscribers and 19 million views on the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#24-google-chrome-developers"&gt;
  &lt;/a&gt;
  24. &lt;a href="https://www.youtube.com/user/ChromeDevelopers"&gt;Google Chrome Developers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3YLPg7rO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniL7QUpTiyGjIpNfk6g7eCkMSB3yjnMS4wkMvY49Q%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YLPg7rO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniL7QUpTiyGjIpNfk6g7eCkMSB3yjnMS4wkMvY49Q%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Chrome Developers is a channel by Google developers, featuring some amazing content on the web and more. There are playlists on PWA, Design Learning, event recordings, and more. This is a channel you should visit to have a greater understanding of the web and upskill. Google Chrome Developers has 584k subscribers and 37 million views at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-apna-college"&gt;
  &lt;/a&gt;
  25. &lt;a href="https://www.youtube.com/channel/UCBwmMxybNva6P_5VmxjzwqA"&gt;Apna College&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksArbZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniWFbtX2drltDWOBZGP1KhLVTqDypqg4oQPK7Pc%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksArbZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniWFbtX2drltDWOBZGP1KhLVTqDypqg4oQPK7Pc%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, Apna College with Aman Dhattarwal with his team as the face of the channel has an amazing animated course on Web Development on Apna College. The course is taught by a guy who has cleared Googler Summer of Code being from a non-cs background. Apna College has 509k subscribers and 25 million views on the channel. &lt;/p&gt;

&lt;p&gt;That was it for today folks. Though I have another set of great channels, these are more than enough to build your skills as a web developer. Honorable mentions to the evergreen and most famous channels such as &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;FreeCodeCamp&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/edurekaIN"&gt;Edureka&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/programmingwithmosh"&gt;Programming with Mosh&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/Simplilearn"&gt;Simplilearn&lt;/a&gt;, and  &lt;a href="https://www.youtube.com/user/intellipaaat"&gt;Intellipaat&lt;/a&gt; who provide 6-10hr long videos on the topic covering a ton of concepts in a limited amount of time. &lt;/p&gt;

&lt;p&gt;Which YouTube channel is your favorite? Let me know in the comment section below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-insights-by-the-insightful-coder-"&gt;
  &lt;/a&gt;
  Bonus Insights by &lt;a href="https://theinsightfulcoder.com/"&gt;The Insightful Coder&lt;/a&gt; :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Creative Beginner-Level Python Projects🐍?: Check out the  &lt;a href="https://theinsightfulcoder.com/series/python-projects-for-beginners"&gt;Python Projects for Beginners Series&lt;/a&gt; 😍&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Your Own Artificial Intelligence Projects using Python?: Check out the &lt;a href="https://hashnode.com/series/python-ai-series-ckkft33ux016dwjs11xlqbz4v"&gt;Python AI Series&lt;/a&gt;🧠&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'm also dropping useful dev resources, interactive quizzes and Interview preparation on my  &lt;a href="https://www.instagram.com/theinsightfulcoder/"&gt;Instagram&lt;/a&gt; Page. Make sure to follow me up 💯&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find and Download All My Project Source Codes at My &lt;a href="https://github.com/SaiAshish-Konchada"&gt;Github Repository&lt;/a&gt;  🎁&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Debugging Lua inside Openresty inside Docker with IntelliJ IDEA</title>
      <author>Omer van Kloeten</author>
      <pubDate>Mon, 31 May 2021 11:01:25 +0000</pubDate>
      <link>https://dev.to/omervk/debugging-lua-inside-openresty-inside-docker-with-intellij-idea-2h95</link>
      <guid>https://dev.to/omervk/debugging-lua-inside-openresty-inside-docker-with-intellij-idea-2h95</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#but-why"&gt;But why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-other-people-do-it"&gt;How do other people do it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#last-things-first"&gt;Last thing’s first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-process"&gt;The process&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#starting-out"&gt;Starting out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bootstrapping-the-debugger"&gt;Bootstrapping the debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-local-dynamic-library"&gt;The Local Dynamic Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listening-on-localhost"&gt;Listening on localhost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lets-step"&gt;Let’s step!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-sources"&gt;Matching sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#works-on-my-machine"&gt;Works on my machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#summing-it-all-up"&gt;Summing it all up&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-word-of-warning"&gt;A word of warning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-changed"&gt;What changed?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-hot-reloading-the-lua-code"&gt;Bonus: Hot reloading the Lua code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parting-words"&gt;Parting words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#but-why"&gt;
  &lt;/a&gt;
  But why?
&lt;/h1&gt;

&lt;p&gt;I was challenged to find a way to step through some code. Usually I’d just fire up my IDE and start debugging, but this case was a bit more complicated than that. You see, this code is &lt;a href="http://www.lua.org/"&gt;Lua&lt;/a&gt; code, running inside a custom version of &lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt; called &lt;a href="https://openresty.org/"&gt;Openresty&lt;/a&gt;, running inside a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container as part of a &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; app. Oh, and I needed to step through it using IntelliJ IDEA.&lt;/p&gt;

&lt;p&gt;Can’t be too hard, right?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-other-people-do-it"&gt;
  &lt;/a&gt;
  How do other people do it?
&lt;/h1&gt;

&lt;p&gt;I sat down and read a lot of material online and most of it boiled down to one of two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;a href="https://studio.zerobrane.com/"&gt;ZeroBrane Studio&lt;/a&gt;, an entirely different IDE with a debugger named &lt;a href="https://github.com/pkulchenko/MobDebug"&gt;mobdebug&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Print debugging to the logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neither one of those things were what I wanted to do, which got me thinking that, in order of likeliest to least:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Someone got it working but never documented it,&lt;/li&gt;
&lt;li&gt;It’s a terrible idea that I shouldn’t even consider trying, or;&lt;/li&gt;
&lt;li&gt;It’s never been done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a few days of work, I found the way to do it and the following is an explanation of how you could do it yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-things-first"&gt;
  &lt;/a&gt;
  Last thing’s first
&lt;/h1&gt;

&lt;p&gt;If you don’t really care about the journey and why these things actually work, you can jump over to &lt;a href="#summing-it-all-up"&gt;Summing it all up&lt;/a&gt; and see the end result there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The process
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#starting-out"&gt;
  &lt;/a&gt;
  Starting out
&lt;/h2&gt;

&lt;p&gt;I’m assuming that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have IntelliJ IDEA.&lt;/li&gt;
&lt;li&gt;You have a working Docker Compose app with an Ubuntu-based Docker container named &lt;em&gt;nginx&lt;/em&gt; running Openresty with your custom Lua code that you want to debug.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fire up IntelliJ IDEA and install the &lt;a href="https://plugins.jetbrains.com/plugin/9768-emmylua"&gt;EmmyLua plugin for IntellIJ&lt;/a&gt;. Note that this is not the &lt;a href="https://plugins.jetbrains.com/plugin/5055-lua"&gt;Lua plugin&lt;/a&gt;, which I couldn’t get to work in the latest version of the IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrapping-the-debugger"&gt;
  &lt;/a&gt;
  Bootstrapping the debugger
&lt;/h2&gt;

&lt;p&gt;To start debugging, you’ll have to create a new Debug configuration. Go to &lt;em&gt;Run → Edit Configurations...&lt;/em&gt; and add a new &lt;em&gt;Emmy Debugger&lt;/em&gt; config.&lt;/p&gt;

&lt;p&gt;Set Connection to &lt;em&gt;Tcp ( IDE connect debugger )&lt;/em&gt;, and Keep Host and Port as &lt;em&gt;localhost&lt;/em&gt; and &lt;em&gt;9966&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The dialog is kind enough to generate a snippet of code you can copy and paste to your Lua code to bootstrap the debugger in its context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I43iCKK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh2d6j5slmxt5kihwt6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I43iCKK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh2d6j5slmxt5kihwt6x.png" alt="Run/Debug Configurations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;IDE connect debugger&lt;/em&gt; means is that the code will start listening on port 9966 for incoming connections, then block until the IDE attaches to it when we run this Debug configuration.&lt;/p&gt;

&lt;p&gt;Here’s the code I copied from that textbox verbatim:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ll have to add this code to the file we’re debugging so that it can wait for the IDE to attach, after which we’ll theoretically be able to step through it, right?&lt;/p&gt;

&lt;p&gt;There are a few red flags here. Let’s break them down one by one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line references a local file that is also a Mac-only &lt;code&gt;dylib&lt;/code&gt; (Dynamic Library) and we’ll be running a Linux-based container (which means we need an &lt;code&gt;so&lt;/code&gt; file - a Shared Object). We won’t be able to load that file.&lt;/li&gt;
&lt;li&gt;The debugger is listening on &lt;em&gt;localhost&lt;/em&gt;, but we’ll be inside a container.&lt;/li&gt;
&lt;li&gt;If we have multiple code paths that run this code one after the other, we’ll have errors since the port is a shared resource.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the port contention (#3) can be solved with either closing the port quickly (using &lt;code&gt;dbg.stop()&lt;/code&gt;) or using a random port, the first two merit some more detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-local-dynamic-library"&gt;
  &lt;/a&gt;
  The Local Dynamic Library
&lt;/h2&gt;

&lt;p&gt;We’ll need a local binary inside the container to load, and it has to be the right one.&lt;/p&gt;

&lt;p&gt;While Emmy releases Linux SO files for Emmy Core &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/releases/tag/1.0.16"&gt;as part of their builds&lt;/a&gt;, they’re not necessarily compatible with whatever flavor of Linux your container will have. We’ll have to &lt;em&gt;build it from source&lt;/em&gt; as part of building the image:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The above gets the latest released version of the source code (1.0.16 is the latest at the time this is written) and builds it according to the script in the repo’s &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/blob/master/.travis.yml"&gt;.travis.yml file&lt;/a&gt; (lines 7-8). It then copies the SO file to the easily reachable /usr/local/emmy (lines 9-10) before removing the downloads (line 13).&lt;/p&gt;

&lt;p&gt;Like me, you might not be able to build it because you have an older version of CMake than is required. In that case, add the correct one before compiling the Emmy Debugger SO:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we download the latest version of CMake 3 which is required to build Emmy Core (line 1), then build it from source (lines 5-7), remove the downloads (line 9) and update Ubuntu to use it instead of the default CMake (line 10).&lt;/p&gt;

&lt;p&gt;Back to the code we used to bootstrap the debugger:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s change line 1 to match the new Container-local Emmy Core:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#listening-on-localhost"&gt;
  &lt;/a&gt;
  Listening on localhost
&lt;/h2&gt;

&lt;p&gt;We told our code to bind to localhost on port 9966, but that doesn’t help us since we’re inside a Docker container. Let’s expose that port to the host computer so that it’s reachable.&lt;/p&gt;

&lt;p&gt;In your docker-compose.yaml, add the following lines 3-4:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This exposes 9966 as a port local to the host machine. When the IDE opens a connection to it, that connection is proxied into the container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-step"&gt;
  &lt;/a&gt;
  Let’s step!
&lt;/h2&gt;

&lt;p&gt;After doing all of that, let’s give it a try! Let’s place a breakpoint after the &lt;code&gt;dbg.waitIDE()&lt;/code&gt; line, start our Docker Compose app, then call the endpoint that includes the code to debug and, as it waits for us to connect, run the Debug Configuration.&lt;/p&gt;

&lt;p&gt;That doesn’t work, though. The code waits for the debugger, the debugger successfully connects and then disconnects. Our breakpoint isn’t even hit!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6KctFeiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejhgcthf6s4syothuwjp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KctFeiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejhgcthf6s4syothuwjp.gif" alt="[1] debugging fails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-sources"&gt;
  &lt;/a&gt;
  Matching sources
&lt;/h3&gt;

&lt;p&gt;The issue here is that when we place a breakpoint in the IDE in the file &lt;code&gt;/Users/omer_van_kloeten/my_project/src/lua/something.lua&lt;/code&gt;, the debugger will never stop there, because that path doesn’t exist in the container. Instead, this file will be somewhere like &lt;code&gt;/etc/nginx/lua/something.lua&lt;/code&gt;. How can we make that translation?&lt;/p&gt;

&lt;p&gt;I scoured the documentation, but found no API that could do that. Begrudgingly, I started trudging through the debugger’s source code and eventually found &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/blob/3f8853897fe001250e6e8a80ace5b603b1caccd8/emmy_core/emmy_debugger.cpp#L428"&gt;a public API hook, with only a single line example&lt;/a&gt;. Was this the right API? I read through the sources and tried it and &lt;em&gt;it just worked&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Here it is - this code should be placed before loading the debugger:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;fixPath&lt;/code&gt; function gets a file’s path and ‘fixes’ it to look like the paths the IDE expects.&lt;/p&gt;

&lt;p&gt;Looks like this will solve it. Let’s try again to place a breakpoint after the &lt;code&gt;dbg.waitIDE()&lt;/code&gt; line, start our Docker Compose app, then call the endpoint that includes the code to debug and, as it waits for us to connect, run the Debug Configuration.&lt;/p&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9sD_XPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgb9qgiimyjw94ch8fgo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9sD_XPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgb9qgiimyjw94ch8fgo.gif" alt="[2] debugging works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#works-on-my-machine"&gt;
  &lt;/a&gt;
  Works on my machine
&lt;/h2&gt;

&lt;p&gt;This was exciting, but committing this kind of code would get me tarred and feathered. Let’s make sure this works on everyone’s machine. But how can we know, from inside a running container, where the host machine’s source code is located? Let’s use an environment variable.&lt;/p&gt;

&lt;p&gt;Let’s make a couple changes to the code above:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First off, we added line 1, which fetches the environment variable. We’ve also changed line 4 to use the value from that environment variable.&lt;/p&gt;

&lt;p&gt;This means we’ll need to get the value &lt;code&gt;/Users/omer_van_kloeten/my_project/src&lt;/code&gt; into the variable.&lt;/p&gt;

&lt;p&gt;It’s not that trivial to get that environment variable into the code, because Nginx strips away almost all environment variables. We’ll have to whitelist it in nginx.conf:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we’ll want to send it into the container at runtime. Inside docker-compose.yaml, let’s make sure our local environment variable is pushed to the container as a local environment variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ve added the environment variable in line 4, but didn’t give it a value. That means it will pick up the value from the host environment when it’s started.&lt;/p&gt;

&lt;p&gt;Before we docker compose up our app, we’ll need to first export the environment variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Stepping through the code will now work on all of our colleagues’ computers!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summing-it-all-up"&gt;
  &lt;/a&gt;
  Summing it all up
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#a-word-of-warning"&gt;
  &lt;/a&gt;
  A word of warning
&lt;/h2&gt;

&lt;p&gt;This guide covers only the first steps towards making robust debuggable code. You &lt;strong&gt;do not&lt;/strong&gt; want to ship your code with debugger binaries listening on a port for connections.&lt;/p&gt;

&lt;p&gt;This guide is far from comprehensive and doesn’t allude to being one-size-fits-all. I’d love to hear how you fixed issues with it in the comments. Come share your personal progress!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-changed"&gt;
  &lt;/a&gt;
  What changed?
&lt;/h3&gt;

&lt;p&gt;Here’s all of the changes we made to our code in easily copy-paste-able gist form:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;This way of debugging means that the code waits for the debugger to connect to it, when it uses &lt;code&gt;tcpListen&lt;/code&gt;. However, this is not that great because it waits for user interaction (starting the Debug Configuration). If we used &lt;code&gt;tcpConnect&lt;/code&gt;, we would be able to start the debugger and have the process connect directly to it when it needs to, without user interaction. Unfortunately, I was unable to make that work within a reasonable timeframe when listening on &lt;code&gt;0.0.0.0&lt;/code&gt; and attempting to connect to &lt;code&gt;host.docker.internal&lt;/code&gt; from inside the Docker container. Perhaps you will.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-hot-reloading-the-lua-code"&gt;
  &lt;/a&gt;
  Bonus: Hot reloading the Lua code
&lt;/h1&gt;

&lt;p&gt;A lot of the above included frequently changing Lua code and rebuilding the container, causing the feedback loop to be frustratingly long. If we can edit the files inside the container, that would make things much easier, right?&lt;/p&gt;

&lt;p&gt;To do that, let’s attach our sources as a volume to the container in docker-compose.yaml:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In line 3 we’re effectively replacing the files that exist inside the container with a live link to our local ones.&lt;/p&gt;

&lt;p&gt;However, Openresty has a &lt;a href="https://openresty-reference.readthedocs.io/en/latest/Directives/#lua_code_cache"&gt;Lua code cache&lt;/a&gt; which will cache the code once it’s been run. Thankfully, we can turn that off in our nginx.conf:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Unfortunately, this neat trick breaks the reproducibility of Docker images, so these patches to docker-compose.yaml and nginx.conf should never reach your CI server.&lt;/p&gt;

&lt;p&gt;Note that you may also break your code if you turn off the Lua cache, due to &lt;a href="https://openresty-reference.readthedocs.io/en/latest/Directives/#lua_code_cache"&gt;its side effects&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#parting-words"&gt;
  &lt;/a&gt;
  Parting words
&lt;/h1&gt;

&lt;p&gt;Please remember that this guide only outlines bootstrapping the ability to step inside the code, and therefore should probably not be used as-is. It was a fun challenge to take up and I sincerely hope that this guide is some day useful to someone other than myself.&lt;/p&gt;

&lt;p&gt;--- &lt;a href="https://twitter.com/omervk"&gt;@omervk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>lua</category>
      <category>openresty</category>
      <category>nginx</category>
      <category>docker</category>
    </item>
    <item>
      <title>How to check the weather right from your terminal with Python</title>
      <author>Stokry</author>
      <pubDate>Mon, 31 May 2021 10:58:07 +0000</pubDate>
      <link>https://dev.to/stokry/how-to-check-the-weather-right-from-your-terminal-with-python-1e7m</link>
      <guid>https://dev.to/stokry/how-to-check-the-weather-right-from-your-terminal-with-python-1e7m</guid>
      <description>&lt;p&gt;Today I want to show you how to check the weather from your terminal. For this purpose, we are going to use &lt;code&gt;cli-weather&lt;/code&gt;, a lightweight command-line app to get fast weather data right on the command line. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/cli-weather/"&gt;cli-weather&lt;/a&gt; is a command-line app to get instant real-time weather data by city name or postal code from any corner on earth right on the command line.&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;&lt;code&gt;cli-weather app&lt;/code&gt;&lt;/em&gt; you can retrieve current weather observations from over &lt;strong&gt;45,000&lt;/strong&gt; live weather stations using WeatherBIT API, and highly localized weather forecasts for any point on the globe using the world's most trusted weather models such as GFS 13km, ECMWF, DWD 6.5km ICON-Europe, and NOAA 3km HRRR.!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;cli-weather requires &lt;a href="https://pypi.org/project/cli-weather/pip.pypa.io"&gt;pip&lt;/a&gt; python package manager to install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;COUNTRY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="n"&gt;city_nmae&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postal_cod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ05LPOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/HBBf2pv/video.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ05LPOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/HBBf2pv/video.gif" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet, isn't it? :-)&lt;/p&gt;

&lt;p&gt;Thank you all.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To Use Mobile App ASO And SEO For Your App Promotion</title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 31 May 2021 10:46:03 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg</link>
      <guid>https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg</guid>
      <description>&lt;p&gt;With the proliferation of the internet and numerous powerful online promotion techniques, creating and distributing an excellent app is now an option to many. However, this also makes the digital landscape fiercer for mobile app publishers. Today, when promoting your app, you’re competing with 3.8 million Android apps and over 2 million iOS apps. Unsurprisingly, in the competitive mobile app development space, getting your app published is one thing, getting your app noticed is another.&lt;br&gt;
With the app marketing landscape the way it is, you need to have a robust app promotion plan that combines the most effective mobile app ASO and SEO practices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Combine Mobile App ASO And SEO?&lt;/strong&gt;&lt;br&gt;
SEO is all about optimizing your site for search engines, while mobile app ASO applies to an app store for basically the same purpose. We can freely say that ASO and SEO are two different sides of the same coin. And, to reach their ultimate performance, they should be used together.&lt;/p&gt;

&lt;p&gt;Statistics say that Google is still one of the most important sources of app discoverability. So, if you don’t play by its rules and optimize your site for it, your rankings, traffic, and visibility will suffer. In other words, you will miss out on an opportunity to serve your app to the right people.&lt;/p&gt;

&lt;p&gt;On the other hand, app stores also serve as closed site search engines. So, it’s not that surprising that the idea behind mobile app ASO is similar to SEO – the higher your app ranks in the app store, the more visible it is to your target audience.&lt;/p&gt;

&lt;p&gt;As the line between desktop and mobile is getting blurrier, web marketing and app marketing is becoming merged. Marketers focus on providing exceptional user experience, be it via apps or web. The result is more active engagement with your prospects, who have the potential to become your loyal customers one day.&lt;/p&gt;

&lt;p&gt;As a result, mobile app ASO and SEO need to be two equally important aspects of your app promotion strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SEO Is The Foundation Of Mobile App ASO&lt;/strong&gt;&lt;br&gt;
To get the most out of app promotion, don’t approach SEO and ASO as conflicting strategies. Organic search optimization is still the foundation of your online presence, and it needs to be an integral part of your mobile app ASO. Numerous SEO techniques can directly benefit your app store optimization. Some of them are:&lt;/p&gt;

&lt;p&gt;• Keyword research and targeting. Keyword targeting is one of the most complex and delicate aspects of your SEO. Choose keywords carefully because they are the pillars of your online presence. Make sure you back up this process with the right keyword research tools or even invest in SEO consulting services.&lt;/p&gt;

&lt;p&gt;• The optimization of your app name, title, and URL for your major keywords&lt;/p&gt;

&lt;p&gt;• Generating app rating and reviews&lt;/p&gt;

&lt;p&gt;• Using deep linking in your mobile app&lt;/p&gt;

&lt;p&gt;• Indexation of your app on Google&lt;/p&gt;

&lt;p&gt;• Click-through rate optimization&lt;/p&gt;

&lt;p&gt;• Link building techniques&lt;/p&gt;

&lt;p&gt;One of the significant mistakes app developers make is underestimating the power of a quality, responsive website. In today’s competitive digital landscape, your website serves as your online portfolio. Your target audience uses your website to learn more about your app before downloading it; it should be as informative as possible. Also, it needs to guide them through the information seeking process, providing them with a personalized user experience and turning them into engaged prospects.&lt;/p&gt;

&lt;p&gt;Your website also helps you position yourself as an authority and a reliable source of information. Starting a blog and creating highly interactive and engaging content boosts app awareness and visibility. Most importantly, creating domain authority drives more web traffic and increases downloads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improving Your In-App Store Techniques&lt;/strong&gt;&lt;br&gt;
63% of users discover apps via app stores, and not boosting your rankings in these channels means you’re giving up on a major promotional opportunity for your app. While the features of app stores vary, there are still some fundamental aspects of optimization you need to focus on:&lt;/p&gt;

&lt;p&gt;A meta title. Keep in mind that longer titles usually get truncated in the SERPs. You need to keep your meta title short, sweet, and memorable. Don’t forget to add your major keywords to it, too. Namely, the recent report shows that apps with a top-value keyword in their title rank 10.3% higher than those without a keyword.&lt;/p&gt;

&lt;p&gt;A meta description is a sort of a call to action for your target audience. Write your meta description in simple language, list your unique benefits, and inspire people to download your app. Make sure you add your major keywords to it and refurbish it every time you update your product page.&lt;/p&gt;

&lt;p&gt;App ratings and reviews are the validation of your app’s quality. As such, they boost your brand’s credibility.&lt;/p&gt;

&lt;p&gt;App keyword fields. When optimizing your app page for keywords, make sure you write your titles and descriptions for your target audience first. Your content is how you will entice users to download your app. Keep in mind that ranking algorithms take both keywords and your customer conversion into consideration. &lt;/p&gt;

&lt;p&gt;Screenshots and preview videos are important, as they bring your text to life and help your customers see the app before downloading it.&lt;/p&gt;

&lt;p&gt;App icon optimization. Just keep in mind that Google Play and the App Store have different standards for an icon’s ideal size, colour, and geometry. iOS icons need to be at least 1024×1024 pixels, while Android ones are required to be 512×512 pixels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revamp Your App Data Regularly&lt;/strong&gt;&lt;br&gt;
The highest-ranking apps in app stores are those that are continually getting improved, such as changes in technology, feature improvements, or adding new user feedback. Making regular updates helps you build a positive brand image and trust among your target audience. The fact that you’re continually working on your app improvements and keeping your users up-to-date on them sets you apart from your competitors and even boosts your rankings in the app stores. Namely, both Apple’s App Store and Google’s Play Store assess the consistency of app upgrades when ranking it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over To You&lt;/strong&gt;&lt;br&gt;
You can see from the previous examples that mobile app ASO and web SEO are overlapping strategies. Sure, these strategies can work separately, but if you are not using them together, you are not leveraging visibility properly. Don’t forget that SEO allows you to target those people that are not browsing app stores. By focusing on the elements mentioned above, you can boost your rankings in both search engines and app stores and drive more quality traffic to your app.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>webdev</category>
      <category>marketing</category>
    </item>
    <item>
      <title>Hey company reps, give me a tip!</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Mon, 31 May 2021 10:19:51 +0000</pubDate>
      <link>https://dev.to/asciiden/hey-company-reps-give-me-a-tip-b50</link>
      <guid>https://dev.to/asciiden/hey-company-reps-give-me-a-tip-b50</guid>
      <description>&lt;p&gt;I am thinking of a way to travel around the world and still do IT. My idea goes by this:&lt;/p&gt;

&lt;p&gt;I contact companies and I work for them 3-6 months, where I write a review of the company culture, the colleagues, the technologies they use and the overall experience. I also write about the life in the country. To me, this idea sounds really cool and I would be reading every post &amp;amp; watching every video of it along the creator's (me haha) adventure.&lt;/p&gt;

&lt;p&gt;What the company gets from my review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exposure - One more place where the company name is shown.&lt;/li&gt;
&lt;li&gt;Advertisement - The company gets the positive look of being open-minded for hiring such person and participating in this program.&lt;/li&gt;
&lt;li&gt;A worker for 3-6 months - I will be a contractor due to a regular contract being too hard to come up with and too much work for a 3-6 months employee.&lt;/li&gt;
&lt;li&gt;A slightly lower paid employee due to no existing promise for a long-term employment from my side&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, my question is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Would you participate?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Google Analytics for Beginners</title>
      <author>Tesla</author>
      <pubDate>Mon, 31 May 2021 10:11:38 +0000</pubDate>
      <link>https://dev.to/tesla91615060/google-analytics-for-beginners-3216</link>
      <guid>https://dev.to/tesla91615060/google-analytics-for-beginners-3216</guid>
      <description>&lt;p&gt;Google Analytics for Beginners shows new users how to create an account, implement tracking code, and set up data filters. You'll learn how to navigate the Google Analytics interface and reports, and set up dashboards and shortcuts. The course will also demonstrate how to analyze basic Audience, Acquisition, and Behavior reports, and set up goals and campaign tracking.&lt;/p&gt;

&lt;p&gt;This course covers Google Analytics primarily for measuring website traffic. To learn about new capabilities that bring app and web analytics together, visit Analytics Help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.answerswami.com/google-analytics-for-beginners-assessment-answers-2021-pdf-file/#Google%20Analytics%20For%20Beginners%20Assessment%201%20Answers" rel="dofollow"&gt; &lt;strong&gt;Unit 1: Introducing Google Analytics&lt;/strong&gt; &lt;/a&gt;&lt;br&gt;
Lesson 1: Why digital analytics?&lt;br&gt;
Lesson 2: How Google Analytics works&lt;br&gt;
Lesson 3: Google Analytics setup&lt;br&gt;
Lesson 4: How to set up views with filters&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.answerswami.com/google-analytics-for-beginners-assessment-answers-2021-pdf-file/#Google%20Analytics%20For%20Beginners%20Assessment%202%20Answers" rel="dofollow"&gt; &lt;strong&gt;Unit 2: The Google Analytics Interface&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lesson 1: Navigating Google Analytics&lt;br&gt;
Lesson 2: Understanding overview reports&lt;br&gt;
Lesson 3: Understanding full reports&lt;br&gt;
Lesson 4: How to share reports&lt;br&gt;
Lesson 5: How to set up dashboards and shortcuts&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.answerswami.com/google-analytics-for-beginners-assessment-answers-2021-pdf-file/#Google%20Analytics%20For%20Beginners%20Assessment%202%20Answers" rel="dofollow"&gt; &lt;strong&gt;Unit 3: Basic Reports&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lesson 1: Audience reports&lt;br&gt;
Lesson 2: Acquisition reports&lt;br&gt;
Lesson 3: Behavior reports&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.answerswami.com/google-analytics-for-beginners-assessment-answers-2021-pdf-file/#Google%20Analytics%20For%20Beginners%20Assessment%202%20Answers" rel="dofollow"&gt; &lt;strong&gt;Unit 4: Basic Campaign and Conversion Tracking&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lesson 1: How to measure Custom Campaigns&lt;br&gt;
Lesson 2: Tracking campaigns with the URL Builder&lt;br&gt;
Lesson 3: Use Goals to measure business objectives&lt;br&gt;
Lesson 4: How to measure Google Ads campaigns&lt;br&gt;
Lesson 5: Course review and next steps&lt;/p&gt;

&lt;p&gt;Source:&lt;a href="https://www.answerswami.com/google-analytics-for-beginners-assessment-answers-2021-pdf-file/" rel="dofollow"&gt; &lt;strong&gt;Google Analytics for Beginners&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>googlecloud</category>
      <category>cloudskills</category>
      <category>analyst</category>
    </item>
    <item>
      <title>How to load the correct data on the server-side with React and Redux</title>
      <author>Wessel Kroos</author>
      <pubDate>Mon, 31 May 2021 10:08:12 +0000</pubDate>
      <link>https://dev.to/truelime/how-to-load-the-correct-data-on-the-server-side-with-react-and-redux-3ak0</link>
      <guid>https://dev.to/truelime/how-to-load-the-correct-data-on-the-server-side-with-react-and-redux-3ak0</guid>
      <description>&lt;p&gt;The moment you dip your toes in the world of server-side rendering things can get complicated quickly. Especially in large applications which contain a lot of nested components and api calls, and each of them called and rendered in the browser only when it’s required. We sure want to preload the data that’s required to show you the header on this website. But do I always need to preload the data that’s on our homepage? You might have found this blog post on Google.com and may never visit our homepage or all our other blogposts today. And what about a nested component in this article, under which conditions do we preload it’s data? Let’s answer those questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-project-setup"&gt;
  &lt;/a&gt;
  Initial project setup
&lt;/h3&gt;

&lt;p&gt;While tackling this problem we are going to use the &lt;a href="https://expressjs.com/"&gt;express package&lt;/a&gt; as our webserver and use &lt;a href="https://reactjs.org/docs/react-dom-server.html#rendertostring"&gt;React’s renderToString()&lt;/a&gt; method to render all the components on the server-side.&lt;/p&gt;

server.js: Fetch the data and render the webpage.






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RenderServerside&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass the entire state to the client-side via a script tag in the html document by using the serialize() function in the &lt;a href="https://github.com/yahoo/serialize-javascript"&gt;serialize-javascript package&lt;/a&gt;. (This javascript parser allows us to parse more object types like a Date so I would recommend to use that package instead of the JSON.stringify() function.) On the client-side we can now read the window.initialState object and parse it to the Redux store.&lt;/p&gt;

render.js: Serialize the initial state and parse it through the window.initialState object in the script tag to our clients.






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;${initialRender || ''}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"${paths.script}"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

Server-side rendering in React step-by-step






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJU_maas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8uvqlsizgzxnhd2goro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJU_maas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8uvqlsizgzxnhd2goro.png" alt="A schematic of the server-side rendering flow in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these steps we can preload and parse the state to the client. But what do we need to preload for this page?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-break-the-complexity-down-to-a-few-challenges"&gt;
  &lt;/a&gt;
  Let’s break the complexity down to a few challenges
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Currently we execute only one fetch before we start rendering the page on the server-side, but we also have multiple nested components on our website. This expands the code in this file with multiple if statements to decide which data we need to fetch. This will make the code unmaintainable, therefore we are better off when we let the components decide that for themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Without server-side rendering you &lt;a href="https://reactjs.org/docs/faq-ajax.html"&gt;fetch data on the client-side in the componentDidMount()&lt;/a&gt; method. With server-side rendering you use renderToString() to render the components. But the renderToString() method does not attach the rendered components to the &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;DOM&lt;/a&gt;, so the componentDidMount() method is never called on the server-side. We need another way to make the code in the componentDidMount() method available to the server-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might have a nested component which depends on data from a parent component. How do we wait for responses in our parent component and parse the data to our child components?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#breaking-down-the-complexity-into-components"&gt;
  &lt;/a&gt;
  Breaking down the complexity into components
&lt;/h3&gt;

&lt;p&gt;A perfect place to decide which data we need and fetch the data on the client-side is the componentDidMount() method. This way we can start fetching right away when the component has been mounted or skip fetching if the data is already available in the store.&lt;/p&gt;

Fetching data in the componentDidMount method






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we copy this logic to the server-side we duplicate logic into two separate parts of the application. The component and the server-side renderer function. Even more problematic, we bundle logic from all components into one function and make on file unnecessarily complex. Every component has its own set of rules whether to render a child component, so this function will grow immensely in the future. It’s almost impossible for a developer to determine in that single function what data is required in all our nested components and maintain it in the future. And when a new developer joins the team there’s a big chance he or she will probably edit a component but forget to update our decision tree on the server-side as well. We don’t want that to happen. So let’s tackle challenge number 1 and move this complexity away from the server.js file into the components itself by keeping this logic in the componentDidMount() method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are just two problems:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The didComponentMount() method is never called when we use React’s renderToString() function. So we need to call the didComponentMount() method from the server-side ourselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to call this method before we execute renderToString() because the renderToString() function needs a store with prefetched data. Since we have no constructed React components in this stage we need to make the method in our React components static.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let’s tackle challenge number 2 and make this method available from the server-side. We do this by moving the code into a new static method called preInitStore(). This way we can execute it with the code App.preInitStore() from the server-side.&lt;/p&gt;

Our new preInitStore() method






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#resolving-the-restrictions-of-a-static-method"&gt;
  &lt;/a&gt;
  Resolving the restrictions of a static method
&lt;/h3&gt;

&lt;p&gt;We can now call the App.preInitStore() method before executing renderToString(). But since the preInitStore() method is static we also have no reference to the App component in the this property and thus cannot call the this.props.fetchGeneral() method. Luckily there is a way to dispatch an action from the store object with the store.dispatch() method. So we need to parse the store from the server-side into the preInitStore() method as a parameter:&lt;/p&gt;

Passing the store to the App component






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;renderedString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;renderToString&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…now we can execute it in our preInitStore() method:&lt;/p&gt;

Dispatching the fetchGeneral action creator ourself in the static preInitStore() method






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a method that we can call from the server-side while all the logic resides in the component itself.&lt;br&gt;
(Note: Because we now have a static method in our component we can also share other static methods between the server-side and client-side code inside the component.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-wait-for-a-response"&gt;
  &lt;/a&gt;
  Let’s wait for a response
&lt;/h3&gt;

&lt;p&gt;An important part of our solution is still missing. Since the fetch calls in our actions are promises the browser needs to wait for those promises to be resolved before we can execute the renderToString() method. A way we can facilitate that is by awaiting those promises in our preInitStore() method and also in the action creators.&lt;/p&gt;

Awaiting the fetch in the action creator






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchGeneral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/assets/api/general.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

Awaiting the fetch in the preInitStore() method








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this modification the caller of the App.preInitStore() method can wait untill the data is received from the API and saved into the store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;Read more about async, await and promises in Javascript from the Mozilla documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tackling-all-our-challenges"&gt;
  &lt;/a&gt;
  Tackling all our challenges!
&lt;/h3&gt;

&lt;p&gt;And now it’s time combine the pieces of the puzzle so we can tackle challenge number 3! When we await all dispatch() methods in child components as well the App component can now await the preInitStore() method in child components.&lt;/p&gt;

Waiting for fetches in child components by using the await keyword






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchGeneral&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since we await the fetchGeneral() action in the App component before we execute the preInitStore() method of child components we tackled challenge number 3 as well! Because child components can get that data by using the store.getState() method.&lt;/p&gt;

Getting the new state from the store after the parent component fetched and saved its data in the store.






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Routing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchRoutingData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Tip: The App’s preInitStore() method is now in charge of calling preInitStore() methods of child components. So in case of react-router this would be an ideal location to decide which component to initialize by checking the URL from the express webserver. See the full GitHub project for an example.)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-one-more-optimization-awaits"&gt;
  &lt;/a&gt;
  Just one more optimization awaits!
&lt;/h3&gt;

&lt;p&gt;We have now moved server-side code into components. But the preInitStore() method is never used on the client-side. We can optimize this so that we can spare some bytes for our visitors by using the &lt;a href="http://github.com/jballant/webpack-strip-block"&gt;webpack-strip-block webpack plugin&lt;/a&gt;. Let’s configure this plugin in a way that it removes any code marked as SERVERSIDE-ONLY so that it’s stripped away from our final client bundle.&lt;/p&gt;

Install webpack-strip-block






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev webpack-strip-block
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

And add webpack-strip-block to our webpack.config.js








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/.js&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack-strip-block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SERVERSIDE-ONLY:START&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SERVERSIDE-ONLY:END&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}]&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can exclude our preInitStore() methods from the client bundle by adding 2 comments:&lt;/p&gt;

Excluding serverside code from the client bundle






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* SERVERSIDE-ONLY:START */&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;preInitStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="cm"&gt;/* SERVERSIDE-ONLY:END */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We were able to reduce the complexity of our server-side rendering function and make our code maintainable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By splitting server-side state fetching logic back into the components.&lt;/li&gt;
&lt;li&gt;By adding the static async preInitStore() method and make it available from the server.&lt;/li&gt;
&lt;li&gt;And by using async / await in the preInitStore() method and actions. So that we can wait for API responses and use the data that has been fetched by a parent component in the child components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope I was able to make your server-side rendered websites more maintainable. If you have questions or want to try it for yourself you can take a look at the complete solution on GitHub via the link below. There is a react-router example in it as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/WesselKroos/blogpost-example-react-ssr"&gt;https://github.com/WesselKroos/blogpost-example-react-ssr&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ssr</category>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Node.js `util` module</title>
      <author>Siddharth</author>
      <pubDate>Mon, 31 May 2021 10:07:26 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/the-node-js-util-module-3nbd</link>
      <guid>https://dev.to/siddharthshyniben/the-node-js-util-module-3nbd</guid>
      <description>&lt;p&gt;There are &lt;a href="https://www.w3schools.com/nodejs/ref_modules.asp"&gt;&lt;strong&gt;a lot&lt;/strong&gt;&lt;/a&gt; of builtin modules in Node.js. Most of us only use a few of them (I'm pretty sure the &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;fs&lt;/code&gt;, and the server related modules are the most used ones). &lt;/p&gt;

&lt;p&gt;But one of the more overlooked modules is the &lt;a href="https://nodejs.org/api/util.html"&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; module. Here, I'm going to show you some of the helpful functions from this module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-utilcallbackifyoriginal-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_callbackify_original"&gt;&lt;code&gt;util.callbackify(original)&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I don't think I will use this a lot because I love promises, but I think some people might love this.&lt;/p&gt;

&lt;p&gt;Just like it's name, it basically "Takes an &lt;code&gt;async&lt;/code&gt; function (or a function that returns a &lt;code&gt;Promise&lt;/code&gt;) and returns a function following the error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callbackify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-utilpromisifyoriginal-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_promisify_original"&gt;&lt;code&gt;util.promisify(original)&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I love this method. No more callback functions and more promises!&lt;/p&gt;

&lt;p&gt;Just like it's name, it basically "Takes a function following the common error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument, and returns a version that returns promises."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with `stats`&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Houston, we have a problem&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-utildeprecatefn-msg-code-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_deprecate_fn_msg_code"&gt;&lt;code&gt;util.deprecate(fn, msg[, code])&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Basically, this function takes in a deprecated function and a deprecation message (and an optional deprecation code) and it returns a new function (which is basically the same as the original function). However, whenever the function returned is called, it will emit a &lt;code&gt;DeprecationWarning&lt;/code&gt; (which will basically be logged to the console). You may have seen this before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obsoleteFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deprecate&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something here.&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;obsoleteFunction() is deprecated. Use newShinyFunction() instead.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-utilinspectobject-options-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_inspect_object_options"&gt;&lt;code&gt;util.inspect(object[, options])&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This function logs an object to the console, but instead of directly logging it, it applies some transformations to the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; { foo: '{}', bar: { baz: undefined } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you may think it is just an equivalent of &lt;code&gt;console.log(JSON.stringify(obj))&lt;/code&gt;, but there is a lot more functionality available using the options object. Some of the more useful options are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;depth&lt;/code&gt; (number): useful when you have a deep nested structure and want to limit the number of recursions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;colors&lt;/code&gt; (boolean): whether to add syntax highlighting to the output&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;compact&lt;/code&gt; (boolean): whether to show the output in a compact manner (defaults to true). Setting to false will break each property to a newline.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-utilisdeepstrictequalval1-val2-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2"&gt;&lt;code&gt;util.isDeepStrictEqual(val1, val2)&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Think of it like the &lt;code&gt;toBe&lt;/code&gt; Jest matcher — it uses &lt;code&gt;Object.is()&lt;/code&gt; on primitives and compares objects checking their keys recursively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDeepStrictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;somThingElse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;somThingElse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-utiltypes-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/api/util.html#util_util_types"&gt;&lt;code&gt;util.types&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It's basically a type checker — you have functions like &lt;code&gt;util.types.isAsyncFunction(value)&lt;/code&gt;, &lt;code&gt;util.types.isPromise(value)&lt;/code&gt;, &lt;code&gt;util.types.isGeneratorFunction(value)&lt;/code&gt;, &lt;code&gt;util.types.isDate(value)&lt;/code&gt;, and even some crazy ones like &lt;code&gt;util.types.isArgumentsObject(value)&lt;/code&gt;, &lt;code&gt;util.types.isCryptoKey(value)&lt;/code&gt;, &lt;code&gt;util.types.isBooleanObject(value)&lt;/code&gt;, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-lot-more"&gt;
  &lt;/a&gt;
  A lot more!
&lt;/h2&gt;

&lt;p&gt;I only chose the ones which seemed like they could be used by almost anyone, but there is a lot more. Debug logs, &lt;code&gt;printf&lt;/code&gt; like string formatting, Text Decoding and Encoding, and more. You should totally check it out &lt;a href="https://nodejs.org/api/util.html"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>util</category>
    </item>
    <item>
      <title>Scheduling API for Travel Management</title>
      <author>Spurwing</author>
      <pubDate>Mon, 31 May 2021 09:48:40 +0000</pubDate>
      <link>https://dev.to/spurwing/scheduling-api-for-travel-management-36j7</link>
      <guid>https://dev.to/spurwing/scheduling-api-for-travel-management-36j7</guid>
      <description>&lt;p&gt;If you’re an entrepreneur or future small business owner, you’ve got a lot of tasks on your hands that need to be handled accordingly. &lt;strong&gt;Time management&lt;/strong&gt; is one of the key aspects of building a successful brand. Even the most prominent companies out there rely heavily on APIs to get the job done behind the scenes both effectively and efficiently.  &lt;/p&gt;

&lt;p&gt;But what about travel management? If you’re not using an API to manage all your travel arrangements, you’re missing out big time! &lt;br&gt;
When you implement a travel management solution into your business strategy, everything runs smoothly, and you are bound to score all the best deals on travel worldwide without having to use another service to handle all the arrangements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jI8IPraW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wkjff5skbzxj9uo4hzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jI8IPraW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wkjff5skbzxj9uo4hzw.png" alt="travel management api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-travel-management"&gt;
  &lt;/a&gt;
  What Is Travel Management?
&lt;/h2&gt;

&lt;p&gt;You could look at Travel Management as a type of control panel for meshing different software components together without writing any of the code. It operates by using various web services to access tons of travel data from other entities. &lt;/p&gt;

&lt;p&gt;Building Travel Management Systems on top of a &lt;strong&gt;Scheduling API&lt;/strong&gt; is the only way to get all the best travel deals online and manage your bottom line simultaneously. This type of tool is streamlined to cover all aspects of business travel management with one simple to use platform. &lt;/p&gt;

&lt;p&gt;Scheduling APIs can easily retrieve and process all your travel data, such as hotel, car rentals, flight costs to all your destinations, and the availability on the market by allowing third-party resources to gain access to this type of information. &lt;br&gt;
With a Travel Management System you can lock in some of the best travel deals available without relying on another service or agent. You’ll be able to get the best competitive rates even on last minute travel plans. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AsCSK1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrz54vvs7ml284huggou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AsCSK1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrz54vvs7ml284huggou.png" alt="travel system scheduling api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In fact, every travel agency out there is using an API to find the lowest prices for their customers. However, those same agencies are adding fees on top of those special prices. Once you implement a Travel Management API, you are in the driver’s seat. &lt;/p&gt;

&lt;p&gt;You can seamlessly integrate with some of the biggest companies in the travel industry, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Booking.com&lt;/li&gt;
&lt;li&gt;Expedia&lt;/li&gt;
&lt;li&gt;AxisRooms &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you are connected to one of these platforms, you’ll be able to access inventories and manage all your bookings and cancellations effortlessly! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LrsXx5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vi960qcthp9ql35c1cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LrsXx5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vi960qcthp9ql35c1cs.png" alt="travel management system api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-best-travel-management-system"&gt;
  &lt;/a&gt;
  Choosing the Best Travel Management System
&lt;/h2&gt;

&lt;p&gt;There are a lot of companies out there that offer &lt;strong&gt;travel management systems&lt;/strong&gt;; however, not all of them are built the same way and provide the same level of services. You’re going to need an API provider that goes above and beyond its competitors.&lt;br&gt;&lt;br&gt;
Companies like Spurwing provide tech solutions for your business, our Scheduling API allows you to build a fully customized Travel Management System that fits your exact needs. We assist many businesses with their launches and remain a crucial component in their overall success. &lt;/p&gt;

&lt;p&gt;Using a service like &lt;strong&gt;Spurwing’s Scheduling API&lt;/strong&gt; to build custom Corporate Travel Management Solutions where people can share the latest information, add necessary details to calendar events, and get everyone's calendar connected is crucial in today's fast-paced market. &lt;/p&gt;

&lt;p&gt;We suggest scheduling a demo with whatever company you are interested in and see how it all works. Most services will be able to answer all your questions and provide you with proven solutions for all your business needs. Join thousands of businesses that have adopted Spurwing and &lt;a href="https://www.spurwing.io/learn-more"&gt;schedule a 30-minute intro call with one of our developers today&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Continue reading about Spurwing - &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-API"&gt;https://github.com/Spurwing/Appointment-Scheduling-API&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>productivity</category>
      <category>management</category>
    </item>
  </channel>
</rss>
