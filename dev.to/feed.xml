<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Make one resolution this year. Never write your own Authentication</title>
      <author>Jordan Finneran</author>
      <pubDate>Thu, 07 Jan 2021 16:49:23 +0000</pubDate>
      <link>https://dev.to/jordanfinners/make-one-resolution-this-year-never-write-your-own-authentication-3nc1</link>
      <guid>https://dev.to/jordanfinners/make-one-resolution-this-year-never-write-your-own-authentication-3nc1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#options"&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I've seen a few blogs recently and tweets talking about authentication and handling passwords, it got me thinking...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7aD3BJA8vIGVaMw0/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7aD3BJA8vIGVaMw0/source.gif" alt="NOOOO"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm going to start by caveating.&lt;br&gt;
I'm all for learning how authentication works, if you're anything like me, I learn best by doing, so I've played around with authentication locally. But don't roll it out to production.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Authentication is often the linchpin in the security of your application.&lt;br&gt;
If we've seen anything over the last few years that data breaches of applications are only increasing, so application security has to be top of the priorities.&lt;br&gt;
There is plenty to think about too about securing your application even before you get to your authentication system.&lt;/p&gt;

&lt;p&gt;Thinking about writing your own authentication?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-cookies" class="anchor"&gt;
  &lt;/a&gt;
  What about cookies?
&lt;/h3&gt;

&lt;p&gt;Cookies are plaintext, so you don't want to put anything secret in there and visible to anyone using the computer.&lt;br&gt;
Is it using the Path argument to limit the cookie to your application?&lt;br&gt;
Is it shared over subdomains?&lt;br&gt;
It is Secure and only available over HTTPS connections?&lt;br&gt;
What about Cross Site Scripting (XSS) attacks?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-storage" class="anchor"&gt;
  &lt;/a&gt;
  Browser Storage
&lt;/h3&gt;

&lt;p&gt;Okay so you've dealt with cookies. &lt;br&gt;
But maybe your storing data in browser storage - please never store anything sensitive or personal identifiable information (PII) in browser storage - have you ensured this is as secure as possible? e.g. using session storage rather than local.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rate-limits" class="anchor"&gt;
  &lt;/a&gt;
  Rate Limits
&lt;/h3&gt;

&lt;p&gt;What about limiting the number of requests? So that someone could not keep trying lots of different passwords.&lt;br&gt;
How are you going to implement rate limiting? IP based; cookie based etc.&lt;br&gt;
Do you lock out specific IP addresses after X attempts?&lt;br&gt;
What about valid users who get locked?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#password-security" class="anchor"&gt;
  &lt;/a&gt;
  Password Security
&lt;/h3&gt;

&lt;p&gt;Now let's talk about passwords. Are you going to set password requirements? If so, what are you going to make them?&lt;br&gt;
Are you going to check if that password has been compromised using &lt;a href="https://haveibeenpwned.com/"&gt;https://haveibeenpwned.com/&lt;/a&gt; for example?&lt;br&gt;
How are you storing the passwords? What happens if someone puts in a really long one, say generated by a password manager, is it going to get truncated? (I've seen this happen many times)&lt;br&gt;
How are you hashing and salting the passwords? &lt;br&gt;
Please Please never keep passwords in plaintext.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-security" class="anchor"&gt;
  &lt;/a&gt;
  Database security
&lt;/h3&gt;

&lt;p&gt;So, you're storing them in a database somewhere. &lt;br&gt;
How are you protecting that database to ensure its not breached?&lt;br&gt;
If the database does get breached how are you limiting that to as few records as possible?&lt;br&gt;
What about the network security around the database?&lt;/p&gt;

&lt;p&gt;The list goes on, and on and on and on...&lt;br&gt;
&lt;a href="https://i.giphy.com/media/j2wpZyLy2s70ul4TKo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/j2wpZyLy2s70ul4TKo/giphy.gif" alt="The list goes on, and on and on and on..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;So, you're thinking alright, you've made your point, so what options do I have.&lt;/p&gt;

&lt;p&gt;Well, fortunately you are in luck! There are now plenty of IDaaS (Identity as a Service) offerings.&lt;br&gt;
They often have great free tiers, for example Azure B2C has 50,000 Monthly Active Users...FREE!&lt;/p&gt;

&lt;p&gt;As with anything you need to find the best for your use case so I'll list a few below for you to check out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://auth0.com/#!"&gt;Auth0&lt;/a&gt;&lt;br&gt;
&lt;a href="https://azure.microsoft.com/en-gb/services/active-directory/"&gt;Azure AD&lt;/a&gt; &lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-gb/azure/active-directory-b2c/overview"&gt;Azure B2C - Business To Customer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/cognito/"&gt;AWS Cognito&lt;/a&gt;&lt;br&gt;
&lt;a href="https://firebase.google.com/docs/auth/"&gt;Firebase Authentication&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.onelogin.com/"&gt;OneLogin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://magic.link/"&gt;Magic&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twilio.com/authy"&gt;Twilio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These companies have &lt;em&gt;literal&lt;/em&gt; teams of people working to ensure that their authentication is secure and it's their business to make sure it is!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In summary, authentication is hard! There is a lot to think about, my list here only scratches the surface and some of it you will still need to consider e.g. general database security.&lt;br&gt;
But there are plenty of authentication providers you can use, even for free!&lt;/p&gt;

&lt;p&gt;Stick to what adds value to your application/business! Leave the authentication to the companies whose job it is :D &lt;/p&gt;

&lt;p&gt;Let me know your favourite authentication providers below!&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@mr_williams_photography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Micah Williams&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/login?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>beginners</category>
      <category>authentication</category>
    </item>
    <item>
      <title>Why I let strangers control my lights and why you should too</title>
      <author>nobody5050</author>
      <pubDate>Thu, 07 Jan 2021 15:04:38 +0000</pubDate>
      <link>https://dev.to/nobody5050/why-i-let-strangers-control-my-lights-and-why-you-should-too-3kg0</link>
      <guid>https://dev.to/nobody5050/why-i-let-strangers-control-my-lights-and-why-you-should-too-3kg0</guid>
      <description>&lt;p&gt;The title photo features the website I built to let strangers annoy me. The website includes text to speech, YouTube audio playing, and even control of my lights. But why did I make it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-make-it" class="anchor"&gt;
  &lt;/a&gt;
  Why did I make it?
&lt;/h2&gt;

&lt;p&gt;Well like many projects, this one was started over pure boredom from being on a break from school.&lt;/p&gt;

&lt;p&gt;I’d had the idea for a while to try and replicate the tts setup twitch streamers use sometimes, but I wanted something unique, so I also added light controls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-thats-great-and-all-but-how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  Ok, that’s great and all, but how does it work?
&lt;/h2&gt;

&lt;p&gt;The project actually has two parts, the tts part and the light control part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-how-do-the-lights-work" class="anchor"&gt;
  &lt;/a&gt;
  first, how do the lights work?
&lt;/h3&gt;

&lt;p&gt;The light controls are incredibly simple, I use LIFX http api to toggle the lights. &lt;/p&gt;

&lt;p&gt;Below is a simple fetch api request to toggle some lights using default parameters, just replace YOUR-APP-TOKEN with the token lifx gives you.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#so-how-does-the-text-to-speech-work" class="anchor"&gt;
  &lt;/a&gt;
  So how does the text to speech work?
&lt;/h3&gt;

&lt;p&gt;This is where the project gets considerably more complex. Fist up, discord webhooks.&lt;/p&gt;

&lt;p&gt;When I was building the project I needed a way to store messages in a log, so I could read them if I’d been away from my loudspeaker or if it had turned off for some reason. The best one I can come up with is a discord webhook, it’s great because it acts as an intermediary between the site and my servers, as well as being completely free.&lt;/p&gt;

&lt;p&gt;So how do you connect with it?&lt;/p&gt;

&lt;p&gt;Below is the actual code I use for handling discord messages, including my webhook url&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I opted to use xmlhttprequest here, since I’m more familiar with it, but you could use fetch as well.&lt;/p&gt;

&lt;p&gt;The basic concept is this, it takes in text from a textbox element when the function sendMessage is called, then it sends that test as a request to whatever webhook url you specify. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-up-on-the-train-discord-bots" class="anchor"&gt;
  &lt;/a&gt;
  Next up on the train, discord bots!
&lt;/h3&gt;

&lt;p&gt;For handling the text to speech I use a python discord bot and the &lt;a href="https://pypi.org/project/pyttsx3/"&gt;pyttsx3 library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won’t show the code for this since it’s ugly and I don’t want people replicating it, but basically it watches for new messages in a discord channel, and then plays their contents through the pyttsx3 library using default parameters. I also run all requests through the &lt;a href="https://pypi.org/project/googletrans/"&gt;googletrans python library&lt;/a&gt; to ensure that I hear all messages in my native tongue. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-why-should-you-make-it-yourself" class="anchor"&gt;
  &lt;/a&gt;
  So why should you make it yourself?
&lt;/h2&gt;

&lt;p&gt;Well I’ve been asked a fair bit by the people on my subreddit &lt;a href="https://reddit.com/r/theannoyingmachine"&gt;r/theannoyingmachine&lt;/a&gt; why I would build this, all I can say is that it’s more fun than it seems like! &lt;/p&gt;

&lt;p&gt;If you’re interest in learning about api’s, webdevelopment, and python all in one project, you should do this one!&lt;/p&gt;

&lt;p&gt;Thanks for reading my post!&lt;/p&gt;

&lt;p&gt;The website featured in the post is &lt;a href="https://sixty502.me/annoy"&gt;https://sixty502.me/annoy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Upgrade My Blog From Plain HTML to "Well-Designed" In 2 Weeks. I Suck.</title>
      <author>Minh-Phuc Tran</author>
      <pubDate>Thu, 07 Jan 2021 14:12:48 +0000</pubDate>
      <link>https://dev.to/phuctm97/upgrade-my-blog-from-plain-html-to-well-designed-in-2-weeks-i-suck-29gc</link>
      <guid>https://dev.to/phuctm97/upgrade-my-blog-from-plain-html-to-well-designed-in-2-weeks-i-suck-29gc</guid>
      <description>&lt;p&gt;About 3 weeks ago, I started &lt;a href="https://phuctm97.com/blog/hello-world-start-blog-in-html"&gt;my blog in plain HTML&lt;/a&gt;, then gradually tried to make it look better and more modern-ish. It has been 2 weeks so far and I've never liked how my website looked only until today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://phuctm97.com"&gt;Checkout my website&lt;/a&gt; if you want to see how it looks first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-weeks-was-too-long" class="anchor"&gt;
  &lt;/a&gt;
  2 weeks was too long...
&lt;/h2&gt;

&lt;p&gt;2 weeks ago, if anyone said to me that it's going to take 2 weeks to make a blog look good, I'd definitely say back &lt;em&gt;"It's way too long man, it shouldn't take that long!"&lt;/em&gt;. And yeah, it took me 2 weeks and I've been saying that to myself every single day in the last 2 weeks. It didn't feel good at all, it felt like years.&lt;/p&gt;

&lt;p&gt;So what's wrong?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-always-looks-better-in-my-imagination" class="anchor"&gt;
  &lt;/a&gt;
  It always "looks" better in my imagination
&lt;/h2&gt;

&lt;p&gt;When I first talked to myself that I'm going to make my website look better, I &lt;strong&gt;could immediately have an imagination&lt;/strong&gt; inside my head about how it were going to look amazing and how easy it were to implement it - just put some CSS and that's it.&lt;/p&gt;

&lt;p&gt;The problem with my imagination was that things looked good because I believed they were gonna look good, not because every single detail in it actually looked good. There were no detail in my imagination, literally zero detail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Try this yourself, remember the last time that you imagined you were going to make something beautiful, try to go into details of that "beautiful" thingy and see if you know what every single detail really looked like)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I started to sit down and write some code, I had to face the details that never existed in my mind. There was no surprise, I had no idea how each element should look, &lt;em&gt;especially when sitting next to each other&lt;/em&gt;. I ended up just trying lots of different combinations and they all just looked bad!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-for-inspiration" class="anchor"&gt;
  &lt;/a&gt;
  Looking for inspiration
&lt;/h2&gt;

&lt;p&gt;Being stuck and feeling like I'm the worst developer in the world, I decided to look for some inspiration and then maybe just copy-paste to save my life.&lt;/p&gt;

&lt;p&gt;Then, I realized that my imagination was really just the style of how I want my website to look. I ended up with the following list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.taniarascia.com"&gt;Tanica Rascia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leerob.io"&gt;Lee Robinson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These websites roughly describe my imagination.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-trap-of-inspiration" class="anchor"&gt;
  &lt;/a&gt;
  The trap of inspiration
&lt;/h2&gt;

&lt;p&gt;Having an inspiration helped to sharpen the details of my imagination, like a button, a paragraph, a title, or a form.&lt;/p&gt;

&lt;p&gt;I thought that I were going to make it this time but I fell into another trap:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don't want my website to look exactly the same as any of these websites, but&lt;br&gt;
it should look similar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I put pieces from this and pieces from that into my website, and guess what, my website became a mess.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;F*ck! It was all because of these websites, I shouldn't use in the first place, I should have come up with my design system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(LoL, I'm laughing at myself writing this now, my thinking process was just so weird)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-way-out" class="anchor"&gt;
  &lt;/a&gt;
  A way out
&lt;/h2&gt;

&lt;p&gt;You may have thought that I was just kidding about dropping the inspiration sites, but I actually did it. However, I didn't start any design system, it was just an overkill doing so, and you've probably realized that there's no way I could build a design system myself now.&lt;/p&gt;

&lt;p&gt;What I did was just to think about my website's design systematically. What it means is to start with the layout first, what sections my site should have, then&lt;br&gt;
what content each section should display, and why. Then for each section, I implement it separately, if a section is too big, I break it down into multiple elements again and repeat the same process. The key point of this method is to not allow you to overthink about the details, just imagine the site as a set of black boxes and your design job is to put these black boxes together, you'll go into each box later. Once you've done, you don't go back.&lt;/p&gt;

&lt;p&gt;Alright, that's it, there are more specific knowledge into building the actual site, but it was late now and I wanted to focus on the design part in this article. Hope you enjoy the story and learn something from it!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>40 "Free Forever" Tools for Developers</title>
      <author>hrishikesh1990</author>
      <pubDate>Thu, 07 Jan 2021 12:31:03 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/40-free-forever-tools-for-developers-4gdm</link>
      <guid>https://dev.to/hrishikesh1990/40-free-forever-tools-for-developers-4gdm</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;I am Hrishikesh, co-founder of &lt;a href="https://flexiple.com"&gt;Flexiple&lt;/a&gt;, an exclusive freelance network for developers &amp;amp; designers.&lt;/p&gt;

&lt;p&gt;I am forever on the lookout for great tools that help me get work done better &amp;amp; easier and I regularly feature them on &lt;a href="https://remote.tools"&gt;remote.tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here, I am sharing the list of my go-to "Free forever" tools.&lt;/p&gt;

&lt;p&gt;For easier reading, I've categorised them based on their primary function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#bonus-tools"&gt;Bonus Tools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#bug-tracking"&gt;Bug Tracking&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#file-hosting"&gt;File Hosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#productivity"&gt;Productivity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#code-collaboration"&gt;Code Collaboration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#product-management"&gt;Product Management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#project-management"&gt;Project Management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#design-collaboration"&gt;Design Collaboration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#team-chat"&gt;Team chat&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#document-collaboration"&gt;Document Collaboration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#remote-whiteboard"&gt;Remote Whiteboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#standups"&gt;Standups&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#time-tracking"&gt;Time Tracking&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#virtual-office"&gt;Virtual Office&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tools" class="anchor"&gt;
  &lt;/a&gt;
  Bonus Tools &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#freebiesbypeople" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://freebies.bypeople.com/"&gt;Freebies.ByPeople&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGB51rFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1jbfy3n0dzmldtn8tzr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGB51rFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1jbfy3n0dzmldtn8tzr.JPG" alt="freebies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Freebies.bypeople is a professionally-curated repository of the best free-for-commercial use resources for developers and designers. It includes icons, fonts, plugins, UI kits, web templates, web tools &amp;amp; much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lunchclub" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://lunchclub.ai/"&gt;Lunchclub&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8H5YjtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zxi8zc5fcwi3p8ojk15.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8H5YjtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3zxi8zc5fcwi3p8ojk15.JPG" alt="lunchclub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lunchclub aims to make remote networking easier. You can register on the site with your background, interests, and goals, and each week, the AI-based tool directly matches you with relevant people for 1:1 conversations&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cafecito" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://meetcafecito.com"&gt;Cafecito&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9-Fa0bU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1qbk2ve0fs4yn1mu2bqk.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9-Fa0bU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1qbk2ve0fs4yn1mu2bqk.JPG" alt="cafecito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cafecito is great for connecting with other people who share similar interests. Its algorithm matches you with vetted creatives to have "coffee break"-style conversations with them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reslash" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://reslash.co"&gt;Reslash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKns-pic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8z6tj8e96ibmfuy73rx2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKns-pic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8z6tj8e96ibmfuy73rx2.JPG" alt="reslash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reslash is a video communication tool that aims to make team conversations realistic and fun. Team members can hangout in a single virtual space, where if you move closer to someone, you can hear them, and as you move away, they fade away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-tracking" class="anchor"&gt;
  &lt;/a&gt;
  Bug Tracking &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#linear" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://linear.app/"&gt;Linear&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3U-RqcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hhuiliycs9qzqwbwh64r.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3U-RqcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hhuiliycs9qzqwbwh64r.JPG" alt="linear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linear is an issue tracking tool that allows seamless collaboration between developers, designers, and peers. It helps streamline software projects, sprints, tasks, and bug tracking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zoho-bug-tracker" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.zoho.com/bugtracker"&gt;Zoho Bug Tracker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCYNQ9AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cjgkzvp8k54wxsrqr107.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCYNQ9AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cjgkzvp8k54wxsrqr107.JPG" alt="zoho"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zoho Bug Tracker is a simple, fast and scalable bug tracking application that offers a nifty set of features &amp;amp; dashboards with a high level of customisability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-hosting" class="anchor"&gt;
  &lt;/a&gt;
  File Hosting &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#blackhole" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://blackhole.run/"&gt;BlackHole&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aofIkZ8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/625xqkzrxpl73wcfchv3.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aofIkZ8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/625xqkzrxpl73wcfchv3.JPG" alt="blackhole"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BlackHole is secure, server-less file transfer that works on blockchain. It's open-source, and is available for Windows and Mac. It offers a simple UI, data streaming, and transfer compression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productivity" class="anchor"&gt;
  &lt;/a&gt;
  Productivity &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#codermirror" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codermirror.com/"&gt;CoderMirror&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xirixHfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/salppzvrr8mz6npapli7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xirixHfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/salppzvrr8mz6npapli7.JPG" alt="codermirror"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CoderMirror integrates with your JetBrains IDEs to allow you to track, analyse, and create reports of your coding activity. It collects detailed data on your activity and enables you to perform personal retrospectives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metro-retro" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metroretro.io/"&gt;Metro Retro&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7it8IMUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/exg74g0ipfn7vlho1qqu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7it8IMUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/exg74g0ipfn7vlho1qqu.JPG" alt="metroretro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metro Retro is a web application that helps teams run engaging and fun retrospectives. It uses real-time updates, and a quirky sense of humor to help teams manage their retros. It also offers a wide set of templates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#friday" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.friday.app/"&gt;Friday&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-4hLAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfumojvptqshev8wg1gp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-4hLAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfumojvptqshev8wg1gp.JPG" alt="friday"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Friday is a tool that can be used as a compliment to your team's Slack. It allows you to better organise and comprehend team chats and automate routine tasks. It is aimed at teams who want to efficiently run recurring communication like one-on-one conversations or standups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  Code Collaboration &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#coscreen" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.coscreen.co/"&gt;CoScreen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ih6i9Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bmdonv1jx24klw8glocx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ih6i9Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bmdonv1jx24klw8glocx.JPG" alt="coscreen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CoScreen allows you to turn your secondary display into your "team desktop" via a single drag-and-drop interface. Peers can share their windows on the same desktop in real-time, and each of them is given their own mouse pointer to interact with the shared windows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codestream" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codestream.com/"&gt;CodeStream&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ7X_x9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d8mdzyltnigpjbmsu7vk.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ7X_x9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d8mdzyltnigpjbmsu7vk.JPG" alt="codestream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeStream lets coders eliminate the friction that accompanies code reviews. With CodeStream, you can get feedback on a WIP project within two clicks, allowing you to course-correct early on and obtain better code quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsfiddle" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8O5yf1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq9ehbj1dlzhowpl07wo.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8O5yf1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq9ehbj1dlzhowpl07wo.JPG" alt="jsfiddle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSFiddle is an online community that lets you test and showcase your HTML, CSS and JavaScript code snippets ("fiddles"). Its amazing UI and responsive editor make it a must-try for any serious JavaScript developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#product-management" class="anchor"&gt;
  &lt;/a&gt;
  Product Management &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prioritize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://prioritize.songthamtung.com/"&gt;Prioritize&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Qdrettp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d79spavtw3aztjv3qkhz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Qdrettp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d79spavtw3aztjv3qkhz.JPG" alt="prioritize"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prioritize is a simple tool that is essentially a 2-axis chart. It helps you create, visualise, and prioritise tasks on a drag and drop interface with different priority boards or matrixes, including Effort / Impact , Risk / Value , Eisenhower, and MoSCoW.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#figma-product-planner" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.figma.com/community/plugin/766652281834442616/Product-Planner"&gt;Figma Product Planner&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPA5mZnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0qtbms5odxpgpjgg695o.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPA5mZnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0qtbms5odxpgpjgg695o.JPG" alt="figmaproductplanner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figma's Product Planner makes it easy to integrate product planning features with its design collaboration tool. It offers a range of prebuilt templates relevant to common tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-management" class="anchor"&gt;
  &lt;/a&gt;
  Project Management &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ntask" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ntaskmanager.com/"&gt;nTask&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8oPCmPKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c6gk017s5wzhllzm2znb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8oPCmPKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c6gk017s5wzhllzm2znb.JPG" alt="ntask"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nTask is a comprehensive project and task management tool that offers collaboration, task management, meeting scheduling, project planning and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taraai" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://tara.ai/"&gt;Tara.ai&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PzR7YDsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yz6vhcb9d3vii3wj27g2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PzR7YDsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yz6vhcb9d3vii3wj27g2.JPG" alt="taraai"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tara.ai is an AI-based free alternative to Jira. It helps teams deliver on planned release cycles and run weekly sprints with more predictability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taskade" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.taskade.com/"&gt;Taskade&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xm-wuKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ovkwycj6p3rjz91c96v.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xm-wuKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ovkwycj6p3rjz91c96v.JPG" alt="taskade"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taskade is a remote workspace tool that aims to make teams more productive. With Taskade, teams can manage tasks, write notes, and video chat, all within a single platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  Design Collaboration &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mockplus" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mockplus.com/"&gt;Mockplus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQP3afPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q8q33frt6gvwue0o2uhl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQP3afPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q8q33frt6gvwue0o2uhl.JPG" alt="mockplus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mockplus is a one-stop online design collaboration platform that helps you accomplish everything from prototyping to developer handoff. It enables designers, developers, and product managers to work together online with auto specs, assets, and code snippets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.framer.com/"&gt;Framer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p3YV_xyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fzuh92n69fij0fzuvn0f.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p3YV_xyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fzuh92n69fij0fzuvn0f.JPG" alt="framer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Framer is a feature-rich prototyping tool that helps designers draw, build layouts, incorporate components, and create interactive designs. It has lots of team collaboration features such as multi-player editing and inline commenting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marvel" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://marvelapp.com/"&gt;Marvel&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0OOunoE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4iz7fly8d0h08q5g0iu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0OOunoE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4iz7fly8d0h08q5g0iu.JPG" alt="marvel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Marvel is a holistic platform that enables designers to transform ideas into digital products by providing them with an environment to create, test, iterate as well as gather feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback-by-pixelic" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pixelic.io/feedback"&gt;Feedback by Pixelic&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IR58glx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pgwjdm66ez7nd9xgrld3.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IR58glx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pgwjdm66ez7nd9xgrld3.JPG" alt="pixelic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedback by Pixelic allows you to seamlessly share your designs with coworkers. It lets them add visual feedback to your design, which you can even organise with version control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#team-chat" class="anchor"&gt;
  &lt;/a&gt;
  Team Chat &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#twist" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://twist.com"&gt;Twist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPctYKmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8inlriqk2mtpbgpvvbwq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPctYKmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8inlriqk2mtpbgpvvbwq.JPG" alt="twist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Slack becomes a bit too chaotic, you can turn to Twist. Twist aims to keep team conversations organized, on-topic, and easily searchable. It has thread-based and asynchronous-friendly messaging to allow team members to focus on work without missing out on important discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  Document Collaboration &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#slite" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://slite.com/"&gt;Slite&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpmGfKkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c7t6o0of6iozy44vgnqr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpmGfKkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c7t6o0of6iozy44vgnqr.JPG" alt="slite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slite is a great-looking, simple collaborative documentation tool that helps your team stay organised. It offers everything a team needs: collaborative writing, feedback and sharing, powerful search, integrations, and easy permissions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ntile" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://start.ntile.app/"&gt;ntile&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJWLiGb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q4dgm0aknilpr1ur27en.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJWLiGb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q4dgm0aknilpr1ur27en.JPG" alt="ntile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With ntile, you can start a blog, build a knowledge base, open an info portal, or use pre-made document organisation solutions for business and daily life. Moreover, you can create a digital ecosystem by overlapping disparate entities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tettra" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://tettra.com/"&gt;Tettra&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dqo0JVeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dc16p6pacgxwshe80ja2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dqo0JVeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dc16p6pacgxwshe80ja2.JPG" alt="tettra"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tettra is an "internal wiki" tool that helps teams document important processes, policies, and procedures in one centralised place, reducing the need to answer repetitive questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coda" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://coda.io/welcome"&gt;Coda&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bOjRbPmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xmzjepe2j4a5d778ewjj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOjRbPmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xmzjepe2j4a5d778ewjj.JPG" alt="coda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coda is an all-in-one platform that brings together documents, spreadsheets, and apps. It allows teams to share notes, track tasks, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://notion.so"&gt;Notion&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGUX7Xdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62lylqof5my3zceu6gkl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGUX7Xdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62lylqof5my3zceu6gkl.JPG" alt="notion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notion has been one of the best documentation tools around, and recently they've also started offering a free forever version. It has a highly flexible interface for taking notes, creating to-do lists, and much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-whiteboard" class="anchor"&gt;
  &lt;/a&gt;
  Remote Whiteboard &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#explain-everything" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://explaineverything.com/"&gt;Explain Everything&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1F2ZAmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cqddu0uyrtudhk0kmsv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1F2ZAmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cqddu0uyrtudhk0kmsv.JPG" alt="explaineverything"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explain Everything is a presentation app that can be used by teams to present ideas with remote team members or clients. This simple tool is especially effective for teachers who want to create fun and interactive lessons for students.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-web-whiteboard" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://awwapp.com/"&gt;A Web Whiteboard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSZEKXaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k24ciq2ibzkwkg0su73y.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSZEKXaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k24ciq2ibzkwkg0su73y.JPG" alt="aww"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Web Whiteboard is a touch-friendly, easy-to-use web browser-based collaborative tool that can be used by remote workers to draw sketches, and collaborate and share them with others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#miro" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://miro.com"&gt;Miro&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kP_Pm9wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3eawdma0tc9uh45q718.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kP_Pm9wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3eawdma0tc9uh45q718.JPG" alt="miro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Miro's whiteboard toolkit can be used for creating mockups and schemes, writing down ideas and leaving feedback on other collaborators’ inputs. It comes with a range of pre-loaded templates and an integrated library of icons, wireframes, and other content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#milanote" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://milanote.com"&gt;Milanote&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVxu_MRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7lcee96vpqyli2od6z6i.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVxu_MRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7lcee96vpqyli2od6z6i.JPG" alt="milanote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Milanote is excellent for organising your ideas and projects into visual "moodboards". You can use the simple and easy-to-use tool for gathering inspiration, collating your team's ideas, and exploring creative possibilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standups" class="anchor"&gt;
  &lt;/a&gt;
  Standups &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#olaph" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://olaph.io/"&gt;Olaph&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----nY6iEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/asajoijydyeuw6ljwcmh.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----nY6iEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/asajoijydyeuw6ljwcmh.JPG" alt="olaph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Olaph is a tool that integrates into Slack and facilitates stand-ups for your team. It brings teams closer together by encouraging communication and exchange.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#armadill" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://armadill.me/"&gt;Armadill&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vqhbl9M3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ja5m52k859s3kngmhfv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vqhbl9M3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ja5m52k859s3kngmhfv.JPG" alt="armadill"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Armadill provides remote teams with a transparent work structure by combining Kanban workflows with automatic daily standups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-tracking" class="anchor"&gt;
  &lt;/a&gt;
  Time Tracking &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#toptracker" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.toptal.com/tracker"&gt;TopTracker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXrDs90N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs9xs9zxm91hir5zxqad.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXrDs90N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs9xs9zxm91hir5zxqad.JPG" alt="toptracker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TopTracker is a simple and lightweight desktop app, that works really well as a time tracking tool for freelance developers. However, it lacks essential features like invoicing and integrations with other project management tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-time" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.software.com/code-time"&gt;Code Time&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0YMcil9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/raye89jhe6q2o3ve80y4.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YMcil9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/raye89jhe6q2o3ve80y4.JPG" alt="codetime"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Time is a powerful time tracking plugin built for developers, that integrates with over 15 code editors and IDEs. You can set daily coding goals and view coding stats right in your editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worklog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://worklogtracker.com/"&gt;Worklog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihkf9MUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vfzhn7mmn81bht4tutg.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihkf9MUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vfzhn7mmn81bht4tutg.JPG" alt="worklog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Worklog is an extension that enables seamless time tracking and synchronising work logs between different time trackers. It works well with a host of apps including Jira, Toggl, and Keen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-office" class="anchor"&gt;
  &lt;/a&gt;
  Virtual Office &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pragli" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://pragli.com/"&gt;Pragli&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvV5DIHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tssxqld5oovvke2a33nx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvV5DIHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tssxqld5oovvke2a33nx.JPG" alt="pragli"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pragli is a virtual office tool that enables remote workers to dive into impromptu conversations with audio channels and direct conversations, similar to a walkie talkie.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loop-team" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.loopteam.co/"&gt;Loop Team&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ENGnQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qvsyqc5ehtuezdl697b6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ENGnQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qvsyqc5ehtuezdl697b6.JPG" alt="loopteam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Loop Team aims to bring the best parts of in-office working to a remote setting, and enables distributed teams to communicate faster and capture face-to-face discussions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wurkr" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://wurkr.io/"&gt;Wurkr&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NPY5XZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t7gywfk8plunmncrcsxm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NPY5XZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t7gywfk8plunmncrcsxm.JPG" alt="wurkr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wurkr is a video platform that aims to replicate your physical office in an online setting. Distributed team members can internally communicate and work with each other visibly and in real-time, regardless of their location.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Creating objects in JavaScript</title>
      <author>hebaShakeel</author>
      <pubDate>Thu, 07 Jan 2021 11:03:38 +0000</pubDate>
      <link>https://dev.to/heba_shakeel/creating-objects-in-javascript-5403</link>
      <guid>https://dev.to/heba_shakeel/creating-objects-in-javascript-5403</guid>
      <description>&lt;p&gt;There are several ways one can create objects in JavaScript. I have mentioned most of the ways to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-object-constructor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Object Constructor&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the simplest way to create an empty object.&lt;/p&gt;

&lt;p&gt;In the below example &lt;strong&gt;function Person( )&lt;/strong&gt; is an object constructor function. Objects of the same type are created by calling the constructor using the &lt;strong&gt;new&lt;/strong&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1NQe-hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eyqqzci6a7h7xhj2wdip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1NQe-hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eyqqzci6a7h7xhj2wdip.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-objectcreate-method" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Object.create method&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The create method of Object creates a new object by passing the prototype object as a parameter. The newly created object will inherit all the prototype object properties. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJO4vn9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fymbi6oh4dko0mr2cvxs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJO4vn9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fymbi6oh4dko0mr2cvxs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-object-literal-syntax" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Object Literal Syntax&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The object literal syntax is equivalent to create method when it passes null as parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f32o82-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ng6zt4va5sh0eypisxl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f32o82-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ng6zt4va5sh0eypisxl0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-function-constructor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Function Constructor&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Function constructor creates a new Function object. The Function constructor creates functions which execute in the global scope only.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzNctPTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aboe529lcx82m99dtc83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzNctPTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aboe529lcx82m99dtc83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-function-constructor-with-prototype" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Function constructor with prototype&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is similar to function constructor but it uses prototype for their properties and methods&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GLw2xKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3mvofgtcrl8v8a4oqgu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GLw2xKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3mvofgtcrl8v8a4oqgu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-es6-class-syntax" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. ES6 Class Syntax&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xHTnyfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eygavkvgn22y3nj2wvkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xHTnyfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eygavkvgn22y3nj2wvkm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-singleton-pattern" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Singleton pattern&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmdMz71y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6rb1snybokh3phjl7n1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmdMz71y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6rb1snybokh3phjl7n1z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What Are React Server Components?</title>
      <author>Kinga Hunyadi</author>
      <pubDate>Thu, 07 Jan 2021 11:00:15 +0000</pubDate>
      <link>https://dev.to/kingahunyadi/what-are-react-server-components-5g09</link>
      <guid>https://dev.to/kingahunyadi/what-are-react-server-components-5g09</guid>
      <description>&lt;p&gt;At the end of 2020 the React team shared with us their upcoming feature, called &lt;em&gt;React Server Components&lt;/em&gt;. This feature is still in research and development, it should not be used in production yet, but we can play around with it. You can find a talk and a demo shared by them &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEAofYVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/cf6ce0cd56b56cc30c2582c8f5c9b2ee/42cbc/image-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEAofYVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/cf6ce0cd56b56cc30c2582c8f5c9b2ee/42cbc/image-1.png" alt="server-components" title="server-components"&gt;&lt;/a&gt;&lt;/p&gt;
Created with &lt;a href="https://sketch.io/sketchpad"&gt;Sketchpad&lt;/a&gt;



&lt;p&gt;&lt;em&gt;React Server Components&lt;/em&gt; are normal React components (with some limitations, i.e. they can not use state or effects), that execute on the server. The main pain points that &lt;em&gt;Server Components&lt;/em&gt; try to improve are &lt;strong&gt;performance&lt;/strong&gt; and &lt;strong&gt;data fetching&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You might wonder how are these different from Server-Side Rendering (SSR), but actually they are complementary. SSR produces an HTML, but we still need to download all the JavaScript code. &lt;em&gt;Server Components&lt;/em&gt; use a different format, which will be then translated to HTML. This format allows to refetch our components. The state of &lt;em&gt;Client Components&lt;/em&gt; (regular components) will be preserved on refetch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-performance" class="anchor"&gt;
  &lt;/a&gt;
  About Performance
&lt;/h3&gt;

&lt;p&gt;Almost every React application uses some third-party packages, resulting in increased bundle size and reduced performance. Of course, there are some ways to improve these problems client-side: we can include only part of the packages in our bundles or we can implement the features ourselves instead, but it might be time-consuming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Server Components&lt;/em&gt; allow us to import third-party libraries on the server, without increasing our application’s bundle size. So we can say that &lt;em&gt;Server Components&lt;/em&gt; are &lt;strong&gt;Zero-Bundle-Size Components&lt;/strong&gt;. Components that are non-interactive and only render static content could be easily migrated to the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-data-fetching" class="anchor"&gt;
  &lt;/a&gt;
  About Data Fetching
&lt;/h3&gt;

&lt;p&gt;Another benefit is that &lt;em&gt;Server Components&lt;/em&gt; have &lt;strong&gt;full access to the backend&lt;/strong&gt;. We all know that endpoints are not always designed with the UI in mind, and we have to do additional processing on the client. By using &lt;em&gt;Server Components&lt;/em&gt; we can move the complexity to the server (but also reduce it by taking advantage of direct backend access), leaving our client-side components cleaner.&lt;/p&gt;

&lt;p&gt;We could mention many other benefits, like automatic code splitting, UX improvements, etc., but I recommend you read the &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;RFC&lt;/a&gt; for an in-depth explanation. For now, let’s see an example, so we can better understand how these components work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before-we-begin" class="anchor"&gt;
  &lt;/a&gt;
  Before we begin...
&lt;/h3&gt;

&lt;p&gt;Two new concepts will be introduced besides &lt;em&gt;Server Components&lt;/em&gt;. Our regular React components will be called &lt;em&gt;Client Components&lt;/em&gt;, but nothing changes in how we define them. Some components do not use state, effects or backend resources, they just transform some data, we will call them &lt;em&gt;Shared Components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a convention, they will have suffixes that show their type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Component.client.js (or .jsx, .tsx) - client component&lt;/li&gt;
&lt;li&gt;Component.server.js - server component&lt;/li&gt;
&lt;li&gt;Component.js - shared component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Shared Components&lt;/em&gt;, as the name suggests, can be imported both client and server-side. &lt;em&gt;Server Components&lt;/em&gt; can import &lt;em&gt;Server&lt;/em&gt; or &lt;em&gt;Client Components&lt;/em&gt;, but &lt;em&gt;Client Components&lt;/em&gt; can not import &lt;em&gt;Server Components&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-migrate-components-to-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to Migrate Components to the Server?
&lt;/h3&gt;

&lt;p&gt;Let’s say we have a component similar to the one below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Article.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleHeader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleHeader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleDeatails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleDetails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;artileId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`my-api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postedAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mm/dd/yy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleHeader&lt;/span&gt; &lt;span class="na"&gt;postedAt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleDetails&lt;/span&gt; &lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can see it fetches the current article from our API, it transforms the article’s date with the help of a third-party library, then renders two components (header and details). We could move &lt;em&gt;Article&lt;/em&gt; to the server, as it does not have any interaction, it only reads some data, transforms it, and renders two other components. We will ignore the other two components now, let’s say we want to keep them on the client. As we know, our server component can still import them. So the only thing we need in this case, is to add the &lt;em&gt;server&lt;/em&gt; and &lt;em&gt;client&lt;/em&gt; suffixes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Article.server.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleHeader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleHeader.client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleDeatails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleDetails.client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;artileId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`my-api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postedAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mm/dd/yy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleHeader&lt;/span&gt; &lt;span class="na"&gt;postedAt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleDetails&lt;/span&gt; &lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Easy, right? Of course, our applications might have more complex components and we need to think about how to better structure them in order to fully enjoy the benefits of &lt;em&gt;Server Components&lt;/em&gt;. We can combine &lt;em&gt;Server Components&lt;/em&gt; with SSR to have an even better performance. This is a really exciting feature, which could bring many benefits for us, developers, but most importantly for our users.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article, I hope I made you curious and you try it out yourself. You can find the official demo &lt;a href="http://github.com/reactjs/server-components-demo"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Animated CSS Blob</title>
      <author>Wei Gao</author>
      <pubDate>Thu, 07 Jan 2021 10:56:14 +0000</pubDate>
      <link>https://dev.to/wgao19/animated-css-blob-cnp</link>
      <guid>https://dev.to/wgao19/animated-css-blob-cnp</guid>
      <description>&lt;p&gt;I'm a pure blob over the holidays these days, so I decided to make something blobby on &lt;a href="https://aworkinprogress.studio/"&gt;my website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is this blob:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAasmEgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0negrqL.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAasmEgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0negrqL.gif" alt="animated css blob"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://css-tricks.com/blobs/"&gt;quite a few ways you can create blobs on the web&lt;/a&gt;. But following the blobby attitude I've chosen the simplest technology – CSS border radius – one that I can wrap my brain around with, to be the main recipe for this blob. Overall, it'll still be a few simple techniques put together that I'll briefly list out in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-border-radius" class="anchor"&gt;
  &lt;/a&gt;
  CSS border radius
&lt;/h2&gt;

&lt;p&gt;The key to the irregular shape is to make use of the power of border radius. Not only can you specify each corner, but also you can supply pairs of values such that each corner can take different border radii so that it looks skewed towards one direction or the other.&lt;/p&gt;

&lt;p&gt;Here's a video showing its mechanism from Robin Rendle's &lt;a href="https://css-tricks.com/css-border-radius-can-do-that/"&gt;post&lt;/a&gt;:&lt;/p&gt;



&lt;p&gt;The video is taken from &lt;a href="https://9elements.github.io/fancy-border-radius/"&gt;fancy-border-radius&lt;/a&gt; that you can use to play around with the shape defined by those border radii.&lt;/p&gt;

&lt;p&gt;Generally speaking, the smaller the percentage value, the sharper it will look at the point the blob touches its bounding box. I want my blob to look fairly rounded so I've taken fairly large values in those radii. And to get the curves to have a smooth join, it's worth to make the percentage values complement to each other in pairs – and fewer random numbers needed to generate as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;p&gt;I've used simple keyframes for the animation. My blob is quite slow, it's 7s animation on alternate direction &amp;amp; infinite loop. I've also made them spin a little bit by adding a &lt;code&gt;transform: rotate()&lt;/code&gt; to the animation frames.&lt;/p&gt;

&lt;p&gt;Also, to add some randomness I've generated the animation when component mounts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blending" class="anchor"&gt;
  &lt;/a&gt;
  Blending
&lt;/h2&gt;

&lt;p&gt;As you can see, the blobs created by CSS border radius will be all convex, the shape a bit simple. To add some flavor to it, I've recalled my &lt;code&gt;mix-blend-mode&lt;/code&gt; magic (you can read about it in my other post &lt;a href="//../sun-moon-blending-mode/"&gt;about CSS &lt;code&gt;mix-blend-mode&lt;/code&gt;&lt;/a&gt;). Namely, I've created three blobs with slightly different shades of grey and some offset in their &lt;code&gt;animation-delay&lt;/code&gt;, and made them &lt;code&gt;mix-blend-mode: luminosity&lt;/code&gt; with one another.&lt;/p&gt;

&lt;p&gt;When you enlarge them they look pretty sick, I think:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtBBA051--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/RcMCCRy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtBBA051--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/RcMCCRy.gif" alt="the wavy edge of the blobs"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Putting them altogether, here's one of the generated animation CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blob&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blobby&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;mix-blend-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;luminosity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;blobby&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;41%&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt; &lt;span class="m"&gt;41%&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;53%&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt; &lt;span class="m"&gt;47%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;36deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;43%&lt;/span&gt; &lt;span class="m"&gt;57%&lt;/span&gt; &lt;span class="m"&gt;41%&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;53%&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt; &lt;span class="m"&gt;48%&lt;/span&gt; &lt;span class="m"&gt;47%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48%&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt; &lt;span class="m"&gt;41%&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;48%&lt;/span&gt; &lt;span class="m"&gt;58%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;108deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;144deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;54%&lt;/span&gt; &lt;span class="m"&gt;46%&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;43%&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt; &lt;span class="m"&gt;57%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are a few more CSS properties such as each of the blobs' &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;animation-delay&lt;/code&gt;, you can inspect them in my site &lt;a href="https://aworkinprogress.studio/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>React State Management with Recoil</title>
      <author>Kinga Hunyadi</author>
      <pubDate>Thu, 07 Jan 2021 10:52:52 +0000</pubDate>
      <link>https://dev.to/kingahunyadi/react-state-management-with-recoil-5a9k</link>
      <guid>https://dev.to/kingahunyadi/react-state-management-with-recoil-5a9k</guid>
      <description>&lt;p&gt;&lt;a href="https://recoiljs.org"&gt;Recoil&lt;/a&gt; is a state management library for React. It is still in experimental phase, but it looks really promising. The best thing about Recoil is that it works and thinks like React. The most important concepts of Recoil are atoms and selectors.&lt;/p&gt;

&lt;p&gt;Atoms are units of state, while selectors are pure functions that calculate derived data from state. Selectors accept both atoms and other selectors as input. Components can subscribe to selectors or atoms, and will be re-rendered when the selectors or atoms change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbmWviz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/0011242f3bac8a7037d3272a79957c20/0ae55/image-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbmWviz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/0011242f3bac8a7037d3272a79957c20/0ae55/image-1.png" alt="recoil" title="recoil"&gt;&lt;/a&gt;&lt;/p&gt;
Created with &lt;a href="https://sketch.io/sketchpad"&gt;Sketchpad&lt;/a&gt;



&lt;p&gt;I will explain how Recoil can manage your application’s state through some examples. No, it won’t be another todo app. Our app will show a list of songs, and for each song we can get some extra info. I will share the GitHub repository at the end of the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VgSjnwSoqiPjRRIJ1F/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/VgSjnwSoqiPjRRIJ1F/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, we need to create a new React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app recoil-example
&lt;span class="nb"&gt;cd &lt;/span&gt;recoil-example
yarn
yarn start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Check that your app works on &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt;, you should see a page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WoIfo7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/e5bb392103593660285cc6df6010c1ea/3643c/image-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WoIfo7od--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/e5bb392103593660285cc6df6010c1ea/3643c/image-2.png" alt="recoil" title="recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to add Recoil to our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add recoil
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We need to wrap our components that use Recoil in &lt;em&gt;RecoilRoot&lt;/em&gt;. We can replace the content of &lt;em&gt;App.js&lt;/em&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RecoilRoot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RecoilRoot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Recoil Example&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;RecoilRoot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our app should still work and show the changes we made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ae3xGCJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/dde1f508d17e3a40ca4bf66b43acf490/3e86e/image-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ae3xGCJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/dde1f508d17e3a40ca4bf66b43acf490/3e86e/image-3.png" alt="recoil" title="recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will create a real-world-like example, so we will start with our client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// client.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bohemian Rhapsody&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Purple Rain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Eternal Flame&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Queen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1975&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prince&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1984&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;U2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1992&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Bangles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1989&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSongs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSongById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;songDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have our client functions, we can implement the atoms and selectors that will manage our app’s state. Each atom and selector will have a unique id. We will start with loading the song list. As our client function returns a promise, the selector’s get function will be async:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// selectors.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getSongs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getSongs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have our client functions, we can implement the atoms and selectors that will manage our app’s state. Each atom and selector will have a unique id. We will start with loading the song list. As our client function returns a promise, the selector’s get function will be async:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;useRecoilState&lt;/em&gt; — returns the value of the given state and the setter function for updating the value of given the state;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;useRecoilValue&lt;/em&gt; — returns the value of the given state;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;useSetRecoilState&lt;/em&gt; — returns the setter function for updating the value of given the state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will create the &lt;em&gt;Songs&lt;/em&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Songs.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSetRecoilState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;songsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./selectors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentSongIDState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Songs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setCurrentSongID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSetRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSongIDState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Songs&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCurrentSongID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Songs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We should note that our selector is async, but React render functions are synchronous. Here comes in React Suspense, which handles pending data. We could also handle pending state with Recoil’s Loadable, or implement a handler from scratch, but we will use Suspense now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RecoilRoot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Songs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RecoilRoot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Songs&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;RecoilRoot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now in our browser we should see the list of songs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjeSG0vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/5e823d6d2ff2004c52bef668208bdec2/faa4a/image-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjeSG0vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/5e823d6d2ff2004c52bef668208bdec2/faa4a/image-4.png" alt="recoil" title="recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was easy, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/FlWgXEtj5aM5G/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/FlWgXEtj5aM5G/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s see how can we get the details of a song. When we select a song, we want to see its details, like the artist and the year of release. We need to remember the current song ID. The ID is just a simple value, it will not be computed, so we will create an atom for this, instead of a selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// atoms.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentSongIDState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentSongID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Based on the current song ID we want to get the song details. We need another selector which calls the client function with the current song ID. Selectors can read other atoms and selectors using the &lt;em&gt;get&lt;/em&gt; argument of the &lt;em&gt;get&lt;/em&gt; function. I know it sounds a little confusing, but the next example will make it more clear:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XQvhpuryrPGnK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/XQvhpuryrPGnK/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// selectors.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentSongIDState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getSongs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getSongById&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentSongQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentSong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getSongById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSongIDState&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will now create the &lt;em&gt;CurrentSong&lt;/em&gt; component, which renders the details of the selected song:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CurrentSong.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentSongQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./selectors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CurrentSong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentSong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSongQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentSong&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Current Song Details:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Artist: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentSong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;artist&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Released: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentSong&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CurrentSong&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can add it to our &lt;em&gt;Songs&lt;/em&gt; component. The &lt;em&gt;currentSongIDState&lt;/em&gt; atom can be updated from the component by using the setter function returned by &lt;em&gt;useRecoilState&lt;/em&gt;. (Note that I didn’t want to add it to the App component, because I don’t want to show the “Loading…” state when nothing is selected. Of course, we could structure our app better, but for now it’s just fine):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Songs.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRecoilState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recoil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;songsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./selectors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentSongIDState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CurrentSong&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./CurrentSong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Songs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentSongID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentSongID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecoilState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSongIDState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/*
   * as an alternative, we could declare them separately:
   * const currentSongID = useRecoilValue(currentSongIDState);
   * const setCurrentSongID = useSetRecoilState(currentSongIDState);
   */&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Songs&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCurrentSongID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;currentSongID&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentSongID&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CurrentSong&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Songs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we click on a song we should see the details below the song list:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EjaMr__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/f243fc4becdc98d8e10fc6974b9d1278/3643c/image-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EjaMr__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/f243fc4becdc98d8e10fc6974b9d1278/3643c/image-5.png" alt="recoil" title="recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was easy and fun so far, while working with read-only data, but in real-world apps we want our app’s state to get updated after doing an update on the server. For example, we might want to add new songs to our list. Here it becomes a little more complicated.&lt;/p&gt;

&lt;p&gt;If you are used to work with other state management libraries, like Redux, then you know that the “global” state can be updated after updating the data on the server. Recoil does not have a “global” state, like other state management libraries, but coupled to &lt;em&gt;RecoilRoot&lt;/em&gt;. That means the state can not be updated outside of the components/hooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/BEob5qwFkSJ7G/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/BEob5qwFkSJ7G/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there is still hope... with Recoil we can achieve this by subscribing to server updates from &lt;em&gt;useEffect&lt;/em&gt;, and updating the state from there. I know this is not ideal, but this &lt;a href="https://recoiljs.org/docs/guides/asynchronous-state-sync"&gt;API&lt;/a&gt; is still under development, and Recoil might handle this out-of-the-box.&lt;/p&gt;

&lt;p&gt;In conclusion, comparing it with other state management libraries (like Redux), it seems more “React-like” and simpler and easier to learn, so it might be a good alternative in the future.&lt;/p&gt;

&lt;p&gt;You can find the GitHub repository &lt;a href="https://github.com/kingahnd/recoil-example"&gt;here&lt;/a&gt;. Thank you for reading this article.&lt;/p&gt;

</description>
      <category>recoil</category>
      <category>statemanagement</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to add a pre-loader in your website.</title>
      <author>AmitThakur11</author>
      <pubDate>Thu, 07 Jan 2021 10:51:41 +0000</pubDate>
      <link>https://dev.to/amitthakur11/how-to-add-a-pre-loader-in-your-website-140i</link>
      <guid>https://dev.to/amitthakur11/how-to-add-a-pre-loader-in-your-website-140i</guid>
      <description>&lt;br&gt;


&lt;h4&gt;PRE-LOADER&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sQzcbE_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fk3smrzna1vieidxaawn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sQzcbE_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fk3smrzna1vieidxaawn.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


A &lt;b&gt;preloader&lt;/b&gt; — or what some call a loading screen — is the what you see on some sites before the main content of the web page is loaded.Their main purpose is to entertain site visitors while the actual content of the page is still loading in the background.

&lt;h3&gt;&lt;b&gt;Follow these steps to add a pre-loader.&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;STEP 1 :&lt;/b&gt; Include a &lt;b&gt;DIV&lt;/b&gt; tag in the begining of a body tag and give the tag a Class or Id whatever its on you. &lt;br&gt;&lt;b&gt;for eg: id = "loading". &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xfbsl6lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0l8hmudrl0hqpyjzld4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xfbsl6lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0l8hmudrl0hqpyjzld4t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;&lt;b&gt;STEP 2 :&lt;/b&gt; Now link a css file to your HTML file.&lt;br&gt;See the code below. Here we add few styling to the id "loading". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHcX0X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eaomlei4l0ulc4t9px77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHcX0X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eaomlei4l0ulc4t9px77.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;b&gt;Position    :&lt;/b&gt;An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Width       :&lt;/b&gt;Set width to 100% so  your pre-loader will cover entire screen.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Height      :&lt;/b&gt; Set height to 100vh(100% of the viewport height.)&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Background  :&lt;/b&gt;Here in background we will use different attributes like 
&lt;b&gt;#fff&lt;/b&gt;("white"color you can use whatever color),
&lt;b&gt;url&lt;/b&gt;(give the gif link which you want to use as a loader.),&lt;b&gt;no-repeat&lt;/b&gt;(repeatation of gif will be cornered),&lt;b&gt;center&lt;/b&gt;(To get pre-loader in center accn to viewport.).
  &lt;/li&gt;
&lt;li&gt;
&lt;b&gt;z-index     :&lt;/b&gt;The z-index property specifies the stack order of an element.An element with greater stack order is always in front of an element with a lower stack order.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;b&gt;STEP 3 :(a)&lt;/b&gt;Now add a &lt;b&gt;onload&lt;/b&gt; event in a body tag so it will Execute a JavaScript immediately after a body content  has been loaded:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSnwZn8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bwho6zosy19t9sv5v3p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSnwZn8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bwho6zosy19t9sv5v3p2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;b&gt;(b)&lt;/b&gt;Now add a &lt;b&gt;script tag&lt;/b&gt; inside &lt;b&gt;Body tag&lt;/b&gt;. Then create variable which we will use to manipulate our 'loading' id. and set the display odf loading to none when the content of webpage load. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHWPTkG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d96wuus1mh9r46retdbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHWPTkG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d96wuus1mh9r46retdbl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;p&gt;--Now your pre-loader is ready.&lt;/p&gt;



</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>🗄 MongoDB interview questions (answered) for fullstack developers</title>
      <author>Devinterview-io</author>
      <pubDate>Thu, 07 Jan 2021 10:01:31 +0000</pubDate>
      <link>https://dev.to/devinterview/mongodb-interview-questions-answered-for-fullstack-developers-3hpn</link>
      <guid>https://dev.to/devinterview/mongodb-interview-questions-answered-for-fullstack-developers-3hpn</guid>
      <description>&lt;p&gt;MongoDB is the trending NoSQL database, with significant adoption among the Fortune 500 and Global 500. Follow along and check our list of 83 common MongoDB interview questions and answers and get ready for your next NoSQL developer interview in 2021.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;You can find all 83 answers here 👉🏼 &lt;a href="https://devinterview.io/dev/mongodb-interview-questions"&gt;https://devinterview.io/dev/mongodb-interview-questions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#1-explain-what-is-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 1. Explain what is MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling. It's Key Features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Document Oriented and NoSQL database.&lt;/li&gt;
&lt;li&gt;  Supports Aggregation&lt;/li&gt;
&lt;li&gt;  Uses BSON format&lt;/li&gt;
&lt;li&gt;  Sharding (Helps in Horizontal Scalability)&lt;/li&gt;
&lt;li&gt;  Supports Ad Hoc Queries&lt;/li&gt;
&lt;li&gt;  Schema Less&lt;/li&gt;
&lt;li&gt;  Capped Collection&lt;/li&gt;
&lt;li&gt;  Indexing (Any field in MongoDB can be indexed)&lt;/li&gt;
&lt;li&gt;  MongoDB Replica Set (Provides high availability)&lt;/li&gt;
&lt;li&gt;  Supports Multiple Storage Engines&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://docs.mongodb.com/manual/introduction/"&gt;mongodb.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#2-how-many-indexes-does-mongodb-create-by-default-for-a-new-collection" class="anchor"&gt;
  &lt;/a&gt;
  🔹 2. How many indexes does MongoDB create by default for a new collection?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;By default, MongoDB created the _id collection for every collection.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#3-which-are-the-most-important-features-of-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 3. Which are the most important features of MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Flexible data model in form of documents&lt;/li&gt;
&lt;li&gt;  Agile and highly scalable database&lt;/li&gt;
&lt;li&gt;  Faster than traditional databases&lt;/li&gt;
&lt;li&gt;  Expressive query language&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#4-when-should-we-embed-one-document-within-another-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 4. When should we embed one document within another in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;You should consider embedding documents for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;contains&lt;/em&gt; relationships between entities&lt;/li&gt;
&lt;li&gt;  One-to-many relationships&lt;/li&gt;
&lt;li&gt;  Performance reasons&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#5-compare-sql-databases-and-mongodb-at-a-high-level" class="anchor"&gt;
  &lt;/a&gt;
  🔹 5. Compare SQL databases and MongoDB at a high level
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today's real-world highly growing applications. MongoDB in contrast uses a flexible structure which can be easily modified and extended.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#6-if-you-remove-an-object-attribute-is-it-deleted-from-the-database" class="anchor"&gt;
  &lt;/a&gt;
  🔹 6. If you remove an object attribute, is it deleted from the database?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;Yes, it be. Remove the attribute and then re-save () the object.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://medium.com/@hub4tech/list-of-top-10-mongodb-interview-questions-for-beginners-and-professionals-ee385b9c501b"&gt;medium.com/@hub4tech&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#7-does-mongodb-need-a-lot-space-of-random-access-memory-ram" class="anchor"&gt;
  &lt;/a&gt;
  🔹 7. Does MongoDB need a lot space of Random Access Memory (RAM)?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;No. MongoDB can be run on small free space of RAM.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://medium.com/@hub4tech/list-of-top-10-mongodb-interview-questions-for-beginners-and-professionals-ee385b9c501b"&gt;medium.com/@hub4tech&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#8-why-does-profiler-use-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 8. Why does Profiler use in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;MongoDB uses a database profiler to perform characteristics of each operation against the database. You can use a profiler to find queries and write operations&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://medium.com/@hub4tech/list-of-top-10-mongodb-interview-questions-for-beginners-and-professionals-ee385b9c501b"&gt;medium.com/@hub4tech&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#9-what-is-namespace-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 9. What is “Namespace” in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;MongoDB stores BSON (Binary Interchange and Structure Object Notation) objects in the collection. The concatenation of the collection name and database name is called a namespace&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://medium.com/@hub4tech/list-of-top-10-mongodb-interview-questions-for-beginners-and-professionals-ee385b9c501b"&gt;medium.com/@hub4tech&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#10-what-are-indexes-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 10. What are Indexes in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#11-what-is-bson-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 11. What is BSON in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;BSON&lt;/strong&gt; is a binary serialization format used to store documents and make remote procedure calls in MongoDB. BSON extends the JSON model to provide additional data types, ordered fields, and to be efficient for encoding and decoding within different languages.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.mongodb.com/json-and-bson"&gt;mongodb.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#12-what-is-a-replica-set" class="anchor"&gt;
  &lt;/a&gt;
  🔹 12. What is a replica set?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;It is a group of mongo instances that maintain same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.&lt;/p&gt;

&lt;p&gt;The ideas of a replicaset are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Every data are repartited on each node&lt;/li&gt;
&lt;li&gt;  Only one node accept writes&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://interviewbubble.com/advance-topics/mongodb-interview-questions-and-answers/"&gt;interviewbubble.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#13-what-is-replication-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 13. What Is Replication In MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Replication&lt;/strong&gt; is the process of synchronizing data across multiple servers. Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://interviewbubble.com/advance-topics/mongodb-interview-questions-and-answers/"&gt;interviewbubble.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#14-mention-the-command-to-insert-a-document-in-a-database-called-school-and-collection-called-persons" class="anchor"&gt;
  &lt;/a&gt;
  🔹 14. Mention the command to insert a document in a database called school and collection called persons.
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;school&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kadhir&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;dept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#15-explain-the-structure-of-objectid-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 15. Explain the structure of ObjectID in MongoDB
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ObjectIds&lt;/strong&gt; are small, likely unique, fast to generate, and ordered. ObjectId values consist of 12 bytes, where the first four bytes are a timestamp that reflect the ObjectId’s creation. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  a 4-byte value representing the seconds since the Unix epoch,&lt;/li&gt;
&lt;li&gt;  a 5-byte random value, and&lt;/li&gt;
&lt;li&gt;  a 3-byte counter, starting with a random value. In MongoDB, each document stored in a collection requires a unique _id field that acts as a primary key. If an inserted document omits the _id field, the MongoDB driver automatically generates an ObjectId for the _id field.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://docs.mongodb.com/manual/reference/bson-types/"&gt;mongodb.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#16-why-mongodb-is-not-preferred-over-a-32bit-system" class="anchor"&gt;
  &lt;/a&gt;
  🔹 16. Why MongoDB is not preferred over a 32-bit system?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;When running a 32-bit build of MongoDB, the total storage size for the server, including data and indexes, is 2 gigabytes. For this reason, do not deploy MongoDB to production on 32-bit machines.&lt;/p&gt;

&lt;p&gt;If you're running a 64-bit build of MongoDB, there's virtually no limit to storage size.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#17-does-mongodb-pushes-the-writes-to-disk-immediately-or-lazily" class="anchor"&gt;
  &lt;/a&gt;
  🔹 17. Does MongoDB pushes the writes to disk immediately or lazily?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;MongoDB pushes the data to disk lazily. It updates the immediately written to the journal but writing the data from journal to disk happens lazily.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm"&gt;tutorialspoint.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#18-when-to-use-mongodb-or-other-document-oriented-database-systems" class="anchor"&gt;
  &lt;/a&gt;
  🔹 18. When to use MongoDB or other document oriented database systems?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;MongoDB is best suitable to store &lt;em&gt;unstructured data&lt;/em&gt;. And this can organize your data into document format. These data stores don't enforce the ACID properties, and any schemas. This doesn't provide any transaction abilities. So this can scale big and we can achieve faster access (both read and write). If you wanted to work with structured data you can go ahead with RDBM.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/1476295/when-to-use-mongodb-or-other-document-oriented-database-systems"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#19-what-is-sharding" class="anchor"&gt;
  &lt;/a&gt;
  🔹 19. What is sharding?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;Sharding means to store the data on the multiple machines.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://interviewbubble.com/advance-topics/mongodb-interview-questions-and-answers/"&gt;interviewbubble.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#20-what-is-use-of-capped-collection-in-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  🔹 20. What is use of capped collection in MongoDB?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Capped collections&lt;/strong&gt; allow you to define a fix length/size collection. After the size/no of documents have been reached it will override the oldest document to accommodate new documents. It is like a circular buffer. Capped collections support high-throughput operations that insert and retrieve documents based on insertion order.&lt;/p&gt;

&lt;p&gt;Consider the following potential use cases for capped collections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Store log information generated by high-volume systems. Inserting documents in a capped collection without an index is close to the speed of writing log information directly to a file system.&lt;/li&gt;
&lt;li&gt;  Cache small amounts of data in a capped collections.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://www.quora.com/What-is-use-of-capped-collection-in-mongoDB"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;











&lt;blockquote&gt;
&lt;p&gt;Explore more dev interview question here 👉🏼 &lt;a href="https://devinterview.io/"&gt;https://devinterview.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>White-labeling React application with SASS and CSS variables</title>
      <author>Kristijan Pajtasev</author>
      <pubDate>Thu, 07 Jan 2021 09:44:08 +0000</pubDate>
      <link>https://dev.to/chriss/white-labeling-react-application-with-sass-and-css-variables-241k</link>
      <guid>https://dev.to/chriss/white-labeling-react-application-with-sass-and-css-variables-241k</guid>
      <description>&lt;p&gt;White-labeling is one of the more difficult problems in UI development. And for a reason. The good news is that with CSS variables, this task became much more manageable. And even better, they can also be used with SASS. In this post, you can see my solution for white-label support in a ReactJS application using CSS variables and SASS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-design-book" class="anchor"&gt;
  &lt;/a&gt;
  Make a design book
&lt;/h3&gt;

&lt;p&gt;You don't need to go into huge details and get a professional designer to make it. But you need to put some proper structure. Define your paddings, margins, font sizes, and colors. If every part of your website has different padding, you can't customize it efficiently. There would be just too many variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup" class="anchor"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;For this example, I am starting with a basic React application, and you can create it by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app whitelabel-example-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, install node-sass for SASS support by running the next command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-sass
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There was an issue with the latest version of the node-sass package(v5). You can fix this problem by downgrading to version four.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-styling" class="anchor"&gt;
  &lt;/a&gt;
  Initial styling
&lt;/h3&gt;

&lt;p&gt;The first step is to rename the App.css file into App.scss. This change enables us to use SASS for styling. It would all work with CSS, but I want to show how CSS variables can work with SASS. After rename, you need to fix the import of that file in the App.js file. The last thing is deleting all styling in the SASS file and defining background color for the App class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-sass-variable" class="anchor"&gt;
  &lt;/a&gt;
  Create a SASS variable
&lt;/h3&gt;

&lt;p&gt;We could improve the code above by creating a SASS variable for the background color. By doing that, it is easier to make changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$main-color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-css-variables-folder" class="anchor"&gt;
  &lt;/a&gt;
  Create CSS variables folder
&lt;/h3&gt;

&lt;p&gt;Defining CSS variables doesn't work in the SASS file. But you can use them. So first, create a file called theme.css located in the public folder. To use it, you also need to update the index.html file and add the following code in the head section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"theme.css"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now when we are using this file, we can define the CSS variables inside. You define CSS variable like any CSS rule but prepended by two dash signs. Also, it would be best to place it under the :root pseudo-selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-variables" class="anchor"&gt;
  &lt;/a&gt;
  Using variables
&lt;/h3&gt;

&lt;p&gt;Now when we linked the CSS file, we can use a variable anywhere under the root. You do that by using the variable name in a var function as a rule value. With that update, file App.scss has the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;main-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;What you can see in this example is one background controlled with one CSS variable. On the application of that scale, it may not make a big difference. On the more complex application, the improvement is noticeable. Instead of changing individual files around, all you need to do is replace top-level CSS containing all the variables. Like this, you can also have multiple themes. You can find code from this post in this &lt;a href="https://github.com/kristijan-pajtasev/react-whitelabel"&gt;Git repository&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;For more, you can follow me on &lt;a href="https://twitter.com/hi_iam_chris_"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/kpajtasev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/kristijan-pajtasev/"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://www.instagram.com/hi_iam_chris_/"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>design</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Display your PWA / website fullscreen</title>
      <author>Manuel Sommerhalder</author>
      <pubDate>Thu, 07 Jan 2021 09:43:11 +0000</pubDate>
      <link>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</link>
      <guid>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</guid>
      <description>&lt;p&gt;In this short article I will show you how to expand your installed PWA to the full edge of the screen of a mobile device and how to take care of design issues that might occur.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#standalone-mode" class="anchor"&gt;
  &lt;/a&gt;
  Standalone mode
&lt;/h1&gt;

&lt;p&gt;As soon as the user has added your PWA to the home screen and opened it, it runs in a standalone mode, where e.g. the navigation bar of the browser will disappear and we can produce more app-like designs.&lt;/p&gt;

&lt;p&gt;We can detect if the PWA is running in standalone mode inside our application like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// on iOS Safari&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;standalone&lt;/span&gt;

&lt;span class="c1"&gt;// on Android Chrome&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(display-mode: standalone)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because of the platform difference, a more popular approach is to define a &lt;code&gt;start_url&lt;/code&gt; inside your &lt;code&gt;manifest.json&lt;/code&gt; file, where we can add a parameter that will be added, when the app is started in standalone mode. Then we can check for the parameter inside our application to make changes to our UI.&lt;/p&gt;

&lt;p&gt;To display it fullscreen and remove native control elements, we also have to add the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;standalone&lt;/code&gt; (&lt;code&gt;fullscreen&lt;/code&gt; won't work). Here's our current manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;manifest.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Example App"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/?standalone=true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#meta-tags" class="anchor"&gt;
  &lt;/a&gt;
  Meta Tags
&lt;/h1&gt;

&lt;p&gt;To display your app fullscreen, we will also have to add a few meta tags.&lt;/p&gt;

&lt;p&gt;You might already have a &lt;code&gt;viewport&lt;/code&gt; meta tag, but make sure &lt;code&gt;viewport-fit=cover&lt;/code&gt; is inside it (separated by &lt;code&gt;;&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width; initial-scale=1; viewport-fit=cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we have to add the &lt;code&gt;mobile-web-app-capable&lt;/code&gt; and &lt;code&gt;status-bar-style&lt;/code&gt; meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- possible content values: default, black or black-translucent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-status-bar-style"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"black-translucent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that we can decide, whether the status bar should have a white (default), black or transparent (with white color) background. Take into account that this meta tag is only used when the app starts, so it's app-wide and we can't modify the meta tag later to change the color dynamically.&lt;/p&gt;

&lt;p&gt;Because we also want to be able to display content underneath the status bar, we'll use the transparent background (&lt;code&gt;black-translucent&lt;/code&gt;). This will also shift our app up to the top of the screen.&lt;/p&gt;

&lt;p&gt;Now we can produce fancy headers that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#safe-area" class="anchor"&gt;
  &lt;/a&gt;
  Safe Area
&lt;/h1&gt;

&lt;p&gt;Since we can display content underneath the status bar now, we'll have to make sure that the white text will always be readable (e.g. with a decorative shadow or ensuring dark background colors) and that there will be no interactive elements underneath. Also we might have to take the notch into account, which some newer iOS versions have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve those problems we can utilize the &lt;code&gt;safe-area&lt;/code&gt; CSS env variables (supported since iOS &amp;gt;= 11.1 and Chrome &amp;gt;= 69):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;use&lt;/span&gt; &lt;span class="err"&gt;fallback&lt;/span&gt; &lt;span class="err"&gt;values&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As an example, I implemented a sticky navigation bar vue component for my app, which has an element with the top safe-area applied as height. It will be transparent as long as the &lt;code&gt;transparent&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt; and the user has not scrolled down. Here's the crucial of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- NavigationBar.vue --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sticky top-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-safe-area-inset-top"&lt;/span&gt;
        &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
            'bg-black': !transparent
                        || (transparent &amp;amp;&amp;amp; scrollTop &amp;gt; 0)
        }"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.h-safe-area-inset-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.bg-black&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a question, don't hesitate to leave a comment. Happy coding and designing! 👨🏼‍💻&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
