<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ASP.NET Core Identity User Locked out</title>
      <author>Nirmal Krishna</author>
      <pubDate>Thu, 24 Jun 2021 15:20:39 +0000</pubDate>
      <link>https://dev.to/meuequalsd/asp-net-core-identity-user-locked-out-3bb0</link>
      <guid>https://dev.to/meuequalsd/asp-net-core-identity-user-locked-out-3bb0</guid>
      <description>&lt;p&gt;The user lockout feature is the way to improve application security by locking out a user that enters a password incorrectly several times. This technique can help us in protecting against brute force attacks, where an attacker repeatedly tries to guess a password. ‚õ≥ &lt;/p&gt;

&lt;p&gt;Quite a basic feature for an authentication service, but adding it in my Web API app was quite a head scratcher.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-adding-to-configuration-service"&gt;
  &lt;/a&gt;
  1. Adding to configuration service
&lt;/h4&gt;

&lt;p&gt;In your startup.cs or container configuration file,   the config for locking out can be  set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;services.AddIdentity&amp;lt;User, IdentityRole&amp;gt;(opt =&amp;gt;
{
    // previous code removed for clarity reasons
    opt.Lockout.AllowedForNewUsers = true;
    opt.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(2);
    opt.Lockout.MaxFailedAccessAttempts = 3;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The property names are self explanatory here.&lt;/p&gt;

&lt;p&gt;The  above code will  by default setup locking out feature and if a person is trying to login with wrong &lt;code&gt;password&lt;/code&gt; for a given &lt;code&gt;username&lt;/code&gt; the user account will be locked out for 5 minutes updated accordingly in &lt;code&gt;LockoutEnd&lt;/code&gt; column &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-how-to-check-if-this-user-is-locked-out"&gt;
  &lt;/a&gt;
  2. How to check if this user is Locked Out?
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//  AuthService.cs
..
    var result = await signInManager.CheckPasswordSignInAsync(user, model.Password, lockoutOnFailure: true);
..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The properties  of &lt;code&gt;result : SignInResult&lt;/code&gt; we are concerned here are &lt;code&gt;Succeeded&lt;/code&gt;, &lt;code&gt;IsLockedOut&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;code&gt;Succeeded ==  true&lt;/code&gt; if the username and password &lt;strong&gt;match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚ùå &lt;code&gt;Succeeded == false&lt;/code&gt; if the username and password &lt;strong&gt;do not match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;code&gt;IsLockedOut == true&lt;/code&gt; if this user has been locked out after x number of trials&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-what-is-here-to-scratch-your-hear-for"&gt;
  &lt;/a&gt;
  3. ü§î What is here to scratch your hear for
&lt;/h4&gt;

&lt;p&gt;I was expecting &lt;code&gt;LockOutEnabled&lt;/code&gt; will become &lt;code&gt;true (1)&lt;/code&gt; in the identity user table. It took me few hours to get to the documentation but it was stated clearly in the Library class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Microsoft.AspNetCore.Identity.IdentityUser

// Gets or sets a flag indicating if the user could be locked out.

public virtual bool LockoutEnabled { get; set; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I missed the &lt;strong&gt;could be&lt;/strong&gt;  and  it costed me some hours.üò™&lt;/p&gt;

&lt;p&gt;Updating this column to &lt;code&gt;true&lt;/code&gt; for necessary users then locks out the user for particular a time limit set in the &lt;code&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The proper logging and an error can be thrown with &lt;br&gt;
&lt;code&gt;result.IsLockedOut&lt;/code&gt; flag from the service layer üòÖ&lt;/p&gt;

&lt;p&gt;üìö References&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using  &lt;a href="https://stackoverflow.com/questions/53854051/usermanager-checkpasswordasync-vs-signinmanager-passwordsigninasync"&gt;UserManager.CheckPasswordAsync versus SignInManager.PasswordSignInAsync&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://code-maze.com/user-lockout-aspnet-core-identity/"&gt;User Lockout with ASP.NET Core Identity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>dotnet</category>
      <category>identity</category>
      <category>auth</category>
    </item>
    <item>
      <title>Logging vs Tracing: Why Logs Aren‚Äôt Enough to Debug Your Microservices</title>
      <author>Michael Haberman</author>
      <pubDate>Thu, 24 Jun 2021 15:10:51 +0000</pubDate>
      <link>https://dev.to/aspecto/logging-vs-tracing-why-logs-aren-t-enough-to-debug-your-microservices-4jgi</link>
      <guid>https://dev.to/aspecto/logging-vs-tracing-why-logs-aren-t-enough-to-debug-your-microservices-4jgi</guid>
      <description>&lt;p&gt;When debugging microservices, it can be challenging for developers to identify the root cause of issues. Not to mention how frustrating it is to search through endless logs across multiple services and the time it takes them.&lt;/p&gt;

&lt;p&gt;With all these challenges, however, there is a silver lining ‚Äî distributed tracing.&lt;/p&gt;

&lt;p&gt;Distributed tracing can help your developers with tracking requests across services (but more on that later).&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive into what is distributed tracing, its benefits, and the role it plays in your teams‚Äô system. Then we‚Äôll cover which tools developers can use to implement distributed tracing in a cloud native environment.&lt;/p&gt;

&lt;p&gt;But first, to understand where tracing fits in your microservices debugging process and why you might even need them in the first place, let‚Äôs identify the challenges that debugging with logs pose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-debugging-challenges"&gt;
  &lt;/a&gt;
  Log Debugging Challenges
&lt;/h2&gt;

&lt;p&gt;Logs can be very useful when we are trying to understand an unexpected response or a production failure. However, logs don‚Äôt have unlimited capabilities. Here are some of the challenges they pose for your developers when they are debugging microservices:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-logging-is-a-manual-timeconsuming-process"&gt;
  &lt;/a&gt;
  1. Logging Is a Manual Time-Consuming Process
&lt;/h3&gt;

&lt;p&gt;Adding logs is not an automatic process, and it requires a lot of meticulous, manual work. Identifying all the potential information that will be needed for debugging, adding the logs, removing them if necessary ‚Äì these all take a long time and require a lot of effort. Also, the process is error-prone. Developers might be spending a lot of time adding logs but will still miss the exact information they need in production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-its-hard-to-find-the-right-balance"&gt;
  &lt;/a&gt;
  2. It‚Äôs Hard to Find the Right Balance
&lt;/h3&gt;

&lt;p&gt;Developers need to ensure they have enough logs for debugging, but not too many logs so that the code is too heavy and they waste too much time on adding and analyzing them. It‚Äôs hard to create this balance. If they haven‚Äôt logged enough information, they‚Äôll miss data for debugging. If they logged too much, the process becomes resource-intensive and makes log analysis much more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-tracking-logs-across-services-is-difficult"&gt;
  &lt;/a&gt;
  3. Tracking Logs across Services Is Difficult
&lt;/h3&gt;

&lt;p&gt;Tracking and analyzing log entries across multiple services, containers, and processes is challenging. The developer has to be able to make sense of the relationship between all the different logs, which requires understanding the code flow in different services and correlating them to logs. They have to go through the process of transforming raw text (logs) into visualization in their minds.&lt;/p&gt;

&lt;p&gt;This takes a very, very long time.&lt;/p&gt;

&lt;p&gt;Even companies that have added unique identifiers to their instrumentation to enable tracking have difficulties maintaining and updating them. Not to mention ensuring all developers are up to speed about their homegrown identifier conventions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-logs-arent-standardized"&gt;
  &lt;/a&gt;
  4. Logs Aren‚Äôt Standardized
&lt;/h3&gt;

&lt;p&gt;Logs do not have a structured format, meaning that any developer can create messages and events according to their style. While this provides flexibility and freedom, it can be challenging and counter-productive for your team to try to understand someone else‚Äôs logs or to explain them.&lt;/p&gt;

&lt;p&gt;Also, lack of standardization leaves more room for human error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-debugging-fail"&gt;
  &lt;/a&gt;
  Log Debugging Fail
&lt;/h2&gt;

&lt;p&gt;As a result, logs won‚Äôt always provide the required information to solve performance and regressions. There are many solutions out there that try to overcome these challenges. These include standardization conventions, best practices, analysis tools, and more. But, maybe we need to realize that logging has its limitations and that your team needs another solution for debugging microservices.&lt;/p&gt;

&lt;p&gt;And that solution is tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What Is Distributed Tracing?
&lt;/h2&gt;

&lt;p&gt;Traces complement logs. While logs provide information about what happened inside the service, distributed tracing tells you what happened between services/components and their relationships. This is extremely important for microservices, where many issues are caused due to the failed integration between components.&lt;/p&gt;

&lt;p&gt;Also, logs are a manual developer tool and can be used for any level of activity ‚Äì a specific low-level detail, or a high-level action. This is also why there are many logging best practices available for developers to learn from. On the other hand, traces are generated automatically, providing the most complete understanding of the architecture.&lt;/p&gt;

&lt;p&gt;Distributed tracing is tracing that is adapted to a microservices architecture. Distributed tracing is designed to enable request tracking across autonomous services and modules, providing observability into cloud native systems.&lt;/p&gt;

&lt;p&gt;Distributed Tracing Advantages&lt;br&gt;
Where logging is bounded, distributed tracing thrives. Let‚Äôs see how distributed tracing answers logging limitations when it comes to debugging microservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-visualization"&gt;
  &lt;/a&gt;
  1. Visualization
&lt;/h3&gt;

&lt;p&gt;Traces are visual instrumentation. As opposed to text logs, with traces, developers don‚Äôt have to imagine the communication flows and make up an image in their minds. Instead, they can see it right before their eyes. This makes it easier for developers to understand the relationships between services and to resolve issues, like performance bottlenecks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08v4B-GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/339i89x8r7p9j1ai8qa1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08v4B-GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/339i89x8r7p9j1ai8qa1.png" alt="Logging vs Tracing Aspecto Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-automation"&gt;
  &lt;/a&gt;
  2. Automation
&lt;/h3&gt;

&lt;p&gt;Unlike logs, traces are automatic. Developers don‚Äôt have to make the manual effort of adding logs to get the complete picture. Instead, they automatically get a visualization of what happened. This also solved the standardization problem. With automated traces, the standardization is hard-coded in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-accelerate-timetomarket"&gt;
  &lt;/a&gt;
  3. Accelerate Time-to-Market
&lt;/h3&gt;

&lt;p&gt;Distributed tracing provides observability and a clear picture of the services. This improves productivity because it enables developers to spend less time trying to locate errors and debugging them, as the answers are more clearly presented to them. As a result, productivity is increased, and developers can spend more time developing features, (or taking a break), while you accelerate time-to-market.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-tracking-requests-across-services"&gt;
  &lt;/a&gt;
  4. Tracking Requests Across Services
&lt;/h3&gt;

&lt;p&gt;Microservices interactions span multiple services. Distributed tracing enables understanding the system and the relationships between components. This is done by tracking and recording all these requests through unique IDs that are passed to the services handling them. As a result, developers can see the flow and progression of the request across the entire architecture, which is often the hardest to understand when debugging. Your team‚Äôs code quality will improve immensely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-easy-to-use-and-implement"&gt;
  &lt;/a&gt;
  5. Easy to Use and Implement
&lt;/h3&gt;

&lt;p&gt;With the right setup, developers can work with multiple applications and across different programming languages. This is unique for distributed tracing and saves your team a lot of time and headaches, by not restricting you to one language or certain apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-insightful"&gt;
  &lt;/a&gt;
  6. Insightful
&lt;/h3&gt;

&lt;p&gt;Distributed tracing provides the developer with a lot of insightful information. This includes request time, information about components, latency, application health, and more. All this info can be useful when debugging and during root cause analysis, for improving code quality and resolving customer issues quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7VzzlbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai549kkx498qa26eblfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7VzzlbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai549kkx498qa26eblfn.png" alt="Timeline view Aspecto platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-we-use-distributed-tracing"&gt;
  &lt;/a&gt;
  When Should We Use Distributed Tracing?
&lt;/h2&gt;

&lt;p&gt;Great question! Here are the three main use cases in which distributed tracing can be helpful for you and your team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-for-a-distributedapplication-architecture"&gt;
  &lt;/a&gt;
  1. For a Distributed-Application Architecture
&lt;/h3&gt;

&lt;p&gt;If your department is using a distributed infrastructure, we highly recommend implementing distributed tracing. As you can see, this is the best method for tracking requests across services, with many teams involved and when you have complex processes in place.&lt;/p&gt;

&lt;p&gt;It makes sure you don‚Äôt waste your time trying to investigate issues across machines or, search through endless logs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-when-you-dont-know-which-problem-to-look-for"&gt;
  &lt;/a&gt;
  2. When You Don‚Äôt Know Which Problem to Look for
&lt;/h3&gt;

&lt;p&gt;One of the reasons developers end up with too many logs is that they want to cover themselves and make sure they have information for all and any scenario that could go wrong. But that‚Äôs the wrong approach. This is exactly what traces are for. Traces provide you with all the heaps of information you need to analyze yourself, without the disadvantages of logs. So if you don‚Äôt know what the problem is, you can analyze until you do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-when-you-need-observability"&gt;
  &lt;/a&gt;
  3. When You Need Observability
&lt;/h3&gt;

&lt;p&gt;Distributed traces provide you with visibility into the system and across all services and the relationships between them. You can see the journey requests went through, how long they took, insights into system health, and more. You can use distributed tracing not only for identifying why a problem occurred, but also to avoid problems with ongoing observability and tracking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#distributed-tracing-tools"&gt;
  &lt;/a&gt;
  Distributed Tracing Tools
&lt;/h2&gt;

&lt;p&gt;Hopefully, by now you‚Äôre convinced that distributed tracing can make your life easier, or at least shorten your debugging time. To get you started, here are three tools for your team to look into. These tools use an open-source called &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;, an observability framework for microservices and a member of the &lt;a href="https://cncf.io/?utm_content=inline-mention"&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the tracing tools that will complement your logging efforts, especially in a microservices architecture:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-jaeger"&gt;
  &lt;/a&gt;
  1. Jaeger
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; is an open-source, distributed tracing tool. It enables transaction monitoring, latency optimization, and advanced data analysis. Jaeger supports most common languages and requires running Kubernetes. &lt;a href="https://www.jaegertracing.io/download/"&gt;You can check it out here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kP-1VkCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44jmbbjpbu8qt09ikko8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kP-1VkCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44jmbbjpbu8qt09ikko8.png" alt="Jaeger UI view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-zipkin"&gt;
  &lt;/a&gt;
  2. Zipkin
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://zipkin.io/"&gt;Zipkin&lt;/a&gt;, an open-source tool very similar to Jaeger, and also provides all distributed tracing capabilities. For implementation, Zipkin doesn‚Äôt require containers. You can use Docker, &lt;a href="https://zipkin.io/pages/quickstart.html"&gt;but you don‚Äôt have to&lt;/a&gt;. The difference between the two is minor, and in the end, it comes to personal preferences and specific technology stack needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fqMKXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii8en4qugm0stsnp1v1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fqMKXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii8en4qugm0stsnp1v1y.png" alt="Zipkin UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-aspecto"&gt;
  &lt;/a&gt;
  3. Aspecto
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Aspecto&lt;/a&gt; is like the Chrome DevTools for your distributed applications, helping developers find, fix, and prevent distributed application issues across the entire development cycle. Starting with their local dev environment all the way to production.&lt;/p&gt;

&lt;p&gt;Aspecto is OpenTelemetry based, and the way it allows developers to prevent issues before they reach production is by implementing telemetry data that learns the system, then compares what they do locally to the production, staging, or other locals baseline data.&lt;/p&gt;

&lt;p&gt;This helps you to validate changes and prevent issues, live, while you develop.&lt;/p&gt;

&lt;p&gt;It‚Äôs super easy to &lt;a href="https://docs.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;install&lt;/a&gt; with a one-liner SDK, and you can give the &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Live Playground&lt;/a&gt; a spin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UU38GYcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5wjxtbr2phkdd9lkf1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UU38GYcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5wjxtbr2phkdd9lkf1s.png" alt="Aspecto platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Debugging with logs can only get you so far. By implementing distributed tracing, you can see your requests and services, and spend less time debugging. Try distributed tracing with an open-source tool, like &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; or &lt;a href="https://zipkin.io/"&gt;Zipkin&lt;/a&gt; and if you‚Äôre looking for that extra boost of predicting the effects of your changes, give &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices"&gt;Aspecto&lt;/a&gt; a try, for faster feedback and more visibility.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microservices</category>
      <category>debugging</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Build Your Own Blockchain in NodeJS</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 24 Jun 2021 14:59:34 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-build-your-own-blockchain-in-nodejs-3ijh</link>
      <guid>https://dev.to/codesphere/how-to-build-your-own-blockchain-in-nodejs-3ijh</guid>
      <description>&lt;p&gt;When we're trying to learn something new, it can oftentimes be tempting to dive headfirst into documentation, articles, and conceptual explanations. While all of that is certainly important, programmers have a great tool in their arsenal for understanding complex topics that they often take for granted.&lt;/p&gt;

&lt;p&gt;Building models for different topics in code can help us understand how different pieces of an idea fit together and operate in practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this tutorial, I'll show you how to build a rudimentary blockchain with some relatively simple Javascript.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#what-is-a-blockchain"&gt;
  &lt;/a&gt;
  What is a Blockchain?
&lt;/h3&gt;

&lt;p&gt;It can be helpful to think of blockchains as augmented linked lists, or arrays in which each element points to the preceding array.&lt;/p&gt;

&lt;p&gt;Within each block (equivalent to an element in an array) of the blockchain, there contains at least the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A timestamp of when the block was added to the chain&lt;/li&gt;
&lt;li&gt;Some sort of relevant data. In the case of a cryptocurrency, this data would store transactions, but blockchains can be helpful in storing much more than just transactions for a cryptocurrency&lt;/li&gt;
&lt;li&gt;The encrypted hash of the block that precedes it&lt;/li&gt;
&lt;li&gt;An encrypted hash based on the data contained within the block(Including the hash of the previous block)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key component that makes a blockchain so powerful is that embedded in each block's hash is the data of the previous block (stored through the previous block's hash). This means that if you alter the data of a block, you will alter its hash, and therefore invalidate the hashes of all future blocks.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-a%C2%A0block"&gt;
  &lt;/a&gt;
  Creating a¬†Block
&lt;/h3&gt;

&lt;p&gt;While this can probably be done with vanilla Javascript, for the sake of simplicity we are going to be making a Node.js script and be taking advantage of Node.js's built-in Crypto package to calculate our hashes.&lt;/p&gt;

&lt;p&gt;We can define a block in code like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note that we use SHA256 encryption to hash our function. This is the standard cryptographic hash function that is used in most blockchains because it is incredibly easy to calculate, but incredibly hard to reverse.&lt;/p&gt;

&lt;p&gt;We can then create instances of these blocks like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let a = new Block({from: "Joe", to: "Jane"}, precedingHash = "0")&lt;/code&gt;&lt;br&gt;
&lt;code&gt;let b = new Block({from: "Jane", to: "Joe"}, precedingHash = a.hash)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try printing out the hashes for these blocks and note how they are different. Also note that if you alter the data of the first block, the hashes of both will change.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-a-blockchain"&gt;
  &lt;/a&gt;
  Creating a Blockchain
&lt;/h3&gt;

&lt;p&gt;Now that we have our building blocks (pun intended), let's create a class for our chain. We can define it like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First, note that we call the initial block in the chain the Genesis Block. Since this block is the first in the chain, it cannot store any previous hash value.&lt;/p&gt;

&lt;p&gt;Next, we also created a function to check the validity of the blockchain to monitor tampering. We are checking for two possibilities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone tampered with the data and that the stored hash value is no longer the correct hash value&lt;/li&gt;
&lt;li&gt;Someone tampered with a previous block's data, and that the prevHash value stored is therefore incorrect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run that code and print out the value of the chain, you should be able to see how each block in the chain is storing both its own hash, and the hash of the prior block!&lt;/p&gt;




&lt;p&gt;That's all for this example, but if you want to get more comfortable with blockchain, I highly recommend playing around with this code and seeing what breaks the validity of the chain!&lt;br&gt;
Happy coding from your good friends at &lt;a href="https://link.codesphere.com/AK"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>node</category>
      <category>cryptocurrency</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Reverse Engineering a platform</title>
      <author>Hiram</author>
      <pubDate>Thu, 24 Jun 2021 14:30:05 +0000</pubDate>
      <link>https://dev.to/eichgi/reverse-engineering-a-platform-1ohh</link>
      <guid>https://dev.to/eichgi/reverse-engineering-a-platform-1ohh</guid>
      <description>&lt;p&gt;Hey folks, today's post is about a reverse engineering work I had to do for a platform and what I found by doing it üí™&lt;/p&gt;

&lt;p&gt;A while ago I acquired a web platform with an android client for a very entertaining project. The backend was written with Symfony 2.X and the client was a native android app written in Java.&lt;/p&gt;

&lt;p&gt;Long short story, the backend was a complete headache. I had to deal with different configurations for the server given it was aimed for PHP 7. A lot of deprecations had happened since then so you can picture it. The first setup was good enough, but I ran out of lucky for the 2nd ü§Ø, this led me to create my 100% (almost there) compatible backend.&lt;/p&gt;

&lt;p&gt;Version 1&lt;br&gt;
I started by consuming all API endpoints to figure out what responses look like. I blue-printed the web admin views to replicate the same functionality, and after a thorough debugging to the database I was able to create the same relations with some tweaks for a better integration. This work took me like two weeks but I ended up with an easier and well-known backend.&lt;/p&gt;

&lt;p&gt;The android app didn't require too many changes. I basically changed the interfaces, some texts translations and added some validations. Version 1 was a pretty straight forward work.&lt;/p&gt;

&lt;p&gt;Update to version 2:&lt;br&gt;
The mess came with the update, because I changed things and it was necessary to understand what should happen next in order to place it into the app. It costs me two rounds, and a hell of debugging. This is basically how you learn to reverse engineering, things must follow a flow and you need to chunk it into small pieces so they can fit. Discover the rules and validations might be the hardest part, try and failure over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fH-GwmpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/bf5435861513b64b9ae54eec103a6526/tenor.gif%3Fitemid%3D4614296" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fH-GwmpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/bf5435861513b64b9ae54eec103a6526/tenor.gif%3Fitemid%3D4614296" alt="Bob's sculpture"&gt;&lt;/a&gt;&lt;br&gt;
Graphic explanation, thanks bob&lt;/p&gt;

&lt;p&gt;Finally I could achieve the expected behavior and things continue working smoothly. It has been a good experience. Now that I have forked the project every new change is easier to me. I could go deeper with advanced android topics as well. This is a practice I completely recommend to everyone in their spare time. Keep coding and keep failing ‚úå&lt;/p&gt;

</description>
      <category>reverse</category>
      <category>engineer</category>
    </item>
    <item>
      <title>I made and launched a SAAS product in 43 days</title>
      <author>Robert Brunhage üíô</author>
      <pubDate>Thu, 24 Jun 2021 14:28:54 +0000</pubDate>
      <link>https://dev.to/robertbrunhage/i-made-and-launched-a-saas-product-in-43-days-n1c</link>
      <guid>https://dev.to/robertbrunhage/i-made-and-launched-a-saas-product-in-43-days-n1c</guid>
      <description>&lt;p&gt;Building a SaaS product in just &lt;strong&gt;43 days&lt;/strong&gt; have been a lot of fun, so let's deep dive in to it!&lt;/p&gt;

&lt;p&gt;This was originally posted over at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt; you can also find me over on  &lt;a href="https://twitter.com/robertbrunhage"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#and-just-to-be-transparent-here-is-the-first-commit-and-the-launch-tweet-of-krossaio"&gt;
  &lt;/a&gt;
  And just to be transparent, here is the first commit and the launch tweet of &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amHng-BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072424.png%3Falt%3Dmedia%26token%3Dcd78475a-b6ec-464b-8e14-2bb3a02da1a4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amHng-BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072424.png%3Falt%3Dmedia%26token%3Dcd78475a-b6ec-464b-8e14-2bb3a02da1a4" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HndWtxbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072541.png%3Falt%3Dmedia%26token%3D6b802f57-97b2-4f66-aebc-ccae73970597" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HndWtxbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/krossa-prod.appspot.com/o/e3IUXc1BFZTlvvaqD8xjvHlIy2q1%252Farticles%252FjQ9EDP2OeSOgqanNnXe9%252FScreenshot%25202021-05-14%2520072541.png%3Falt%3Dmedia%26token%3D6b802f57-97b2-4f66-aebc-ccae73970597" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yes, I regret not having a cool first commit...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;This is actually something I made together with &lt;a href="https://twitter.com/tadaspetra"&gt;Tadas Petra&lt;/a&gt; and both of us are content creators mostly focused on YouTube. Though we had an &lt;strong&gt;issue&lt;/strong&gt; which was that we wanted to both move in a bit to the blogging space.&lt;/p&gt;

&lt;p&gt;One issue with starting a blog is &lt;strong&gt;getting traffic&lt;/strong&gt;, now both of us could drive a bit of traffic from our YouTube channels but we thought that this wasn't enough, so we started doing something called "crossposting".&lt;/p&gt;

&lt;p&gt;Crossposting is when you take your original blog post let's say this one which is published at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt;, and publish it to other platforms as well, such as Medium, DevTo and Hashnode. The reason for this is that you can drive traffic from those platforms over to your website! I personally did this with adding a small message at the top or bottom saying something like "This was originally posted at ...".&lt;/p&gt;

&lt;p&gt;But just this simple thing of crossposting your blog could take &lt;strong&gt;A LOT of time&lt;/strong&gt;. For my first blog I did this with, took &lt;strong&gt;over an hour&lt;/strong&gt; which, let's be honest here... I wanted to spend on other things üòÖ (&lt;em&gt;Playing games and wasting time&lt;/em&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-solution"&gt;
  &lt;/a&gt;
  Building a Solution
&lt;/h2&gt;

&lt;p&gt;So we started researching about crossposting more on how to do it effectively which in the end mostly cut the time from a bit over an hour per post to about an hour. To us, &lt;strong&gt;these were no solutions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We thought about the idea of a platform that would do everything for you and this is the flow we came up with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your blogpost or import it&lt;/li&gt;
&lt;li&gt;Select the platforms&lt;/li&gt;
&lt;li&gt;Publish (either to draft or directly)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now a lot of things had to be done behind the scenes such as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formatting&lt;/strong&gt; the blog to look good on each platform.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;strong&gt;canonical url&lt;/strong&gt; would be set (makes sure the search engine is fine with multiple copies of the post).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A GREAT editor&lt;/strong&gt; to write in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-tech-stack"&gt;
  &lt;/a&gt;
  The Tech Stack
&lt;/h2&gt;

&lt;p&gt;TLDR of the stack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Firebase (Storage, Functions, Firestore)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason we went this route was that we had some requirements that made us go with Next.js such as being able to have a blog on the website and both of us prefer a typed language which TypeScript helped with!&lt;/p&gt;

&lt;p&gt;Now in my opinion the one that helped us create &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; in such a short amount of time is &lt;strong&gt;Firebase&lt;/strong&gt;. There were so many things handled for us right of the bat, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Subscription&lt;/strong&gt; with Stripe.&lt;/li&gt;
&lt;li&gt;Our &lt;strong&gt;previous knowledge&lt;/strong&gt; of it.&lt;/li&gt;
&lt;li&gt;Function to &lt;strong&gt;delete user data&lt;/strong&gt; when the user wants to delete their account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;We launched &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; in &lt;strong&gt;43 days&lt;/strong&gt; and we believe it will help A LOT of bloggers find their audience.&lt;/p&gt;

&lt;p&gt;The problem was that crossposting took too much time and this was our solution for a platform:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your blogpost or import it&lt;/li&gt;
&lt;li&gt;Select the platforms&lt;/li&gt;
&lt;li&gt;Publish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TLDR of the stack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Firebase (Storage, Functions, Firestore)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you found this interesting and you are a blogger or thinking about becoming one,consider &lt;a href="https://krossa.io"&gt;krossa.io&lt;/a&gt; as even this was posted from it üòé&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/robertbrunhage"&gt;Twitter&lt;/a&gt; and you can find the original blog post at &lt;a href="https://robertbrunhage.com"&gt;robertbrunhage.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/STp846IvtZw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>saas</category>
      <category>nextjs</category>
      <category>blogging</category>
    </item>
    <item>
      <title>Simple way to serialize objects to JSON in TypeScript</title>
      <author>Hans Ott</author>
      <pubDate>Thu, 24 Jun 2021 14:21:09 +0000</pubDate>
      <link>https://dev.to/hansott/simple-way-to-serialize-objects-to-json-in-typescript-27f5</link>
      <guid>https://dev.to/hansott/simple-way-to-serialize-objects-to-json-in-typescript-27f5</guid>
      <description>&lt;p&gt;When building an application we often need to serialize objects to JSON for storing them in a key value store (e.g. Redis) or publishing them on a queue.&lt;/p&gt;

&lt;p&gt;While there are libraries available like &lt;a href="https://github.com/typestack/class-transformer"&gt;class-transformer&lt;/a&gt; or &lt;a href="https://github.com/gcanti/io-ts"&gt;io-ts&lt;/a&gt;, there's an easier way to serialize/unserialize objects to JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/typestack/class-transformer"&gt;class-transformer&lt;/a&gt; depends on the &lt;code&gt;reflect-metadata&lt;/code&gt; package. Read &lt;a href="https://dev.to/svehla/why-reflect-metadata-suc-s-5fal"&gt;this blogpost&lt;/a&gt; to know why you should be careful with depending on this package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gcanti/io-ts"&gt;io-ts&lt;/a&gt; requires knowledge of some functional programming concepts. While I'm a big fan of functional programming, it's not for everyone. (The library is very well designed though)&lt;/p&gt;

&lt;p&gt;In both cases we also need to depend on an extra package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5"&gt;We want to keep our dependencies as small as possible.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What none of these packages offer is a way to deal with backwards compatibility (e.g. when you've added or renamed a property of an object).&lt;/p&gt;

&lt;p&gt;I also want something simple.&lt;/p&gt;

&lt;p&gt;Let's say we want to serialize a user with an email &lt;a href="https://martinfowler.com/bliki/ValueObject.html"&gt;value object&lt;/a&gt; to JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Not an email address: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;asString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User ID cannot be empty!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;fromSerialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toObject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serialized&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john.doe@acme.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromSerialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We add a &lt;code&gt;private toObject()&lt;/code&gt; method that returns a plain object for the &lt;code&gt;User&lt;/code&gt; (since JSON is not aware of classes).&lt;/li&gt;
&lt;li&gt;We add a &lt;code&gt;serialize()&lt;/code&gt; method that returns the plain object as a JSON string.&lt;/li&gt;
&lt;li&gt;We add a &lt;code&gt;static unserialize(serialized: string)&lt;/code&gt; method to recreate the &lt;code&gt;User&lt;/code&gt; instance. &lt;code&gt;JSON.parse&lt;/code&gt; has &lt;code&gt;any&lt;/code&gt; as return type, which results in no type checking or autocompletion. We can grab the return type of the &lt;code&gt;toObject()&lt;/code&gt; method with &lt;code&gt;ReturnType&amp;lt;User["toObject"]&amp;gt;&lt;/code&gt; to regain type checking/autocompletion.&lt;/li&gt;
&lt;li&gt;Always guard against invalid state in your entities. This makes sure that a &lt;code&gt;User&lt;/code&gt; always has an ID and a valid email address.&lt;/li&gt;
&lt;li&gt;Look ma, no packages needed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know if this blogpost was useful! üòä&lt;/p&gt;

</description>
      <category>typescript</category>
    </item>
    <item>
      <title>Javascript: Les op√©rateurs ...spread et ...REST </title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 24 Jun 2021 14:04:04 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</link>
      <guid>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</guid>
      <description>&lt;p&gt;Si vous d√©sirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;D√©finition&lt;/h2&gt;

&lt;p&gt;Op√©rateur &lt;em&gt;Spread&lt;/em&gt; : Permet de d√©construire les it√©rables (tableaux/objets/cha√Ænes) en √©l√©ments uniques.&lt;/p&gt;

&lt;p&gt;Op√©rateur &lt;em&gt;Rest&lt;/em&gt;: Rassemble tous les √©l√©ments restants dans un tableau.&lt;/p&gt;

&lt;h2&gt;Exemples Spread Operator&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour d√©construire un tableau&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Mike', 'Paul', 'John']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Mike Paul John&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour modifier/ajouter √† un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// ['Jack', 'Mike', 'Paul', 'John', 'David']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour copier un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour joindre 2 tableaux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;numbers1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour les strings √©galement&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ['M', 'i', 'k', 'e']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator comme param√™tres d'une fonction&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// sans spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// avec spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour d√©construire les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Utiliser le spread operator pour copier les valeurs d'un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// // Utiliser le spread operator pour √©tendre un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;creditLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;Exemples REST operator&lt;/h2&gt;

&lt;p&gt;Le REST operator fonctionne selon le m√™me principe que le spread operator mais du c√¥t√© gauche du '=' &lt;/p&gt;

&lt;p&gt;Le REST operator permet de d√©constuire l'assignation&lt;/p&gt;

&lt;p&gt;Le REST operator doit √™tre utiliser comme derni√®re assignation&lt;/p&gt;

&lt;p&gt;Toutes les valeurs non assign√© (avant l'ajout du REST) seront envoy√© dans le REST&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, [3, 4, 5]&lt;/span&gt;

&lt;span class="c1"&gt;// M√™me principe avec les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
&lt;span class="c1"&gt;// personName va assigner le "rest" des properties non utilis√©es&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 25, { firstName: 'Mike', lastName: 'Taylor' }&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les param√®tres&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Le REST operator va rassembler tous les param√®tre dans un tableau&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les autres param√®tres:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exemple, tous les autres param√®tres apr√®s mainText se retrouverons dans options&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>MERN Stack Authentication Tutorial (Part 1 - The Backend)</title>
      <author>SalarC123</author>
      <pubDate>Thu, 24 Jun 2021 14:00:17 +0000</pubDate>
      <link>https://dev.to/salarc123/mern-stack-authentication-tutorial-part-1-the-backend-1c57</link>
      <guid>https://dev.to/salarc123/mern-stack-authentication-tutorial-part-1-the-backend-1c57</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial will be split into two parts because its a lengthy, although relatively straightforward, process, so stay tuned for the second part that shows how to implement auth for the frontend (coming very soon). Sadly, we must start with the backend code because most of the authentication code is written here, but this entire process is very intuitive, so make sure to stick until the end!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction üëå
&lt;/h1&gt;

&lt;p&gt;This article requires that you have already connected your react frontend to your server, but if you haven't, you can check out my &lt;a href="https://dev.to/salarc123/how-to-connect-a-react-frontend-with-a-nodejs-express-backend-50i9"&gt;previous article&lt;/a&gt; about how to do that. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup ‚öôÔ∏è
&lt;/h1&gt;

&lt;p&gt;You must first install these 5 packages with npm or yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express
npm i bcrypt
npm i jsonwebtoken
npm i mongoose
npm i body-parser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why these packages?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;bcrypt&lt;/strong&gt; is used to hash the password we save to the database and is used later to verify that we entered the right token with each login&lt;/li&gt;
&lt;li&gt;I will explain JSON Web Tokens (JWTs) more later on but in short, the &lt;strong&gt;jsonwebtoken&lt;/strong&gt; package is used to authorize a user (by the way, authorize means to check whether a user has access to a certain resource or route whereas authenticate means to verify that a user is who they claim to be which happens during the login process)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;mongoose&lt;/strong&gt; is used to connect to our database, but I won't really explain the nitty gritty details of it because this tutorial is about authentication&lt;/li&gt;
&lt;li&gt;Lastly, we have &lt;strong&gt;body-parser&lt;/strong&gt; which just allows us to access post data from React in our post requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we start, we need to create a file structure that looks something like this (I'll explain the purpose of the models directory and users file soon)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jdw833kT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slxqdmgx6mhkylzoh780.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jdw833kT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slxqdmgx6mhkylzoh780.png" alt="Carbon.now.sh Code Snippet"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The snippet below shows the basic setup of our server.js file and includes connecting to the database as well as including some required body-parser middleware. To get your dbURI, you need to create a collection on &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;MongoDB Atlas&lt;/a&gt;, but make sure to save your username and password in environment variables and not directly in the string like I did in my example below&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverjs"&gt;
  &lt;/a&gt;
  server.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NYkB9YOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6x5kugi0oypb8dlitf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NYkB9YOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6x5kugi0oypb8dlitf6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mongoose-user-schema"&gt;
  &lt;/a&gt;
  Mongoose User Schema ü¶°
&lt;/h1&gt;

&lt;p&gt;The next step is creating a model that describes how each user will be structured in our database. Typically, users are modeled as an object with these five properties: username, email, password, and id when they were created. MongoDB provides us with the id, but we have to show mongoose what the rest of the data will look like. We can do this by using a Schema which takes in an object representing our data. This model will be called upon later when we create our register route because each user will need to utilize it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modelsuserjs"&gt;
  &lt;/a&gt;
  /models/user.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5JvM9Bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn07z5o0hj5384kjuyvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5JvM9Bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn07z5o0hj5384kjuyvf.png" alt="Carbon.now.sh Code Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the snippet above, you can see that we need to specify the data type of each item and whether it should be required by the user or not. In this case, every field is required, and we even have a second parameter that lets us set timestamps for the creation of the database entry.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register"&gt;
  &lt;/a&gt;
  Register
&lt;/h1&gt;

&lt;p&gt;We haven't created the frontend for our registration system yet, but pretend that we have a field for a username, email, and password that posts a JSON object with this data to our "/register" route. Our body parser middleware from above will allow us to access this post data in &lt;code&gt;req.body&lt;/code&gt; But first, let's require some helpful modules at the top of our server.js file. JWTs will be used for the login system, but the register route needs access to the User schema and bcrypt as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverjs"&gt;
  &lt;/a&gt;
  server.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9AEHtvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq3t9umalv4f2rtd4waq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9AEHtvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq3t9umalv4f2rtd4waq.png" alt="Carbon.now.sh Code Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we must actually register the user by placing their info into the database as shown in the code snippet below. We start by checking if the username or email is already in the database through mongoose's findOne method with an object providing what we are looking for. Also, make sure that the &lt;code&gt;findOne&lt;/code&gt; method is on the User model that we imported from our user.js file and that it is awaited because we don't want to have our if statement happen before we check if the username or email is in the database. After confirming that a user is not already in the database, we use bcrypt to hash the password. The second parameter of bcrypt's hash method describes how many rounds the hashing algorithm should perform, so for mine it would go 2^10 or 1024 times. The higher the number, the harder it is for the password to be brute forced but the more processing time is required. Finally, we can create the user in the database by describing their information in the same way that you specified in the user schema in user.js. We then save it using the &lt;code&gt;.save()&lt;/code&gt; method which is asynchronous and can be awaited if you need to do further actions once the database has been updated. One last note about this process is that you should try to keep your res.json() calls consistent for an entire route by having the same keys so that your frontend does not receive &lt;code&gt;undefined&lt;/code&gt; when trying to access properties from a server response. This is why I have "message" as a key in all of my res.json() calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverjs"&gt;
  &lt;/a&gt;
  server.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFfv4VXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jogfsvpk7q7e9ml86109.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFfv4VXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jogfsvpk7q7e9ml86109.png" alt="Carbon.now.sh Code Snippet"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Before we move any further, our server.js file will get pretty complicated from the login system, so I would advise that you create a separate file for authentication routes and import it into your server.js file (Read about how to do that in &lt;a href="https://riptutorial.com/express/example/16315/multiple-routes"&gt;this tutorial&lt;/a&gt;. For simplicity's sake and because this application has no other features right now, I'm shoving everything into server.js, but this isn't a good practice, so be wary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-jwts"&gt;
  &lt;/a&gt;
  What are JWTs üîë
&lt;/h1&gt;

&lt;p&gt;Understanding JWTs is an important prerequisite to creating a login route, so I'll explain what they are first. When thinking about how to create an authentication system, you might have pondered over how your application remembers which user is logged in so that it could serve them custom content. &lt;/p&gt;

&lt;p&gt;Well, JSON web tokens let you do that. They are encrypted hashes generated on every login that must be decoded to confirm which user is trying to access a resource. When a user logs in, the server will send a token that describes a certain user to the frontend, and that token can then be saved in either localStorage or cookies (so that the token is not lost when the user refreshes the page).&lt;/p&gt;

&lt;p&gt;If that's still a little confusing, here's an analogy that I hope can clear it up: You are at a fair (the website) and to get in, you need a ticket (jwt) to get in and access rides (protected routes). Whenever, you want to get on a ride, your ticket (jwt) needs to be verified. If you rip up your ticket, then it becomes destroyed and you can't access rides anymore (deleting your token from localStorage). This means that you're logged out and need to go back to the ticket stand to get another ticket (log back in). And if you come back the next day, your ticket won't be valid anymore (JWTs expire after a specified amount of time). &lt;/p&gt;

&lt;p&gt;We will start by creating the logic to create a token when the user logs in, and then we will make a middleware function that verifies the token and is applied to every route that we want to protect.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sign-json-web-token-login"&gt;
  &lt;/a&gt;
  Sign JSON Web Token / Login ‚úçÔ∏è
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvybuGIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgb4iqcrpzh547175mve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvybuGIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgb4iqcrpzh547175mve.png" alt="Carbon.now.sh Code Snippet"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now bear with me. The code above looks monstrous, but it's actually relatively simple. Let me explain how. This is the login post request where we start by taking in the user information and searching the database for the username. Since this returns a promise, we attach a &lt;code&gt;.then&lt;/code&gt; to check if the user exists, and if they don't, we send back a message saying that the username or password is invalid. Pretty simple so far, right? If the user exists, we then validate the password with crypto's compare method which also returns a promise. If this promise resolves, we move on to "signing" the JWT which means that we create the token and send it to the front end. The first parameter of &lt;code&gt;jwt.sign&lt;/code&gt; is a payload which is basically the information that you get when you decode the jwt later on. It's ideal to put any information about the current user here, so the username, id, and email should probably go here, especially if your app has a profile page for the current user. The next parameter is a secret key used for encryption which you should store in your environment variables, and the third parameter is an options object in which I specified how long before a token should expire (86400 seconds is equal to 1 day). You can also specify the encryption algorithm here. Finally, the fourth parameter is a callback which you can use to signal a success to the frontend and send the token to be stored on the client side. We need to prepend "Bearer " to the token because it specifies that we're using token based authentication. The alternatives are Basic and Digest authentication which utilize a username and a secret key instead. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#verify-json-web-token"&gt;
  &lt;/a&gt;
  Verify JSON Web Token üîì
&lt;/h1&gt;

&lt;p&gt;Now that we have created a JWT, thus letting a user sign in, we need a way to verify that the same user who logged in is accessing a route. Conveniently the jsonwebtoken library has a &lt;code&gt;.verify()&lt;/code&gt; method which helps us do this.&lt;/p&gt;

&lt;p&gt;We can create a middleware function to verify a user that is placed before every route we want to protect. If the verification fails, next() is not called in the middleware function and the user can't access data from a certain route. And instead, we can send back an object with properties describing the access capabilities of the user. We can set an isLoggedIn method to false if the verification fails, but if it passes, we can advance to the route and send back isLoggedIn set to true. If we advance to the next route, we can also utilize properties of the specific user that we decoded from the JWT inside of the route call. For example, we can use &lt;code&gt;req.user&lt;/code&gt; and set the decoded username and id to &lt;code&gt;req.user.id&lt;/code&gt; and &lt;code&gt;req.user.username&lt;/code&gt; as shown in the code below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tCC55Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6bj681q4eagjlp7c4t0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tCC55Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6bj681q4eagjlp7c4t0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the code, we start by getting the token from the request headers, so in our front end, we need to set a header called "x-access-token" and set it to the token which we can get from localStorage. We then split it to remove the "Bearer" which we tagged on earlier because all we need is the token. We then call jwt.verify() which takes in the token, the same secret key we used to sign the token and then a callback which takes in a &lt;code&gt;decoded&lt;/code&gt; parameter that holds the current user data. Since we set the req.user data below that, the next route that comes will have access to the req.user data as well. Lastly, if the token does not exist or fails to authenticate, you can see that we send &lt;code&gt;{isLoggedIn: false}&lt;/code&gt; back to the client side which will redirect the user (we will use react-router to do this)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#accessing-the-current-user"&gt;
  &lt;/a&gt;
  Accessing The Current User üßî
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djEZutgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7rcd1pmpfyr6964jk74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djEZutgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7rcd1pmpfyr6964jk74.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here you can see that passing in the verifyJWT middleware as the second parameter to app.get() lets us access the current user's data in whichever route we would like&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#logging-out"&gt;
  &lt;/a&gt;
  Logging Out üö∂‚Äç‚ôÇÔ∏è
&lt;/h1&gt;

&lt;p&gt;When you delete the token from localStorage (which can be done through a simple button click that calls &lt;code&gt;localStorage.setItem("token", "")&lt;/code&gt;), the verifyJWT middleware will fail and thus send a response that has isLoggedIn set to false. If your frontend handles that correctly (which I will discuss how to do in my next article), you can redirect the user to the login page whenever this response is received&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion üëã
&lt;/h1&gt;

&lt;p&gt;Before the frontend code is made, you can still test the server code by using Postman, which I strongly advise doing because this code might not fit into your codebase perfectly or there might be small changes in the imported packages that change some of the functionality shown above. &lt;/p&gt;

&lt;p&gt;Anyways, a lot of work went in to this tutorial, so please leave feedback to help me perfect it, or leave a like if this helped you out. Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Homework Hacks: 10 Tips To Get SAS Tasks Done Faster </title>
      <author>allanweb</author>
      <pubDate>Thu, 24 Jun 2021 13:56:06 +0000</pubDate>
      <link>https://dev.to/allanweb/homework-hacks-10-tips-to-get-sas-tasks-done-faster-2pbj</link>
      <guid>https://dev.to/allanweb/homework-hacks-10-tips-to-get-sas-tasks-done-faster-2pbj</guid>
      <description>&lt;p&gt;Studying coding assumes overworking and facing continuous tension. Students are not always ready for such an enormous schedule and strict deadlines they have to face after enrolling in a programming course. Some students choose to get support from coding services requesting, "Please, &lt;a href="https://mycodinghomework.com/do-my-sas-homework/"&gt;do my SAS programming homework&lt;/a&gt;." However, proactive students who already have enough experience coping with a vast amount of coding tasks have many working hacks. We collected these tips to share with you to help you to get your tasks done faster. Read on to get more helpful information below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understand-the-task"&gt;
  &lt;/a&gt;
  Understand the task
&lt;/h2&gt;

&lt;p&gt;You would require reading the details of your future SAS program first. Usually, professors provide students with detailed instructions that contain information on the goals and requirements. Do not begin working if some points of the task are left unclear for you. If you would start working without understanding the assignment, you could be forced to remake it. That is why we recommend always asking your professor for any minor points regarding the task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-your-time"&gt;
  &lt;/a&gt;
  Plan your time
&lt;/h2&gt;

&lt;p&gt;There is a lot of effectiveness in the quality pre-planning of your working time. Your life would become much easier with a habit of exact scheduling periods for your working activities. The best way to develop such a habit is to begin planning small actions such as working on your SAS homework. If you want to be effective and fast when coping with your programming assignments, take time to resolve all your time management issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-for-the-help-of-a-programming-service"&gt;
  &lt;/a&gt;
  Apply for the help of a programming service
&lt;/h2&gt;

&lt;p&gt;Some students are as much overloaded with their SAS tasks that they do not have enough time to complete them all. We recommend using a working and effective solution for such pity situations and apply to a coding support service. By writing a request, you would speedily receive a reply from a skilled expert. Prominent experts in coding can resolve any SAS task efficiently and effectively. You would be surprised by finding out how many students reach out to support such services and save their GPA regularly. It is a working and confidential way to get your tasks done faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take breaks
&lt;/h2&gt;

&lt;p&gt;Your effectiveness would be boosted if you would take breaks each hour. This advice may sound unobvious as when you are running out of time and want to finish your task faster, you treasure every minute. To be motivated and feel comfortable while working, we recommend you take breaks each hour. Small 10-15 minute breaks would be better to spend fresh breathing air, walking in the park, drinking clean water, etc. The process of SAS programming would become plain if you took rest regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comment-codes"&gt;
  &lt;/a&gt;
  Comment codes
&lt;/h2&gt;

&lt;p&gt;When you are completing SAS homework and need to cope with the assignment fast, commenting is not the main thing you are thinking about. However, we do not recommend you skip this vital step of coding. Your teacher would get your points much easier thanks to comments, and it would sufficiently influence your grade points. In addition, by developing skills and a habit to comment on your codes. Even in half a year, you would easily recall the core points of the code thanks to comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-the-processes"&gt;
  &lt;/a&gt;
  Simplify the processes
&lt;/h2&gt;

&lt;p&gt;To become faster at completing your SAS tasks, you would require to keep it as simple as possible when it comes to process. The approach of skilled SAS coders is in continuous revising of their programs to simplify them. Take a critical look at your task when it would be done. Some steps might be unnecessary or doubled. By reducing them, you would keep it plain. Another working hack from skilled coders is to define which of the code elements you can combine to make a function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-pseudocodes"&gt;
  &lt;/a&gt;
  Use pseudocodes
&lt;/h2&gt;

&lt;p&gt;When it comes to SAS programming assignments, you can sufficiently economize time and boost effectiveness by using pseudocodes and algorithms. Before you create the final version of a programming solution, you can write it in the form of pseudocode previously. It would help you to avoid errors, and the work would be done much more accessible. In other words, pseudocode is an algorithm that describes each step you have to complete while finishing your coding task. It can be compared to a draft of a paper that you write in text form. You do not need to pay a lot of attention to syntax at the stage of creating pseudocode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-care-of-your-surrounding"&gt;
  &lt;/a&gt;
  Take care of your surrounding
&lt;/h2&gt;

&lt;p&gt;Your working place must be clean, quiet, and comfortable. Look for a room where you could sit and work alone without loud voices and sounds from the street. If you cannot work quietly in your room, go to the library with your laptop and find a table that would guarantee you privacy for at least 3-4 hours. A peaceful and calm atmosphere would make you very productive, and you would be able to finish tasks faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drink-enough-water-and-eat-healthily"&gt;
  &lt;/a&gt;
  Drink enough water and eat healthily
&lt;/h2&gt;

&lt;p&gt;Your motivation correlates with your physical condition more than you could imagine. Keep your body well hydrated by drinking enough water and regularly eating when working on your tasks. When the human brain does not get enough energy that comes with quality nutrition, your cognitive functions become worse. So take care of your body to stay in the working mood and cope with your tasks faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-well-motivated"&gt;
  &lt;/a&gt;
  Be well motivated
&lt;/h2&gt;

&lt;p&gt;Understand your goals and keep in mind the path that would lead to their achievement. Your motivation is crucial when it comes to complex SAS assignments. If you are willing to become a proficient coder, you must understand why you are learning this course and how your life would change for to better if you finish your work successfully. For example, you can think about your future career in an IT company of your dream.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We believe these homework hacks and tips to get your tasks done faster were helpful for you. To make the process efficient and speedy, you would require planning your steps before. In addition, simplifying steps and combining some of the program elements to function would make the program better. By using pseudocodes, you would sufficiently ease the process as well. Do not forget to take care of your working place and take breaks regularly. Note that motivation is the key to success and understand your goals.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to wrap a Preact component into a Stimulus controller</title>
      <author>rhymes</author>
      <pubDate>Thu, 24 Jun 2021 13:51:54 +0000</pubDate>
      <link>https://dev.to/devteam/how-to-wrap-a-preact-component-into-a-stimulus-controller-1bd0</link>
      <guid>https://dev.to/devteam/how-to-wrap-a-preact-component-into-a-stimulus-controller-1bd0</guid>
      <description>&lt;p&gt;In this post I'm going to illustrate the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrapping a Preact component inside a Stimulus controller&lt;/li&gt;
&lt;li&gt;loading Preact and the component asynchronously on demand&lt;/li&gt;
&lt;li&gt;communicating with the wrapped component via JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent"&gt;custom events&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is partly based on work &lt;a class="mentioned-user" href="https://dev.to/s_aitchison"&gt;@s_aitchison&lt;/a&gt;
 did &lt;a href="https://github.com/forem/forem/pull/12511"&gt;last February on Forem&lt;/a&gt;. Forem's public website uses Preact and vanilla JavaScript. Some of Forem's Admin views are using Stimulus. This is an example of how to recycle frontend components from one framework to another.&lt;/p&gt;

&lt;p&gt;I'm also assuming the reader has some familiarity with both Preact and Stimulus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-the-component"&gt;
  &lt;/a&gt;
  Wrapping the component
&lt;/h2&gt;

&lt;p&gt;Yesterday I was working on some Admin interactions and I wanted to reuse &lt;a href="https://storybook.dev.to/?path=/story/app-components-snackbar-snackbar--simulate-adding-snackbar-items"&gt;Forem's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nh7pDfx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3oipmo4hf7jv0zo0ype.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nh7pDfx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3oipmo4hf7jv0zo0ype.png" alt="Example of Snackbar component in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it is implemented inside Preact is not important for our purposes and I haven't checked either, I just know its module exports &lt;code&gt;Snackbar&lt;/code&gt; and a function &lt;code&gt;addSnackbarItem&lt;/code&gt; to operate it.&lt;/p&gt;

&lt;p&gt;As the screenshot shows, it is similar to &lt;a href="https://material.io/components/snackbars"&gt;Material's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;, as it provides &lt;em&gt;brief messages about app processes at the bottom of the screen&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind and with the groundwork laid by Suzanne Aitchison on &lt;a href="https://github.com/forem/forem/blob/main/app/javascript/admin/controllers/modal_controller.js"&gt;a different component&lt;/a&gt;, I wrote the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Wraps the Preact Snackbar component into a Stimulus controller&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SnackbarController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="c1"&gt;// eslint-disable-next-line import/no-unresolved&lt;/span&gt;
      &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;lifespan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Any controller (or vanilla JS) can add an item to the Snackbar by dispatching a custom event.&lt;/span&gt;
  &lt;span class="c1"&gt;// Stimulus needs to listen via this HTML's attribute: data-action="snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go over it piece by piece.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-a-container"&gt;
  &lt;/a&gt;
  Defining a container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most Preact components need a container to render in. In Stimulus lingo we need to define a "target", which is how the framework calls important HTML elements referenced inside its controller (the main class to organize code in).&lt;/p&gt;

&lt;p&gt;This is defined as a regular HTML &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-snackbar-target=&lt;/span&gt;&lt;span class="s"&gt;"snackZone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the controller, this element can be accessed as &lt;code&gt;this.snackZoneTarget&lt;/code&gt;. &lt;a href="https://stimulus.hotwire.dev/reference/targets"&gt;Stimulus documentation has more information on targets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;snackZone&lt;/em&gt; is just how the &lt;code&gt;Snackbar&lt;/code&gt;'s container is called inside Forem's frontend code, I kept the name :D)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mounting-and-unmounting-the-component"&gt;
  &lt;/a&gt;
  Mounting and unmounting the component
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Snackbar&lt;/code&gt; component, when initialized, doesn't render anything visible to the user. It waits for a message to be added to the stack of disappearing messages that are shown to the user after an action is performed. For this reason, we can use Stimulus lifecycle callbacks to mount it and unmount it.&lt;/p&gt;

&lt;p&gt;Stimulus &lt;a href="https://stimulus.hotwire.dev/reference/lifecycle-callbacks"&gt;provides two aptly named callbacks&lt;/a&gt;, &lt;code&gt;connect()&lt;/code&gt; and &lt;code&gt;disconnect()&lt;/code&gt;, that we can use to initialize and cleanup our Preact component.&lt;/p&gt;

&lt;p&gt;When the Stimulus controller is attached to the page, it will call the &lt;code&gt;connect()&lt;/code&gt; method, in our case we take advantage of this by loading Preact and the Snackbar component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;lifespan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we accomplish the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;asynchronously load Preact, importing &lt;a href="https://preactjs.com/guide/v10/api-reference#render"&gt;its renderer function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;asynchronously load &lt;a href="https://storybook.dev.to/?path=/story/app-components-snackbar-snackbar--simulate-adding-snackbar-items"&gt;Forem's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;rendering the component inside the container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be "good citizens" we also want to clean up when the controller is disconnected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This destroys Preact's component whenever Stimulus unloads its controller from the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-with-the-component"&gt;
  &lt;/a&gt;
  Communicating with the component
&lt;/h3&gt;

&lt;p&gt;Now that we know how to embed Preact into Stimulus, how do we send messages? This is where the JavaScript magic lies :-)&lt;/p&gt;

&lt;p&gt;Generally, good software design teaches us to avoid coupling components of any type, regardless if we're talking about JavaScript modules, Ruby classes, entire software subsystems and so on.&lt;/p&gt;

&lt;p&gt;JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent"&gt;CustomEvent Web API&lt;/a&gt; comes to the rescue.&lt;/p&gt;

&lt;p&gt;With it it's possible to lean in the standard pub/sub architecture that JavaScript developers are familiar with: an element listens to an event, handles it with a handler and an action on another element triggers an event. The first element is the subscriber, the element triggering the event is the publisher.&lt;/p&gt;

&lt;p&gt;With this is mind: what are Stimulus controllers if not also global event subscribers, reacting to changes?&lt;/p&gt;

&lt;p&gt;First we need to tell Stimulus to listen to a custom event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"snackbar"&lt;/span&gt;
  &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;data-controller="snackbar"&lt;/code&gt; attaches Stimulus &lt;code&gt;SnackbarController&lt;/code&gt;, defined in the first section of this post, to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data-action="snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/code&gt; instructs the framework to listen to the custom event &lt;code&gt;snackbar:add&lt;/code&gt; on &lt;code&gt;window.document&lt;/code&gt; and when received to send it to the &lt;code&gt;SnackbarController&lt;/code&gt; by invoking its &lt;code&gt;addItem&lt;/code&gt; method acting as en event handler.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addItem&lt;/code&gt; is defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The handler extracts, from the event custom payload, the message and a boolean that, if true, will display a button to dismiss the message. It then imports the method &lt;code&gt;addSnackbarItem&lt;/code&gt; and invokes it with the correct arguments, to display a message to the user.&lt;/p&gt;

&lt;p&gt;The missing piece in our "pub/sub" architecture is the published, that is given us for free via the Web API &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"&gt;&lt;code&gt;EventTarget.dispatchEvent&lt;/code&gt;&lt;/a&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addCloseButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addCloseButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The great advantage is that the publisher doesn't need to inside Stimulus at all, it can be any JavaScript function reacting to an action: the network, the user or any DOM event.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CustomEvent&lt;/code&gt; interface is straightforward and flexible enough that can be used to create more advanced patterns like the, now defunct, &lt;a href="https://v3.vuejs.org/guide/migration/events-api.html#events-api"&gt;Vue Events API&lt;/a&gt; which provided a global event bus in the page, out of scope for this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEpy1gKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerjfpqnqg5ekushl114.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEpy1gKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerjfpqnqg5ekushl114.gif" alt="Video demo of Snackbar wrapped in Stimulus and invoked via dispatchEvent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this showed you a strategy of reuse when you're presented with multiple frameworks that have to interact with each other on a page.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>preact</category>
      <category>stimulus</category>
    </item>
    <item>
      <title>How To make your css text look impressive</title>
      <author>Orange_Abstrakt</author>
      <pubDate>Thu, 24 Jun 2021 13:45:43 +0000</pubDate>
      <link>https://dev.to/orange_abstrakt/how-to-make-your-css-text-look-impressive-1p3l</link>
      <guid>https://dev.to/orange_abstrakt/how-to-make-your-css-text-look-impressive-1p3l</guid>
      <description>&lt;p&gt;Headings, titles, subheadings etc tell the user about your website. They also take up a lot of the space. So naturally to attract more people and to make your website much more aesthetically beautiful and impressive you can style your text.&lt;/p&gt;

&lt;p&gt;Now which style should you choose?&lt;br&gt;
This totally depends on your likes and dislikes. Try a few and see which one goes best with your site. Now without any further ado lets see some simple yet amazing ways of styling your html text.&lt;/p&gt;

&lt;p&gt;1) Gradient Text&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SKbN0vJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9e1ovi4ou7dyjg51lcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SKbN0vJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9e1ovi4ou7dyjg51lcn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gradients add a certain feel to your website that really makes your site stand out. Now changing the background to a gradient is fairly simple and common knowledge. Text Gradients can be slightly trickier but they are totally worth it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Orange_abstrakt/embed/XWMLoOG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Once you have picked the font and set the size you can start coding your gradient text.&lt;br&gt;
~The background property can be set to linear-gradient(color1, color2).&lt;br&gt;
~Then we clip the gradient to the text. The ‚Äúbackground-clip: text‚Äù is supported in all main browsers with the Webkit prefix, it allows a background image to be clipped by a text element.&lt;br&gt;
~Finally you remove the text fill color by setting it to transparent.&lt;/p&gt;

&lt;p&gt;2) LED-text&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LzMeQTJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dnjajdrslsrk7fg90j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LzMeQTJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dnjajdrslsrk7fg90j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives the element an Led-like feel and really helps bring your site to life.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Orange_abstrakt/embed/NWpZoPY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Set the size for your text and select a font. I usually use Brush Script mt for this style as it really adds to the LED theme. Once done set the color(white looks the best). &lt;br&gt;
Now comes the interesting part. Using the text-shadow property we can very easily Make our LED text.&lt;br&gt;
Now the text shadow takes in maximum 4 values. the first is the x-offset, second is the y-offset, 3rd is the blur radius and finally the color. &lt;br&gt;
For this effect we want the shadow to be at the same position as the text therefore the first 2 values are 0px. Then we add a blur radius of 7px, 10px and 21px and set the color to white. This makes the center bright. Now we add a shadow of a color of our choice with larger blur radii.&lt;/p&gt;

&lt;p&gt;That is all for today. Let me know if you want more text designs. This is my first post on this website so I wanted to keep it short and see the feedback. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>design</category>
    </item>
    <item>
      <title>How Python and BeautifulSoup Will Help You Scrape listings from Airbnb?
</title>
      <author>X-Byte Enterprise Crawling</author>
      <pubDate>Thu, 24 Jun 2021 13:42:49 +0000</pubDate>
      <link>https://dev.to/xbyteio/how-python-and-beautifulsoup-will-help-you-scrape-listings-from-airbnb-4393</link>
      <guid>https://dev.to/xbyteio/how-python-and-beautifulsoup-will-help-you-scrape-listings-from-airbnb-4393</guid>
      <description>&lt;p&gt;Scraping Airbnb listings from various websites is among the most popular Web Scraping apps that help to scrape listings from Airbnb with Python and BeautifulSoup. This might be done by keeping an eye on the rates, building an aggregator, or improving the user experience on current hotel booking services.&lt;/p&gt;

&lt;p&gt;This can be accomplished using a simple code. We will use BeautifulSoup to extract data and information from Airbnb.com.&lt;br&gt;
To begin with, we will prefer to use some codes to extract data from Airbnb.com search pages and configure BeautifulSoup in assisting inquiring the page for useful data using CSS selectors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-coding-utf8-"&gt;
  &lt;/a&gt;
  -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-
&lt;/h1&gt;

&lt;p&gt;from bs4 import BeautifulSoup&lt;br&gt;
import requestsheaders = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9'}&lt;br&gt;
url = '&lt;a href="https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New"&gt;https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New&lt;/a&gt; York, NY, United States&amp;amp;checkin=2020-03-12&amp;amp;checkout=2020-03-19&amp;amp;adults=4&amp;amp;children=1&amp;amp;infants=0&amp;amp;guests=5&amp;amp;place_id=ChIJOwg_06VPwokRYv534QaPC8g&amp;amp;refinement_paths[]=/for_you&amp;amp;toddlers=0&amp;amp;source=mc_search_bar&amp;amp;search_type=unknown'response=requests.get(url,headers=headers)&lt;br&gt;
soup=BeautifulSoup(response.content,'lxml')&lt;/p&gt;

&lt;p&gt;To get blocked, we are also passing the user agent headers to fake a browser call.&lt;/p&gt;

&lt;p&gt;Now, let us look at the Airbnb consequences for a certain destination. The below image shows how does it look.&lt;/p&gt;

&lt;p&gt;When we look at the website, we notice that each HTML item is included within a tag that includes the attribute itemprop and the value itemListElement.&lt;/p&gt;

&lt;p&gt;We can simply divide the HTML document into these cards, each of which contains personal item data, as shown below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-coding-utf8-"&gt;
  &lt;/a&gt;
  -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-
&lt;/h1&gt;

&lt;p&gt;from bs4 import BeautifulSoup&lt;br&gt;
import requestsheaders = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9'}&lt;br&gt;
url = '&lt;a href="https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New"&gt;https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New&lt;/a&gt; York, NY, United States&amp;amp;checkin=2020-03-12&amp;amp;checkout=2020-03-19&amp;amp;adults=4&amp;amp;children=1&amp;amp;infants=0&amp;amp;guests=5&amp;amp;place_id=ChIJOwg_06VPwokRYv534QaPC8g&amp;amp;refinement_paths[]=/for_you&amp;amp;toddlers=0&amp;amp;source=mc_search_bar&amp;amp;search_type=unknown'response=requests.get(url,headers=headers)&lt;br&gt;
soup=BeautifulSoup(response.content,'lxml')#print(soup.select('.a-carousel-card')[0].get_text())for item in soup.select('[itemprop=itemListElement]'):&lt;br&gt;
    try:&lt;br&gt;
        print('----------------------------------------')&lt;br&gt;
        print(item)&lt;br&gt;
        print('----------------------------------------')&lt;br&gt;
    except Exception as e:&lt;br&gt;
        #raise e&lt;br&gt;
        print('')&lt;br&gt;
Once you run the code:&lt;br&gt;
python3 scrapeAirbnb.py&lt;br&gt;
You can see that the code isolates the HTML cards..&lt;/p&gt;

&lt;p&gt;On closer inspection, the name of the bed and breakfast always includes the area-label property. So let‚Äôs see if we can get it back.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-coding-utf8-"&gt;
  &lt;/a&gt;
  -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-
&lt;/h1&gt;

&lt;p&gt;from bs4 import BeautifulSoup&lt;br&gt;
import requestsheaders = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9'}&lt;br&gt;
url = '&lt;a href="https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New"&gt;https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New&lt;/a&gt; York, NY, United States&amp;amp;checkin=2020-03-12&amp;amp;checkout=2020-03-19&amp;amp;adults=4&amp;amp;children=1&amp;amp;infants=0&amp;amp;guests=5&amp;amp;place_id=ChIJOwg_06VPwokRYv534QaPC8g&amp;amp;refinement_paths[]=/for_you&amp;amp;toddlers=0&amp;amp;source=mc_search_bar&amp;amp;search_type=unknown'response=requests.get(url,headers=headers)&lt;br&gt;
soup=BeautifulSoup(response.content,'lxml')#print(soup.select('.a-carousel-card')[0].get_text())for item in soup.select('[itemprop=itemListElement]'):&lt;br&gt;
    try:&lt;br&gt;
        print('----------------------------------------')&lt;br&gt;
        print(item.select('a')[0]['aria-label'])&lt;br&gt;
        #name = item.find("meta",  itemprop="name")&lt;br&gt;
        print(name)     print('----------------------------------------')&lt;br&gt;
    except Exception as e:&lt;br&gt;
        #raise e&lt;br&gt;
        print('')&lt;br&gt;
This will display the result:&lt;/p&gt;

&lt;p&gt;Now let us extract the other pieces of information.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-coding-utf8-"&gt;
  &lt;/a&gt;
  -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-
&lt;/h1&gt;

&lt;p&gt;from bs4 import BeautifulSoup&lt;br&gt;
import requestsheaders = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9'}&lt;br&gt;
url = '&lt;a href="https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New"&gt;https://www.airbnb.co.in/s/New-York--NY--United-States/homes?query=New&lt;/a&gt; York, NY, United States&amp;amp;checkin=2020-03-12&amp;amp;checkout=2020-03-19&amp;amp;adults=4&amp;amp;children=1&amp;amp;infants=0&amp;amp;guests=5&amp;amp;place_id=ChIJOwg_06VPwokRYv534QaPC8g&amp;amp;refinement_paths[]=/for_you&amp;amp;toddlers=0&amp;amp;source=mc_search_bar&amp;amp;search_type=unknown'response=requests.get(url,headers=headers)&lt;br&gt;
soup=BeautifulSoup(response.content,'lxml')&lt;br&gt;
for item in soup.select('[itemprop=itemListElement]'):&lt;br&gt;
    try:&lt;br&gt;
        print('----------------------------------------')&lt;br&gt;
        print(item.select('a')[0]['aria-label'])&lt;br&gt;
        print(item.select('a')[0]['href'])&lt;br&gt;
        print(item.select('._krjbj')[0].get_text())&lt;br&gt;
        print(item.select('._krjbj')[1].get_text())&lt;br&gt;
        print(item.select('._16shi2n')[0].get_text())       print(item.select('._zkkcbwd')[0].get_text())&lt;br&gt;
        print(name)     print('----------------------------------------')&lt;br&gt;
    except Exception as e:&lt;br&gt;
        #raise e&lt;br&gt;
        print('')&lt;br&gt;
When you run the code:&lt;/p&gt;

&lt;p&gt;It displays all the data we need including reviews, ratings, links, and reduced price.&lt;/p&gt;

&lt;p&gt;In more complicated solutions, you will even have to rotate the User-Agent string, so Airbnb cannot detect if you are using a similar browser. If we go a step further, you will find that Airbnb will block your IP, ignoring all the previous efforts. This is disappointing because that is where the majority of web crawling programs fall short.&lt;/p&gt;

&lt;p&gt;Overcoming IP Blocks&lt;br&gt;
Investing in a personal rotating proxy service such as proxies API can generally make the difference between a successful and pain-free web scraping operation that will consistently do the job.&lt;br&gt;
Investment of a private rotating proxy service will include Proxies API that can often mean the change between an effective and pain-free web extracting operation that consistently gets the job done.&lt;/p&gt;

&lt;p&gt;Plus, with the current offer of 1000 free API requests, there‚Äôs almost nothing to lose by using our rotating proxy and comparing notes. It simply takes a single line of integration to make it almost unnoticeable.&lt;/p&gt;

&lt;p&gt;Our rotating proxy server Proxies API is indeed a simple API that instantly solves any IP Blocking issues.&lt;br&gt;
There are thousands of high-speed spinning proxies scattered over the globe.&lt;/p&gt;

&lt;p&gt;Using our IP rotation service, you can rest assured that your IP address will be changed.&lt;/p&gt;

&lt;p&gt;Using our automated rotation of the User-Agent-String (which mimics requests from various, valid web browsers and versions of web browsers) and our automatic CAPTCHA solving technology&lt;br&gt;
Our CAPTCHA-solving technology that works automatically&lt;br&gt;
Thousands of our clients have used a simple API to solve the problem of IP restrictions.&lt;/p&gt;

&lt;p&gt;In any computer language, a basic API like the one given below can be used to access the entire system.&lt;/p&gt;

&lt;p&gt;curl &lt;a href="https://xbyte.io/?key=API_KEY&amp;amp;url=https://example.com"&gt;https://xbyte.io/?key=API_KEY&amp;amp;url=https://example.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For any further assistance, you can kindly contact X-Byte Enterprise Crawling.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
