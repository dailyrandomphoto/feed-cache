<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Applicable React Redux example step by step from scratch</title>
      <author>Serge Jabo Byusa</author>
      <pubDate>Sun, 28 Nov 2021 02:49:05 +0000</pubDate>
      <link>https://dev.to/byusa/applicable-react-redux-example-step-by-step-from-scratch-2i59</link>
      <guid>https://dev.to/byusa/applicable-react-redux-example-step-by-step-from-scratch-2i59</guid>
      <description>&lt;p&gt;A simple example of React Redux&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step 0: Create a react app and install redux &lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app reactapp
cd reactapp
yarn add react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Step 1: Create actions&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ACTIONS&lt;/b&gt; -&amp;gt; INCREMENT (describes what you want to do!) it's a simple function&lt;br&gt;
In src create a folder name it actions and add file named index.js &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#srcactionsindexjs"&gt;
  &lt;/a&gt;
  src/actions/index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Step 2: Create reducers&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;REDUCERS&lt;/b&gt; -&amp;gt; here an action transfer from one state to another state, it gonna modify our store.&lt;br&gt;
You can have many reducers (Authentication reducer, Movielist reducer etc ...)&lt;/p&gt;

&lt;p&gt;Create a folder called reducers&lt;br&gt;
inside reducers create counter.js file&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#srcreducerscounterjs"&gt;
  &lt;/a&gt;
  src/reducers/counter.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inside reducers create a second reducer named isLogged.js file.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#srcreducersisloggedjs"&gt;
  &lt;/a&gt;
  src/reducers/isLogged.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loggedReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGN_IN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;loggedReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inside reducers create a index file to export them.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#srcreducersindexjs"&gt;
  &lt;/a&gt;
  src/reducers/index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;loggedReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isLogged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allReducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;//you can name it anything&lt;/span&gt;
    &lt;span class="c1"&gt;//counterReducer (this means counterReducer:counterReducer )&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isLogged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loggedReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;allReducers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Step 3: Create your Store&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Store&lt;/b&gt; -&amp;gt; You can add your store in app.js.&lt;br&gt;
You can only have one store&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#srcappjs"&gt;
  &lt;/a&gt;
  src/app.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLogged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLogged&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLogged&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Valuable&lt;/span&gt; &lt;span class="nx"&gt;Information&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;shouldn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t see&amp;lt;/h3&amp;gt; : ""}
        &amp;lt;/div&amp;gt;
    );
}

export default App;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Testing it&lt;/b&gt; &lt;br&gt;
&lt;b&gt;Option 1:&lt;/b&gt;  check the console in inspect to see how it increments and decrements.&lt;br&gt;
Option. &lt;br&gt;
&lt;b&gt;Option 2:&lt;/b&gt; Install &lt;b&gt;Redux Devtool&lt;/b&gt; chrome extension.&lt;br&gt;
&lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;br&gt;
&lt;a href="https://github.com/Byusa/learn-redux"&gt;https://github.com/Byusa/learn-redux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reference:&lt;br&gt;
&lt;a href="https://react-redux.js.org/"&gt;https://react-redux.js.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://redux.js.org/tutorials/fundamentals/part-5-ui-react"&gt;https://redux.js.org/tutorials/fundamentals/part-5-ui-react&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=CVpUuw9XSjY"&gt;https://www.youtube.com/watch?v=CVpUuw9XSjY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 HTML Tags you may not know about</title>
      <author>Akshit Singh</author>
      <pubDate>Sun, 28 Nov 2021 02:48:54 +0000</pubDate>
      <link>https://dev.to/akshit_singh/5-html-tags-you-may-not-know-about-2k91</link>
      <guid>https://dev.to/akshit_singh/5-html-tags-you-may-not-know-about-2k91</guid>
      <description>&lt;p&gt;Hello Coders, I am Akshit Singh, and in today's blog, I would tell you about 5 tags in HTML that you may not know. Even I did not know about the following tags at all. I recently found it on the web and thought of sharing this thing with the community 🌐. So, Let's get started.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-ltdetailsgt-endraw-tag"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;

&lt;p&gt;As the name suggests, &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag can be used to give details of a text. When you expand the text in your output it shows the details of the particular text inside the &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;5 HTML TAGS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;big&amp;gt;DETAILS TAG&amp;lt;/big&amp;gt;
    &amp;lt;details&amp;gt;
        &amp;lt;summary&amp;gt;Akshit Singh&amp;lt;/summary&amp;gt;
        &amp;lt;p&amp;gt;Hi am a Blogger.&amp;lt;/p&amp;gt;
    &amp;lt;/details&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shZnUM9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqhaonbdm5rfcuxc21b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shZnUM9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqhaonbdm5rfcuxc21b3.png" alt="Image by me" width="148" height="44"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyBottKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/candlgtgty8eqeq0337c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyBottKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/candlgtgty8eqeq0337c.png" alt="Image by me" width="146" height="98"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-raw-ltbdogt-endraw-tag"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;&amp;lt;bdo&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;

&lt;p&gt;This tag helps in changing the direction of the text between it. (&lt;em&gt;It is a really fun tag&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;5 HTML TAGS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;big&amp;gt;BDO TAG&amp;lt;/big&amp;gt;
    &amp;lt;!-- This is a right-to-left example --&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;bdo dir="rtl"&amp;gt;This is a paragraph&amp;lt;/bdo&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;!-- This is a left-to-right example --&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;bdo dir="ltr"&amp;gt;This is a paragraph&amp;lt;/bdo&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3JZyLOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orbse7c6lbli8w10q3qj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3JZyLOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orbse7c6lbli8w10q3qj.png" alt="Image by me" width="136" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;rtl&lt;/code&gt; stands for right-to-left &amp;amp; &lt;code&gt;ltf&lt;/code&gt; stands for left-to-right. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-raw-ltabbrgt-endraw-tag"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; TAG
&lt;/h3&gt;

&lt;p&gt;This tag is used for writing abbreviations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;5 HTML TAGS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;big&amp;gt;ABBR TAG&amp;lt;/big&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;abbr title="Akshit Singh"&amp;gt;Hashnode Blogger&amp;lt;/abbr&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2kEVOAdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bone42ryr66p1aygr8ay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2kEVOAdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bone42ryr66p1aygr8ay.png" alt="Image by me" width="163" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-raw-ltsampgt-endraw-tag"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;&amp;lt;samp&amp;gt;&lt;/code&gt; TAG
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;samp&amp;gt;&lt;/code&gt; HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;5 HTML TAGS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;big&amp;gt;SAMP TAG&amp;lt;/big&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;samp&amp;gt;This is a samp text.&amp;lt;/samp&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UzIkmfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lufk3v0kwehxr8bmrx1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UzIkmfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lufk3v0kwehxr8bmrx1a.png" alt="Image by me" width="159" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-raw-ltkbdgt-endraw-tag"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; TAG
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;5 HTML TAGS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;big&amp;gt;KBD TAG&amp;lt;/big&amp;gt;
    &amp;lt;p&amp;gt;Press &amp;lt;kbd&amp;gt;Ctrl&amp;lt;/kbd&amp;gt; + &amp;lt;kbd&amp;gt;C&amp;lt;/kbd&amp;gt; to copy text&amp;lt;/p&amp;gt;&amp;lt;!-- for Windows Users --&amp;gt;
    &amp;lt;p&amp;gt;Press &amp;lt;kbd&amp;gt;Cmd&amp;lt;/kbd&amp;gt; + &amp;lt;kbd&amp;gt;C&amp;lt;/kbd&amp;gt; to copy text&amp;lt;/p&amp;gt;&amp;lt;!-- For MacOS users --&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICVd5ZkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ol0umcnablexwl2hdpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICVd5ZkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ol0umcnablexwl2hdpf.png" alt="Image by me" width="194" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was it for the blog and hope the information was helpful. Which one of the above tags did you know about? Let me know in the comment down below!&lt;br&gt;
Till then, Happy Coding !!🤗👨‍💻&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Day 50 of 100 Days of Code &amp; Scrum: 7th Week Retrospective (Halfway There!)</title>
      <author>Rammina</author>
      <pubDate>Sun, 28 Nov 2021 01:52:16 +0000</pubDate>
      <link>https://dev.to/rammina/day-50-of-100-days-of-code-scrum-7th-week-retrospective-halfway-there-4235</link>
      <guid>https://dev.to/rammina/day-50-of-100-days-of-code-scrum-7th-week-retrospective-halfway-there-4235</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;Wow, I didn't notice it already is the 50th day.&lt;/p&gt;

&lt;p&gt;This week has been fairly productive, which is a nice change of pace from the past two weeks. My Internet coming back helped a lot in restoring my motivation and workflow. I made a lot of progress with my company website, and it is almost ready for deployment (just a few validation fixes on my contact form left).&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finish the Rammina Web Development website's homepage (and avoid getting distracted by more interesting projects).&lt;/li&gt;
&lt;li&gt;continue to learn Next.js and Typescript by using concepts as I build my website.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I finished most of the home page skeleton, styling, and responsive layout.&lt;/li&gt;
&lt;li&gt;almost completed a functional contact form that uses AWS SES, Lambda, and API Gateway (just need to improve error handling and validation).&lt;/li&gt;
&lt;li&gt;learned plenty about Next.js and AWS.&lt;/li&gt;
&lt;li&gt;continue my studies for PSM I (not by much).&lt;/li&gt;
&lt;li&gt;expanded my network more (but this one took a backseat).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I pretty much finished my first prototype homepage for the Rammina Web Development website.&lt;/li&gt;
&lt;li&gt;continued to hone my expertise on AWS, particularly AWS SES, Lambda, and API Gateway.&lt;/li&gt;
&lt;li&gt;learned more Next.js.&lt;/li&gt;
&lt;li&gt;studied Scrum as well as Kanban.&lt;/li&gt;
&lt;li&gt;expanded my network a little bit more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I pretty much neglected a lot of things that had little to nothing to do with my website.&lt;/li&gt;
&lt;li&gt;learned almost nothing new about Typescript this week.&lt;/li&gt;
&lt;li&gt;barely learned new things about Next.js.&lt;/li&gt;
&lt;li&gt;didn't study Scrum enough.&lt;/li&gt;
&lt;li&gt;got distracted at times and couldn't focus much.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;should probably do just a little bit more of activities related to my secondary goals.&lt;/li&gt;
&lt;li&gt;make a schedule to do my daily learnings, so I don't have to think about it too much.&lt;/li&gt;
&lt;li&gt;prioritize tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;li&gt;I should DEFINITELY install something that blocks me from checking certain sites at a specific time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html"&gt;Using AWS Lambda with Amazon API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-troubleshooting-lambda.html"&gt;Troubleshooting issues with HTTP API Lambda integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you once again, everyone! Have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 22 of #100daysofcode: Inspiration</title>
      <author>Ryan Whelchel</author>
      <pubDate>Sun, 28 Nov 2021 01:13:44 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-22-of-100daysofcode-inspiration-12bk</link>
      <guid>https://dev.to/rydwhelchel/day-22-of-100daysofcode-inspiration-12bk</guid>
      <description>&lt;p&gt;I woke up today with fresh ideas and inspiration that really helped solve problems that I ran into yesterday, so I want to take some time to talk about my views on sleep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-sleep"&gt;
  &lt;/a&gt;
  The importance of sleep
&lt;/h2&gt;

&lt;p&gt;Have you ever gone to sleep after working on something, and then woke up with new ideas? The idea is very common, and it is because our brain continues working on problems after we have gone to sleep. I have heard that, while awake, we consciously look for obvious connections between things, or direct connections. While asleep, our brains look for inobvious connections, or indirect connections.&lt;/p&gt;

&lt;p&gt;In my experience, this has absolutely been true. It is part of the reason I want to work on a Study Aid app. Sleep helps you create connections between ideas which you wouldn't normally create while awake, and these indirect connections really help solidify ideas and concepts in your mind. &lt;/p&gt;

&lt;p&gt;In the Computer Science and Software Engineering fields, this is especially important. Concepts and ideas in these fields are often hard to picture, so it is very important to let our brains do the heavy lifting at times. &lt;/p&gt;

&lt;p&gt;Try it yourself: next time you're working on a hard problem that you're having trouble find a solution to, try sleeping on it. If you think hard about it as you go to sleep, you will almost definitely wake up with new ideas or approaches!&lt;/p&gt;

&lt;p&gt;(results may vary)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Made a lot of progress on my school project&lt;/li&gt;
&lt;li&gt;Surfed through a bit more of &lt;a href="https://dev.to/mblayman/understand-django-anatomy-of-an-application-4p1"&gt;Understand Django&lt;/a&gt; by Matt Layman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bit of a rest day other than that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcoming"&gt;
  &lt;/a&gt;
  Upcoming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Finals and final project sprints&lt;/strong&gt;: Not much time left!&lt;/li&gt;
&lt;li&gt;Continue reading about Django, &lt;/li&gt;
&lt;li&gt;Iron out details regarding the Study Aid app (I really need to name this thing) -- May work on this this weekend

&lt;ul&gt;
&lt;li&gt;Flask vs Django - This is still an ongoing discussion. I received some good advice to stick with what I know in Flask, however I am still considering diving into Django, as I will have free time soon. Diving in headfirst has always been my favorite way to learn, however it is often not efficient!&lt;/li&gt;
&lt;li&gt;Should I change how I deploy? Should Docker get in the picture?&lt;/li&gt;
&lt;li&gt;Are there any other systems I should think about using as a part of this project?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Learn more about Material UI, I will probably use Material UI a little bit in my (ongoing) school project. &lt;/li&gt;
&lt;li&gt;Start the Study Aid app!&lt;/li&gt;
&lt;li&gt;Later in the challenge: AWS Deployment, AWS Certification, and Using Docker!?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great, long weekend everybody, stay safe!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JS Course - FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/mblayman/from-browser-to-django-j0l"&gt;Understand Django - Matt Layman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to save the entire user session using Python?</title>
      <author>Ruthvik Raja M.V</author>
      <pubDate>Sun, 28 Nov 2021 00:14:39 +0000</pubDate>
      <link>https://dev.to/ruthvikraja_mv/how-to-save-the-entire-user-session-using-python-2h2c</link>
      <guid>https://dev.to/ruthvikraja_mv/how-to-save-the-entire-user-session-using-python-2h2c</guid>
      <description>&lt;p&gt;It is very important to know how to save the entire current session like local variables, objects etc when we are working with AI projects using Python because it is very difficult to run the entire python code every time to initialise the objects, Models, variables etc. &lt;/p&gt;

&lt;p&gt;To overcome this problem we have pickle to take care of it but some times it fails to deserialise the pickled objects so, &lt;br&gt;
dill library can be implemented to quickly store and retrieve the current session.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#here-is-a-quick-introduction-to-dill"&gt;
  &lt;/a&gt;
  Here is a quick introduction to dill:-
&lt;/h2&gt;

&lt;p&gt;dill extends python’s pickle module for serializing and de-serializing python objects to the majority of the built-in python types. Serialization is the process of converting an object to a byte stream, and the inverse of which is converting a byte stream back to a python object hierarchy.&lt;/p&gt;

&lt;p&gt;dill provides the user the same interface as the pickle module, and also includes some additional features. In addition to pickling python objects, dill provides the ability to save the state of an interpreter session in a single command. Hence, it would be feasable to save an interpreter session, close the interpreter, ship the pickled file to another computer, open a new interpreter, unpickle the session and thus continue from the ‘saved’ state of the original interpreter session.&lt;/p&gt;

&lt;p&gt;Therefore, the following code can be implemented to save the current session:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;##### User's python code #####
# pip install dill (or) conda install dill
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dill&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# Save the entire session by creating a new pickle file 
&lt;/span&gt;&lt;span class="n"&gt;dill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./your_bk_dill.pkl'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# Restore the entire session
&lt;/span&gt;&lt;span class="n"&gt;dill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./your_bk_dill.pkl'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From, above it is clear that implementing dill is very easy and also it provides function like dill.detect to investigate the failed attributes inside that object.&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>ai</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 0 - Getting Started | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Sun, 28 Nov 2021 00:11:20 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-0-getting-started-100daysofcode-ncn</link>
      <guid>https://dev.to/jannatinnaim/day-0-getting-started-100daysofcode-ncn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c4mHAbOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c4di87ky31w7g58i4q6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c4mHAbOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c4di87ky31w7g58i4q6.jpg" alt="Coding Motivation Banner" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-100-days-of-code"&gt;
  &lt;/a&gt;
  What is 100 Days Of Code?
&lt;/h3&gt;

&lt;p&gt;It's in the name, duh. But, what does it actually mean? In a nutshell, you code everyday for at least an hour and document everything that you learnt. It's from the &lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode&lt;/a&gt; website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-it-for-me"&gt;
  &lt;/a&gt;
  What's in it for me?
&lt;/h3&gt;

&lt;p&gt;Well, I'm new to to the Web Development world and have yet to learn many things. So, this is to make up somewhat for that gap in knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-i-do"&gt;
  &lt;/a&gt;
  What will I do?
&lt;/h3&gt;

&lt;p&gt;As the rules suggest, I'll code for at least one hour everyday and share my status on social media. This will also act as a timeline blog of my journey as a Web Developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.100daysofcode.com/"&gt;100DaysOfCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A developer guide to automated testing with Postman. Run postman collections inside Docker via newman CLI.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sat, 27 Nov 2021 23:31:46 +0000</pubDate>
      <link>https://dev.to/nikiforovall/a-developer-guide-to-automated-testing-with-postman-run-postman-collections-inside-docker-via-newman-cli-524</link>
      <guid>https://dev.to/nikiforovall/a-developer-guide-to-automated-testing-with-postman-run-postman-collections-inside-docker-via-newman-cli-524</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;See a practical example of how to write and execute postman collections inside a Docker container. Source code &lt;a href="https://github.com/NikiforovAll/testing-with-newman-demo"&gt;https://github.com/NikiforovAll/testing-with-newman-demo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;What is Automated Testing?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tests are automated by creating test suites that can run again and again. Postman can be used to automate many types of tests including unit tests, functional tests, integration tests, end-to-end tests, regression tests, mock tests, etc. Automated testing prevents human error and streamlines testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Postman offers a comprehensive &lt;a href="https://www.postman.com/automated-testing/"&gt;API testing tool&lt;/a&gt; that makes it easy to set up automated tests. Organizing your requests into Postman Collections enables you to run and automate a series of requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h3&gt;

&lt;p&gt;Let's say we want to start refactoring of some microservice called "Order Service". Before we start our refactoring we want to make sure that we don't break anything in the meantime. A very common migration strategy is to invest time into writing tests to lower the risk of regression bugs and migration errors. We will use postman and cover "Order Service" with automated API tests to ensure a successful migration.&lt;/p&gt;

&lt;p&gt;In this example, "Order Service" is quite small and has one responsibility of order processing.&lt;/p&gt;

&lt;p&gt;Use cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As a user I want to be able to create orders so it is possible to buy goods for money&lt;/li&gt;
&lt;li&gt;As a user I want to close order&lt;/li&gt;
&lt;li&gt;As a user I expect order status to be completed when someone successfully pays for it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFGFiKfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fhuxdu0an66wm2rchlu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFGFiKfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fhuxdu0an66wm2rchlu.png" alt="program-cs-code-snap.png" width="838" height="860"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9ckLj-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hwc9f8wjnaybh84q2h6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9ckLj-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hwc9f8wjnaybh84q2h6.png" alt="routes-overview.png" width="575" height="320"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderApiRoutes&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt; &lt;span class="nf"&gt;MapOrderApiRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateOrder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetOrders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetOrderById&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;WithName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetOrderById&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders/{id}/cancel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancelOrderById&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;CancelOrderById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ulong&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMongoClient&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOrderCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Cancel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReplaceOneAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NoContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetOrderById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ulong&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMongoClient&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOrderCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;CreateOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMongoClient&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt; &lt;span class="n"&gt;idGenerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NextLong&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOrderCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;InsertOneAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreatedAtRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetOrderById&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetOrders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMongoClient&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetOrderCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToListAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please see source code for more details: &lt;a href="https://github.com/NikiforovAll/testing-with-newman-demo"&gt;https://github.com/NikiforovAll/testing-with-newman-demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-requests"&gt;
  &lt;/a&gt;
  Writing requests
&lt;/h3&gt;

&lt;p&gt;Personally, I'm a big fan of Postman because it has an intuitive UI that drastically improves your performance. I recommend you invest some time into learning it.&lt;/p&gt;

&lt;p&gt;I will keep it straightforward and will show you how to create order in the system and then close it. Before we start sending HTTP requests we want to create "Postman Collection" and "Postman Environment".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;See: &lt;a href="https://learning.postman.com/docs/getting-started/creating-the-first-collection/"&gt;"Creating your first collection"&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Create "testing-with-newman" collection&lt;/li&gt;
&lt;li&gt;Add folder "main-flow"&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Create environment "testing-with-newman" and add &lt;code&gt;base-url&lt;/code&gt; and &lt;code&gt;rabbitmq-host&lt;/code&gt; variables. Select newly created environment on the top-right.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4QyXRU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlwnbsgn7fcazwjyrwai.png" alt="postman-env" width="880" height="367"&gt;
&lt;/li&gt;
&lt;li&gt;Add "Create Order" request to the main-flow folder. As you can see, we want to send HTTP POST to &lt;code&gt;{base-url}/orders&lt;/code&gt; with the JSON body. Now, we are ready &lt;a href="https://learning.postman.com/docs/getting-started/sending-the-first-request/"&gt;to send&lt;/a&gt; the request and see how it works.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bqc46O3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm1650eawzuby651gh3j.png" alt="postman-create-order" width="880" height="417"&gt;
&lt;/li&gt;
&lt;li&gt;Start the server &lt;code&gt;cd ./src/OrderService &amp;amp;&amp;amp; dotnet run&lt;/code&gt; and send HTTP request through Postman UI. It looks like the order has been accepted and &lt;a href="https://httpstatuses.com/201"&gt;"201 CREATED"&lt;/a&gt; was returned. You can check the "Location" header to see the address of the created resource.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYydAyBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgcawtie2texuki3ezji.png" alt="postman-create-order" width="802" height="200"&gt;
&lt;/li&gt;
&lt;li&gt;Once we are comfortable with Postman and "Order Service" we can start writing "Postman Tests" to verify expected behavior. Tests are written based on JavaScript. Postman UI helps you to write tests by providing tons of examples, see the right sidebar. Down below, we make sure that the order request return status is 201 and the customer field contains "John Doe". As you can see, we also writing "orderId" into the environment variable to use it in the next requests.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Status code is 201&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Order created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orderId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Order has customer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#writing-requests-publish-to-rabbitmq"&gt;
  &lt;/a&gt;
  Writing requests. Publish to RabbitMQ
&lt;/h3&gt;

&lt;p&gt;Also, you can publish messages to RabbitMQ from Postman. It is possible because RabbitMQ exposes HTTP client that enables management. To publish a message, you need to specify an exchange in the URL  &lt;code&gt;{rabbitmq-host}/api/exchanges/%2F/amq.default/publish&lt;/code&gt; and provide the message as part of JSON body. Note &lt;em&gt;%2F&lt;/em&gt; is the url-encoded default Virtual Host "/".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"content_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"routing_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"order-paid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"payload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;orderId&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;244165178826752&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"payload_encoding"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because publishing a message it is by nature async operation. All we can do at this point is to verify that it was &lt;em&gt;routed&lt;/em&gt; (stored in a queue).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is Routed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we want to see that the order has been completed as the result of the previous operation, we do it by sending &lt;code&gt;GET {base-url}/orders/{orderId}&lt;/code&gt; and running the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Status code is 200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Order is Completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was "main-flow". I suggest you check "cancel-flow" on your own. Let's see how to run Postman collections from CLI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-postman-collections-from-cli-via-raw-newman-endraw-"&gt;
  &lt;/a&gt;
  Running Postman Collections from CLI via &lt;code&gt;newman&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;You can export collections and environments from Postman UI and use exported files locally. We are going to set up collection run inside &lt;code&gt;docker-compose&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running postman collections inside Docker has many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to write integration tests. Testing allows you to investigate how the system works. Huge productivity boost. Try it and you will like it.&lt;/li&gt;
&lt;li&gt;Short feedback cycle. You can use it during your inner developer-loop.&lt;/li&gt;
&lt;li&gt;Integration testing could be outsourced to a different team/people.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is &lt;code&gt;docker-compose.postman.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.4"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main-flow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postman/newman_alpine33&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;run testing-with-newman.postman_collection.json&lt;/span&gt;
      &lt;span class="s"&gt;--environment testing-with-newman.postman_environment.json&lt;/span&gt;
      &lt;span class="s"&gt;--folder main-flow&lt;/span&gt;
      &lt;span class="s"&gt;-r cli&lt;/span&gt;
      &lt;span class="s"&gt;--delay-request &lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;
      &lt;span class="s"&gt;--iteration-count &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="s"&gt;--color on&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./tests/postman:/etc/newman&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;newman-tests&lt;/span&gt;
  &lt;span class="na"&gt;cancel-flow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postman/newman_alpine33&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;run testing-with-newman.postman_collection.json&lt;/span&gt;
      &lt;span class="s"&gt;--environment testing-with-newman.postman_environment.json&lt;/span&gt;
      &lt;span class="s"&gt;--folder cancel-flow&lt;/span&gt;
      &lt;span class="s"&gt;-r cli&lt;/span&gt;
      &lt;span class="s"&gt;--iteration-count &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="s"&gt;--color on&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./tests/postman:/etc/newman&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;newman-tests&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;newman-tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;newman-tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run an e2e scenarios - execute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.postman.yml up main-flow
docker compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.postman.yml up cancel-flow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJX6XD_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oivgtte1htggfx4s8796.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJX6XD_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oivgtte1htggfx4s8796.png" alt="main-flow-run-demo" width="880" height="516"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XROOO0yI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94i4o2x96wd0xr3ywh69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XROOO0yI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94i4o2x96wd0xr3ywh69.png" alt="cancel-flow-run-demo" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#running-newman-as-part-of-the-continuous-integration-process-github-actions-example"&gt;
  &lt;/a&gt;
  Running newman as part of the continuous integration process. GitHub Actions example
&lt;/h3&gt;

&lt;p&gt;One of the greatest benefits of &lt;code&gt;newman&lt;/code&gt; is that you can use it as part of your CI. Down below you can find GitHub corresponding workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup network&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker network create newman-tests&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the docker-compose stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose -f docker-compose.override.yml -f docker-compose.yml up -d&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check running containers&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker ps -a&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check logs&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose logs order-service&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run test suite main-flow&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose -f docker-compose.postman.yml up main-flow&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run test suite cancel-flow&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose -f docker-compose.postman.yml up cancel-flow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 Hint: to run github actions locally use &lt;a href="https://github.com/nektos/act"&gt;https://github.com/nektos/act&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z8smwNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/peine69ayg0h94dp6a1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z8smwNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/peine69ayg0h94dp6a1o.png" alt="github-action" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Writing tests is what makes a good developer an excellent developer. In this blog post, we've covered how to set up integration tests as runnable postman collections inside Docker.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.postman.com/automated-testing/"&gt;https://www.postman.com/automated-testing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sm-cloud.com/testing-api-with-postman/"&gt;https://www.sm-cloud.com/testing-api-with-postman/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nektos/act"&gt;https://github.com/nektos/act&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>dotnet</category>
      <category>productivity</category>
      <category>testing</category>
    </item>
    <item>
      <title>The Complete Guide to Installing and Configuring a Next.js Project in 2022</title>
      <author>Andrew Savetchuk</author>
      <pubDate>Sat, 27 Nov 2021 23:03:03 +0000</pubDate>
      <link>https://dev.to/andrewsavetchuk/the-complete-guide-to-installing-and-configuring-a-nextjs-project-in-2022-3ia0</link>
      <guid>https://dev.to/andrewsavetchuk/the-complete-guide-to-installing-and-configuring-a-nextjs-project-in-2022-3ia0</guid>
      <description>&lt;p&gt;In this article, we will install and configure a Next.js project, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding SASS / SCSS support&lt;/li&gt;
&lt;li&gt;Setting up Eslint and Prettier&lt;/li&gt;
&lt;li&gt;Setting up Eslint to run automatically before every commit (via a Git hook)&lt;/li&gt;
&lt;li&gt;Setting up Semantic Commits (via a Git hook)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Any of the above items are optional and can be skipped during the process.&lt;/strong&gt; For example, if you are not familiar with Semantic Commits or do not plan to use it, you can skip that part and move on to another.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may want to bookmark this article and use it as a reference when creating your projects. I will try to keep it up to date, and when I discover a new useful feature, I will include it here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-nodejs-and-npm"&gt;
  &lt;/a&gt;
  1. Install Node.js and NPM
&lt;/h2&gt;

&lt;p&gt;We need Node.js 12.22.0 or later in order to install and use Next.js.&lt;/p&gt;

&lt;p&gt;To see if you already have Node.js and NPM installed on your machine, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the installed version printed for each command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoBAAdfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638040756170/XFzKydMUlA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoBAAdfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638040756170/XFzKydMUlA.png" alt="Screenshot 2021-11-27 at 21.17.45.png" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not have this output and instead see &lt;code&gt;command not found&lt;/code&gt; or a similar error, download and install Node.js from the official website: &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-nextjs"&gt;
  &lt;/a&gt;
  2. Install Next.js
&lt;/h2&gt;

&lt;p&gt;Open your terminal, navigate to the folder where you want to create a new project and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During installation, you will be prompted to name the project, enter the most appropriate name, and press Enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbaGNidQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638041526686/LUZ2CmZYBU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbaGNidQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638041526686/LUZ2CmZYBU.png" alt="Screenshot 2021-11-27 at 21.31.55.png" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have installed Next.js project.&lt;/p&gt;

&lt;p&gt;You can stop here and work with your application already by running the following command in the directory we just created (you named it during the installation).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you want to add some configuration, open the project in your favorite code editor and follow the next steps. Each of the steps is optional, you can choose ones that suit you best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-configure-gitignore-for-jetbrains-products"&gt;
  &lt;/a&gt;
  3. Configure .gitignore for JetBrains products
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Info: This step is optional and may be skipped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using any of the JetBrains code editors (such as WebStorm or PHPStorm), it is recommended that you exclude certain folders and files from version control.&lt;/p&gt;

&lt;p&gt;You may use the following preset:&lt;br&gt;
 &lt;a href="https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore"&gt;https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Just copy and paste the content into your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-adding-sass-scss-support"&gt;
  &lt;/a&gt;
  4. Adding SASS / SCSS support
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Info: This step is optional and may be skipped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you plan on using SASS / SCSS, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the &lt;code&gt;styles&lt;/code&gt; folder, you should see two &lt;code&gt;.css&lt;/code&gt; files there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;styles/globals.css&lt;/li&gt;
&lt;li&gt;styles/Home.module.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rename them to &lt;code&gt;.sass&lt;/code&gt; or &lt;code&gt;.scss&lt;/code&gt; as you prefer. &lt;/p&gt;

&lt;p&gt;After you renamed the files, you need to change the paths to them in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pages/_app.js&lt;/li&gt;
&lt;li&gt;pages/index.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all! The rest will be handled by Next.js. You can now use SASS in your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-setting-up-eslint-and-prettier"&gt;
  &lt;/a&gt;
  5. Setting up Eslint and Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Info: This step is optional and may be skipped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eslint is already installed in your Next.js project by default. The configuration file (&lt;code&gt;.eslintrc.json&lt;/code&gt;) can be found in the root directory of your project.&lt;/p&gt;

&lt;p&gt;However, it is not automatically called when you run the application in development mode (&lt;code&gt;npm run dev&lt;/code&gt;). This is why we are going to set up a Git hook in the next step, but first, let's install and configure Prettier.&lt;/p&gt;

&lt;p&gt;Run the following commands to install Prettier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since Eslint also contains code formatting rules, which can conflict with your existing Prettier setup, installation of &lt;strong&gt;eslint-config-prettier&lt;/strong&gt; is recommended. &lt;/p&gt;

&lt;p&gt;To install the config, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint-config-prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation, create a config file for Prettier (&lt;code&gt;.prettierrc.json&lt;/code&gt;) in the root directory of your project. Here is a sample configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add &lt;code&gt;prettier&lt;/code&gt; to your existing Eslint config (&lt;code&gt;.eslintrc.json&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"next/core-web-vitals"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done, now you can use Prettier and lint your code by running &lt;code&gt;npm run lint&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-setting-up-eslint-to-run-automatically-before-every-commit"&gt;
  &lt;/a&gt;
  6. Setting up Eslint to run automatically before every commit
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Info: This step is optional and may be skipped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To prevent code with Eslint errors or warnings from being pushed to your working repository, you can set up a Git hook that will run the &lt;code&gt;next lint&lt;/code&gt; command every time you try to send a commit.&lt;/p&gt;

&lt;p&gt;In case of Eslint errors, your commit will not be sent and you will see an info message with error/warning details. See the example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLHVcPwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638047072340/WOzSVnwmQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLHVcPwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638047072340/WOzSVnwmQ.png" alt="Screenshot 2021-11-27 at 23.03.57.png" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to set up Git hooks, we need to install Husky (npm package):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;husky &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation, add the &lt;code&gt;prepare&lt;/code&gt; script to your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next lint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prepare"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"husky install"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run it once, it will create a &lt;code&gt;.husky&lt;/code&gt; folder with the required configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Husky is installed and it is time to create our first Git hook.&lt;/p&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/pre-commit &lt;span class="s2"&gt;"next lint --max-warnings=0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a pre-commit hook that executes &lt;code&gt;next lint&lt;/code&gt; command every time you try to send a commit.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--max-warnings=0&lt;/code&gt; flag is optional and can be removed in order to allow pushing the code with Eslint warnings. The info message will only appear in case of errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-setting-up-semantic-commits"&gt;
  &lt;/a&gt;
  7. Setting up Semantic Commits
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Info: This step is optional and may be skipped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are familiar with  &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Semantic Commits&lt;/a&gt;, you may want to add validation to ensure all commis is in the correct format.&lt;/p&gt;

&lt;p&gt;To do so you need to have Husky installed (see step 6 in this tutorial).&lt;/p&gt;

&lt;p&gt;After Husky installation, we need to install the &lt;a href="https://github.com/conventional-changelog/commitlint"&gt;@commitlint&lt;/a&gt; npm package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install commitlint cli and conventional config&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @commitlint/&lt;span class="o"&gt;{&lt;/span&gt;config-conventional,cli&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# For Windows:&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @commitlint/config-conventional @commitlint/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to configure commitlint to use conventional config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"module.exports = {extends: ['@commitlint/config-conventional']}"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; commitlint.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, add a hook that will check the validity of commit messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/commit-msg &lt;span class="s1"&gt;'npx --no -- commitlint --edit "$1"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you try to send a commit that does not follow the Conventional Commits rules, you will see the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLjSZT1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638050744897/fVxrGQrEU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLjSZT1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638050744897/fVxrGQrEU.png" alt="Screenshot 2021-11-28 at 00.04.47.png" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you would like to see the final results of the project described in this article please take a look at the Github repository:  &lt;a href="https://github.com/AndrewSavetchuk/next-js-project-starter"&gt;https://github.com/AndrewSavetchuk/next-js-project-starter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That will be all, I hope you found this article helpful. Stay tuned for more content.&lt;/p&gt;




&lt;p&gt;Please let me know about any mistakes in the text.&lt;/p&gt;

&lt;p&gt;If you found this information helpful, you can &lt;a href="https://www.buymeacoffee.com/AndrewSavetchuk"&gt;buy me a coffee&lt;/a&gt;  :)&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Type systems as told by my dog</title>
      <author>&amp;y H. Golang (he/him)</author>
      <pubDate>Sat, 27 Nov 2021 22:57:04 +0000</pubDate>
      <link>https://dev.to/andyhaskell/type-systems-as-told-by-my-dog-4lpi</link>
      <guid>https://dev.to/andyhaskell/type-systems-as-told-by-my-dog-4lpi</guid>
      <description>&lt;p&gt;There are a lot of programming languages out there to build cool apps in, and one of the major concepts you'll encounter in all of them is the concept of the many &lt;strong&gt;types&lt;/strong&gt; a piece of data, such as a variable, can be. Common data types you'll encounter are &lt;code&gt;numbers&lt;/code&gt; like 34313, &lt;code&gt;strings&lt;/code&gt; of text like "words for the win", &lt;code&gt;arrays&lt;/code&gt; for when you want a collection of items, &lt;code&gt;null/nil&lt;/code&gt; for representing nothing at all, and &lt;code&gt;objects/structs/classes&lt;/code&gt; for when you're composing together possibly many different pieces of data to represent something, like details about a car or a user account on a website.&lt;/p&gt;

&lt;p&gt;And a difference between the many programming languages you can choose from, is that they have different sets of rules for how you work with different data types. Those rules, are called &lt;strong&gt;type systems&lt;/strong&gt;, or &lt;strong&gt;typing disciplines&lt;/strong&gt;. So in this tutorial, I'll show you an overview of different programming languages' type systems, as told by my Havanese dog Lola the Micropanda.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYUGj8PV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw1zrtqi8ckn68w6n93q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYUGj8PV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw1zrtqi8ckn68w6n93q.jpg" alt="Adorable black and white Havanese dog in the kitchen standing on her hind legs" width="768" height="1024"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lola and I will give you a look at some of the major kinds of type systems in different languages, and for each type system, we'll talk about a different kind of thing Lola does in real life that is similar to that. We'll look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static types, like in C++&lt;/li&gt;
&lt;li&gt;Dynamic types, like in JavaScript&lt;/li&gt;
&lt;li&gt;Duck types, like in Ruby&lt;/li&gt;
&lt;li&gt;Inferred static types, like in Go and Haskell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial is for you if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💻 You've done some programming in at least one programming language, and are familiar with functions and variables&lt;/li&gt;
&lt;li&gt;📚 You're interested in learning some more programming languages&lt;/li&gt;
&lt;li&gt;🐼 You like puppers who look like pandas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#static-types-going-to-the-vet"&gt;
  &lt;/a&gt;
  Static types: 💊 Going to the vet
&lt;/h2&gt;

&lt;p&gt;Statically typed languages are ones where it's explicit what type a variable is from the moment it's declared, and it's strict what types you can pass into a function or use as fields on a data structure. For example, in C++, if you declare a variable to be an integer, like &lt;code&gt;int myNumber = 2;&lt;/code&gt;, then from that point on, &lt;code&gt;myNumber&lt;/code&gt; is an integer. Once you've declared &lt;code&gt;myNumber&lt;/code&gt;, then you can't say things like &lt;code&gt;myNumber = "some text"&lt;/code&gt; because "some text" is not an integer, it's a string.&lt;/p&gt;

&lt;p&gt;A real-life example of statically-typed stuff with Lola would be going to the vet. When a vet is prescribing medicine for an adult small dog, we can't send the vet a big German shepherd, a sloth, or a small puppy (even if Lola still acts like a puppy sometimes). So some statically typed code for a vet appointment would look like this C++ code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Prescription&lt;/span&gt; &lt;span class="nf"&gt;prescribeForAdultSmallDog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AdultSmallDog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Let's see..."&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Diagnosis&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diagnose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Prescription&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makePrescriptionForDiagnosis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"We're all set! Here's your prescription!"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"And take a biscuit for the road!"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that in the function signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Prescription&lt;/span&gt; &lt;span class="nf"&gt;prescribeForAdultSmallDog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AdultSmallDog&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;dog&lt;/code&gt; you pass into this &lt;code&gt;prescribeForAdultSmallDog&lt;/code&gt; function has to be an &lt;code&gt;AdultSmallDog&lt;/code&gt;, like Lola. And the object the function returns is a &lt;code&gt;Prescription&lt;/code&gt;. The code won't run if we pass a different kind of dog or other animal into that function.&lt;/p&gt;

&lt;p&gt;Furthermore, we also see information about types in the variables we declare:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;    &lt;span class="n"&gt;Diagnosis&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diagnose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Prescription&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makePrescriptionForDiagnosis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable we get back from the function &lt;code&gt;diagnose&lt;/code&gt; will always be a &lt;code&gt;Diagnosis&lt;/code&gt;. And the variable we make from &lt;code&gt;makePrescriptionForDiagnosis&lt;/code&gt; will always be a &lt;code&gt;Prescription&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While it feels a bit clunky to have to say the name of each variable we declare, the advantage of static types is that for any function and any variable, you know the types of the objects you're passing in. Knowing your code won't be working with the wrong type is called &lt;strong&gt;type safety&lt;/strong&gt;. Another thing I like about static types when you're developing big software, is that if you run into a function you've never used before, you don't need to do so much research to find out what type of object it is expecting.&lt;/p&gt;

&lt;p&gt;Some programming languages with static type systems include ones like C++, C, Java, Crystal, Go, Swift, and TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-types-texting-about-your-pet"&gt;
  &lt;/a&gt;
  Dynamic types: 📱 texting about your pet
&lt;/h2&gt;

&lt;p&gt;While a statically typed language is one where a variable always stays the same type, dynamically typed languages are more laid-back about types. When you declare a variable, it doesn't need to always stay the same type, and you don't need to do anything special to call the same function using arguments of different types.&lt;/p&gt;

&lt;p&gt;A dynamically typed part of a day in the life of Lola is texting with my family about what she's doing. Whether I texted "Lola ate two biscuits", or "Lola ate 2 biscuits", people know what I mean. Here's an example of that in JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;textAboutDogEatingBiscuits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dogName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;biscuitCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dogName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ate &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;biscuitCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// pass in a string for Lola's name, and a string for how&lt;/span&gt;
&lt;span class="c1"&gt;// many biscuits she ate. prints "Lola ate two biscuits"&lt;/span&gt;
&lt;span class="nx"&gt;textAboutDogEatingBiscuits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lola&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// pass in a string for Lola's name, and a number for how&lt;/span&gt;
&lt;span class="c1"&gt;// many biscuits she ate. prints "Lola ate 2 biscuits"&lt;/span&gt;
&lt;span class="nx"&gt;textAboutDogEatingBiscuits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lola&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We call &lt;code&gt;textAboutDogEatingBiscuits&lt;/code&gt; twice: once with &lt;code&gt;biscuitCount&lt;/code&gt; getting the string "two", and once with &lt;code&gt;biscuitCount&lt;/code&gt; getting the number 2.&lt;/li&gt;
&lt;li&gt;We didn't need to do anything special to do that. We can pass values of any type into &lt;code&gt;textAboutDogEatingBiscuits&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;The function's signature doesn't even mention any types!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An advantage of dynamic types is that it can be conducive to rapidly building software since you don't need to specify types of everything or do anything special to make a function allow arguments of different types.&lt;/p&gt;

&lt;p&gt;A disadvantage, though, is you can get type errors and unexpected behavior if you use a type your code wasn't written for working with. For example, if we passed a JavaScript object into &lt;code&gt;textAboutDogEatingBiscuits&lt;/code&gt;, like &lt;code&gt;textAboutDogEatingBiscuits("Lola", {})&lt;/code&gt;, the output would be the message "Lola ate [Object object] biscuits", which only makes sense if [Object object] is a new brand of dog biscuit (hm, maybe that might make a good brand in the Bay Area).&lt;/p&gt;

&lt;p&gt;Some programming languages with dynamic type systems include ones like JavaScript, Python, Ruby, Elixir, Julia, Perl, and much of the long-running LISP family.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#duck-types-my-dog-being-a-cat"&gt;
  &lt;/a&gt;
  Duck types: 🐱 My dog being a cat
&lt;/h2&gt;

&lt;p&gt;While it's not specifically a type system, a lot of languages have what's called &lt;strong&gt;duck typing&lt;/strong&gt;, which comes from the saying "if it walks like a duck and quacks like a duck, it just might be a duck".&lt;/p&gt;

&lt;p&gt;In duck typing, a function can take in arguments of any type, and it's all right with that as long as it has all the methods or fields that get used in that function. As an example of a real-life thing that's duck-typed about Lola, Lola is quite a cat-like dog. She steals the yarn when someone is knitting, she likes to climb on top of the couch, and as we'll see in this Ruby code, she plays fetch like a cat; hiding under furniture because she's more into capture the flag than fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_at_home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kitty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;toy_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;throw_toy_to_kitchen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;kitty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_to&lt;/span&gt; &lt;span class="n"&gt;toy_location&lt;/span&gt;
  &lt;span class="n"&gt;kitty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hide_under_the_footrest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is made for a cat, but Lola can still be the &lt;code&gt;kitty&lt;/code&gt; we pass into the function too; she's got a &lt;code&gt;run_to&lt;/code&gt; method, and a &lt;code&gt;hide_under_the_footrest&lt;/code&gt; method!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TN-xbxEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idxpbmhhryyhhbyykz08.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TN-xbxEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idxpbmhhryyhhbyykz08.jpeg" alt="Adorable Havanese dog poking out of the footrest with her tennis ball" width="880" height="875"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some examples of programming languages with some degree of duck typing are Ruby and Python, and Go through its interface types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inferred-types-playing-with-your-dog-at-the-dog-park"&gt;
  &lt;/a&gt;
  Inferred types: 🎾 Playing with your dog at the dog park
&lt;/h2&gt;

&lt;p&gt;Remember in the C++ example how for static types, we had to declare the type of each variable we're using? There actually are some statically-typed programming languages where in some spots, the language can figure out what types you're working with. If a language can do that, it has &lt;strong&gt;type inference&lt;/strong&gt;, and it's been around for a while but getting quite popular lately!&lt;/p&gt;

&lt;p&gt;A real-life example of type inference with Lola is playing fetch at a dog park she and some other dogs are at. Here's what that looks like in one of the languages with type inference in the language I do the most with, Go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;fetchAtTheDogPark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dogPark&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;lola&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;dogPark&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s, fetch! 🎾&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ballLocation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;throwTennisBallSomewhere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ballLocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bringItBackIfSheFeelsLikeIt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happens with types in the Go code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;fetchAtTheDogPark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dogPark&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like in the C++ example, we do still need to specify the types of our function parameters. In this case, we're passing in an array-like collection of Dogs called a "slice" (slices in Go are used the same way as arrays in other languages). So &lt;code&gt;dogPark&lt;/code&gt; is supposed to be the list of all dogs at the dog park.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;lola&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;dogPark&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we &lt;strong&gt;don't&lt;/strong&gt; need to specify types, is when we're making a variable for Lola as the first dog. We told Go that &lt;code&gt;dogPark&lt;/code&gt; is a &lt;code&gt;[]Dog&lt;/code&gt;, so because of that, Go can &lt;strong&gt;infer&lt;/strong&gt; that &lt;code&gt;dogPark[0]&lt;/code&gt; is a Dog because the items in the slice can't be any other type. Just like in a real-life dog park, the only animals there I'm able to throw the tennis ball to are dogs. We didn't need to specify that Lola is a dog, Go already knows that part!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s, fetch! 🎾&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ballLocation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;throwTennisBallSomewhere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ballLocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bringItBackIfSheFeelsLikeIt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we now are able to use our Lola variable as a &lt;code&gt;Dog&lt;/code&gt;. We call her by her name, we throw the ball, she goes to &lt;code&gt;runTo&lt;/code&gt; that ball, and finally, she'll &lt;code&gt;bringItBackIfSheFeelsLikeIt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AXmY_rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl9uob06itdwhft6c8w0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AXmY_rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl9uob06itdwhft6c8w0.jpg" alt="Lola sprinting around on Crane Beach" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, if you like type inference and want to take that to the next level, another interesting language is Haskell (no relation to my family, Haskell in this case is a first name, not a last name). It takes some getting used to if you're more familiar with languages like Python and JavaScript, but to demonstrate what its type inference can do, here's an example of a function in Haskell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- larger returns the larger item out of the two&lt;/span&gt;
&lt;span class="c1"&gt;-- items passed in&lt;/span&gt;
&lt;span class="n"&gt;largerItem&lt;/span&gt; &lt;span class="n"&gt;oneThing&lt;/span&gt; &lt;span class="n"&gt;otherThing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oneThing&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;otherThing&lt;/span&gt;
    &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;oneThing&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;otherThing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declared a function &lt;code&gt;largerItem&lt;/code&gt; that takes in two objects of the same type, and didn't even need to mention a single type! We can compare two numbers with it, or two strings with it. Or, if we had a type for different dog breeds compared by size, we could call &lt;code&gt;larger havanese greatDane&lt;/code&gt; and get back &lt;code&gt;greatDane&lt;/code&gt; because Great Danes are gigantic!&lt;/p&gt;

&lt;p&gt;But this is not dynamic typing just because our code didn't mention types; because of this line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oneThing&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;otherThing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function's body used the greater than sign, so Haskell knows that the only variables that are allowed to be passed into the &lt;code&gt;larger&lt;/code&gt; function are two objects of the same type can be compared with the greater-than sign. So if in your Haskell code, you call &lt;code&gt;larger 3.14 sheepadoodle&lt;/code&gt;, it won't run at all because &lt;code&gt;3.14&lt;/code&gt; is a number and &lt;code&gt;sheepadoodle&lt;/code&gt; is a dog breed.&lt;/p&gt;

&lt;p&gt;In addition to Go and Haskell, some other languages with type inference are ones like Swift, OCaml, Crystal, and Rust.&lt;/p&gt;

&lt;p&gt;We've taken a look at five languages and four kinds of ways to do types. Type system isn't the only thing to consider when picking out a language, but hopefully when you're picking one out or learning a new language, this helps you understand that part of the programming languages and how you structure your codebase. And understand why Lola can do so many kinds of coding! 🐼&lt;/p&gt;

&lt;p&gt;Shoutout to Vicki Langer for peer reviewing!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Using GitHub Actions to Update .NET Dependencies Automatically</title>
      <author>Stephen Walsh</author>
      <pubDate>Sat, 27 Nov 2021 20:45:31 +0000</pubDate>
      <link>https://dev.to/stphnwlsh/using-github-actions-to-update-net-dependencies-automatically-4chb</link>
      <guid>https://dev.to/stphnwlsh/using-github-actions-to-update-net-dependencies-automatically-4chb</guid>
      <description>&lt;p&gt;It’s a tale as old as time, as a software engineer, you write some code, you’re happy with it and then you deliver it. End of story, right? No more work to be done! As usual there’s many more layers to deal with and one of those many layers is maintenance……boooooo!!!!!&lt;/p&gt;

&lt;p&gt;I know this isn’t the most amazing topic to write about, but it solves a real-world problem for me and I’m hoping for some of you too.&lt;/p&gt;

&lt;p&gt;I’m a backend engineer and write a lot of C#, which means I end up with solutions relying on NuGet packages. These do need to be updated all the time because there are other engineers out there doing amazing work keeping their packages up to date and I like to keep my dependencies up to date. This is where I find myself, with the problem of having to create a branch, update the packages, commit it, then seek PR approval, just to get some minor updates through. It’s annoying and I want to solve this.&lt;/p&gt;

&lt;p&gt;Before we get underway, are these instructions for me?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a solution written in .NET…these instructions only work for code in .NET.&lt;/li&gt;
&lt;li&gt;The code already is, or you are about to host this solution in Github….so you can use Actions.&lt;/li&gt;
&lt;li&gt;You want to update your NuGet packages, engineers have valid reasons for doing or not doing things, no pressure here. I like to keep my packages up to date or at the very least alert me to when I need to make changes because of dependency updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are in, it’s time to work with me here, Actions can be used to trigger many workflows. The most common being build and release pipelines for you project. The answer to our problem also lives in an Action. The time has come to create a new one.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to your GitHub Repository of choice&lt;/li&gt;
&lt;li&gt;Select the Actions tab&lt;/li&gt;
&lt;li&gt;Click that New Workflow button&lt;/li&gt;
&lt;li&gt;Ignore all the templates and select “Set up a Workflow Yourself”&lt;/li&gt;
&lt;li&gt;Delete all the sample code and we are good to go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iludRu-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvaw7lgazrdf1yct39nz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iludRu-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvaw7lgazrdf1yct39nz.gif" alt="Create a New Black GitHub Action" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-1-create-a-schedule-action"&gt;
  &lt;/a&gt;
  Step 1: Create a schedule action
&lt;/h2&gt;

&lt;p&gt;This is the easiest part, this action will run once a week. You can change the schedule to anything you want. GitHub Action don’t run perfectly on time, but the do run. For more on scheduled jobs and setting the schedules, read the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#schedule"&gt;GitHub Documentation&lt;/a&gt; and checkout the examples at &lt;a href="https://crontab.guru/examples.html"&gt;Crontab Guru&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Automated Dependency Updates
on:
    schedule:
        - cron:  '0 0 * * 0'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-setup-the-job"&gt;
  &lt;/a&gt;
  Step 2: Setup the Job
&lt;/h2&gt;

&lt;p&gt;Next up we set up the job. This is where we define what steps we want to run. We’re running this job on the latest version of Ubuntu. Next, we setup the default &lt;code&gt;actions/checkout&lt;/code&gt; step as well as &lt;code&gt;actions/setup-dotnet&lt;/code&gt; to install the version of the .NET SDK we need for our solution. I need .NET 6 for this job. You must that notice the changed token for the checkout &lt;code&gt;AUTOMATED_DEPENDENCY_UPDATES_TOKEN&lt;/code&gt;, this comes in handy in Step 5, I’ll explain what’s up down there.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    dependencies: 
        name: Update Dependencies
        runs-on: ubuntu-latest
steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.AUTOMATED_DEPENDENCY_UPDATES_TOKEN }}
    - name: Setup
      uses: actions/setup-dotnet@v1
      with:
          dotnet-version: 6.0.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-update-those-dependencies"&gt;
  &lt;/a&gt;
  Step 3: Update those Dependencies
&lt;/h2&gt;

&lt;p&gt;These are the base steps of updating our NuGet packages. First, we need to install the &lt;a href="https://github.com/dotnet-outdated/dotnet-outdated"&gt;dotnet-outdated tool&lt;/a&gt; and then validate if we need to take any further action. If we run &lt;code&gt;dotnet outdated&lt;/code&gt; and there are not packages to update we should cancel the rest of the steps in this job.&lt;br&gt;
This is done but setting an output variable on the validate step that can be used by every other step in the job to determine if it should run or not. If there are no updates to be made, then we set the output variable to &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
If we have updates to make them, we run &lt;code&gt;dotnet outdated -u&lt;/code&gt; to force the NuGet updates. If this is successful, then we set the output variable to &lt;code&gt;true&lt;/code&gt; to allow the following steps to run.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Tools
  id: tools      
  run: dotnet tool install --global dotnet-outdated-tool     
- name: Update      
  id: update      
  run: |        
      OUTPUT=$(dotnet outdated)        
      if [[ $OUTPUT =~ "No outdated dependencies" ]]; then
          echo "::set-output name=updated::false"        
      else            
          dotnet outdated -u                    
          echo "::set-output name=updated::true"        
      fi      
  shell: bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-run-your-tests"&gt;
  &lt;/a&gt;
  Step 4: Run your Tests
&lt;/h2&gt;

&lt;p&gt;After you’ve updated the NuGet packages you need to validate that the changes haven’t broken your code. The best way to do that is to build and test your solution. It’s a simple &lt;code&gt;dotnet test&lt;/code&gt; command to run all the tests on the solution. You can update this statement to suit your needs, the default should be to run all your tests.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Test
  id: test
  if: ${{ steps.update.outputs.updated == 'true' }}
  run: dotnet test -c Release -v minimal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-commit-and-push"&gt;
  &lt;/a&gt;
  Step 5: Commit and Push
&lt;/h2&gt;

&lt;p&gt;The final step is to commit and then push the NuGet package updates, if the tests pass then this step runs and your automated package update is complete. When we used the &lt;code&gt;AUTOMATED_DEPENDENCY_UPDATES_TOKEN&lt;/code&gt; in the checkout step, that was to step around the fact that the inbuilt &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; will not trigger a follow-on workflow. If you generate a specific &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;Personal Access Token&lt;/a&gt; to use when checking the code out then after the code is pushed, if you have another automated workflow, it will trigger.&lt;br&gt;
Finally, we set the commit message and author. This will register the commit to the GitHub Action user and not the user who setup the job.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Push
  id: push
  if: ${{ steps.update.outputs.updated == 'true' }}
  uses: stefanzweifel/git-auto-commit-action@v4
  with:
      commit_author: github-actions[bot] &amp;lt;41898282+github-actions[bot]@users.noreply.github.com&amp;gt;
      commit_user_name: github-actions[bot]
      commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
      commit_message: Automated Dependency Updates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#were-done"&gt;
  &lt;/a&gt;
  We’re Done!
&lt;/h2&gt;

&lt;p&gt;Now let’s put all the steps together in one easy Gist to use in any other repository. Hope this helps you automate that boring task too. This can work for any other CI/CD tool that allows for scheduled jobs. The concepts are the same just follow the Checkout, Update, Test and Push process.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;If you like this, checkout my other examples on &lt;a href="https://github.com/stphnwlsh"&gt;GitHub&lt;/a&gt; and consider supporting me at &lt;a href="https://www.buymeacoffee.com/stphnwlsh"&gt;Buy Me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/stphnwlsh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Elsyl70X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.buymeacoffee.com/assets/img/guidelines/download-assets-sm-1.svg" alt='"Buy Me A Coffee"' width="260" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>dotnet</category>
      <category>nuget</category>
      <category>ci</category>
    </item>
    <item>
      <title>Interesting C++ bug involving `std::cin` for input.</title>
      <author>Calin Baenen</author>
      <pubDate>Sat, 27 Nov 2021 20:38:29 +0000</pubDate>
      <link>https://dev.to/baenencalin/interesting-c-bug-involving-stdcin-for-input-14gg</link>
      <guid>https://dev.to/baenencalin/interesting-c-bug-involving-stdcin-for-input-14gg</guid>
      <description>&lt;p&gt;So, I was making hangman for fun, and I had&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;    &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I discovered something interesting.&lt;br&gt;
I was just playing around, and I typed &lt;code&gt;1&lt;/code&gt;, and spammed a bunch of &lt;code&gt;0&lt;/code&gt;s.&lt;br&gt;
Sort of like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1000000000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then it did something really strange, it skipped the next &lt;code&gt;std::cin&lt;/code&gt; command (which was the one for &lt;code&gt;word&lt;/code&gt;).&lt;br&gt;
And then... it kept repeating, printing things over and over (probably because I was in a &lt;code&gt;while(true)&lt;/code&gt;), but it didn't bother to stop when it hit &lt;code&gt;std::cin&lt;/code&gt;, even on the next loop iteration, instead constantly having the number be equal to &lt;code&gt;65535&lt;/code&gt;, &lt;code&gt;(2^16)-1&lt;/code&gt;; or in other words, the 16 bit integer (&lt;code&gt;unsigned short&lt;/code&gt;) limit.&lt;/p&gt;

&lt;p&gt;Even if I enter &lt;code&gt;65536&lt;/code&gt;, the &lt;code&gt;unsigned short&lt;/code&gt; limit plus one, it still bugs out in this crazy way.&lt;/p&gt;

&lt;p&gt;Here's an image of what happens after I do this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3H4qhzRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kuqopqavztj6kwojc6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3H4qhzRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kuqopqavztj6kwojc6c.png" alt="Before submitting my answer of  raw `65536` endraw ." width="880" height="424"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeiWnnL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63a20ydxetkt9y13d74a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeiWnnL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63a20ydxetkt9y13d74a.png" alt="Literally only a second after I submit my answer of  raw `65536` endraw ." width="880" height="424"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;This is what should happen normally:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayanKp-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjwvyq78fi6drudkioul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayanKp-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjwvyq78fi6drudkioul.png" alt="This is what should happen." width="880" height="423"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Strangely, this bug will also happen if I pass any strings that include a space (&lt;code&gt;&lt;/code&gt;) character in them for &lt;code&gt;answer&lt;/code&gt; (for some reason).&lt;/p&gt;

&lt;p&gt;This is my code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;    &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Enter the amount of guesses to allow: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Enter the word for P2 to guess: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"[Guesses: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;guesses&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Word: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If anyone knows what's causing these bugs, and how I can fix them, let me know!&lt;/p&gt;

&lt;h1&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>bugs</category>
      <category>watercooler</category>
      <category>help</category>
    </item>
    <item>
      <title>A quick Glitch bio break!</title>
      <author>Andy Piper</author>
      <pubDate>Sat, 27 Nov 2021 20:21:04 +0000</pubDate>
      <link>https://dev.to/andypiper/a-quick-glitch-bio-break-1c6a</link>
      <guid>https://dev.to/andypiper/a-quick-glitch-bio-break-1c6a</guid>
      <description>&lt;p&gt;Today, I had time to do some coding 🧑🏼‍💻 😀&lt;/p&gt;

&lt;p&gt;I started my Saturday early, with a 6am presentation (my time) to one of our &lt;a href="https://twitterdev.bevylabs.com/events/details/twitter-delhi-twitter-developer-community-presents-twitter-v2-api-whats-next/"&gt;Twitter Developer Communities, in India&lt;/a&gt;. It was a fun run through of &lt;a href="https://twittercommunity.com/t/ushering-in-a-new-era-for-the-twitter-developer-platform-with-the-twitter-api-v2/162087"&gt;what’s available in the brand new version of the Twitter API&lt;/a&gt;, with a live demo using &lt;a href="https://t.co/twitter-api/postman"&gt;our Postman Collection&lt;/a&gt; 💻 I also took some really great questions from the folks in the live stream, so I appreciated the opportunity.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJpFPK7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354624486960754689/6cFJFbv8_normal.jpg" alt="Andy Piper profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Andy Piper
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/andypiper"&gt;@andypiper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      It’s before 7.30am and I’ve already done a technical presentation, consumed 2 coffees, and manually drained a washing machine (and mopped a floor). Happy Saturday! I think I might do some coding, now.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:23 AM - 27 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464495181814771716" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464495181814771716" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464495181814771716" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;After that (and, several cups of ☕), I thought I’d have a play with something that caught my eye a couple of weeks ago - the &lt;a href="https://blog.glitch.com/post/announcing-glitch-in-bio-the-easiest-way-to-share-your-links"&gt;new Glitch in Bio starter template&lt;/a&gt; from the great folks over at Glitch. I'd seen the news about it, and the follow-up &lt;a href="https://blog.glitch.com/post/glitch-in-bio-pwa"&gt;post about the generated sites being Progressive Web Apps&lt;/a&gt; (PWAs), and I had been keen to have a play for a few days... but Real Life™ kept getting in the way! In the meantime, I also read &lt;a href="https://anildash.com/2019/12/10/link-in-bio-is-how-they-tried-to-kill-the-web/"&gt;Anil's commentary around the origin of the whole "link in bio" thing&lt;/a&gt;, and recognised what a nice way this is to break the cycle of losing control of the Web.&lt;/p&gt;

&lt;p&gt;If you haven't used &lt;a href="https://glitch.com"&gt;Glitch&lt;/a&gt; before - errr... you totally &lt;em&gt;should&lt;/em&gt;, because: it's &lt;em&gt;Really Awesome&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Sign-in with GitHub (if you like - I do, because that's mostly where I code), &lt;a href="https://glitch.com/create-project"&gt;choose a starter template&lt;/a&gt; to Remix, and you're off to the races - you can edit your code right in the browser, and see updates live in the window as you make changes. Great for learning, trying new things, prototyping, building joyful web apps... I'm a fan! 🏆 &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://glitch.com/glitch-in-bio"&gt;Glitch in Bio&lt;/a&gt; template builds a static site, so it will stay running (by contrast, unless you &lt;a href="https://help.glitch.com/kb/article/73-glitch-pro-what-s-that/"&gt;Boost&lt;/a&gt; them, other projects will go to sleep to save resource); and, you can even add a custom domain if you want, to make your page URL easier to remember and share.&lt;/p&gt;

&lt;p&gt;Earlier in the week, I jotted down some things I thought I might want to include in my links page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UY23rSD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.glitch.me/844643de-894b-49ce-8757-32fad8afa3c9%252Fideas-sketch.jpeg%3Fv%3D1638029223822" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UY23rSD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.glitch.me/844643de-894b-49ce-8757-32fad8afa3c9%252Fideas-sketch.jpeg%3Fv%3D1638029223822" alt="Sketchnotes" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was super easy to get started - if you want a links page quickly, all you need to do is to modify the &lt;code&gt;settings.json&lt;/code&gt; file in the top-level of the template repository to get set up; that is just configuration, no code at all, really (&lt;a href="https://help.glitch.com/kb/article/144-how-do-i-add-my-links-to-glitch-in-bio/"&gt;here's the documentation&lt;/a&gt; to help you with that, if you need it). However, there's a lot more that you can &lt;em&gt;choose&lt;/em&gt; to do - change the theme (or build your own), customise the layout, images, add embedded widgets, do fun things with CSS, etc. It's the web: HTML, JavaScript and CSS, with all the rich frameworks and APIs you can orchestrate together.&lt;/p&gt;

&lt;p&gt;I fell down a very pleasant, ever-expanding, rabbit hole of playing around with things (my favourite kind of learning project), and I kept a &lt;a href="https://glitch.com/embed/#!/andypiper?path=NOTES.md%3A1%3A0"&gt;development diary&lt;/a&gt; inside my project remix as I went along. Another thing is that I'd not used the &lt;a href="https://vitejs.dev"&gt;Vite framework&lt;/a&gt; before, so I got to look into that a little bit as well. I can see Vite is likely to be something I'll come back to in the future, particularly because I'm reading that it is pretty easy to &lt;a href="https://dev.to/xjamundx/adding-a-rest-api-to-your-vite-server-in-5-seconds-270g"&gt;stand up a REST API&lt;/a&gt; on top of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did
&lt;/h2&gt;

&lt;p&gt;Here are some notes on the changes I made from the defaults - feel free to &lt;a href="https://andypiper.glitch.me"&gt;take a look&lt;/a&gt;. I've also &lt;a href="https://github.com/andypiper/my-glitch-in-bio"&gt;put the code on GitHub&lt;/a&gt;, if you prefer to look there. I'd love to know what ideas you come up with!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I created a custom theme for my page, &lt;code&gt;dusky-lory.css&lt;/code&gt; 🎨 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fun note here: last week, I learned about a little app called &lt;a href="https://birdfolder.app/"&gt;Bird Folder&lt;/a&gt;, which happened because one of the &lt;a href="https://glitch.com/@glitch/featured-glitch-in-bio-remixes"&gt;featured Glitch in Bio examples&lt;/a&gt; is from &lt;a href="https://twitter.com/hootalex"&gt;Alex Tomlinson&lt;/a&gt;, and I checked out his (&lt;strong&gt;&lt;em&gt;BEAUTIFUL&lt;/em&gt;&lt;/strong&gt;) &lt;a href="https://alex.gd/"&gt;portfolio&lt;/a&gt; via his &lt;a href="https://alexlinks.glitch.me"&gt;links page&lt;/a&gt;, which led me to his app... and, I named my theme from a bird's name, generated by Bird Folder 🐤 it's &lt;em&gt;all&lt;/em&gt; connected, see? plus, I work at Twitter, so I'm &lt;em&gt;aaaalll&lt;/em&gt; about the bird names...!&lt;/li&gt;
&lt;li&gt;I used &lt;a href="https://coolors.co"&gt;Coolors&lt;/a&gt; to make a palette for the theme. It was very easy; I'd never used it before, and I might well use it again in the future. I'm aware that I've not checked the colour scheme I made up for contrast and accessibility, though -&amp;gt; #accessibility #WCAG&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am using &lt;a href="https://gravatar.com"&gt;Gravatar&lt;/a&gt; to embed my profile images. This is convenient, as it also lets me get resized versions for different contexts, using the &lt;code&gt;?s=&lt;/code&gt; URL parameter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a future thought is that if the user adds an email address to settings, and has a Gravatar, this could easily be defaulted - the URL is just an MD5 hash of an email address. I chose not to put a plaintext email address into the project, so this is more of a potential adjustment than something I plan to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I fixed the &lt;code&gt;head.html&lt;/code&gt; file to include correct &lt;code&gt;og:&lt;/code&gt; (OpenGraph) and &lt;code&gt;twitter:&lt;/code&gt; (Twitter Cards) &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags, so that when a link to my page is shared on a social site, a nice preview is shown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I found that the Twitter &lt;a href="https://cards-dev.twitter.com/validator"&gt;Card Validator&lt;/a&gt; failed on the default template that I remixed, with a message about a missing &lt;code&gt;twitter:title&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;... weirdly, it's not showing in the embedded Tweet below... hmph! 😖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I added a short bio sentence to &lt;code&gt;settings.json&lt;/code&gt;, with corresponding HTML markup in &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I added &lt;a href="https://stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; and &lt;a href="https://ko-fi.com"&gt;Ko-fi&lt;/a&gt; icons to the &lt;code&gt;social.html&lt;/code&gt; template, and corresponding values in &lt;code&gt;settings.json&lt;/code&gt; to create links to my own pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I used SVGs from &lt;a href="https://iconify.design/"&gt;Iconify&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm all about the Tweets 😜 and I borrowed some ideas from &lt;a href="https://twitter.com/BrainDeadAir"&gt;Sue Smith&lt;/a&gt;'s Glitch &lt;a href="https://tweet-links.glitch.me"&gt;Tweet links&lt;/a&gt; project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in my remix, I've updated Sue's template to provide an option to embed Twitter timelines as well as (or, instead of) individual Tweets, and customised the &lt;a href="https://developer.twitter.com/en/docs/twitter-for-websites/timelines/guides/parameter-reference"&gt;parameters for the Twitter widget embeds&lt;/a&gt; to limit the number of Tweets shown, and to better match my theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I decided that I wanted a different image for the favicon / PWA home screen icon than the default showing in the header on the page itself. I added &lt;code&gt;avatarImageAlt&lt;/code&gt; to the settings so that I could have two versions of my profile image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;and, then I added a CSS opacity &lt;code&gt;hover&lt;/code&gt; animation to fade between them on mouseover on the page itself (in &lt;code&gt;avatar.html&lt;/code&gt; and &lt;code&gt;style.css&lt;/code&gt;, so this can be done independently of theme CSS changes)... see what I mean about a 🐇 hole...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One observation I had while working on this is that the integration between Glitch and GitHub could (should!) be a lot better - I ended up doing all of the commit-and-push work from the web terminal on Glitch. It would also be nice if Glitch defaulted to a git branch of &lt;code&gt;main&lt;/code&gt; for new projects, given this is becoming more common. Something to look into more in the future. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJpFPK7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354624486960754689/6cFJFbv8_normal.jpg" alt="Andy Piper profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Andy Piper
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/andypiper"&gt;@andypiper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      OK, well I said I'd do some coding, put together a little &lt;a href="https://twitter.com/hashtag/GlitchInBio"&gt;#GlitchInBio&lt;/a&gt; page -&amp;gt; &lt;a href="https://t.co/ighIykXHCx"&gt;andypiper.glitch.me&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:41 AM - 27 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464559913238106112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464559913238106112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464559913238106112" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;The nice thing about this: as far as I was concerned, it was a self-contained little hack for a Saturday. I've got a number of other side ideas (noted in the development diary inside the project, including &lt;a href="https://twemoji.twitter.com/"&gt;adding Twemoji&lt;/a&gt; to the mix), but I was trying to keep a couple of principles in my mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To make changes that are transferrable / can be refactored into plugins / templates / themes, so that other people can use them, or contribute back other ideas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To keep the overall page itself, what it is "intended" to be - a jumping off page or portfolio, a way to find out things related to what I do and what I'm interested in and what I've created. I don't want to make an infinitely-scrolling list of random links.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep It Simply Smooth... K.I.S.S. &lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/andypiper?path=index.html" alt="andypiper on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;So: that was my coding adventure and exploration today. Check out &lt;a href="https://andypiper.glitch.me"&gt;my Glitch in Bio 🔗 page&lt;/a&gt;, and let me know what you build - feel free to share a link below in the comments if you make one yourself. Also, make sure you &lt;a href="https://support.glitch.com/t/announcing-glitch-in-bio-the-easiest-way-to-share-your-links/48274"&gt;let the folks at Glitch know&lt;/a&gt; about what you come up with, so the whole community can benefit 👏🏻&lt;/p&gt;

</description>
      <category>glitch</category>
      <category>webdev</category>
      <category>vite</category>
      <category>pwa</category>
    </item>
  </channel>
</rss>
