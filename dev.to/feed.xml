<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Prototype in Javascript</title>
      <author>Amod Shinde</author>
      <pubDate>Tue, 21 Dec 2021 05:17:30 +0000</pubDate>
      <link>https://dev.to/amoled27/prototype-in-javascript-kll</link>
      <guid>https://dev.to/amoled27/prototype-in-javascript-kll</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYTCjWC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jt14918mz6if5hbnu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYTCjWC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jt14918mz6if5hbnu2.png" alt="Prototype in Javascript" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we shall discuss prototype in Javascript and how it works under the hood. Often developers who are new to Javascript wonder what is this magic keyword and how the heck it gives access to some methods you never define? Let us find out what prototype is all about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-javascript-prototype"&gt;
  &lt;/a&gt;
  Introduction to Javascript prototype
&lt;/h2&gt;

&lt;p&gt;By default, Javascript provides the &lt;strong&gt;Object()&lt;/strong&gt; function. You can verify it by printing it in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eYK985lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orrbo5w0ogkofvf9zs6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYK985lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orrbo5w0ogkofvf9zs6b.png" alt="Output" width="383" height="53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object()&lt;/strong&gt; though seems like an object, it's a function and not an object. It might be a little confusing but remember that Object() is a function and it provides an anonymous object that can be referenced using &lt;strong&gt;prototype&lt;/strong&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofFXdnNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/021xifu6ab6pfbhiyt28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofFXdnNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/021xifu6ab6pfbhiyt28.png" alt="output2" width="861" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;Object.prototype&lt;/strong&gt; object has predefined methods such as toString() , valueOf(). In JS, when a function is a value of a property of an object, it's called a method.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;constructor&lt;/strong&gt; of Object.prototype, in turn, references the Object function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUnuTgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c81qnb26o86dgix99qyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUnuTgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c81qnb26o86dgix99qyk.png" alt="Prototype chaining" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand it better using an example. let's define a constructor function called Programmer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above constructor function accepts name and language as parameters and assigns them to the name and language properties respectively. Behind the scene, JS creates a new function Programmer() and an anonymous object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLqKqQxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uo41g9svqzb60f2jb01i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLqKqQxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uo41g9svqzb60f2jb01i.png" alt="Protoypes in javascript" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so similar to what we saw earlier in the case of object function, even this Programmer() function has a property called prototype that references an anonymous object and constructor of which references back to the Programmer() function.&lt;/p&gt;

&lt;p&gt;Let us print both in the console and see the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oirNZMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7jso1ui0na0nyk5eqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oirNZMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7jso1ui0na0nyk5eqk9.png" alt="prototype chaining" width="858" height="126"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wi1TYFqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrls1e41edy64o1526vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wi1TYFqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrls1e41edy64o1526vj.png" alt="Prototype chaining output" width="860" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can observe that the object we get from Programmer.prototype has a constructor that is referencing the Programmer() function itself. In addition to this, JS links the Programmer.prototype to Object.prototype object via &lt;strong&gt;[[ prototype ]],&lt;/strong&gt;  this is known as &lt;strong&gt;prototype linkage.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Image will help you understand it better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0KMz0bdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/499garz1tq69puwm4xlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0KMz0bdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/499garz1tq69puwm4xlh.png" alt="Prototypes" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-custom-methods-in-the-javascript-prototype"&gt;
  &lt;/a&gt;
  Defining custom methods in the Javascript prototype
&lt;/h2&gt;

&lt;p&gt;You can define your own custom methods in the prototype object. These custom functions are further accessible to the instances created from that function. &lt;/p&gt;

&lt;p&gt;The following code defines a new method called intro() on Programmer.prototype:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; and I am a &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This intro() function is added to the Programmer.prototype object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtV1nPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdgxy9jaecpbobx3j5er.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtV1nPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdgxy9jaecpbobx3j5er.png" alt="javascript prototypes" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create an instance of the &lt;strong&gt;Programmer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JS will now create a new object &lt;strong&gt;p&lt;/strong&gt; and links to Programmer.prototype object via the prototype linkage.&lt;/p&gt;

&lt;p&gt;Now let's call the intro() function from this &lt;strong&gt;p&lt;/strong&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;introduction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bH4zM4Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0obvdke9i0acm3duock.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bH4zM4Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0obvdke9i0acm3duock.png" alt="JS prototype o/p" width="841" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does this work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;p&lt;/strong&gt; doesn't have its own intro() method, Javascript follows the prototype linkage and finds it on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; object and executes it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dy4jxM29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tfyvjuf0o3lntugzido.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dy4jxM29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tfyvjuf0o3lntugzido.png" alt="prototype" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's try to call &lt;strong&gt;toString( )&lt;/strong&gt; method on &lt;strong&gt;p&lt;/strong&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How does this work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, since &lt;strong&gt;p&lt;/strong&gt; doesn't have its own &lt;strong&gt;toString( )&lt;/strong&gt; method, Javascript follows the prototype linkage and searches for it on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; object. Because the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; doesn't have the &lt;strong&gt;toString( )&lt;/strong&gt; ,method, it further follows the prototype linkage and searches in the &lt;strong&gt;Object.prototype&lt;/strong&gt; object. It finds &lt;strong&gt;toString( )&lt;/strong&gt;  here and executes it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zn6Z9evx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j0ex58o5kh1uxbqpc3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zn6Z9evx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j0ex58o5kh1uxbqpc3s.png" alt="Prototype" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you call a method that doesn't exist up the prototype linkage, i.e. on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; or &lt;strong&gt;Object.prototype,&lt;/strong&gt; then Javascript will throw an error that it cannot find the method specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeProfession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;since changeProfession( ); doesn't exist on any of the objects in the prototype chain javascript throws an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KsX5SJ6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6oeao0eum6ccti4s85z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KsX5SJ6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6oeao0eum6ccti4s85z.png" alt="prototype in js" width="861" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;let's create another instance called &lt;strong&gt;q:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Raj&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaCA6c8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4is1rhn8rtxc3yr0479.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaCA6c8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4is1rhn8rtxc3yr0479.png" alt="prototype in js" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;p&lt;/strong&gt;  and &lt;strong&gt;q&lt;/strong&gt;  both the objects have the same objects and properties. But what if we define another method on &lt;strong&gt;q&lt;/strong&gt; ? will p be able to access it ?&lt;/p&gt;

&lt;p&gt;The code defines method &lt;strong&gt;getSalary( )&lt;/strong&gt; on &lt;strong&gt;q&lt;/strong&gt; object.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My salary is decent.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;strong&gt;getSalary( )&lt;/strong&gt;  method is added to only &lt;strong&gt;q&lt;/strong&gt;  object and not on &lt;strong&gt;Programmer.prototype&lt;/strong&gt; or &lt;strong&gt;p.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exgfY86C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ishcwgra4g58ts8bn13d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exgfY86C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ishcwgra4g58ts8bn13d.png" alt="Image js" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you try to call &lt;strong&gt;getSalary( )&lt;/strong&gt; function with p: it will throw an error:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dunder-proto-proto-"&gt;
  &lt;/a&gt;
  The Dunder Proto (_ _ proto _ _)
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;proto&lt;/strong&gt; is pronounced as dunder proto. The &lt;strong&gt;proto&lt;/strong&gt; is an accessor property of the Object.prototype object. It exposes the internal prototype linkage ( [[Prototype]]) of an object through which it is accessed.&lt;/p&gt;

&lt;p&gt;The p.&lt;strong&gt;proto&lt;/strong&gt; exposes the [[Prototype]] that references the Programmer.prototype object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should, however, use the Object.getPrototypeOf() method instead of the &lt;strong&gt;proto&lt;/strong&gt;. The Object.getPrototypeOf() method returns the prototype of a specified object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another popular way to get the prototype linkage when the Object.getPrototypeOf() method wasn’t available is via the constructor property as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;p.constructor&lt;/code&gt; returns programmer, therefore, &lt;code&gt;p.constructor.prototype&lt;/code&gt; returns the prototype object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shadowing"&gt;
  &lt;/a&gt;
  Shadowing
&lt;/h2&gt;

&lt;p&gt;See the following method call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The p object doesn’t have the intro() method defined, therefore JavaScript goes up to the prototype chain to find it. In this case, it can find the method in the Programmer.prototype object.&lt;/p&gt;

&lt;p&gt;Let’s add a new method to the object p with the same name as the method in the Programmer.prototype object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And call the &lt;strong&gt;intro( )&lt;/strong&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;strong&gt;p&lt;/strong&gt; object has the &lt;strong&gt;intro()&lt;/strong&gt; method, JavaScript just executes it immediately without looking it up in the prototype chain.&lt;/p&gt;

&lt;p&gt;This is an example of shadowing. The &lt;strong&gt;intro()&lt;/strong&gt; method of the &lt;strong&gt;p&lt;/strong&gt; object shadows the &lt;strong&gt;intro()&lt;/strong&gt; method of the prototype object which the &lt;strong&gt;p&lt;/strong&gt; object references.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top DevOps News of 2021 RECAP</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Tue, 21 Dec 2021 05:10:43 +0000</pubDate>
      <link>https://dev.to/n3wt0n/top-devops-news-of-2021-recap-1cbl</link>
      <guid>https://dev.to/n3wt0n/top-devops-news-of-2021-recap-1cbl</guid>
      <description>&lt;p&gt;What happened in the DevOps Space in 2021? Yep, It's that time of the year... These are the Top 10 DevOps-related news of 2021!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;This post is the last one I will publish in 2021. In fact I will take a short break and I will publish the next post (and video) next year ;)&lt;/p&gt;

&lt;p&gt;Alright, these are my &lt;strong&gt;top 10 news of this year&lt;/strong&gt;, but if you have any other news that you want to share or that you think is more important please let me know in the comment section below, I'd love to hear your opinion.&lt;/p&gt;

&lt;p&gt;Also, the news are not in any specific order. If one comes before another it doesn't mean it's more important or anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2R1nSOBBMuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw"&gt;Link to the video: https://youtu.be/2R1nSOBBMuw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-devops-state-in-2021"&gt;
  &lt;/a&gt;
  General DevOps State in 2021
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=50"&gt;Watch this part here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a general comment, this year has been great for DevOps tools, but not &lt;strong&gt;so much for DevOps Adoption&lt;/strong&gt; at higher level.&lt;/p&gt;

&lt;p&gt;The DORA's report for 2021, in fact, shows Modest DevOps Gains in comparison to 2019.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1lulxZUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phmvwhjknhezrzlpz9j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1lulxZUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phmvwhjknhezrzlpz9j1.png" alt="DORA" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There has been only a 6% increase in the number of Elite Performers in the last 2 years, even tho the high performer grew about 17%. Not bad of course, but could be better. Not sure if the growth has been slowed down because of the pandemic, but all the analysts were expecting bigger numbers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_QTutgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m6x7dbp2wvmq2vhftkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_QTutgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m6x7dbp2wvmq2vhftkn.png" alt="DORA SRE" width="481" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is interesting in my opinion is the number of organizations that are reportedly using SRE practices, about 52% of the respondent to the study, even tho only the 10% of the elite performers reported to have implemented the totality of the practices. There is a lot of room for growth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-github-ceo-change"&gt;
  &lt;/a&gt;
  1. GitHub CEO Change
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=100"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, let's jump to the first news, which is pretty recent and came quite unexpected. I'm talking about GitHub CEO Nat Friedman stepping down from the role.&lt;/p&gt;

&lt;p&gt;In an internal post, subsequently published also on GitHub's blog on November 3, Nat in fact announced that he was stepping down as CEO of GitHub after more than 3 years of service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlbrMyje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1k2falepc7invcyav0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlbrMyje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1k2falepc7invcyav0e.png" alt="GitHub Stats" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the same post, Nat Friedman also announced the latest figure about GitHub usage: 73 million of active developers, and about 84% of Fortune 500.&lt;/p&gt;

&lt;p&gt;And the same day the company announced the new CEO, again with a post on the public Blog. Thomas Dohmke, who was previously Chief Product Officer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3soBX1Xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkv4lldu9ano9zcxu33g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3soBX1Xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkv4lldu9ano9zcxu33g.png" alt="GitHub New CEO" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thomas has joined GitHub in 2018 together with Nat, and has been in charge of some very important programs like the GitHub Archive, Dependabot, Codespaces, Copilot and even the NPM acquisition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skFULHsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0h1l0q1capwqf16vw5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skFULHsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0h1l0q1capwqf16vw5q.png" alt="GitHub Statement" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the post, Thomas assured that GitHub will remain an independent outfit within Microsoft and that it will retain its developer-first values, distinctive spirit, and open extensibility, while supporting developers in their choice of any language, license, tool, platform, or cloud.&lt;/p&gt;

&lt;p&gt;Well, good to know that. Who knows what GitHub will have for us in the coming months.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-github-actions-oidc-support-for-passwordless-authentication-to-cloud"&gt;
  &lt;/a&gt;
  2. GitHub Actions OIDC Support for Passwordless Authentication to Cloud
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=168"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And still talking about GitHub, time for a more technical news. During GitHub Universe 2021 in October, it has been announced that GitHub Actions will now support OpenID Connect as authentication method to connect to Cloud resources.&lt;/p&gt;

&lt;p&gt;The usage of OpenID Connect, OIDC, solves a long standing problem afflicting all the major CI/CD platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdNmHYKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me2wmuebrq7okx010rte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdNmHYKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me2wmuebrq7okx010rte.png" alt="CI CD Credentianls" width="880" height="778"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CI/CD workflows are often designed to access a cloud provider in order to deploy software or use the cloud's services.&lt;br&gt;
To access these resources, the workflow will supply credentials, such as a passwords or tokens, to the cloud provider. These credentials are usually stored as a secret, and the workflow presents this secret to the cloud provider every time it runs.&lt;/p&gt;

&lt;p&gt;But using hardcoded secrets requires you to create credentials in the cloud provider and then duplicate them in GitHub as a secret. With OIDC, you can take a different approach, configuring your workflow to request a short-lived access token directly from the cloud provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kX6-6SUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53k311zjif1ptsu6r2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kX6-6SUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53k311zjif1ptsu6r2.jpg" alt="OIDC Flow" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your cloud provider also needs to support OIDC on their end of course, and you must configure a trust relationship that controls which workflows are able to request the access tokens.&lt;/p&gt;

&lt;p&gt;[Other benefits of OIDC are that permissions can be made more granular by configuring conditions for issuing tokens, and that tokens are only valid for a single workflow run, and then automatically expire. This increase security and remove the needs for credentials rotation.&lt;/p&gt;

&lt;p&gt;Providers that currently support OIDC include AWS, Azure, GCP, and HashiCorp Vault, and more will be added over time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-snyk-extends-tools-portfolio-to-drive-devsecops-adoption"&gt;
  &lt;/a&gt;
  3. Snyk Extends Tools Portfolio to Drive DevSecOps Adoption
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=269"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, enough talking about GitHub, let's move to the 3rd news and we will still be talking about Security.&lt;/p&gt;

&lt;p&gt;During its online annual conference in October, Snyk, one of the leading companies focusing on DevSecOps, announced a massive expansion of their Tools Portfolio.&lt;/p&gt;

&lt;p&gt;Snyk Code has added support for support for C++, C#, Elixir, Ruby, PHP and Go.&lt;/p&gt;

&lt;p&gt;Snyk Open Source has been extended to provide native integration with Atlassian BitBucket and AWS CodePipeline platforms, while tightening the integrations with DigitalOcean and HashiCorp. Support for package managers Yarn 2 and Poetry has been added, alongside integration with a C++ scanning tool from FossilID&lt;/p&gt;

&lt;p&gt;The Snyk Container platform is now integrated with the open source Trivy container scanning tools and with Snyk’s vulnerability database in addition to adding support for container registries such as Quay, GitHub Container Registry, GitLab, Google Artifact Registry and Harbor.&lt;/p&gt;

&lt;p&gt;The Snyk infrastructure-as-code platform now also makes it possible to detect configuration issues in Kubernetes manifests in Terraform code in a way that is compatible with cloud platforms from AWS, Azure and GCP.&lt;/p&gt;

&lt;p&gt;And finally, Snyk launched both a new free developer security education program, dubbed Snyk Learn, through which developers can attain and measure their level of DevSecOps expertise and Snyk Impact, an effort to foster collaboration among developers involving a wide range of socio-economic issues.&lt;/p&gt;

&lt;p&gt;If you want to know more about Snyk and the tools they provide, check out the &lt;a href="https://youtu.be/hXiJJUTiLEw"&gt;complete review I made about their toolset&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-chaos-engineering-with-azure-chaos-studio"&gt;
  &lt;/a&gt;
  4. Chaos Engineering With Azure Chaos Studio
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=362"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, a very interesting news about Azure. During Ignite 2021 Microsoft has in fact announced the public preview of Azure Chaos Studio.&lt;/p&gt;

&lt;p&gt;As the name hints, with Chaos Studio you can practice chaos engineering, because it enables you to orchestrate fault injection on your Azure resources in a safe and controlled way.&lt;/p&gt;

&lt;p&gt;Chaos Studio is a fully-managed service, so it doesn’t require you to do any management or maintenance of the service, and of course it is deeply integrated into Azure, leveraging ARM templates, Azure Policy, Application Insights and Azure AD for RBAC&lt;/p&gt;

&lt;p&gt;It uses a fault library that cover several Azure services and replicates real-world scenarios: you can run faults in sequence and/or in parallel, add time delays, and group target resources across regions.&lt;/p&gt;

&lt;p&gt;It does even allow to easily stop an experiment and roll back the fault being injected to avoid having more impact to an environment than originally intended.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is not always easy to do, and it is especially difficult to do it right (aka without taking down the whole production), so this service is extremely interesting for me and I can't wait to try it out. If you are interested too, consider subscribing because I will soon have a video about this.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-aws-announced-devops-guru"&gt;
  &lt;/a&gt;
  5. AWS Announced DevOps Guru
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=423"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But Azure is not the only cloud provider that has announced something major in the DevOps space this year. AWS, in fact  announced during their re:Invent conference a new tool called DevOps Guru which should help operations find issues that could be having an impact on an application performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyXs67Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8d6o1nwjh0wlw1ebu3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyXs67Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8d6o1nwjh0wlw1ebu3j.png" alt="AWS DevOps Guru" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way it works is that it collects and analyzes data from application metrics, logs, and events to identify behavior that deviates from normal operational patterns.&lt;/p&gt;

&lt;p&gt;When it finds a problem, the service can send an SMS, Slack message or other communication to the team and provides recommendations on how to fix the problem as quickly as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWQqCVUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td3f751rwmcchm3toqj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWQqCVUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td3f751rwmcchm3toqj6.png" alt="AWS DevOps Guru Stats" width="855" height="810"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This service gives AWS a product that would be competing with companies like Sumo Logic, DataDog or Splunk by providing deep operational insight on problems that could impact your applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-salesforce-makes-devops-for-salesforce"&gt;
  &lt;/a&gt;
  6. Salesforce Makes DevOps for Salesforce
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=482"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next news is about Salesforce... Now, I know what you are thinking... "Really? Talking about Salesforce in the Top 10 DevOps news for 2021?" Well, it does sound strange, but I think they've actually got something here...&lt;/p&gt;

&lt;p&gt;At its online conference  in June, Salesforce  unveiled a DevOps Center pilot that provides a portal through which organizations can track and manage changes to Salesforce applications, including work items and pipelines that should be fully configurable.&lt;/p&gt;

&lt;p&gt;In addition, Salesforce added Salesforce Functions to enable developers to deploy code in a serverless environment, using any code... or so they said.&lt;/p&gt;

&lt;p&gt;They have also announced a new unified command line interface (CLI) for all its applications, which allows you to work with and automate all of Salesforce and Heroku at the same time, including the new Functions. Also because the only way you have to create those functions is via the CLI.&lt;/p&gt;

&lt;p&gt;Finally, Salesforce added an Einstein Automate tool that employs machine learning algorithms to both integrate data and automate workflows.&lt;/p&gt;

&lt;p&gt;I've never been a huge fan of Salesforce and Salesforce development in particular, but I think adding more DevOps components and services to the platform is a good thing. What do you think? Let me know in the comments below.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-docker-desktop-no-longer-free"&gt;
  &lt;/a&gt;
  7. Docker Desktop No Longer Free
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=566"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a blog post on the 31st of August, Docker's CEO announced that the use of Docker Desktop in large businesses now requires a Pro, Team, or Business paid subscription. And Large businesses for them means companies with 250 or more employees, or annual revenues higher than $10m.&lt;/p&gt;

&lt;p&gt;As part of this announcement, the company has also updated their plans and pricing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9LZgx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3enoatkk645zxun48ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9LZgx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3enoatkk645zxun48ns.png" alt="Docker Pricing" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker has renamed its Free plan to "Personal", and while there are no changes to the $5/month Pro and $7/month Teams subscriptions, a new $21/month Business subscription has been created adding features such as centralized management, single sign-on, and enhanced security.&lt;/p&gt;

&lt;p&gt;As I've said before in my opinion this news made more noise than necessary, and this is for 2 reasons. First of all, there has been no change in the Docker Engine itself and the Docker CLI, those are still free.&lt;/p&gt;

&lt;p&gt;Second, most of the Docker workloads, especially on bigger companies, run on Linux machines, while Docker Desktop supports only Windows and MacOS... so again, not a big deal if you ask me.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-gitlab-removed-its-starter-tier"&gt;
  &lt;/a&gt;
  8. GitLab Removed Its 'Starter' Tier
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=655"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, let's talk about GitLab. At the beginning of the year, in fact, GitLab announced that it would get rid of their cheapest plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcpznxZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0sltnl4ez9yedxtygo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcpznxZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0sltnl4ez9yedxtygo.png" alt="GitLab Blog" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a blog post, GitLab's cofounder and CEO Sid Sijbrandij announced that they were phasing out the Bronze/Starter tier because, and I quote "&lt;em&gt;The Bronze/Starter tier does not meet the hurdle rate that GitLab expects from a tier&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UP4uzdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h66rjfss0ktx07icimr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UP4uzdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h66rjfss0ktx07icimr9.png" alt="GitLab Reason" width="880" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, GitLab decided it was not making enough money on the $4.00 user/month subscription.&lt;/p&gt;

&lt;p&gt;The effect of the change is that any features in Bronze that are not in the free tier have been moved up to Premium tier, which is almost 5 times more expensive that the Starter tier was.&lt;/p&gt;

&lt;p&gt;Luckily the free tier, which in terms of total users is the most popular plan on GitLab, will remain in place, but it only comes with limited CI/CD credits and doesn’t include any support options.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-jiras-negative-year"&gt;
  &lt;/a&gt;
  9. Jira's Negative Year
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=711"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And still on the negative side, but I promise this is the last bad news, I want to talk about Jira. This is not much of a news, rather a market trend, but 2021 has seen a lot of negative comments and feedback targeting the platform. And I mean a lot.&lt;/p&gt;

&lt;p&gt;So much so that someone has even created an entire website dedicated to this, called "&lt;em&gt;Why Jira Sucks&lt;/em&gt;", which at the time of recording lists the 31 biggest complains Jira users have.&lt;/p&gt;

&lt;p&gt;There has even been a video campaign on YouTube in which Jira was personified as an employee of a company and an HR representative was trying to fire them listing all the problems and downsides they have... I have to said that was quite funny to watch, but I felt bad for Atlassian...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WcSYswnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1da8p2wyqe6dmttx9cbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcSYswnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1da8p2wyqe6dmttx9cbf.png" alt="Jira Twitter" width="880" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the situation on twitter isn't better, with countless tweets of angry and frustrated users that use the platform to express their thoughts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMFommSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9hzz8xx3jf76hgvaj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMFommSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9hzz8xx3jf76hgvaj0.png" alt="Jira Meme" width="880" height="1074"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope the recent move of Atlassian to basically deprecate the on-prem installations of their products, including Jira, and move the users to their cloud offering will allow them bring more innovation to the platform and fix the problems they have.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-hashicorp-and-terraform-wins"&gt;
  &lt;/a&gt;
  10. HashiCorp and Terraform Wins
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=780"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, last one for this year. And this is about HashiCorp, the maker of Terraform, Vault, and Consul, just to name a few things.&lt;/p&gt;

&lt;p&gt;This year has been a great year for HashiCorp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoej2q6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avm7t2qm5zdvt0qwdlr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoej2q6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avm7t2qm5zdvt0qwdlr3.png" alt="HashiCorp Microsoft Partner of the Year" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only they have been recognized as the Winner of 2021 Microsoft Open Source Software on Azure Partner of the Year, but also been named #4 on the 2021 Forbes Cloud 100 List.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WYw_2z2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k7d6vftqbh5l67o9k9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYw_2z2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k7d6vftqbh5l67o9k9y.png" alt="HashiCorp Cloud 100" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, that was not the news... the news is that in June HashiCorp released the much awaited version 1.0 of Terraform, the de-facto standard multicloud IaC solution.&lt;/p&gt;

&lt;p&gt;The GA of version 1.0 of course brings a ton of improvements to the system, including an improved experience for both usage and upgrade, and better interoperability, scalability, and stability.&lt;/p&gt;

&lt;p&gt;And with this milestone, Terraform Cloud now has the ability to run checks for third-party Integrations, to enforce security, compliance, and cost management best practices.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Alright, these were the TOP 10 DevOps Related news of 2021 for me. As I said before, let me know in the comment section below if I've missed something you consider important.&lt;/p&gt;

&lt;p&gt;With this, I wish you all a prosperous new year, I hope 2022 will bring you joy.&lt;/p&gt;

&lt;p&gt;Once again, thanks for your support to the channel, &lt;strong&gt;all this wouldn't be possible if not for you. You all made my year.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2R1nSOBBMuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>news</category>
      <category>2021</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Smoother Python with automatic imports | pyflyby</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 21 Dec 2021 05:10:04 +0000</pubDate>
      <link>https://dev.to/waylonwalker/smoother-python-with-automatic-imports-pyflyby-470b</link>
      <guid>https://dev.to/waylonwalker/smoother-python-with-automatic-imports-pyflyby-470b</guid>
      <description>&lt;p&gt;This is not a flaky works half the time kind of plugin, its a seriously smooth editing experience.  I've just started using pyflyby and it is solid so far. I have automatic imports on every save of a python file in neovim, and automatic imports on every command in ipython.&lt;/p&gt;

&lt;p&gt;I can't tell you how pumped I am for this, and how good its felt to use over the past few weeks.  It's glorious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube-video"&gt;
  &lt;/a&gt;
  YouTube video
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Listen to me rant on how great pyflyby is&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2QW5DJiEJH4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Give the video a watch, I did not have noise cancelling on in obs. My appologies for the background hum and the mic stand bumps. I did my best to fix them up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;How to install pyflyby for automatic python imports&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pyflypy is hosted on pypi, so you can get it with pip.  I have had no issues installing it on 3.8+ so far.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flybypy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration-setup-with-stow"&gt;
  &lt;/a&gt;
  configuration setup with stow
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;always stow your dotfiles&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're going to configure any of your tools the first thing you should do is set it up with stow, seriously dont sleep on the stow.  If you don't have stow installed or choose not to use stow you can skip this part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfiles
&lt;span class="nb"&gt;mkdir &lt;/span&gt;ipython
&lt;span class="nb"&gt;touch &lt;/span&gt;ipython/.pyflyby
stow ipython
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Seriously don't sleep on the stow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-pyflyby"&gt;
  &lt;/a&gt;
  How to Configure pyflyby
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;its just a file full of import statements&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pyflyby&lt;/code&gt; is configured simply by putting all of your import statements that you want to automatically import into your &lt;code&gt;~/.pyflyby&lt;/code&gt; file.  You can &lt;code&gt;import pandas&lt;/code&gt;, &lt;code&gt;from pandas import DataFrame&lt;/code&gt;, or even &lt;code&gt;import pandas as pd&lt;/code&gt;, and all of these will work pretty much as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# comments start with a #
# import your favorite libraries
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;visidata&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;vd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fsspec&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;s3fs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;

&lt;span class="c1"&gt;# also supports from imports
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich.layout&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich.live&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Live&lt;/span&gt;

&lt;span class="c1"&gt;# duplicates are allowed
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt;

&lt;span class="c1"&gt;# duplicate names from different libraries are not allowed
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add all the things you would like to be imported automatically, just as you would import them.  I went kinda crazy and added over 200 to mine based on packages that I use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#commas-are-even-supported"&gt;
  &lt;/a&gt;
  Commas are even supported
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;yep all the import styles are supported&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This following example will setup auto import for both DataFrame and Series, they will both work separately.  I removed these from my config as I felt it was cleaner without, but it works with them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Even imports with a comma will be treated separately.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#jupyter-note"&gt;
  &lt;/a&gt;
  jupyter note!
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Both work the same, use what your comfortable with&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I only really mention ipython here, but the same all applies to jupyter as well.  I just really like ipython itself, c'mon its right there in the terminal integrating with the rest of your terminal experience so well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ipython-setup"&gt;
  &lt;/a&gt;
  ipython setup
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Automatically import python libraries in ipython with pyflyby&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The recommended way to setup &lt;code&gt;flybypy&lt;/code&gt; from the docs is to run the following magic command.  This works well, but I wan even less typing, I want pyflyby automatically installed and importing things without me even thinking about it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;pyflyby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#ipython-setup-next-level"&gt;
  &lt;/a&gt;
  ipython setup next level
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;automatically import modules in python &lt;strong&gt;without %load_ext&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I really want pyflyby to just work in every environment without me thinking much about it.  I want it to load automatically, and even to attempt to install itself if its missing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_ipython&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_ipython&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"load_ext pyflyby"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"installing pyflyby"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pip"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"install"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"pyflyby"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEVNULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEVNULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"load_ext pyflyby"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: if installation fails you will still make it into ipython, there will just be a traceback to the failed command as you enter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've had zero issues with this, but if there ever comes a time where it does not work in certain environments for you.  I'd strongly suggest you to add this to a separate profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/ipython-config/"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGo4D7Jb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/ipython-config-og_250x140.png" alt="article cover for Ipython-Config " width="250" height="140"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out &lt;a href="https://waylonwalker.com/ipython-config/"&gt;this article&lt;/a&gt; for a bit more in depth ipython configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#ipython-auto-import-examples"&gt;
  &lt;/a&gt;
  ipython auto import examples
&lt;/h2&gt;

&lt;p&gt;pyflyby can import all the various import types just fine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import something&lt;/li&gt;
&lt;li&gt;from module import something&lt;/li&gt;
&lt;li&gt;import something as alias
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://waylonwalker.com/cars.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#getting-help"&gt;
  &lt;/a&gt;
  Getting Help
&lt;/h2&gt;

&lt;p&gt;Want help on something that you have in your pyflyby config, just give it the &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;??&lt;/code&gt;, or &lt;code&gt;help&lt;/code&gt; and pyflyby will import it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://waylonwalker.com/ipython-help/"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZbIbH_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/ipython-help-og_250x140.png" alt="article cover for Just Ask Ipython for help " width="250" height="140"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://waylonwalker.com/ipython-help/"&gt;this article&lt;/a&gt; has more ways to get help in ipython.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#autocomplete"&gt;
  &lt;/a&gt;
  Autocomplete
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This is next level python auto-import&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pyflyby even goes as far as helping tab completion.  If you try to tab complete &lt;code&gt;Pop&lt;/code&gt; it will complete to &lt;code&gt;Popen&lt;/code&gt; without even adding &lt;code&gt;Popen&lt;/code&gt; to your local namespace.  If you ask for something inside of a module i.e. &lt;code&gt;requests.&amp;lt;tab&amp;gt;&lt;/code&gt;, then it will import requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# does not populate the namespace
&lt;/span&gt;&lt;span class="n"&gt;Pop&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# !!does populate the local namespace
&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-happens-when-a-module-is-not-installed"&gt;
  &lt;/a&gt;
  What happens when a module is not installed
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;ModuleNotFoundError&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you are in an environment where you do not have a module installed that is in your pyflyby config, it will throw a &lt;code&gt;ModuleNotFoundError&lt;/code&gt; when it tries to import and it will not import or try to install for you.  You will have to change environments or install that module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;attempting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;'import pandas as pd'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s"&gt;'pandas'&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"/home/u_walkews/.local/lib/python3.8/site-packages/pyflyby/_autoimp.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1610&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_try_import&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scratch_namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;string&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;ModuleNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s"&gt;'pandas'&lt;/span&gt;
&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="sb"&gt;`pd`&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://waylonwalker.com/cars.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="n"&gt;b040434562&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s"&gt;'pd'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nvim-pyflyby-setup"&gt;
  &lt;/a&gt;
  nvim pyflyby setup
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;automatically importing python modules in vim, neovim, nvim&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is by far the best part of this article.  It makes development so fluid. It's not necessarily all about the speed.  It really helps you move at the speed of your thoughts, without needing to worry about imports.  Remembering where deeply nested modules are does not need to be a thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;s:PyPreSave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    Black
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;s:PyPostSave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE "&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;bufname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"e"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="p"&gt;:&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; PyPreSave &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;s:PyPreSave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; PyPostSave &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;s:PyPostSave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

augroup waylonwalker
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'PyPreSave'&lt;/span&gt;
    autocmd bufwritepost *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'PyPostSave'&lt;/span&gt;
    autocmd bufwritepost &lt;span class="p"&gt;.&lt;/span&gt;tmux&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;conf&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':!tmux source-file %'&lt;/span&gt;
    autocmd bufwritepost &lt;span class="p"&gt;.&lt;/span&gt;tmux&lt;span class="p"&gt;.&lt;/span&gt;local&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;conf&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':!tmux source-file %'&lt;/span&gt;
    autocmd bufwritepost *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;vim&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':source %'&lt;/span&gt;
augroup end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#refactoring"&gt;
  &lt;/a&gt;
  refactoring
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This is where it really shines&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This setup really shines when you are refactoring.  You can freely move modules and classes around without worrying about bringing imports with them. Often when refactoring some modules from one file to another the most tedious part is editing the imports.  Often you can't even grab whole lines because there are several imports and some are needed in both places but not all.  pyflyby handles all this like a champ.&lt;/p&gt;


      
      
      Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#where-to-install-for-vim"&gt;
  &lt;/a&gt;
  Where to install for vim
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;just make sure the tidy-imports command is available to vim&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pyflyby goes into the environment that you have active at the time that you start neovim.  Typically this is the virtual environment that I am using for the project I am editing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-gets-importedremoved"&gt;
  &lt;/a&gt;
  What gets imported/removed
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;only give me what I actually use&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anything within the base config of pyflyby or your own config specified in &lt;code&gt;~/.pyflyby&lt;/code&gt; will get automatically imported if it is used within the file/console.  If you are working in a file, and stop using a module, it will automatically get removed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything that is used, and found in the config is added&lt;/li&gt;
&lt;li&gt;Anything that is unused gets removed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-does-it-put-imports"&gt;
  &lt;/a&gt;
  Where does it put imports
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;after the last import&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pyflyby&lt;/code&gt; does not sort imports into paragraphs or by category.  When it needs to add new imports.  It will find the last paragraph of imports in your file, add the new one, and sort that paragraph alphebetically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plugins.custom_seo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_render&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;-- pyflyby will put the import here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-about-isort"&gt;
  &lt;/a&gt;
  What about isort
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;put those imports where they go&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I did not like that I was getting pre-commit issues when using pyflyby, so I added isort to my chain of autocommands to automatically run isort and make my pre-commit happy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;s:PyPostSave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"silent !tidy-imports --black --quiet --replace-star-imports --action REPLACE "&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;bufname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"silent !isort "&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;bufname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"e"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's write some code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Get all the posts from waylonwalker.com.

    Yes theres an rss feed, you should be subscribed if your not already.

    Oh, and we don't need no stinkin error handing because it's always live
    """&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://waylonwalker.com/rss"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save it and pyflyby will inject requests into our file automatically, no need to type that out anymore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Get all the posts from waylonwalker.com.

    Yes theres an rss feed, you should be subscribed if your not already.

    Oh, and we don't need no stinkin error handing because it's always live
    """&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://waylonwalker.com/rss"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-about-init-apis"&gt;
  &lt;/a&gt;
  What about &lt;strong&gt;init&lt;/strong&gt; / api's
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;careful to fill in the `&lt;/em&gt;&lt;em&gt;all&lt;/em&gt;&lt;em&gt;` like you are supposed to&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Files such as &lt;strong&gt;init&lt;/strong&gt;.py often import things they do not need, this is simply there for a convenience of the library user and to make the api cleaner.  These type of modules should implement a &lt;code&gt;__all__&lt;/code&gt; list of all the unused things that are imported according to pep8.  Pyflyby will remove any unused modules unless they are in the &lt;code&gt;__all__&lt;/code&gt; list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# snippet from kedro.extras.datasets.pandas
&lt;/span&gt;
&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"CSVDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"ExcelDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"FeatherDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"GBQTableDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"ExcelDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"AppendableExcelDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"HDFDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"JSONDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"ParquetDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"SQLQueryDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"SQLTableDataSet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#py-command"&gt;
  &lt;/a&gt;
  py command
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;one liners that need imports&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;pyflyby also comes with a cli command to run one liners.  It's pretty genious, I'm sure I will find a use or two for it, but so far its been more of a novelty for me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;py &lt;span class="nb"&gt;help &lt;/span&gt;pd
py &lt;span class="nb"&gt;help &lt;/span&gt;pd.DataFrame

py pd.read_csv &lt;span class="s1"&gt;'https://waylonwalker.com/cars.csv'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/deshaw/pyflyby"&gt;pyflyby repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deshaw.github.io/pyflyby/"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/2QW5DJiEJH4"&gt;My YouTube Video for pyflyby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://waylonwalker.com/ipython-config/"&gt;configuring ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://waylonwalker.com/ipython-help/"&gt;asking ipython for help??&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://waylonwalker.com/cars.csv"&gt;sample data I used with pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://waylonwalker.com/rss"&gt;my rss feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>ipython</category>
      <category>terminal</category>
    </item>
    <item>
      <title>How to download YouTube Videos using Python</title>
      <author>SpandyBoss</author>
      <pubDate>Tue, 21 Dec 2021 04:48:34 +0000</pubDate>
      <link>https://dev.to/spandyboss/how-to-download-youtube-videos-using-python-3paa</link>
      <guid>https://dev.to/spandyboss/how-to-download-youtube-videos-using-python-3paa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Hello everyone I hope you are doing well.&lt;br&gt;
In this post, as you read the title we are going to make a &lt;strong&gt;YouTube video downloader in Python&lt;/strong&gt; it is a very simple and fun project to build.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#modules-needed-"&gt;
  &lt;/a&gt;
  Modules needed :-
&lt;/h1&gt;

&lt;p&gt;1) pytube :- it is an module which lets us access YouTube content from python &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-"&gt;
  &lt;/a&gt;
  Installation :-
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pip install pytube&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h1&gt;

&lt;p&gt;First we will import the module which we installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Importing the required modules
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will ask the user for entering the link of the video and a path where he/she has to save the video&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Asking for the link
&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the link:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Asking for the save location
&lt;/span&gt;&lt;span class="n"&gt;save_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the path to save the video: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will download the video and save it to the provided location&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Downloading the video with .mp4 extension to the save location
&lt;/span&gt;&lt;span class="n"&gt;yt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytube&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'mp4'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the line &lt;code&gt;yt.streams.filter(file_extension='mp4').first()&lt;/code&gt; we can define in which format we want to save the file, so in most cases .mp4 extension is the best.&lt;/p&gt;

&lt;p&gt;And with that done we have successfully created our project.&lt;br&gt;
I hope you all enjoyed the post.&lt;br&gt;
Stay safe and do take very good care of yourselves!&lt;/p&gt;

&lt;p&gt;Feel free to ask doubts or suggest me something that I can build in next post or anything I can add in this project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#happy-coding-"&gt;
  &lt;/a&gt;
  Happy Coding !
&lt;/h1&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Public Solving: Linked List and a train</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 21 Dec 2021 04:33:39 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-linked-list-and-a-train-4b44</link>
      <guid>https://dev.to/dailydevtips1/public-solving-linked-list-and-a-train-4b44</guid>
      <description>&lt;p&gt;You might not know this, but the North Pole has a perfect train ecosystem. &lt;/p&gt;

&lt;p&gt;However, due to the harsh weather, these trains need quite a lot of maintenance.&lt;/p&gt;

&lt;p&gt;For this puzzle, we must figure out the train composition and add certain filters and actions to this composition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-10"&gt;You can find the puzzle here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As our input, we get a linked list train object.&lt;br&gt;
A linked list basically means an object with a &lt;code&gt;next&lt;/code&gt; property that links to the next element.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locomotive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;L-283&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isLocomotive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;wagon1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wagon1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;W-10582&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastBreakRevision&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-02-15&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;wagon2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the locomotive has the &lt;code&gt;wagon1&lt;/code&gt; as it's next, which in return has &lt;code&gt;wagon2&lt;/code&gt;, so by accessing the locomotive, we can composite the whole train.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;There are three things we need to work on:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Complete the iterate wagons function and build the train&lt;/li&gt;
&lt;li&gt;Allow for the filter function to take place&lt;/li&gt;
&lt;li&gt;Allow for an action function to take place&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We start with the following bootstrap function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultFilterFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultActionFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wagon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterateWagons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actionFn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filterFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterOldBreaks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wagon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to fill out the iterate wagons function and the filter old breaks function.&lt;/p&gt;

&lt;p&gt;The main challenge here is to convert the wagons into a train array following each next element of the train.&lt;/p&gt;

&lt;p&gt;Then we will have to use array methods to filter and loop over this array we just created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: It's been a while since I worked with Linked lists, so I'm pretty sure there are alternative ways of doing this assignment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-the-linked-list-train-in-javascript"&gt;
  &lt;/a&gt;
  Building the linked list train in JavaScript
&lt;/h2&gt;

&lt;p&gt;Let's convert our starting object into an array that follows the &lt;code&gt;next&lt;/code&gt; order.&lt;/p&gt;

&lt;p&gt;I've decided to use a &lt;code&gt;while&lt;/code&gt; loop to look until the &lt;code&gt;next&lt;/code&gt; property is empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets the train to an array, starting with the locomotive.&lt;br&gt;
Then, the while loop changes the start variable to be the next element and pushes it to our train array.&lt;/p&gt;

&lt;p&gt;Making the while loop fire again since it won't be empty still.&lt;/p&gt;

&lt;p&gt;Now this &lt;code&gt;train&lt;/code&gt; array has the complete list of wagons in order!&lt;/p&gt;

&lt;p&gt;The next part of the assignment is to make it possible to add specific filter criteria to each wagon.&lt;/p&gt;

&lt;p&gt;Some of these criteria might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check if the element is a locomotive&lt;/li&gt;
&lt;li&gt;Check if the element brakes need replacement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use the &lt;a href="https://daily-dev-tips.com/posts/javascript-filter-method/"&gt;&lt;code&gt;filter&lt;/code&gt; method&lt;/a&gt;.&lt;br&gt;
However, we'll need to use the default one if no filter is specified. We can set this in the parameters as the default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterateWagons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actionFn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;filterFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultFilterFn&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;train&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;filterFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will only return our train elements that match the provided filter, defaulting to everything.&lt;/p&gt;

&lt;p&gt;The last part that remains for this function is the action.&lt;br&gt;
We should pass an action on which something must happen per wagon.&lt;/p&gt;

&lt;p&gt;We can use the same approach as the filter but leverage the &lt;a href="https://daily-dev-tips.com/posts/javascript-basics-loops/#heading-javascript-foreach-loop"&gt;&lt;code&gt;forEach&lt;/code&gt; method&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterateWagons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actionFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultActionFn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;filterFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultFilterFn&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;train&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;filterFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;actionFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing we have to do now is create the filter for the old breaks.&lt;/p&gt;

&lt;p&gt;A broken system is old when it hasn't been serviced for at least a year from today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: again multiple ways to do this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing to note is that the wagons have the following date notation for the break service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;lastBreakRevision&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-02-15&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start by setting a new date variable and subtracting a year from that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// When running this on 10 December 2021 we get:&lt;/span&gt;
&lt;span class="c1"&gt;// 2020-12-10T05:10:51.846Z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Almost there, we just need to remove the &lt;code&gt;T05:10:51.846Z&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;To make that work, I plan to split it on the &lt;code&gt;T&lt;/code&gt; and only return the first part.&lt;br&gt;
This won't work because it's now a date object, and we need it to be a string.&lt;/p&gt;

&lt;p&gt;That's where the &lt;code&gt;.toISOString()&lt;/code&gt; comes into play.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterOldBreaks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;T&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;wagon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastBreakRevision&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go, the complete break check function!&lt;/p&gt;

&lt;p&gt;Let's run the test and see how we did:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmRlFJOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639199584600/o5ZkOjEV3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmRlFJOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639199584600/o5ZkOjEV3.png" alt="Check on the test for this puzzle" width="632" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm really keen to see how other people solved this puzzle, so do let me know 👏&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>A hundred things I learned writing my first technical book.
</title>
      <author>LordVictor0424</author>
      <pubDate>Tue, 21 Dec 2021 04:24:09 +0000</pubDate>
      <link>https://dev.to/redditupvote/a-hundred-things-i-learned-writing-my-first-technical-book-data-oriented-programming-11cp</link>
      <guid>https://dev.to/redditupvote/a-hundred-things-i-learned-writing-my-first-technical-book-data-oriented-programming-11cp</guid>
      <description>&lt;li&gt;Writing a technical book is much harder than writing blog posts.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing a blog post is like running a sprint while writing a book is like running a marathon.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing my first technical book without a publisher would have been a MISSION: IMPOSSIBLE!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Each piece of the book content must be clear and interesting. Each part, each chapter, each section, each paragraph, each sentence.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;“Clear” is more important that “interesting”. If something is not clear to your reader, it cannot be interesting for for them.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A possible way to make things clear is go from concrete to abstract.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A possible way to make things interesting is to teach the material as a story with fiction characters and a bit of drama.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;The “why” is more important than the “what”.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;The “what” is more important than the “how”.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;An average writer makes the reader think the author is smart. A good writer makes the reader think the reader is smart.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A technical book is written for MQRs (Minimal Qualified Readers).&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Figuring out what are the qualifications of your MQRs (Minimal Qualified Readers) is important as it allows you to assume what knowledge your readers already have.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s hard to figure out what are the qualifications of your MQRs (Minimal Qualified Readers).&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Checking book sales could be addictive.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Making a good Table of Contents is crucial as it is the first part of the book potential readers will encounter.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Making a good Table of Contents is hard as you need to figure out what you really want to talk about.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;The Table of Contents might evolve a bit as you write your book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should resist the temptation to write the first chapter before the Table of Contents is ready.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s not necessary to write chapters in order. But it’s easier.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Never assume that your readers will read the next chapter only because they have enjoyed the previous chapter.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should always convince your readers why what you are teaching is important and relevant for them.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Before writing a chapter, you should formulate to yourself what is the main objective of the chapter.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;If a chapter has two main objectives, it’s a sign that you should split it into two chapters.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A chapter should be treated like a piece of software. You should resist the temptation of writing the chapter contents without a plan.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A possible way to make things interesting is to use concrete examples.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A possible way to make things clear inside a chapter is to start with the easy stuff and increase the level of difficulty as the chapter goes.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Do not hesitate to highlight sentences that convey an important message.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s OK to engage in writing a technical book without mastering every topic you want to cover in your book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing technical book involves a descent amount of research even if you consider yourself as an expert in the field.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Finding attractive but accurate titles to book chapters is an art.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You can learn a lot from a failed attempt to write a book, provided that you put your ago aside.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;If you try to write a Wikipedia article about the topic of your book before it is mentioned by other sources, it will be rejected.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s possible to write a technical book while keeping your day job as a programmer, provided that you are willing to wake up early or sleep late.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing a technical book takes between a year and two.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Don’t rush! Enjoy the journey…&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It makes lot of sense to use a source control software for your manuscript.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;AsciiDoc rocks!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;PlantUML rocks!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;NeoVim rocks!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Using a tool - like PlantUML - that generates diagrams from text makes it easy to refactor multiple diagrams at once (e.g rename a label, change a color).&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;People on Reddit could feel hurt by opinions that take them out of their comfort zone.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;On Reddit, when people feel hurt, they could become violent.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Being mentored by an experienced writer is a blessing.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;If you are lucky enough to be mentored by an experienced writer, ask them to be hard with you. That’s how you are going to improve your book!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A good technical reviewer is a representative of your MQRs (Minimal Qualified Readers). They can tell you upfront is something is going to be unclear to your readers.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should make sure your readers will never frown while reading your book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A project manager that pays attention to the details is important.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Your publisher is your partner.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You could make more dollars per copy by self-publishing but you’d probably sell much less copies.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Asking early feedback from external reviewers is a great source of improvement.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Releasing an early version of the book (approx. when the first third is ready) allows you to find out if the topic of your book is interesting.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Finding a good book title is hard.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Finding a good book subtitle is even harder.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You need to be very careful not to hurt the sensitivity of any of your readers.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Having your book featured on HackerNews home page do not mean selling lots of copies.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Twitter is a great medium to share ideas from your book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing a book could sometimes take you to flow.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;My real motivation for writing a book was neither to be famous nor to be rich. It only wanted to accomplish a child’s dream.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s hard to find your voice.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Once you have found the your voice, the writing flows much better.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Usually readers stop reading after reading the middle of the book. If you want them to read the second half of your book, you need to find a way to hook them.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;A possible way to hook your readers is to tell a story.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Inspiration is not linear. It’s OK to stop writing for a couple of hours.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Motivation is not linear. It’s OK to stop writing for a couple of weeks.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Be open to critics - even when they hurt your ego.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;The more you write, the more you like it.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s safe to assume that every developer can read JavaScript.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s a great feeling to mention the work of other authors.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should make sure that each and every code snippet - that appears in your book - runs as expected.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Invoking “it’s so obvious I don’t need to explain it” is not an acceptable argument.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing your teaching materials as a dialogue between an imaginary expert and a imaginary novice is a very useful process in order to figure out what questions your materials might raise in your reader’s mind.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Sometimes the questions that an imaginary novice would ask about the stuff you teach would be tough. Don’t ignore them. It’s an opportunity to make your book better.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Rewriting a chapter from scratch because you forgot to save your work could be a blessing as writing from scratch might lead to a material of higher quality.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing in a coffee shop makes me feel like a famous author, but in fact I am much more productive at home.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing a preface - after the whole manuscript is ready - is really a pleasure!&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should think about the way your contents is going to appear on the paper. Use headlines, highlights, call outs and diagrams to make sure it doesn’t look boring.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Resist the temptation to impress your readers with “cool stuff” if you think it might confuse them.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Working on your book is a good reason to wake up early. Sometimes, before sunrise (even in summer!).&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Include at least 2 or 3 diagrams in every chapter. It makes the material fun to read and easier to grasp.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Draw your diagrams on a sheet of paper before using a drawing software.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s OK to use colors in diagrams for the online version of the book. But remember that the print version of the book will be not be in color.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Mind maps are a great visualization tool. Use them smartly.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;When a section is more difficult to read that the others, let your readers know about it.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;When a section is more difficult to read that the others, make it skippable.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;It’s OK - from times to times - to copy-paste a diagram in order to save from your readers the need to flip back.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Asking a friend or a colleague to read your work in progress is not a productive idea. The best feedback come from people you don’t know.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Brainstorming with a friend or a colleague about a difficulty you encounter might be a productive idea.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Throwing away some (good) ideas is sometimes necessary. Not easy but necessary.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rethink the chapter.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rest and come back later.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Adapting parts of your book to blog posts could be a good idea. But you need to resist the temptation of copy-pasting verbatim as the blog posts will be without the context of the book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;If feels great when someone with lots of followers tweets about the fun they had reading your book.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Don’t worry if your English is not perfect. Your manuscript will be proofread later.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;“Not being an native English speaker” is not an excuse for your lack of clarity.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing an appendix is much easier than writing a chapter.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Using humour in a technical book is possible. Hopefully, it’s well appreciated.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;You should write the chapter introduction after all the other parts of the chapter are written.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Getting positive feedback - even from people who are easily enthusiastic - feels good.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Front matter is the last part an author writes.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
  &lt;li&gt;Writing a hundred things you learned from writing a technical book is not as difficult as it may seem.&lt;/li&gt;
&lt;br&gt;

</description>
      <category>programming</category>
    </item>
    <item>
      <title>Generate Barcode Images in C#</title>
      <author>IronSoftware</author>
      <pubDate>Tue, 21 Dec 2021 04:07:30 +0000</pubDate>
      <link>https://dev.to/ironsoftware/generate-barcode-images-in-c-dda</link>
      <guid>https://dev.to/ironsoftware/generate-barcode-images-in-c-dda</guid>
      <description>&lt;p&gt;In this tutorial, we will see how to generate a barcode in C# .NET with an example using the Iron Barcode library.&lt;/p&gt;

&lt;p&gt;We will see how easy it is to create a barcode in C# or VB.Net, as well as how to style our barcode, and then export it as an image.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-generate-barcodes-in-c-net"&gt;
  &lt;/a&gt;
  How to Generate Barcodes in C# .NET
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Download IronBarcode using the &lt;a href="https://ironsoftware.com/csharp/barcode/packages/IronBarCode.zip"&gt;DLL download&lt;/a&gt; or &lt;a href="https://www.nuget.org/packages/barcode"&gt;NuGet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Generate a Simple Barcode or QR&lt;/li&gt;
&lt;li&gt;Use Advanced Settings to Style and Customize your Barcode&lt;/li&gt;
&lt;li&gt;Implement Complex Barcodes in a Single Line of Code&lt;/li&gt;
&lt;li&gt;Download this tutorial project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pBPD7PD0-Xw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is install the Iron Barcode library, adding barcode functionality to the .NET framework. We can do this using our &lt;a href="https://www.nuget.org/packages/barcode"&gt;NuGet package&lt;/a&gt; or by downloading the &lt;a href="https://ironsoftware.com/csharp/barcode/packages/IronBarCode.zip"&gt;.Net Barcode DLL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PM &amp;gt; Install-Package Barcode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4cXYPXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5aseynzywl02w2catfd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4cXYPXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5aseynzywl02w2catfd.jpg" alt="" width="740" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-a-simple-barcode"&gt;
  &lt;/a&gt;
  Render a Simple Barcode
&lt;/h2&gt;

&lt;p&gt;In the following example we can see that a barcode can be written containing numerical or text content using only a couple of lines of code, using Iron Barcode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generate a Simple BarCode image and save as PNG&lt;/span&gt;
&lt;span class="c1"&gt;//using IronBarCode;&lt;/span&gt;
&lt;span class="n"&gt;GeneratedBarcode&lt;/span&gt; &lt;span class="n"&gt;MyBarCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeWriterEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code128&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// This line opens the image in your default image viewer&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Generate a Simple BarCode image and save as PNG&lt;/span&gt;
&lt;span class="c1"&gt;'using IronBarCode;&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyBarCode&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;GeneratedBarcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeWriterEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;' This line opens the image in your default image viewer&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first create the barcode by specifying its value and the barcode format we will be using from the &lt;code&gt;IronBarCode.BarcodeWriterEncoding&lt;/code&gt; Enum. We can then choose to save as image or save as a &lt;code&gt;System.Drawing.Image&lt;/code&gt; or &lt;code&gt;Bitmap&lt;/code&gt; object. That's all the code it takes!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCnck73a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el18sjln0l7z099i4w02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCnck73a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el18sjln0l7z099i4w02.png" alt="" width="690" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final line of code simply opens the barcode PNG in the example so that you can see it with your own eyes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-barcode-creation"&gt;
  &lt;/a&gt;
  Advanced Barcode Creation
&lt;/h2&gt;

&lt;p&gt;Although the previous example was effective, in the real world we may wish to do more.&lt;/p&gt;

&lt;p&gt;In the following example, we may add annotations to the barcode, set the font, display its value below it, add margins, change the barcode color, and then save it, all quite simply in C#.&lt;/p&gt;

&lt;p&gt;We can also choose to export to HTML or PDF instead of an image if that is more appropriate for our application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//using IronBarCode;&lt;/span&gt;
&lt;span class="c1"&gt;//using System.Drawing;&lt;/span&gt;
 &lt;span class="c1"&gt;// Styling a QR code and adding annotation text&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;MyBarCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeWriterEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAnnotationTextAboveBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Product URL:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddBarcodeValueTextBelowBarcode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Purple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Save as HTML&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.html"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;'using IronBarCode;&lt;/span&gt;
&lt;span class="c1"&gt;'using System.Drawing;&lt;/span&gt;
 &lt;span class="c1"&gt;' Styling a QR code and adding annotation text&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyBarCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeWriterEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddAnnotationTextAboveBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Product URL:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddBarcodeValueTextBelowBarcode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Purple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;' Save as HTML&lt;/span&gt;
&lt;span class="n"&gt;MyBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBarCode.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMSxrzBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9h8hfvla0udq5rgdh82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMSxrzBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9h8hfvla0udq5rgdh82.png" alt="" width="462" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code should be self-explanatory, but if it is not, I encourage you to read the &lt;a href="https://ironsoftware.com/csharp/barcode/object-reference/api/IronBarCode.GeneratedBarcode.html"&gt;GeneratedBarcode&lt;/a&gt; class documentation within the &lt;a href="https://ironsoftware.com/csharp/barcode/object-reference/"&gt;API reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluency"&gt;
  &lt;/a&gt;
  Fluency
&lt;/h2&gt;

&lt;p&gt;In our final example, we will see that we may create, style, and export a barcode in a single line of code.&lt;/p&gt;

&lt;p&gt;Iron Barcode implements an optional Fluent API similar to System.Linq. By chaining method calls to method calls to method calls, we first create a barcode, then set its margins, then export to Bitmap in a single line.&lt;/p&gt;

&lt;p&gt;This can be very convenient and make code easier to read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//using IronBarCode;&lt;/span&gt;
&lt;span class="c1"&gt;//using System.Drawing;&lt;/span&gt;
 &lt;span class="c1"&gt;// Fluent API for Barcode Image generation.&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;MyValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;BarcodeBmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PDF417&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ResizeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;SetMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToBitmap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;'using IronBarCode;&lt;/span&gt;
&lt;span class="c1"&gt;'using System.Drawing;&lt;/span&gt;
 &lt;span class="c1"&gt;' Fluent API for Barcode Image generation.&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyValue&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode"&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;BarcodeBmp&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PDF417&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ResizeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;SetMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToBitmap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is a &lt;code&gt;System.Drawing.Image&lt;/code&gt; of a PDF417 barcode which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiIH94PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbubjtm0saxj7x4ubr5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiIH94PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbubjtm0saxj7x4ubr5b.png" alt="" width="483" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning More
&lt;/h2&gt;

&lt;p&gt;To learn more about this code sample and how to &lt;a href="https://ironsoftware.com/csharp/barcode/use-case/read-barcode-image-csharp/"&gt;read images from barcodes in C#&lt;/a&gt;, you may wish to view it on GitHub, download it as a &lt;em&gt;Visual Studio Project&lt;/em&gt; or look at the other examples within this section, including our tutorial on how to create QR codes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-downloads-in-c"&gt;
  &lt;/a&gt;
  Source Code Downloads in C
&lt;/h3&gt;

&lt;p&gt;The source for this "Barcode Image Generation" tutorial are available as a C# barcode generator code project for Visual Studio 2017:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/iron-software/Iron-Barcode-CSharp-Barcode-Image-Generator-Tutorial" rel="nofollow"&gt;GitHub Repository &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C# Source Code Zip,/a&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#further-documentation"&gt;
  &lt;/a&gt;
  Further Documentation
&lt;/h3&gt;

&lt;p&gt;You may also find the &lt;a href="https://ironsoftware.com/csharp/barcode/object-reference/api/IronBarCode.BarcodeWriter.html"&gt;BarcodeReader&lt;/a&gt; classes within the API Reference of great value. There is also information about how to use the software as a &lt;a href="https://ironsoftware.com/csharp/barcode/use-case/barcode-scanner-csharp/"&gt;C# Barcode Scanner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, there are other tutorials which may shed light in other aspects of IronBarCode including &lt;em&gt;QR codes&lt;/em&gt; and &lt;em&gt;Reading Barcode Images with .Net&lt;/em&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Apache Camel🦒: How to write First Route.</title>
      <author>ROHAN KADAM</author>
      <pubDate>Tue, 21 Dec 2021 04:07:10 +0000</pubDate>
      <link>https://dev.to/rohan2596/apache-camel-how-to-write-first-route-1cp</link>
      <guid>https://dev.to/rohan2596/apache-camel-how-to-write-first-route-1cp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#apache-camel"&gt;
  &lt;/a&gt;
  Apache Camel
&lt;/h2&gt;

&lt;p&gt;Hello Its Rohan Kadam😊,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-apache-camel"&gt;
  &lt;/a&gt;
  What is Apache Camel🦒?
&lt;/h3&gt;

&lt;p&gt;Apache Camel ™ is a versatile open-source integration framework based on known &lt;a href="https://camel.apache.org/components/latest/eips/enterprise-integration-patterns.html"&gt;Enterprise Integration Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Camel empowers you to define routing and mediation rules in a variety of domain-specific languages (&lt;a href="https://camel.apache.org/manual/latest/dsl.html"&gt;DSL&lt;/a&gt;, such as Java, XML, Groovy, Kotlin, and YAML). This means you get smart completion of routing rules in your IDE, whether in a Java or XML editor.&lt;/p&gt;

&lt;p&gt;Apache Camel uses &lt;a href="https://camel.apache.org/manual/latest/uris.html"&gt;URIs&lt;/a&gt; to work directly with any kind of transport or messaging models such as &lt;a href="https://camel.apache.org/components/latest/http-component.html"&gt;HTTP&lt;/a&gt;, &lt;a href="https://camel.apache.org/components/latest/activemq-component.html"&gt;ActiveMQ&lt;/a&gt;, &lt;a href="https://camel.apache.org/components/latest/jms-component.html"&gt;JMS&lt;/a&gt;, JBI, SCA, &lt;a href="https://camel.apache.org/components/latest/mina-component.html"&gt;MINA&lt;/a&gt; or &lt;a href="https://camel.apache.org/components/latest/cxf-component.html"&gt;CXF&lt;/a&gt;, as well as pluggable &lt;a href="https://camel.apache.org/manual/latest/component.html"&gt;Components&lt;/a&gt; and &lt;a href="https://camel.apache.org/manual/latest/data-format.html"&gt;Data Format&lt;/a&gt; options. Apache Camel is a small library with minimal &lt;a href="https://camel.apache.org/manual/latest/what-are-the-dependencies.html"&gt;dependencies&lt;/a&gt; for easy embedding in any Java application. Apache Camel lets you work with the same &lt;a href="https://camel.apache.org/manual/latest/exchange.html"&gt;API&lt;/a&gt; regardless of which kind of transport is used — so learn the API once and you can interact with all the &lt;a href="https://camel.apache.org/components/latest/index.html"&gt;Components&lt;/a&gt; provided out-of-box.&lt;br&gt;
&lt;a href="https://camel.apache.org/"&gt;&lt;strong&gt;Apache Camel&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwo_fxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2A1JaCfnLsL3IZ0Q-gFRCt6A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwo_fxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2A1JaCfnLsL3IZ0Q-gFRCt6A.png" alt="Apache Camel: How to write First Route" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-spring-boot-project-using-spring-initializer"&gt;
  &lt;/a&gt;
  Step 1: Create Spring Boot Project Using spring initializer.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-the-following-dependencies-to-pomxml"&gt;
  &lt;/a&gt;
  Step 2: Add the following dependencies to pom.xml
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOdAwby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2AIheYjbpv2gXmXPVINRN8CQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOdAwby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2AIheYjbpv2gXmXPVINRN8CQ.png" alt="apache-1" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-creating-a-basic-first-route"&gt;
  &lt;/a&gt;
  Step 3: Creating a basic first route.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#apache-camel-routes"&gt;
  &lt;/a&gt;
  Apache Camel Routes:-
&lt;/h3&gt;

&lt;p&gt;A Camel &lt;em&gt;route&lt;/em&gt; is where the integration flow is defined. For example to integrate two systems then a Camel route can be &lt;em&gt;coded&lt;/em&gt; to specify how these systems are integrated.&lt;/p&gt;

&lt;p&gt;An example could be to take files from an FTP server and send them to an ActiveMQ messaging system.&lt;/p&gt;

&lt;p&gt;This can be coded in a route using Java with the &lt;a href="https://camel.apache.org/manual/latest/java-dsl.html"&gt;Java DSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2td-uhYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2348/1%2A3BojIKoblLKlIHV2DnSZcQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2td-uhYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2348/1%2A3BojIKoblLKlIHV2DnSZcQ.png" alt="Test Route" width="880" height="657"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-on-successfully-creation-on-route-is-registered"&gt;
  &lt;/a&gt;
  Step 4: On Successfully Creation on Route is registered.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1O-GA9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4012/1%2AdTKTcOmw8EfeQ2tEJ6ZPrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1O-GA9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4012/1%2AdTKTcOmw8EfeQ2tEJ6ZPrg.png" alt="Output Route Started" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to understand what is apache camel is and how to implement a basic route using spring boot. It's been used by developers to develop high speed and flexible applications&lt;/p&gt;

&lt;p&gt;Please do share and like 💕if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camel.apache.org/manual/latest/faq/what-is-camel.html"&gt;&lt;strong&gt;What is Camel?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You -Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why I decided to become a full-stack developer in 2022</title>
      <author>Kris Krazy</author>
      <pubDate>Tue, 21 Dec 2021 03:47:48 +0000</pubDate>
      <link>https://dev.to/krisxkrazy/why-i-decided-to-become-a-full-stack-developer-in-2022-25e</link>
      <guid>https://dev.to/krisxkrazy/why-i-decided-to-become-a-full-stack-developer-in-2022-25e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call To Action
&lt;/h3&gt;

&lt;p&gt;Being the most technical in my immediate family I would often get called for bug fixes, and casual errors, to some of the larger thing such as websites using builders such as wix, wordpress, squarespace, and webflow. Naturally as I learned the more intricate details of these programs and became more aware of the outrageous prices of websites, and the inability to transfer websites. I began to look around for a more flexible option. The clear next step was web-development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlL-5LCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnee87s6rb9o8csgiywz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlL-5LCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnee87s6rb9o8csgiywz.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-research"&gt;
  &lt;/a&gt;
  The Research
&lt;/h4&gt;

&lt;p&gt;Researching about web development was a shorter process than expected. It boiled down to 2 sections, front end web development, &amp;amp; back end web development. Front End Web-Development is defined as developing the GUI(Graphical User Interface) with the use of HTML, CSS, &amp;amp; JS. Back End or server side development is development of the code that communicates the database information to the web browser. An example of some frequently used back end languages would be &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Ruby On Rails &lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yRykM7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rjkh4m3j7q8eybppofj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yRykM7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rjkh4m3j7q8eybppofj.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-it-useful"&gt;
  &lt;/a&gt;
  Is It Useful?
&lt;/h4&gt;

&lt;p&gt;In an age of information overload, their are many platforms to share information. Who builds them. Web-developers. From Dev.to, to the most veneered blogs, and forums. Fullstack web-dev is an amazing skill to have in this day, and age. It provides and insane amount of opportunities from being able to get a job at a FAANG company, Freelance, create a startup, ect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--110VH-OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyf5bp2ft73vr3m7dlns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--110VH-OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyf5bp2ft73vr3m7dlns.png" alt="Image description" width="650" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  MISC.
&lt;/h4&gt;

&lt;p&gt;Don't take for granted the soft-skills that you will also develop becoming a dev. Collaborating with others will help to build clear communication skills, you will also learn to ask for help, and clearly communicate to other when helping them. Another underrated skill is that of learning. In the tech space technology is ever evolving meaning devs, are forever learning to keep pace. This will require exemplary research skills, to get to the point as soon as possible. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-the-market-like"&gt;
  &lt;/a&gt;
  What is the The Market like
&lt;/h4&gt;

&lt;p&gt;While looking at sites like fiiver you will notice the market is over saturated with skilled developers from other countries that charge far less than a admissible amount for the average American. A prime example of this is india. They have no national minimum wage but it tends to range from 160 rupees ($2.40) per day in Bihar to 423 rupees ($6.35) per day in Delhi based on Minimum Wages Act,1948 (according to minimum-wage.org). As you can guess the living expenses are also far less their. Now you should have a clear vantage point of the market. However the situation is quite different as far as 9-5, or start-up would go. Their are many large companies and startups looking for developers to build their website and/or maintain it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTOXVU4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko9nk6lt1x9oefh7yxr7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTOXVU4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko9nk6lt1x9oefh7yxr7.jpg" alt="Image description" width="626" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;If you would like to go further in depth on this topic here are some more articles!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eduvoice.in/scope-computer-science-india/"&gt;https://eduvoice.in/scope-computer-science-india/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pnas.org/content/116/14/6732"&gt;https://www.pnas.org/content/116/14/6732&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nuke.fas.org/guide/india/agency/krithi2.html"&gt;https://nuke.fas.org/guide/india/agency/krithi2.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h5&gt;

&lt;p&gt;As always if you think their is something to be added, or I said something incorrect please correct me in the comments.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Wrapping React Query's useQuery (A Use Case for Wrapping External Libraries)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 21 Dec 2021 03:47:14 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed</link>
      <guid>https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed</guid>
      <description>&lt;p&gt;React Query is a library for fetching and mutating server state via React hooks. In addition to the perk of caching, it also neatly returns metadata representing the various lifecycles of a network request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isFetched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This cuts down on the boilerplate when using React local state to track this metadata manually.&lt;/p&gt;

&lt;p&gt;As shown in the example above, the &lt;code&gt;useQuery&lt;/code&gt; hook takes in a "query key" (the key for the data in the cache) and a function that "queries" data via an API.&lt;/p&gt;

&lt;p&gt;There are possibilities to improve the signature of this hook.&lt;/p&gt;

&lt;p&gt;First, there is currently no way of enforcing that all "queries" go through the same API client.&lt;/p&gt;

&lt;p&gt;For example, you could have one instance of &lt;code&gt;useQuery&lt;/code&gt; that uses the native &lt;code&gt;fetch&lt;/code&gt; API and another that uses a custom fetch wrapper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// another-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetchClient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fetch-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given this example, there is a code smell since &lt;code&gt;fetchClient&lt;/code&gt; is the intended way to make API requests as it encapsulates logic, error handling, preferred settings, etc.&lt;/p&gt;

&lt;p&gt;To improve upon this, we can come up with design patterns that help enforce the reusing of the same fetch client.&lt;/p&gt;

&lt;p&gt;One option is to export the custom fetch client and all the modules of React Query from a single file, avoiding the importing/using of React Query directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we may expose the fetcher via a hook (similar to React Redux's &lt;code&gt;useDispatch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a third option, we could conceal the &lt;code&gt;fetcher&lt;/code&gt; in a wrapper around &lt;code&gt;useQuery&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;baseUseQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useBaseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second limitation of the plain &lt;code&gt;useQuery&lt;/code&gt; can be seen most clearly in our latest wrapper.&lt;/p&gt;

&lt;p&gt;Here, we can predict that the "query key" is likely a subpath on the API route.&lt;/p&gt;

&lt;p&gt;Because of that, we can derive the "query key" from the query in our abstraction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;kebabCase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;baseUseQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useBaseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kebabCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/v1/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🎉 Just like we've simplified our API lifecycles by wrapping &lt;code&gt;useQuery&lt;/code&gt; to better fit our needs.&lt;/p&gt;

&lt;p&gt;Regardless of whether this wrapper (as demonstrated) suits your preferences and needs, I hope it helps show the potential value of wrapping modules from shared libraries.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Launched PandaDoc Tech Blog </title>
      <author>Valia Havryliuk</author>
      <pubDate>Tue, 21 Dec 2021 02:28:32 +0000</pubDate>
      <link>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</link>
      <guid>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</guid>
      <description>&lt;p&gt;Just 3 months ago, we launched PandaDoc for Developers. Since then, many developers have created their sandbox accounts and started exploring our API for free. &lt;/p&gt;

&lt;p&gt;We carefully collected all the feedback and feature requests that we received and have been working to continuously improve our API capabilities. &lt;/p&gt;

&lt;p&gt;And today, the first update is available! We are happy to announce the launch of 8 long-awaited API features to speed up and simplify your workflow: &lt;a href="https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205"&gt;https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To get updates from our team in the future, please, follow our Medium publication!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>writing</category>
      <category>api</category>
    </item>
    <item>
      <title>Trial Periods... Are they really worth it?</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Tue, 21 Dec 2021 02:21:57 +0000</pubDate>
      <link>https://dev.to/wbepodcast/trial-periods-are-they-really-worth-it-en6</link>
      <guid>https://dev.to/wbepodcast/trial-periods-are-they-really-worth-it-en6</guid>
      <description>&lt;p&gt;&lt;strong&gt;There is no SaaS without a Trial!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many indie devs are into SaaS nowadays and their monetization strategy normally falls into two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fully paid product with different tiers&lt;/li&gt;
&lt;li&gt;A freemium model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite often in either of these methods, the creators offer free trials. A way for users to actually try the paid version without credit card is needed! (got to have these last magic words)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have been really enjoying writing my thoughts both here and on indie hackers and from &lt;a href="(https://dev.to/wbepodcast/why-companies-should-support-their-employees-side-projects-lm5)"&gt;yesterday's post&lt;/a&gt; I got a few Devs visiting my &lt;a href="https://wannabe-entrepreneur.com/coworking/"&gt;virtual co-working space for entrepreneurs&lt;/a&gt; and asking me if they could try it for free...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I had already considered a trial in the past but I have always rejected the idea&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My product is a paid community and I have been lucky enough to have found really cool and active first members 💪&lt;/p&gt;

&lt;p&gt;It somehow seemed odd to allow strangers to come into our virtual office just to disappear a few days after (much like my father... 😿). Plus it's a &lt;strong&gt;4 euros subscription that can be canceled at any time...&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If people are not willing to pay that then they probably never will...&lt;/em&gt; - Tiago thinking to himself&lt;/p&gt;

&lt;p&gt;I explained my reasons to this user and then got convinced by the explanation... 😱&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is not about the money but the fact of giving my credit card info and committing to a product without actually knowing if it works...&lt;/em&gt; - user&lt;/p&gt;

&lt;p&gt;I realized that the problem was not losing the 4 euros but rather being tricked by a sketchy podcaster with possibly an empty slack channel!&lt;/p&gt;

&lt;p&gt;I decided then to give it a shot! Here is what I have done...&lt;/p&gt;

&lt;p&gt;1- Get a coffee ofc... ☕&lt;/p&gt;

&lt;p&gt;2- Asked the community members if they were ok with it and like always they were super supportive!&lt;/p&gt;

&lt;p&gt;3- Create a &lt;a href="https://www.buymeacoffee.com/tiagorbf/e/50962"&gt;new extra in the buymeacoffee platform&lt;/a&gt; for a value of ZERO euros and use &lt;a href="https://zapier.com/"&gt;zapier&lt;/a&gt; to store the new user data together with the expiration date into &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt;. #NoCode4TheWinBROOOO&lt;/p&gt;

&lt;p&gt;4- Change the landing page to this beauty...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0rrmfxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yxnqg3eezlk1lqf3rt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0rrmfxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yxnqg3eezlk1lqf3rt0.png" alt="Image description" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's amazing because since I implemented the trial a grand total of &lt;strong&gt;ZERO new members have joined!!!&lt;/strong&gt; So I was right!&lt;/p&gt;

&lt;p&gt;Or maybe is still too soon to tell... XD I will wait a couple more days to take my conclusions and I will keep you posted! (btw if you prefer listening to these adventures in an audio format you should &lt;a href="https://wannabe-entrepreneur.com/episodes/"&gt;checkout my podcast&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I hope you found this entertaining and I would love to know what are your thoughts on trial periods... Have they been working out for you?&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
