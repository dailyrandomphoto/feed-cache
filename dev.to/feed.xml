<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python- Basic course: Day 3, Operators and If-elif-else</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 23 Jun 2021 04:00:08 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-3-operators-and-if-elif-else-51cc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-3-operators-and-if-elif-else-51cc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-to-the-day-3-of-our-course-today-we-will-learn-about-operators-and-the-ifelse-control-flow"&gt;
  &lt;/a&gt;
  🤟Welcome all to the day 3 of our course. Today we will learn about operators and the if-else control flow.
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Operators in Python&lt;/strong&gt;-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9vebMeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s4qfh40fnlluqj5vro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9vebMeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s4qfh40fnlluqj5vro.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Operators in Python are nearly the same that of other languages like C or Java.&lt;/p&gt;

&lt;p&gt;There are, although a few differences as highlighted below-&lt;br&gt;
1) The // operator is added in Python. This operator divides the number and rounds it down to the nearest integer. &lt;br&gt;
2) The ** operator is the exponentiation operator, which raises the number to the power of a number.&lt;br&gt;
3) The //= and **= assignment operators have also been added similarly. (For those unfamiliar with the assignment operators, x+=1 is equivalent to x=x+1 and so on for other signs)&lt;br&gt;
4) Logical operators too exist in Python, but unlike symbols &amp;amp;,|,! in C, they are replaced by "and", "or", "not" in Python. This again makes it easier to read and comprehend&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bitwise operators are similer as C, though not used much. Membership and identity operators will be covered later along with lists.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; #Arithmatic operators
&amp;gt;&amp;gt;&amp;gt; a=2
&amp;gt;&amp;gt;&amp;gt; b=3
&amp;gt;&amp;gt;&amp;gt; a+b
5
&amp;gt;&amp;gt;&amp;gt; a-b
-1
&amp;gt;&amp;gt;&amp;gt; a/b
0.6666666666666666
&amp;gt;&amp;gt;&amp;gt; a//b
0
&amp;gt;&amp;gt;&amp;gt; a*b
6
&amp;gt;&amp;gt;&amp;gt; a**b
8
&amp;gt;&amp;gt;&amp;gt;#Assignment operators
&amp;gt;&amp;gt;&amp;gt; a=+1
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; a=2
&amp;gt;&amp;gt;&amp;gt; a=+1
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; a=a+1
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a+=1
&amp;gt;&amp;gt;&amp;gt; a
3
&amp;gt;&amp;gt;&amp;gt; a-=2
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; a*=3
&amp;gt;&amp;gt;&amp;gt; a
3
&amp;gt;&amp;gt;&amp;gt; a/=3
&amp;gt;&amp;gt;&amp;gt; a
1.0
&amp;gt;&amp;gt;&amp;gt; b**=3
&amp;gt;&amp;gt;&amp;gt; b
27
&amp;gt;&amp;gt;&amp;gt; b//=2
&amp;gt;&amp;gt;&amp;gt; b
13
&amp;gt;&amp;gt;&amp;gt; #relational operators
&amp;gt;&amp;gt;&amp;gt; 1&amp;gt;2
False
&amp;gt;&amp;gt;&amp;gt; 1&amp;lt;2
True
&amp;gt;&amp;gt;&amp;gt; 1==2
False
&amp;gt;&amp;gt;&amp;gt; 2==2
True
&amp;gt;&amp;gt;&amp;gt; 2!=3
True
&amp;gt;&amp;gt;&amp;gt; 3!=3
False
&amp;gt;&amp;gt;&amp;gt; 3&amp;gt;=3
True
&amp;gt;&amp;gt;&amp;gt; 3&amp;lt;=3
True
&amp;gt;&amp;gt;&amp;gt; #logical operators
&amp;gt;&amp;gt;&amp;gt; 1==2 and 2==2
False
&amp;gt;&amp;gt;&amp;gt; 1==2 or 2==2
True
&amp;gt;&amp;gt;&amp;gt; 1&amp;lt;2 and 2&amp;lt;3
True
&amp;gt;&amp;gt;&amp;gt; not 2==3
True
&amp;gt;&amp;gt;&amp;gt; not 2==3
True
&amp;gt;&amp;gt;&amp;gt; (1&amp;lt;2 and 2&amp;lt;3 ) or 3==4
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;if-else in python.&lt;/strong&gt;&lt;br&gt;
The if else statement works as follows-The "if" condition is checked, if the condition unsatisfied, the actions in the indentation are skipped and if "else" succeeds the "if" condition, then the statements below "else" are executed if. &lt;br&gt;
Logic of the if-elif-else statement-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;#execute if condition_1 is True
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;condition_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;#execute if condition_1 is false and condition_2 is True
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;#execute only if both condition_1 and condition_2 are False
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike C, in Python we do not have to cover the conditions in any parentheses. However I personally feel that the brackets feel neat if added and prevent any confusion. The curly braces in C are replaced by indentation in Python. The "elif" in Python is same as else if in other languages.&lt;/p&gt;

&lt;p&gt;Here is a sample program which checks if a number is positive, negative or zero.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"is a positive number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"is a negative number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"is zero"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another sample program to find the number of digits of a number not more than 5 digits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" 1 digit number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" 2 digit number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" 3 digit number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" 4 digit number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" 5 digit number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execise- 1) There is a bug in the sample program for finding number of digits. Can you fix it? &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/b628c3aa0bee60b75747dc3caff95b57485668fd/Basic/Day%203/Exercise%20solutions/Exercise%201.py"&gt;Answer&lt;/a&gt;&lt;br&gt;
          2) Modify Sample program 1 to print if a number is odd even along with positive and negative. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/b628c3aa0bee60b75747dc3caff95b57485668fd/Basic/Day%203/Exercise%20solutions/Exercise%202.py"&gt;Answer&lt;/a&gt;&lt;br&gt;
          3) Quadratic equation- values of a,b,c are inputted. Find any one root if exists, else print doesn't exist. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/0662136141e77e25dc540b38fc31f03e965d4901/Basic/Day%203/Exercise%20solutions/Exercise%203.py"&gt;Answer&lt;/a&gt;. This exercise will test the operators as well as the if-else.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be continued....😏&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;So friends that's all for this part. 😊 Hope you all are enjoying.😎 Please let me know in the comment section if you liked it or not. 🧐 And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you for being so patient.👍&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript Interview Question #49: Add a new array element by index</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Wed, 23 Jun 2021 03:55:04 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-49-add-a-new-array-element-by-index-2n8f</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-49-add-a-new-array-element-by-index-2n8f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBxUG9m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBxUG9m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-49.png" alt="coderslang javascript interview question #49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will the length of the JS array change? What’s the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;All JavaScript arrays have the &lt;code&gt;push&lt;/code&gt; function. It’s used to add new elements to the array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// [ 1, 2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, 500]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use an array index to read a certain element or modify it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 123, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if the length of an array equals 4, and we try to "modify" the sixth element?&lt;/p&gt;

&lt;p&gt;JavaScript in this case is very liberal and allows us to shoot our own foot. The new element will be added into the array and the length will change.&lt;/p&gt;

&lt;p&gt;But there’s a surprise! Take a look:&lt;/p&gt;

&lt;p&gt;Same code with additional logging:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, 4, &amp;lt;1 empty item&amp;gt;, 'Hello, world!' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: The length of the array will change, and the number &lt;code&gt;6&lt;/code&gt; will be displayed on the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>UI Dev Newsletter #62</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Wed, 23 Jun 2021 03:54:56 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-62-2hm2</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-62-2hm2</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2UlXaLG"&gt;When CSS Isn’t Enough: JavaScript Requirements For Accessible Components&lt;/a&gt;&lt;br&gt;
Stephanie Eckles explains why JavaScript is necessary to accomplish focus management, respond to keyboard events, and toggle ARIA attributes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2TT2TbK"&gt;Using the &lt;code&gt;outline&lt;/code&gt; Property as a Collapsable Border&lt;/a&gt;&lt;br&gt;
Carter Li describes how the ‘outline’ property is automatically collapsed and how animating it doesn’t trigger layouts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3j0NeBH"&gt;Giving a damn about accessibility&lt;/a&gt;&lt;br&gt;
Fabricio Teixeira and Sheri Byrne-Haber share a candid and practical accessibility handbook for designers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3iV3wMf"&gt;Chrome vs Brave: How To Use Ethical Design To Win Customers&lt;/a&gt;&lt;br&gt;
Dan Benoni and Louis-Xavier Lavallee show how Brave browser uses ethical design in its onboarding and user retention strategy as a competitive advantage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xFFPvH"&gt;Remote Repositories&lt;/a&gt;&lt;br&gt;
VS Code introduces a new extension that enables working with source code repositories from GitHub quickly and safely inside VS Code without cloning it to your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3gNWy8Z"&gt;5 Amazing API For Your Project&lt;/a&gt;&lt;br&gt;
Nikhil Bobade shares 5 APIs to use on your next project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xBduX6"&gt;7 Cheat sheet website for Web Developers&lt;/a&gt;&lt;br&gt;
Insha Ramin shares some helpful free guides to HTML, CSS, API, React, and many more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xrB0G6"&gt;Hover.css&lt;/a&gt;&lt;br&gt;
Ian Lunn writes and shares a collection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images, and more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Handling errors gracefully in react with error boundaries</title>
      <author>Keyur Paralkar</author>
      <pubDate>Wed, 23 Jun 2021 03:52:57 +0000</pubDate>
      <link>https://dev.to/keyurparalkar/handling-errors-gracefully-in-react-with-error-boundaries-1n32</link>
      <guid>https://dev.to/keyurparalkar/handling-errors-gracefully-in-react-with-error-boundaries-1n32</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prerequisites-to-implement-error-boundaries-in-react"&gt;
  &lt;/a&gt;
  Prerequisites to implement Error boundaries in React
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Understanding of error types such as run-time, and compile-time errors.&lt;/li&gt;
&lt;li&gt;Knowledge of Class based components.&lt;/li&gt;
&lt;li&gt;An sentry account for logging errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#topics-covered-in-this-blogpost"&gt;
  &lt;/a&gt;
  Topics covered in this blogpost
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Architectural design pattern for implementing error boundaries in react.&lt;/li&gt;
&lt;li&gt;Implementation of error boundary from scratch.&lt;/li&gt;
&lt;li&gt;Types of errors catched by error boundaries.&lt;/li&gt;
&lt;li&gt;Common problems faced during the usage of react error boundary.&lt;/li&gt;
&lt;li&gt;react-error-boundary to the rescue.&lt;/li&gt;
&lt;li&gt;Implementation of third-party error logging tools such as sentry.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-our-error-boundary"&gt;
  &lt;/a&gt;
  Architecture of our error boundary:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In react, all the error boundaries are made up of class based components.&lt;/li&gt;
&lt;li&gt;Error boundaries are some of the graceful ways using which you can catch errors in a more efficient way.&lt;/li&gt;
&lt;li&gt;You can consider it as a &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks of JSX ecosystem.&lt;/li&gt;
&lt;li&gt;Below is a simple example of error boundaries in react
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;fallBackUIComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FallBackUI&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;As you can see &lt;code&gt;ErrorBoundary&lt;/code&gt; component is placed as a parent to a component which we suspect might cause an error.&lt;/li&gt;
&lt;li&gt;Whenever a run-time error occurs in the &lt;code&gt;BuggyComponent&lt;/code&gt; the nearest error boundary which is &lt;code&gt;ErrorBoundary&lt;/code&gt; component catches it and displays a fallback UI. Below Gif will explain this scenario.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgRCexHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s53r9cm06f506kjtepo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgRCexHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s53r9cm06f506kjtepo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since the error boundary is a class based component therefore it has certain methods which it uses to catch errors. Below is the architectural diagram of the &lt;code&gt;ErrorBoundary&lt;/code&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9M8je798--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzb158192jkc4rw3h1p3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-error-boundary"&gt;
  &lt;/a&gt;
  Implementation of Error Boundary:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Before Implementing the error boundary we should keep in mind the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error boundary is always a &lt;code&gt;class&lt;/code&gt; based component.&lt;/li&gt;
&lt;li&gt;It uses following two methods to catch the errors:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;static getDerivedStateFromError()&lt;/code&gt;: A static method which is executed before the DOM is ready(during the rendering phase of the component). This will get invoked whenever descendant component throws an error.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;componentDidCatch()&lt;/code&gt;: This will get invoked whenever a descendant component throws an error. This component is called during &lt;code&gt;commit&lt;/code&gt; phase i.e. When the DOM is ready. It can be used to perform side-effects in the component. It receives two parameters:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;error&lt;/code&gt; - error that is being thrown.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;info&lt;/code&gt; - An object with componentStack which tells us which component threw an error.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we can move towards the implementation of the error boundary. Below code will demonstrate a class based react error boundary:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update state so the next render will show the fallback UI.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Can be used to log to any logging service like sentry&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Catched error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;lt;h3&amp;gt;Something went wrong!&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;//Can be a static or a fall-back component passed as a prop.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fallBackUIComponent&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Few things to note in the above implementation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;getDerivedStateFromError&lt;/code&gt; returns a value to update the state of the component in this case &lt;code&gt;hasError&lt;/code&gt; is set to true.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;componentDidCatch&lt;/code&gt; will also catch the error along with the stack trace of the error. This will occur on the commit phase of the component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lastly in the &lt;code&gt;render&lt;/code&gt; function if the &lt;code&gt;hasError&lt;/code&gt; state is &lt;code&gt;true&lt;/code&gt; then this will print our fallback component which we passed it as a prop. Else it will return the &lt;code&gt;children&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Usage of this component is fairly simple. Just wrap the compontent in the question with the &lt;code&gt;ErrorBoundary&lt;/code&gt; Component so that it catches the error thrown by it's descendant. Below example will give you a clear idea of it's usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Component for fallback UI:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FallBackUI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Something&lt;/span&gt; &lt;span class="nx"&gt;went&lt;/span&gt; &lt;span class="nx"&gt;wrong&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crashing the app!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;fallBackUIComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FallBackUI&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#types-of-error-catched-by-error-boundaries"&gt;
  &lt;/a&gt;
  Types of error catched by error boundaries
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;React's Error Boundary&lt;/a&gt; documentation clearly states that it catches only the errors which occur during the life-cycle of a component i.e. It will catch only run-time errors.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Below mentioned errors are not being catched by react's error boundaries:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Event handlers (learn more)&lt;/p&gt;

&lt;p&gt;Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)&lt;/p&gt;

&lt;p&gt;Server side rendering&lt;/p&gt;

&lt;p&gt;Errors thrown in the error boundary itself (rather than its children)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#common-problems-faced-during-the-usage-of-react-error-boundary"&gt;
  &lt;/a&gt;
  Common problems faced during the usage of react error boundary:
&lt;/h2&gt;

&lt;p&gt;There might be couple of reasons for &lt;code&gt;error boundary&lt;/code&gt; not to work.&lt;/p&gt;

&lt;p&gt;Some of them are mentioned below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#placement-of-raw-errorboundary-endraw-component"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Placement of &lt;code&gt;ErrorBoundary&lt;/code&gt; component.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are some cases where we forget that the component needs to be always wrapped with the &lt;code&gt;ErrorBoundary&lt;/code&gt; component so that it catches error. Below example will provide clear understanding:&lt;/p&gt;

&lt;p&gt;Consider a component which will throw an error when the counter value reaches &lt;code&gt;5&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crashing the app!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Placing the error boundary like below will never allow the &lt;code&gt;ErrorBoundary&lt;/code&gt; Component to catch error, since the &lt;code&gt;BuggyComponent&lt;/code&gt; is not being wrapped with &lt;code&gt;ErrorBoundary&lt;/code&gt; but rather the content of this component is wrapped with &lt;code&gt;ErrorBoundary&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also neither any of this will capture the error throw by &lt;code&gt;BuggyComponent&lt;/code&gt;. To make this work we can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;ErrorBoundary&lt;/code&gt; will catch the error thrown by the &lt;code&gt;BuggyComponent&lt;/code&gt; since it is being wrapped by the error boundary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trying-to-throw-a-new-error-from-event-handler"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trying to throw a new error from event handler:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In the above usecase as you have seen whenever the count value reaches 5 it will throw a new error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;if&lt;/code&gt; block for this is placed in the rendering phase of the component because of which it creates a valid case for &lt;code&gt;ErrorBoundary&lt;/code&gt; to catch the error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crashing the app!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the same won't work if you place the &lt;code&gt;if&lt;/code&gt; block inside the &lt;code&gt;increaseCounter&lt;/code&gt; function. The above example is altered to showcase this scenario:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Crashing the app!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#alternative-packages-raw-reacterrorboundary-endraw-"&gt;
  &lt;/a&gt;
  Alternative packages: &lt;code&gt;react-error-boundary&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;react-error-boundary&lt;/code&gt; is a pretty impressive package. It solves most of the challenges faced by react's error boundary where it won't be able to catch errors such as errors thrown from event handlers, asynchornous code etc.&lt;br&gt;
You can refer to the package's github &lt;a href="https://github.com/bvaughn/react-error-boundary#readme"&gt;readme&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Below is the implmentation of the above example but using &lt;code&gt;react-error-boundary&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-error-boundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ErrorFallback&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Something&lt;/span&gt; &lt;span class="nx"&gt;went&lt;/span&gt; &lt;span class="nx"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/pre&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;preVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Crashing Seq. Initiated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;FallbackComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ErrorFallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyCounter&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implmentation-of-thirdparty-error-logging-tools"&gt;
  &lt;/a&gt;
  Implmentation of third-party error logging tools
&lt;/h2&gt;

&lt;p&gt;Error logging is a crucial part of any application development process. It helps us to analyze and organize errors which are not catched during the testing process of the application. These error logging tools can generally be used to moniter the errors which are thrown on the client's machine/browser.&lt;/p&gt;

&lt;p&gt;When it comes to error logging I find &lt;a href="https://sentry.io/"&gt;sentry.io&lt;/a&gt; to be a bliss. It has pretty impressive documentation and has wide range of support on different tech stacks such as Java, JS, React, React-Native etc.&lt;/p&gt;

&lt;p&gt;Below is the modified example of the above example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://examplePublicKey@o0.ingest.sentry.io/0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BuggyCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter--button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Test Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error has occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyCounter&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Sentry.ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Can also use with React Concurrent Mode&lt;/span&gt;
&lt;span class="c1"&gt;// ReactDOM.createRoot(document.getElementById('root')).render(&amp;lt;App /&amp;gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example you need to first initialize the Sentry's instance with init function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://examplePublicKey@o0.ingest.sentry.io/0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;dsn&lt;/code&gt; is data source name which tells the SDK where to send the events.&lt;/p&gt;

&lt;p&gt;Sentry also provides it's own error boundary component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sentry/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error has occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BuggyCounter&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Sentry.ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the code used in this blogpost below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Implementation of react error boundary from scratch:&lt;br&gt;
&lt;a href="https://codepen.io/keyurparalkar/pen/LYWJKvm?editors=0010"&gt;https://codepen.io/keyurparalkar/pen/LYWJKvm?editors=0010&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementation of react error boundary using &lt;code&gt;react-error-boundary&lt;/code&gt; package:&lt;br&gt;
&lt;a href="https://codepen.io/keyurparalkar/pen/bGqQNJe"&gt;https://codepen.io/keyurparalkar/pen/bGqQNJe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Feel free to reach out to me @&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/keyur-paralkar-494415107/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="Linkedin Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//mailto:keur.plkar@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DufH8NGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/email-c14438%3Fstyle%3Dfor-the-badge%26logo%3DGmail%26logoColor%3Dwhite%26link%3Dmailto:furkanozbek1995%40gmail.com" alt="Mail Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/keurplkar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wF_oZRkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/twitter-1DA1F2%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite" alt="Twitter Badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/keyurparalkar/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOULfaxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/github-333%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="Github Badge"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Setup a HTML tooltip on hover using CSS</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 23 Jun 2021 03:31:24 +0000</pubDate>
      <link>https://dev.to/michaelburrows/setup-a-html-tooltip-on-hover-using-css-23b3</link>
      <guid>https://dev.to/michaelburrows/setup-a-html-tooltip-on-hover-using-css-23b3</guid>
      <description>&lt;p&gt;Tooltips are little boxes containing helpful text that appear when you hover over certain elements in a web page. They’re a useful UI component for providing additional information to users without having to clutter the interface. In this tutorial we’ll be creating a simple tooltip using HTML &amp;amp; CSS with no JavaScript required.&lt;/p&gt;

&lt;p&gt;Let get started with the HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Example CSS Tooltip &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Tooltips are used to provide information about an element on a web page."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tooltip will appear when we hover over the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element displaying the text from the data attribute. Alternatively you could apply the data attribute to a hyperlink or button and the tooltip will function the same way.&lt;/p&gt;

&lt;p&gt;Now for the CSS starting with the tooltips trigger element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we’re using a data attribute we can use the CSS &lt;code&gt;[attribute]&lt;/code&gt; selector which selects all elements with a specified attribute (&lt;code&gt;data-tooltip&lt;/code&gt;). The actual tooltip that appears on hover will be constructed using &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-tooltip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we’ll a small arrow shape so the tooltip looks like a speech bubble:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;Code&lt;/span&gt; &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;CSS&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;Finally&lt;/span&gt; &lt;span class="nt"&gt;we&lt;/span&gt; &lt;span class="nt"&gt;need&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;visible&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;tooltip&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;hovered&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial, we’ve just created a animated tooltip using only HTML and CSS. The only drawback when creating tooltips using this method is data attributes don’t support hyperlinks so these tooltips are unable to contain links and are purely text only.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Dependency Injection (Simplified)</title>
      <author>Zak Horton</author>
      <pubDate>Wed, 23 Jun 2021 02:12:32 +0000</pubDate>
      <link>https://dev.to/zhorton34/dependency-injection-simplified-1ikl</link>
      <guid>https://dev.to/zhorton34/dependency-injection-simplified-1ikl</guid>
      <description>&lt;p&gt;Your palms are sweaty&lt;br&gt;
Knees weak, arms are heavy&lt;br&gt;
There's vomit on your sweater already, Dev's spaghetti&lt;/p&gt;

&lt;p&gt;Your nervous, but on the surface you stay calm and ready, &lt;br&gt;
To Drop coms.&lt;/p&gt;

&lt;p&gt;But you're forgettin' what you coded wow. The team knows it now. Overnight architects studying no doubt, come in clutch with competent "Know How" that's balanced by curious "No, how?"  &lt;/p&gt;




&lt;p&gt;Curious "No, how?" checks competent "Know How" and vice versa. This balance is "How" good teams balance and build into great teams. Without "No, how?" and "Know how" all your left with is "How?".&lt;/p&gt;




&lt;p&gt;It's broken, plow, nobody's talkin' now&lt;br&gt;
The clocks run out, times up, over, blaow,&lt;/p&gt;

&lt;p&gt;Snap back to reality, ope another impracticality, dependent on irrationality, rabbiting towards dependency hell again.&lt;/p&gt;

&lt;p&gt;Your so mad, but you won't give up that easily? No you won't have it, you know the app's not that out of it. At one at least it hadn't been. &lt;/p&gt;

&lt;p&gt;Your back's to the ropes, entangled code, the team starts losing hope. It don't matter, your dope, you know that, but this code's a joke. Is something fixable if truly incapable?&lt;/p&gt;

&lt;p&gt;You feel so stagnant, you continue to grind, ope, you code another line - HOLY F&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
(Deep breaths...)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-breaths"&gt;
  &lt;/a&gt;
  (Deep breaths...)
&lt;/h2&gt;

&lt;p&gt;You ran into another dependency...&lt;/p&gt;

&lt;p&gt;Okay...Alright. It's fine. &lt;br&gt;
Let's focus up and do it right this one time.&lt;/p&gt;

&lt;p&gt;That's when it's back to the lab again, ope you better capture that moment and capture it you only got one sh....&lt;/p&gt;

&lt;p&gt;"HOLY MOTHER OF F, AGAIN!?!?!?!?!"&lt;/p&gt;

&lt;p&gt;You run into ANOTHER dependency. Your about to lose it again. Your best option is to simply let emotions take over and give in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-you-got-this-lets-check-back-into-that-work-grind-rhythm"&gt;
  &lt;/a&gt;
  But you got this. Let's check back into that work grind rhythm...
&lt;/h2&gt;

&lt;p&gt;This opportunity comes once in a !!DEPENDENCY POPS UP!!! life &lt;br&gt;
time, !!DEPENDENCY POPS UP!!!  dependencies are tragically stealing hope, !!DEPENDENCY POPS UP!!! you know that, but there's code you know's crap, but that's where its at. &lt;/p&gt;

&lt;p&gt;Your backs against the ropes, just don't react - eroded code, try to decode - won't say can't or impossible but...Can't do it, won't do it, shoooouullldddnnn'ttt do it in this kinda mental mode. &lt;/p&gt;

&lt;p&gt;Try decoding the dependency ridden code anyways. You've got this. Go with the rhythm. Feel the beat? There's that vibe...&lt;/p&gt;

&lt;p&gt;Snap back to reality ope there goes dependencies, retreat to child hood contingencies. Losing hope, you childishly start to cope, feeling like you'd rather be jobless and go broke - what the hell is this application doing is this a damn joke? &lt;/p&gt;




&lt;p&gt;DEPENDENCIES ARE THE DEVIL INCARNATE (BELIEVE YOU, FIX IT)&lt;/p&gt;




&lt;p&gt;Months in this environment and all but a shell of you has withered away. You're not the only one either. Your team's going through the same thing. Good ol' competent "Know how" turns into eye rolling "No......how's our environment going to use a five minute task to steal my time for the entire damn day.....this time?". &lt;/p&gt;

&lt;p&gt;"Know how" is what you want on an engineering team. "No, how?" in a genuinely curious is also what you want. Competent "Know How" and genuine "No, How?" are the balance that greats teams are built on. &lt;/p&gt;

&lt;p&gt;Annoyance when being asked to learn something new because the environment is that tedious and broken kills the curiosity of "No, how?" while having to go through these overly tedious and tiresome tasks time and time again kills that want to be the competent individual in a room. &lt;/p&gt;

&lt;p&gt;Annoyance follows suit on both sides. Teams become frustrated. Quality suffers. Upper management gets involved. Now there's too much pressure to fix an application ridden deep within dependency hell. Great companies slowly lose engineers due to interest, lack of passion, external pressure dis-allowing them the ability to build things the right way and thus make everyone's lives better on the team and within the company. &lt;/p&gt;

&lt;p&gt;Upper management leaves and executives begin to bail noticing this pattern far before most other individuals due to simple experience in the industry. &lt;/p&gt;

&lt;p&gt;Team members who have been loyal to the company for years are promoted. They may deserve the position as far as loyalty is concerned but ultimately they don't have the training nor outside experience to handle these new middle management positions. New engineers coming in notice these signs very quickly where as engineers who have been on the team for years don't necessarily see all of the warning signs.&lt;/p&gt;

&lt;p&gt;Given new hires holding an engineering position (non-leadership role) aren't going to typically come in and start bossing around the team that just hired them due to not wanting to step on any toes there tends to be a lack of genuine competence within the organization looking in. This doesn't always mean their is actually a lack of competence. A lot of the times the newly hired engineers are more competent in industry best practices simply due to the fact that they've worked throughout the industry and often times have moved around frequently. &lt;/p&gt;

&lt;p&gt;When a process that should be quick and simple isn't, annoyance follows due to it being a waste of time. The most valuable commodity we have on this planet is time. Whether we realize it or not I believe that if our time is being wasted - that we as humans intrinsically understand how soul sucking and passionless the task must really be. &lt;/p&gt;

&lt;p&gt;The fact that our time is being invested into something that we can make more efficient but just decided is worth our time to do so is the same as telling ourselves "I'm okay wasting my life source energy on this." When we tell ourselves that the level of value we expect are okay with from ourselves then we also give the go ahead to all of those around us to have that expectation of us as well. &lt;/p&gt;

&lt;p&gt;We're telling ourselves and world that this is the level of contribution I'm okay contributing to the world. We're telling the world that my limited amount of time and energy available in this life time is trivial and it's okay for both myself and you to invest it in repetitive tasks with limited responsibility. &lt;/p&gt;

&lt;p&gt;Taking on responsibility is what gives our lives passion and reason. I believe we have a responsibility to live life to the fullest, to become a valuable resource to the ourselves and the world, and to ultimately remove the barrier through initial of front investment of resources and energy to re-claim the freedom of time and passion in our lives. Don't tell the world that our time, the only resource we'll never be able to take back, is an acceptable commodity to be wasted on trivial monotony.&lt;/p&gt;

&lt;p&gt;By not speaking up, making a move, or taking the action to implement the change within ourselves or our physical world, we are sub-consciously externalizing the value we see within ourselves and showing the world that price tag we just put on an invaluable resource of planet earth - life itself.  &lt;/p&gt;

&lt;p&gt;Our lives are valuable. Implementing the optimal operations for a team of engineers is not only important to the success of the organization but contributes to make the world better for those immediately around you on your team. Success and quality contributions to the world breed an unspoken sense of respect across a team. By removing bottle necks, investing in tasks removing trivial - tedious - or annoying tasks, and consciously taking into account that these are lives of people who have families, dreams, and aspirations worth that investment of resources to free of their time --- then you not only become a more successful team, you also become a more invigorated, loving, respected, and respectful team. &lt;/p&gt;

&lt;p&gt;When you see annoyance within the trivial tasks from your team members I believe it is the responsibility of the leaders and the team team members to work together and quite literally earn their freedom back from triviality as well as any repetitive task that down right dis-respects what value they as a human being are capable of bringing to the table.&lt;/p&gt;

&lt;p&gt;Within a year, your team will add these bits of freedom up and will reallocate them towards what really matters. They feel valued. They want to make others feel valued. Everyone respects time and understand that commitment towards not wasting time on non-enjoyable time-wasters is detrimental to success, happiness, and freedom. &lt;/p&gt;

&lt;p&gt;Dependency Hell ruins lives. It dims out previously fired up team mates and will whither away desires of passion and life.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#back-to-the-dependency-grind-work-grind-rhythm"&gt;
  &lt;/a&gt;
  Back to the dependency grind work grind rhythm...
&lt;/h2&gt;

&lt;p&gt;To drop .coms, but your forgettin' what you coded now,&lt;br&gt;
the team learned design patterns somehow, but the code won't work out but you keep on forgettin' what you coded down, its just all broken now, but on the surface your calm and steady, to drop. You just did wow, your coding' now. No chokin' allowed.&lt;/p&gt;

&lt;p&gt;On the surface you look calm and ready to drop bombs, but you keep on forgettin' what you depend on there, it's a dependency scare, this s***, what hell is this, everyone's starting to not care. Truth is we're losing hope, act like you dont care to cope, its a defensive mechanism kicking in, your skins feeling thin, &lt;/p&gt;

&lt;p&gt;Pretend like you just don't care, you're not reacting, ten seconds later your pulling out your hair, truth is your dope, you have that passion, your just losing hope, it's time get back that life fire that fills you up with satisfaction, with this bullshit it's time that we said nope.&lt;/p&gt;

&lt;p&gt;Dependency hell, drove you towards that lack of respect for yourself, wasn't good for your health, started not to care, had that thousand mile stare. Pulled out your hair and now your bald. Family members hit you up, to sad - you never called. Your skills have declined, your sitting at the dinner table and your social skills have flat-lined, it's a night mirror, thanks to dependency hell now you're officially there. &lt;/p&gt;

&lt;p&gt;Your family life, social life, professional life, and most likely even that sex life of your suffer. You're spirit is slowing walking down the road towards a non-glorious death...and you know it. Your jokes are less funny, daily interactions are less enthusiastic, and you may even make the mistake of turning towards unhealthy coping mechanisms like the absolutely outrageous idea that you don't have value to bring or any kind of thought about you not being able to change your life. You are valuable, you can change your life, and you should always remember and carry out living your life remember both of those two facts. People will treat you the way you allow them to treat you - many times we have to show, teach, and coach people up on what is and isn't an okay way to treat us. &lt;/p&gt;

&lt;p&gt;Don't be that person who doesn't value themselves or their time because it matters. Live a good life. Enjoy your work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escape-dependency-hell"&gt;
  &lt;/a&gt;
  ESCAPE DEPENDENCY HELL. 
&lt;/h2&gt;

&lt;p&gt;We are learning how to escape hell and set you back on the track towards happiness in your life. We are pulling you out of hell, pulling those bootstraps up, and putting some healthy responsibility and genuine passion back into your life. &lt;/p&gt;

&lt;p&gt;The truth is, hell is empty - and all of the devils are living here. We know these devils as dependencies. Today we take the road of holy righteousness and commit our very essence to the act of maliciously murdering these dependency devils. We will fight for light, goodness, and harness our warrior spirit to attack these devils with unrelenting resolve.Today we make the world the better place. We make the world a better place by starting with the only individual we are able to impact to the highest regard in positive and powerful ways. Ourselves. You as an individual and myself as an individual will focus on bettering the world around us by being the individual in our own worlds who make the world a better place. Period.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#discovering-who-we-are-as-individuals"&gt;
  &lt;/a&gt;
  Discovering Who We Are As Individuals
&lt;/h2&gt;




&lt;p&gt;&lt;em&gt;Understanding a team is much like discovering who you are yourself as an individual. In my experience, understanding human's is more about eliminating what is not meant to be than it is to understand what is meant to be. elimination of what isn't than it is about understanding what is. Life advice and team building advice go hand in hand - at the end of the day any team, business, organization, government, or country is made up of people. Truly understanding yourself or any other individual or group of individuals is hard. It's much easier to focus on who you are not and leave space for what is to naturally fall into place&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Knowing who we are is hard. It's hard. We're always changing, in motion, in constant approach to our destination, perpetually in motion, and almost never intending to head towards where we end up anyhow.&lt;/p&gt;

&lt;p&gt;Instead of asking WHO WE ARE why not simply ask WHO AM I NOT. What is it that I don't do. What are those things that aren't good for you, those things that...you know you just really shouldn't do. That bar where you always wake up with the worst hang over the day after. Those friends that are fun...but you know they really aren't the kinda people you should be hanging out with. Or those salty and sugary snacks that taste so goood going down but make you feel like trash later on.  &lt;/p&gt;

&lt;p&gt;By focusing on WHO WE ARE NOT we leave space to naturally, organically, and almost even innocently fall into who we are. We leave space for those things, people, places, and choices that fill us up, light your own fire, turn you on in this experience of life we all share and inevitably begin to find out what truly brings us joy and fulfillment in this life. &lt;/p&gt;

&lt;p&gt;Knowing who we are is hard. Focus on who you are not. Through process of elimination, naturally, we create space in our lives for those things, people, places, and passions that are truly the make up of what we want this life to be. Process of elimination.&lt;/p&gt;




&lt;p&gt;Alright, let's take part in some self-improvement via learning and simplify some dependency injection and dependency inversion design patterns!&lt;/p&gt;




&lt;p&gt;Dependency Injection, now that's something. I mean hell, what's a dependency anyways?&lt;/p&gt;

&lt;p&gt;Or...do we know what a dependency is already and the better question is to ask what a dependency is NOT? &lt;/p&gt;

&lt;p&gt;Isn't a dependency a class? Or maybe that classes methods? What about the variables we pass into that method for that class? &lt;/p&gt;

&lt;p&gt;What if our class &lt;em&gt;needs&lt;/em&gt; two dependencies to be created? What if those two dependencies are classes themselves? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if&lt;/strong&gt; the dependencies of our class have dependencies of their own that need dependencies injected which just so happen to also may or may not be self-dependent and require additional dependencies for those dependencies....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHEN DOES THE DEPENDENCY MADNESS END!?!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The truth is, as engineers we can define just about everything as a dependency. A variable, a conditional, an instance, function, and even the runtime. Most things in and outside of software are non-pure entities that depend on those things while being depended on by those other things. &lt;/p&gt;

&lt;p&gt;So how do we manage the fact that things rely on other things? That to create something, we may need to pass dependencies into it's constructor for it to work properly.&lt;/p&gt;

&lt;p&gt;The answer?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;&lt;br&gt;
We wire up some a design that injects the dependencies for us. More over, we implement dependency inversion, one of the only design principles that inverts a software application's dependency tree from infinitely branching dependencies out throughout the life cycle of a request. &lt;/p&gt;

&lt;p&gt;Confused yet? &lt;/p&gt;

&lt;p&gt;No worries, in this Clean Code Studio screen cast we visually simplify what a dependency is, how we inject dependencies, what differentiates dependency injection from dependency inversion, and finally go out into the wild to tinker with Laravel's service container - a component that utilizes the dependency inversion principle to implement dependency injection and save us from dependency hell.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tW6UHD81SG0"&gt;Dependency Injection&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=tW6UHD81SG0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzC0jtbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpz0p1ttp1eweprbzqbr.png" alt="Zak Horton of Clean Code Studio looking up at Floating Dependency Injection Words with interest as they fly on to the screen."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>php</category>
      <category>dependencyinjection</category>
      <category>dependencyinversion</category>
    </item>
    <item>
      <title>Codecademy Review. Is it worth it?</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 23 Jun 2021 01:58:49 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/codecademy-review-is-it-worth-it-cg6</link>
      <guid>https://dev.to/elijahtrillionz/codecademy-review-is-it-worth-it-cg6</guid>
      <description>&lt;p&gt;&lt;a href="http://codecademy.com"&gt;&lt;strong&gt;Codecademy&lt;/strong&gt;&lt;/a&gt; is a popular online learning platform for coding. This article is going to review what it offers to make learning easy.&lt;/p&gt;

&lt;p&gt;If you are not sure if Codecademy is still worth it, then this article is for you. It will help you navigate and get used to some of the great features of Codecademy.&lt;/p&gt;

&lt;p&gt;I have always considered Codecademy as one of my favorites, maybe after reading this and after using it, you will too.&lt;/p&gt;

&lt;p&gt;Feel free to navigate however you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Content:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#courses"&gt;Codecademy Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-tools"&gt;Codecademy Learning Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projects"&gt;Codecademy Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#go"&gt;Codecademy GO (Mobile App)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#teams"&gt;Codecademy For Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blog"&gt;Codecademy Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#students"&gt;Codecademy for Students&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#articles"&gt;Codecademy Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forum"&gt;Codecademy Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pricing"&gt;Codecademy Pricing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-codecademy-courses"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;1&lt;/a&gt;. Codecademy Courses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/catalog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAptOqcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-courses.png" alt="codecademy courses" title="codecademy courses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codecademy courses span across 15 Computer languages, they are Java, Go, Python, JavaScript, Ruby, SQL, C++, C#, Swift, HTML, CSS, Bash/Shell, Kotlin, PHP, and R.&lt;/p&gt;

&lt;p&gt;They also have courses for frameworks and libraries like React, VueJS, React Native, NodeJS, Django, jQuery, etc.&lt;/p&gt;

&lt;p&gt;Codecademy courses are well organized based on what part of programming (subject) you are into. For example web development.&lt;/p&gt;

&lt;p&gt;The web development full package contains all you require to create a website (static or/and dynamic) and deploy it. Yes, deploy it. Codecademy have courses on how to deploy a website. Awesome right!.&lt;/p&gt;

&lt;p&gt;Some of these web development courses include VueJS, jQuery, React, Deploying to Heroku, Netlify, Git, Command line, Django, JavaScript, Python, PHP, GitHub, NodeJS, etc. You see, it is a full package.&lt;/p&gt;

&lt;p&gt;Not to worry, the courses above are not as scattered as I listed, they are well structured in terms of level. For example courses for beginners are kept in the beginners' section.&lt;/p&gt;

&lt;p&gt;The good thing about Codecademy is that some of these courses are in form of projects. They are actually projects. For example, there is a course on Back-End Engineer and there is another on how to create a Back-End App. Cool right!&lt;/p&gt;

&lt;p&gt;These courses are not very arranged in terms of roadmap or path. But Codecademy has a guide for Paths. Or if you want to be a web developer, I have made a guide in the form of a &lt;a href="https://webdeverguide.com/how-to-become-a-web-developer-in-2021"&gt;roadmap for you on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other subjects in Codecademy are Data Science, Computer Science, Developer Tools, Machine Learning, Mobile Development, Web Design, Game Development, etc.&lt;/p&gt;

&lt;p&gt;Above all, Codecademy offers courses on interviews in different languages. So you learn a skill, take quizzes, build projects, learn how to crush an interview all in Codecademy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-codecademy-learning-tools"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;2&lt;/a&gt;. Codecademy Learning Tools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbPCKQn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-learning-tools.png" alt="Codecademy learning tools" title="Codecademy learning tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will start this off by letting you know that each course has a structured module and lessons.&lt;/p&gt;

&lt;p&gt;As a user, there is a syllabus for each course. And this syllabus has modules that each in turn have lessons, quizzes, and project(s).&lt;/p&gt;

&lt;p&gt;These projects and quizzes are to test what you've learned from each module. They are only accessible to pro users. Also, there are exercises. We will talk more about this in a sub-section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises
&lt;/h3&gt;

&lt;p&gt;Each lesson has an exercise (practice) at the end of it. It is meant for you to get more acquainted with what you learned from that lesson. You answer and preview your solutions with the Codecademy built-in text editor. (More on this to come).&lt;/p&gt;

&lt;p&gt;Now each of these exercises is well broken down into steps for you to find it easy. You asked to get some things done one after the other. Though you can do it all at once if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These exercises are compulsory for you to move to the next lesson or project or quiz. But you may say, "What if I can't come up with a solution to the exercise".&lt;/p&gt;

&lt;p&gt;When or if you get stuck, Codecademy provides a hint for each step (smaller units of the exercise), you can also get help from the Codecademy forum.&lt;/p&gt;

&lt;p&gt;But if you're still stuck, then you can simply view the solution to the exercise. This option should be your last resort. Try to not make it your first option. With these three solutions, you can never get stuck for long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-breaks"&gt;
  &lt;/a&gt;
  Taking Breaks
&lt;/h3&gt;

&lt;p&gt;Codecademy has a tool for taking breaks. It's a customizable timer. Taking breaks is essential for every human, so having a tool like this close to what you're using makes life easier and faster.&lt;/p&gt;

&lt;p&gt;You can set it up in a way that reminds you when to take a break and also reminds or notify you when to resume learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-editor"&gt;
  &lt;/a&gt;
  Text Editor
&lt;/h3&gt;

&lt;p&gt;Codecademy's built-in text editor is probably the best you will ever see in online learning platforms. It's the best have seen so far.&lt;/p&gt;

&lt;p&gt;It is customizable, supports multiple files, supports syntax highlighting, supports autocomplete, file uploads.&lt;/p&gt;

&lt;p&gt;Along with the text editor is a code preview which can act as a &lt;strong&gt;console&lt;/strong&gt;, and a &lt;strong&gt;browser&lt;/strong&gt;. The text editor and code preview are like that of &lt;a href="https://replit.com"&gt;&lt;strong&gt;Replit&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-shortcut"&gt;
  &lt;/a&gt;
  Keyboard shortcut
&lt;/h3&gt;

&lt;p&gt;Tired of moving your mouse all the time? Not to worry because Codecademy provides a set of keyboard shortcuts to help you move around easily.&lt;/p&gt;

&lt;p&gt;For example, submitting an exercises is ctrl(cmd) + Enter. When you hover over a button, a tooltip of that shortcut will be shown if it exists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#staying-focus"&gt;
  &lt;/a&gt;
  Staying focus
&lt;/h3&gt;

&lt;p&gt;In this section, I am gonna talk about some of the features Codecademy provides for you to stay focused and consistent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-goals"&gt;
  &lt;/a&gt;
  i. Goals:
&lt;/h4&gt;

&lt;p&gt;Goals are activities that you set for yourself to accomplish. Could be recursive like weekly or even long-term. For each of these goals accomplished Codecademy will notify you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ii-progress-tracker"&gt;
  &lt;/a&gt;
  ii. Progress Tracker:
&lt;/h4&gt;

&lt;p&gt;Codecademy provides a tracker that tracks your progress on different courses. This tracker simply indicates how far you've gone in a course and how much more is left. Progress can also be easily reset with a click.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#iii-achievements"&gt;
  &lt;/a&gt;
  iii. Achievements:
&lt;/h4&gt;

&lt;p&gt;For every goal, lesson, module, and course you complete, Codecademy stores it up as an achievement. Codecademy gives you badges that can serve as a source of encouragement and building confidence for you to stay focused.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h3&gt;

&lt;p&gt;Each module contains a cheatsheet for you to review, revise or run back to when needed. These cheatsheet are a summary of what you've learned from a module.&lt;/p&gt;

&lt;p&gt;They include detailed explanations with code snippets. You can easily print or download them to your system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#certificate-of-completion"&gt;
  &lt;/a&gt;
  Certificate of Completion
&lt;/h3&gt;

&lt;p&gt;A certificate of completion is given to pro-users at the end of each course. How useful can this be during interviews? It may be a little bit useful but it is not needed. Not having a certificate doesn't stop you from applying to a company and getting the job right?.&lt;/p&gt;




&lt;p&gt;See also: &lt;a href="https://webdeverguide.com/20-places-to-learn-programming-for-free"&gt;20+ Places to Learn Programming for Free&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-codecademy-projects"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;3&lt;/a&gt;. Codecademy Projects
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y58gJzN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-projects.png" alt="codecademy projects" title="codecademy projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codecademy projects can be very helpful, it usually comes after the completion of a module or as a course itself. It's learning a skill or a new thing and see how it is used in real-world applications.&lt;/p&gt;

&lt;p&gt;It is through the application of what you've learned you can tell if you understood what you learned or not.&lt;/p&gt;

&lt;p&gt;There is nothing as cool as applying what you learned into a real application or task. But how would one who is new to JavaScript promises know which projects one should do?&lt;/p&gt;

&lt;p&gt;This is where Codecademy comes in. They give you a project to do and how to do it. These projects are related to the module you just concluded. I usually recommend trying to work on the project before checking how it was done.&lt;/p&gt;

&lt;p&gt;Such acts give you an edge over your proposed progress. So you get the project idea from Codecademy and try to build it. If you're unable to get the project working, never get discouraged. At least you tried. Better to fail than to not try.&lt;/p&gt;

&lt;p&gt;These projects are available to pro users only. Non-pro users only get to see the project idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-codecademy-go-mobile-app"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;4&lt;/a&gt;. Codecademy GO (Mobile App)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/resources/blog/codecademy-go-faq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM-vi1en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-go.png" alt="codecademy go app" title="codecademy go app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/resources/blog/codecademy-go-faq/"&gt;Codecademy GO&lt;/a&gt; is a Codecademy mobile app for Android and iOS users. This app helps you review and practice what you learn on the web, anywhere anytime.&lt;/p&gt;

&lt;p&gt;"It brings learning, practicing and practicality via articles together into one place" - a Codecademy GO user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-codecademy-for-teams"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;5&lt;/a&gt;. Codecademy for Teams
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/business"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_Kpuv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-for-teams.png" alt="codecademy for teams" title="codecademy for teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from individuals and students, &lt;a href="https://www.codecademy.com/business"&gt;Codecademy is available for teams&lt;/a&gt;. A company that wants to train its staff with a new skill can make use of Codecademy for Teams to do that.&lt;/p&gt;

&lt;p&gt;With the Codecademy for Teams, Codecademy guarantees interactive learning, step-by-step guidance, proof of progress, and cutting-edge courses, with unlimited access to course content/&lt;/p&gt;

&lt;p&gt;Not a lot of information on this from me, but what I can tell you is that it is not so expensive. At least that's what I thought. It costs over $200/seat (or staff) annually, with a minimum of 5 seats per company.&lt;/p&gt;

&lt;p&gt;If Codecademy for teams is what they say it is, then the pricing is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-codecademy-blog"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;6&lt;/a&gt;. Codecademy Blog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/resources/blog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE4vfaRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-blog.png" alt="codecademy blog" title="codecademy blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.codecademy.com/resources/blog/"&gt;Codecademy blog&lt;/a&gt; is an exciting resource for coding tips, recommendations, news, advice, etc.&lt;/p&gt;

&lt;p&gt;They have a lot of good writers who are tech experts and they post every time. Never get to wait long for another article.&lt;/p&gt;

&lt;p&gt;Some of these articles are backed up with videos for proper illustrations. The good thing about it is you don't need to be a Codecademy user before you have access to the blog. Everyone has access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-codecademy-for-students"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;7&lt;/a&gt;. Codecademy for Students
&lt;/h2&gt;

&lt;p&gt;So many things to talk about in Codecademy. Well here is yet another interesting thing about this online learning platform.&lt;/p&gt;

&lt;p&gt;Codecademy provides a special offer (a lesser offer) for &lt;a href="https://www.codecademy.com/student-center"&gt;college students&lt;/a&gt; as well as special features. Eligible college students will have access to a course called CS101.&lt;/p&gt;

&lt;p&gt;CS101 is an introduction to computer science. It consists of all the basics of programming like Functions, Variables, Loops, Arrays, etc. This course is a live-streamed course.&lt;/p&gt;

&lt;p&gt;Also, Codecademy has recently partnered with &lt;a href="https://clever.com/library/app/codecademy"&gt;Clever&lt;/a&gt; to give free pro memberships to high school classes in the United States.&lt;/p&gt;

&lt;p&gt;Teachers are responsible for signing up their students. So far there are over 997 teachers using it. Cool stats. Because it is free, some of the great features of Codecademy are not present. Like the progress tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-codecademy-articles"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;8&lt;/a&gt;. Codecademy Articles
&lt;/h2&gt;

&lt;p&gt;Feel like you didn't really understand what you learned from a module or course? Well, &lt;a href="https://www.codecademy.com/articles/"&gt;Codecademy articles&lt;/a&gt; will help you out.&lt;/p&gt;

&lt;p&gt;They are in-depth explanations about concepts that you learned from a module or course. They span across the 15 languages and subjects Codecademy offers (mentioned above).&lt;/p&gt;

&lt;p&gt;Articles can serve as a pre-study or post-study. You can read articles before studying a module or read articles after studying a module. Articles can help both ways.&lt;/p&gt;




&lt;p&gt;How would you like to know the &lt;a href="https://webdeverguide.com/the-10-important-full-stack-web-development-tools-in-2021"&gt;10 Essential Web Development tools&lt;/a&gt; and their alternatives used by developers everyday?.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-codecademy-forum"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;9&lt;/a&gt;. Codecademy Forum
&lt;/h2&gt;

&lt;p&gt;Not as popular as other forums. But it doesn't fail to help you. With the &lt;a href="https://discuss.codecademy.com/"&gt;Codecademy forum&lt;/a&gt; you can get help for coding problems, relate with the community, make friends, provide solutions to other people's problem.&lt;/p&gt;

&lt;p&gt;The Codecademy forum is mostly used when students get stuck at exercises or projects while learning with Codecademy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-codecademy-pricing"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;10&lt;/a&gt;. Codecademy Pricing
&lt;/h2&gt;

&lt;p&gt;Codecademy has a very generous &lt;a href="https://www.codecademy.com/pricing"&gt;plans&lt;/a&gt; for its subscribers. There are three plans, the first is for free, the second is with a small token and the last is for teams which we already made mention of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-forever-basic-plan"&gt;
  &lt;/a&gt;
  Free Forever (Basic Plan)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What you get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this plan, you can access all basic courses, get support. You also get access to mobile practice but it is limited thereby making the app almost useless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you don't get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The basic plan doesn't give you access to pro features. Some of which are projects, quizzes, members-only content, certificate of completion, unlimited mobile practice, etc.&lt;/p&gt;




&lt;p&gt;Considering learning a &lt;strong&gt;coding skill&lt;/strong&gt;? Have you considered a laptop suitable for coding yet?&lt;/p&gt;

&lt;p&gt;Not to worry, here are &lt;a href="https://webdeverguide.com/cheap-recommended-laptops-for-coding"&gt;&lt;strong&gt;cheap recommended laptops for coding.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pro"&gt;
  &lt;/a&gt;
  Pro
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What you get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pro users have access to everything the basic plan offers and additionally have access to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlimited mobile practice,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Members-only content,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Real-world projects,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quizzes,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step-by-step guidance,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certificate of completion,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and a pat on your back.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What you don't get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing. You already have everything, except features for teams.&lt;/p&gt;

&lt;p&gt;Pro members are billed yearly paying $19.99/month. With this, you save $240. You can choose to be billed monthly at $39/month.&lt;/p&gt;

&lt;p&gt;The choice is yours, but why should you pay for a year when you can complete a skill or your desired course in 3 - 6 months. So get to know how fast you can go, do the math and go for the one that is better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To round this up, I'd say go for it. Learn that skill you have always wanted to learn, apply it to your dream company, and do what you love for the company you love.&lt;/p&gt;

&lt;p&gt;Alright, leave a comment for me if you want to correct me, tell me something. If you enjoyed this article please share it with your friends, I believe they will also find this useful.&lt;/p&gt;

&lt;p&gt;Also if you wanna support my blogging journey, you want me to keep posting, you can support me by &lt;a href="https://www.patreon.com/elijahtrillionz"&gt;becoming a patron&lt;/a&gt; or you can &lt;a href="https://www.buymeacoffee.com/elijahtrillionz"&gt;buy me a coffee&lt;/a&gt;. Thank you and have a great time learning that skill.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Vaccination Game (Canvas API)</title>
      <author>Claudio Bonfati</author>
      <pubDate>Tue, 22 Jun 2021 23:57:57 +0000</pubDate>
      <link>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</link>
      <guid>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</guid>
      <description>&lt;p&gt;Last year I've worked on a project where I had to develop a small game alongside other components. But recently I've decided to isolate this game as a single stand-alone project since it was a good way to share a bit about canvas development and possibly introduce someone that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article is intended to detail the development process of the game and some fundamentals of how to deal with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; for similar projects.&lt;/p&gt;

&lt;p&gt;First things first, you can take a look at the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;GitHub Project ⭐&lt;/a&gt; or just &lt;a href="https://claudiobonfati.github.io/vaccination-game/"&gt;play the game 🎮&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before jumping into coding, we must have some things clear in mind, such as the concept of the game, the goal, how to win, and how to lose. If you have played it already, you've probably got it, but here is a quick overview:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The game consists of a population of 54 people separated in a grid system that keeps them apart from each other. As the game starts, 2 random people are infected by a disease. Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. By clicking at the healthy person we can vaccinate them, allowing them to become immune to the disease. The goal is to trap the disease right at the start, preventing it to spread further through the population and then vaccinate all remaining healthy people. I also added a timer of 30 seconds to make things a little bit more interesting.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start by setting up our Canvas environment. For this project, I've chosed the framework &lt;a href="https://nuxtjs.org/"&gt;NuxtJS&lt;/a&gt; to work with &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; to handle all the interface interactions and also the engine responsible to create the triggers we will be needing later. After this quick introduction, let's start!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#global-wrapper"&gt;
  &lt;/a&gt;
  Global wrapper
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing - and the most obvious one - is to "create a NuxtJS project". I set it up with nothing different from a simple project, with an index page, global style, and a single component called "Game" to manage all functionalities and interactions.&lt;/p&gt;

&lt;p&gt;But one thing is important to highlight here. The Game component will handle the &lt;em&gt;interactions&lt;/em&gt; with VueJS, but all &lt;em&gt;behaviors&lt;/em&gt; of the game will be set up directly with Canvas API and a javascript Class we will also be creating later. Remember these two terms, the difference between them will get clear as we talk more about canvas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#markup-structure"&gt;
  &lt;/a&gt;
  Markup structure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All HTML needed was created and styled at the Game component. But again, one thing is an important note here. Our game must have some "sections", which are the steps where the player will be. If we take a look that the player's journey, it starts at a &lt;em&gt;welcome page&lt;/em&gt;, then the &lt;em&gt;game&lt;/em&gt; starts and after the timer goes out (or the player vaccinate all the population), it has two possible endings, they will &lt;em&gt;win&lt;/em&gt;, or &lt;em&gt;lose&lt;/em&gt;. These steps are what we called "sections" here.&lt;/p&gt;

&lt;p&gt;To manage these sections, I chosen the &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt; javascript library to handle activating (showing) and deactivating (hiding) each section whenever we need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-start-to-get-interesting"&gt;
  &lt;/a&gt;
  Things start to get interesting
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our environment properly set up, we can start talking about the game itself. In a simplistic overview, to work with Canvas we need two main things: a &lt;em&gt;canvas HTML tag&lt;/em&gt; and a &lt;em&gt;javascript function&lt;/em&gt; that will be pointed as our &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; handler, that will create a 2D context allowing us to draw some shapes onto the canvas. And what does this &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; function do exactly?!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; is the method from Web API that tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation [...]"&lt;/em&gt; _ by &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now a non-technical explanation: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It calls a function over and over again for literally every single frame, and this function will draw an updated image onto the canvas with minor differences from the previous frame, simulating the idea of movement."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's do this at our Game component. We create a canvas HTML tag and a VueJS method called &lt;strong&gt;animate()&lt;/strong&gt;, and the first thing this method does is to "request-animation-frame" pointing itself as the argument so this function can be called for every frame.&lt;/p&gt;

&lt;p&gt;This is the initial setup for all canvas development. From now on we can start looking at our project specifically, but all the concepts that will be detailed here can be applied to different scenarios.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#population-grid"&gt;
  &lt;/a&gt;
  Population grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may have noticed, we will need to create a grid to display the population, with lines and columns. At this point, we need to start talking about the basics of what we can draw on a canvas.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;draw()&lt;/strong&gt; function that we talked about earlier receive as the first argument a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes"&gt;rendering context&lt;/a&gt;, this context is an object with properties and methods that you can use to render graphics inside the canvas element, such as Lines (that can be curved or straight) and Circles. For our game, these are the only two shapes we will be using - since the game is &lt;em&gt;a bunch of lines and circles&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We already have the canvas width and the height values that we used to style it. But now, to create a grid system, we just need to use the power of math to get the starting-point and the ending-point for each line and column. These points are specified as coordinates related to the top side (X-axis) and left side (Y-axis) of the canvas, and that's the part where we start looking at the canvas as a Cartesian Coordinate System that will guide us throughout the next steps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-person"&gt;
  &lt;/a&gt;
  Create a person
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most interesting parts. As we already defined as the game scope, every person has a predefined (and identical) way to behave and interact with each other, but here is a reminder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"[...] Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. [...]"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we have a situation like this, the best decision to make is to deal with Classes - where a single structure can have multiple instances.&lt;/p&gt;

&lt;p&gt;Now we can create a javascript class named "Person" in a separated javascript file that will be imported into the Game component. Initially, the class must have at least two things, a &lt;strong&gt;constructor()&lt;/strong&gt;, and a &lt;strong&gt;draw()&lt;/strong&gt; method. The constructor will receive the initial values for each variable the person will need, such as coordinates where it will be placed at the canvas, the current state ("healthy", "infected" or "vaccinated"), what neighbors it will spread the disease when and if infected, the spreading speed, and so on...&lt;/p&gt;

&lt;p&gt;At this &lt;strong&gt;draw()&lt;/strong&gt; method we must create the shapes that will form the face, and this "face" consists of three simple elements (the head, left eye, right eye, and mouth). And since we received the center coordinates for the person at the &lt;strong&gt;constructor()&lt;/strong&gt;, we can again use the power of math to draw all three elements and place them related to this center point.&lt;/p&gt;

&lt;p&gt;It's important to detail here that some aspects of the face will vary based on the person's state property, like the color that will be &lt;em&gt;blue&lt;/em&gt; for healthy people, &lt;em&gt;red&lt;/em&gt; for infected people, and &lt;em&gt;yellow&lt;/em&gt; for the vaccinated ones.&lt;/p&gt;

&lt;p&gt;For now, we must also have in mind that all the population will be instantiated from the Game component, once we have a basic structure for it to work. In fact, thats exactly the next step...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#populate-grid-with-54-people"&gt;
  &lt;/a&gt;
  Populate grid with 54 people
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the Person class has a simple structure, we can instantiate the population at the Game component. This process will take a bit to finish since this is the moment we need to define no only the center coordinates for each person, but also randomly define the directions it's going to infect its neighbors and randomly define the spreading speed for each "disease arm". &lt;/p&gt;

&lt;p&gt;For this logic to be simulated with javascript, we can use &lt;strong&gt;Math.random()&lt;/strong&gt; method to create a random value from 0 to 1 and pass this value to the Person class.&lt;/p&gt;

&lt;p&gt;There is also one thing that must be clear here. If you recall one detail of the game scope, each person will be able to infect their neighbors by trying to infect them once the disease has reached them. The mechanic behind it is simple: "if the disease arm reaches the neighbor, and it's not vaccinated yet, the neighbor will turn into an infected individual". To create this logic, two things will be needed: the first is that at the Person class we will create a function able to try to infect the current person, and the second thing is that for each person of the population we will need to store the instances of its surrounding neighbors so we can trigger this &lt;strong&gt;tryToInfect()&lt;/strong&gt; method once the disease reaches them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disease-spreading"&gt;
  &lt;/a&gt;
  Disease spreading
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mathematics starts to have a bigger role here. If you ever thought that you would never use the Pythagorean Theorem in your life, I'll try to convince you otherwise. Looking to a single person, they can try to infect their neighbors in 8 different directions (&lt;em&gt;top&lt;/em&gt;, &lt;em&gt;top-right&lt;/em&gt;, &lt;em&gt;right&lt;/em&gt;, &lt;em&gt;bottom-right&lt;/em&gt;, &lt;em&gt;bottom&lt;/em&gt;, &lt;em&gt;bottom-left&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top-left&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;This article wont turn into an Algebra class, but if you think about it for long enough you will start to see some triangles being formed to define all the 8 arms of the disease related to the center of the face and two close neighbors. The principle that needs to be mentioned is that for each one of these arms we must have stored all the way-points between the center and neighbor's edge in an array so we can control the arm movement and its speed until it reaches the neighbor and try to infect them. And to accomplish that, there isn't much we can do besides applying some algebra formulas to get and store the values.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deliver-the-vaccine-to-the-population"&gt;
  &lt;/a&gt;
  Deliver the vaccine to the population
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to create the &lt;em&gt;interaction&lt;/em&gt; that will wait for the player to click/tap at some person, and the &lt;em&gt;behavior&lt;/em&gt; to apply the vaccine that will be triggered with this &lt;em&gt;interaction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First I created a method at the Person class called &lt;strong&gt;applyVaccine()&lt;/strong&gt;. The idea behind it is also simple: "if the person is not 'infected', change its state to 'vaccinated'".&lt;/p&gt;

&lt;p&gt;After creating this method we can create the event listener to wait for the player's interaction to trigger the &lt;strong&gt;applyVaccine()&lt;/strong&gt; method. The trigger can be built receiving the coordinates from the mouse position related to the canvas element, and these coordinates must be compared with the existing center point from every person instantiated. And if the difference between these two points is smaller than the radio of the head circle, the player clicked at a person.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sound-effects-and-scoreboard"&gt;
  &lt;/a&gt;
  Sound Effects and Scoreboard
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are getting to the end. Now we reached a point where the "soul of the game" is already created, the main &lt;em&gt;interactions&lt;/em&gt; (witch are the functions we've defined at the Game component) and &lt;em&gt;behaviors&lt;/em&gt; (which are the methods created at the Person class), we can focus some effort at the smaller things, such as the scoreboard, the timer, and sound effect management.&lt;/p&gt;

&lt;p&gt;We stored all instances of the Person class, and with this list we can easily retrieve the current state of each one of them, calculate its percentage, and display it on the Scoreboard. It's always important to remember that for all functions that we want to run for each frame, it must be executed at the &lt;strong&gt;animate()&lt;/strong&gt; method, and with the Scoreboard update, it's no different.&lt;/p&gt;

&lt;p&gt;Sounds effects can be easily implemented using &lt;a href="https://www.npmjs.com/package/howler"&gt;Howler.js&lt;/a&gt;, an awesome library able to manage mp3 files in a reliable way across all platforms. It works in a similar way as &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt;, we instantiate the audios, and play/pause/restart them whenever it's needed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Working with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; usually requires more than we initially think, but between all the math, rules, and exceptions we create, the logic of the game can be found as a simple and straightforward storyline, just like it was described at the beginning of this post.&lt;/p&gt;

&lt;p&gt;As it was mentioned before, I created this game in particular as a stand-alone project with the idea to introduce new developers to canvas development. Trying to accomplish that, the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;⭐ GitHub Project ⭐&lt;/a&gt; is full of comments for every function, method, code block, and property that needs guidance describing what it does. With these comments, the whole story I told here can also be found in javascript language right there.&lt;/p&gt;

&lt;p&gt;When looking for the final project I wouldn't say it was easy to develop, there were a ton of problems along the way, crashes, conflicts, things that I initially had no idea how to fix, but as I said at an old article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Start from the basics, recognize how the next step looks like, and work on it. Problems are inevitable and that's what makes each project unique in some way, and winning these small battles is one of the things that motivate us to go to the next one."&lt;/em&gt; _ from &lt;a href="https://dev.to/claudiobonfati/what-if-linkedin-was-beautiful-23go"&gt;What if LinkedIn was beautiful?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all, everyone. If you made this far, congratulations, and thank you for reading. And also, feel free to &lt;a href="https://www.linkedin.com/in/claudiobonfati/"&gt;connect with me&lt;/a&gt; on LinkedIn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>vue</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The History Of JavaScript ⌛</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Tue, 22 Jun 2021 23:35:48 +0000</pubDate>
      <link>https://dev.to/mr_victor/the-history-of-javascript-1fp3</link>
      <guid>https://dev.to/mr_victor/the-history-of-javascript-1fp3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nowadays JavaScript is everywhere 🌍&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello 👋, Beautiful Coders on the internet 😃. In this article, I would share with you a quick yet comprehensive overview of how the most popular and widely used programming language in the world evolved to be what it is today.&lt;/p&gt;

&lt;p&gt;Over the years JavaScript has become the most popular and versatile programming language. Powering over 97% of the web. As a web developer knowing the history of the most popular and in-demand programming language is a plus that will help enhance your understanding of the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1995-the-birth-of-javascript"&gt;
  &lt;/a&gt;
  1995: The Birth of JavaScript
&lt;/h3&gt;

&lt;p&gt;Back in May 1995, the internet was becoming popular. The web back then was just static pages that were often text-heavy and ugly 😌.&lt;/p&gt;

&lt;p&gt;the best ones had images floated to the left or right. Not exciting when you compare it to the web today 🤔&lt;/p&gt;

&lt;p&gt;The Web needed to be more dynamic. Animations, interactions, and other forms of small automation needed to be the future of the web. To achieve that future the web needed a scripting programming language that ran in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt; a programmer at Netscape was given the job to make this possible and in just ten days he created the JavaScript programming language (originally called Mocha during its development and then changed to LiveScript )&lt;/p&gt;

&lt;p&gt;On December 4, 1995, the internet saw the first release of the JavaScript programming language&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1996-javascript-vs-java"&gt;
  &lt;/a&gt;
  1996: JavaScript vs. Java
&lt;/h3&gt;

&lt;p&gt;Shortly after its release its name was changed from LiveScript to JavaScript. Many say the reason for the change was to attract developers of another buzzed programming language that was very popular at the time. Which was Java.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The "Java" in JavaScript was just for marketing reasons only 💡.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because the language itself JavaScript has nothing to do with Java! ☝&lt;/p&gt;

&lt;p&gt;Java is a statically typed, compiled programming language, on the other hand. (vanilla) JavaScript is dynamically typed, and interpreted at run-time. check this &lt;a href="a%0Ahref=%22https://www.javatpoint.com/difference-between-java-and-javascript%22"&gt;article &lt;/a&gt;for more concise details on the differences btw Java and JavaScript&lt;/p&gt;

&lt;p&gt;Many beginners intertwine the two languages as one 👀. But no. JavaScript and Java are actually two complete different programming languages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1997-ecmascript-is-born-as-the-javascript-standard"&gt;
  &lt;/a&gt;
  1997: ECMAScript Is Born As The JavaScript Standard
&lt;/h3&gt;

&lt;p&gt;A year later, in 1997. JavaScript had experienced rapid growth as many developers adopted the language and more browsers started adding JavaScript support. It became clear that the language would need to be properly maintained and managed. Therefore Netscape and the developers of the language submitted the JavaScript programming language to the standards organization &lt;a href="a%0Ahref=%22https://www.ecma-international.org%22"&gt;European Computer Manufacturers Associate (ECMA) International&lt;/a&gt; a Swiss organization to define international standards for computing. For consideration as the industry standard.&lt;/p&gt;

&lt;p&gt;a technical committee at EMCA known as &lt;a href="https://tc39.es/"&gt;TC39&lt;/a&gt; is the organization behind the standardization of the ECMAScript (JavaScript) specification. The TC39 committee is a group of JavaScript developers, implementers, academics, and more from different companies including Google, Microsoft, Netflix, Facebook, and Paypal. Their job is for creating, approving, and denying language features, to maintain and evolve the definition of JavaScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" alt="tc39.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with that, the first standard version of the JavaScript language that was supported across all browsers ~ ECMAScript 1 or commonly known as ES1 was released&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2009-es5"&gt;
  &lt;/a&gt;
  2009: ES5
&lt;/h3&gt;

&lt;p&gt;In 2009 the JavaScript version ES5 (ECMAScript 5) was released with a lot of new major features like JSON support, Getters &amp;amp; Setters on Objects, new array methods like forEach and map that were not yet wildly supported among different browsers. as a result, it took some years for browsers to support these features.  &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#as-a-web-developer-you-must-understand-es5-why"&gt;
  &lt;/a&gt;
  As a Web developer, you must understand ES5, why? 👇
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;ES5 is the standard version of JavaScript Programming, as it is fully supported in all major browsers i.e internet explorer.&lt;/li&gt;
&lt;li&gt;Many &lt;code&gt;(old)&lt;/code&gt; codebases are still written in ES5.&lt;/li&gt;
&lt;li&gt;it's better and easier to learn the fundamentals in ES5, and then update to ES6 and ESNext.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2015-anticipated-update-of-the-year-es6es2015"&gt;
  &lt;/a&gt;
  2015: Anticipated Update of the year ~ ES6/ES2015
&lt;/h3&gt;

&lt;p&gt;In June 2015, the much-awaited and anticipated version of the language 😄 &lt;strong&gt;ES6&lt;/strong&gt; was released &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" alt="Its Like The Album Of The Year&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which was &lt;strong&gt;the biggest update to the language ever!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ES6 brought new syntax and awesome features to make your code more modern and readable. It allows you to write less code and do more. ES6 introduces many great features like arrow functions, template literals, classes, destructing, Modules… and more.&lt;/p&gt;

&lt;p&gt;This was(is) a really big deal for the whole JavaScript community.&lt;/p&gt;

&lt;p&gt;Ever since the major 2015 ES6 release, The TC39 committee changed to an annual release cycle. This means a new version of JavaScript with just a few new features is released every year. Instead of shipping a huge new version, with a ton of features every couple of years 😔.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-esnext"&gt;
  &lt;/a&gt;
  What’s next? ESNext
&lt;/h3&gt;

&lt;p&gt;ESNext is the name that indicates the next version of JavaScript(ECMAScript) that is to be released.&lt;/p&gt;

&lt;p&gt;As of the time of writing, the current ECMAScript version is ES2020(ES11). It was released in June 2020.&lt;/p&gt;

&lt;p&gt;It is usually common for JavaScript editions to be standardized during the summer, so we can expect ECMAScript 2021(ES12) to be released this summer 😉.&lt;/p&gt;

&lt;p&gt;At the time of writing, ES2020(ES11) has been released, and ESNext is ES2021(ES12)&lt;/p&gt;

&lt;p&gt;Proposals to the ECMAScript standard are organized in stages. Stages 1–3 are an incubator of new features, and features reaching Stage 4 are finalized as part of the new standard.&lt;/p&gt;

&lt;p&gt;At the time of writing we have several features at Stage 4. The latest versions of the major browsers should already implement most of those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-javascript"&gt;
  &lt;/a&gt;
  Types of JavaScript
&lt;/h3&gt;

&lt;p&gt;In the industry, you often hear terms like vanilla or plain JavaScript. It’s just how developers refer to JavaScript without any frameworks or libraries. We know that ECMAScript 2015 or ES6 is the standard version of vanilla JavaScript. But JavaScript also comes in other forms for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" alt="typescript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; was created by Microsoft, it’s a strict syntactical superset of JavaScript, and adds optional static typing to the language. The browser cannot understand a file written in Typescript so it needs to be compiled into standard JavaScript code so it can run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" alt="coffee-script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; adds syntax sugar to JavaScript that makes it in an effort to enhance JavaScript’s brevity and readability. Its also not understood by rowsers and needs complied into standard JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" alt="dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dart.dev/"&gt;Dart&lt;/a&gt; is an object-orientated JavaScript language made by Google. Dart is used to create highly complex and easily scalable apps for the web, mobiles. Dart has been approved by ECMA like vanilla JavaScript. Dart uses a different syntax than vanilla JavaScript but it can be translated into vanilla so it can be used in a browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" alt="nodejs"&gt;&lt;/a&gt;&lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; is a cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command-line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" alt="reactjs"&gt;&lt;/a&gt;&lt;a href="https://reactjs.org%0A"&gt;React&lt;/a&gt; is a JavaScript front-end library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React is mainly used as a base in the development of single-page or mobile applications. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" alt="jquery"&gt;&lt;/a&gt;&lt;a href="https://jquery.com/"&gt;Jquery&lt;/a&gt; was made to simplify JavaScript making it easier to learn. It takes a lot of common JavaScript tasks that need lots of code to write in vanilla and wrap them into a single line. The Jquery contains features like DOM traversal and manipulation, event handling, Animation, and even Ajax. Jquery doesn’t need to be compiled and will run in all major browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-is-javascript-today"&gt;
  &lt;/a&gt;
  Where is JavaScript Today
&lt;/h3&gt;

&lt;p&gt;Although the origins of JavaScript started in the web browser, it has now evolved beyond that to become a multi-platform language. Supporting all major paradigms of programming.  &lt;/p&gt;

&lt;p&gt;The most common place you’ll encounter JavaScript is on the web. Developers now use JavaScript to make websites more engaging with things like 3D graphics, animations, transitions, and more. It’s also possible to build native mobile apps that run both on iOS and Android using JavaScript.&lt;/p&gt;

&lt;p&gt;frameworks like React &amp;amp; Ionic. You can even find JavaScript in Desktop applications like the text editor Visual Studio Code 😏 and popular messaging apps like Slack. It can be used to control hardware with IoT devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;I hope this article helped you. Now you have a nice overview of the history/ evolution of the most popular programming language of the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a topic that could come up in an interview 🤷‍♂️, so yeah it's worth knowing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to chat or have any questions, drop them in the comments I’m always happy to talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you learned something new from this, Thanks so much for reading!! ❤ And keep on coding! 👨‍💻.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed reading this as much as i enjoyed writing it for you? 😍&lt;/strong&gt;. support me with a coffee 😃&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJz-zci7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520Coffee%2520%25E2%2598%2595%2520%26emoji%3D%25F0%259F%258D%25A6%26slug%3Dmolipa%26button_colour%3D40DCA5%26font_colour%3Dffffff%26font_family%3DComic%26outline_colour%3D000000%26coffee_colour%3DFFDD00" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VectorIkechukwu"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOwp8amL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Follow%2520me%2520on%2520Twitter-1877F2%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite" alt="Follow me on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>developers</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Day 7 of #100DaysOfCode!
</title>
      <author>Christian Falucho</author>
      <pubDate>Tue, 22 Jun 2021 23:25:14 +0000</pubDate>
      <link>https://dev.to/cfalucho/day-7-of-100daysofcode-2ek7</link>
      <guid>https://dev.to/cfalucho/day-7-of-100daysofcode-2ek7</guid>
      <description>&lt;h3&gt;Today's progress&lt;/h3&gt;

&lt;p&gt;Today I learned about functional programming.&lt;/p&gt;

&lt;h3&gt;What I learned&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Functional programming&lt;/em&gt; is a style of programming in which solutions are simple. A function takes an input, processes it and returns an output. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Three important factors of functional programming:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Isolated function - does not depend on outside variables (global variables)&lt;/li&gt;
&lt;li&gt;Pure functions - same input always give the same output&lt;/li&gt;
&lt;li&gt;Function has limited side effects - this means any changes or mutations is controlled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This allows for greater control, less mutation or changing of variables and objects.&lt;/p&gt;

&lt;p&gt;For instance, let's say we have a global variable called &lt;code&gt;animals&lt;/code&gt; and stores an array of different animals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eagle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cheetah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create two functions. One function adds a new animal and the other function removes an animal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// adds an animal to arr&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animalName&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// make a copy of the array of animals&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;// push new animal to new arr&lt;/span&gt;
    &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// return the new array&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// removes an animal from arr&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animalName&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//make a copy of the array of animals&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;// grab the index of the animal name&lt;/span&gt;
    &lt;span class="c1"&gt;// store into variable&lt;/span&gt;
    &lt;span class="nx"&gt;animal_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// if the animal's index exist&lt;/span&gt;
    &lt;span class="c1"&gt;// remove it, use splice&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// return the new array&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice in the above code that we created two functions and in both functions take &lt;em&gt;two parameters&lt;/em&gt;. The first parameter is the array and the second parameter takes in a &lt;em&gt;string&lt;/em&gt; animal.&lt;/p&gt;

&lt;p&gt;Inside the functions we added a line of code that makes a copy of the global array by passing it through our function argument &lt;code&gt;function add(arr, animalName)&lt;/code&gt; and &lt;code&gt;function remove(arr, animalName)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when I test this using the functions above. I will get one function that adds a new animal and the other function that removes an animal from the array all without mutation the original array.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;function add(arr, animalName)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addAnimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: ['lion', 'eagle', 'cheetah', 'bear', 'giraffe', 'monkey']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;function remove(arr, animalName)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removedAnimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removedAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: ['eagle', 'cheetah', 'bear', 'giraffe']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I run a &lt;code&gt;console.log&lt;/code&gt; on the global variable animals from earlier. The global variable did not change at all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eagle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cheetah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: ['lion', 'eagle', 'cheetah', 'bear', 'giraffe']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the benefit of using functional programming as a way to copy the global variable within the scope of the function. Then from there can mutate or change it without affecting the global variable and thus returning a new copy of the variable or object.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Selection sort algorithm </title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 22 Jun 2021 23:21:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</link>
      <guid>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-selection-sort"&gt;
  &lt;/a&gt;
  Definition of selection sort
&lt;/h2&gt;

&lt;p&gt;Selection sort is one of the simplest sorting algorithms, it works by continually finding the minimum number in the array and inserting it at the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity"&gt;
  &lt;/a&gt;
  Space and Time complexity
&lt;/h2&gt;

&lt;p&gt;The time complexity of selection sort is &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; and it's space complexity is &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-sort-algorithm"&gt;
  &lt;/a&gt;
  Selection sort algorithm
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;itertate from 0 to len(arr) - 1 &lt;/li&gt;
&lt;li&gt;seting to minimunIdx variable the first element index in the unsorted part &lt;/li&gt;
&lt;li&gt;loop trough the unsorted part&lt;/li&gt;
&lt;li&gt;if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j&lt;/li&gt;
&lt;li&gt;swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-python"&gt;
  &lt;/a&gt;
  Implementation of selection sort using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selectionSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ] =&amp;gt; Selecion sort
        [ type ] =&amp;gt; Sorting algorithms
        [ time complexity ] =&amp;gt; O(n^2)
        [ space complexity ] =&amp;gt; O(1)
        [ params ] =&amp;gt; ( arr {list} array to sort )
        [ return ] =&amp;gt; sorted list
        [ logic ]  =&amp;gt; (
                1. itertate from 0 to len(arr) - 1 
                2. seting to minimunIdx variable the first element index in the unsorted part 
                3. loop trough the unsorted part
                4. if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j
                5. swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])
        )
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# itertate from 0 to len(arr) - 1 
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# setting to minimunIdx variable the first element index in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="c1"&gt;# loop trough the unsorted part
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="c1"&gt;# if arr[j] &amp;lt; currentMinimum (arr[minIdx])
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="c1"&gt;# minIdx will be the index of the new minimum
&lt;/span&gt;                &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
        &lt;span class="c1"&gt;# swaping the minimum with the first element in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-javascript"&gt;
  &lt;/a&gt;
  Implementation of selection sort using javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * sort an array using selection sort algorithm
 * time complexity : O(n^2)
 * space complexity : O(1)
 * @param {Array} arr  array to sort
 * @returns {Array} sorted array
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectionSortAlgorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// iterate from 0 to arr.length - 1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//  setting to minimunIdx variable the first element index in the unsorted part&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//  loop trough the unsorted part&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//  if arr[j] &amp;lt; currentMinimum (arr[minIdx])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// minIdx will be the index of the new minimum&lt;/span&gt;
                &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// swaping the minimum with the first element in the unsorted part&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h2&gt;

&lt;p&gt;sort an array in descending order using the selection sort algorithm&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-program-for-selection-sort/"&gt;https://www.geeksforgeeks.org/python-program-for-selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/dsa/selection-sort"&gt;https://www.programiz.com/dsa/selection-sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/22898928/selection-sort-in-javascript"&gt;https://stackoverflow.com/questions/22898928/selection-sort-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EnodMqJuQEo"&gt;https://www.youtube.com/watch?v=EnodMqJuQEo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/selection-sort/"&gt;https://www.geeksforgeeks.org/selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xWBP4lzkoyM"&gt;https://www.youtube.com/watch?v=xWBP4lzkoyM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day :)&lt;br&gt;
#day_9&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>The one about JS fundamentals -  WEEK 1</title>
      <author>iqraraza</author>
      <pubDate>Tue, 22 Jun 2021 22:29:51 +0000</pubDate>
      <link>https://dev.to/iqraraza/the-one-about-js-fundamentals-week-1-2hdb</link>
      <guid>https://dev.to/iqraraza/the-one-about-js-fundamentals-week-1-2hdb</guid>
      <description>&lt;p&gt;WEEK 1 &lt;/p&gt;

&lt;p&gt;Shock to the system. All in all, there was probably 30 minutes worth of info that I was comfortable with..everything else was all new territory. Excitement, fear, self questioning, tears, self gratification....every emotion on the planet was experienced this week. I was struggling to find my feet. &lt;/p&gt;

&lt;p&gt;Exposure to Github, collaborating with others, using Vscode, RegEx and Array methods were the main topics covered. &lt;a href="http://www.w3schools.com"&gt;www.w3schools.com&lt;/a&gt; was my best friend resource. &lt;/p&gt;

&lt;p&gt;My first unforgettable experience was the first time I did pair programming. I was a nervous wreak as its something I had never experienced before. We ended up having to call in a tutor, not for coding issues but how to even get zoom going. Neither one of us knew how to screen share. Embarrassing but funny. Well, you’ve got to start somewhere I  guess and my partner was super super nice. &lt;/p&gt;

&lt;p&gt;Also I've had to make peace with the fact that its expected (for myself anyway) that the first hurdle is always going to be a setup issue. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>beginners</category>
      <category>vscode</category>
    </item>
  </channel>
</rss>
