<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10+ CSS BORDER ANIMATION EXAMPLE</title>
      <author>mike</author>
      <pubDate>Wed, 14 Apr 2021 20:27:30 +0000</pubDate>
      <link>https://dev.to/mike37/10-css-border-animation-example-4jjf</link>
      <guid>https://dev.to/mike37/10-css-border-animation-example-4jjf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        1. Title:-CSS Border transitions
           Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/yYBpVY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        2.Title:-Button Hover States
          Author:-James Power
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Snazzy CSS hover states for a button.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thejamespower/embed/OVNYLL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  3.Title:-Colorful CSS Buttons
          Author:-Chris Deacy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A collection of various types of CSS buttons in various colors.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/chrisdothtml/embed/waKBdM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         4.Title:-Animated CSS Gradient Border
           Author:-Mike Schultz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mike-schultz/embed/NgQvGO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         5.Title:-Imperfect Buttons
           Author:-Tiffany Rayside
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/tmrDevelops/embed/VeRvKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         6. Title:-Sass button border hover effect mixin
            Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/xdXpJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         7. Title:-border-animation-css
            Author:-Swarup Kumar Kuila
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;border-animation-css is create only in use of css.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/RBByzW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         8. Title:-SVG Border Animation 1
            Author:-Zach Saucier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZachSaucier/embed/kyGqm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         9. Title:-[PURE CSS] border animation without svg
            Author:-Rplus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;single element animation icon~&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Rplus/embed/lEDBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          10.Title:-Border animation
             Author:-Inderpreet Singh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Border animation&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Inderpreet23/embed/rLzbLk?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         11.Title:-Button Border Hover Effects
            Author:-Sarath AR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sarath-ar/embed/dMKxxM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         12.Title:- CSS-only border animation
            Author:-Danny Joris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;CSS-only border animation on hover. It needs a solid background in order to work.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/DannyJoris/embed/BrMgza?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Random numbers in CSS? Really? 🎲🤔</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 14 Apr 2021 20:26:05 +0000</pubDate>
      <link>https://dev.to/thormeier/random-numbers-in-css-really-569o</link>
      <guid>https://dev.to/thormeier/random-numbers-in-css-really-569o</guid>
      <description>&lt;p&gt;I just read &lt;a href="https://dev.to/inhuofficial/a-pure-css-password-generator-they-said-it-can-t-be-done-4pla"&gt;this awesome post by inhuofficial&lt;/a&gt; about a random password generator written in pure CSS. It follows a similar approach as some other pure CSS random number generators out there. Most of them use differently timed animations to "shuffle" the state. The user interacts with it by pausing the animations and voila: A seemingly random number. A really clever approach.&lt;/p&gt;

&lt;p&gt;And it got me thinking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-even-is-random"&gt;
  &lt;/a&gt;
  What even &lt;em&gt;is&lt;/em&gt; "random"?
&lt;/h1&gt;

&lt;p&gt;"Random", as I would define it, describes an action with a non-determinable result. That doesn't necessarily mean that the result is not deterministic (think, it could be determined in theory, but nobody can). Let's have a look at a simple way to generate a random result: A coin flip.&lt;/p&gt;

&lt;p&gt;If you flip a coin a gazillion times, the result will be roughly 50% heads and 50% tails. That seems random. But is it really? Seemingly so, we can't possibly measure all the variables that influence if it's heads or tails, right? But what if we could? If we knew all the preconditions, like, &lt;em&gt;all&lt;/em&gt; of them? Position and velocity of every single air molecule in the room, the body temperature of the person flipping the coin, size and weight of the coin, fluctuations in Earth's gravity, whatever you can think of. Would we be able to predict the outcome? I think: Most likely, yes.&lt;/p&gt;

&lt;p&gt;And there's the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#classical-computers-and-electricity"&gt;
  &lt;/a&gt;
  Classical computers and electricity
&lt;/h1&gt;

&lt;p&gt;At their very foundation, computers work with electricity. Electricity either flows (&lt;code&gt;1&lt;/code&gt;) or it doesn't (&lt;code&gt;0&lt;/code&gt;). When you wire a few billion transistors together the right way, they can do mathematics and other amazing things, but they still represent this logic of 0 and 1. If you apply the same current to the same parts, the result will be the same.&lt;/p&gt;

&lt;p&gt;So, how can this construct generate random numbers? Unless there's a special physical part wired in as well, it can't. That's why the "random" numbers generated by computers, are either &lt;a href="https://hackaday.com/2019/12/09/generating-random-numbers-with-a-fish-tank/"&gt;generated with a fish tank&lt;/a&gt; or they're so-called "pseudo-random" numbers: They only seem to be random, but are actually deterministic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudorandom-numbers"&gt;
  &lt;/a&gt;
  "Pseudo-random" numbers
&lt;/h1&gt;

&lt;p&gt;So, essentially, the people coming up with pure CSS random number generators ran into the same problems a lot of people did before them when implementing random number generators like &lt;code&gt;/dev/random&lt;/code&gt; or &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's no surprise: Generating pseudo-random numbers is its own field of research, actually. According to Wikipedia, there's four different criteria that measure the quality of a pseudo-random number generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Probability of two randomly generated sequences to be different.&lt;/li&gt;
&lt;li&gt;Being indistinguishable from actual random numbers. This is tested with some predefined statistical tests.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any previously generated number.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any internal state of the generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some pseudo-random number generators rely on the unix timestamp, some may rely on CPU temperature, a hash of the current state of the memory and some constant. They function much like the coin flip: They add dozens of variables to make the result look more and more random, even though it never truly becomes random.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In summary
&lt;/h1&gt;

&lt;p&gt;When I looked for CSS-only random number generators, I often read the sentence "they're not real random numbers" or I even saw references to the &lt;a href="https://xkcd.com/221/"&gt;XKCD comic about random number generators&lt;/a&gt;, but I think those people are a bit unfair to their own achievements. Those generators are as good as it gets with the tools CSS offers. We're dealing with machines that need to be deterministic. Unless there's a possibility to measure quantum weirdness, take photos of fish tanks or measure the light of distant stars flickering in the atmosphere with pure CSS, the numbers that can be generated with CSS will remain pseudo-random. &lt;/p&gt;

&lt;p&gt;And that's OK.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ❤️ &lt;em&gt;or a&lt;/em&gt; 🦄&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ☕&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; 🐦&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>random</category>
    </item>
    <item>
      <title>My First Personal Site! 📣</title>
      <author>fentybit</author>
      <pubDate>Wed, 14 Apr 2021 20:23:29 +0000</pubDate>
      <link>https://dev.to/fentybit/my-first-personal-site-4m20</link>
      <guid>https://dev.to/fentybit/my-first-personal-site-4m20</guid>
      <description>&lt;p&gt;I can not believe that I have 2 months left with Flatiron School, and hopefully by then I can officially call myself a Full-Stack Software Engineer. 👩🏻‍💻&lt;/p&gt;

&lt;p&gt;Aside from revamping my resume, I have been working on building my personal site. After weeks of debating if I should be building from scratch or not, I decided to deploy my first portfolio site from a ready-made HTML5 template. I can always refine my portfolio site later as I develop more skills, and eventually design my own UI components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Point&lt;/strong&gt;&lt;br&gt;
Not sure where to start, I looked for advice from &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I found this tutorial of &lt;a href="https://www.freecodecamp.org/news/how-to-put-a-website-online-guide-to-website-creation-custom-domain-and-hosting/"&gt;How to Put a Website Online&lt;/a&gt;, and it was extremely useful in providing guidance for someone (like me) who has no knowledge on buying a custom domain, hosting and outsourcing a template. I had fun perusing through &lt;a href="https://pixelarity.com/"&gt;Pixelarity&lt;/a&gt; where you can browse HTML responsive template designs. Basic skills required include HTML, CSS and JavaScript. The next step was trying to figure out my custom domain. Funny thing, this effort frustrates me the most, and I could not make up my mind. Long story short, I ended up re-branding myself to &lt;code&gt;@fentybit&lt;/code&gt;, and settled on &lt;code&gt;fentybit.me&lt;/code&gt;. I love numbers, and hence, &lt;code&gt;bit&lt;/code&gt; or binary digit. Then, I mulled over &lt;code&gt;.dev&lt;/code&gt; and &lt;code&gt;.me&lt;/code&gt; for quite some time. I learned from &lt;a href="https://medium.engineering/use-a-dev-domain-not-anymore-95219778e6fd"&gt;other developers and their thoughts on &lt;code&gt;.dev&lt;/code&gt; domain&lt;/a&gt;, and I settled on &lt;code&gt;.me&lt;/code&gt;. I want my site to personally share who I am and what I am, in the most minimalistic way. I am glad the custom domain was still available. Thank you &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalize your Site&lt;/strong&gt;&lt;br&gt;
Personalizing HTML/CSS attributes and content delivery took most of my time, but Pixelarity made it so effortless! If there is anything new, it would be trying to link my &lt;em&gt;contact&lt;/em&gt; page so other devs can communicate back to me. &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt; provides this service. I only need to submit their API to my front-end code, and they take care of the rest. 📝&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Namecheap &amp;amp;&amp;amp; Netlify&lt;/strong&gt;&lt;br&gt;
While there are a lot of hosting providers such as Bluehost, GoDaddy, Hostinger, DreamHost and so on, you can always get free ones from either &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; or &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;. I had success initially deploying with GitHub pages, though my site resulted being &lt;em&gt;"Not Secure"&lt;/em&gt; on Chrome. I made another attempt on setting up my domain with Namecheap and Netlify. Starting with Namecheap to configure the DNS settings &amp;gt; &lt;strong&gt;Manage&lt;/strong&gt;. Under &lt;strong&gt;Nameservers&lt;/strong&gt; category, I had to update from &lt;strong&gt;Namecheap Basic DNS&lt;/strong&gt; to &lt;strong&gt;Custom DNS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reroute to my Netlify &lt;strong&gt;Domain Settings&lt;/strong&gt; real quick to add my custom domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step would be to select &lt;strong&gt;Set Up Netlify DNS&lt;/strong&gt;. I would need to acquire &lt;em&gt;a list of Nameservers&lt;/em&gt; from Netlify and propagate on Namecheap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy all of &lt;em&gt;Netlify's DNS servers&lt;/em&gt; to &lt;em&gt;Namecheap Nameservers&lt;/em&gt;, and click the green check button to save this setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I was not able to figure out the SSL/TLS certificate with GitHub pages, I learned Netlify will provision &lt;em&gt;Let's Encrypt&lt;/em&gt; certificate automatically once the DNS configuration on the custom domain pointing to Netlify's servers. Namecheap suggests revisiting your site in 24 - 48 hours once Netlify's DNS fully propagated.&lt;/p&gt;




&lt;p&gt;It's official. Now I have a personal site! 💥&lt;br&gt;
Check out &lt;a href="https://fentybit.me/"&gt;https://fentybit.me/&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Talk Notes: "Implicit to Explicit: Decoding Ruby's Magical Syntax" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 20:12:26 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Implicit to Explicit: Decoding Ruby's Magical Syntax' by &lt;a href="https://twitter.com/railsonmaui"&gt;Justin Gordon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Ruby's implicitness makes it great for readability and DSLs. But that also gives Ruby a "magical" syntax compared to JavaScript. In this talk, let's convert the implicit to explicit in some familiar Rails code. What was "magic" will become simple, understandable code.&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;:  I feel this talk was much more about pry and I am blown away by Justin's 🔥 &lt;code&gt;~/.pryrc&lt;/code&gt; 🔥 (see &lt;a href="#read-more"&gt;below&lt;/a&gt; ) and the ease it introduces into debugging 💕 I loved this talk, and Justin's way of calm and kind explaining complex concepts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DSL: Domain-Specific Language&lt;/li&gt;
&lt;li&gt;Rails leverages Ruby's implicitness:

&lt;ul&gt;
&lt;li&gt;self&lt;/li&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;parentheses&lt;/li&gt;
&lt;li&gt;much more&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Can we learn to read Ruby code like the Ruby interpreter?

&lt;ul&gt;
&lt;li&gt;ideally, you should understand the code, not just copy-paste&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;🔥 🔥 🔥 OMG Justin's pry demo is a must-watch! I need to re-watch it and code along 🔥 🔥 🔥 &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#js-vs-ruby"&gt;
  &lt;/a&gt;
  JS vs Ruby
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JS is very explicit: 

&lt;ul&gt;
&lt;li&gt;you need the parentheses for function invocations; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is rarely implicit;&lt;/li&gt;
&lt;li&gt;explicit return in standard functions;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ruby is &lt;em&gt;often&lt;/em&gt; implicit: 

&lt;ul&gt;
&lt;li&gt;parentheses are optional and so zero arg method calls are the same as object values (&lt;code&gt;user.first&lt;/code&gt; can be a method invocation or just a call for the attribute);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt; can be implicit or explicit (it's explicit for writer methods because otherwise, Ruby's trying to declare a new local var)&lt;/li&gt;
&lt;li&gt;implicit returns;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shakacode.com/talks"&gt;Justin's resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1UUePkLINNN-Gpm5x5kPGBjNafrn29DdK/view?usp=sharing"&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a"&gt;Justin's &lt;code&gt;~/.pryrc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/search?q=pry"&gt;ShakaCode Forum Pry Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/t/running-puma-for-debugging-with-pry/2018"&gt;Running puma for debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>How to Automatically Execute Python Code Based on Datadog DevOps Alerts</title>
      <author>Derrick Sherrill</author>
      <pubDate>Wed, 14 Apr 2021 20:11:26 +0000</pubDate>
      <link>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</link>
      <guid>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In today’s video, we’re going to take a look at how to setup the Datadog Trigger in WayScript and how to use it. Datadog is a powerful monitoring program that can be utilized in many different ways through WayScript, including triggering code executions and more. Keep reading to learn more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-script"&gt;
  &lt;/a&gt;
  Building our Script
&lt;/h2&gt;

&lt;p&gt;For this tutorial we’ll simply explore how to set up and connect a Datadog account to WayScript. First, we’ll add the Datadog Trigger module to our program tree. We’ll need to authenticate the account using an API key. To do this, navigate to the toolbar at right and select the button with three bars; from here, click “Add Account.”  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you will need a nickname, and API key, and an Application key.  &lt;/p&gt;

&lt;p&gt;To get the API and Application keys, visit the Datadog HQ and access your API key. The Application key can also be found here. You can create a new Application key to use solely for this program. Remember to keep both of these keys hidden and don’t share them with others. Paste both of these keys in the right toolbar in WayScript. Now, WayScript has access to your Datadog account.  &lt;/p&gt;

&lt;p&gt;After clicking “Update” and the refresh button in the toolbar, select your preferred organization. Next, turn on events in the toolbar by activating the toggle switch. To activate the trigger, switch the toggle within the Trigger module in the tree. Now, we’ve activated the Datadog Trigger module within WayScript. However, we need to visit the Datadog HQ website to take care of a few more things before we can start using it.  &lt;/p&gt;

&lt;p&gt;First, we’ll go to the Monitors tab on the website. For our account, we already have one running titled Demo Events. Clicking on this we see that we’re sending notifications to @webhook-wayscript-datadog-trigger. We can then copy this, go back to the Monitors tab, and create a new monitor. There are many different things we can monitor using various monitor types, like Events, Custom Checks, and Networks. We’ll monitor an event for this tutorial.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our new event monitor, we’re just sending an event when a user uses an application built through Heroku and hosted on GitHub. We have a default string that says “something big has happened,” so we’ll type “something big” in the “Match events containing” text box to match our string. Next, we’ll set alert conditions above zero, and then in the text box at the bottom we’ll type “Notify” and pass in the @webhook-wayscript-datadog-trigger from earlier.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add a title and click save, and the new monitor will be found in the monitors tab. We’re now ready to start using Datadog for a number of other applications within WayScript.  &lt;/p&gt;

&lt;p&gt;Having the ability to use Datadog within WayScript adds even more usability to the program. We can use Datadog to monitor our program and automatically trigger code executions to solve any issues that may arise, along with many other potential uses. Stay tuned for future tutorials using the Datadog trigger!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Questions about this script or anything else? Join our &lt;a href="https://discord.gg/VWbXSbj"&gt;discord&lt;/a&gt;. We're always around to help.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A year of strife</title>
      <author>Leon Timmermans</author>
      <pubDate>Wed, 14 Apr 2021 19:59:48 +0000</pubDate>
      <link>https://dev.to/leontimmermans/a-year-of-strife-16o9</link>
      <guid>https://dev.to/leontimmermans/a-year-of-strife-16o9</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: this is based on my own personal experience and perception. It's not The Truth, but it is my truth.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, in early May, I got an email that got me worried. Really really worried. Not because of disagreement (though I did disagree with it), but because I knew this would be the most controversial thing I've seen in my more than decade on perl5-porters (the mailing list where core contributors discuss the development of perl). If I was wrong it was only because controversial turned out not to be quite strong enough a word for what would happen.&lt;/p&gt;

&lt;p&gt;In it, a radical change was proposed. Radical in technology, but I'm not going to focus on that today. Radical in &lt;a href="http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html"&gt;values&lt;/a&gt;, which really means it's radical for the community as well. It immediately divided both core contributors and much of the community into many factions with two main contingents.&lt;/p&gt;

&lt;p&gt;What may seem like a simple technical disagreement was everything but. It was a fight for the soul of the language and the community that we love. While there were a lot of (mostly silent) people in the middle, in the discourse there were two sides and both (or at least enough people on both sides) were entirely convinced that the language and community that we all love only has a future if their side wins, and that the other will drive it to ruin.&lt;/p&gt;

&lt;p&gt;If that doesn't sound like the prologue of a Greek tragedy, then I don't know what does.&lt;/p&gt;

&lt;p&gt;It led to vigorous discussion; initially behind the scenes, and after the Conference-in-the-Cloud also on &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257565.html"&gt;perl5-porters&lt;/a&gt; and elsewhere. And quite frankly, this only stopped when people mostly stopped talking to each other after 2 weeks because there was little point to it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The alarm bells really should have gone off here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Soon enough the conflict moved to github. The unfortunate thing is that there were two groups of people: one with the will to make this happen but not quite the knowledge, and they started writing code. And one group that didn't want this to happen that did have the knowledge, who started reviewing said code. As you can probably guess, this soon became a mutually aggravating situation. After a few weeks of stepping on each other's toes, it became an open conflict.&lt;/p&gt;

&lt;p&gt;The stakes were astronomical. I've heard several people say (in private) that they felt they would be needing to look for a different career and community over this. Combine this with a pandemic that has all of us stressed out, this led to a situation which I can only summarize as &lt;em&gt;both sides kept pushing until the other side would give up&lt;/em&gt;. Given the sheer stubbornness of the average perl contributor this could only end when a sufficient number of people have burned out that neither side is capable of doing pretty much anything. It was a dynamic that was quite frankly burning me out too, to the point where several of my loved ones told me I should give up on this for sake of my own mental health (and I've heard similar stories from others).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's easy to assume that the things that happened were a few abusive assholes, but in my experience it was mostly a vicious cycle of previously reasonable and kind people lashing out at the people that were burning them out&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And that's where the alarm bells became cold-war style air sirens, the kind you can hear from miles away (sorry gen-z, you probably have no idea what I'm talking about).&lt;/p&gt;

&lt;p&gt;This was the moment when we (or actually a bunch of community elders) started up a process to set up a new governance, because any decision making process that can generate this amount of strife is in need of repairs. Many people saw it as a diversion, but I don't agree. I think it was the only way to restart this conversation, and to get to a point (currently still in the future) where we can heal again.&lt;/p&gt;

&lt;p&gt;But when hell broke loose, another thing was finally spoken out, though it was easily missed in between all the unpleasantness, is a simple truth that there is a third option that had been unthinkable a year ago: forking. This changes everything about the equation, literally everything.&lt;/p&gt;

&lt;p&gt;Ultimately I believe that is what ended the discussion. It ended with the simple knowledge that the opposition was able and willing to fork if that's what it takes to prevent their worst-case scenario. In a way it was a Solomon's judgement for the steering committee. It ended the discussion not just because almost no one wants to fork the community, but because perl7 as announced last summer wouldn't be viable given a competitor that actually supports all of CPAN today and will continue to do so for the foreseeable future (just look at how long it took the python3 transition to take over, and that's without people wanting to keep supporting python2).&lt;/p&gt;

&lt;p&gt;It is a pyrrhic victory. Pyrrhic not just because "we" haven't really won anything. Everyone lost because friendships were damaged (and perhaps lost) over this. We lost because a bunch of the people who matter for moving perl forward are currently effectively burned out (a few loudly so, but many in painful silence). We lost because people stopped contributing over this (most prominently but not limited to former project lead Sawyer).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-can-we-learn-from-this-and-how-can-we-move-forward"&gt;
  &lt;/a&gt;
  So what can we learn from this, and how can we move forward?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We needed different governance, for a multitude of reasons. The old pumpking model had a tendency to burn people out, that was not sustainable (to be honest, Sawyer seemed burned out to me even before any of this happened, I can only imagine where he is now). Having more people in our executive, and having them there for bound terms (it's easier to stop when it takes effort to continue) will hopefully prevent that in the future. But also because it will lead to more diverse points of view. I suspect we'll be tweaking our governance for a while we gain more experience with it, but at least we have a foundation to do that with now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Going through this during a pandemic really didn't help. I honestly believe this situation would not have gotten so badly out of hand if we could meet up face to face and talk to each other with a beverage in our hands; if we weren't all so tense because we haven't seen many of our loved ones in ages. We should remember that. Some discussions should be done in real life; sometimes the right response to a conflict is "Ooh, I get the impression this may be a Chartreuse-level discussion. Are you up for that?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We should have more attention for our contributors' mental health; we need to remember the human on the other side of the conversation. It's perhaps cliche to say we should act with more empathy for each other, but frankly we collectively also acted with too little empathy for ourselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It seems that the proponents initially mistook a lot of the grievances as mere bike-shedding, when they actually were meaningful concerns that wouldn't go away by themselves. They didn't seem to realize that they were crossing the Rubicon by actually moving forward with their plans without a consensus. We should not set ourselves up for failure like that, there is no way that could have ended well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One thing we started doing much too late was mediation (Neil in particular has done great work there lately). We need people who can see all perspectives and bring them all back together. This is where we truly miss Larry more than anything, because bringing different needs together was his true talent. I don't think (or hope) we will be needing this often, but it's probably good to be prepared for such an eventuality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We talk a lot about speaking with kindness, but we don't talk nearly enough about listening with kindness. Unlike speaking, listening kindly can't really be enforced, but the speaking without listening can easily become dysfunctional. Achieving this requires a cultural change. I don't know how to get us there, but I do know that it will require leadership.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other thing that requires leadership is bringing us back together again. Perl is unique in the &lt;a href="https://twitter.com/leon_timmermans/status/1376299679818874880"&gt;breadth&lt;/a&gt; of its user base and that is both Perl's greatest strength as its greatest weakness. These conflicting interests were at the root of this conflict, and finding a path that serves all those interests (including the less loud ones) will be the main challenge for the steering committee.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>perl</category>
      <category>community</category>
    </item>
    <item>
      <title>Vuex best practices</title>
      <author>timothyokooboh</author>
      <pubDate>Wed, 14 Apr 2021 18:55:20 +0000</pubDate>
      <link>https://dev.to/timothyokooboh/vuex-best-practices-45dd</link>
      <guid>https://dev.to/timothyokooboh/vuex-best-practices-45dd</guid>
      <description>&lt;p&gt;As a Vue.js developer, I have been using Vuex for state management. &lt;/p&gt;

&lt;p&gt;Recently, I completed a course on Frontend Masters titled &lt;strong&gt;&lt;a href="https://frontendmasters.com/courses/vuex/"&gt;Vuex for intermediate developers&lt;/a&gt;&lt;/strong&gt;. I have also read a couple of useful posts on Vuex written by experienced Vue.js developers.&lt;/p&gt;

&lt;p&gt;Therefore, these days when utilizing Vuex in my application, I do my best to follow these patterns/strategies/rules.&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;Always use &lt;em&gt;Mutations&lt;/em&gt; to update a value in Vuex state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you have something like this in your state:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const state = {&lt;br&gt;
  age: 20&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update the value of &lt;strong&gt;age&lt;/strong&gt; inside any of your Vue components, &lt;strong&gt;never do this:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.state.age = 40;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead, write a mutation that will be responsible for updating the state.&lt;/p&gt;

&lt;p&gt;You could write something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const mutations = {&lt;br&gt;
updateAge(state, payload) {&lt;br&gt;
state.age = payload&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then in your components, you can do this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.commit("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can even extend this example further with the next best practice.&lt;/p&gt;

&lt;p&gt;B. &lt;strong&gt;Let every mutation be associated with an action. Then dispatch these actions inside of your Vue components.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most experienced Vue developers propose that components should not directly commit mutations. Instead, every mutation should be associated with an action. Then components should dispatch these actions instead of directly committing mutations.&lt;/p&gt;

&lt;p&gt;To demonstrate this concept with our previous example, let's create an action:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const actions = {&lt;br&gt;
updateAge({ commit }, payload) {&lt;br&gt;
commit("updateAge", payload)&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside our Vue components, we will dispatch the action instead of committing the mutation directly.&lt;br&gt;
&lt;code&gt;this.$store.dispatch("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C. &lt;strong&gt;Keep asynchronous logic inside actions and NEVER inside mutations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Asynchronous logic such as fetching data from an API call should be carried out inside actions and not inside mutations. &lt;/p&gt;

&lt;p&gt;This is because each time a mutation updates the Vuex state, it leaves a &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; snapshot of the Vuex state inside of Vue dev tools. This is very useful in debugging because you can always go back in time to check the initial values in the state before the mutation was committed.&lt;/p&gt;

&lt;p&gt;But this unique ability of mutations is lost whenever an asynchronous event is fired inside a mutation. Hence it is best to only perform synchronous tasks inside mutations.&lt;/p&gt;

&lt;p&gt;Usually, these synchronous tasks only involve updating the value of the state just like we did before:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;state.age = payload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D. &lt;strong&gt;Actions and Mutations should not be used outside of their core responsibilities.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because Vuex actions and mutations are simply javascript functions, sometimes we execute logic that should&lt;br&gt;
not really be done inside either of them.&lt;/p&gt;

&lt;p&gt;Each time you commit a mutation, it should do only ONE thing: &lt;strong&gt;Update the value of the state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each time you dispatch an action, it should do one or more of the following:&lt;br&gt;
(i) Fetch data from an API.&lt;br&gt;
(ii) Commit a mutation.&lt;br&gt;
(iii) Dispatch an action.&lt;/p&gt;

&lt;p&gt;Each time you find yourself executing logic that falls outside of these core responsibilities, you should consider extracting that logic inside a &lt;strong&gt;Vuex plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, Vuex plugins are very easy to write. I will show you how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;&lt;br&gt;
Let's say you dispatched an action that fetched data from an API. Then you committed a mutation and passed the API response as a payload to the mutation. Then inside your mutation, you updated the value of the Vuex state with the payload. And in addition, you want to save some values to local storage.&lt;/p&gt;

&lt;p&gt;It's best not to write the logic that saves the values to local storage inside of your mutation or action. Instead, you can write a simple plugin to do just that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to write a plugin&lt;/strong&gt;&lt;br&gt;
Let's create a Vuex plugin to save data in Local storage.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;strong&gt;plugins&lt;/strong&gt;, preferably inside of your Vuex store folder. Then create a file called &lt;strong&gt;webStorage.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export default function saveToLocalStorage(store) {&lt;br&gt;
 store.subscribe((mutation, state) =&amp;gt; {&lt;br&gt;
if(mutation.type === 'updateState' ) {&lt;br&gt;
const payload = mutation.payload;&lt;br&gt;
localStorage.setItem("userId", payload.userId)&lt;br&gt;
localStorage.setItem("username", payload.username)&lt;br&gt;
}&lt;br&gt;
})&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Vuex plugin is just a normal javascript function that receives the Vuex store as its only argument.&lt;/p&gt;

&lt;p&gt;In the code above, I check if the mutation that was committed is called "updateState". Then I access the payload from the mutation and save the username and userId to local storage.&lt;/p&gt;

&lt;p&gt;This logic does not update the Vuex state. Therefore, it's not best practice to place it inside of a mutation.&lt;/p&gt;

&lt;p&gt;To use this plugin, we will import it into the Vuex store (index.js file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;store/index.js&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;import saveToLocalStorage from "plugins/webStorage";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Store = new Vuex.Store({&lt;br&gt;
plugins: [saveToLocalStorage],&lt;br&gt;
state: {},&lt;br&gt;
mutations: {},&lt;br&gt;
actions: {},&lt;br&gt;
getters: {}&lt;br&gt;
})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vuex plugins are really powerful and easy to write. You can use them to create powerful notification systems such as notifying a slack channel whenever a particular mutation or action is executed.&lt;/p&gt;

&lt;p&gt;E. &lt;strong&gt;Don't write redundant code inside Vuex getters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below Vuex getter is not really useful and should not have been written in the first place:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
getAge(state){&lt;br&gt;
return state.age;&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is only returning the value of age. In our components, we can conveniently access the value of age without the help of this getter.&lt;br&gt;
&lt;code&gt;this.$store.state.age&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use getters to compute derived values of the state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But let's say we want to check if age is less than 18. Using a getter to &lt;strong&gt;compute&lt;/strong&gt; this value will be very useful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
isUnderAge(state){&lt;br&gt;
return state.age &amp;lt; 18&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside of our components, we can conveniently determine if a user is under age by accessing the value of the getter:&lt;br&gt;
&lt;code&gt;this.$store.getters.isUnderAge&lt;/code&gt; instead of writing &lt;code&gt;return this.$store.state.age &amp;lt; 18&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's it, guys! ☺️.&lt;br&gt;
Let me know what you think about these tips. And share the best practices you have been applying inside of your Vuex codebase too.&lt;/p&gt;

&lt;p&gt;I must add that these best practices will not be complete without a properly organized Vuex folder structure. But that's a topic for another time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Iconic developers  🧐🤠🤪</title>
      <author>Jasper de Jager</author>
      <pubDate>Wed, 14 Apr 2021 18:48:43 +0000</pubDate>
      <link>https://dev.to/jmdejager/iconic-developers-51m5</link>
      <guid>https://dev.to/jmdejager/iconic-developers-51m5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@danielkcheung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Daniel Cheung&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lego?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#developers"&gt;
  &lt;/a&gt;
  Developers
&lt;/h1&gt;

&lt;p&gt;Developers, they come in all shapes and sizes. What do most of them have in common? They don't like to be put in a box. Despite this I'm going to do just that 😜 I'm going to try to capture different developer characteristics by matching them with their own personal icon 😊 I'd really like to know: with what kind of developer can you relate to the most? I'll start by describing 3 types, but please feel free to leave your own "iconic developer" in the comments!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-knowitall"&gt;
  &lt;/a&gt;
  🧐 The know-it-all
&lt;/h2&gt;

&lt;p&gt;This programmer always seems to know the best solution, at least that their belief. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Enjoys being around other programmers to showcase their knowledge. Can mostly be found crawling the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Doing research on new frameworks/tools because gathering knowledge is their&lt;br&gt;
power.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Mostly needs to work on getting stuff done. There is a big difference between code in your head and actual code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cowboy"&gt;
  &lt;/a&gt;
  🤠 The cowboy
&lt;/h2&gt;

&lt;p&gt;This programmer writes code faster than their shadow. This speed comes with a cost though. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Enjoys hackathons and feels comfortable in a team with other cowboys! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Creating a proof of concepts that needs to be done fast.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Writing code that is less prone to error and easier to maintain. Mostly the code of a cowboy is not something you want the change later on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-funny-one"&gt;
  &lt;/a&gt;
  🤪 The funny one
&lt;/h2&gt;

&lt;p&gt;Making puns all day and leaving Easter eggs left and right in the code. Keeps the team happy!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Are at their best in a close team. Likes to add joy to programming!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Creating a proof of concepts that needs to be done fast.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Being less influenced by the mood of others. Consistency in the code is hard if the mood is off.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#there-must-be-more"&gt;
  &lt;/a&gt;
  There must be more 😎
&lt;/h2&gt;

&lt;p&gt;Please let me know what you can come up with!&lt;br&gt;
To get you started:&lt;br&gt;
😎😁🤐😴🤑😤🐱‍👤&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## 💻 [name]&lt;/span&gt;

&lt;span class="gu"&gt;### Habitat&lt;/span&gt;

&lt;span class="gu"&gt;### Best to ask for&lt;/span&gt;

&lt;span class="gu"&gt;### Needs works on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking forward to your creativity!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>development</category>
    </item>
    <item>
      <title>Redux Best Practice 2021 - Redux Cool</title>
      <author>React</author>
      <pubDate>Wed, 14 Apr 2021 18:38:35 +0000</pubDate>
      <link>https://dev.to/reactjs/redux-best-practice-2021-redux-cool-5g86</link>
      <guid>https://dev.to/reactjs/redux-best-practice-2021-redux-cool-5g86</guid>
      <description>&lt;h1&gt;
  &lt;a href="#build-redux-logic-without-getting-nervous-heart"&gt;
  &lt;/a&gt;
  Build redux logic, without getting nervous ❤️
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Ruben-Arushanyan/redux-cool"&gt;Redux Cool&lt;/a&gt;&lt;/strong&gt; is an awesome tiny package that allows you to easily and intuitively write redux logic. It is the collection of two separate libraries, one designed to create reducer functions and the other to create action objects: (&lt;a href="https://github.com/Ruben-Arushanyan/reducers-creator"&gt;Reducers Creator&lt;/a&gt; for creating reducers functions and &lt;a href="https://github.com/Ruben-Arushanyan/actions-creator"&gt;Actions Creator&lt;/a&gt; for creating actions object)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;redux redux-cool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Create a file named &lt;code&gt;src/accountReducer.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/accountReducer.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;reducersCreator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducerTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="na"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;UPDATE_EMAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;CLEAR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducersCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACCOUNT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reducerTree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example above, we create an &lt;strong&gt;&lt;code&gt;accountReducer&lt;/code&gt;&lt;/strong&gt; by calling the &lt;code&gt;reducersCreator&lt;/code&gt; function and passing it three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;"ACCOUNT"&lt;/code&gt;&lt;/strong&gt; : It's the &lt;strong&gt;name&lt;/strong&gt; of the reducer, it can be any &lt;code&gt;String&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;initialState&lt;/code&gt;&lt;/strong&gt; : It's the &lt;strong&gt;initial state&lt;/strong&gt; of the reducer, it can be any &lt;code&gt;Object&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;reducerTree&lt;/code&gt;&lt;/strong&gt; : It's an &lt;code&gt;Object&lt;/code&gt; &lt;em&gt;(can have any deep and nested structure)&lt;/em&gt; that intuitively and in readible ways, defines &lt;code&gt;handler functions&lt;/code&gt; for reducer. &lt;code&gt;Handler functions&lt;/code&gt; as an argument take &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; and update the state. It automatically uses the &lt;a href="https://immerjs.github.io/immer/"&gt;immer library&lt;/a&gt; to do &lt;strong&gt;immutable updates&lt;/strong&gt; with normal mutative code, like &lt;code&gt;state.profile.data.email = email&lt;/code&gt;. There is no need to manually do immutable updates and return the result. If you are not familiar with the &lt;a href="https://immerjs.github.io/immer/"&gt;immer library&lt;/a&gt;, please look at it, it is very important.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result, we get the &lt;strong&gt;&lt;code&gt;accountReducer&lt;/code&gt;&lt;/strong&gt; function, which can handle the following type of actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;types: &lt;code&gt;"PROFILE/SET"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/PROFILE/SET"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;types: &lt;code&gt;"PROFILE/UPDATE_EMAIL"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/PROFILE/UPDATE_EMAIL"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;types: &lt;code&gt;"CLEAR"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, each handler can work with &lt;strong&gt;two&lt;/strong&gt; types of actions, one consisting of the path described in &lt;em&gt;reducerTree&lt;/em&gt;, the second is the same as the first type plus the reducer name that should be added from the beginning like &lt;code&gt;"CLEAR"&lt;/code&gt; and &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;. That is the most important and useful feature of this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-both-cases-raw-clear-endraw-and-raw-accountclear-endraw-the-clear-handler-is-called-in-the-accountreducer-but-when-we-have-multiple-reducers-that-have-the-clear-handler-and-we-need-to-clear-the-state-of-all-reducers-we-must-use-raw-clear-endraw-action-type-but-if-we-need-to-delete-only-the-account-reducer-state-we-must-use-the-raw-accountclear-endraw-action-type"&gt;
  &lt;/a&gt;
  In both cases (&lt;code&gt;"CLEAR"&lt;/code&gt; and &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;), the &lt;strong&gt;CLEAR&lt;/strong&gt; handler is called in the &lt;strong&gt;accountReducer&lt;/strong&gt;, but when we have multiple reducers that have the &lt;strong&gt;CLEAR&lt;/strong&gt; handler and we need to clear the state of all reducers, we must use &lt;code&gt;"CLEAR"&lt;/code&gt; action type, but if we need to delete only the &lt;strong&gt;ACCOUNT&lt;/strong&gt; reducer state we must use the &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt; action type.
&lt;/h3&gt;



&lt;p&gt;Now that we have the &lt;strong&gt;accountReducer&lt;/strong&gt;, let's create the redux store&lt;/p&gt;

&lt;p&gt;Create a file named &lt;strong&gt;src/store.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/store.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./accountReducer.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Create Store&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accountReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dispatch Set Profile Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test@test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: {email: 'test@test', name: 'Test'}&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Dispatch Update Email Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UPDATE_EMAIL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test2@test2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: {email: 'test2@test2', name: 'Test'}&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;



&lt;span class="c1"&gt;// Dispatch Clear Email Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLEAR&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: null&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ruben-arushanyan/redux-cool"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/RubenArushanyan"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/redux-cool"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Avoid Procrastination and Improve Focus</title>
      <author>Javid Mougamadou</author>
      <pubDate>Wed, 14 Apr 2021 18:31:43 +0000</pubDate>
      <link>https://dev.to/javidjms/avoid-procrastination-and-improve-focus-3l63</link>
      <guid>https://dev.to/javidjms/avoid-procrastination-and-improve-focus-3l63</guid>
      <description>&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-procrastination"&gt;
  &lt;/a&gt;
  What is Procrastination?
&lt;/h3&gt;

&lt;p&gt;People who procrastinate are often mislabeled as lazy. Many of us even engage in self talk about how lazy or unfocused we are when we engage in procrastination. But procrastination is not a reflection of someone’s work ethic or their ability to focus. There’s more to it than that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we procrastinate, we typically put off something that we find difficult, challenging, or uncomfortable in favor of something easier or more appealing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chronic procrastinators know that waiting will cause more harm than good. We know that this choice will ultimately lead to a worse outcome for us physically, emotionally, and otherwise, but we do it anyway&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-real-reason-we-procrastinate"&gt;
  &lt;/a&gt;
  The Real Reason We Procrastinate
&lt;/h3&gt;

&lt;p&gt;Dr. Tim Pychyl is also a professor of psychology and a member of the Procrastination Research Group at Carleton University in Ottawa. He said, “Procrastination is an emotion regulation problem, not a time management problem.” Sirois and Pychyl teamed up in 2013 to research the notion that people place a priority on their immediate emotional needs over those of their future selves via procrastination. Here’s what they concluded.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People engage in this irrational cycle of chronic procrastination because of an inability to manage negative moods around a task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When faced with an “aversive” task, i.e. something that we find “boring, frustrating, lacking in meaning and/or structure,” we react with negative feelings and moods. Then we have a choice. We can get through those feelings and moods via “self-regulation” or we can succumb to the immediately protective choice of procrastination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem-with-procrastination"&gt;
  &lt;/a&gt;
  The Problem with Procrastination
&lt;/h3&gt;

&lt;p&gt;We believe that when we sit down to work tomorrow, or next week, or next month before the big deadline, we will feel like doing it. But we are wrong. When we choose the temporary reprieve from boredom, frustration, or challenge and kick the can down the road to our future selves, we are only making matters cumulatively worse.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We aren’t dismissing our future selves as being unimportant or anything. We are just absolutely convinced that our future self will be better able to handle the given task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For one thing, a constant current of anxiety and tension will be along for the entire procrastination ride. This nagging looming deadline will be churning in the background, coloring our daily mood and impacting our health and well being. The negative feelings we have about the task itself make us procrastinate. That, in turn, leads to ruminating negative thoughts about the act of procrastination itself. It’s a cycle that has a snowball effect, gathering more self blame, shame, anxiety, and stress along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#techniques"&gt;
  &lt;/a&gt;
  Techniques
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-daily-todo-list-dont-forget-to-readupdate-it-daily-"&gt;
  &lt;/a&gt;
  1. Daily Todo List (Don't forget to read/update it daily !)
&lt;/h3&gt;

&lt;p&gt;Make a list of 3-6 things that you want to get done during the day. Put them in order of the most important or time sensitive to the least important or time sensitive. Start working on the first task until it is finished. Check it off, mark it out, and move to the next item. Keep going until your the end of the day. Move any tasks that are left undone to the new list you will create for the next day.&lt;/p&gt;

&lt;h5&gt;Remember to start the day by reading the current list of tasks and update it if it is needed.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#2-digitally-declutter"&gt;
  &lt;/a&gt;
  2. Digitally Declutter
&lt;/h3&gt;

&lt;p&gt;Let’s face it. Distractions are very easily found these days. If you tend to wander into social media or headline news or your personal inbox instead of working on the more pressing task at hand, it’s time to digitally declutter your workspace.&lt;/p&gt;

&lt;p&gt;The idea here is to make it harder to get distracted by removing the devices that hold those distractions. So, let’s say you need to create an outline for an upcoming presentation and you plan to work at the breakfast counter in the kitchen. Take only your laptop into the workspace. Put your phone, tablet, and any other devices you may have in another room and make sure they are on silent.&lt;/p&gt;

&lt;p&gt;Close all tabs other than the document you are actively writing into. If you find that you cannot stop opening new windows to browse online, go old school and pull out an actual pad of paper and pen to write your outline in ink.&lt;/p&gt;

&lt;p&gt;To take this a step further, declutter your actual devices so that distractions are not as easily accessible. Remove social media apps from your devices, delete games, and create folders to organize essential apps.&lt;/p&gt;

&lt;h5&gt;Remember to keep a specific workspace based on your task in order to avoid distractions&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#3-bundle-up"&gt;
  &lt;/a&gt;
  3. Bundle Up
&lt;/h3&gt;

&lt;p&gt;We all love a package deal. Bring the bundle up benefit into your life to get things done. This technique works very well for self care and health habits as well as household chores and responsibilities that we all find so easy to put off.&lt;/p&gt;

&lt;p&gt;We are generally only accountable to ourselves for things like working out, mowing the grass, cleaning the house, cooking healthy meals, or doing the laundry. Make these tasks less tiresome and more appealing by bundling them with something you really love.&lt;/p&gt;

&lt;p&gt;If audiobooks are your jam, only listen to them when you are cleaning the house. Catch up on your favorite podcasts only while you cut the grass or cook dinner. Watch the latest binge-worthy show only when you are on the treadmill.&lt;/p&gt;

&lt;h5&gt;Find the trick to do annoying chores in a funny way.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#4-set-a-timer-ex-custom-podomoro-flow"&gt;
  &lt;/a&gt;
  4. Set a Timer (Ex: Custom, Podomoro, Flow)
&lt;/h3&gt;

&lt;p&gt;People can accomplish staggering volumes of work simply by committing to show up and do the work for a set period of time, no matter what. Writers past and present have found success with time techniques but it works with a wide variety of tasks. Here’s how it works.&lt;/p&gt;

&lt;p&gt;Pick a task that you want to get done. This can be a routine, daily responsibility or a special project or work product you need to produce on a particular deadline. Decide how much time you have to work on the task each day or in this particular work period. It could be 15 minutes, 2 hours, or 60 seconds...pick a time period that makes sense for the task at hand. Set a timer for that time period and don’t stop until the timer goes off. No matter what!&lt;/p&gt;

&lt;p&gt;But, what if your kid comes in the room and needs help with their lesson? What if you need to take a bathroom break? What if the doorbell rings or your mom calls or the dog starts barking madly to go out? Look, life happens. We know that. Hit the pause button on the timer, take care of the immediate need, and get right back to it.&lt;/p&gt;

&lt;h5&gt;Remember to start the timer each time you pick a task.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#5-worst-thing-first"&gt;
  &lt;/a&gt;
  5. Worst Thing First
&lt;/h3&gt;

&lt;p&gt;This is a little psychological trick that is both effective and super rewarding. Think about all the things you want to do today or that should happen everyday. Take care of the task that is the least appealing as soon as humanly possible. Get it over with and move on to the things that are more engaging, easy, and fun, or just less frustrating, dull, or challenging.&lt;/p&gt;

&lt;p&gt;Once that “worst thing” is finished and done, there will be an immediate lift in spirit and a real sense of accomplishment. Ride that wave of success forward knowing that things will only get better from there! Worst Thing First is motivating, rewarding, and really works.&lt;/p&gt;

&lt;h5&gt;Remember to not pick the easiest task first&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.doit.io/procrastinate/"&gt;https://blog.doit.io/procrastinate/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>zen</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 KEY LESSONS REACT TUTORIALS DON'T TEACH</title>
      <author>pawanbhayde</author>
      <pubDate>Wed, 14 Apr 2021 18:26:55 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/5-key-lessons-react-tutorials-don-t-teach-dnf</link>
      <guid>https://dev.to/pawanbhayde/5-key-lessons-react-tutorials-don-t-teach-dnf</guid>
      <description>&lt;p&gt;There are many essential concepts and lessons that React developers need to know that simply aren't covered in most tutorials.&lt;/p&gt;

&lt;p&gt;I have handpicked the topics I believe are some of the most important for you to know, but few articles have dedicated the time to cover in detail.&lt;/p&gt;

&lt;p&gt;Let's take a look at five key React lessons worth knowing which you might not find elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. How React state is actually updated&lt;/strong&gt;&lt;br&gt;
As a React developer, you know that state can be created and updated with the useState and useReducer hooks.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. It's better to use multiple effects instead of one&lt;/strong&gt;&lt;br&gt;
When performing a side effect, most React developers will useEffect just once and attempt to perform multiple side effects within the same effect function.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Don't optimize functions that update state (useState, useReducer)&lt;/strong&gt;&lt;br&gt;
A common task whenever we pass down a callback function from a parent component to a child component is to prevent it from being recreated, unless its arguments have changed.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. The useRef hook can preserve state across renders&lt;/strong&gt;&lt;br&gt;
As React developers, it's very helpful sometimes to be able to reference a given React element with the help of a ref. We create refs in React with the help of the useRef hook.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. How to prevent your React app from crashing&lt;/strong&gt;&lt;br&gt;
One of the most important lessons for React developers to know, especially if they haven't pushed a React application to the web, is what to do with uncaught errors.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related Post&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZZZpr0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zCOCaAYW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/610655/1a00c3e4-b6ea-4f09-9824-27097fba9b7e.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/css-scroll-down-animated-button-scroll-more-button-1nmg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Scroll Down Animated Button | Scroll More Button&lt;/h2&gt;
      &lt;h3&gt;pawanbhayde ・ Apr 13 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>TIP: Never leave your email address raw in the mailto link! Here's what to do instead</title>
      <author>Naseki</author>
      <pubDate>Wed, 14 Apr 2021 17:36:09 +0000</pubDate>
      <link>https://dev.to/naseki/tip-never-leave-your-email-address-raw-in-the-mailto-link-here-s-what-to-do-instead-1c70</link>
      <guid>https://dev.to/naseki/tip-never-leave-your-email-address-raw-in-the-mailto-link-here-s-what-to-do-instead-1c70</guid>
      <description>&lt;p&gt;Usually, when you leave your email address on your website for people to click on, you may do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:name@example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name@example.com&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;This is, however, the perfect recipe to get spam into your email!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-how-email-harvesting-works"&gt;
  &lt;/a&gt;
  This is how email harvesting works
&lt;/h1&gt;

&lt;p&gt;In order for spambots to get a nice long list of emails to annoy people to click their suspicious-looking links, they use email harvesters to curate these lists. Emails are typically found on websites where people leave theirs to be contacted.&lt;/p&gt;

&lt;p&gt;Some people think this is easy to solve simply by masking the email like &lt;code&gt;name[AT]example[DOT]com&lt;/code&gt;. This, however, doesn't solve anything due to two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The mailto link still contains the actual email address as you can't replace it with the one above. Since email harvesters look into the source code of your website, they'd still be able to get your email.&lt;/li&gt;
&lt;li&gt;Most email harvesters are advanced enough to detect common patterns like [AT] and (AT) and such, so they won't do much.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, what now?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#encode-your-email-address"&gt;
  &lt;/a&gt;
  Encode your email address
&lt;/h1&gt;

&lt;p&gt;Fortunately, there's a way to make your email address unreadable for email harvesters!&lt;/p&gt;

&lt;p&gt;You may have seen characters like &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; in HTML before. These are called &lt;strong&gt;HTML entities&lt;/strong&gt;. These are symbols that have been encoded so they won't be mistaken for HTML tags.&lt;/p&gt;

&lt;p&gt;However, what not many people know is that you can encode every single character into an HTML entity. And even better, putting these into your hrefs will convert them back into regular text for normal visitors that are visiting your website rather than looking at the source code. It's perfect for this situation!&lt;/p&gt;

&lt;p&gt;HTML entities for regular letters are made of HEX encoding. The HTML entities would look like like &lt;code&gt;&amp;amp;#HEXCODE;&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-do-it"&gt;
  &lt;/a&gt;
  Let's do it!
&lt;/h1&gt;

&lt;p&gt;Use &lt;a href="https://onlineutf8tools.com/convert-utf8-to-html-entities"&gt;this handy tool&lt;/a&gt; to convert! Make sure to copy the entire href link, not just your email address!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx2J00S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wp8z4lq06l79pradccx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx2J00S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wp8z4lq06l79pradccx.jpg" alt="Example screenshot of how to convert the link"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After that, copy-paste that string into your href and you're done! Here's how it should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;amp;#x6d;&amp;amp;#x61;&amp;amp;#x69;&amp;amp;#x6c;&amp;amp;#x74;&amp;amp;#x6f;&amp;amp;colon;&amp;amp;#x6e;&amp;amp;#x61;&amp;amp;#x6d;&amp;amp;#x65;&amp;amp;commat;&amp;amp;#x65;&amp;amp;#x78;&amp;amp;#x61;&amp;amp;#x6d;&amp;amp;#x70;&amp;amp;#x6c;&amp;amp;#x65;&amp;amp;period;&amp;amp;#x63;&amp;amp;#x6f;&amp;amp;#x6d;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My email&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the whole thing a lot harder to decypher for most email harvesters. That, while still keeping the link clickable for others! On top of that, using inspect element to check the HTML gives you the decoded email, even though the source code has it encoded!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKcxuq0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb34uh9ajgg3gohr8aa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKcxuq0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb34uh9ajgg3gohr8aa7.jpg" alt="Comparison of devtools and source code"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This means that it still ends up being readable for humans.&lt;/p&gt;

&lt;p&gt;It's even better if you use some non-traditional way of masking your email address in the actual text, or just don't use your email at all (like in the sample above).&lt;/p&gt;

&lt;p&gt;We're all good now! No more disappointments that you think you just got a client but it turns out to be spam!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay3KzHPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85t5l2vp28xdw748e2tv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay3KzHPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85t5l2vp28xdw748e2tv.gif" alt="Good job fellow dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading! 💻
&lt;/h1&gt;

&lt;p&gt;If you wanna stay up to date with dev, subscribe to my newsletter! I send a couple of articles and resources once a week and will let you know when I've written a new article as well.&lt;/p&gt;

&lt;p&gt;Not sure if it's for you? Read a sample newsletter &lt;a href="https://buttondown.email/Naseki/archive/time-management-ethical-resources-and-a-very-shiny-3d/"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buttondown.email/Naseki"&gt;Subscribe here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>html</category>
      <category>security</category>
    </item>
  </channel>
</rss>
