<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Benchmarking Code</title>
      <author>Ashish Bailkeri</author>
      <pubDate>Tue, 19 Oct 2021 23:33:18 +0000</pubDate>
      <link>https://dev.to/aboss123/benchmarking-code-2eog</link>
      <guid>https://dev.to/aboss123/benchmarking-code-2eog</guid>
      <description>&lt;p&gt;Benchmarking your code is a very important step to maintaining good code. It does not particularly matter whether the language is "fast" or "slow" as each language has its target platform where it needs to do well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-benchmarking-code"&gt;
  &lt;/a&gt;
  JavaScript Benchmarking Code
&lt;/h2&gt;

&lt;p&gt;In JavaScript there is a really simple way to measure the performance of your code and can be rally useful to test easily on the client side of your web browser.&lt;/p&gt;

&lt;p&gt;Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reallyExpensiveFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reallyExpensiveFunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reallyExpensiveFunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can bench our functions by using the function &lt;code&gt;console.time&lt;/code&gt; to start and &lt;code&gt;console.timeEnd&lt;/code&gt; to end our bench.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-is-an-output-you-might-get"&gt;
  &lt;/a&gt;
  Here is an output you might get
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iG-UAO8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q24zgb90j7ew0z32sequ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iG-UAO8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q24zgb90j7ew0z32sequ.png" alt="JS Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try this example on &lt;a href="https://replit.com/@aboss123/JSBench#index.js"&gt;repl-it&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-benchmarking-code"&gt;
  &lt;/a&gt;
  C Benchmarking Code
&lt;/h2&gt;

&lt;p&gt;Believe it or not, the same code in C is very similar to the JavaScript example.&lt;/p&gt;

&lt;p&gt;Let's look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;really_expensive_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;really_expensive_function&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Took %f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;clock_t&lt;/code&gt; is a typedef for &lt;code&gt;long&lt;/code&gt; on my machine and is likely the same for yours. Despite that, you should still use &lt;code&gt;clock_t&lt;/code&gt; as it may be different on different machines. We get the system time before and after the really expensive function and are able to get the amount of time in seconds.&lt;/p&gt;

&lt;p&gt;You can try this example on &lt;a href="https://replit.com/@aboss123/CBenchmark#main.c"&gt;repl-it&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-is-an-output-you-might-get"&gt;
  &lt;/a&gt;
  Here is an output you might get
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZUTmYcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym78tdqiwfiopw8ffqer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZUTmYcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym78tdqiwfiopw8ffqer.png" alt="C Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarking-software-for-use"&gt;
  &lt;/a&gt;
  Benchmarking Software for Use
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bestiejs/benchmark.js/"&gt;Benchmark.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mafintosh/nanobench"&gt;Nanobench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeffbski/bench-rest"&gt;Bench-Rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/benchmark"&gt;Google Bench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/martinus/nanobench"&gt;Nanobench C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/boost-ext/ut"&gt;UT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In the end it's up to you how you choose to benchmark your code. Generally, you want to code your project before you benchmark it and if performance is really a concern then you can opt to use these benchmarking libraries or use a performance profile to find bottlenecks. I hope you learned something today :).&lt;/p&gt;

</description>
      <category>c</category>
      <category>javascript</category>
      <category>programming</category>
      <category>cpp</category>
    </item>
    <item>
      <title>CSS (Cascading Style Sheet)</title>
      <author>BeautyJames</author>
      <pubDate>Tue, 19 Oct 2021 22:37:15 +0000</pubDate>
      <link>https://dev.to/beautyjames/css-cascading-style-sheet-28o3</link>
      <guid>https://dev.to/beautyjames/css-cascading-style-sheet-28o3</guid>
      <description>&lt;p&gt;Hi everyone, it’s me again, Beauty James. In my previous articles, I discussed frontend and its languages. So today, I’ll be talking about CSS, another Frontend language. As we move further, we will discuss the following;&lt;br&gt;
o   What is CSS?&lt;br&gt;
o   Types of CSS&lt;br&gt;
o   Effect of Priority on CSS&lt;br&gt;
o   CSS Frameworks&lt;br&gt;
o   What is CSS used for?&lt;br&gt;
What is CSS?&lt;br&gt;
CSS ( Cascading Style Sheet) is a frontend language used to describe the presentation of web pages including background colors, font sizes and layouts. The basic function of CSS is to design the view for html, but it can also be used to display html in various types of devices such as printers and different types of screen sizes.&lt;br&gt;
Types of CSS&lt;br&gt;
There are generally three types of CSS which are stated below;&lt;br&gt;
o   Inline CSS: This is used to style a specific html element and add a style attribute to each html tag without using selectors. It is used whenever the users requirements are very small, as it will only affect a single element. Inline CSS in html is useful in web development, although managing a website may be difficult if the developer chooses to use only inline CSS.&lt;br&gt;
Pros of inline CSS&lt;br&gt;
 It allows the creation of CSS rules on html pages.&lt;br&gt;
 Different documents cannot be created and uploaded.&lt;br&gt;
Cons of inline CSS&lt;br&gt;
 Page size and download time of web pages could be affected because it styles multiple elements simultaneously.&lt;br&gt;
 It must be specified on every html tag which makes the code quite large and complex and is very time consuming, making it one of the least best options for programmers.&lt;/p&gt;

&lt;p&gt;o   Internal CSS: This is an effective way to style single pages because it has style tag in the head section of the html document. Internal CSS is used when the user wants the style to be used in the complete html body because it performs action on the entire html body. &lt;br&gt;
Pros of Internal CSS&lt;br&gt;
 Internal CSS cannot upload multiple files when the user adds the code with html page.&lt;br&gt;
Cons of Internal CSS&lt;br&gt;
 Adding documents in html will reduce the page size and loading time of the web page.&lt;/p&gt;

&lt;p&gt;o   External CSS: In external CSS, the web pages are linked to an external CSS file created by a text editor. It is used whenever users have many html attributes. There are basically two methods for creating CSS file; The first, is to write the CSS code in Notepad and save it as .css file while the second is to directly add the style sheet in your Solution Explorer and direct visual studio to use it on your html page.&lt;br&gt;
Pros of External CSS&lt;br&gt;
 Files are smaller in size and have a cleaner structure.&lt;br&gt;
 In external CSS, the same .css file is used for multiple web pages.&lt;br&gt;
Cons of external CSS&lt;br&gt;
 Uploading many CSS files can prolong the download time of a website.&lt;br&gt;
 The external CSS has to be loaded first before the pages can be delivered directly.&lt;br&gt;
Effects of Priority on CSS&lt;br&gt;
Bear in mind that when looking at the properties of CSS, the order of priority is very necessary. Inline CSS has greater priority compared to the internal and external types. Internal comes next, and then the external CSS which has least priority. In other words, Inline&amp;gt;Internal&amp;gt;External. The following are the effects of priority on the different types of CSS:&lt;br&gt;
 Any styles defined in the internal and external style sheets are overridden by Inline styles since it has the greatest priority.&lt;br&gt;
 Internal CSS will override the styles in the external style sheet because it stands second in place in the priority list.&lt;br&gt;
 External style sheet are applied for html tags if there are no styles defined either in Inline or internal style sheets.&lt;br&gt;
CSS Frameworks&lt;br&gt;
CSS Frameworks are tools used by web developers to make their job easier. It gives developers the option to use predefined codes instead of creating new ones from scratch and helps maintain synergy across websites and web pages, saving you the time and energy of trying to remember your specifications for each element. Frameworks are also very helpful when creating themes for use in more than one project.&lt;br&gt;
Though frameworks make jobs easier for web developers, it also has its downsides to it. For example, for every new kind of design you want to implement, you would have to learn a new framework thereby, restricting the flow and designs of developers. It is also a little ambiguous for beginners, as a result, only senior developers find them intriguing to use. &lt;br&gt;
There are 2 main examples of CSS Frameworks (Bootstrap and Foundation) used by frontend developers which will be discussed below;&lt;br&gt;
Bootstrap:&lt;br&gt;
Bootstrap was the first framework that made it possible for responsive deign to be carried out on smaller screens. The design automatically adjusts for different screens, all you need to do is to include the relevant Bootstrap classes.&lt;br&gt;
Pros of Bootstrap&lt;br&gt;
o   Pre-built items and community support will always be available in numerous amounts due to the fact that the number of website layouts, themes, UI components and admin panels built using Bootstrap is  amazing.&lt;br&gt;
o   Less cross browser bugs.&lt;br&gt;
o   Light weight and customizable&lt;br&gt;
o   UI components like navigation fps, cards, buttons, badges, modals, and lots more are offered by Bootstrap.&lt;br&gt;
o   Free and professional templates&lt;br&gt;
o   CSS is backed by Twitter making it easier to gain trust from enterprise customers.&lt;br&gt;
o   It offers a great grid system&lt;br&gt;
Cons of Bootstrap&lt;br&gt;
o   Everything built with Bootstrap looks very much alike, so heavy customization is needed while creating a design.&lt;br&gt;
o   Styles on bootstrap are verbose, leading to a lot of output in html which is not needed.&lt;br&gt;
o   Files created by Bootstrap can be huge in size thereby slowing down things for the user quite heavily as well as draining battery.&lt;/p&gt;

&lt;p&gt;Foundation:  Foundation is a framework that makes it easier to design apps, emails and responsive websites that looks amazing on devices. It provides its users with JavaScript, html, CSS that can be built upon.&lt;br&gt;
Pros of foundation&lt;br&gt;
o   It is customizable and the website doesn’t look familiar to other websites created by foundation.&lt;br&gt;
o   It is a modular collection of tools with command line interface that aims at solving any kind of frontend problems.&lt;br&gt;
o   Training courses and professional consulting are offered for large customers as a form of support.&lt;br&gt;
Cons of Foundation &lt;br&gt;
o   Due to  how complex foundation is, it often takes time for beginners to learn and use it. &lt;br&gt;
o   It has less community support compared to Bootstrap.&lt;br&gt;
o   It offers less supports for QA sites and troubleshooting issues.&lt;/p&gt;

&lt;p&gt;UI kit: UI kit is a lightweight modular framework that allows you import only the  features you need, creating fast and powerful web interfaces. It is mostly chosen by users because it offers minimalistic but elegant designs with clean cuts.&lt;br&gt;
Pros of UI kit&lt;br&gt;
o   There are ready-to-use themes available in the official website.&lt;br&gt;
o   UI kit can be easily customized and extended to fit the need of the designer.&lt;br&gt;
o   The code is pretty clean and follows well defined conventions.&lt;br&gt;
Cons of UI kit&lt;br&gt;
o   Classes of UI kit are often complex making it complicated to read and obtain desired results.&lt;br&gt;
o   Bug fixes are often slow and selective.&lt;br&gt;
o   UI kit is not very popular and as a result, it is difficult for users to find learning resources.&lt;br&gt;
o   Components and styles are predetermined, making it difficult to stun end users with uniqueness or a specific look.&lt;/p&gt;

&lt;p&gt;Skeleton: Skeleton is at times not even considered a CSS framework.  It is boilerplate, and was designed for small projects that requires a little bit more than layouts and positioning.&lt;br&gt;
Pros of skeleton&lt;br&gt;
o   It is a very simple framework and as a result, is very easy for beginners to learn.&lt;br&gt;
o   It suits Devices with smaller resolutions &lt;br&gt;
o   Clean and beautiful codes&lt;br&gt;
o   It is very good for carrying out small projects&lt;br&gt;
Cons of skeleton&lt;br&gt;
o   It takes longer to develop compared to other CSS frameworks.&lt;br&gt;
o   It is not suited for easy prototyping.&lt;br&gt;
o   The templates are limited and offers only one demo at a time.&lt;/p&gt;

&lt;p&gt;Milligram: Milligram is a framework that allows its users to change the design however they want. It is under 2kb in size and was designed for speed and productivity.&lt;br&gt;
Pros of milligram&lt;br&gt;
o   Users can start with a clean slate when creating interfaces, improving performance and productivity.&lt;br&gt;
o   Milligram doesn’t come with any default styles so users don’t have to reset or override properties when customizing.&lt;br&gt;
o   It is very easy to learn and set up, so it is very convenient for beginners.&lt;br&gt;
Cons of milligram&lt;br&gt;
o   Milligram has a small community so finding support won’t be as easy as other popular frameworks.&lt;br&gt;
o   It doesn’t possess pre-made or template-like features so it is only convenient for users who want to apply a specific design.&lt;/p&gt;

&lt;p&gt;Materialize: This is a modern and responsive frontend framework designed by Google that is based on material design and aimed at  making its users productive as fast as possible. Materialize consists of only a few components and classes to learn as well as customization options.&lt;br&gt;
Pros of materialize&lt;br&gt;
o   This framework has mobile-like components which is used to create progressive web applications.&lt;br&gt;
o   It makes use of material designs which make developers creations easy to use.&lt;br&gt;
o   It makes use of animation which provides visual feedback to users, making it easier for developers to work with.&lt;br&gt;
Cons of Materialize&lt;br&gt;
o   Due to its strict design language, it is only good with users that are working with material design.&lt;br&gt;
o   Materialize CSS is not flexible enough to use in some situations  because it only uses google components.&lt;br&gt;
o   It is a very large framework, making it difficult for others to have and use it.&lt;br&gt;
o   The materialize community has no cooperate support.&lt;br&gt;
Bulma: Bulma is highly praised for its simple syntax and minimalistic yet aesthetic design. It comes with a small but very reliable and passionate community. Bulma for most users, has the most readable classes and is definitely easy to learn.&lt;br&gt;
Pros of Bulma&lt;br&gt;
o   Bulma comes with naming conventions which are easy to use and remember.&lt;br&gt;
o   Its default settings are so good that even if you don’t change them, you’ll end up with a clean and modern design for your webpage.&lt;br&gt;
o   Its default properties could be easily customized using SASS.&lt;br&gt;
o   It doesn’t include JavaScript features.&lt;br&gt;
Cons of Bulma&lt;br&gt;
o   Bulmas style is quite distinct and as a result we could end up with very similar-looking websites.&lt;br&gt;
o   Since the framework is fairly new, it has a small community.&lt;br&gt;
o   To alter the properties of the framework, the user will have to find that specific code and modify it by themselves.&lt;br&gt;
Pure: Pure is a set of small, responsive modules created by Yahoo that you can use in every web project. It makes creating columns a lot more flexible.&lt;br&gt;
Pros of Pure:&lt;br&gt;
o   Unlike most CSS frameworks, pure has a large community because it is supported by Yahoo.&lt;br&gt;
o   The framework is tiny and only takes up to 3.7kb (compressed) when all modules are used.&lt;br&gt;
o   It consists of pre-made, responsive components that are made for the modern web.&lt;br&gt;
o   Its reusable and responsive modules can be added to any web projects.&lt;br&gt;
Cons of Pure&lt;br&gt;
o   Pure is not convenient for less experienced developers as they need to create their own designs to make use of the framework.&lt;br&gt;
o   It has restrictions for choosing the templates and design patterns of the web design.&lt;/p&gt;

&lt;p&gt;Semantic UI: Semantic UI is a development framework that helps create beautiful, responsive design using human friendly html. It has nice looking layouts by default and up to 3000 different kinds of themes. Although it possesses features such as concise html, intuitive JavaScript and simplified debugging, it has one of the steepest learning curves and very strict conventions.&lt;br&gt;
Pros of semantic UI&lt;br&gt;
o   It makes use of semantic class name for its styling, making it easier for beginners to understand.&lt;br&gt;
o   Many users are satisfied with its futuristic and beautiful design.&lt;br&gt;
o   Its documentation is well written and easy to use.&lt;br&gt;
o   It has various UI components you may need for almost every project you will embark on.&lt;br&gt;
Cons of semantic UI&lt;br&gt;
o   Due to its extremely large file size, it is better to use specific modules and components.&lt;br&gt;
o   It is difficult for developers who are not familiar with JavaScript.&lt;br&gt;
o   It contains a lot of UI inaccuracies and has small number of classes.&lt;/p&gt;

&lt;p&gt;Tailwind CSS: Adam Wathan, the creator of tailwind often shared his thoughts on how utility-based CSS was always superior to semantic CSS but it wasn’t till 2019 that developers started to embrace his idea and adopting them into their codes. Tailwind never encourages its users to use the same design twice even if the features for each design is similar. If you are bored of your current CSS frameworks and you need a completely new approach to your work, Tailwind is definitely the new and radical framework you could always opt out to.&lt;br&gt;
Pros of Tailwind&lt;br&gt;
o   Developers do not have to override existing styles since it doesn’t come with pre-designed components.&lt;br&gt;
o   It allows developers to reuse their own custom components throughout their projects.&lt;br&gt;
o   It is a responsive and mobile friendly framework with rare bugs and breaks.&lt;br&gt;
o   It also offers thousands of built-in classes that do not require you to create designs from scratch.&lt;br&gt;
o   It is one of the fastest frameworks when it comes to styling html.&lt;br&gt;
Cons of Tailwind&lt;br&gt;
o   Due to the built-in classes, tailwind often takes time to learn.&lt;br&gt;
o   It lacks significant styling component and as a result, developers have to spend time implementing these features manually.&lt;br&gt;
o   Tailwind has a steep learning curve, making it not the best choice for developers.&lt;/p&gt;

&lt;p&gt;Tachyons: Tachyon is a fast loading, highly readable and lightweight framework. It achieves its super easy design system by keeping all of its codes in the html file through the use of single utility classes. It helps users understand  their project design patterns and promotes reusability through out their projects.&lt;br&gt;
Pros of Tachyons&lt;br&gt;
o   This framework allows users to create reusable properties to build diverse and flexible components.&lt;br&gt;
o   It includes many pre-made components too.&lt;br&gt;
o   It defines classes identically for each break point.&lt;br&gt;
Cons of Tachyons&lt;br&gt;
o   Tachyon is not as popular as most CSS frameworks and as a result, has a small community, making it harder for developers to find tutorials and materials on it.&lt;br&gt;
o   Some developers find it boring to use in the long run since it is said to be feature complete (new features are barely added).&lt;br&gt;
Uses of CSS&lt;br&gt;
Most web developers use CSS for one or all of the following reasons:&lt;br&gt;
 CSS is generally used for defining the style of webpages.&lt;br&gt;
 It makes it possible to control the presentation of html documents.&lt;br&gt;
 CSS helps define the loom and formatting of a document written in a markup language.&lt;br&gt;
 It makes it possible to change an entire website by just changing a single file.&lt;br&gt;
 It makes the maintenance of a website easier by providing a flexible look to the website that can be altered in a convenient way.&lt;br&gt;
 Through CSS, flash files and animations are created directly. &lt;br&gt;
  CSS frameworks can be used to develop online web-based application or community. &lt;br&gt;
 Social media based platforms inter-relate with CSS frameworks which makes updating the user interphase easier.&lt;br&gt;
CONCLUSION&lt;br&gt;
Although there are other types of framework languages used  by developers, each language has its own purpose and helps developers differently. From this article, I hope readers are able to understand what CSS is about and how it can be used for web development. Readers should bear in mind that;&lt;br&gt;
• CSS is independent of HTML and can be used with any XML based markup language.&lt;br&gt;
• CSS frameworks with more features and pre-made components are better suited for beginners while those that offer styling are often more convenient for experienced developers.&lt;br&gt;
• When using external CSS, a link to the CSS root file has to be mentioned in the html source file.&lt;br&gt;
• CSS is not exactly a programming language because it only determines the structure and style of a webpage. They do not contain any instruction like other programming languages.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web App Security, Understanding the Meaning of the BFF Pattern</title>
      <author>Dalibor Kundrat</author>
      <pubDate>Tue, 19 Oct 2021 22:21:51 +0000</pubDate>
      <link>https://dev.to/damikun/web-app-security-understanding-the-meaning-of-the-bff-pattern-i85</link>
      <guid>https://dev.to/damikun/web-app-security-understanding-the-meaning-of-the-bff-pattern-i85</guid>
      <description>&lt;h2&gt;
  &lt;a href="#identity-and-security-overview"&gt;
  &lt;/a&gt;
  Identity and security overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AolgqVvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zknv6hfa2v5xsciokx09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AolgqVvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zknv6hfa2v5xsciokx09.png" alt="Identity server with BFF flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to security. There is a lot of guidance and also advice and commentary on why you should or should not use each approach. It's hard to understand all the different options and security issues they have.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You also have different clients (mobile/web/app) and each has different security requirements for managing, storing and processing data in the form of tokens, cookies or sessions.&lt;/p&gt;

&lt;p&gt;At the end, your app may scale and not all options can be deployed as multiple instance nodes without additional changes to the app and infrastructure.&lt;/p&gt;

&lt;p&gt;This means that you really need to make decisions at the beginning and ask questions like: &lt;em&gt;What are your customers?&lt;/em&gt; and &lt;em&gt;What are your requirements?&lt;/em&gt; and &lt;em&gt;What can be added to the system in the future?&lt;/em&gt; and &lt;em&gt;How is it possible to deal with the chosen approach?&lt;/em&gt; etc. etc..&lt;/p&gt;

&lt;p&gt;This article is part of &lt;a href="https://github.com/damikun/trouble-training"&gt;opensource training&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-vs-authorization"&gt;
  &lt;/a&gt;
  Authentication vs Authorization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Authentication&lt;/code&gt; - process of verifying who a user is (identity).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Authorization&lt;/code&gt; - process of checking what a user has access to (checking permissions to access a particular resource).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tokens-vs-cookie-and-sessions"&gt;
  &lt;/a&gt;
  Tokens vs Cookie and Sessions
&lt;/h3&gt;

&lt;p&gt;Tokens, cookies and sessions can be interpreted as resources or tools used by various protocols/standards/patterns (OAuth, OpenID, BFF) to perform identity-related tasks.&lt;/p&gt;

&lt;p&gt;It is important to understand the basics as they end up being used in combination with the environment, clients used and security level.&lt;/p&gt;

&lt;p&gt;In the end, you can wrap the JWT token in a cookie and use it with session data for 'authorization' and 'authentication'.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cookies"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h4&gt;

&lt;p&gt;Cookies can be understood as small blocks of data created by the server that are written once in the response and automatically resent with each subsequent request from the web browser until their lifetime expires.&lt;/p&gt;

&lt;p&gt;They can be used for authentication/authorization or tracking and marketing purposes. And much more...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IndentityServer cookies example:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ0rOeij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhat3oci7tks5ordi7i3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ0rOeij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhat3oci7tks5ordi7i3.png" alt="IdnetityServer Cookies in web browsers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 3 main properties of cookies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;HttpOnly&lt;/code&gt; - An http-only cookie cannot be accessed by client-side APIs, such as JavaScript. The browser will not allow you to access this cookie from the front-end code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Secure&lt;/code&gt; A secure cookie can only be transferred over an encrypted HTTPS connection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SameSite&lt;/code&gt; 3 option values &lt;code&gt;Strict&lt;/code&gt;, &lt;code&gt;Lax&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; - this tells the browser which domain and address the cookie can be sent to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#what-is-origin"&gt;
  &lt;/a&gt;
  What is origin?
&lt;/h5&gt;

&lt;p&gt;The origin is usually ip and port or domain name and subdomain name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This are different origins since subdomain are different
https://developer.mozilla.org
https://mozilla.org

// This are also different origins since port number is different
https://localhost:5001
https://localhost:7001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#another-cookie-definitions"&gt;
  &lt;/a&gt;
  Another cookie definitions:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Session cookies&lt;/code&gt; - Created only for the browser session (in memory) and deleted/lost after closing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Third-party cookies&lt;/code&gt; - Usually the domain attribute of a cookies matches the domain displayed in the address bar of the web browser. as &lt;code&gt;first-party cookies&lt;/code&gt;. The &lt;code&gt;third-party cookies&lt;/code&gt; does not match the current domain and is used as &lt;code&gt;tracking cookies&lt;/code&gt; to track user activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sessions"&gt;
  &lt;/a&gt;
  Sessions
&lt;/h4&gt;

&lt;p&gt;Session is used to temporarily store information on the server for use across multiple pages of the site. It is usually associated with a cookie that is used to identify the session stored on the server, but does not contain any data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uN_zA0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr4bir7bzcydmixnjnkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uN_zA0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr4bir7bzcydmixnjnkg.png" alt="Session diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  Tokens
&lt;/h4&gt;

&lt;p&gt;Tokens are data elements that allow application systems to perform the authorization and authentication process. They are usually encoded as base64 strings.&lt;/p&gt;

&lt;p&gt;There are several types of tokens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;access token&lt;/code&gt; - Includes user claims and signs them with a secret. It uses JWT tokens.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;refresh token&lt;/code&gt; - Used to &lt;em&gt;"refresh "&lt;/em&gt; and get a new 'access token' after its lifetime expires.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id token&lt;/code&gt; - JSON encoded data about user profile information&lt;/li&gt;
&lt;li&gt;etc, etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#jwt-tokens"&gt;
  &lt;/a&gt;
  JWT Tokens
&lt;/h5&gt;

&lt;p&gt;JSON Web Token is an open standard that defines how information can be securely transferred between parties as a JSON object. &lt;/p&gt;

&lt;p&gt;They are used for &lt;code&gt;authorization&lt;/code&gt; and &lt;code&gt;information exchange&lt;/code&gt; as they provide a security proof that the information wrapped in them is valid and written by a trusted source.&lt;/p&gt;

&lt;p&gt;You can easily write arbitrary data to tokens, sign that data, and then have clients use it to access server resources. The server can verify that the token was signed and is still valid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic JWT token flow example:&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHi1xf1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uu0tv3bu64xqub2zytn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHi1xf1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uu0tv3bu64xqub2zytn.png" alt="Auth diagram JWT token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JWT content:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob425mPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vjb0fshk9j5p4t428g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob425mPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vjb0fshk9j5p4t428g.png" alt="JWT token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JWT consist of 3 parts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Header&lt;/code&gt; - Contains information such as the type of token (JWT) and the signing algorithm used, e.g. HMAC SHA256 or RSA.&lt;/p&gt;


&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"alg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"HS256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"typ"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JWT"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Payload&lt;/code&gt; - Securly signed data (claims)&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1234567890"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Signature&lt;/code&gt; - Encrypted header, the encrypted payload, a secret and signed by an algorithm specified in the header.&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;HMACSHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="nx"&gt;base64UrlEncode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nx"&gt;base64UrlEncode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="nx"&gt;secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;More additional info about JWT tokens can be found at: &lt;a href="https://jwt.io/introduction"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;The most commonly used token for authorizing access to APIs is the &lt;code&gt;Bearer&lt;/code&gt; token.&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#identity-protocols"&gt;
  &lt;/a&gt;
  Identity protocols
&lt;/h3&gt;

&lt;p&gt;There are several protocols/specifications available to manage your identity or authorization process.&lt;/p&gt;

&lt;p&gt;This was necessary to standardize authentication and authorization between services and clients. So we can use different global identity/authentication providers like Facebook, Google (external/internal) and also standardize the way the process is implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZJGt85u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34dq7t1svckqhucckvxv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZJGt85u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34dq7t1svckqhucckvxv.jpg" alt="Oauth and OpenId logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This demo focuses on the most commonly used protocols &lt;code&gt;OAuth&lt;/code&gt; and &lt;code&gt;OpenID Connect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both protocols use a JWT token by default to encrypt and sign sensitive data, or to verify that the request was sent from a trusted source. It is also possible to use cookies on the front end and let the back end do the session and token authorization for you.&lt;/p&gt;

&lt;p&gt;You can also watch and learn from various talks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=996OiexHze0"&gt;OAuth 2.0 and OpenID Connect - [Nate Barbettini]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GyCL8AJUhww"&gt;Introduction to OAuth 2.0 and OpenID Connect - [Philippe De Ryck]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#oauth"&gt;
  &lt;/a&gt;
  OAuth
&lt;/h4&gt;

&lt;p&gt;Primarily used to authorize an app's access to a specific resource. This is done without having to share your password with external sites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFc0FwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nbibr408u3tok6cl3xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNFc0FwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nbibr408u3tok6cl3xc.png" alt="Oauth slack grant prompt example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever signed in to a new app and agreed to access your contacts, calendar, etc., you have used &lt;em&gt;OAuth 2.0&lt;/em&gt;. This protocol does not provide any information about the user's endpoint, just a token to access certain resources. You can read more about &lt;a href="https://auth0.com/docs/authorization/protocols/protocol-oauth2"&gt;OAuth at this document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mojdgR13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jjkx0h704xxqzqvcrht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mojdgR13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jjkx0h704xxqzqvcrht.png" alt="Oauth is authorization not authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth generally provides clients with &lt;em&gt;"secure delegated access "&lt;/em&gt; to certain resources. Imagine you are a Google user and an app wants to access your calendar data. This can be an example of a flow:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OAuth&lt;/code&gt; flow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqS69jcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zul81j4tw6id68xu4gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqS69jcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zul81j4tw6id68xu4gb.png" alt="Oauth flow explain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, an application like Slack, Jira, etc. only gets permission to access a specific resource (e.g. the calendar), but not the user itself, so profile data like username and email are not transferred and remain protected.&lt;/p&gt;

&lt;p&gt;If you want to learn more about OAuth, you can watch the following presentations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/GyCL8AJUhww?t=655"&gt;Introduction to OAuth 2.0 Flow - [Philippe De Ryck]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#token-exchange-flows"&gt;
  &lt;/a&gt;
  Token exchange flows
&lt;/h5&gt;

&lt;p&gt;There are several ways in which &lt;code&gt;grant&lt;/code&gt; can be substituted. The choice depends on what kind of client is requesting access and how much that client is trusted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization code flow&lt;/li&gt;
&lt;li&gt;Flow of authorization code with PKCE&lt;/li&gt;
&lt;li&gt;Implicit Flow&lt;/li&gt;
&lt;li&gt;Client credentials flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQ9tBjlI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8reo62cmv0vnuhddz5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQ9tBjlI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8reo62cmv0vnuhddz5v.png" alt="Oauth grant flow choice"&gt;&lt;/a&gt; Image from &lt;a href="//developer.okta.com"&gt;Okta&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#openid-connect"&gt;
  &lt;/a&gt;
  OpenID Connect
&lt;/h4&gt;

&lt;p&gt;OpenID is a protocol for decentralized authentication&lt;/p&gt;

&lt;p&gt;A login used by multiple internal/external applications. If you used your Google or Facebook etc. to log in to an external web or app, then you used &lt;em&gt;&lt;code&gt;OpenID Connect&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;OpenID Connect is based on &lt;em&gt;OAuth 2.0.&lt;/em&gt; (OAuth is the underlying protocol and OpenId is the identity layer built on top of it) and also uses a JWT token called &lt;code&gt;id_token&lt;/code&gt; which encapsulates identity claims in JSON format. For more information about OpenId, see &lt;a href="https://openid.net/connect/"&gt;under this specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id_token&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"iss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://server.example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"248289761001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"aud"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"s6BhdRkqt3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"nonce"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"n-0S6_WzA2Mj"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"exp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1311281970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"iat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1311280970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dalibor Kundrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"given_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dalibor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"family_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kundrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"birthdate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0000-10-31"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d.kundrat@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"picture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://example.com/somepicture_of_dalibor.jpg"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;code&gt;OpenId&lt;/code&gt; flow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7xH5UMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vike727dcdowbuftytyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7xH5UMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vike727dcdowbuftytyr.png" alt="OpenId Flow"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;There are several flows that can be used with &lt;code&gt;OpenId&lt;/code&gt;. You can read more about them &lt;a href="https://darutk.medium.com/diagrams-of-all-the-openid-connect-flows-6968e3990660"&gt;under this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;OpenId&lt;/code&gt; server by specification provides multiple endpoints to interact with.&lt;/p&gt;

&lt;p&gt;The URLs of all endpoints can be explored using the &lt;strong&gt;global discovery endpoint&lt;/strong&gt;. Often referred to as &lt;em&gt;disco&lt;/em&gt;. It is available under the path: &lt;code&gt;/.well-known/openid-configuration&lt;/code&gt; and returns JSON &lt;em&gt;OpenID Connect&lt;/em&gt; metadata related to the specified authorization server.&lt;/p&gt;

&lt;p&gt;Example &lt;em&gt;disco&lt;/em&gt; response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"issuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"jwks_uri"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/.well-known/openid-configuration/jwks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"authorization_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/authorize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"userinfo_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/userinfo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"end_session_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/endsession"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"check_session_iframe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/checksession"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"revocation_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/revocation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"introspection_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/introspect"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"device_authorization_endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://localhost:5001/connect/deviceauthorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"frontchannel_logout_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"frontchannel_logout_session_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"backchannel_logout_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"backchannel_logout_session_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"scopes_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"openid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"role"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"offline_access"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"claims_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"family_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"grant_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"authorization_code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"client_credentials"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"refresh_token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"response_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"id_token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"id_token token"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"response_modes_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"form_post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"fragment"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"token_endpoint_auth_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"client_secret_basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"client_secret_post"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"id_token_signing_alg_values_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"RS256"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"subject_types_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"public"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"code_challenge_methods_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"S256"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"request_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"request_object_signing_alg_values_supported"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"RS256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"RS384"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//etc..&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"authorization_response_iss_parameter_supported"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main OpenId endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/authorization_endpoint&lt;/code&gt; - interacting with the resource owner and obtaining an authorization permission.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/token_endpoint&lt;/code&gt; - Obtain an access and/or ID token by presenting an authorization permission (code) or refresh token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/revocation_endpoint&lt;/code&gt; - Revoke an access or refresh token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/end_session_endpoint&lt;/code&gt; - Ends the session associated with the specified ID token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/userinfo_endpoint&lt;/code&gt; - Provides information about the authenticated end user.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; All of these values in the discovery endpoint refer to the current server configuration. You can adjust or  enable/disable certain options in your code during idnetityserver configuration.&lt;br&gt;
⠀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#backend-for-frontend-pattern-bff"&gt;
  &lt;/a&gt;
  Backend for Frontend pattern (BFF)
&lt;/h3&gt;

&lt;p&gt;BBF is a backend used by a particular front-end application.&lt;/p&gt;

&lt;p&gt;Since endpoint APIs may have multiple clients with different requests, BFF can provide a client-specific backend mediator and act as a proxy that forwards and merges multiple requests to different service APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAxUNLcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcxzmd5seiiwadqtvjwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAxUNLcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcxzmd5seiiwadqtvjwg.png" alt="Backend for frontend - BFF example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
Ok, we have cookies, tokens, and sessions. We use them for various authentication/authorization protocols (OpenId, OAuth, etc.) &lt;strong&gt;and what the hack BFF is good for.&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Answer is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security reasons&lt;/li&gt;
&lt;li&gt;Architecture reasons 
⠀&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#security-reasons"&gt;
  &lt;/a&gt;
  Security reasons
&lt;/h4&gt;

&lt;p&gt;In recent years, it was common to implement OpenID Connect for SPAs in Javascript (React, Angular, Vue...), and this is no longer recommended:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using access tokens in the browser has more security risks than using secure cookies.&lt;/li&gt;
&lt;li&gt;A SPA is a public client and cannot keep a secret, as such a secret would be part of the JavaScript and could be accessible to anyone inspecting the source code.&lt;/li&gt;
&lt;li&gt;Recent browser changes to prevent tracking may result in 'third-party cookies' being dropped.&lt;/li&gt;
&lt;li&gt;It is not possible to store something securely in the browser for a long period of time, as it can be stolen by various attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the above issues, the best security recommendation for SPA is to &lt;strong&gt;avoid storing tokens in the browser&lt;/strong&gt; and create a lightweight backend to help with this process, called Backend for Frontend pattern (BFF).&lt;/p&gt;

&lt;p&gt;This way, you can still use &lt;code&gt;acces_tokens&lt;/code&gt; to authorize access to all your APIs, but clients can use cookies or tokens, for example, depending on the type (browser, mobile device), as required for security reasons.&lt;/p&gt;

&lt;p&gt;BFF can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;statefull&lt;/code&gt; - stores tokens in memory and uses a session to manage them.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stateless&lt;/code&gt; - stores the tokens in encrypted HTTP-only, same-page cookies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#architectural-reasons"&gt;
  &lt;/a&gt;
  Architectural reasons
&lt;/h4&gt;

&lt;p&gt;When you design your application, you have several options on how to access APIs from clients (web/mobile/external).&lt;/p&gt;

&lt;p&gt;1) A single API gateway that provides a single API for all clients &lt;br&gt;
2) A single API gateway that provides an API for each type of client &lt;br&gt;
3) A per-client API gateway that provides an API to each client. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#bff-vs-api-gateway"&gt;
  &lt;/a&gt;
  BFF vs API gateway
&lt;/h5&gt;

&lt;p&gt;While an &lt;code&gt;API Gateway&lt;/code&gt; &lt;strong&gt;is a single entry point&lt;/strong&gt; into to the system for all clients, a &lt;code&gt;BFF&lt;/code&gt; is only responsible for a &lt;strong&gt;single type of client&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzu6hUpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0cohsd854uh4lrx6aye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzu6hUpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0cohsd854uh4lrx6aye.png" alt="Backend for frontend vs API gateway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bbf-cookies-termination-and-token-isolation"&gt;
  &lt;/a&gt;
  BBF cookies termination and token isolation
&lt;/h4&gt;

&lt;p&gt;As mentioned in the text, the most important thing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid storing tokens in the browser. (&lt;strong&gt;No tokens in the browser&lt;/strong&gt; policy).&lt;/li&gt;
&lt;li&gt;Store tokens on the server side and use encrypted/signed HTTP-only cookies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended BFF pattern to secure SPA frontends:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtZ7Tojr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfy6lp88thttytod09h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtZ7Tojr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vfy6lp88thttytod09h.png" alt="Backend for frontend  (BFF) cookie and tokens flow + proxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using this, all communication from the SPA frontend to the authorization server now passes through the BFF and tokens do not reach the SPA.&lt;/li&gt;
&lt;li&gt;The BFF now issues session cookies. These are part of the request to APIs and are exchanged for an access token at the proxy level.&lt;/li&gt;
&lt;li&gt;Client-side cookies are terminated by the BFF proxy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;You can find the full source code of the app, including identity, distributed logging, tracing and monitoring, in the open source Github repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/damikun/trouble-training"&gt;https://github.com/damikun/trouble-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>security</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Difference Between A Website And A Web Application</title>
      <author>Cess</author>
      <pubDate>Tue, 19 Oct 2021 22:20:08 +0000</pubDate>
      <link>https://dev.to/cesscode/difference-between-a-website-and-a-web-application-4ccl</link>
      <guid>https://dev.to/cesscode/difference-between-a-website-and-a-web-application-4ccl</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article I will write about the difference between a website and a web application (web app). &lt;/p&gt;

&lt;p&gt;How can you tell the key differences between a website and a web app ? since both the website and the web app are almost similar to each other as both are accessible from your web browsers.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Website?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A website is a page or collection of pages on the World Wide Web (www) that contains specific information which was all provided by one person or entity and traces back to a common Uniform Resource Locator (URL). &lt;/p&gt;

&lt;p&gt;Examples of websites are:&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.goggle.com"&gt;www.goggle.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.cnn.com"&gt;www.cnn.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• &lt;a href="http://www.msn.com"&gt;www.msn.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A website can be accessed on different range of devices such as desktops, laptops and smartphones. &lt;/p&gt;

&lt;p&gt;Website is hosted on a single or multiple web server. It is accessible via a network like the Internet or a private local area network via IP address.&lt;/p&gt;

&lt;p&gt;Websites are dedicated to a particular topic such as &lt;strong&gt;gaming&lt;/strong&gt;, &lt;strong&gt;education,&lt;/strong&gt; &lt;strong&gt;sports&lt;/strong&gt; and &lt;strong&gt;dating websites&lt;/strong&gt; or a variety of purposes such as &lt;strong&gt;Blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main elements of a website are Hypertext Markup Language (HTML), Cascading Style Sheets (CSS) and JavaScript&lt;/p&gt;

&lt;p&gt;The first page you see when you open a website is called a &lt;strong&gt;Home page or a 'start page' or 'index page'.&lt;/strong&gt; before the site’s sub pages eg the &lt;strong&gt;about page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know you are wondering if every first page you open when visiting a website is the homepage? no is not, is also possible for you to begin from a different page other than the home page when you visit a website in cases when you click on a blog article to read &lt;/p&gt;

&lt;p&gt;The homepage are connected to websites sub pages by &lt;strong&gt;hyperlinks&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A hyperlink&lt;/strong&gt; is an element in an HTML document that links to either another portion of the document or to another document altogether. On webpages, hyperlinks are usually colored purple or blue and are sometimes underlined. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features Of a Website&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• &lt;strong&gt;Quality Web Contents:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Quality web Content is the most important element of any website. Contents on a website should be clear and relevant to the needs of your users. &lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Easy to Use:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good website must be easy to use. Having a website that's easy to navigate will make it easier for users to find what they are searching for on the website. A website with a frustrating user experience makes it difficult for visitors to find the content that they’re searching for and the user might end up leaving that website for a website with a better user experience&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Accessible to all users:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A user-friendly website should be accessible to everyone including the blind, disabled or the elderly.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Fast load times:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Websites should be able to load within 4-6 seconds for good usability. If your website takes more than 4-6 seconds to load, it is probably too slow and will result to visitors visiting other websites&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Responsiveness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your website must carry a responsive design so it is optimized for both mobile and desktop devices. A good website should look great on  all types of smartphones, tablets, desktops and laptops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-a-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits Of a Website?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• &lt;strong&gt;Showcase your products and services to wider audience:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Websites are accessible by anyone with a good connection from anywhere in the world even in remote locations so by getting a website it makes it possible for anyone in the world to find and patronize your business. A website can help you gain customers outside the geographic reach of your marketing efforts and can also help you increase your customer base by selling online if you have products that can easily be sold online.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Around-The-Clock Availability:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Owning a Website provides your customers with around-the-clock availability in terms of access to your products. Customers can see what products or services you sell , your prices, your location at any time of the day via visiting your website.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Establish Trust and Credibility:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Without a website people may doubt the legitimacy of your business, Question if your business is real or not. Having a website is a great opportunity to make a good impression and will also provide the information they are looking for and also give your business credibility.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-web-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a web application?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A web application is a computer program that utilizes web browsers and web technologies to perform tasks over the internet. Demand for web apps is increasing because they do not require download all you need to do is access the web app through a web browser such as goggle chrome. &lt;/p&gt;

&lt;p&gt;Web applications are websites with functionality and interactive elements. web applications like Gmail, Facebook, YouTube, Twitter, etc. are all dynamic, and built for user engagement.&lt;/p&gt;

&lt;p&gt;The Main element of web Apps are: HTML, CSS, and JavaScript; additionally programming languages such as Ruby and PHP&lt;/p&gt;

&lt;p&gt;Web applications can be designed for a wide variety of users and can be used by anyone; from an organization to an individual for numerous reasons.&lt;/p&gt;

&lt;p&gt;Examples of  commonly used Web applications are Gmail, photoshop, YouTube, online calculators, e-commerce shops.&lt;/p&gt;

&lt;p&gt;The above mentioned examples  have a web application that you can access via a link and a mobile application that you can download from stores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-a-web-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits Of a  Web App&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;• Web apps don’t need to be installed because they are internet enabled apps that can be used on the web browser: web apps allows you to showcase your products and services without asking users to install the app on their phones.&lt;/p&gt;

&lt;p&gt;• Not limited: Web apps are not limited to only few browsers because any browser can support opening the web app. They can be accessed through multiple web browsers regardless of the operating system. &lt;/p&gt;

&lt;p&gt;• Web applications are always up to date because updates are applied centrally. No need to remind users to update their applications.&lt;/p&gt;

&lt;p&gt;• Web applications don’t require approval from the mobile app store to function.&lt;/p&gt;

&lt;p&gt;• All users can access the same version so it eliminates any compatibility issues&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-a-web-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features Of a Web Application&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web apps are cloud based and scalable: &lt;/p&gt;

&lt;p&gt;web apps such as goggle, twitter, facebook and instagram are &lt;br&gt;
cloud optimized and scalable. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scalability is the idea of a system in which every application &lt;br&gt;
   or piece of infrastructure can be expanded to handle increased &lt;br&gt;
   load. &lt;/p&gt;

&lt;p&gt;You can serve more customers from an application given the same &lt;br&gt;
   hardware, further reducing the need to invest in servers and &lt;br&gt;
   hosting infrastructure.  Having a scalable web application &lt;br&gt;
   ensures that your web app can scale up to handle loads such as &lt;br&gt;
   increase in traffic from web visitors and not crash. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security: People don’t feel comfortable when sharing personal informations so It is essential to have a secure authentication for your web app, secure authentications  such as password encryptions, using ssl encryptions to secure credit card transactions, data transfer and logins, asking the user security questions when the user resets her password is a must. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;web apps such as E-commerce sites are targets for hackers due to immense value of the information that goes through them, such as credit card numbers. It is vital that you protect yourself and your customers. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Speed: The data processing of your web app should take place easily and without affecting the loading speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compatible Across Platforms:  All web apps should be able to work across any platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-a-website-and-a-web-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DIFFERENCES BETWEEN A WEBSITE AND A WEB APP&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;USER INTERACTION&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A website provides visual &amp;amp; text content which user can view and read, but not affect it 's functioning.&lt;/p&gt;

&lt;p&gt;In a web application, the user cannot only read the page content but can also manipulate the data on the page. example of a web application interactivity is an online banking application that performs transactions based on a customer’s input. Another example is the E-commerce online stores like Amazon that allows visitors to search through the catalog and buy the items they are searching for. &lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;CREATED FOR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A website mostly consists of static content which means that a website is publicly accessible to all the web visitors.&lt;/p&gt;

&lt;p&gt;A web application is designed for interaction with the end user.  This means that you need the required credentials to be able to access any data on the web application&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;AUTHENTICATION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is the security process that allows users to verify their identities in order to gain access to their personal accounts on a website.  User accounts must be secured to prevent unauthorized access and leakage of sensitive data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is not obligatory for informational websites like blogs for example. The user may ask to register to get regular updates or access additional informations that are not available for unregistered web visitors.  For example, reading articles online from a blog or a news website doesn't require registration but if you want to leave comments on the blog post or the news website, you will have to login to leave comments.&lt;/p&gt;

&lt;p&gt;Web applications need authentication, as they offer a much larger scope of options than websites. When you register to facebook or twitter or any of the social media platforms, you create an account and get a unique identification number. The system warns you if your login and password are weak. If you leave them unchanged, hackers may reach your account and steal your information, as well as irritate other users with junk emails under your name.&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;DEPLOYMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for websites, you just need to update the HTML code to carry out small changes on the website, it never requires a full re-compilation and deployment. &lt;/p&gt;

&lt;p&gt;All changes for web application require the entire project to be re-compiled and deployed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that you have a clearer understanding of the differences between websites and web applications, it will be easier for you to understand which online solution suits your business needs when choosing between a website and a web app.&lt;/p&gt;

&lt;p&gt;If you want your web page to display mostly some information choose a website. If you need interaction with users and additional functionality, such as the ability to make transactions online choose a web app.&lt;/p&gt;

&lt;p&gt;If you have any questions about the differences between a website and a web application, you can leave them in the comments section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The "new" Nullpointer Exception in Java 17</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Tue, 19 Oct 2021 20:54:09 +0000</pubDate>
      <link>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</link>
      <guid>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</guid>
      <description>&lt;p&gt;As a java developer everyone should know the &lt;strong&gt;Nullpointer Exception&lt;/strong&gt; or NPE. It is that one thing, you always should try to prevent from happening. In some cases it means that you need to debug your code to find the little mistake that happened. &lt;br&gt;
The NPE is a runtime exception which is thrown when your code wants to use an object or an object reference that has a null value. That can be if simply no value is assigned or a object is without reference.&lt;/p&gt;

&lt;p&gt;Before the newest version of the openJdk (version 17) the common Nullpointer Exception looked something like this in your stack-trace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.NullPointerException: null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably theres much more on you stack-trace going on but this is it.&lt;br&gt;
As you can see it does not indicate where or why your npe occurred.&lt;/p&gt;

&lt;p&gt;Help is on the way!&lt;br&gt;
Watch how Java 17 Handles this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException:
Cannot assign field "i" because "a" is null
at Prog.main(Prog.java:5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the exception pinpoints out &lt;strong&gt;where&lt;/strong&gt; and &lt;strong&gt;what&lt;/strong&gt; our null object reference is.&lt;/p&gt;

&lt;p&gt;Just that simple! &lt;/p&gt;

&lt;p&gt;As all of my posts this was also written on my &lt;a href="https://www.harun-sevinc.com"&gt;private blog&lt;/a&gt; where i try to write useful posts for developers.&lt;/p&gt;

&lt;p&gt;Or just follow me on &lt;a href="https://twitter.com/harsvnc"&gt;twitter&lt;/a&gt; or dm me &lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>java</category>
      <category>news</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Upgrade to Stimulus 3, say bye to IE11, and celebrate 🎉</title>
      <author>Matouš Borák</author>
      <pubDate>Tue, 19 Oct 2021 20:53:23 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/upgrade-to-stimulus-3-say-bye-to-ie11-and-celebrate-b7g</link>
      <guid>https://dev.to/nejremeslnici/upgrade-to-stimulus-3-say-bye-to-ie11-and-celebrate-b7g</guid>
      <description>&lt;p&gt;Most of our application JavaScript code is already written as &lt;a href="https://stimulus.hotwired.dev"&gt;Stimulus&lt;/a&gt; controllers, the rest being slowly assimilated or removed. Recently, we wanted to upgrade the Stimulus framework to &lt;strong&gt;version 3&lt;/strong&gt; to gain access to the new cool features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/hotwired/stimulus/pull/354"&gt;debug mode&lt;/a&gt;&lt;/strong&gt; that greatly helps understanding what exactly your controllers are doing and why,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/controllers#cross-controller-coordination-with-events"&gt;dispatching events among controllers&lt;/a&gt;&lt;/strong&gt; - previously, communication between controllers required various ”hacks“, not any more as it is now official and straightforward,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/actions#action-parameters"&gt;action parameters&lt;/a&gt;&lt;/strong&gt; for even more flexibility when calling controller actions,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/values#default-values"&gt;default values&lt;/a&gt;&lt;/strong&gt; no more need to be specified in HTML , they can reside in the controller itself,&lt;/li&gt;
&lt;li&gt;and &lt;a href="https://world.hey.com/hotwired/stimulus-3-c438d432"&gt;more&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we began by fixing all deprecation warnings, then updated the Stimulus package and all imports to the &lt;a href="https://www.npmjs.com/package/@hotwired/stimulus"&gt;new package name&lt;/a&gt;. Since we are still using Webpacker (not for long, you bet…), we added the – now separate – &lt;a href="https://www.npmjs.com/package/@hotwired/stimulus-webpack-helpers"&gt;stimulus-webpack-helpers package&lt;/a&gt; and updated the &lt;a href="https://stimulus.hotwired.dev/handbook/installing#using-webpack-helpers"&gt;controllers initialization&lt;/a&gt;. All easy and clear, right?&lt;/p&gt;

&lt;p&gt;Well, not so fast. We did not read the &lt;em&gt;whole&lt;/em&gt; release notes properly enough and did not notice at first that &lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/handbook/installing#browser-support"&gt;Stimulus 3 drops support for IE11&lt;/a&gt;&lt;/strong&gt;. This made us stop for a while and do some browser usage analyses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ie11-measures"&gt;
  &lt;/a&gt;
  IE11 measures
&lt;/h3&gt;

&lt;p&gt;Luckily, we’ve had most of the work done from almost a year ago, when we &lt;a href="https://dev.to/nejremeslnici/migrating-tachyons-to-tailwind-css-part-i-ich"&gt;adopted Tailwind&lt;/a&gt; in our project. Tailwind 2.0 also dropped official support for IE11 and we made an important decision at that time: while the IE11 usage numbers were small, we could not afford making our web totally unusable for these users. So we employed a few polyfills, added a few styling fixes specific to IE11 so that our web was still – somehow – accessible via this old browser. Also, we put up an alert that tried to persuade people to switch. And we waited… until today.&lt;/p&gt;

&lt;p&gt;So now we looked at the numbers again and found that all seemed very good! The usage numbers, both absolute and relative, decreased steadily, our providers didn’t use IE almost at all, our customers a bit more but still negligibly. Who knows whether our pop up, Microsoft or a general innovation pressure contributed to the effect, the important thing was that we were ready to make the next step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHGa_dL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clp3lqo97w4x8nf6qucm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHGa_dL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clp3lqo97w4x8nf6qucm.png" alt="IE11 analytics stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we decided to continue freely with the Stimulus upgrade and we also added our site to the &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/web-platform/ie-to-microsoft-edge-redirection"&gt;Need Microsoft Edge list&lt;/a&gt;&lt;/strong&gt;. Being listed here will automatically redirect IE11 users to Edge when they visit our site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-ie-11"&gt;
  &lt;/a&gt;
  ”Not IE 11“
&lt;/h3&gt;

&lt;p&gt;To our surprise, we hit a weird and at first confusing error during  the Stimulus upgrade process: &lt;em&gt;Uncaught (in promise) TypeError: class constructors must be invoked with 'new'"&lt;/em&gt;. No controllers worked at all. We double-, triple-checked the configs and all seemed OK. The solution clicked after we read &lt;a href="https://stackoverflow.com/a/51860850/1544012"&gt;this response&lt;/a&gt; on Stack Overflow. Our JS code was transpiled to ES5 but Stimulus itself now &lt;a href="https://github.com/hotwired/stimulus/releases/tag/v3.0.0-beta.1"&gt;uses ES6&lt;/a&gt; as the compile target. So our ES5 controllers could not extend ES6 Stimulus classes.&lt;/p&gt;

&lt;p&gt;We found the cause in the &lt;code&gt;browserslist&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file. This setting is &lt;a href="https://babeljs.io/docs/en/babel-preset-env#browserslist-integration"&gt;used by Babel&lt;/a&gt; to transpile various modern JS features to their safer alternatives according to &lt;a href="https://github.com/browserslist/browserslist"&gt;browsers usage&lt;/a&gt;, and we needed to explicitly &lt;strong&gt;exclude IE11 support&lt;/strong&gt; to compile our JS code to ES6 and the error disappeared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "browserslist": [
&lt;span class="gd"&gt;-    "defaults"
&lt;/span&gt;&lt;span class="gi"&gt;+    "defaults",
+    "not IE 11"
&lt;/span&gt;  ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, targeting our JavaScript code to ES6 alone &lt;strong&gt;decreased our production bundle size by about 15%&lt;/strong&gt; (unzipped). Nice!&lt;/p&gt;

&lt;p&gt;We also quickly checked with &lt;a href="https://caniuse.com/es6"&gt;Can I Use&lt;/a&gt; that we are OK with ES6 considering our browser usage pattern, and yes, sure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrsKMpNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8gnr7r3rghfzc6azhqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrsKMpNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8gnr7r3rghfzc6azhqs.png" alt="Can I use ES6 for our site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, as we recently &lt;a href="https://dev.to/nejremeslnici/migrating-selenium-system-tests-to-cuprite-42ah#ajax-fetch-issues-due-to-cuprite-being-too-fast"&gt;added&lt;/a&gt; the &lt;a href="https://github.com/stimulus-use/stimulus-use"&gt;Stimulus-Use library&lt;/a&gt; to our project, we made sure to upgrade it to current beta which supports Stimulus 3. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Our tests show that everything works nicely under Stimulus 3. We enjoy the lovely debug mode and other new features. Stimulus has grown to a mature framework, perfectly usable in &lt;a href="https://twitter.com/jaredcwhite/status/1450281146139348995"&gt;HTML-first application&lt;/a&gt; stacks.&lt;/p&gt;

&lt;p&gt;While for the few remaining IE11 users it will be increasingly difficult to use our site, we are quite OK with it as we have tried to reduce the harm before and continue to do so to some (lesser and lesser) extent. You can’t stop progress. Bye IE! 👋&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you like reading stuff like this, you might want to &lt;a href="https://twitter.com/boramacz"&gt;follow us&lt;/a&gt; on Twitter.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>stimulus</category>
      <category>rails</category>
      <category>javascript</category>
      <category>ie11</category>
    </item>
    <item>
      <title>Lessons Learned from Building a React Component Library with TypeScript</title>
      <author>Neil Chaudhuri</author>
      <pubDate>Tue, 19 Oct 2021 20:47:56 +0000</pubDate>
      <link>https://dev.to/realneilc/lessons-learned-from-building-a-react-component-library-with-typescript-3bkb</link>
      <guid>https://dev.to/realneilc/lessons-learned-from-building-a-react-component-library-with-typescript-3bkb</guid>
      <description>&lt;p&gt;Component libraries are all the rage. Shopify, Salesforce, IBM, and even the &lt;a href="https://designsystem.digital.gov/components/overview/"&gt;United States government&lt;/a&gt; have joined countless other organizations and businesses in building component libraries. They're the subject of blog posts, podcasts, and YouTube tutorials. All that's left is a &lt;a href="https://kenburns.com/the-films/"&gt;Ken Burns documentary&lt;/a&gt; on the subject.&lt;/p&gt;

&lt;p&gt;In fact, I am a software architect and senior engineer, and I currently lead the development of a React component library that will be the basis for the UIs for a prominent US government agency. I want to share with you my lessons learned in project management, communications, accessibility, engineering, and testing to build something that will impact the lives of millions. And the ups and downs of it all.&lt;/p&gt;

&lt;p&gt;So what's the big deal with component libraries?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-design-system"&gt;
  &lt;/a&gt;
  The Design System
&lt;/h2&gt;

&lt;p&gt;It doesn't start with a component library; it starts with a design system. The Nielsen Norman Group defines design systems &lt;a href="https://www.nngroup.com/articles/design-systems-101/"&gt;this way&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A design system is a complete set of standards intended to manage design at scale using reusable components and patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A design system enumerates the standards and practices that comprise the premier UX for consumers of your brand. It expresses the nomenclature every team should use in communications to break down silos and avoid the impulse from &lt;a href="https://www.melconway.com/Home/Conways_Law.html"&gt;Conway's Law&lt;/a&gt;. There are basic rules about colors, typography, spacing, and so on. All of these core principles become the basis for larger components--explicit ones like buttons and date pickers and subtler ones like grid systems.&lt;/p&gt;

&lt;p&gt;Our UX team develops and maintains our design system. Like software, it evolves; it's versioned; and it's collaborative. There are conversations among the UX designers and with me and other architects and engineers on the program about what makes sense and what is feasible. Are nested dropdowns necessary? Do we have time to create our own perfect &lt;code&gt;Datepicker&lt;/code&gt;? Or do we try to customize something open source? How do we feel about disabled buttons, and if we think they make sense, how can we overcome common pitfalls like poor &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast"&gt;contrast ratios&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Stuff like that. We use the language of &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;, which deconstructs web interfaces into entities ranging from "atoms" to "pages," as a common nomenclature to describe the goals of the design system.&lt;/p&gt;

&lt;p&gt;The challenge, and probably the hardest part of building a component library for us, is the tooling. Partly because of the preferences of the UX team and partly because of constraints on our development environment due to the sensitive nature of our work, we have not been able to streamline automation for versioning UX wireframes or translating them into artifacts engineers can use to build. As a result, we work with wireframes that are cumbersome to understand. In order to even view them, we either need to install the tool on our machines, which costs more licenses and imposes a burden on developer experience (DX), or we need to wade through literally hundreds of static asset files with a custom browser plugin. Neither is an optimal experience. Beyond that, it's a manual process to track consistency between the design system and the component library as both evolve.&lt;/p&gt;

&lt;p&gt;I never said it was pretty, but it isn't all bad either.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-value-of-a-component-library"&gt;
  &lt;/a&gt;
  The Value of a Component Library
&lt;/h2&gt;

&lt;p&gt;The design system is a set of core principles independent of implementation details. You can choose to implement these principles and make them real for UI engineers with whatever technology you choose.&lt;/p&gt;

&lt;p&gt;For us, that's React. Our React components generate a lot of value for the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Our component library enforces our design system across our development teams. Using the components all but guarantees a UI will be consistent with our brand and provide our users the best, most intuitive experience. Developers can feel confident they are using components vetted with the UX team, which frees them up to work on the specific use cases of their services rather than cross-cutting concerns like consistency with the design system.&lt;/p&gt;

&lt;p&gt;The library also maximizes the likelihood that our UIs pass visual testing by our UX team. This is important as violations slow down our delivery cadence and ability to get feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;Related to consistency is accessibility, which is a first-class priority for our component library. Accessibility, commonly known as &lt;a href="https://www.a11yproject.com/"&gt;#a11y&lt;/a&gt;, is more than just empowering the visually impaired. It also means empowering people who experience difficulty with hearing, motion, dexterity, or anything else. It means empowering &lt;em&gt;everyone&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The program is required by contract and &lt;a href="https://www.access-board.gov/law/ra.html#section-508-federal-electronic-and-information-technology"&gt;by law&lt;/a&gt; to produce UIs that &lt;br&gt;
are accessible--specifically &lt;a href="https://www.section508.gov/tools/playbooks/technology-accessibility-playbook-intro/"&gt;508 compliance&lt;/a&gt;. That said, accessibility is far more than a professional obligation; it is my personal priority. It is very important to me that everything I build is intuitive for every user. &lt;/p&gt;

&lt;p&gt;I will elaborate on this shortly, but our component library is built for accessibility. Development teams can trust the accessibility of the individual components, and as I said before, focus on their own use cases. Of course you are probably thinking in terms of accessible dropdowns and autocompletes and datepickers, which we have, but we also provide helper &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Semantics#semantics_in_html"&gt;Semantic HTML&lt;/a&gt; components. For example, the library features &lt;code&gt;Section&lt;/code&gt;, which represents the &lt;code&gt;section&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"&gt;HTML element&lt;/a&gt; as you would imagine, and &lt;code&gt;SectionGrid&lt;/code&gt;, which is a &lt;code&gt;section&lt;/code&gt; element endowed with our design system grid.&lt;/p&gt;

&lt;p&gt;Of course, the component library can only take developers part of the way to full accessibility, but it's nice not to have to start from 0.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h3&gt;

&lt;p&gt;We have worked very hard to provide intuitive APIs for our components, but the task is trickier than you might think. The APIs need to impose enough opinion so that consumers don't violate the design system but allow enough freedom for the components to support a wide range of use cases. For our &lt;code&gt;Button&lt;/code&gt; component, that is easy enough. For layout components like &lt;code&gt;Card&lt;/code&gt; and &lt;code&gt;Page&lt;/code&gt;, it's tougher. The reusability that results has made individual teams and the entire program so much more productive.&lt;/p&gt;

&lt;p&gt;We also go out of our way to endow our components with as little functionality as possible. Component APIs offer props that enable library consumers on the development teams to supply behavior. For an obvious example, developers supply &lt;code&gt;onClick&lt;/code&gt; behavior to the &lt;code&gt;Button&lt;/code&gt; component. We have more complex components that need to maintain their own state,&lt;br&gt;
but we try to minimize that where possible. This provides a clean separation of concerns, which makes testing our components much easier, and anyone who has been in the game long enough knows that strong testability makes for strong reusability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;There will be more about this shortly, but we do not build our components from scratch. Rather, we customize existing open source components and map our APIs to theirs. This abstracts the implementation details of the component from our development teams. For example, we use &lt;a href="https://github.com/Hacker0x01/react-datepicker"&gt;react-datepicker&lt;/a&gt; as the basis for our own &lt;code&gt;DatePicker&lt;/code&gt;, but if we decide to swap it out for a different one, our consumers will be none the wiser.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-stack"&gt;
  &lt;/a&gt;
  Component Stack
&lt;/h2&gt;

&lt;p&gt;As I mentioned, we build our component library with React, which is what we recommended but is also, for our risk-averse government customer, the safe choice given its backing by Facebook, &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-frameworks"&gt;its market penetration&lt;/a&gt;, and &lt;a href="https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-webframe-want"&gt;its popularity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But React is the easy part. Let's look at other parts of the component stack.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;p&gt;When we started building the component library, I considered TypeScript essential for two reasons. By enforcing type safety during development and at build time, we catch bugs much faster, which from a project management standpoint is much cheaper. More importantly, building our APIs in TypeScript is a huge help to library consumers on application development teams by facilitating code completion in their IDEs and type checking in &lt;em&gt;their&lt;/em&gt; builds.&lt;/p&gt;

&lt;p&gt;Let me also mention that some of our TypeScript APIs require &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"&gt;ARIA&lt;/a&gt; values to promote accessibility if we can't derive them ourselves from other props.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h3&gt;

&lt;p&gt;I mentioned earlier that our components are built on open source components, and most of them are built on &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;. There are many other open source component libraries out there, but Chakra UI is my favorite by far. The primary reasons are its first-class commitment to accessibility and the intuitive APIs of its components built with TypeScript. As you can probably infer, Chakra UI is an inspiration to me when building our own &lt;br&gt;
component library on top of it.&lt;/p&gt;

&lt;p&gt;Chakra UI also offers a powerful &lt;a href="https://chakra-ui.com/docs/theming/customize-theme"&gt;theme customization API&lt;/a&gt; we leverage heavily to apply the principles of our design system to Chakra components via dedicated theme files that separate the styling from functionality. This separation of concerns makes it easier to reason about our code and makes the files themselves a lot lighter.&lt;/p&gt;

&lt;p&gt;Chakra UI also features with some helpful hooks like &lt;a href="https://chakra-ui.com/docs/hooks/use-disclosure"&gt;useDisclosure&lt;/a&gt; that come in handy. &lt;/p&gt;

&lt;p&gt;If you use Chakra UI for your own component library, you will probably need some alias imports to deal with name collisions. For example, we call our button components, to no one's surprise, &lt;code&gt;Button&lt;/code&gt;, but so does Chakra UI. So we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Button as ChakraButton } from "@chakra-ui/react"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#engineering"&gt;
  &lt;/a&gt;
  Engineering
&lt;/h2&gt;

&lt;p&gt;Of course the fun part is building a React component library. This post is long enough, so I can't get into every detail. But I do want to address some of the key aspects you might want to consider when you build your own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;When we first began building the component library, we needed to move quickly because development teams were waiting on us &lt;br&gt;
to start building their UIs. Our management tasked me and several developers to get something done in a few sprints at nearly a full time commitment.&lt;/p&gt;

&lt;p&gt;We got the initial design system specification from the UX team and got to work. After those first few sprints, we had built enough components to allow teams to get going. The problem is that all of us resumed our normal duties with no time allocation for the library. This meant that whenever the UX team designed new components or developers found bugs in existing components, there was a bottleneck because no one was dedicated to upgrading the library. I and others got to it when we could, but the absence of a dedicated team was a problem.&lt;/p&gt;

&lt;p&gt;Another problem is the initial lack of communication within the UX team itself and among the UX team, developers, and me. In their creative zeal, far too often they provided wireframes to some developers inconsistent with wireframes provided to others, or they provided wireframes featuring components that weren't in the library. Development teams assumed they &lt;em&gt;were&lt;/em&gt; in the library and estimated accordingly. As you might expect, they were unhappy when they discovered the components didn't exist, which impacted their ability to deliver on schedule. They let me know it, and frankly they had every right to be unhappy. I knew we had to improve our process.&lt;/p&gt;

&lt;p&gt;To that end, we made some changes. We established a Microsoft Teams channel to encourage communication by eliminating the ceremony of meetings and even E-mails. We also decided that development teams will build new components initially, and if other teams will benefit, the library will absorb them, with tweaks as needed to APIs or implementations, to support broader applicability across the program. Then the team that built the component first will replace their implementation with the library's when ready. While this means teams have to devote more time to developing components, it's transparent, and there is no bottleneck. &lt;/p&gt;

&lt;p&gt;This is an evolving workflow. There is always room for improvement.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component structure
&lt;/h3&gt;

&lt;p&gt;Our components in TypeScript take three forms.&lt;/p&gt;

&lt;p&gt;The simplest components look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const TimePicker = (p: TimePickerProps) =&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;TimePicker&lt;/code&gt; component has no children, so it's as straightforward as it gets. It's just a function!&lt;/p&gt;

&lt;p&gt;If the component has children, it still isn't too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const Card: React.FC&amp;lt;CardProps&amp;gt; = p =&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React's &lt;code&gt;FC&lt;/code&gt; type (for &lt;code&gt;FunctionComponent&lt;/code&gt;) includes a &lt;code&gt;children&lt;/code&gt; prop implicitly. We could also declare it just as we do &lt;code&gt;TimePicker&lt;/code&gt; but explicitly add a &lt;code&gt;children&lt;/code&gt; prop of type &lt;code&gt;ReactNode&lt;/code&gt; to &lt;code&gt;CardProps&lt;/code&gt;. I prefer &lt;code&gt;FC&lt;/code&gt; because it very clearly signifies the presence of &lt;code&gt;children&lt;/code&gt; to library consumers and because the type parameter lets me enjoy some type inference. Notice how I don't have to specify the type of &lt;code&gt;p&lt;/code&gt; because it's implicit from the type parameter &lt;code&gt;CardProps&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Still, not too bad, right?&lt;/p&gt;

&lt;p&gt;The last kind of component is a little complicated--form components. Our developers use &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt;, and like every other form library I've used, it uses &lt;code&gt;ref&lt;/code&gt;s to maintain form state. This means our components need to provide a way to accept a &lt;code&gt;ref&lt;/code&gt; and delegate it to their children. &lt;/p&gt;

&lt;p&gt;Most React engineers don't know this because they don't have to, but React provides a function for exactly this purpose called &lt;code&gt;forwardRef&lt;/code&gt;, and we use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const Button = React.forwardRef&amp;lt;HTMLButtonElement, ButtonProps&amp;gt;(function Button(p, ref) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me try to break this down.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://www.oreilly.com/library/view/functional-programming-in/9781492048633/ch04.html"&gt;higher-order function&lt;/a&gt; is a function that takes functions as parameters or returns a function. Here &lt;code&gt;forwardRef&lt;/code&gt; takes that &lt;code&gt;Button&lt;/code&gt; function that renders the component as a parameter. Thanks to &lt;code&gt;forwardRef&lt;/code&gt;, development teams can pass refs to the form components in our library, which we pass along though that function parameter to our rendered implementation. The type parameters to &lt;code&gt;forwardRef&lt;/code&gt; provide type safety and inference. The type of &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;ButtonProps&lt;/code&gt;, and the &lt;code&gt;ref&lt;/code&gt; will be hooked onto a &lt;code&gt;HTMLButtonElement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the end, it's a little complicated and a fair bit of ceremony, but the result is pretty simple--a form component that accepts a &lt;code&gt;ref&lt;/code&gt; from the caller so form libraries can work with it as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h3&gt;

&lt;p&gt;When considering how to lay out your source code, it comes down to your team's preference, but as I tweeted recently:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;There is a lot of commentary on how we should lay out source code in &lt;a href="https://twitter.com/hashtag/React?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#React&lt;/a&gt;. If you take two "things" (functions, classes, &lt;a href="https://twitter.com/hashtag/TypeScript?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#TypeScript&lt;/a&gt; interfaces, etc.), the higher the frequency that changing one changes the other, the closer they should be together&lt;/p&gt;— Neil Chaudhuri (&lt;a class="mentioned-user" href="https://dev.to/realneilc"&gt;@realneilc&lt;/a&gt;
) &lt;a href="https://twitter.com/RealNeilC/status/1443309713584689154?ref_src=twsrc%5Etfw"&gt;September 29, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;What does that really mean in practice?&lt;/p&gt;

&lt;p&gt;Simple. When it comes to our component library, this means organizing code dedicated to a particular component in the same directory and even in some cases the same file. This is how we do it at a high level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwmIU-ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wicbqeb6ki290b7lmgm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwmIU-ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wicbqeb6ki290b7lmgm1.png" alt="Button component directory layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;Button.tsx&lt;/code&gt; contains the &lt;code&gt;ButtonProps&lt;/code&gt; interface, related types, and of course the component itself. Meanwhile, I love how Chakra UI allows us to separate theming from behavior, so the colors, spacing, font family, icon sizes, focus behavior, and other button details defined by our design system are in &lt;code&gt;ButtonTheme.ts&lt;/code&gt;, a different file in the same directory.&lt;/p&gt;

&lt;p&gt;Finally, although we could keep our tests and stories (more on these later) in the same directory, we prefer organizing them in their own subdirectories. I guess I've seen too much Marie Kondo.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-config"&gt;
  &lt;/a&gt;
  TypeScript Config
&lt;/h3&gt;

&lt;p&gt;I come from a background in &lt;a href="https://stackoverflow.com/questions/2690544/what-is-the-difference-between-a-strongly-typed-language-and-a-statically-typed"&gt;statically and strongly typed programming languages&lt;/a&gt; like Java and Scala. While I understand longtime JavaScript engineers balk at types, I find types make me extremely productive. As a result, our TypeScript config is very strict. In particular from our &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...
  "compilerOptions": {
    ...
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    ...
  },
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for building the library for application development teams, we scope our &lt;code&gt;tsconfig.json&lt;/code&gt; this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "**/__stories__/*",
    "**/__test__/*"
  ],
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All our components, stories, and tests are in the &lt;code&gt;src&lt;/code&gt; directory, but we only want the components when we build the library. This is why we exclude the &lt;code&gt;__stories__&lt;/code&gt; and &lt;code&gt;__test__&lt;/code&gt; directories inside each component directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-analysis-and-code-formatting"&gt;
  &lt;/a&gt;
  Static Analysis and Code Formatting
&lt;/h3&gt;

&lt;p&gt;Like everyone else, we rely on eslint and Prettier, and we don't do anything particularly special. Still, I do want to mention a couple of things.&lt;/p&gt;

&lt;p&gt;First is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;. We use &lt;a href="https://github.com/jsx-eslint/eslint-plugin-jsx-a11y"&gt;this eslint plugin&lt;/a&gt; to automate verification of the accessibility of our component library. It checks the JSX of our components for obvious violations. This is as far as we can go with automation, but we complement &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt; with manual auditing in Storybook I will discuss shortly.&lt;/p&gt;

&lt;p&gt;There might be something gnawing at the experienced engineers reading this. In the &lt;code&gt;tsconfig.json&lt;/code&gt; above, we exclude our stories and tests because they don't belong in the build. Still, you know we should apply the same quality standards to story code and test code as we do to production code. Code is code.&lt;/p&gt;

&lt;p&gt;To do this, we &lt;a href="https://www.typescriptlang.org/tsconfig#extends"&gt;extend&lt;/a&gt; &lt;code&gt;tsconfig.json&lt;/code&gt; in a file called &lt;code&gt;tsconfig.eslint.json&lt;/code&gt;,&lt;br&gt;
replacing the &lt;code&gt;exclude&lt;/code&gt; field with an empty array, and configure &lt;code&gt;eslint&lt;/code&gt; to use &lt;em&gt;that&lt;/em&gt;. This tells &lt;code&gt;eslint&lt;/code&gt; (and therefore Prettier) to include &lt;em&gt;everything&lt;/em&gt; in the &lt;code&gt;src&lt;/code&gt; folder in its analysis with identical TypeScript configuration. This means, for example, we can't cheat by using an implicit &lt;code&gt;any&lt;/code&gt; in our stories or tests either.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#builds"&gt;
  &lt;/a&gt;
  Builds
&lt;/h3&gt;

&lt;p&gt;We run our builds with &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;. That may seem counterintuitive since Vite is the build tool for &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; while our library is built with React, but Vite is actually agnostic. In fact, it amazed me how little configuration we needed. It basically just worked. Our Vite config is almost identical to the &lt;a href="https://vitejs.dev/guide/build.html#library-mode"&gt;example in the documentation&lt;/a&gt;. Just like the example, our build produces two bundle formats--&lt;code&gt;es&lt;/code&gt; and &lt;code&gt;umd&lt;/code&gt;--and it works fast.&lt;/p&gt;

&lt;p&gt;As you may know, TypeScript builds feature two phases, type checking and transpilation to JavaScript. Type checking by &lt;code&gt;tsc&lt;/code&gt;, the TypeScript compiler, is &lt;em&gt;very&lt;/em&gt; slow, so while it is very important, you should do it rarely. We only do it via the IDE in real time as we code or when we build the library for production--and break the build if type checking fails.&lt;/p&gt;

&lt;p&gt;We have a dedicated &lt;code&gt;typecheck&lt;/code&gt; script in our &lt;code&gt;package.json&lt;/code&gt; that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scripts": {
    ...
    "typecheck": "tsc --p tsconfig.eslint.json --skipLibCheck --sourceRoot src --noEmit",
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we use &lt;code&gt;tsconfig.eslint.json&lt;/code&gt; to typecheck everything.&lt;/p&gt;

&lt;p&gt;Meanwhile, transpiling your TypeScript source code to JavaScript is faster than type checking, but so is reading Tolstoy. Transpiling with &lt;code&gt;tsc&lt;/code&gt; or Babel is still not fast. However, the transpiler &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; is written in Go, a language &lt;a href="https://www.vidyasource.com/blog/scala-go"&gt;built for speed&lt;/a&gt;, and Vite uses it under the hood. Because we are transpiling constantly to see what's happening in Storybook, it's crucial that the process be fast. Thanks to esbuild, Vite does exactly what we need.&lt;/p&gt;

&lt;p&gt;Our production build, versioned with &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, includes &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;declaration files&lt;/a&gt; for each component and an &lt;code&gt;index.d.ts&lt;/code&gt; file enumerating all components. These improve DX by enabling developers' IDEs to perform fast code completion. We also provide the &lt;a href="https://chakra-ui.com/docs/theming/customize-theme"&gt;theme file&lt;/a&gt; we use for our own components so that developers can apply the same theme to theirs. Our CI/CD pipeline publishes the library to a private NPM registry, which allows appropriately configured &lt;code&gt;npm&lt;/code&gt; installations on developer machines to fetch the library with a conventional &lt;code&gt;npm install&lt;/code&gt;. The &lt;code&gt;package.json&lt;/code&gt; file accompanying the library contains all the peer dependencies they will need to use the library so &lt;code&gt;npm&lt;/code&gt; can grab them, and for convenience it also contains the version of the design system it is built with for developers to track.&lt;/p&gt;

&lt;p&gt;It also contains configurations to define which files to package in the library and how consumers can import modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...  
  "files": [
    "dist"
  ],
  "types": "./dist/index.d.ts",
  "main": "./dist/components.umd.js",
  "module": "./dist/components.es.js",
  "exports": {
    ".": {
      "import": "./dist/components.es.js",
      "require": "./dist/components.umd.js"
    }
  }
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One last thing to note about the build. Although Vite of course provides minifying and other production readiness capabilities, we don't use them. We bundle the component library completely "raw." We find this helps developers debug their applications and report bugs (in those rare cases we make mistakes) with specificity. When they run their own builds, their tooling will apply minifying, tree shaking, and all other production processing to all their code and dependencies including the component library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;As I mentioned before, we limit the functionality of our components to the bare minimum necessary to add value. Still, components are code, and our consumers have expectations of our code. This means we need to test our components as much as we can and where it makes sense.&lt;/p&gt;

&lt;p&gt;Testing is a controversial topic. On Tech Twitter, engineers are more than happy to let you know why you are wrong to test your code in a different way than they do. I can only describe what works for us and why we think so while also stipulating that our methods are subject to change as we get better at this.&lt;/p&gt;

&lt;p&gt;Our approach is heavily inspired by this &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;Storybook blog post&lt;/a&gt;. In it, &lt;a href="https://twitter.com/winkerVSbecks"&gt;Varun Cachar&lt;/a&gt; describes different types of testing, when each is appropriate, and which tools make sense for which types based on the experiences of several large-scale engineering teams. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storybook"&gt;
  &lt;/a&gt;
  Storybook
&lt;/h3&gt;

&lt;p&gt;Storybook is crucial to the development and testing of the component library for us, and it's indispensable documentation for our users.&lt;/p&gt;

&lt;p&gt;During development, we use it in a couple of ways. If the component is simple, then it's nice to have your code and Storybook side by side and watch your changes render as you make them with hot reload. On the other hand, when we aren't clear on what the API for a component should be, it's nice to write a few &lt;a href="https://storybook.js.org/docs/react/get-started/whats-a-story"&gt;stories&lt;/a&gt; to work out the DX for it. Experienced engineers might recognize this approach as analogous to &lt;br&gt;
&lt;a href="https://www.agilealliance.org/glossary/tdd/"&gt;Test-Driven Development (TDD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We apply our design system custom theme in Chakra UI to every story in &lt;code&gt;preview.jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const decorators = [Story =&amp;gt; &amp;lt;ChakraProvider theme={theme}&amp;gt;{Story()}&amp;lt;/ChakraProvider&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During testing, we also use Storybook in multiple ways. For example, because we take a mobile first approach to our components, which matters for &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/#organisms"&gt;organisms&lt;/a&gt; in particular like modals, we configure custom breakpoints like this in &lt;code&gt;preview.jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const parameters = {
    viewport: {
        viewports: {
            xs: {
                name: "XS",
                styles: {
                    height: "568px",
                    width: "320px",
                },
                type: "mobile",
            },
            sm: {
                name: "SM",
                styles: {
                    height: "896px",
                    width: "480px",
                },
                type: "mobile",
            },
            md: {...},
            lg: {...},
            xl: {...},
        defaultViewport: "xs",
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned a CI/CD pipeline that builds the library and publishes it to a private registry. It turns out the pipeline also publishes our component Storybook to an &lt;a href="https://hub.docker.com/_/nginx"&gt;Nginx container&lt;/a&gt; so that the UX team can conduct visual testing on the components, and the ability to toggle among viewport sizes is extremely helpful. &lt;/p&gt;

&lt;p&gt;It's also helpful for development teams who use our components to interact with them. Thanks to &lt;a href="https://storybook.js.org/docs/react/essentials/controls"&gt;Storybook Controls&lt;/a&gt;, they can configure components themselves to see what happens. Thanks to &lt;a href="https://storybook.js.org/addons/@storybook/addon-docs"&gt;Storybook Docs&lt;/a&gt;, they can see the code and API props that generate each story. So Storybook provides a profound documentation benefit throughout the program.&lt;/p&gt;

&lt;p&gt;We also use Storybook for &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;composition testing&lt;/a&gt; occasionally though not as often as the Storybook team may prefer. For example, we have stories that demonstrate how to integrate our form components with React Hook Form, and this exposed issues we had with our &lt;code&gt;ref&lt;/code&gt;s. Generally though, we don't do a lot of composition testing until we need to &lt;a href="https://www.vidyasource.com/blog/code-coverage-is-killing-you"&gt;reproduce a scenario to fix a bug&lt;/a&gt; (and prove we've fixed it eventually).&lt;/p&gt;

&lt;p&gt;We make heavy use of &lt;a href="https://storybook.js.org/addons/@storybook/addon-a11y"&gt;storybook-addon-a11y&lt;/a&gt; to test for accessibility. As you can see from another post by &lt;a href="https://twitter.com/winkerVSbecks"&gt;Varun Cachar&lt;/a&gt;, who is definitely earning his paycheck, &lt;a href="https://storybook.js.org/blog/accessibility-testing-with-storybook/"&gt;Storybook offers a lot of features for accessibility testing&lt;/a&gt;. We make use of all of them. As I mentioned before, even though we do our best with &lt;code&gt;jsx-a11y&lt;/code&gt; in the build and Storybook visually to test for accessibility, it is still incumbent upon teams to add &lt;a href="https://www.npmjs.com/package/@axe-core/react"&gt;@axe-core/react&lt;/a&gt; to &lt;em&gt;their&lt;/em&gt; builds and perform their own visual tests in order to feel as confident as we can that we are providing the best possible experience to all our users.&lt;/p&gt;

&lt;p&gt;Finally, while Storybook has been invaluable for us and I recommend it strongly, I would be remiss if I didn't mention some gotchas. Storybook uses a lot of the same libraries we all use for theming, Markdown, and other things. When there are library conflicts between your version and theirs, bad things happen. For example, we got hit with the same conflict on &lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; as this &lt;a href="https://github.com/storybookjs/storybook/issues/15879"&gt;issue on GitHub&lt;/a&gt;. To its credit, the Storybook team releases frequently. If nothing else, make sure you use identical versions of Storybook and all its addons and that you upgrade as soon as possible when updates are available. &lt;/p&gt;

&lt;p&gt;Storybook is also well aware of the "DivOps" revolution in JavaScript build tooling &lt;a href="https://storybook.js.org/blog/storybook-for-webpack-5/"&gt;and is positioning itself accordingly&lt;/a&gt;. This is exciting since Webpack had a good run but feels more and more like the past, and we wanted to use Vite with Storybook. We installed &lt;a href="https://storybook.js.org/blog/storybook-for-vite/"&gt;storybook-builder-vite&lt;/a&gt; knowing it's experimental to see how it would work for us. Overall, it makes our Storybook builds fast just as we hoped. Still, when you consider &lt;code&gt;storybook-builder-vite&lt;/code&gt; is raw, community-led by great engineers who have already given the community so much with their limited time and can't address every issue, and the general brittleness of Storybook I mentioned, your mileage may vary. Here is our Vite-related Storybook configuration in &lt;code&gt;main.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    ...
    core: {
        builder: "storybook-builder-vite"
    },
    viteFinal: async config =&amp;gt; {
        return {
            ...config,
            plugins: ...,
            optimizeDeps: {
                ...config.optimizeDeps,
                entries: [`${path.relative(config.root, path.resolve(__dirname, "../src"))}/**/__stories__/*.stories.@(ts|tsx)`],
            },
        }
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react-testing-library"&gt;
  &lt;/a&gt;
  React Testing Library
&lt;/h3&gt;

&lt;p&gt;If you have read any of my posts on testing, you know that I think our industry writ large gets testing wrong. We test some things too much. We test other things too little. We don't always know the purpose of our tests. And worst of all, because of perverse incentives, &lt;a href="https://www.vidyasource.com/blog/code-coverage-is-killing-you"&gt;we write tests to check a box&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned earlier that it has been a priority to endow our components with as little behavior as possible. Aside from the fact simpler code is easier to maintain and understand, this approach means fewer surprises for our consumers and less for us to test.&lt;/p&gt;

&lt;p&gt;Or so I thought.&lt;/p&gt;

&lt;p&gt;Our program has a mandatory minimum of 80% code coverage for our applications, and for reasons that don't make a lot of sense to me, that also applies to the component library. In my view, only components that maintain internal state offer the complexity that demands the ceremony of formal tests beyond Storybook, but alas, I don't make the rules.&lt;/p&gt;

&lt;p&gt;React Testing Library has become the &lt;em&gt;de facto&lt;/em&gt; standard for &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;interaction testing&lt;/a&gt; in React, and of course we use it for our own tests. But how could we write tests as quickly as possible to limit the impact of the code coverage standard?&lt;/p&gt;

&lt;p&gt;If you have written tests in any programming language, you understand the concept of "&lt;a href="https://stackoverflow.com/questions/12071344/what-are-fixtures-in-programming"&gt;test fixtures&lt;/a&gt;," the setup for your tests. For us, that means test fixtures are simply components configured with different props.&lt;/p&gt;

&lt;p&gt;But isn't that exactly what stories in Storybook are?&lt;/p&gt;

&lt;p&gt;Storybook offers a feature I love--the ability to import stories into tests written with React Testing Library as fixtures using&lt;br&gt;
&lt;a href="https://storybook.js.org/addons/@storybook/testing-react"&gt;@storybook/testing-react&lt;/a&gt;. Without it, we would need to duplicate &lt;br&gt;
the same code as stories in Storybook and fixtures in tests. The autocompletion is great too thanks to the TypeScript support built into &lt;code&gt;@storybook/testing-react&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aside from all that, our tests work exactly as you would expect if you know React Testing Library.&lt;/p&gt;




&lt;p&gt;I know this is a lot, and it might have been slightly more entertaining as an audiobook. Still, I hope I conveyed the value in design systems and component libraries and the lessons we learned in project management, communications, accessibility, engineering, and testing to build something that will impact the lives of millions. I hope you can do the same...but better.&lt;/p&gt;

&lt;p&gt;Now go take a nap. You earned it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Guia e recursos open source para participar do Hacktoberfest 2021</title>
      <author>Thalles Augusto</author>
      <pubDate>Tue, 19 Oct 2021 20:25:24 +0000</pubDate>
      <link>https://dev.to/theslladev/guia-e-recursos-open-source-para-participar-do-hacktoberfest-2021-562d</link>
      <guid>https://dev.to/theslladev/guia-e-recursos-open-source-para-participar-do-hacktoberfest-2021-562d</guid>
      <description>&lt;p&gt;Olá mundo! Estou fazendo meu primeiro post para divulgar o evento do &lt;em&gt;Hacktoberfest&lt;/em&gt; 2021 e compartilhar conteúdos sobre o &lt;em&gt;open source&lt;/em&gt;, com o principal objetivo de atrair mais pessoas e ajudar quem está começando.&lt;br&gt;
Com esse guia e recursos você conseguirá dar seus primeiros passos no mundo open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-opensource"&gt;
  &lt;/a&gt;
  O que é Open-Source?
&lt;/h2&gt;

&lt;p&gt;O open source ou “código aberto” significa que o código fonte de um site, sistema ou aplicativo é aberto ao público. É um ótimo movimento para o desenvolvimento de softwares pois ele possibilita o acesso e a modificação ao código fonte desses sistemas. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“O código aberto permite um método de desenvolvimento de software que aproveita o poder da revisão por pares distribuída e a transparência do processo. A promessa do código aberto é de maior qualidade, melhor confiabilidade, maior flexibilidade, menor custo e o fim do aprisionamento predatório de fornecedores.”&lt;/em&gt;&lt;/strong&gt;, &lt;a href="https://opensource.org/about"&gt;Open Source Initiative(OSI)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso é muito bom para a participação e colaboração ativa da comunidade de usuários e desenvolvedores para dar seus feedbacks, sugerir mudanças, realizar testes, corrigir erros e fazer com que esses sistemas tenham uma melhora contínua e de qualidade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exemplos-de-projetos-open-source"&gt;
  &lt;/a&gt;
  Exemplos de projetos open source
&lt;/h2&gt;

&lt;p&gt;Lista com alguns repositórios open source conhecidos :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sistema Operacional &lt;a href="https://github.com/torvalds/linux"&gt;Linux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Navegador &lt;a href="https://github.com/mozilla/gecko-dev"&gt;Firefox&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Editor de sprite &lt;a href="https://github.com/aseprite/aseprite"&gt;Aseprite&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Editor de código &lt;a href="https://github.com/microsoft/vscode"&gt;VSCode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Linguagens e Framework/Libs:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flutter/flutter"&gt;Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twbs/bootstrap"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Kit de ferramentas de ícones &lt;a href="https://github.com/FortAwesome/Font-Awesome"&gt;FontAwesome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sistema de Versionamento de código &lt;a href="https://github.com/git/git"&gt;GIT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Gravação de tela e streaming &lt;a href="https://github.com/obsproject/obs-studio"&gt;OBS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aplicativo de voz &lt;a href="https://github.com/discordjs/discord.js"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/godotengine/godot"&gt;Game Engine Godot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para saber mais sobre como contribuir para o Open Source, veja este guia sobre como fazer contribuições, para novatos e veteranos: &lt;a href="https://opensource.guide/pt/how-to-contribute/"&gt;Guias de código aberto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recomendo também esse ótimo &lt;a href="https://www.udemy.com/course/git-e-github-para-iniciantes/"&gt;curso de Git e Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-hacktoberfest-2021"&gt;
  &lt;/a&gt;
  O que é Hacktoberfest 2021?
&lt;/h2&gt;

&lt;p&gt;É um &lt;a href="https://pt.wikipedia.org/wiki/Hackathon"&gt;Hackathon&lt;/a&gt; que está na sua 8° edição, apoiado pela DigitalOcean, Intel, Dev.to, GitHub/GitLab e outros. Esse evento acontece durante todo o mês de outubro celebrando e apoiando os projetos e softwares e de código aberto. Nesse período seu objetivo é fazer contribuições, convidar e incentivar a comunidade a fazer colaborações para o mundo open source. Existe várias formas de se fazer isso:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prepare e compartilhe seu projeto para receber colaborações&lt;/li&gt;
&lt;li&gt;Contribua com feedback, sugestões, traduções, relatando bugs ou melhorias no código para um projeto&lt;/li&gt;
&lt;li&gt;Organize um evento sobre open-source e hacktoberfest&lt;/li&gt;
&lt;li&gt;Ajude a comunidade com mentoria, criando e compartilhando conteúdos&lt;/li&gt;
&lt;li&gt;Doe diretamente para projetos de código aberto&lt;/li&gt;
&lt;li&gt;De uma “star” / “estrela” no repositório do projeto&lt;/li&gt;
&lt;li&gt;Se voluntarie como mantenedor do repositório para ajudar no que for possível &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#vantagens-de-participar"&gt;
  &lt;/a&gt;
  Vantagens de participar
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Ótima forma de aprender&lt;/li&gt;
&lt;li&gt;Fazer networking com pessoas do mundo todo&lt;/li&gt;
&lt;li&gt;Apoiar o movimento open source&lt;/li&gt;
&lt;li&gt;Ao concluir o desafio você tem as opções de escolher uma camisa exclusiva do evento ou plantar árvores em seu nome e ajudar a tornar o Hacktoberfest 2021 mais neutro em carbono.(&lt;strong&gt;OBS&lt;/strong&gt;: apenas os primeiros 50,000 participantes que concluírem o desafio ganharam a camiseta e os adesivos)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbZt5zBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7qpy5pui8ka9a8id4wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbZt5zBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7qpy5pui8ka9a8id4wy.png" alt="Camiseta exclusiva do evento Hacktoberfest 2020 e adesivos das marcas apoiadoras"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-isso-funciona"&gt;
  &lt;/a&gt;
  Como isso funciona?
&lt;/h2&gt;

&lt;p&gt;Os mantenedores determinam se seus projetos de código aberto participam adicionando o tópico ‘hacktoberfest’ no repositório.&lt;br&gt;
Pull Requests(ou também conhecidos como PR para abreviar) de qualidade enviadas no GitHub e GitLab são recompensadas. &lt;br&gt;
A manutenção envolvida dos repositórios marcados do Hacktoberfest é recompensada. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regras"&gt;
  &lt;/a&gt;
  Regras
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As solicitações pull podem ser feitas em qualquer repositório/projetos hospedados no GitHub ou GitLab. Procure o &lt;a href="https://github.com/topics/hacktoberfest"&gt;tópico 'hacktoberfest'&lt;/a&gt; para saber se um projeto está participando do Hacktoberfest.&lt;/li&gt;
&lt;li&gt;A pull request deve conter commits que você mesmo fez.&lt;/li&gt;
&lt;li&gt;Se um mantenedor relatar sua solicitação de pull como spam, isso não será contabilizado para sua participação no Hacktoberfest.&lt;/li&gt;
&lt;li&gt;Se um mantenedor relatar um comportamento que não esteja de acordo com o código de conduta do projeto, você não poderá participar.&lt;/li&gt;
&lt;li&gt;Um pull request é considerado aprovado quando têm uma revisão geral de aprovação dos mantenedores, ou foi merged(mesclada) pelos mantenedores, ou recebeu o rótulo de 'hacktoberfest-accepted.&lt;/li&gt;
&lt;li&gt;Para obter a premiação, você deve ter quatro solicitações de pull (PR) aprovadas em projetos aceitos entre 1 e 31 de outubro em qualquer fuso horário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;O que não fazer!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Em linha com o valor do Hacktoberfest “quantidade é divertido, qualidade é a chave”, aqui estão alguns exemplos de PRs que é considerado contribuições de baixa qualidade e que são desencorajadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PRs que são automatizados (por exemplo, PRs de abertura com script para remover espaços em branco/otimizar imagens)&lt;/li&gt;
&lt;li&gt;PRs que são perturbadores (por exemplo, tomar a branch/commit de outra pessoa e fazer um PR)&lt;/li&gt;
&lt;li&gt;PRs que são considerados por um mantenedor do projeto como um obstáculo em vez de ajudar&lt;/li&gt;
&lt;li&gt;Algo que é claramente uma tentativa de simplesmente marcar com +1 sua contagem de PR&lt;/li&gt;
&lt;li&gt;Por último, mas não menos importante, um PR para corrigir um erro de digitação está bem. 5 PRs para remover espaços em branco perdidos ... não é.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#como-participar"&gt;
  &lt;/a&gt;
  Como participar?
&lt;/h3&gt;

&lt;p&gt;Basta fazer login com sua conta do GitHub ou GitLab no &lt;a href="https://hacktoberfest.digitalocean.com/register"&gt;site oficial do hacktoberfest&lt;/a&gt;, após ter feito o login você já está participando do evento!&lt;/p&gt;

&lt;p&gt;Ainda não conhece o Git e GitHub? De uma olhada nesses &lt;a href="https://docs.github.com/pt/get-started/quickstart/git-and-github-learning-resources"&gt;recursos de aprendizagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8xNsv-rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94dokfniqdh5fy05pjhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8xNsv-rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94dokfniqdh5fy05pjhk.png" alt="Página de login do evento Hacktoberfest 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo então é buscar por projetos que contenham o &lt;a href="https://github.com/topics/hacktoberfest"&gt;tópico ‘hacktoberfest’&lt;/a&gt; e enviar as pull request.&lt;br&gt;
&lt;strong&gt;Atenção!&lt;/strong&gt; Certifique-se de se inscrever no site oficial do Hacktoberfest para que suas solicitações de pull sejam contabilizadas. &lt;/p&gt;

&lt;p&gt;Selecionei alguns projetos com maneiras simples de contribuir:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-contributions"&gt;
  &lt;/a&gt;
  First Contributions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Repositório feito para ajudar iniciantes a contribuir para projetos de código aberto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firstcontributions/first-contributions"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/firstcontributions/first-contributions/blob/master/translations/README.pt_br.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#filosofunk"&gt;
  &lt;/a&gt;
  Filosofunk
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Projeto feito para juntar frases engraçadas, divertidas, filosóficas ou criativas de músicas de funk. Você pode adicionar uma nova frase apenas editando um arquivo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IgorRozani/filosofunk"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IgorRozani/filosofunk#sugerir-mudan%C3%A7as"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#canvaz"&gt;
  &lt;/a&gt;
  Canvaz
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Use o elemento HTML canvas para fazer uma arte para o desafio de celebração do hacktoberfest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zero-to-mastery/Canvaz"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zero-to-mastery/Canvaz#%EF%B8%8F-how-to-contribute"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#free-it-courses"&gt;
  &lt;/a&gt;
  Free IT Courses
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Repositório com os melhores cursos de TI de graça&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alinebastos/free-courses"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Como contribuir: se aprova e conhece algum curso que não esteja na lista adicione o link e o nome do curso na seção correta.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-pixel-art"&gt;
  &lt;/a&gt;
  Open Pixel Art
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Um projeto colaborativo de pixel art para ensinar as pessoas a contribuir com o código aberto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twilio-labs/open-pixel-art/tree/master/docs/br"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twilio-labs/open-pixel-art/blob/master/docs/br/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hacktoberfest-animations"&gt;
  &lt;/a&gt;
  Hacktoberfest Animations
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Crie uma animação do título no seletor de animações para o Hacktoberfest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/NiallEccles/Hacktoberfest-animations"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NiallEccles/Hacktoberfest-animations/blob/master/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#simple-icons"&gt;
  &lt;/a&gt;
  Simple Icons
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Projeto free com mais de 2000 ícones SVG de marcas populares, você pode requisitar um novo ícone que ainda não tem e adicioná-lo ou escolher um ícone já solicitado e apenas adicionar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/simple-icons/simple-icons"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/simple-icons/simple-icons/blob/develop/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cloud-haiku"&gt;
  &lt;/a&gt;
  Cloud Haiku
&lt;/h3&gt;

&lt;p&gt;Este projeto com uma simples edição você consegue adicionar um poema em forma de &lt;a href="https://pt.wikipedia.org/wiki/Haiku"&gt;“haiku”&lt;/a&gt; e se divertir enquanto o faz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/do-community/cloud_haiku"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/do-community/cloud_haiku#contributing"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sabe inglês ou quer praticar? Ajude contribuindo com esses e outros projetos fazendo correções e traduções:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elixir-school"&gt;
  &lt;/a&gt;
  Elixir School
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Elixir School é uma escola para aprender e dominar a linguagem de programação Elixir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirschool/elixirschool"&gt;Repositório&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirschool/elixirschool/blob/master/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você pode acompanhar seu progresso no &lt;a href="https://hacktoberfest.digitalocean.com/profile"&gt;perfil&lt;/a&gt; do site oficial do evento e ver mais informações sobre cada uma das solicitações.&lt;/p&gt;

&lt;p&gt;Acesse o &lt;a href="https://discord.com/invite/hacktoberfest"&gt;discord&lt;/a&gt; oficial do Hacktoberfest para fazer networking, tirar dúvidas e compartilhar e procurar por projetos&lt;/p&gt;

&lt;p&gt;Veja a lista de todos os &lt;a href="https://hacktoberfest.digitalocean.com/events"&gt;eventos&lt;/a&gt; que estão acontecendo durante o todo o mês de outubro&lt;/p&gt;

&lt;p&gt;Caso ainda tenha alguma dúvida você pode perguntar nos comentários abaixo, me mandar uma mensagem no meu &lt;a href="https://www.linkedin.com/in/thalles-augusto/"&gt;linkedin&lt;/a&gt; ou consultar as &lt;a href="https://hacktoberfest.digitalocean.com/faq"&gt;perguntas mais frequentes respondidas aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Muito obrigado e espero que vocês tenham entendido o conteúdo e as vantagens de fazer parte do open source! E não pare por aqui continue buscando mais conhecimento.&lt;/p&gt;

&lt;p&gt;O conteúdo foi útil para você de alguma forma? Contribua compartilhando-o com suas conexões, nas redes sociais e/ou dando um “like”, isso ajudaria muito.&lt;/p&gt;

&lt;p&gt;Fique a vontade para dar seu feedback e sugestões!&lt;/p&gt;

&lt;p&gt;Conhece e indica algum projeto open source ou recurso que não foi citado no post? Compartilha aí nos comentários&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>braziliandevs</category>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How to make comical visualizations in Python: Explained using Netflix Movie and TV Show dataset</title>
      <author>Paridhi Agarwal</author>
      <pubDate>Tue, 19 Oct 2021 20:18:12 +0000</pubDate>
      <link>https://dev.to/paridhi/how-to-make-comical-visualizations-in-python-explained-using-netflix-movie-and-tv-show-dataset-4418</link>
      <guid>https://dev.to/paridhi/how-to-make-comical-visualizations-in-python-explained-using-netflix-movie-and-tv-show-dataset-4418</guid>
      <description>&lt;p&gt;After you’re done watching a &lt;a href="https://www.youtube.com/watch?v=3sxg1xXmd0I"&gt;brilliant show&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=prwUFBsDRLk&amp;amp;t=10s"&gt;movie&lt;/a&gt; on Netflix, does it ever occur to you just how awesome Netflix is for giving you access to this amazing plethora of content? Surely, I’m not alone in this, am I?&lt;/p&gt;

&lt;p&gt;One thought leads to another, and before you know it, you’ve made up your mind to do an exploratory data analysis to find out more about who the most popular actors are and which country prefers which genre.&lt;/p&gt;

&lt;p&gt;Now, I’ve spent my fair share of time making regular bar plots and pie plots using Python, and while they do a perfect job in conveying the results, I wanted to add a little fun element to this project.&lt;/p&gt;

&lt;p&gt;I recently learned that you can create &lt;a href="https://matplotlib.org/stable/gallery/showcase/xkcd.html"&gt;XKCD-like plots&lt;/a&gt; in Matplotlib, Python’s most popular data viz library, and decided that I should &lt;em&gt;comify&lt;/em&gt; all my plots in this project just to make things a little more interesting.&lt;/p&gt;

&lt;p&gt;Let’s take a look at what the data has to say!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The data&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I used &lt;a href="https://www.kaggle.com/shivamb/netflix-shows"&gt;this dataset&lt;/a&gt;, that’s available on Kaggle. It contains 7,787 movie and TV show titles available on Netflix as of 2020.&lt;/p&gt;

&lt;p&gt;To start off, I installed the required libraries and read the CSV file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['figure.dpi'] = 200

df = pd.read_csv("../input/netflix-shows/netflix_titles.csv")
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbRYNRzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyuz5q0e5enupbwbxqp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbRYNRzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyuz5q0e5enupbwbxqp3.png" alt="The raw dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also added new features to the dataset that will be used later on in the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df["date_added"] = pd.to_datetime(df['date_added'])
df['year_added'] = df['date_added'].dt.year.astype('Int64')
df['month_added'] = df['date_added'].dt.month

df['season_count'] = df.apply(lambda x : x['duration'].split(" ")[0] if "Season" in x['duration'] else "", axis = 1)
df['duration'] = df.apply(lambda x : x['duration'].split(" ")[0] if "Season" not in x['duration'] else "", axis = 1)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sesgIFsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9lywia58wdj73aqa9d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sesgIFsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9lywia58wdj73aqa9d0.png" alt="Dataset after adding a few other features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can get to the interesting stuff!&lt;/p&gt;

&lt;p&gt;Let me also add that, to XKCDify plots in matplotlib, you just need to engulf all your plotting code within the following block and you’ll be all set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with plt.xkcd():
    # all your regular visualization code goes in here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Q8hmzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2ytvnu2w0li1fcbvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Q8hmzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2ytvnu2w0li1fcbvw.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-netflix-through-the%C2%A0years"&gt;
  &lt;/a&gt;
  1. Netflix through the years
&lt;/h3&gt;

&lt;p&gt;First, I thought it would be worth looking at a timeline that depicts the evolution of Netflix over the years.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from datetime import datetime
## these go on the numbers below
tl_dates = [
    "1997\nFounded",
    "1998\nMail Service",
    "2003\nGoes Public",
    "2007\nStreaming service",
    "2016\nGoes Global",
    "2021\nNetflix &amp;amp; Chill"
]
tl_x = [1, 2, 4, 5.3, 8,9]
## the numbers go on these
tl_sub_x = [1.5,3,5,6.5,7]
tl_sub_times = [
    "1998","2000","2006","2010","2012"
]
tl_text = [
    "Netflix.com launched",
    "Starts\nPersonal\nRecommendations","Billionth DVD Delivery","Canadian\nLaunch","UK Launch"]
with plt.xkcd():
# Set figure &amp;amp; Axes
    fig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True)
    ax.set_ylim(-2, 1.75)
    ax.set_xlim(0, 10)
# Timeline : line
    ax.axhline(0, xmin=0.1, xmax=0.9, c='deeppink', zorder=1)
# Timeline : Date Points
    ax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='palevioletred', zorder=2)
    ax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='darkmagenta', zorder=3)
    # Timeline : Time Points
    ax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='darkmagenta',zorder=4)
# Date Text
    for x, date in zip(tl_x, tl_dates):
        ax.text(x, -0.55, date, ha='center', 
                fontfamily='serif', fontweight='bold',
                color='royalblue',fontsize=12)
# Stemplot : vertical line
    levels = np.zeros(len(tl_sub_x))    
    levels[::2] = 0.3
    levels[1::2] = -0.3
    markerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    
    plt.setp(baseline, zorder=0)
    plt.setp(markerline, marker=',', color='darkmagenta')
    plt.setp(stemline, color='darkmagenta')
# Text
    for idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):
        ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', 
                fontfamily='serif', fontweight='bold',
                color='royalblue', fontsize=11)
ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', 
            fontfamily='serif',color='royalblue')

# Spine
    for spine in ["left", "top", "right", "bottom"]:
        ax.spines[spine].set_visible(False)
# Ticks    
    ax.set_xticks([]) 
    ax.set_yticks([])
# Title
    ax.set_title("Netflix through the years", fontweight="bold", fontfamily='serif', fontsize=16, color='royalblue')
    ax.text(2.4,1.57,"From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?", fontfamily='serif', fontsize=12, color='mediumblue')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vehYkN9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48s7g44k21wm6s536ys8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vehYkN9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48s7g44k21wm6s536ys8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This plot paints a pretty decent picture of Netflix’s journey. Also, the plot looks hand-drawn because of the &lt;code&gt;plt.xkcd()&lt;/code&gt; function. Wicked stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-movies-vs-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  2. Movies vs TV Shows
&lt;/h3&gt;

&lt;p&gt;Next, I decided to take a look at the ratio of Movies vs TV Shows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "type"
grouped = df[col].value_counts().reset_index()
grouped = grouped.rename(columns = {col : "count", "index" : col})
with plt.xkcd():
    explode = (0, 0.1)  # only "explode" the 2nd slice (i.e. 'TV Show')
fig1, ax1 = plt.subplots(figsize=(5, 5), dpi=100)
    ax1.pie(grouped["count"], explode=explode, labels=grouped["type"], autopct='%1.1f%%',
        shadow=True, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_EYEcT-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33xm9mfhe747u2gwahex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_EYEcT-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33xm9mfhe747u2gwahex.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of TV shows on the platform is less than a third of the total content. So probably, both you and I have better chances of finding a relatively good movie than a TV Show on Netflix. &lt;em&gt;*sighs*&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-countries-with-the-most%C2%A0content"&gt;
  &lt;/a&gt;
  3. Countries with the most content
&lt;/h3&gt;

&lt;p&gt;For my third visualization, I wanted to make a horizontal bar graph that represented the top 25 countries with the most content. The &lt;code&gt;country&lt;/code&gt; column in the dataframe had a few rows that contained more than 1 country (separated by commas).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDI945zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emv3gmyjtmb204h13xbj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDI945zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emv3gmyjtmb204h13xbj.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To handle this, I split the data in the country column with &lt;code&gt;", “&lt;/code&gt; as the separator and then put all the countries into a list called &lt;code&gt;categories&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from collections import Counter
col = "country"
categories = ", ".join(df[col].fillna("")).split(", ")
counter_list = Counter(categories).most_common(25)
counter_list = [_ for _ in counter_list if _[0] != ""]
labels = [_[0] for _ in counter_list]
values = [_[1] for _ in counter_list]
with plt.xkcd():
    fig, ax = plt.subplots(figsize=(10, 10), dpi=100)
    y_pos = np.arange(len(labels))
    ax.barh(y_pos, values, align='center')
    ax.set_yticks(y_pos)
    ax.set_yticklabels(labels)
    ax.invert_yaxis()  # labels read top-to-bottom
    ax.set_xlabel('Content')
    ax.set_title('Countries with most content')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryf8T8sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6njf6ovk5fmkqst3a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryf8T8sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6njf6ovk5fmkqst3a6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some overall thoughts after looking at the plot above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The vast majority of content on Netflix is from the United States (quite obvious).&lt;/li&gt;
&lt;li&gt;Even though Netflix launched quite late in India (in 2016), it’s already in the second position right after the US. So, India is a big market for Netflix.&lt;/li&gt;
&lt;li&gt;I’m going to look for content from Thailand on Netflix, now that I know that it’s there on the platform, brb.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-popular-directors-and%C2%A0actors"&gt;
  &lt;/a&gt;
  4. Popular directors and actors
&lt;/h3&gt;

&lt;p&gt;To take a look at the popular directors and actors, I decided to plot a figure (each) with six subplots from the top six countries with the most content and make horizontal bar charts for each subplot. Take a look at the plots below and read that first line again. 😛&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-popular-directors"&gt;
  &lt;/a&gt;
  a. Popular directors:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from collections import Counter
from matplotlib.pyplot import figure
import math
colours = ["orangered", "mediumseagreen", "darkturquoise", "mediumpurple", "deeppink", "indianred"]
countries_list = ["United States", "India", "United Kingdom", "Japan", "France", "Canada"]
col = "director"
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        country_df = df[df["country"]==country]
        categories = ", ".join(country_df[col].fillna("")).split(", ")
        counter_list = Counter(categories).most_common(6)
        counter_list = [_ for _ in counter_list if _[0] != ""]
        labels = [_[0] for _ in counter_list][::-1]
        values = [_[1] for _ in counter_list][::-1]
        if max(values)&amp;lt;10:
            values_int = range(0, math.ceil(max(values))+1)
        else:
            values_int = range(0, math.ceil(max(values))+1, 2)
        plt.subplot(2, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Popular Directors with the most content')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpuQr3fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkgbfri13l0nhhh84u8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpuQr3fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkgbfri13l0nhhh84u8v.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#b-popular%C2%A0actors"&gt;
  &lt;/a&gt;
  b. Popular actors:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "cast"
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        df["from_country"] = df['country'].fillna("").apply(lambda x : 1 if country.lower() in x.lower() else 0)
        small = df[df["from_country"] == 1]
        cast = ", ".join(small['cast'].fillna("")).split(", ")
        tags = Counter(cast).most_common(11)
        tags = [_ for _ in tags if "" != _[0]]
        labels, values = [_[0]+"  " for _ in tags][::-1], [_[1] for _ in tags][::-1]
        if max(values)&amp;lt;10:
            values_int = range(0, math.ceil(max(values))+1)
        elif max(values)&amp;gt;=10 and max(values)&amp;lt;=20:
            values_int = range(0, math.ceil(max(values))+1, 2)
        else:
            values_int = range(0, math.ceil(max(values))+1, 5)
        plt.subplot(2, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Popular Actors with the most content')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSH7qt7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r4floab1c821ytqnsrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSH7qt7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r4floab1c821ytqnsrx.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-some-of-the-oldest-movies-and-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  5. Some of the oldest movies and TV shows
&lt;/h3&gt;

&lt;p&gt;I thought it would  be quite interesting to look at the oldest movies and TV shows that are available on Netflix and how long back they’re dated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-oldest%C2%A0movies"&gt;
  &lt;/a&gt;
  a. Oldest movies:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;small = df.sort_values("release_year", ascending = True)
#small.duration stores empty values if the content type is 'TV Show'
small = small[small['duration'] != ""].reset_index()
small[['title', "release_year"]][:15]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jBF7yGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdo47l71cfv06rykkfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jBF7yGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdo47l71cfv06rykkfc.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#b-oldest-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  b. Oldest TV shows:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;small = df.sort_values("release_year", ascending = True)
#small.season_count stores empty values if the content type is 'Movie'
small = small[small['season_count'] != ""].reset_index()
small = small[['title', "release_year"]][:15]
small
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfAPQRrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdnfbqynuk0jlldzyr8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfAPQRrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdnfbqynuk0jlldzyr8t.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woah, Netflix has some &lt;em&gt;realllyyy&lt;/em&gt; old movies and TV shows, some even released more than 80 years ago. Have you watched any of these?&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Fun fact&lt;/strong&gt;: When he began implementing Python, Guido van Rossum was also reading the published scripts from &lt;a href="https://en.wikipedia.org/wiki/Monty_Python"&gt;“Monty Python’s Flying Circus”&lt;/a&gt;, a BBC comedy series from the 1970s (that was added on Netflix in 2018). Van Rossum thought he needed a name that was short, unique, and slightly mysterious, so he decided to call the language Python.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-does-netflix-have-the-latest%C2%A0content"&gt;
  &lt;/a&gt;
  6. Does Netflix have the latest content?
&lt;/h3&gt;

&lt;p&gt;Yes, Netflix is cool and all for having content from a century ago, but does it also have the latest movies and TV shows? To find this out, first I calculated the difference between the date on which the content was added on Netflix and the release year of that content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df["year_diff"] = df["year_added"]-df["release_year"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I created a scatter plot with x-axis as the &lt;em&gt;year difference&lt;/em&gt; and y-axis as the &lt;em&gt;number of movies/TV shows&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "year_diff"
only_movies = df[df["duration"]!=""]
only_shows = df[df["season_count"]!=""]
grouped1 = only_movies[col].value_counts().reset_index()
grouped1 = grouped1.rename(columns = {col : "count", "index" : col})
grouped1 = grouped1.dropna()
grouped1 = grouped1.head(20)
grouped2 = only_shows[col].value_counts().reset_index()
grouped2 = grouped2.rename(columns = {col : "count", "index" : col})
grouped2 = grouped2.dropna()
grouped2 = grouped2.head(20)
with plt.xkcd():
    figure(num=None, figsize=(8, 5)) 
    plt.scatter(grouped1[col], grouped1["count"], color = "hotpink")
    plt.scatter(grouped2[col], grouped2["count"], color = '#88c999')
    values_int = range(0, math.ceil(max(grouped1[col]))+1, 2)
    plt.xticks(values_int)
    plt.xlabel("Difference between the year when the content has been\n added on Netflix and the realease year")
    plt.ylabel("Number of Movies/TV Shows")
    plt.legend(["Movies", "TV Shows"])
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olyW1w0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54g5bcww2motog4f4y1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olyW1w0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54g5bcww2motog4f4y1u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the majority of the content on Netflix has been added within a year of its release date. So, Netflix does have the latest content most of the time!&lt;/p&gt;

&lt;p&gt;If you’re still here, here’s an xkcd comic for you, you’re welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5H2gICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AuYPz0xku_bVeAWVV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5H2gICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AuYPz0xku_bVeAWVV.png" alt="https://cdn-images-1.medium.com/max/1600/0*uYPz0xku_bVeAWVV.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-what-kind-of-content-is-netflix-focusing%C2%A0upon"&gt;
  &lt;/a&gt;
  7. What kind of content is Netflix focusing upon?
&lt;/h3&gt;

&lt;p&gt;I also wanted to explore the &lt;code&gt;rating&lt;/code&gt; column and compare the amount of content that Netflix has been producing for kids, teens, and adults and if their focus has shifted from one group to the other over the years.&lt;/p&gt;

&lt;p&gt;To achieve this, first I took a look at the unique ratings in the dataframe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(df['rating'].unique())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['TV-MA' 'R' 'PG-13' 'TV-14' 'TV-PG' 'NR' 'TV-G' 'TV-Y' nan 'TV-Y7' 'PG' 'G' 'NC-17' 'TV-Y7-FV' 'UR']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I classified the ratings according to the groups (namely — &lt;em&gt;Little Kids&lt;/em&gt;, &lt;em&gt;Older Kids&lt;/em&gt;, &lt;em&gt;Teens,&lt;/em&gt; and &lt;em&gt;Mature&lt;/em&gt;) they fall into and changed their values in the &lt;code&gt;rating&lt;/code&gt; column to their group names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ratings_group_list = ['Little Kids', 'Older Kids', 'Teens', 'Mature']
ratings_dict={
    'TV-G': 'Little Kids',
    'TV-Y': 'Little Kids',
    'G': 'Little Kids',
    'TV-PG': 'Older Kids',
    'TV-Y7': 'Older Kids',
    'PG': 'Older Kids',
    'TV-Y7-FV': 'Older Kids',
    'PG-13': 'Teens',
    'TV-14': 'Teens',
    'TV-MA': 'Mature',
    'R': 'Mature',
    'NC-17': 'Mature'
}
for rating_val, rating_group in ratings_dict.items():
    df.loc[df.rating == rating_val, "rating"] = rating_group
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I made line plots with &lt;em&gt;year&lt;/em&gt; on the x-axis and &lt;em&gt;content count&lt;/em&gt; on the y-axis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df['rating_val']=1
x=0
labels=['kinda\nless', 'not so\nbad', 'holy shit\nthat\'s too\nmany']
with plt.xkcd():
    for r in ratings_group_list:
        grouped = df[df['rating']==r]
        year_df = grouped.groupby(['year_added']).sum()
        year_df.reset_index(level=0, inplace=True)
        plt.plot(year_df['year_added'], year_df['rating_val'], color=colours[x], marker='o')
        values_int = range(2008, math.ceil(max(year_df['year_added']))+1, 2)
        plt.yticks([200, 600, 1000], labels)
        plt.xticks(values_int)
        plt.title('Count of shows and movies that Netflix\n has been producing for different audiences', fontsize=12)
        plt.xlabel('Year', fontsize=14)
        plt.ylabel('Content Count', fontsize=14)
        x+=1
    plt.legend(ratings_group_list)
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAckInAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ARFPCcXrWcHaeEIsKNxZkLg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAckInAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ARFPCcXrWcHaeEIsKNxZkLg.png" alt="https://cdn-images-1.medium.com/max/1600/1*RFPCcXrWcHaeEIsKNxZkLg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, so the content count for mature audiences on Netflix is way more than the other groups. Another interesting observation is that there was a surge in the count of content produced for &lt;em&gt;Little Kids&lt;/em&gt; from &lt;em&gt;2019–2020&lt;/em&gt; whereas the content for &lt;em&gt;Older Kids&lt;/em&gt;, &lt;em&gt;Teens,&lt;/em&gt; and &lt;em&gt;Mature Audiences&lt;/em&gt; decreased during that time period.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-top-genres-countrywise"&gt;
  &lt;/a&gt;
  8. Top Genres (Countrywise)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "listed_in"
colours = ["violet", "cornflowerblue", "darkseagreen", "mediumvioletred", "blue", "mediumseagreen", "darkmagenta", "darkslateblue", "seagreen"]
countries_list = ["United States", "India", "United Kingdom", "Japan", "France", "Canada", "Spain", "South Korea", "Germany"]
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        df["from_country"] = df['country'].fillna("").apply(lambda x : 1 if country.lower() in x.lower() else 0)
        small = df[df["from_country"] == 1]
        genre = ", ".join(small['listed_in'].fillna("")).split(", ")
        tags = Counter(genre).most_common(3)
        tags = [_ for _ in tags if "" != _[0]]
        labels, values = [_[0]+"  " for _ in tags][::-1], [_[1] for _ in tags][::-1]
        if max(values)&amp;gt;200:
            values_int = range(0, math.ceil(max(values)), 100)
        elif max(values)&amp;gt;100 and max(values)&amp;lt;=200:
            values_int = range(0, math.ceil(max(values))+50, 50)
        else:
            values_int = range(0, math.ceil(max(values))+25, 25)
        plt.subplot(3, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Top Genres')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HW65HGex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2A7mgX4bEYkVf8JLEP1qQBRg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HW65HGex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2A7mgX4bEYkVf8JLEP1qQBRg.png" alt="https://cdn-images-1.medium.com/max/2400/1*7mgX4bEYkVf8JLEP1qQBRg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key takeaways from this plot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dramas and Comedies are the most popular genres in almost every country.&lt;/li&gt;
&lt;li&gt;Japan watches a LOT of anime!&lt;/li&gt;
&lt;li&gt;Romantic TV Shows and TV Dramas are big in South Korea. (I’m addicted to K-Dramas too, btw 😍)&lt;/li&gt;
&lt;li&gt;Children and Family Movies are the third most popular genre in Canada.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-wordclouds"&gt;
  &lt;/a&gt;
  9. Wordclouds
&lt;/h3&gt;

&lt;p&gt;I finally ended the project with two word clouds — first, a word cloud for the &lt;code&gt;description&lt;/code&gt; column and a second one for the &lt;code&gt;title&lt;/code&gt; column.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-wordcloud-for-description"&gt;
  &lt;/a&gt;
  a. Wordcloud for Description:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from wordcloud import WordCloud
import random
from PIL import Image
import matplotlib
# Custom colour map based on Netflix palette
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ['#221f1f', '#b20710'])
text = str(list(df['description'])).replace(',', '').replace('[', '').replace("'", '').replace(']', '').replace('.', '')
mask = np.array(Image.open('../input/finallogo/New Note.png'))
wordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)
plt.figure( figsize=(5,5))
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bziu7gBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AoifDFya692J-7Q3bFnX-og.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bziu7gBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AoifDFya692J-7Q3bFnX-og.png" alt="https://cdn-images-1.medium.com/max/1600/1*oifDFya692J-7Q3bFnX-og.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Live, love, life, friend, family, world,&lt;/em&gt; and &lt;em&gt;find&lt;/em&gt; are some of the most frequent words to appear in the descriptions of movies and shows. Another interesting thing is that the words — &lt;em&gt;one, two, three,&lt;/em&gt; and &lt;em&gt;four&lt;/em&gt; — all appear in the word cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-wordcloud-for%C2%A0title"&gt;
  &lt;/a&gt;
  b. Wordcloud for Title:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ['#221f1f', '#b20710'])
text = str(list(df['title'])).replace(',', '').replace('[', '').replace("'", '').replace(']', '').replace('.', '')
mask = np.array(Image.open('../input/finallogo/New Note.png'))
wordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)
plt.figure( figsize=(5,5))
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJqX80lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABRbwBF9rIUO1F8OvvQjiVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJqX80lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABRbwBF9rIUO1F8OvvQjiVw.png" alt="https://cdn-images-1.medium.com/max/1600/1*BRbwBF9rIUO1F8OvvQjiVw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see &lt;em&gt;Christmas&lt;/em&gt; right at the center of this word cloud? Seems like there is an abundance of Christmas movies on Netflix. Other popular words are — &lt;em&gt;Love, World, Man, Life, Story, Live, Secret, Girl, Boy, American, Game, Night, Last, Time,&lt;/em&gt; and &lt;em&gt;Day.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-thats%C2%A0it"&gt;
  &lt;/a&gt;
  And that’s it!
&lt;/h3&gt;

&lt;p&gt;Working on projects like these is what makes Data Science fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to add unique projects like this to your resume, join &lt;a href="https://buildtolearn.club/"&gt;Build To Learn Club&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m building it to help aspiring Data professionals build a “dangerously good” resume. It’s for Python enthusiasts who are tired of doing online courses.&lt;/p&gt;

&lt;p&gt;If you have any questions/feedback or would just like to chat, you can reach out to me on &lt;a href="https://twitter.com/paridhitweets"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/paridhi-agarwal-23789b165/"&gt;LinkedIn&lt;/a&gt;. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Watching the Requests Go By: Reconstructing an API Spec with APIClarity</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 19 Oct 2021 20:02:44 +0000</pubDate>
      <link>https://dev.to/mbogan/watching-the-requests-go-by-reconstructing-an-api-spec-with-apiclarity-31h8</link>
      <guid>https://dev.to/mbogan/watching-the-requests-go-by-reconstructing-an-api-spec-with-apiclarity-31h8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reconstructing-an-openapi-specification-through-observation"&gt;
  &lt;/a&gt;
  Reconstructing an OpenAPI Specification through Observation
&lt;/h3&gt;

&lt;p&gt;APIs are ubiquitous in modern microservice architectures. They make it easy to consume data from external apps and reduce the amount of code developers need to write. The general result is easier delivery of useful software products. However, the prevalence of APIs means they represent a large attack surface. In fact, &lt;a href="https://www.gartner.com/en/webinars/4002323/api-security-protect-your-apis-from-attacks-and-data-breaches"&gt;Gartner predicts&lt;/a&gt; that by 2022, API attacks will be the most common attack vector for enterprise web applications. Similarly, an &lt;a href="https://siliconangle.com/2021/09/16/ibm-report-finds-two-thirds-cloud-breaches-traced-misconfigured-apis/"&gt;IBM report&lt;/a&gt; found that two-thirds of data breaches could be traced to misconfigured APIs.&lt;/p&gt;

&lt;p&gt;Clearly, enterprises need to take a proactive approach to ensure their use of APIs is secure. Unfortunately, with the complexity of modern apps, third-party code dependencies, and a lack of documentation, &lt;strong&gt;API observability is a huge challenge&lt;/strong&gt;. Often, enterprises simply don’t have any API specifications for their production apps. As a result, security-related misconfigurations go undetected, and apps use a variety of deprecated “zombie APIs” and undocumented “shadow APIs” in production. &lt;/p&gt;

&lt;p&gt;The fundamental first step to solving this problem is to create an API spec and use it to audit and document the APIs your apps use. Ideally, we would create an API spec simply by observing API traffic in real-world applications. In the past, there was no simple, scalable, and open-source tooling capable of doing this. Now, we have &lt;a href="https://apiclarity.io/"&gt;APIClarity&lt;/a&gt;—an open-source API traffic visibility tool for Kubernetes (K8s) clusters. It’s purpose-built to address the gap and enable API reconstruction through observation. &lt;/p&gt;

&lt;p&gt;In this post, we’re going to look at what API reconstruction is and how APIClarity solves the API observability problem. Then, we’ll walk through a practical example of using APIClarity with a microservices-based app running on K8s.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-importance-of-api-reconstruction"&gt;
  &lt;/a&gt;
  The Importance of API Reconstruction
&lt;/h3&gt;

&lt;p&gt;Put simply, API reconstruction is the building of an API specification simply by observing traffic to and from that API. Done right, API reconstruction gives you visibility into the APIs your microservices use and enables you to assess your API security risks. Once the spec is built, the same tooling can compare runtime traffic against the specification to detect deviations. &lt;/p&gt;

&lt;p&gt;Key components of an API specification include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parameter detection&lt;/strong&gt; (paths, header parameters, query parameters, request body parameters, and cookies) &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object references&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File transfer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security definitions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, an API reconstruction tool needs to quantify these components in an OpenAPI Specification (OAS) compliant format without introducing unnecessary overhead or complexity to an app. Before APIClarity, there were several tools that &lt;em&gt;partially&lt;/em&gt; addressed API reconstruction use cases, but there were no comprehensive open-source solutions. Some of these other tools for API visibility include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Optic—&lt;/strong&gt;an extensible, language-agnostic, and open-source tool. It’s useful for documenting, reviewing, and approving API prior to deployment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SwaggerHub—&lt;/strong&gt;a popular tool for converting API traffic to OAS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CloudVector API Shark—&lt;/strong&gt;can monitor multi-service environments and generate an OAS specification from runtime traffic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Imvision—&lt;/strong&gt;a robust API visibility and documentation tool for multi-service environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optic wasn’t built for monitoring multi-service environments, and SwaggerHub doesn’t integrate with runtime environments. Neither API Shark nor Imvision are open source. None of the above tools fully met the needs for API reconstruction. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-apiclarity-solves-the-api-reconstruction-and-visibility-challenge"&gt;
  &lt;/a&gt;
  How APIClarity Solves the API Reconstruction and Visibility Challenge
&lt;/h3&gt;

&lt;p&gt;APIClarity fills the gaps left by other tools and provides a robust, open-source, and scalable multi-service API visibility and reconstruction solution. It easily integrates into existing environments using a service mesh framework. With APIClarity, developers can import an API spec or reconstruct one based on observation. Developers can also monitor all API traffic in real-time with no code or workload changes required.&lt;/p&gt;

&lt;p&gt;So, how does it work?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xUfW9sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk4wkxldz59zq9vqyth3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xUfW9sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk4wkxldz59zq9vqyth3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/apiclarity/apiclarity/blob/master/diagram.jpg"&gt;Image source&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;APIClarity is deployed in existing K8s clusters&lt;/li&gt;
&lt;li&gt;API traffic is mirrored from pods in the cluster to APIClarity’s OpenAPI Spec Engine&lt;/li&gt;
&lt;li&gt;The spec engine monitors internal and external traffic and records API events&lt;/li&gt;
&lt;li&gt;APIClarity learns specifications based on API traffic and builds an API spec&lt;/li&gt;
&lt;li&gt;Users review, edit, and approve specifications &lt;/li&gt;
&lt;li&gt;APIClarity alerts users to security issues or if there is any deviation between an observed API and the approved API spec&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#apiclarity-in-action-a-walkthrough"&gt;
  &lt;/a&gt;
  APIClarity in Action: A Walkthrough
&lt;/h3&gt;

&lt;p&gt;Now that we know what APIClarity is, let’s dive into our tutorial to see it in action with a K8s cluster and microservices-based application. Here, we will:&lt;/p&gt;

&lt;p&gt;1) Deploy the &lt;a href="https://microservices-demo.github.io/"&gt;Sock Shop app&lt;/a&gt; in our K8s cluster. While we’ll use Sock Shop as our example application, you can deploy your own app to your cluster and still follow along.&lt;br&gt;
2) Deploy APIClarity in our K8s cluster and configure monitoring&lt;br&gt;
3) Observe API traffic on the APIClarity dashboard&lt;br&gt;
4) Review and create an API specification and view the generated OpenAPI spec in Swagger format.&lt;br&gt;
5) Identify deviations from an API spec along with usage of shadow and zombie APIs.&lt;br&gt;
6) View and filter API events&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;To follow along, you’ll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes cluster with a default &lt;code&gt;StorageClass&lt;/code&gt; defined&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.10 or above, installed on the cluster&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your K8s cluster can be deployed on any platform you prefer, including minikube. While APIClarity supports multiple integrations for proxying API traffic, you need to &lt;a href="https://istio.io/latest/docs/setup/getting-started/#download"&gt;download and install Istio&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#deploy-the-sock-shop-app-in-your-k8s-cluster"&gt;
  &lt;/a&gt;
  Deploy the Sock Shop app in your K8s cluster
&lt;/h4&gt;

&lt;p&gt;We’ll use the popular &lt;a href="https://microservices-demo.github.io/"&gt;Sock Shop microservices application&lt;/a&gt; as our test app. With 14 different microservices and an interactive front-end, it is a great way to test API traffic in a K8s cluster.&lt;/p&gt;

&lt;p&gt;1) Create the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create namespace sock-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Enable Istio injection for the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl label namespaces sock-shop istio-injection=enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Deploy the Sock Shop demo app in your cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/microservices-demo/microservices-demo/master/deploy/kubernetes/complete-demo.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Get the NodePort for the &lt;code&gt;front-end&lt;/code&gt; service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe svc front-end -n sock-shop | grep NodePort:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NodePort:                 &amp;lt;unset&amp;gt;  30001/TCP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Connect to &lt;code&gt;http://&amp;lt;node_IP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt; in your browser. Using our example above, if our node’s IP is 192.168.49.2, browse to &lt;code&gt;http://192.168.49.2:30001&lt;/code&gt;. If you don’t know your node’s IP, you can verify with &lt;code&gt;kubectl get nodes -o yaml&lt;/code&gt; or &lt;code&gt;minikube ip&lt;/code&gt;. If everything is working, the Sock Shop demo app should load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIMz4a9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j7x31smldimx0jsmypx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIMz4a9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j7x31smldimx0jsmypx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploy-apiclarity-in-our-k8s-cluster-and-configure-monitoring"&gt;
  &lt;/a&gt;
  Deploy APIClarity in our K8s cluster and configure monitoring
&lt;/h4&gt;

&lt;p&gt;First, we need to deploy APIClarity in our cluster.&lt;/p&gt;

&lt;p&gt;1) We’ll start by cloning the GitHub repository to our home directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~
git clone https://github.com/apiclarity/apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Next, navigate to the &lt;code&gt;apiclarity&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Use &lt;code&gt;kubectl&lt;/code&gt; to deploy APIClarity. Using the default apiclarity.yaml, the namespace will be &lt;code&gt;apiclarity&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f deployment/apiclarity.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Confirm the pods are running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get pods -n apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME                          READY   STATUS    RESTARTS   AGE
apiclarity-679949b687-x25pb   1/1     Running   0          16m
apiclarity-postgresql-0       1/1     Running   0          16m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Initialize and update the &lt;code&gt;wasm-filters&lt;/code&gt; submodule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git submodule init wasm-filters
git submodule update wasm-filters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6) Navigate to the &lt;code&gt;wasm-filters&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd wasm-filters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7) Run the wasm &lt;code&gt;./deploy.sh&lt;/code&gt; script so the Envoy Wasm filter can capture traffic from our Sock Shop. The script accepts multiple namespaces as input parameters, e.g. &lt;code&gt;./deploy.sh &amp;lt;namespace_one&amp;gt; &amp;lt;namespace_two&amp;gt; &amp;lt;namespace_three&amp;gt;&lt;/code&gt;, but for this demo, we only need to specify the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./deploy.sh sock-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8) Configure port forwarding for the APIClarity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl port-forward -n apiclarity svc/apiclarity 9999:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9) Use a web browser to connect to the APIClarity GUI at &lt;code&gt;http://localhost:9999&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJD-7Mgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv45gak2sr5s4jicuwl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJD-7Mgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv45gak2sr5s4jicuwl7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#observe-api-traffic-on-the-apiclarity-dashboard"&gt;
  &lt;/a&gt;
  Observe API traffic on the APIClarity dashboard
&lt;/h4&gt;

&lt;p&gt;Now, it’s time to generate traffic. Start by clicking through the different buttons and menus in the Sock Shop app. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;💡Pro-tip: The more API traffic, the better! More traffic = more observations = deeper visibility. For this portion of our demo, we just need a little bit of traffic, but keep this principle in mind for production.&lt;strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After you’ve generated some API traffic in Sock Shop, head back to the APIClarity dashboard. You’ll notice that APIClarity has recorded all the different API calls that have been made. In our example below, we can see 17 calls to the &lt;code&gt;catalogue&lt;/code&gt; endpoint, eight calls to &lt;code&gt;carts&lt;/code&gt;, and three calls to &lt;code&gt;user&lt;/code&gt;. We can also see how APIClarity begins to graph API usage. Those graphs will get even more interesting—and useful—after we generate more traffic and create our API specifications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYIGsP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9dv6d0s636wlpkl2cd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYIGsP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9dv6d0s636wlpkl2cd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#review-and-create-an-api-specification-and-view-docs-in-swagger"&gt;
  &lt;/a&gt;
  Review and create an API specification and view docs in Swagger
&lt;/h4&gt;

&lt;p&gt;Now, let’s create an API specification based on the relatively small amount of traffic we have.&lt;/p&gt;

&lt;p&gt;1) Click on one of the “Most used APIs.” I’ll use &lt;code&gt;catalogue&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvkZbu9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ez52c4am5kxa2wf4znu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvkZbu9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ez52c4am5kxa2wf4znu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Click the” Reconstructed” tab and then click “Review.” &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGSNMVQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/289hfi5aobsin0udw9o0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGSNMVQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/289hfi5aobsin0udw9o0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_DU_7SB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z18nmazksiwabnyfecci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_DU_7SB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z18nmazksiwabnyfecci.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Here, we can review API paths, add parameters, and merge entries. I’ll add an &lt;code&gt;example_param&lt;/code&gt; and review and approve the paths. Feel free to experiment with your choices here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm0LrAsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpa4nfdey5xh0byrkt2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm0LrAsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpa4nfdey5xh0byrkt2n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zirC2hgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/absws7ghyvwvdus338ck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zirC2hgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/absws7ghyvwvdus338ck.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijKMXfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvg9f26k4j4v122ayjl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijKMXfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvg9f26k4j4v122ayjl4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Now, we have an OAS API specification. We can view the API docs in Swagger directly from the APIClarity GUI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2QXgrcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyvl99qp35jjaojo64u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2QXgrcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyvl99qp35jjaojo64u1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9Yjglt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4211llp7xdf9rvl8e9j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9Yjglt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4211llp7xdf9rvl8e9j.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#identify-deviations-from-an-api-spec"&gt;
  &lt;/a&gt;
  Identify deviations from an API spec
&lt;/h4&gt;

&lt;p&gt;Now that we have an API specification as a baseline, APIClarity can flag deviations from the spec to help detect security issues and shadow APIs. To see how that works, go back to the Sock Shop GUI and experiment some more. Click on some features or filters you did not use last time. If you created an order, delete it. The key here is performing some actions that are not in the spec. Those will be identified as “diffs.” &lt;/p&gt;

&lt;p&gt;For example, here I made multiple calls to the &lt;code&gt;catalogue&lt;/code&gt; endpoint that don’t match my spec:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8dtbbZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv65lhfipevcgcuil4gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8dtbbZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv65lhfipevcgcuil4gl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can drill down by clicking a specific diff and view exactly what is different from the spec. Here we can see the deviation was detected because my API call was missing some parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRJLAW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb2i950oba3i4egtbwc2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRJLAW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb2i950oba3i4egtbwc2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s an example of a documented API call with different parameters than the specification. But, what if the API call isn’t documented in the specification at all? In that case, APIClarity will flag it as a shadow API. &lt;/p&gt;

&lt;p&gt;That’s exactly what happened for this API call to the &lt;code&gt;carts&lt;/code&gt; path. At the time we created the spec, we only observed a GET and a POST, so that is what was documented. Therefore, a DELETE call was outside of the spec and flagged as a &lt;strong&gt;shadow API&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKHP9oSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuyvn4gcr45mvx8omisr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKHP9oSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuyvn4gcr45mvx8omisr.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might expect, this is a legitimate API call that I should have documented. This scenario provides us with a practical example of why it’s useful to let APIClarity capture a large amount of traffic before creating your API specification.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-and-filter-api-events"&gt;
  &lt;/a&gt;
  View and filter API events
&lt;/h4&gt;

&lt;p&gt;We can also view and filter API events with APIClarity. &lt;/p&gt;

&lt;p&gt;To view events, click on the events icon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atSCh_O0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi1yh6shtb1n1oh94hz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atSCh_O0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi1yh6shtb1n1oh94hz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will see a detailed list of all the API events over a given period of time (“Last day” is the default). We can also drill down to review individual events as we did from the dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YihE04ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48xut1i4kjq9424v0y89.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YihE04ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48xut1i4kjq9424v0y89.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you can apply advanced filters to search for specific API events. For example, we can create a list of all the shadow API calls APIClarity has observed by applying the &lt;code&gt;Spec of type is shadow&lt;/code&gt;filter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXit93Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fvg8qut8akgctxesan1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXit93Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fvg8qut8akgctxesan1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Detection of zombie APIs is similar. We would modify the filter to look for &lt;code&gt;Spec of type is zombie&lt;/code&gt;. If one of our calls was to a deprecated API from our spec, we'd then see it here.&lt;/p&gt;

&lt;p&gt;You can mix and match filters and sort results to achieve a variety of different views. That way, you can take deep dives on API events in your app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;As an &lt;a href="https://github.com/apiclarity/apiclarity"&gt;open-source project&lt;/a&gt;, APIClarity continues to evolve and receive contributions from the developer community.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this walkthrough! We’ve only scratched the surface here, and there are several interesting use cases for API reconstruction and traffic monitoring with APIClarity. In addition to improving API visibility and security, it enables use cases like fuzzing tests, client/server code generation, and improving internal and user-facing documentation.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I built my first DApp!</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Tue, 19 Oct 2021 20:00:48 +0000</pubDate>
      <link>https://dev.to/nickytonline/i-built-my-first-dapp-3pbm</link>
      <guid>https://dev.to/nickytonline/i-built-my-first-dapp-3pbm</guid>
      <description>&lt;p&gt;This past weekend I completed a &lt;a href="https://www.freecodecamp.org/news/what-is-web3/"&gt;web3&lt;/a&gt; project from the awesome folks at &lt;a href="https://buildspace.so"&gt;buildspace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project was building out a &lt;a href="https://ethereum.org/en/developers/docs/dapps/"&gt;dapp&lt;/a&gt; that allows you to send messages and store them on the blockchain. Under the hood, it was &lt;a href="https://github.com/ethereum/solidity"&gt;Solidity&lt;/a&gt; for the &lt;a href="https://ethereum.org/en/developers/docs/smart-contracts/"&gt;smart contract&lt;/a&gt;, TypeScript, &lt;a href="https://nextjs.org/"&gt;NEXT.js&lt;/a&gt;, &lt;a href="https://theme-ui.com/"&gt;Theme UI&lt;/a&gt;, good old semantic markup, and a splash of ARIA in the frontend. Shoutout to the &lt;code&gt;&amp;lt;details /&amp;gt;&lt;/code&gt; element! Aside from that, some other web3 goodies like &lt;a href="https://hardhat.org"&gt;hardhat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The buildspace projects have really straightforward instructions. I did go a bit rogue though. I recently created a web3 starter, and decided to use that as the base for my first foray into dapp development.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/web3-starter"&gt;
        web3-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An opinionated web3 starter
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Web3 Starter&lt;/h1&gt;
&lt;p&gt;The goal of this project is to give you an opinionated boilerplate to start a web3 project.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/web3-starter./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;
or if you come across an issue
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can be run in Gitpod. Navigate to
&lt;a href="https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node&lt;/a&gt;. If you
wish to load it in Gitpod as an external contributor, you will need to fork the
project first, then open the fork in Gitpod, e.g.
&lt;a href="https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gitpod will take a minute or two to load.&lt;/li&gt;
&lt;li&gt;If this is the first time…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/web3-starter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I also decided to make the project my own and made some modifications. For one, I added another field for the message in the smart contract for storing a URL. I was doing this quickly, so just opted to use images from a funny site I love, &lt;a href="https://http.cat"&gt;http.cat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6EtCMC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws3vxp6om97qsn2yqwqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6EtCMC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws3vxp6om97qsn2yqwqw.png" alt="An open message on pics.iamdeveloper.com showing a picture of a cat in the message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is still a bit scrappy as it really was a weekend project, but I'm still happy with how it turned out. I've made some tweaks since then, but there's still a bunch of refactoring to do. 😅&lt;/p&gt;

&lt;p&gt;If you're into TypeScript, there's a couple examples of declaration merging &lt;a href="https://github.com/nickytonline/picture-portal/blob/main/@types/global.d.ts#L3-L10"&gt;like this one to get the &lt;code&gt;&amp;lt;marquee /&amp;gt;&lt;/code&gt; element in JSX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The dapp is live running the contract off the &lt;a href="https://www.rinkeby.io/"&gt;Rinkeby network&lt;/a&gt;. Feel free to check out the dapp's source code.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/picture-portal"&gt;
        picture-portal
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Picture Portal&lt;/h1&gt;
&lt;p&gt;A project to learn about web3 following a Buildspace walkthrough. The initial
code is based off of my starter, &lt;a href="https://github.com/nickytonline/web3-starter"&gt;https://github.com/nickytonline/web3-starter&lt;/a&gt;
which I thought would be fun to do for Hacktoberfest 2021 and potentially be
helpful for others.&lt;/p&gt;
&lt;p&gt;There is a lot to improve as this was just have fun building something, but I'm
still pretty happy with what I cranked out.&lt;/p&gt;
&lt;p&gt;The latest is deployed at &lt;a href="https://pics.iamdeveloper.com" rel="nofollow"&gt;https://pics.iamdeveloper.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/picture-portal./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;
or if you come across an issue
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;.
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/picture-portal"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And while you're here, check out the live dapp at &lt;a href="https://pics.iamdeveloper.com"&gt;pics.iamdeveloper.com&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtIdmdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsmhsmo18sfdtji14ydw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtIdmdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsmhsmo18sfdtji14ydw.png" alt="The picture portal site"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dapp</category>
      <category>web3</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>How to Install MongoDB on Ubuntu 20.04</title>
      <author>Suresh Ramani</author>
      <pubDate>Tue, 19 Oct 2021 19:57:35 +0000</pubDate>
      <link>https://dev.to/sureshramani/how-to-install-mongodb-on-ubuntu-2004-55kk</link>
      <guid>https://dev.to/sureshramani/how-to-install-mongodb-on-ubuntu-2004-55kk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-mongodb"&gt;
  &lt;/a&gt;
  What is MongoDB?
&lt;/h3&gt;

&lt;p&gt;MongoDB is a free and open-source document database. It belongs to a family of databases called NoSQL, which is different from the traditional table-based SQL databases like MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;In MongoDB, data is stored in flexible, JSON-like documents where fields can vary from document to document. It does not require a predefined schema, and the data structure can be changed over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-advantages-of-mongodb"&gt;
  &lt;/a&gt;
  Features and Advantages of MongoDB
&lt;/h3&gt;

&lt;p&gt;-&amp;gt; Offers high scalability and flexibility; automatic failover and data redundancy&lt;br&gt;
-&amp;gt; Offers an expressive query language that is simple to learn and use&lt;br&gt;
Ad-hoc queries for real-time analytics&lt;br&gt;
-&amp;gt; It supports arrays and nested objects as values and allows for flexible and dynamic schemas.&lt;br&gt;
It is easy to compose queries that allow sorting and filtering, no matter how nested and supports aggregation, geo-location, time-series, graph search, and more.&lt;br&gt;
-&amp;gt; Supports sharding which enables splitting of large datasets across multiple distributed collections which then eases querying.&lt;br&gt;
-&amp;gt; Supports multiple storage engines&lt;/p&gt;

&lt;p&gt;This tutorial describes how to install and configure MongoDB Community Edition on Ubuntu 20.04.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-import-mongodb-public-key"&gt;
  &lt;/a&gt;
  Step 1: Import MongoDB public key
&lt;/h3&gt;

&lt;p&gt;MongoDB is available in the Ubuntu repository. But it's not maintained by MongoDB Inc. If you already installed the MongoDB package, uninstall it first. Then proceed with the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify the added GPG key, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-key list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-add-mongodb-repository-to-the-source-list"&gt;
  &lt;/a&gt;
  Step 2: Add MongoDB repository to the source list
&lt;/h3&gt;

&lt;p&gt;Let's add the official MongoDB repository to the source list file - this will allow us to fetch the latest official mongodb-org package.&lt;/p&gt;

&lt;p&gt;To create a source list file, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo touch /etc/apt/sources.list.d/mongodb-org-5.0.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add the repository source for Ubuntu 20.04:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the packages again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, you’re finally ready to install MongoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-install-mongodb-on-ubuntu-2004"&gt;
  &lt;/a&gt;
  Step 3: Install MongoDB on Ubuntu 20.04
&lt;/h3&gt;

&lt;p&gt;Now that the MongoDB repository is enabled, you can install the latest stable version by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-run-mongodb"&gt;
  &lt;/a&gt;
  Step 4: Run MongoDB
&lt;/h3&gt;

&lt;p&gt;To run MongoDB, start the mongod service (daemon for MongoDB) using the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl start mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the service does not start or you encounter an error like “service not found”, issue the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After starting the mongod service, check its status to verify if it is running fine. Use the command below to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the MongoDB automatically at each boot, the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to start the mongo shell from the same system running the mongod process, the command is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongod

//or

mongosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this blog.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>mongodb</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
