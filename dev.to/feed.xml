<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Make a Weather App using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Fri, 03 Dec 2021 16:55:11 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/how-to-make-a-weather-app-using-javascript-4lke</link>
      <guid>https://dev.to/shantanu_jana/how-to-make-a-weather-app-using-javascript-4lke</guid>
      <description>&lt;p&gt;In this article you will learn how to create weather app using JavaScript. This JavaScript Weather app will help you to know about the weather of any location. If you input the name of any city in the input box here, in the box below you can find out all its information like temperature, wind speed and sky conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Watch its live demo&lt;/a&gt; to learn how it works. I took the help of API Link to create this project. With this link all the information will be collected from other places with the help of "fetch" method. First we created its basic structure using HTML and CSS. Then I implemented it using JavaScript. &lt;/p&gt;

&lt;p&gt;You need to have a basic idea about HTML CSS JavaScript to create this weather application. Here I have shared step-by-step tutorial and a video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yQgZb51r9CU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There are two boxes here. In the first box there is a place to input the name of the city and submit button. The result can be seen in the second box. &lt;/p&gt;

&lt;p&gt;The first box contains an input box for input and a submit button. If you input the name of the city in that box and click on the submit button, you will see all the information in the box below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-code-of-simple-weather-app"&gt;
  &lt;/a&gt;
  HTML code of Simple weather app
&lt;/h2&gt;

&lt;p&gt;Below are the HTML codes needed to create this design. Here I have broken the code step-by-step. If you want the code with one, you can &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;download source code&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;Basic structure&lt;/strong&gt;&lt;br&gt;
I have created a basic structure using the following codes. Basic structure is an area with two boxes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;First box&lt;/strong&gt;&lt;br&gt;
Now I have added the HTML code needed to create the first box. Two input functions have been used here. The first input is to input the name of the city and the second is to make a button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter any city..."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cityinput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Second box or Display&lt;/strong&gt;&lt;br&gt;
Now arrangements have been made to make the second box i.e. display. Where weather related information can be found. The h2 tag is used here and the three paragraph tags are used. &lt;/p&gt;

&lt;p&gt;The name of your input city can be found in h2. The other three paragraphs include sky conditions, temperature and wind speed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cityoutput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"temp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wind"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-code-of-javascript-weather-app"&gt;
  &lt;/a&gt;
  CSS code of JavaScript weather app
&lt;/h2&gt;

&lt;p&gt;Above I have added the necessary HTML code to create the &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Simple Weather application&lt;/a&gt;. Now it needs to be designed using CSS code. I designed the basics using the following CSS codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#448aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-fluid&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;410px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the first box has been designed. I have used white as the background color of the box and &lt;code&gt;padding: 2rem 0 2rem 0&lt;/code&gt; has been used to create some space around it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2b_goXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0bnelij9to5xzh1763i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2b_goXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0bnelij9to5xzh1763i.jpg" alt="building a weather app using javascript" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The place to input the name of the city is designed by the following code. Here box &lt;code&gt;height: 3.5rem&lt;/code&gt;, &lt;code&gt;width: 20rem&lt;/code&gt; and color transparent are used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#212121&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#c2c2c2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kz8qcDE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b5bos6rzvi5z31tj4zh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz8qcDE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b5bos6rzvi5z31tj4zh.jpg" alt="weather app using javascript" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have designed the submit button using the following CSS codes. I used button &lt;code&gt;height: 3.2rem&lt;/code&gt;, &lt;code&gt;width: 6.5rem&lt;/code&gt; and background color blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"submit"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0a67ca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlDTxJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4c5pf8v3do747xw4orx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlDTxJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4c5pf8v3do747xw4orx.jpg" alt="weather app using html css and javascript" width="880" height="389"&gt;&lt;/a&gt;&lt;br&gt;
Now I have added the CSS code required for making the second box i.e. display. This display uses &lt;code&gt;width: 400px&lt;/code&gt; and &lt;code&gt;height: 45vh&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.display&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#16a864&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgKyGdlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zdipyi1e9xbh49qhhw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WgKyGdlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zdipyi1e9xbh49qhhw.jpg" alt="weather forecast app using javascript" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the following codes have helped to design all the text information in this box. Although this information is no longer available for viewing. &lt;/p&gt;

&lt;p&gt;This can be seen after using JavaScript. But now I have managed to design it with the necessary CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0548b5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#04214c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;23px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9beefb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#90006e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZSQHTEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfmls4forkn98gdxpf7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZSQHTEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfmls4forkn98gdxpf7.jpg" alt="weather app using html css and javascript github" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-of-the-basic-weather-app"&gt;
  &lt;/a&gt;
  JavaScript code of the basic weather app
&lt;/h2&gt;

&lt;p&gt;I have designed this basic &lt;strong&gt;weather app using HTML and CSS&lt;/strong&gt; code above. Now is the time to implement it with JavaScript.&lt;/p&gt;

&lt;p&gt;Below I have given all the JavaScript and all the information below each code. I hope the following explanations will help you understand. If there is any problem, you can take the help of video tutorial below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Now we need to determine the constant of one of the id functions. Because no html function can be used directly in JavaScript.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#cityinput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#cityoutput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;descrip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#temp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#wind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;apik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3045dd712ffe6e702e3245525ac7fa38&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//kelvin to celcious. 1 Kelvin is equal to -272.15 Celsius.&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;273&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Now we have to collect all the information with the help of fetch method&lt;/span&gt;

    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="c1"&gt;//This is the api link from where all the information will be collected&lt;/span&gt;

        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;inputval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;apik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

         &lt;span class="c1"&gt;//.then(data =&amp;gt; console.log(data))&lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;//Now you need to collect the necessary information with the API link. Now I will collect that information and store it in different constants.&lt;/span&gt;

            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nameval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;descrip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;weather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tempature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wndspd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;speed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;//Now with the help of innerHTML you have to make arrangements to display all the information in the webpage.&lt;/span&gt;
            &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;`Weather of &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameval&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Temperature: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;convertion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempature&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; C&amp;lt;/span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Sky Conditions: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;descrip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;wind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Wind Speed: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;wndspd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; km/h&amp;lt;span&amp;gt;`&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//Now the condition must be added that what if you do not input anything in the input box.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You entered Wrong city name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//If you click on the submit button without inputting anything in the input box or typing the wrong city name then the above text can be seen.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BrDF0z7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f90v7prwp075mekoi7cs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BrDF0z7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f90v7prwp075mekoi7cs.jpg" alt="build a weather app using javascript" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully the tutorial and video above helped you to know how I created this JavaScript Weather application. If you have anything to say, be sure to let me know in the comments.&lt;/p&gt;

&lt;p&gt;If you have learned something from this tutorial, please like the article. You can &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;download the source code&lt;/a&gt; needed to create the Simple Weather app.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Mistakes to Avoid As a Backend Developer</title>
      <author>Joseph Mania</author>
      <pubDate>Fri, 03 Dec 2021 16:46:18 +0000</pubDate>
      <link>https://dev.to/techmaniacc/mistakes-to-avoid-as-a-backend-developer-122j</link>
      <guid>https://dev.to/techmaniacc/mistakes-to-avoid-as-a-backend-developer-122j</guid>
      <description>&lt;p&gt;Currently, I can call myself a backend developer after a whole 3 years of coding. In short, a backend engineer is an individual who deals with the server-side, database, and configurations. This developer must have good knowledge of data structure and algorithms to implement the data in the right way. Minor knowledge to keep security safe.&lt;/p&gt;

&lt;p&gt;As you get more experience in the world of development, you notice it’s not all about the technical skills you have. It’s about using these skills to create a product that is efficient and reliable to non-technical users. This means you must observe the best practices when it comes to writing your code and using the right language or frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time, memory, and security&lt;/strong&gt; are the key features. If you are a backend developer, there are things you need to do to ensure your software responds as fast as possible. Furthermore, the code has to be clean and simple to allow the program to occupy the minimum space. This is where you need to learn about the mistakes that backend developers make. Be keen and stay updated on best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-frameworks-before-the-language"&gt;
  &lt;/a&gt;
  Learning frameworks before the language.
&lt;/h2&gt;

&lt;p&gt;For sure, I had a friend who jumped directly into Django without learning any python. It’s the worst way of learning. Take an example, a child will never exist without a father. So when you want to reward them, you have to prioritize a father before narrowing it down to a kid. Kindly, learning PHP will give you the base foundation before jumping into laravel.&lt;/p&gt;

&lt;p&gt;Yes, you could succeed with frameworks, but they have their disadvantages too. We have people who have developed their site with raw HTML, CSS, JavaScript, and PHP, and their sites are good. Don’t prioritize frameworks over the core language. This can also apply to front-end engineers. Use the right path, learn the language, then swam into frameworks to save development time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-code-review"&gt;
  &lt;/a&gt;
  Avoiding Code Review
&lt;/h2&gt;

&lt;p&gt;Of course, no one likes reading his/her code. However, this does not mean you deny your fellow members from reading your code. Let them correct your mistakes, no one is perfect. If you are writing shoddy work, we have to tell you the truth. Peer-to-peer review is very important, but if you are working on a single project, invite some of your friends to review the code. Ask senior developers to help you in one way or another. You will learn a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-a-project-without-knowing-the-tools"&gt;
  &lt;/a&gt;
  Starting a project without knowing the tools
&lt;/h2&gt;

&lt;p&gt;Here, developers argue among themselves which tool is the best. Let’s say you are working for a SaaS startup. You don’t follow the software engineering procedure, jump directly into the code. On the way, if you are working with a team, you might end up disagreeing. This is because each one of you has his/her favorite tools which they prefer. It is the task of a senior backend developer to choose the tools that are favorable to your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#less-knowledge-of-databases"&gt;
  &lt;/a&gt;
  Less knowledge of databases
&lt;/h2&gt;

&lt;p&gt;Don’t call yourself a backend engineer without having an intermediate knowledge of databases. In a different project, you will meet different types of databases. Take time and learn how popular DB like Postgres, MYSQL, MariaDB, and SQLite works. Read through the theory before learning the commands. In your lifetime, you will live to fetch and post data in and out of the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-considering-the-security"&gt;
  &lt;/a&gt;
  Not considering the security
&lt;/h2&gt;

&lt;p&gt;It’s okay you are not a cybersecurity major, but you’re a developer and the manager expects everything to work right. Let’s say you launch your site today and someone breaks into it tomorrow. They will blame you. Remember, authentication is the backend process. This goes back to choosing your technology keenly. Recently, many people blame PHP for having loopholes, the reason why many wordpress sites are being hacked.&lt;br&gt;
I didn’t mean PHP is bad(in fact am learning it now😂😂), the community is developing a wall. Always have some knowledge on the best way to safeguard your site. Protect the database and admin panel from any malicious entry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overengineering-the-software"&gt;
  &lt;/a&gt;
  Over-engineering the software
&lt;/h2&gt;

&lt;p&gt;Yes, you are an engineer, but adding too many unwanted functionalities doesn’t make you a pro. However good you are, we don’t need your complex code. This is where senior engineers win the cake. Don’t promise too more than expected while implementing a product. Just write a simple code and document the process. If you find the problem to be too simple, just go straightforward solution. Don’t try to be perfect here, software development is sometimes a hard task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-to-read-documentation-of-languageframework"&gt;
  &lt;/a&gt;
  Avoiding to read documentation of language/framework
&lt;/h2&gt;

&lt;p&gt;Hey developers🙄😉, you have to read the documentation while using the technology or tools. YouTube and bloggers have the right knowledge. But if you want to understand the reason and why something works in that way, consult the documentation. Stay updated with the respective document to see the new and outdated features.&lt;/p&gt;

&lt;p&gt;Maybe my learning methodology 🤴 could help you. I always use tutorials or i read blogs as I learn certain frameworks. Then after two months, I will go step by step on the documentation to understand what it entails. You will notice a lot of new things that you haven’t used. Always consider the documentation over other sources.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>360° Product View</title>
      <author>Jayanth Acharya</author>
      <pubDate>Fri, 03 Dec 2021 16:15:33 +0000</pubDate>
      <link>https://dev.to/jayanthra/360deg-product-view-3jbn</link>
      <guid>https://dev.to/jayanthra/360deg-product-view-3jbn</guid>
      <description>&lt;p&gt;I am always impressed by the websites that showcase products in unique ways on scroll of the page. Transitions, fades, warps, zooms so on. One very particular animation I want to try is the 360 degree rotation of the product on scroll.&lt;/p&gt;

&lt;p&gt;Like this from &lt;a href="https://www.nuro.ai/"&gt;Nuro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2h4LjcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdzdbpbwxegs2wlmdhkd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2h4LjcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdzdbpbwxegs2wlmdhkd.gif" alt="nuro car rotate" width="880" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gives complete 360 view of the product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nuro-implementation"&gt;
  &lt;/a&gt;
  The Nuro implementation
&lt;/h2&gt;

&lt;p&gt;After a bit of digging around the side I see the website downloads each and every image required to create the full view of the vehicle. That's a lot of images, 127 images to be precise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrgTHPIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/847luflsme2rjh25cyae.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrgTHPIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/847luflsme2rjh25cyae.gif" alt="Images" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And these images are loaded onto a canvas to create an animation. Long story short, I want an easier solution.&lt;/p&gt;

&lt;p&gt;Then it flashed, &lt;strong&gt;Sprite sheet&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprite-sheet"&gt;
  &lt;/a&gt;
  Sprite sheet
&lt;/h2&gt;

&lt;p&gt;Using a sprite sheet, I can load a single image file with all the individual frames required to complete the 360 view of the product&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codeandweb.com/what-is-a-sprite-sheet#:~:text=A%20sprite%20sheet%20is%20an,loading%20time%20of%20the%20game."&gt;More on spritesheets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hoping someone had already thought of the sprite sheet method, My next task was to find a relevant sprite sheet of a car.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cssscript.com/demo/product-viewer-animate-sprite/car.jpg"&gt;Found one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's begin the animation&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept
&lt;/h2&gt;

&lt;p&gt;The idea is simple, one used since the dawn of cinema. Create a view window that only sees a certain section of the whole image, and move new frame into the view on each scroll, hence creating an 360 view effect  &lt;/p&gt;

&lt;p&gt;Think of red box as the only part visible at the time and we move image on each scroll step&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sbmtXo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6kpsejst80viizas8c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sbmtXo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6kpsejst80viizas8c.gif" alt="move" width="813" height="441"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;First thing to know is what is the height and width of the individual image.&lt;br&gt;
The image used here each frame is &lt;br&gt;
height : 600px&lt;br&gt;
width : 350px&lt;/p&gt;

&lt;p&gt;Let us create a div and set the background as the image along with height and width. also let us set the height of body so we have something to scroll&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="sx"&gt;url(https://www.cssscript.com/demo/product-viewer-animate-sprite/car.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should complete the CSS.&lt;/p&gt;

&lt;p&gt;Lets move on to the javascript part&lt;/p&gt;

&lt;p&gt;First let's query select the html elements that will be used,the div that holds the car image and a counter that we will use for debugging (not necessary for the implementation)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#car&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// only used for debugging&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countIndicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next the height and width of the single image, we will also need number of individual images(sprites) in the the entire image, in this case it is 61. this is so that we can loop back to first image when we reach the end.&lt;/p&gt;

&lt;p&gt;Things would have been easier if all images were in the same line, but we have 13 images each line, so let us keep that in &lt;code&gt;imagePerLine&lt;/code&gt; which will help us know to jump to next line of images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All initialization done, let's create the scroll event listener&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.addEventListener("scroll", function (e) {})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a scroll event listener, we can get all the scroll related properties, what we want is the &lt;code&gt;scrollTop&lt;/code&gt; property&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const { scrollTop } = e.target.scrollingElement;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next task : count from 0-61 then back to 0. &lt;br&gt;
Performing a mod &lt;code&gt;%&lt;/code&gt; operation on the scrollTop value we can ensure a value stays within our image count&lt;br&gt;
i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test the update of &lt;code&gt;stepCount&lt;/code&gt; by assigning it to the &lt;code&gt;countIndicator&lt;/code&gt; on scroll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iDN8frl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmur7z10bwjmwu8xyt4i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iDN8frl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmur7z10bwjmwu8xyt4i.gif" alt="abrupt" width="294" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps increment way too many times per scroll we need reduce steps per scroll.&lt;/p&gt;

&lt;p&gt;Dividing the &lt;code&gt;scrollTop&lt;/code&gt; by some number say 10 will give 'smoother' transition values, also a &lt;code&gt;Math.Floor&lt;/code&gt; to avoid float values.&lt;br&gt;
We finally have the &lt;code&gt;stepCount&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Giving us smoother transition of &lt;code&gt;stepCount&lt;/code&gt; per scroll &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEihFnW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hknxidygazitl9c677j4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEihFnW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hknxidygazitl9c677j4.gif" alt="smoother" width="285" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that &lt;code&gt;stepCount&lt;/code&gt; is calculated we need the row and column index to the select the image from sprite sheet, this is where the image per line &lt;code&gt;imagePerLine&lt;/code&gt; comes into play.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;columnIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the row and column indexes, we can calculate our x and y position in pixels by multiplying with &lt;code&gt;imageWidth&lt;/code&gt; and &lt;code&gt;imageHeight&lt;/code&gt; respectively, this value can be used to set div css &lt;code&gt;backgroundPosition&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Read more about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position"&gt;backgroundPosition&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;columnIndex&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila!! we now have a 360 degree view of the car on scroll&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gks6aRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrh7lah5pmexf38vq7ni.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gks6aRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrh7lah5pmexf38vq7ni.gif" alt="rotate" width="617" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the demo and complete code &lt;a href="https://codepen.io/jayanthracharya/pen/OJxyPpa"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions, reach out to me on &lt;a href="https://twitter.com/JayanthRAcharya"&gt;Twitter&lt;/a&gt; or check my &lt;a href="https://github.com/jayanthra"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Image classification in web applications with ML.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Fri, 03 Dec 2021 16:13:03 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/image-classification-in-web-applications-with-mlnet-ipl</link>
      <guid>https://dev.to/esdanielgomez/image-classification-in-web-applications-with-mlnet-ipl</guid>
      <description>&lt;p&gt;Hey, there! It's a pleasure to greet you. In this tutorial article we will learn step by step to generate a personalized Machine Learning model from ML.NET for the classification of images, particularly to classify images of people with and without masks, and then learn to consume that model from a web application on ASP.NET with the MVVM pattern (Model, View, ViewModel). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mlnet-and-how-does-it-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is ML.NET and how does it work?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ML.NET is an open-source Machine Learning platform that allows us to transform input data into an ML model, in this case images, and then be able to integrate it into any type of application on the .NET ecosystem, whether web, mobile, desktop, or any other type of application.&lt;br&gt;&lt;br&gt;
In our case study we will focus on the categorization of images. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-classification"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Image Classification&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For our example, the intention is to be able to classify images of people into two groups: people with masks and people without masks. &lt;/p&gt;

&lt;p&gt;To achieve this goal, we will carry out three activities in this article: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Meet the necessary requirements and prepare our solution in Visual Studio. &lt;/li&gt;
&lt;li&gt;2. Create our Machine Learning model with ML.NET. &lt;/li&gt;
&lt;li&gt;3. Consume the model generated from ASP.NET. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this mentioned, let's get started! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-1-prerequisites-and-solution-preparation-in-visual-studio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 1: Prerequisites and Solution Preparation in Visual Studio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order to generate our Machine Learning model, we will use the Model Builder interpreter of ML.NET. For this, we need to have the following workload in Visual Studio (.NET Cross-Platform Development):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD9FKdFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heve2cylbynrxe50bh5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD9FKdFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heve2cylbynrxe50bh5l.png" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this workload, we can now create our solution. In this case, the intention is to consume the ML model that we are going to generate from a web application, for this purpose we will use the DotVVM framework that allows us to work with HTML pages and C# classes on ASP.NET, and with the MVVM pattern (Model, View, ViewModel).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kallCrKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3lkgg8xbxqf3lfazr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kallCrKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3lkgg8xbxqf3lfazr9.png" alt="" width="493" height="402"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-building-the-machine-learning-model"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Building the Machine Learning Model&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It's time to create the model with ML.NET. As in any other process in the field of Machine Learning to generate a model, the steps to build the sentiment analysis model are as follows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the ML scenario.&lt;/li&gt;
&lt;li&gt;Prepare the environment for data training. &lt;/li&gt;
&lt;li&gt;Load the dataset. &lt;/li&gt;
&lt;li&gt;Train the model.&lt;/li&gt;
&lt;li&gt;Evaluate the model. &lt;/li&gt;
&lt;li&gt;Consume the model. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To begin with, in the main project of our solution we will add an element of type Machine Learning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlptRZW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ttwyyjpw4pheb2xzxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlptRZW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ttwyyjpw4pheb2xzxe.png" alt="" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this option, the ML.NET Model Builder interpreter will be initialized and we can start customizing the model. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;br&gt;
The first step is to select the scenario with which we want to work, in this case it will be &lt;code&gt;Image classification&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--614KqMtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6ltb6xlxccfcsbvjkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--614KqMtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6ltb6xlxccfcsbvjkd.png" alt="" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we must select the computing resources for the training of our model. In this scenario we have three options available, either use the CPU of our computer, a graphics card to take advantage of the GPU (since we will work with images), or perform training in the cloud with Azure Machine Learning. In this example we will use the local CPU:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bt9kq5o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokkvsm5spkipcl6sgru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bt9kq5o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokkvsm5spkipcl6sgru.png" alt="" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data source:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This is one of the most important parts, since with the data we can customize our model. For this purpose, we must specify the directory where the files of the images that we want to classify are located. In this sense, it is important that there is a folder for each category that we are going to classify, in this case we can find the subfolder &lt;em&gt;"With mask"&lt;/em&gt;, and another called &lt;em&gt;"Without mask"&lt;/em&gt;. By selecting the directory from the model builder ML.NET we can visualize something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CaY4QYET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1ag8yipfg43082prcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CaY4QYET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1ag8yipfg43082prcy.png" alt="" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Training:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With everything we have already established so far, we can already perform the training process, and finally generate the desired model. In this section we can only start with the training, and wait for it to end. The time will depend on the number of images in the dataset, the characteristics of our CPU (previously selected method), and the size of the corresponding files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysscm3iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rm6l2uxrlevdkjp7yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysscm3iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rm6l2uxrlevdkjp7yp.png" alt="" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Up to this point we already have the model established, anyway, from the Model Builder of ML.NET we can evaluate the model with a particular example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Evu-leVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rww0zza4nikqe2ngrcv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Evu-leVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rww0zza4nikqe2ngrcv0.png" alt="" width="880" height="727"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consume:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the interpreter will give us options to consume the created model, either by creating other projects (by console or with a web api), or indicating the calls we must make from our own application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0bF_msH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmcm2ca3q09eih5q35q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0bF_msH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmcm2ca3q09eih5q35q.png" alt="" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we can already consume the model from our web application with DotVVM on ASP.NET with the new generated package: &lt;code&gt;MLModel.mbconfig&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-consume-the-generated-model-from-aspnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Consume the generated model from ASP.NET&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To consume the model we must refer to the MLModel class, which was generated by ML.NET in the group &lt;code&gt;MLModel.mbconfig&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKpmiEge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw8hs12ippkno8m1z581.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKpmiEge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw8hs12ippkno8m1z581.png" alt="" width="880" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this sense, it is necessary to establish an instance of ModelInput with the reference of the image that we want to classify, and then call the &lt;code&gt;Predict&lt;/code&gt; method, and obtain an object of type ModelOutput with the corresponding classification (&lt;em&gt;With mask&lt;/em&gt;, &lt;em&gt;Without mask&lt;/em&gt;), and its probability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewModel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this purpose, and to be able to establish a web page with DotVVM, in a ViewModel, in this case the &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;, we will define four attributes or global variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IUploadedFileStorage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;UploadedFilesCollection&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These variables will allow us to refer to the image file in a storage, and represent the results of the prediction in the attributes &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can set a method in this class, in such a way that it represents the action of a button to make the prediction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uploadPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetUploadPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uploadPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;FileId&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".bin"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;FileId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sampleData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ModelInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ImageSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//Load model and predict output&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"With mask"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//storage.DeleteFileAsync(Files.Files[0].FileId);&lt;/span&gt;
    &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have three important parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store the image file in a local storage, so that we can have the path of this file for the model.&lt;/li&gt;
&lt;li&gt;Initialize an &lt;code&gt;MLModel.ModelInput&lt;/code&gt; with the image path. &lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;MLModel.Predict&lt;/code&gt; with the &lt;code&gt;ModelInput&lt;/code&gt; as a parameter, thus obtaining the 'ModelOutput' with the results.&lt;/li&gt;
&lt;li&gt;Prepare the &lt;code&gt;Result&lt;/code&gt; to visualize the result of the classification later, and its accuracy in the prediction. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although, we can now construct the view by referencing the attributes and method created in the ViewModel. This view will be encoded in the file &lt;code&gt;Default.dothtml&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:FileUpload&lt;/span&gt; &lt;span class="na"&gt;UploadedFiles=&lt;/span&gt;&lt;span class="s"&gt;"{value: Files}"&lt;/span&gt;
                                &lt;span class="na"&gt;AllowMultipleFiles=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
                                &lt;span class="na"&gt;SuccessMessageText=&lt;/span&gt;&lt;span class="s"&gt;"Predicting..."&lt;/span&gt;
                                &lt;span class="na"&gt;NumberOfFilesIndicatorText=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
                                &lt;span class="na"&gt;UploadButtonText=&lt;/span&gt;&lt;span class="s"&gt;"Search Image"&lt;/span&gt;
                                &lt;span class="na"&gt;AllowedFileTypes=&lt;/span&gt;&lt;span class="s"&gt;"jpg,png"&lt;/span&gt;
                                &lt;span class="na"&gt;UploadCompleted=&lt;/span&gt;&lt;span class="s"&gt;"{command: Predict()}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; {{value: Score}}
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the most important thing is the &lt;code&gt;FileUpload&lt;/code&gt; control so that the user can upload the file of an image from his computer, to then make the call to the &lt;code&gt;Predict()&lt;/code&gt; method with a &lt;code&gt;Button&lt;/code&gt;, and set the display of the results by showing the values of the variables &lt;code&gt;Result&lt;/code&gt;, and &lt;code&gt;Score&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples running&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this View, and your ViewModel, our website is ready. Here we can see two examples at runtime:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KJzAI9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gj882ysngobv5nzgfuh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KJzAI9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gj882ysngobv5nzgfuh.png" alt="" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sC3cWxWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wqs9us45a7bm8nyp8uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sC3cWxWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wqs9us45a7bm8nyp8uj.png" alt="" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code for the sample can be found in the following repository: &lt;a href="https://github.com/esdanielgomez/MLNET_ImageClassification"&gt;github.com/esdanielgomez/MLNET_ImageClassification&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank you!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thank you very much for reading, I hope this demo can be useful to you. If you have any questions or ideas that you need to discuss, it will be a pleasure to be able to collaborate and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! Or if you like you can also write to me by email: &lt;a href="mailto:daniel@esdanielgomez.com"&gt;daniel@esdanielgomez.com&lt;/a&gt;. :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>machinelearning</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>How to Create Custom 404 error page</title>
      <author>Muhammad Rauf</author>
      <pubDate>Fri, 03 Dec 2021 16:01:35 +0000</pubDate>
      <link>https://dev.to/softcodeon/how-to-create-custom-404-error-page-2ghb</link>
      <guid>https://dev.to/softcodeon/how-to-create-custom-404-error-page-2ghb</guid>
      <description>&lt;p&gt;Hello, Do you need to add a custom 404 error page on your website/blog? 404 error happens when a user opens a non-existing page on your website such as an incorrect link, a page that has been deleted, or when the user mistyped a URL.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn how to add a custom 404 error page on your website/blog. Next, We will describe how to change the title of 404 error pages and prevent them from being indexed by Google.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-add-custom-404-error-page"&gt;
  &lt;/a&gt;
  How to add custom 404 error page
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDnviSUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sff9e0iq1ajxm5xzoa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDnviSUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sff9e0iq1ajxm5xzoa7.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;br&gt;
Here’re steps to adding a custom 404 error page on your WordPress website/blog –&lt;/p&gt;

&lt;p&gt;1.First, login to your WordPress Dashboard.&lt;br&gt;
2.Go to Appearance &amp;gt; Theme Editor.&lt;br&gt;
3.Under theme Editor find 404.php option, and click on it.&lt;br&gt;
4.Now copy and paste the following code in the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.ibb.co/W6tgcKQ/softcodeon.gif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Page Not Found&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Whoops, We can't seem to find the resource you're looking for.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Please check that the Web site address is spelled correctly.Or,&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to Homepage&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#f0f0f0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
  &lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="nc"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="nc"&gt;.error-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nc"&gt;.error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#6200ee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_sidebar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_footer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, tap the “Update File” button.&lt;/p&gt;

&lt;p&gt;Note: Please Keep in mind if you have the same classes as I have added in the above code please change them with the unique classes you want. You can also customize the style by adding background color, changing image or Gif, Modify Font Family, and text for the error page. &lt;br&gt;
To prevent Google and other search engines from indexing 404 error pages of your blog  Follow this guide to know &lt;a href="https://dev.to/softcodeon/how-to-hide-a-wordpress-page-from-google-l79"&gt;How to Hide a Page from Google Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to read in detail from our official website &lt;a href="https://softcodeon.com/tutorials/create-custom-404-error-page.htm"&gt;Create 404 Error page&lt;/a&gt;. I'll recommend to add other best page links to your 404 error page.&lt;/p&gt;

&lt;p&gt;To see &lt;a href="https://codepen.io/softcodeon/pen/QWqjwLY"&gt;DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you find this guide helpful to customize the 404 error page of your website blog. Please discuss below if you have any question about this simple 404 error page.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#48)</title>
      <author>martin krause</author>
      <pubDate>Fri, 03 Dec 2021 15:51:20 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-48-40kh</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-48-40kh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#advent-of-javascript"&gt;
  &lt;/a&gt;
  Advent of JavaScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;24 JavaScript Challenges for the Season&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.adventofjs.com/"&gt;https://www.adventofjs.com/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#accessibility-myths"&gt;
  &lt;/a&gt;
  Accessibility Myths
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A small project debunking common accessibility myths.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://a11ymyths.com"&gt;https://a11ymyths.com&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-html-raw-video-endraw-element-needs-to-go-back-on-the-drawing-board"&gt;
  &lt;/a&gt;
  The HTML &lt;code&gt;video&lt;/code&gt; element needs to go back on the drawing board
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We’ve had the HTML &lt;code&gt;video&lt;/code&gt; element for over a decade. Yet, everyone still defaults to embedding YouTube frames instead of hosting their own videos. The underlying problem is that the &lt;code&gt;video&lt;/code&gt; element isn’t suitable for embedding short video files on webpages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.ctrl.blog/entry/html-responsive-video.html"&gt;https://www.ctrl.blog/entry/html-responsive-video.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-maintain-a-large-nextjs-application"&gt;
  &lt;/a&gt;
  How To Maintain A Large Next.js Application
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, Nirmalya discusses some of the complex problems that he faced while building and maintaining large Next.js applications. He always explains how these problems can be solved by using various tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/"&gt;https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-javascript-engines-achieve-great-performance"&gt;
  &lt;/a&gt;
  How JavaScript engines achieve great performance
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, we’re going to look closer at a few techniques that different JavaScript engines use to achieve good runtime performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blogg.bekk.no/how-javascript-engines-achieve-great-performance-fb0b36601557"&gt;https://blogg.bekk.no/how-javascript-engines-achieve-great-performance-fb0b36601557&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>podman machine on mac OSX 12.0.1 (Monterey)</title>
      <author>Frits Hoogland</author>
      <pubDate>Fri, 03 Dec 2021 15:50:35 +0000</pubDate>
      <link>https://dev.to/yugabyte/podman-machine-on-mac-osx-1201-monterey-1d9m</link>
      <guid>https://dev.to/yugabyte/podman-machine-on-mac-osx-1201-monterey-1d9m</guid>
      <description>&lt;p&gt;Podman is a drop in replacement for Docker, and can handle containers daemonless and rootless ("ruthless"?). Containers work based on cgroups, namespaces and IPC, which is existing in Linux, and therefore requires a linux system to support it (which is based on Fedora CoreOS, and runs in QEMU).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;p&gt;Much of the configuration depends on the existence of 'brew' on OSX. If you haven't got brew (homebrew) installed, you can do so using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to run the podman machine, the podman software needs to be installed (step 1), a virtual machine for running podman on linux needs to be created (step 2), and run (step 3).&lt;/p&gt;

&lt;p&gt;1.Install podman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install podman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Initialize podman machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Start podman machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#verify-podman-machine"&gt;
  &lt;/a&gt;
  Verify podman machine
&lt;/h1&gt;

&lt;p&gt;Because the podman machine must run before it can run containers, it is useful to understand if the podman machine is running. This is done with 'podman machine list':&lt;/p&gt;

&lt;p&gt;Up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME      VM TYPE     CREATED       LAST UP           CPUS    MEMORY     DISK SIZE
podman-m* qemu        17 hours ago  Currently running 1       2.147GB    10.74GB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME      VM TYPE     CREATED       LAST UP           CPUS    MEMORY      DISK SIZE
podman-m* qemu        17 hours ago  3 seconds ago     1       2.147GB     10.74GB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#containers-amp-yugabyte"&gt;
  &lt;/a&gt;
  Containers &amp;amp; yugabyte
&lt;/h1&gt;

&lt;p&gt;This setup is ideal for developers who want an easy way to setup YugabyteDB without all the hassle of configuration.&lt;/p&gt;

&lt;p&gt;Any type of work with podman with containers requires the podman machine to be running. The podman machine is what actually performs the container commands.&lt;/p&gt;

&lt;p&gt;For any type of coordinated work it's important to select a version to work on for the software you are using. Using the latest version can be a different version in time, and can cause version sprawl, so I would strongly recommend always choosing a specific version.&lt;/p&gt;

&lt;p&gt;Obtain the yugabyte docker versions available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -L -s 'https://registry.hub.docker.com/v2/repositories/yugabytedb/yugabyte/tags?page_size=5' | jq '."results"[]["name"]'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"2.6.7.0-b10"
"2.11.0.0-b7"
"2.4.8.0-b16"
"2.6.6.0-b10"
"2.8.0.0-b37"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please mind the jq executable is not installed by default on OSX, but can easily be installed using brew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above versions, choose one to use, and obtain the image of the selected version in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman pull yugabytedb/yugabyte:2.11.0.0-b7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Resolving "yugabytedb/yugabyte" using unqualified-search registries (/etc/containers/registries.conf.d/999-podman-machine.conf)
Trying to pull docker.io/yugabytedb/yugabyte:2.11.0.0-b7...
Getting image source signatures
Copying blob sha256:486c41cfe6bf41372e1fbbe5e644b65e27a0d088135dbd3989721cb251147731
...snipped for brevety...
Copying blob sha256:ea30bbe39b88dfca4bdc2353505ea36c9322b8e9e17f969a0aedb1f058969f88
Copying config sha256:4f1f8156a955f434215a6f8ed01d782d61179c7624cc82a300c2f111c4fa7b51
Writing manifest to image destination
Storing signatures
4f1f8156a955f434215a6f8ed01d782d61179c7624cc82a300c2f111c4fa7b51
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now a container can be started from the downloaded image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman run -d --name yugabyte-2.11 -p5433:5433 -p7000:7000 -p9000:9000 yugabytedb/yugabyte:2.11.0.0-b7 bin/yugabyted start --base_dir=/home/yugabyte/yb_data --daemon=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;701422c063b46462c2b5bd573c117345f996e914325e26979829e506b8bc4362
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes a few moments to start.&lt;br&gt;
When it has been started, the container and its status can be validated using podman ps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONTAINER ID  IMAGE                    COMMAND               CREATED         STATUS             PORTS                                                                   NAMES
701422c063b4  ../yugabyte:2.11.0.0-b7  bin/yugabyted sta...  37 seconds ago  Up 36 seconds ago  0.0.0.0:5433-&amp;gt;5433/tcp, 0.0.0.0:7000-&amp;gt;7000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp  yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the container was successfully started, it will say 'Up' with the status. Also mind the name, which is important if you have got more than one container running.&lt;/p&gt;

&lt;p&gt;One issue I found was that port 7000 was taken, which prevented the container from starting, because it wanted to use port 7000 on localhost. This was caused by: (OSX) system preferences&amp;gt;sharing&amp;gt;airplay-receiver, which is checked by default and needs to be unchecked.&lt;/p&gt;

&lt;p&gt;After the container has started, it can be accessed from the CLI in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman exec -it yugabyte-2.11 bash 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@701422c063b4 yugabyte]#
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows you to investigate logfiles, process statuses, etc.&lt;/p&gt;

&lt;p&gt;Stop the yugabyte container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman stop yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restart the yugabyte container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman restart yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please be aware that the yugabyte container must be stopped prior to stopping the podman machine. The podman machine might need to be stopped if no containers need running, and will be stopped if Mac is going to be turned off or restarted. If the yugabyte container is not stopped, it will leave a file in place indicating that yugabyte YSQL is running, which will prevent YSQL from starting up if the container is started again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#podman-containers-and-host-restart"&gt;
  &lt;/a&gt;
  podman, containers and host restart
&lt;/h1&gt;

&lt;p&gt;During the setup above, the podman machine has been initialized and is ready for use. After a host reboot, the podman machine doesn't need to be initialized again. However, the podman machine must be started after a reboot, it isn't started automatically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the podman machine is started, you can query the container statuses. By default containers are not automatically started on podman machine startup. To query the status of the containers including non-running containers, use the '--all' flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman ps --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONTAINER ID  IMAGE                    COMMAND               CREATED      STATUS                     PORTS                                                                   NAMES
701422c063b4  ../yugabyte:2.11.0.0-b7  bin/yugabyted sta...  2 hours ago  Exited (0) 10 minutes ago  0.0.0.0:5433-&amp;gt;5433/tcp, 0.0.0.0:7000-&amp;gt;7000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp  yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows that our yugabyte-2.11 container still is there, but it is not running. In order to use it, start the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman start yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run podman ps again, we can validate the container is now running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman ps --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONTAINER ID  IMAGE                    COMMAND               CREATED      STATUS                     PORTS                                                                   NAMES
701422c063b4  ../yugabyte:2.11.0.0-b7  bin/yugabyted sta...  2 hours ago  Up 40 seconds ago  0.0.0.0:5433-&amp;gt;5433/tcp, 0.0.0.0:7000-&amp;gt;7000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp  yugabyte-2.11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One way of using YSQL is to install postgresql on mac via brew (brew install postgresql). You can then run psql on the CLI directly to access YSQL in the container.&lt;/p&gt;

&lt;p&gt;The database and its contents do survive stopping and starting the container, including if this has happened as part of a restart of the host. If a container is removed, the data is removed with it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remove-podman-machine"&gt;
  &lt;/a&gt;
  Remove podman machine
&lt;/h1&gt;

&lt;p&gt;The podman machine running in qemu can be stopped, and removed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;podman machine stop
podman machine rm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the podman machine is removed, all the containers it hosted are removed with it.&lt;/p&gt;

&lt;p&gt;The podman files are stored in the following place:&lt;br&gt;
~/.config   podman machine configuration file&lt;br&gt;
~/.local        podman machine disk image &lt;br&gt;
~/.ssh      podman machine private and public key&lt;/p&gt;

&lt;p&gt;Containers and their configuration are stored inside the podman machine.&lt;/p&gt;

</description>
      <category>yugabyte</category>
      <category>database</category>
      <category>devops</category>
      <category>containers</category>
    </item>
    <item>
      <title>AG Grid Community Roundup November 2021</title>
      <author>Alan Richardson</author>
      <pubDate>Fri, 03 Dec 2021 15:41:41 +0000</pubDate>
      <link>https://dev.to/ag-grid/ag-grid-community-roundup-november-2021-3ihl</link>
      <guid>https://dev.to/ag-grid/ag-grid-community-roundup-november-2021-3ihl</guid>
      <description>&lt;p&gt;November has come and gone, which means that Black Friday has passed, but fear not. In this community roundup post we have lots of free resources to learn from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ag-grids-every-day-is-black-friday-community-edition"&gt;
  &lt;/a&gt;
  AG Grid's Every Day is Black Friday Community Edition
&lt;/h2&gt;

&lt;p&gt;AG Grid never does a Black Friday Sale because we offer the community edition of AG Grid for free every day. You can use the community edition for free, forever and even in commercial products. It's MIT licensed and &lt;a href="https://github.com/ag-grid/ag-grid"&gt;available on Github&lt;/a&gt;&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CW-9kqptJhC/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#new-release-of-ag-grid"&gt;
  &lt;/a&gt;
  New Release of AG Grid
&lt;/h2&gt;

&lt;p&gt;We &lt;a href="https://blog.ag-grid.com/whats-new-in-ag-grid-26-2/"&gt;released a new version of AG Grid&lt;/a&gt; which adds a couple of very useful features with the main points being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ag-grid.com/javascript-data-grid/sparklines-overview/"&gt;in-cell sparklines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AG Grid's &lt;a href="https://www.ag-grid.com/react-data-grid/reactui/"&gt;100% React Rendering Engine&lt;/a&gt; now covers all the features of the grid.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sparklines"&gt;
  &lt;/a&gt;
  Sparklines
&lt;/h3&gt;

&lt;p&gt;The Sparklines are an extension of our integrated charts so is available in the Enterprise edition.&lt;/p&gt;

&lt;p&gt;You can see them in action in this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4f-3vJ6PFC0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-rendering-engine"&gt;
  &lt;/a&gt;
  React Rendering Engine
&lt;/h3&gt;

&lt;p&gt;A 100% React Rendering engine is actually a pretty big deal for us, and we should probably have bumped the version higher :)&lt;/p&gt;

&lt;p&gt;If you want to learn more about the rendering engine then we cover it in this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LeQ_kW9PWFk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storybookjss-interactive-stories"&gt;
  &lt;/a&gt;
  StoryBookJS's Interactive Stories
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//angularnation.net"&gt;Angular Nation&lt;/a&gt; hosted a Storybook Office Hours session where the full interactive capabilities were demonstrated to show state changes being check after user interaction events with the new &lt;a href="https://storybook.js.org/addons/storybook-addon-interaction"&gt;Storybook Interactions Add-on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is well worth signing up to Angular Nation so you can take part in all their free events. Fortunately the office hour session has been released to YouTube and it is a great interactive demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l4NV2MiJRvE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  PodCasts
&lt;/h2&gt;

&lt;p&gt;The WebRush podcast released some interesting episodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webrush.io/episodes/episode-160-fullerstack-with-val-neekman"&gt;Val Neekman talking about FullerStack open source Angular dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webrush.io/episodes/episode-159-do-mobile-web-with-your-preferred-web-stack-with-max-lynch"&gt;Mobile application tooling and frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webrush.io/episodes/episode-158-svelte-and-elderjs-with-nick-reese"&gt;Svelte and Elder.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webrush.io/episodes/episode-161-searching-for-a-job-with-laurie-barth"&gt;Advice on Job hunting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you are looking for a new job, we recommend doing a quick search on job sites for "AG Grid" and you'll see it's a valuable and in-demand skill. The easiest way to build the skill is to create applications that use AG Grid.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#football-stats-direct-uses-ag-grid"&gt;
  &lt;/a&gt;
  Football Stats Direct uses AG Grid
&lt;/h2&gt;

&lt;p&gt;A live example of AG Grid can be found at &lt;a href="http://FootballStatsDirect.com"&gt;FootballStatsDirect.com&lt;/a&gt; and you can see the Enterprise edition being used live allow you to pivot, group, export and chart football result statistics.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://FootballStatsDirect.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXgh0svj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv9u467dw84pj01gjvra.png" alt="Football stats" width="680" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see &lt;a href="https://blog.ag-grid.com/showcase/"&gt;more examples of AG Grid applications in this showcase&lt;/a&gt; page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-about-ag-grid"&gt;
  &lt;/a&gt;
  Content About AG Grid
&lt;/h2&gt;

&lt;p&gt;This blog post from Ramya Balasubramanian shows &lt;a href="https://javascript.plainenglish.io/creating-a-reusable-component-for-using-templates-in-ag-grid-tables-6d9a8dfc88e3"&gt;How to Create a Reusable Angular Components for using Templates&lt;/a&gt;&lt;br&gt;
 in AG Grid.&lt;/p&gt;

&lt;p&gt;If you are interested in styling AG Grid then the &lt;a href="https://vuestic.dev/en/extensions/ag-grid"&gt;Vuestic UI Framework has an AG Grid Theme&lt;/a&gt; which might give you some good ideas for your own theme. You can learn all about &lt;a href="https://www.ag-grid.com/javascript-data-grid/themes/"&gt;AG Grid Themes in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-conference-content"&gt;
  &lt;/a&gt;
  React Conference Content
&lt;/h2&gt;

&lt;p&gt;All of the talks from &lt;a href="https://www.youtube.com/playlist?list=PL53Z0yyYnpWhX3I9yp5BYqRJ_7m19-uHU"&gt;React Brussels 2021 are now on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's worth having a look through because there is bound to be something to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-the-blog"&gt;
  &lt;/a&gt;
  On The Blog
&lt;/h2&gt;

&lt;p&gt;On the blog in November we covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ag-grid.com/using-react-testing-library-with-ag-grid/"&gt;Using React Testing Library with a 3rd Party Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ag-grid.com/building-crud-in-ag-grid-with-angular-and-redux/"&gt;How to build a CRUD application using Angular, Redux and AG Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ag-grid.com/proof-trading-case-study/"&gt;Proof Trading Case Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ag-grid.com/automatic-header-names/"&gt;Automatically generated column headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ag-grid.com/dynamically-setting-ag-grid-columns-from-json/"&gt;Dynamically Creating AG Grid Columns From JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-react-testing-library-with-a-3rd-party-component"&gt;
  &lt;/a&gt;
  Using React Testing Library with a 3rd Party Component
&lt;/h3&gt;

&lt;p&gt;A post showing &lt;a href="(https://blog.ag-grid.com/using-react-testing-library-with-ag-grid/)"&gt;how to use Jest and the React Testing Library for a 3rd party component&lt;/a&gt;, in this case the 3rd party component was AG Grid but the approach should work for any 3rd party component.&lt;/p&gt;

&lt;p&gt;We don't use any internal information about the component and haven't had to edit it in any way to expose &lt;code&gt;data-testid&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;Our documentation has information on how to use &lt;a href="https://www.ag-grid.com/react-data-grid/testing/"&gt;Jest and Enzyme to test&lt;/a&gt; which would give access to the internal API, if you want even more control over your testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customer-case-study-proof-trading"&gt;
  &lt;/a&gt;
  Customer Case Study - Proof Trading
&lt;/h3&gt;

&lt;p&gt;In the &lt;a href="https://blog.ag-grid.com/proof-trading-case-study/"&gt;Proof Trading Case Study&lt;/a&gt; we sat down to learn about their business and how they use AG Grid in their real time trading platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-a-crud-app-with-angular-and-redux"&gt;
  &lt;/a&gt;
  Building a CRUD App with Angular and Redux
&lt;/h3&gt;

&lt;p&gt;In this post &lt;a href="https://blog.ag-grid.com/author/marats/"&gt;Marats Stelihs&lt;/a&gt; shows &lt;a href="https://blog.ag-grid.com/building-crud-in-ag-grid-with-angular-and-redux/"&gt;how to build a CRUD application using Angular, Redux and AG Grid&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-header-names"&gt;
  &lt;/a&gt;
  Automatic Header Names
&lt;/h3&gt;

&lt;p&gt;[Stephen Cooper] wrote a post describing the &lt;a href="https://blog.ag-grid.com/automatic-header-names/"&gt;various ways that AG Grid automatically generates column header names&lt;/a&gt; which can help save time writing column definition code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamically-creating-ag-grid-columns-from-json"&gt;
  &lt;/a&gt;
  Dynamically Creating AG Grid Columns From JSON
&lt;/h3&gt;

&lt;p&gt;Rarely, do we need to &lt;a href="https://blog.ag-grid.com/dynamically-setting-ag-grid-columns-from-json/"&gt;dynamically create AG Grid Columns From JSON&lt;/a&gt; because we normally know the data set we are working from. But it is useful to have the options open to us if we need them.&lt;/p&gt;




&lt;p&gt;That's probably enough for the moment.&lt;/p&gt;

</description>
      <category>aggrid</category>
      <category>javascript</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Video Animation Using HTML &amp; GSAP</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 03 Dec 2021 15:35:16 +0000</pubDate>
      <link>https://dev.to/nikhil27b/video-animation-using-html-gsap-424d</link>
      <guid>https://dev.to/nikhil27b/video-animation-using-html-gsap-424d</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I Created an Video Animation using HTML CSS &amp;amp; GSAP Animation. In this post I use simple video and GSAP for increase video width on scroll and some other code to show title and subtitle. I hope you like this also comments about your thoughts. also For more content &lt;strong&gt;follow me on Instagram&lt;/strong&gt;  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you 🙂!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/YzryzJZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MACHINE LEARNING WITH PYTHON: INTRODUCTION</title>
      <author>Emma Donery</author>
      <pubDate>Fri, 03 Dec 2021 15:10:03 +0000</pubDate>
      <link>https://dev.to/emma_donery/machine-learning-with-python-introduction-4e67</link>
      <guid>https://dev.to/emma_donery/machine-learning-with-python-introduction-4e67</guid>
      <description>&lt;p&gt;This article is for current and aspiring machine learning practitioners looking to implement solutions to real-world machine learning problems. It is an introductory article suitable for beginners with no previous knowledge of machine learning or artificial intelligence (AI).&lt;/p&gt;

&lt;p&gt;This is the first article on my series "Machine Learning with Python". I will introduce the fundamental concepts of Machine Learning, its applications and how to set up our working environment as well as a hands on practices on a simple project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction to Machine Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Machine learning is a type of artificial intelligence (AI) that provides computers with the ability to learn without being explicitly programmed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classification-of-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Classification of Machine Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;At a broad level, machine learning can be classified into three types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Supervised learning&lt;/li&gt;
&lt;li&gt;Unsupervised learning&lt;/li&gt;
&lt;li&gt;Reinforcement learning&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Python?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Python has become the lingua franca for many data science applications providing data scientists with a large array of general and special-purpose functionality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It combines the power of general-purpose programming languages with the ease of use of domain-specific scripting languages like MATLAB or R.&lt;/li&gt;
&lt;li&gt;It has libraries for data loading, visualization, statistics, natural language processing, image processing, and more.&lt;/li&gt;
&lt;li&gt;It has the ability to interact directly with the code, using a terminal or other tools like the Jupyter Notebook.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#importance-or-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Importance or Machine learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Rapid increment in the production of data&lt;/li&gt;
&lt;li&gt;Solving complex problems, which are difficult for a human&lt;/li&gt;
&lt;li&gt;Decision making in various sector including finance&lt;/li&gt;
&lt;li&gt;Finding hidden patterns and extracting useful information from data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#applications-of-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Applications of Machine Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Self-driving cars&lt;/li&gt;
&lt;li&gt;Robotics&lt;/li&gt;
&lt;li&gt;Language Processing&lt;/li&gt;
&lt;li&gt;Vision Processing&lt;/li&gt;
&lt;li&gt;Forecasting stock market trends&lt;/li&gt;
&lt;li&gt;Recommendation systems&lt;/li&gt;
&lt;li&gt;Image and Speech recognition&lt;/li&gt;
&lt;li&gt;Predictions&lt;/li&gt;
&lt;li&gt;Detection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-life-cycle"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Machine learning Life cycle&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Gathering/extraction&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the first phase of the machine learning lifecycle that is concerned with identifying and obtaining all data-related problems.&lt;br&gt;
There are many data sources which we can gather data from. such include files, database, internet, or mobile devices.&lt;/p&gt;

&lt;p&gt;This step includes the below tasks:&lt;br&gt;
    - Identify various data sources&lt;br&gt;
    - Collect data&lt;br&gt;
    - Integrate the data obtained from different sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Preparation&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data preparation is a step where we put our data into a suitable place and prepare it to use in our machine learning training.&lt;br&gt;
After gathering data, we need to prepare it so that we can use it in our project. this phase can be divided into two:&lt;/p&gt;

&lt;p&gt;i). Data exploration&lt;br&gt;
It's utilized to figure out what kind of data we're dealing with. We must comprehend data's features, format, and quality. In this, we find Correlations, general trends, and outliers.&lt;/p&gt;

&lt;p&gt;ii). Data Preprocessing / wrangling&lt;br&gt;
Data preprocessing is the process of transforming raw data into an understandable format.&lt;br&gt;
In real-world applications, collected data may have various issues, including:&lt;br&gt;
    - Missing Values&lt;br&gt;
    - Duplicate data&lt;br&gt;
    - Invalid data&lt;br&gt;
    - Noise&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Analysis&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal of this step is to create a machine learning model that will study the data using a variety of analytical approaches and then evaluate the results. It begins with the identification of the problem type, followed by the selection of machine learning techniques such as classification, regression, cluster analysis, association, and so on, followed by the construction of the model using prepared data, and finally the evaluation of the model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model Training&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this step we train our model to improve its performance for better outcome of the problem. Training a model is required so that it can understand the various patterns, rules, and, features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model Testing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We test our machine learning model once it has been trained on a specific dataset. We check the correctness of our model in this stage by feeding it a test dataset.&lt;br&gt;
The percentage correctness/accuracy of the model is determined by testing it against the project or problem's requirements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model Evaluation and Improvement&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Model evaluation is an important step in the creation of a model. It assists in determining the optimal model to represent our data and how well that model will perform in the future.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last step of machine learning life cycle is deployment, where we deploy the model in the real-world system.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#popular-python-libraries-and-tools-for-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Popular Python Libraries and Tools for Machine Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Jupyter Notebook&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is an interactive environment for running code in the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numpy&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NumPy is a python library mainly used for working with arrays and to perform a wide variety of mathematical operations on arrays.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pandas is a Python library for data wrangling and analysis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Matplotlib&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is the primary scientific plotting library in Python. It provides functions for making publication-quality visualizations such as line charts, histograms, scatter&lt;br&gt;
plots, and so on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scikit-learn&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#environment-setup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Environment setup&lt;/strong&gt;
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#installing-anaconda-and-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Anaconda and Python&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Download and Install Anaconda (Python 3.6 version) &lt;a href="https://www.anaconda.com/download/"&gt;Download&lt;/a&gt; and choose according to your OS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a terminal&lt;/li&gt;
&lt;li&gt;Confirm conda is installed correctly, by typing:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;conda -V&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Confirm Python is installed correctly by typing:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;python -V&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Confirm your conda environment is up-to-date, type:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;conda update conda
conda update anaconda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#hands-on-practice-understanding-amp-classifying-iris-species"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hands on practice: Understanding &amp;amp; Classifying Iris Species&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this section, we will go through a simple machine learning application and create our first model.&lt;/p&gt;

&lt;p&gt;The data we will use for this example is the Iris dataset, a classical dataset in machine learning and statistics. It is included in scikit-learn in the datasets module. We can load it by calling the load_iris function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_iris&lt;/span&gt;
&lt;span class="n"&gt;iris_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_iris&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This dataset consists of 3 different types of irises’ (Setosa, Versicolour, and Virginica) petal and sepal length, stored in a 150x4 numpy.ndarray&lt;/p&gt;

&lt;p&gt;The rows being the samples and the columns being: Sepal Length, Sepal Width, Petal Length and Petal Width. Our goal is to create a machine learning model that can learn from the measurements of known-species irises in order to predict the species of a new iris.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Parts of the iris flower&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73dHu-AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt66o930oz82ajdme3a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73dHu-AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt66o930oz82ajdme3a3.png" alt="Image description" width="300" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a supervised learning problem because we have measurements for which we know the correct iris species. We wish to anticipate one of numerous options in this situation (the species of iris). This is an illustration of a classification issue. The possible outputs (various irises species) are referred to as classes. This is a three-class classification problem since each iris in the dataset belongs to one of three classes. The species of this flower is the desired output for a single data point (an iris). The species to which a data point belongs is referred to as its label.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Target:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iris_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'target'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Target:
&lt;span class="o"&gt;[&lt;/span&gt;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The meanings of the numbers are given by the iris['target_names'] array: 0 means setosa, 1 means versicolor, and 2 means virginica. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measuring-success-training-and-testing-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Measuring Success: Training and Testing Data&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We can't evaluate the model using the same data we used to generate it. This is because our model can always remember the entire training set and, as a result, will always predict the proper label for any given point in the training set.&lt;/p&gt;

&lt;p&gt;To evaluate the model's performance, we present it with new data (data it hasn't seen before) and labels. This is often accomplished by dividing the labeled data (in this case, our 150 flower measurements) into two halves. The training data or training set is a subset of the data that is utilized to develop our machine learning model. The remaining data will be used to evaluate the model's performance; this is known as the test data, test set, or hold-out set.&lt;/p&gt;

&lt;p&gt;The train test split function in scikit-learn is a function that shuffles and separates the dataset for you. As the training set, this function extracts 75% of the rows in the data, together with the accompanying labels for this data. The test set is made up of the remaining 25% of the data as well as the remaining labels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; In scikit-learn, data is usually denoted with a capital X, while labels are denoted by&lt;br&gt;
a lowercase y. Let’s call train_test_split on our data and assign the outputs using this nomenclature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;iris_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;iris_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'target'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the train_test_split function is X_train, X_test, y_train, and y_test, which are all NumPy arrays. X_train contains 75% of the rows of the dataset, and X_test contains the remaining 25%&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X_train shape: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"y_train shape: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;X_train shape: &lt;span class="o"&gt;(&lt;/span&gt;112, 4&lt;span class="o"&gt;)&lt;/span&gt;
y_train shape: &lt;span class="o"&gt;(&lt;/span&gt;112,&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inspecting-our-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Inspecting our data&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the best ways to inspect data is to visualize it. One way to do this is by using a scatter plot. A scatter plot of the data puts one feature along the x-axis and another along the y-axis, and draws a dot for each data point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# create dataframe from data in X_train
# label the columns using the strings in iris_dataset.feature_names
&lt;/span&gt;&lt;span class="n"&gt;iris_dataframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iris_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feature_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create a scatter matrix from the dataframe, color by y_train
&lt;/span&gt;&lt;span class="n"&gt;grr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iris_dataframe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'o'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;hist_kwds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'bins'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mglearn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data points are colored according to the species the iris belongs to. To create the plot, we first convert the NumPy array into a pandas DataFrame. pandas has a function to create pair plots called scatter_matrix. The diagonal of this matrix is filled with histograms of each feature:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fAOyx16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19aozrebscpdtxeuih12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fAOyx16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19aozrebscpdtxeuih12.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The three classes appear to be relatively well distinguished using the sepal and petal measurements, as seen in the graphs. This means that a machine learning model will almost certainly be able to distinguish them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-building-knearest-neighbors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Model Building: k-Nearest Neighbors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;we will use a k-nearest neighbors classifier, which is easy to understand The training set is the only thing that needs to be stored while creating this model. The algorithm identifies the point in the training set that is closest to the new point to create a prediction for a new data point. The label of this training point is then assigned to the new data point.&lt;/p&gt;

&lt;p&gt;Instead of employing only the closest neighbor to the new data point, the k in k-nearest neighbors denotes that any fixed number k of neighbors can be included in the training (for example, the closest three or five neighbors). The majority class among these neighbors can then be used to construct a prediction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.neighbors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;
&lt;span class="n"&gt;knn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;KNeighborsClassifier&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'auto'&lt;/span&gt;, &lt;span class="nv"&gt;leaf_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30, &lt;span class="nv"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'minkowski'&lt;/span&gt;,
 &lt;span class="nv"&gt;metric_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;n_jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2,
 &lt;span class="nv"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'uniform'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-predictions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making Predictions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;After building our model, we are now ready to make predictions. To make a prediction, we call the predict method of the knn object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Prediction: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Predicted target name: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;iris_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'target_names'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our model predicts that this new iris belongs to the class 0, meaning its species is&lt;br&gt;
setosa. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#model-evaluation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Model Evaluation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is where the test set that we created earlier comes in. This data was not used to build the model, but we do know what the correct species is for each iris in the test&lt;br&gt;
set. Therefore, we can make a prediction for each iris in the test data and compare it against its label (the known species). We can measure how well the model works by computing the accuracy, which is the fraction of flowers for which the right species was predicted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Test set predictions:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Test set score: {:.2f}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Test &lt;span class="nb"&gt;set &lt;/span&gt;predictions:
 &lt;span class="o"&gt;[&lt;/span&gt;2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2]
Test &lt;span class="nb"&gt;set &lt;/span&gt;score: 0.97
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this model, the test set accuracy is about 0.97, which means we made the right prediction for 97% of the irises in the test set.&lt;/p&gt;

&lt;p&gt;Did you like this article? If Yes, please leave a comment below&lt;br&gt;
Lets connect on &lt;a href="https://twitter.com/Emma_Donery"&gt;twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/emma-donery-0831a7188/"&gt;linkedin&lt;/a&gt;&lt;br&gt;
Happy Pythoning!🎊🎊&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>Day 6 - Responsive Web Design Principles | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Fri, 03 Dec 2021 14:29:33 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-6-responsive-web-design-principles-100daysofcode-28cg</link>
      <guid>https://dev.to/jannatinnaim/day-6-responsive-web-design-principles-100daysofcode-28cg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYkUroCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvyuxmcxapokv4lxivxw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYkUroCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvyuxmcxapokv4lxivxw.jpg" alt="Coding Motivation Banner" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;Today I learnt about responsive web design and how to implement them. &lt;code&gt;media-queries&lt;/code&gt; are somewhat new to me so kind of excited to learn about them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;It was a fairly small section of course so I did not face any problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'll do the &lt;a href="//freecodecamp.org/learn/responsive-web-design#css-flexbox"&gt;CSS Flexbox&lt;/a&gt; section of the course tomorrow and this one seems kinda hard as this is a new concept entirely to me. Hope it goes well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-the-experience-so-far"&gt;
  &lt;/a&gt;
  How is the experience so far?
&lt;/h3&gt;

&lt;p&gt;I think I'm starting to get a bit tired for now. I should probably get some rest but, that would break my daily streak. If it's not against the rule, I'll maybe take one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning HTML, CSS and Javascript Vanilla - Reproducing the John Conway's Game of Life</title>
      <author>Murilo Oliveira</author>
      <pubDate>Fri, 03 Dec 2021 14:29:32 +0000</pubDate>
      <link>https://dev.to/akadot_/learning-html-css-and-javascript-vanilla-reproducing-the-john-conways-game-of-life-9pn</link>
      <guid>https://dev.to/akadot_/learning-html-css-and-javascript-vanilla-reproducing-the-john-conways-game-of-life-9pn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;Hi there, are you looking for cool projects to improve your &lt;strong&gt;Javascript&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;HTML&lt;/strong&gt; skills?&lt;/p&gt;

&lt;p&gt;In this tutorial I will teach how you can do your own version of the Game of Life, a game idea developed by the british mathematic &lt;strong&gt;John Conway&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This game is a part of an tag called “cellular automata”,which according to wikipedia mean: &lt;em&gt;"simpler temporal evolution models capable of exhibiting complicated behavior"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But don't worry about this complex explanation, we're basically going to make a game without players, almost like it's alive.&lt;/p&gt;

&lt;p&gt;This is the final result, a field populated by blocks that change their state based on predefined rules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cg-M8Wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jda7yz161d5fg4d547av.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cg-M8Wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jda7yz161d5fg4d547av.gif" alt="Exemplo de Estrutura do Jogo da Vida" width="668" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my Github repository below, to help you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/akadot/game-of-life"&gt;https://github.com/akadot/game-of-life&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, let's do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#construction"&gt;
  &lt;/a&gt;
  Construction:
&lt;/h2&gt;

&lt;p&gt;To build this project, we will use a powerfull HTML resource called &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/API/Canvas_API"&gt;&lt;strong&gt;Canvas API&lt;/strong&gt;&lt;/a&gt;, which allows shapes &lt;strong&gt;2D&lt;/strong&gt; or &lt;strong&gt;3D&lt;/strong&gt; forms using only &lt;strong&gt;Vanilla Javascript&lt;/strong&gt;. But don't worry about this, everything is very simple, the Canvas API is a native HTML tag.&lt;/p&gt;

&lt;p&gt;The first step is create the three files that we will use, starting by the &lt;strong&gt;HTML&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css" /&amp;gt;
    &amp;lt;title&amp;gt;Jogin da Vida&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;canvas id="board"&amp;gt;&amp;lt;/canvas&amp;gt;

    &amp;lt;script src="game.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will just use a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag, with an &lt;strong&gt;id&lt;/strong&gt;reference to use in our JS file.&lt;/p&gt;

&lt;p&gt;Now we'll create a simple CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  padding: 0;
  margin: 0;
  outline: 0;
  box-sizing: border-box;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #000000;
}

#board {
  border: 5px solid #5c3ec9;
  border-radius: 5px;
  background-color: #f8f8f2;
  box-shadow: 0px 0px 10px #5c3ec9;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done, now we can open on our browser and...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhVUMlRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jrv4e866zalgxr8b159.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhVUMlRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jrv4e866zalgxr8b159.png" alt="Canvas Vazio" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, I know, it's just an empty board, but I promise it will be very cool.&lt;/p&gt;

&lt;p&gt;Now we need to set the Canvas properties, there are a lot of ways to do this, but I prefer to do everything inside the &lt;strong&gt;Javascript&lt;/strong&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logic"&gt;
  &lt;/a&gt;
  Logic:
&lt;/h2&gt;

&lt;p&gt;Let's really get your hands on the code. First we need to reference the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag id in our JS file, to define what context we will work (2D or 3D):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const canvas = document.querySelector("#board");
const ctx = canvas.getContext("2d"); 
//ctx define o contexto do nosso canvas, no caso será 2D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we set some constants that will help us along the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const GRID_WIDTH = 500;             
const GRID_HEIGHT = 500;       
const RES = 5;                     
const COL = GRID_WIDTH / RES;    
const ROW = GRID_HEIGHT / RES;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can use this constants to define the canvas height and width:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;canvas.width = GRID_WIDTH;
canvas.height = GRID_HEIGHT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done, now I promisse we will can see something. But to get sure, let's put an &lt;code&gt;addEventListener()&lt;/code&gt; around the code, to wait our HTML content load before teh code runs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener("DOMContentLoaded", () =&amp;gt; {
  const canvas = document.querySelector("#board");
  const ctx = canvas.getContext("2d");

  const GRID_WIDTH = 500;
  const GRID_HEIGHT = 500;
  const RES = 5;
  const COL = GRID_WIDTH / RES;
  const ROW = GRID_HEIGHT / RES;

  canvas.width = GRID_WIDTH;
  canvas.height = GRID_HEIGHT;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is draw our blocks. They will be simples squares inside an 2D array, like a cell inside a Excel grid or an Google Sheets file.&lt;/p&gt;

&lt;p&gt;We will create a function called &lt;strong&gt;createGrid()&lt;/strong&gt;, that will receive the numbers of &lt;strong&gt;rows&lt;/strong&gt; and &lt;strong&gt;columns&lt;/strong&gt;. Then, the function will return a new empty array with the length equal the number of the columns and, for each position insite this array, it will be created a new array with the same number of the rows but filled filled with 0 or 1 randomly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function createGrid(cols, rows) {
    return new Array(cols)
      .fill(null)
      .map(() =&amp;gt; new Array(rows)
                 .fill(null)
                 .map(() =&amp;gt; Math.round(Math.random())));
}

let grid = createGrid(COL, ROW); //we will keep the array inside a variable "grid"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start to draw our blocks now, based on the cell values, where the numbers &lt;strong&gt;1&lt;/strong&gt; will be filled and the numbers &lt;strong&gt;0&lt;/strong&gt; will be blanked:&lt;/p&gt;

&lt;p&gt;To do it, we need a new function called &lt;strong&gt;drawGrid()&lt;/strong&gt;, that will receive our &lt;strong&gt;grid&lt;/strong&gt;, our &lt;strong&gt;rows&lt;/strong&gt; and &lt;strong&gt;columns&lt;/strong&gt; and our &lt;strong&gt;block resolution/size&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function drawGrid(grid, cols, rows, reslution) {
    ctx.clearRect(0, 0, cols, rows);
    for (let i = 0; i &amp;lt; cols; i++) {
      for (let j = 0; j &amp;lt; rows; j++) {
        const cell = grid[i][j];
        ctx.fillStyle = cell ? "#5c3ec9" : "#f8f8f2";
        ctx.fillRect(i * reslution, j * reslution, reslution, reslution);
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, to paint the cells fisrt we need to run the Canvas API native function &lt;strong&gt;clearRect()&lt;/strong&gt;, that will clear our board before everything. It's receive on two first parameters the initial coordinates to start the cleaning, and on the last two parameters, we need to set the full size of our board, where the function will stop the cleaning.&lt;/p&gt;

&lt;p&gt;Once that's done, let's do two repeat loops, to go through our entire array. For each loop, we will keep the current cell inside a constant called &lt;strong&gt;cell&lt;/strong&gt; and, with a &lt;strong&gt;ternary if&lt;/strong&gt;, we will check if the cell has a &lt;strong&gt;0&lt;/strong&gt; or an &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the cell's value is &lt;strong&gt;1&lt;/strong&gt;, we will apply a color &lt;strong&gt;#5c3ec9&lt;/strong&gt;, using another Canvas API native property called &lt;strong&gt;fillStyle&lt;/strong&gt;, else we just apply the same color of our background (remeber, in JS the value 1 means true/existing, and the value 0 means false/nonexistent).&lt;/p&gt;

&lt;p&gt;On the next line, another native tag, but this time we will usa the function &lt;strong&gt;fillRect()&lt;/strong&gt;, that will draw our square following 4 parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First: the X coordinate where the square inits (in this case, we will put our resolution * the current array position);&lt;/li&gt;
&lt;li&gt;Second: the Y coordinate where the square inits (in this case, we will put our resolution * the current array position again);&lt;/li&gt;
&lt;li&gt;Third: the square width (our resolution);&lt;/li&gt;
&lt;li&gt;Fourth: the square heigth (our resolution again).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can draw our squares inside the canvas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drawGrid(grid, COL, ROW, RES);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5SalXp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo8z2vj0rx2qksmj4b1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5SalXp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo8z2vj0rx2qksmj4b1h.png" alt="Canvas Desenhado com os Retângulos Aleatórios" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explaining-the-game-rules"&gt;
  &lt;/a&gt;
  Explaining the Game Rules
&lt;/h2&gt;

&lt;p&gt;Before we proceed, we need to understand the rules proposed by John Conway, so that the game is actually "self-playing".&lt;/p&gt;

&lt;p&gt;There are four simple rules to do this, that defines if a cell is &lt;strong&gt;alive&lt;/strong&gt; (our purple/1 cells), or &lt;strong&gt;dead&lt;/strong&gt; (our black/0 cells). The rules are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;1:&lt;/strong&gt; Any live cell with fewer than two live neighbours dies, as if by underpopulation;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2:&lt;/strong&gt; Any live cell with two or three live neighbours lives on to the next generation;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3:&lt;/strong&gt; Any live cell with more than three live neighbours dies, as if by overpopulation;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4:&lt;/strong&gt; Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AiJfcZFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6kefkya5x9wfz94hmku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AiJfcZFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6kefkya5x9wfz94hmku.png" alt="Regras do Jogo da Vida de John Conway" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following this rules, let's create our function to do this. It's will go through our entire array, apply the rules and generate a new array to be drawn by the &lt;strong&gt;drawGrid()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;At each repetition of this cycle, we will consider that the new array is a new generation of cells that inherit the last generation conditions.&lt;/p&gt;

&lt;p&gt;This function will be called &lt;strong&gt;nexGen()&lt;/strong&gt; and, as a first step we will keep the last geeration in a constant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nextGen(grid) {
    const nextGen = grid.map((arr) =&amp;gt; [...arr]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you don't already know, in the &lt;code&gt;[...arr]&lt;/code&gt; excerpt we use the &lt;strong&gt;SPREAD&lt;/strong&gt; operator, which was added to Javascript from version 6 and is intended to store a greater number of information at once, widely used with arrays and objects. You can also use the &lt;code&gt;.push()&lt;/code&gt; or &lt;code&gt;.slice()&lt;/code&gt; functions instead of the spread operator, there's no problem with that.&lt;/p&gt;

&lt;p&gt;The next step is to start the loops, that will go through the array to apply the game rules. As we did above, we need to run through all the lines, using &lt;code&gt;grid.length&lt;/code&gt; and then all the columns, using &lt;code&gt;grid[col].length&lt;/code&gt; (the &lt;strong&gt;col&lt;/strong&gt; parameter is just the name I gave the &lt;strong&gt;for&lt;/strong&gt; control variable, but you can use the letters &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;j&lt;/strong&gt; as usual).&lt;/p&gt;

&lt;p&gt;We'll take the opportunity to capture the initial cell in a constant and create a variable to count the number of living neighbor cells.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; for (let col = 0; col &amp;lt; grid.length; col++) {
      for (let row = 0; row &amp;lt; grid[col].length; row++) {
        const currentCell = grid[col][row];
        let sumNeighbors = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is, for each cell, to go through all its &lt;strong&gt;8 neighbors&lt;/strong&gt; and check whether they are alive or not.It might seem a little difficult to understand the code at first glance, but here's an explanation with screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OGPeluK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sk0i6kv48r8fx389tcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OGPeluK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sk0i6kv48r8fx389tcx.png" alt="Ilustrando as Células Vizinhas" width="278" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, I used Google Sheets for that, but the important thing is that our next loop will iterate through the values ​​between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;, finding the number of live neighbors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i = -1; i &amp;lt; 2; i++) {
 for (let j = -1; j &amp;lt; 2; j++) {
   if (i === 0 &amp;amp;&amp;amp; j === 0) {
     continue; 
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We put the condition &lt;code&gt;if (i === 0 &amp;amp;&amp;amp; j === 0)&lt;/code&gt;, because this is the position of the current cell, which we don't want to add to the number of neighbors.&lt;/p&gt;

&lt;p&gt;The next section will deal with the "corners" of our field. Think about it like this, if a cell is pasted on the left side of our canvas, we won't be able to access the neighbors that are in a column before it, that is, the leftmost one, as they don't exist. So, we're going to add values ​​to the &lt;code&gt;sumNeighbors&lt;/code&gt; variable only if its coordinates are within the bounds of the canvas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const x = col + i
const y = row + j;

if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; COL &amp;amp;&amp;amp; y &amp;lt; ROW) {
    const currentNeighbor = grid[col + i][row + j];
    sumNeighbors += currentNeighbor;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the conditions are satisfied, the &lt;code&gt;sumNeighbors&lt;/code&gt; variable will receive its previous value, plus the value of the live cells, remembering that the dead cells here receive the value &lt;strong&gt;zero&lt;/strong&gt;, which does not impact the sum.&lt;/p&gt;

&lt;p&gt;Once that's done, we can apply the rules described by John Conway with a simple &lt;code&gt;if/else&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (currentCell === 0 &amp;amp;&amp;amp; sumNeighbors === 3) {
   nextGen[col][row] = 1;
} else if (currentCell === 1 &amp;amp;&amp;amp; (sumNeighbors &amp;lt; 2 || sumNeighbors &amp;gt; 3)){
    nextGen[col][row] = 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explaining, the first condition tests if the current cell is empty and if it has 3 neighbors, if it is true the next generation will receive in that same position the value 1 or alive.&lt;/p&gt;

&lt;p&gt;The second condition gathers the other rules into one, testing whether the current cell is &lt;strong&gt;live&lt;/strong&gt; and;if there are less than two neighbors next generation will receive &lt;strong&gt;zero&lt;/strong&gt;, if there are more than 3 neighbors the next generation will also receive &lt;strong&gt;zero&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Finally, just return the next generation &lt;code&gt;return nextGen;&lt;/code&gt;, and the function will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  function nextGen(grid) {
    const nextGen = grid.map((arr) =&amp;gt; [...arr]); //make a copy of grid with spread operator

    for (let col = 0; col &amp;lt; grid.length; col++) {
      for (let row = 0; row &amp;lt; grid[col].length; row++) {
        const currentCell = grid[col][row];
        let sumNeighbors = 0; //to verify the total of neighbors

        //Verifying the 8 neigbours of current cell
        for (let i = -1; i &amp;lt; 2; i++) {
          for (let j = -1; j &amp;lt; 2; j++) {
            if (i === 0 &amp;amp;&amp;amp; j === 0) {
              continue; // because this is the current cell's position
            }

            const x = col + i;
            const y = row + j;

            if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; COL &amp;amp;&amp;amp; y &amp;lt; ROW) {
              const currentNeighbor = grid[col + i][row + j];
              sumNeighbors += currentNeighbor;
            }
          }
        }

        //Aplying rules
        if (currentCell === 0 &amp;amp;&amp;amp; sumNeighbors === 3) {
          nextGen[col][row] = 1;
        } else if (
          currentCell === 1 &amp;amp;&amp;amp;
          (sumNeighbors &amp;lt; 2 || sumNeighbors &amp;gt; 3)
        ) {
          nextGen[col][row] = 0;
        }
      }
    }
    return nextGen;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing this, we are almost close to finishing our project, the next step is very simple, we will create a function called &lt;strong&gt;update()&lt;/strong&gt; to execute all the created functions in order, and we will use the &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; function, native Javascript, to repeat the looping process in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;requestAnimationFrame(update);

function update() {
  grid = nextGen(grid);
  drawGrid(grid, COL, ROW, RES);
  requestAnimationFrame(update); //running again to repeat the loop
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, now everything is ready and your file should have looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener("DOMContentLoaded", () =&amp;gt; {
  const canvas = document.querySelector("#board");
  const ctx = canvas.getContext("2d");

  const GRID_WIDTH = 500;
  const GRID_HEIGHT = 500;
  const RES = 5;
  const COL = GRID_WIDTH / RES;
  const ROW = GRID_HEIGHT / RES;

  canvas.width = GRID_WIDTH;
  canvas.height = GRID_HEIGHT;

  //Making a grid and filling with 0 or 1
  function createGrid(cols, rows) {
    return new Array(cols)
      .fill(null)
      .map(() =&amp;gt;
        new Array(rows).fill(null).map(() =&amp;gt; Math.round(Math.random()))
      );
  }

  let grid = createGrid(COL, ROW);

  requestAnimationFrame(update);
  function update() {
    grid = nextGen(grid);
    drawGrid(grid, COL, ROW, RES);
    requestAnimationFrame(update);
  }

  //Generate nex generation
  function nextGen(grid) {
    const nextGen = grid.map((arr) =&amp;gt; [...arr]); //make a copy of grid with spread operator

    for (let col = 0; col &amp;lt; grid.length; col++) {
      for (let row = 0; row &amp;lt; grid[col].length; row++) {
        const currentCell = grid[col][row];
        let sumNeighbors = 0; //to verify the total of neighbors

        //Verifying the 8 neigbours of current cell
        for (let i = -1; i &amp;lt; 2; i++) {
          for (let j = -1; j &amp;lt; 2; j++) {
            if (i === 0 &amp;amp;&amp;amp; j === 0) {
              continue; // because this is the current cell's position
            }

            const x = col + i;
            const y = row + j;

            if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; COL &amp;amp;&amp;amp; y &amp;lt; ROW) {
              const currentNeighbor = grid[col + i][row + j];
              sumNeighbors += currentNeighbor;
            }
          }
        }

        //Aplying rules
        if (currentCell === 0 &amp;amp;&amp;amp; sumNeighbors === 3) {
          nextGen[col][row] = 1;
        } else if (
          currentCell === 1 &amp;amp;&amp;amp;
          (sumNeighbors &amp;lt; 2 || sumNeighbors &amp;gt; 3)
        ) {
          nextGen[col][row] = 0;
        }
      }
    }
    return nextGen;
  }

  //Draw cells on canvas
  function drawGrid(grid, cols, rows, reslution) {
    ctx.clearRect(0, 0, cols, rows);
    for (let i = 0; i &amp;lt; cols; i++) {
      for (let j = 0; j &amp;lt; rows; j++) {
        const cell = grid[i][j];
        ctx.fillStyle = cell ? "#5c3ec9" : "#f8f8f2";
        ctx.fillRect(i * reslution, j * reslution, reslution, reslution);
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now just run the HTML file to see this (or something better in your case, as I had some problems recording my screen):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdD-Pyk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/homroa5pff8dgfsabp4c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdD-Pyk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/homroa5pff8dgfsabp4c.gif" alt="Demonstração Final do Projeto" width="549" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-considerations"&gt;
  &lt;/a&gt;
  Final Considerations
&lt;/h2&gt;

&lt;p&gt;Although it doesn't seem like a big deal, this project is very interesting to train the basic knowledge of HTML, CSS and JS, mainly in the manipulation of arrays.In case you're interested, I'll leave some links to larger projects that used the same concepts as this game. &lt;/p&gt;

&lt;p&gt;Creating the Game of Life in Excel - &lt;a href="https://github.com/asgunzi/JogodaVidaExcel"&gt;https://github.com/asgunzi/JogodaVidaExcel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Video that inspired me, from the youtube channel &lt;strong&gt;O Programador&lt;/strong&gt; (PT/BR) - &lt;a href="https://youtu.be/qTwqL69PK_Y"&gt;https://youtu.be/qTwqL69PK_Y&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed it and that you were able to learn something cool, always remember what &lt;strong&gt;Bob Ross&lt;/strong&gt; said: &lt;em&gt;"as long as you are learning, you are not failing".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just keep going, however slowly.&lt;/p&gt;

&lt;p&gt;See you. ✌️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
