<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Complete Guide to Buffers in Node.js</title>
      <author>Ruan Martinelli</author>
      <pubDate>Thu, 05 Aug 2021 13:22:20 +0000</pubDate>
      <link>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</link>
      <guid>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</guid>
      <description>&lt;p&gt;In Node.js, buffers are a special type of object that can store raw binary data. A buffer represents a chunk of memory - typically RAM - allocated in your computer. Once set, the size of a buffer cannot be changed.&lt;/p&gt;

&lt;p&gt;A buffer stores &lt;strong&gt;bytes&lt;/strong&gt;. A byte is a sequence of eight &lt;strong&gt;bits&lt;/strong&gt;. Bits are the most basic unit of storage on your computer, they can hold the value of either 0 or 1.&lt;/p&gt;

&lt;p&gt;Node.js exposes the &lt;code&gt;Buffer&lt;/code&gt; class in the global scope (you don't need to import or require it like other modules). With this API, you get a series of functions and abstractions to manipulate raw binaries.&lt;/p&gt;

&lt;p&gt;A buffer in Node.js looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Buffer&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;71&lt;/span&gt; &lt;span class="na"&gt;3b&lt;/span&gt; &lt;span class="na"&gt;65&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;31&lt;/span&gt; &lt;span class="na"&gt;2f&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you can see 10 pairs of letters and numbers. Each pair represents a byte stored in the buffer. The total size of this particular buffer is 10.&lt;/p&gt;

&lt;p&gt;You might be asking yourself: "if these are bits and bytes, where are the 0s and 1s?"&lt;/p&gt;

&lt;p&gt;That's because Node.js displays bytes using the &lt;strong&gt;hexadecimal&lt;/strong&gt; system. This way, every byte can be represented using just two digits - a pair of numbers and letters from 0-9 and "a" to "f".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why buffers?&lt;/strong&gt; Before buffers were introduced, there was no easy way of handling binary data in JavaScript. You would have to resort to primitives such as strings, which are slower and have no specialized tools to handle binaries. Buffers were created to provide a proper set of APIs to manipulate bits and bytes in an easy and performant way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-buffers"&gt;
  &lt;/a&gt;
  Working with buffers
&lt;/h2&gt;

&lt;p&gt;Let's see some of the things we can do with buffers.&lt;/p&gt;

&lt;p&gt;You will notice that handling buffers is a bit similar to the way we handle arrays in JavaScript. For example, you can &lt;code&gt;.slice()&lt;/code&gt;, &lt;code&gt;.concat()&lt;/code&gt; and get the &lt;code&gt;.length&lt;/code&gt; of a buffer. Buffers are also iterable and can be used within constructs such as &lt;code&gt;for-of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're following the examples on your computer, keep in mind that the &lt;code&gt;Buffer&lt;/code&gt; class is exposed globally. You don't need to import or require it as a separate module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-buffers"&gt;
  &lt;/a&gt;
  Creating buffers
&lt;/h3&gt;

&lt;p&gt;Buffers are created using these three methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer.from()&lt;/li&gt;
&lt;li&gt;Buffer.alloc()&lt;/li&gt;
&lt;li&gt;Buffer.allocUnsafe()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In the past, buffers were created using the Buffer class constructor (e.g., &lt;code&gt;new Buffer()&lt;/code&gt;). This syntax is now deprecated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Buffer.from()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method is the most straightforward way to create a buffer. It accepts a string, an array, an &lt;code&gt;ArrayBuffer&lt;/code&gt;, or another buffer instance. Depending on which params you pass, &lt;code&gt;Buffer.from()&lt;/code&gt; will create a buffer in a slightly different way.&lt;/p&gt;

&lt;p&gt;When passing a string, a new buffer object will be created containing that string. By default, it will parse your input using &lt;strong&gt;utf-8&lt;/strong&gt; as the enconding (see &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"&gt;here&lt;/a&gt; all enconding types supported):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a new buffer with the string 'heya!'&lt;/span&gt;
&lt;span class="c1"&gt;// If no enconding is passed in the second parameter, defaults to 'utf-8'.&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heya!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates the same buffer as the above, but passes 'heya!' as a hex encoded string&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6865796121&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass an array of bytes to &lt;code&gt;Buffer.from()&lt;/code&gt;. Here I am passing the same string as before (&lt;em&gt;"heya!"&lt;/em&gt;), but represented as an array of hexadecimal characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Also writes 'heya!' to the buffer, but passes a array of bytes&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you're not familar with the &lt;code&gt;0xNN&lt;/code&gt; syntax, it means that the characters after &lt;code&gt;0x&lt;/code&gt; should be interpreted as hexadecimal values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When passing a buffer to &lt;code&gt;Buffer.from()&lt;/code&gt;, Node.js will copy that buffer into the current one. The new buffer is allocated in a different area of memory, so you can modify it independently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a buffer from `buffer1`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Modify `buffer2`&lt;/span&gt;
&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6d is the letter "m"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "cars"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "mars"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These should cover most of the cases where you use &lt;code&gt;Buffer.from()&lt;/code&gt;. Refer to the &lt;a href="https://nodejs.org/api/buffer.html"&gt;docs&lt;/a&gt; for other ways to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffer.alloc()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.alloc()&lt;/code&gt; method is useful when you want to create empty buffers, without necessarily filling them with data. By default, it accepts a number and returns a buffer of that given size filled with 0s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00 00 00 00 00 00&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can later on fill the buffer with any data you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer of size 1 filled with 0s (&amp;lt;Buffer 00&amp;gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Fill the first (and only) position with content&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x78&lt;/span&gt; &lt;span class="c1"&gt;// 0x78 is the letter "x"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'x'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also fill the buffer with other content than 0 and a given enconding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 78 78 78 78 78 78&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Buffer.allocUnsafe()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;.allocUnsafe()&lt;/code&gt; , the process of sanitizing and filling the buffer with 0s is skipped. The buffer will be allocated in a area of memory that may contain old data (that's where the "unsafe" part comes from). For example, the following code will most likely always print some random pieces of data every time you run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Allocates a random area of memory with size 10000&lt;/span&gt;
&lt;span class="c1"&gt;// Does not sanitizes it (fill with 0) so it may contain old data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Prints loads of random data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A good use case for &lt;code&gt;.allocUnsafe()&lt;/code&gt; is when you are copying a buffer that was safely allocated. Since you will completely overwrite the copied buffer, all the old bytes will be replaced by predictable data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer from a string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi, I am a safely allocated buffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a new empty buffer with `allocUnsafe` of the same&lt;/span&gt;
&lt;span class="c1"&gt;// length as the previous buffer. It will be initally filled with old data.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Copies the original buffer into the new, unsafe buffer.&lt;/span&gt;
&lt;span class="c1"&gt;// Old data will be overwritten with the bytes&lt;/span&gt;
&lt;span class="c1"&gt;// from 'hi, I am a safely allocated buffer' string.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hi, I am a safely allocated buffer'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general, &lt;code&gt;.allocUnsafe()&lt;/code&gt; should only be used if you have a good reason (e.g., performance optimizations). Whenever using it, make sure you never return the allocated buffer without completely filling it with new data, otherwise you could be potentially leaking sensitive information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-buffers"&gt;
  &lt;/a&gt;
  Writing to buffers
&lt;/h3&gt;

&lt;p&gt;The way to write data into buffers is using &lt;code&gt;Buffer.write()&lt;/code&gt;. By default, it will write a string encoded in &lt;code&gt;utf-8&lt;/code&gt; with no offset (starts writing from the first position of the buffer). It returns a number, which is the number of bytes that were written in the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="c1"&gt;// If you write more bytes than the buffer supports,&lt;/span&gt;
&lt;span class="c1"&gt;// your data will truncated to fit the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey christopher&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retuns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hey chris'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that not all characters ocuppy a single byte in the buffer (!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The copyright symbol ('©') occupies two bytes,&lt;/span&gt;
&lt;span class="c1"&gt;// so the following operation will completely fill the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;

&lt;span class="c1"&gt;// If the buffer is too small to store the character, it will not write it.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tinyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 0 (nothing was written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00&amp;gt; (empty buffer)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also notice that 2 is &lt;strong&gt;not&lt;/strong&gt; the highest number of bytes a character can have. For example, the &lt;code&gt;utf-8&lt;/code&gt; enconding type supports characters with up to 4 bytes. Since you cannot modify the size of the buffer, you always need to be mindful of what you are writing and how much space it will take (size of the buffer vs. size of your content).&lt;/p&gt;

&lt;p&gt;Another way to write into buffers is throguh an array-like syntax, where you add bytes to a specific position of the buffer. It's important to notice that any data with more than 1 byte needs to be broken down and set on each position of the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x68 is the letter "h"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x65 is the letter "e"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6f is the letter "o"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hello'&lt;/span&gt;

&lt;span class="c1"&gt;// ⚠️ Warning: if you try setting a character with more than 2 bytes&lt;/span&gt;
&lt;span class="c1"&gt;// to a single position, it will fail:&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2a9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0xc2a9 is the symbol '©'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; '�ello'&lt;/span&gt;

&lt;span class="c1"&gt;// But if you write each byte separately...&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xa9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; '©llo'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's appreciated that you can write to buffers using an array-like syntax, I suggest sticking to &lt;code&gt;Buffer.from()&lt;/code&gt; when you can. Managing the length of inputs can be a hard task and will bring complexity to your code. With &lt;code&gt;.from()&lt;/code&gt;, you can write things in a buffer worry-free and handle the cases where the input is too large by checking if nothing was written (when it returns 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iterating-over-buffers"&gt;
  &lt;/a&gt;
  Iterating over buffers
&lt;/h3&gt;

&lt;p&gt;You can use modern JavaScript constructs to iterate over a buffer the same way you would with an array. For example, with &lt;code&gt;for-of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// `.toString(16)` returns the content in hexadecimal format.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 68&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 65&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6f&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other iterator helpers such as &lt;code&gt;.entries()&lt;/code&gt;, &lt;code&gt;.values()&lt;/code&gt; and &lt;code&gt;.keys()&lt;/code&gt; are also available for buffers. For example, using &lt;code&gt;.entries()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hello!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#going-further-buffers-and-typedarrays"&gt;
  &lt;/a&gt;
  Going further: &lt;strong&gt;Buffers and TypedArrays&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript (I mean JavaScript in general, not restricted to Node.js), memory can be allocated using the special &lt;code&gt;ArrayBuffer&lt;/code&gt; class. We rarely manipulate &lt;code&gt;ArrayBuffer&lt;/code&gt; objects directly. Instead, we use a set of "view" objects which reference the underlying array buffer. Some of the view objects are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Int8Array&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Uint8ClampedArray&lt;/code&gt;, &lt;code&gt;Int16Array&lt;/code&gt;, &lt;code&gt;Uint16Array&lt;/code&gt;, &lt;code&gt;Int32Array&lt;/code&gt;, etc. See the full list &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And then there is &lt;code&gt;TypedArray&lt;/code&gt;, which is an umbrella term to refer to all of these view objects listed above. All view objects inherit methods from &lt;code&gt;TypedArray&lt;/code&gt; via prototypes. The &lt;code&gt;TypedArray&lt;/code&gt; constructor is &lt;strong&gt;not&lt;/strong&gt; exposed globally, you always have to use one of the view methods. If you see some tutorial or documentation using &lt;code&gt;new TypedArray()&lt;/code&gt;, it means it's using any of the view objects (Uint8Array, Float64Array, etc).&lt;/p&gt;

&lt;p&gt;In Node.js, objects created from the &lt;code&gt;Buffer&lt;/code&gt; class are also instance of &lt;code&gt;Uint8Array&lt;/code&gt;. There are a few small differences between them, which you can read &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a beginner, buffers were a topic in Node.js that got me very confused (another one was streams, but that deserves its own post). Hopefully I was able to demystify some of the concepts around buffers and give an overview of the Buffer API.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 JS Tips to Help You Code Smarter, Not Longer</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 05 Aug 2021 13:09:07 +0000</pubDate>
      <link>https://dev.to/sewangco/10-js-tips-to-help-you-code-smarter-not-longer-411d</link>
      <guid>https://dev.to/sewangco/10-js-tips-to-help-you-code-smarter-not-longer-411d</guid>
      <description>&lt;p&gt;Earlier this week, we spoke about &lt;a href="https://codesphere.com/articles/burnout-the-price-of-passion-7988b1139078"&gt;Developer Burnout&lt;/a&gt;, which a &lt;a href="https://haystack-books.s3.amazonaws.com/Study+to+understand+the+impact+of+COVID-19+on+Software+Engineers+-+Full+Report.pdf"&gt;study&lt;/a&gt; found that 83% of developers experience.&lt;/p&gt;

&lt;p&gt;Among the top reasons that developers feel burnt out are high workload, personal life, and inefficient processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbYme_36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n2p1urr9uhy451kowwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbYme_36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n2p1urr9uhy451kowwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I can't promise to improve your personal life, I can offer some tips to help reduce your workload and make your coding processes more efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-10-javascript-tips-to-help-you-code-smarter-not%C2%A0longer"&gt;
  &lt;/a&gt;
  Here are 10 Javascript Tips to help you code smarter, not longer:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-ternary-operators"&gt;
  &lt;/a&gt;
  1. Ternary Operators
&lt;/h3&gt;

&lt;p&gt;If you're not using ternary operators to give variables conditional values, you're making your life a lot harder.&lt;br&gt;
Ternary Operators allow you to set the value of a variable based on a boolean.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let variable = booleanToCheck ? 'Value if True' : 'Value if False'&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-use-falsy-instead-of%C2%A0false"&gt;
  &lt;/a&gt;
  2. Use Falsy Instead of False
&lt;/h3&gt;

&lt;p&gt;Another way to reduce the complexity of your conditional statements is to use Falsy values as a quicker alternative to checking the value of a variable. Falsy values are values, like 0 and undefined, that are treated as being equivalent to false when they are used in a boolean context.&lt;/p&gt;

&lt;p&gt;All of the following statements are equivalent:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if (false)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (null)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (undefined)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (0)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (-0)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (0n)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if (NaN)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;if ("")&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-optional%C2%A0chaining"&gt;
  &lt;/a&gt;
  3. Optional Chaining
&lt;/h3&gt;

&lt;p&gt;Okay final one to make conditionals simpler, I promise.&lt;br&gt;
Instead of writing if statements making sure that certain values are defined, you can use the ? operator which will return undefined if the relevant value doesn't exist.&lt;br&gt;
Usage courtesy of the MDN Web Docs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const adventurer = {&lt;br&gt;
name: 'Alice',&lt;br&gt;
cat: {&lt;br&gt;
name: 'Dinah'&lt;br&gt;
}&lt;br&gt;
};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const dogName = adventurer.dog?.name;&lt;br&gt;
console.log(dogName);&lt;br&gt;
// expected output: undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(adventurer.someNonExistentMethod?.());&lt;br&gt;
// expected output: undefined&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-use-test-driven-development"&gt;
  &lt;/a&gt;
  4. Use Test Driven Development
&lt;/h3&gt;

&lt;p&gt;Surely, Test-Driven Development isn't going to save you time, right? Well, it might feel like an unnecessary step, but if you and your team find your software caught in a long web of bugs, it's probably because you didn't stop these bugs when they started.&lt;/p&gt;

&lt;p&gt;A full explanation of Test Driven Development warrants its own article, but the general idea is to specify and check the exact way certain functions and features are going to work. Oftentimes, this testing is done automatically, but a lot of the benefits of TDD can be reaped just by documenting code well or using&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make sure certain things still have their expected behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-null-coalescing"&gt;
  &lt;/a&gt;
  5. Null Coalescing
&lt;/h3&gt;

&lt;p&gt;Also within the theme of stopping bugs before they get worse, null coalescing allows you to specify default values in case of an unexpected, or expected, undefined value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const variable = null ?? 'default value'&lt;br&gt;
console.log(variable) // "Output: default value"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-visualize-git-with-gitk-and%C2%A0gitgui"&gt;
  &lt;/a&gt;
  6. Visualize Git with GitK and Git-GUI
&lt;/h3&gt;

&lt;p&gt;If you find yourself wasting a lot of time trying to navigate convoluted git repos, it might be helpful to use a Git Visualizer. The two most popular ones are &lt;a href="https://git-scm.com/docs/gitk/"&gt;GitK&lt;/a&gt; and &lt;a href="https://git-scm.com/docs/git-gui/"&gt;Git-GUI&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlzcWMeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piit4cwpw8p6fi9e2enj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlzcWMeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piit4cwpw8p6fi9e2enj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_5qs4RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cixctjequjyheze14j2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_5qs4RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cixctjequjyheze14j2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, GitHub offers &lt;a href="https://desktop.github.com/"&gt;Github Desktop&lt;/a&gt; to help make managing your local versions with the remote repository easier:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni1VpRMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ctxog4h6bd2s74i4422.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni1VpRMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ctxog4h6bd2s74i4422.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-build-custom%C2%A0sort"&gt;
  &lt;/a&gt;
  7. Build Custom Sort()
&lt;/h3&gt;

&lt;p&gt;Unless you are working with incredibly large arrays and are tracking the computational complexity of your javascript functions, you don't need to be writing your own sorting functions.&lt;/p&gt;

&lt;p&gt;In fact, when Javascript's Sort() function is called, browsers make sure to use a more efficient sorting algorithm(Like Mergesort and Quicksort) when necessary. The sort() function can also take in custom comparison functions, allowing it to be much more versatile than just a simple number comparison.&lt;/p&gt;

&lt;p&gt;Example per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;MDN Web Docs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var items = [&lt;br&gt;
{ name: 'Edward', value: 21 },&lt;br&gt;
{ name: 'And', value: 45 },&lt;br&gt;
{ name: 'The', value: -12 },&lt;br&gt;
];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// sort by value&lt;br&gt;
items.sort(function (a, b) {&lt;br&gt;
return a.value - b.value;&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-review-your-sites-automatically-with-lighthouse"&gt;
  &lt;/a&gt;
  8. Review Your Sites Automatically with Lighthouse
&lt;/h3&gt;

&lt;p&gt;If you need to improve your website, but don't know where to start, I highly recommend using Chrome's built-in Lighthouse dev-tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBziJdsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5fr07dagmlqu7qion2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBziJdsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5fr07dagmlqu7qion2m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Lighthouse allows you to check any site for performance, accessibility, or SEO issues and will give you the specific parts of your site that you need to fix or optimize. It is a huge time saver when it comes to making sure your app is ready for production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-use-typescript"&gt;
  &lt;/a&gt;
  9. Use Typescript
&lt;/h3&gt;

&lt;p&gt;Similar to Test-Driven Development, Typescript might feel like it would do the very opposite of saving you time. In the long run, Typescript tends to have the opposite effect.&lt;/p&gt;

&lt;p&gt;Coding in a strictly typed language is going to make your code much more readable, meaning that you and your teammates are going to spend less time trying to understand the codebase. In addition, Typescript is going to help prevent bugs long before they occur, which is a huge time saver.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-stop-wasting-time-configuring-infrastructure"&gt;
  &lt;/a&gt;
  10. Stop Wasting Time Configuring Infrastructure
&lt;/h3&gt;

&lt;p&gt;Finally, stop wasting time configuring infrastructure. It's 2021, it shouldn't take you more than a couple of minutes to deploy your app. By combining a Web IDE with the cloud, &lt;a href=""&gt;Codesphere&lt;/a&gt; streamlines the deployment process. We're making running an app in the cloud as easy as running it on your local machine.&lt;/p&gt;




&lt;p&gt;So what'd we leave off the list? Let us know down below!&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitLab Commit 2021 - Upgrade your development workflow with interactive code maps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 05 Aug 2021 12:54:58 +0000</pubDate>
      <link>https://dev.to/kgilpin/gitlab-commit-2021-upgrade-your-development-workflow-with-interactive-code-maps-4hdn</link>
      <guid>https://dev.to/kgilpin/gitlab-commit-2021-upgrade-your-development-workflow-with-interactive-code-maps-4hdn</guid>
      <description>&lt;p&gt;Earlier this week, I gave a talk at GitLab Commit 2021 about how we can build our understanding of code, share that knowledge with other people, and use new tools for guidance and navigation as we create, fix and improve code. If you weren’t able to attend the event, don’t worry! I’m going to recap my talk here. If you prefer to watch vs. read, &lt;a href="#presentation-video"&gt;scroll down&lt;/a&gt; for a 14 minute video of my talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the problem I outlined:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acquiring knowledge about code is hard. And communicating it across teams is even harder. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when we make structural changes to code, I think it’s important to pause for a minute and confirm our assumptions before we start changing things. Getting extra context and getting oriented is really important when making performance changes, refactoring or fixing tough bugs -- because navigation of code becomes less apparent when we make these types of complex changes. &lt;/p&gt;

&lt;p&gt;This is particularly relevant in DevSecOps, because security has specific skill sets and values. Bringing security into DevSecOps requires everyone to learn more about people in adjacent roles, and learn a bit of their language and value system in order to collaborate and share context efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the example I shared:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take the lifecycle of a bug fix, a basic communication process that happens every day between 3 different people in different roles. You’ve got:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The person reporting the bug (e.g. another developer, a QA tester or security tester)&lt;/li&gt;
&lt;li&gt;The developer fixing the bug&lt;/li&gt;
&lt;li&gt;The code reviewer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are 2 handoff stages here: from the bug finder to the developer, and from the developer to the reviewer. At each stage, a knowledge transfer needs to happen between people with very different experience levels with the code in question. In fact, it’s possible that none of these 3 people really know this particular area of the codebase that well. But they all need to work together to get a code change written, reviewed and approved.&lt;/p&gt;

&lt;p&gt;The bug finder knows that the dev team wants as much descriptive information about the bug as possible -- what the tester was doing, what they typed in, what buttons they pushed, what they saw, etc. This description can be accompanied by some screenshots and for UI bugs, this works great. But what about bugs in application behavior, where it’s the backend that’s misbehaving? Maybe the user is presented with inaccurate information or data belonging to someone else! Or they expect to go to page X but end up on page Y. What then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the solution I proposed:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, wouldn’t it be great if the bug finder could send you the equivalent of a screenshot, but of the backend internals? How about a map of code paths, including all the dynamic and complex stuff like HTTP requests, caching, user session interactions, security and SQL? &lt;/p&gt;

&lt;p&gt;This is all possible with code maps. And by code maps, I mean a visual presentation of code (other than the code as text) that makes a design aspect of the code easier to understand.&lt;/p&gt;

&lt;p&gt;Making code maps is possible with &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;AppMap&lt;/a&gt;, a free, open source tool that makes runtime recordings of code. AppMap works equally well with large and small projects, web applications, and microservices. It captures all the information I described above, and bundles it into a portable JSON format. It’s also easy to write  programs that process, analyze and display AppMap data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Quick sidebar:&lt;/strong&gt; Last week we released a GitLab integration for AppMap! Now you can upload AppMaps to the AppMap Cloud and log in with your GitLab account. You can also attach links to AppMaps stored in AppMap Cloud to your GitLab merge requests. &lt;a href="https://appland.com/videos/2021/07/30/runtime-code-maps-for-your-gitlab-project/"&gt;Here’s a short demo video&lt;/a&gt; if you’d like to see this in action. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Here’s the demo I gave:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my talk, I showed how to use AppMaps to transfer information about bugs from testers to developers, and from developers to code reviewers. Start watching at the 5:00 mark in the video to watch the demo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next steps you can take:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to try using code maps to accelerate code understanding and improve communication with your team, you’ll need to:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appland.com/docs/quickstart/"&gt;Install AppMap&lt;/a&gt; for VSCode or JetBrains &lt;/li&gt;
&lt;li&gt;Install and configure the AppMap client agent for Ruby, Python, or Java&lt;/li&gt;
&lt;li&gt;Show your dev team or pen testers how to run the app with AppMap enabled, and use the AppMap browser extension to &lt;a href="https://appland.com/docs/reference/remote-recording.html"&gt;record what they see and do&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Show everyone &lt;a href="https://appland.com/docs/guides/add-appmaps-to-a-code-issue.html"&gt;how to upload and download AppMaps&lt;/a&gt; - from your own internal repository, or from &lt;a href="https://appland.com/products/appmap-cloud"&gt;AppMap Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#presentation-video"&gt;
  &lt;/a&gt;
  Presentation video
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iC0NrcqhStI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Any comments or questions? Come find us on &lt;a href="https://discord.com/invite/N9VUap6"&gt;our Discord server&lt;/a&gt; or &lt;a href="https://twitter.com/landofapps"&gt;on Twitter&lt;/a&gt;. I’d love to hear from you! &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>webdev</category>
      <category>devops</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Story time with Treblle : Fun with flags</title>
      <author>Vedran Cindrić</author>
      <pubDate>Thu, 05 Aug 2021 12:47:54 +0000</pubDate>
      <link>https://dev.to/treblle/fun-with-flags-3kio</link>
      <guid>https://dev.to/treblle/fun-with-flags-3kio</guid>
      <description>&lt;p&gt;&lt;em&gt;Welcome to a series of short stories about how &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; helped solved real problems for real developers. Hope you like them 🙌🏻&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of our customers had an iOS app where you would enter a phone number and it would make an API request. The API endpoint would then send a confirmation code via SMS. You couldn’t even start using the app without the code. The API devs used Twilio to send the message and they tested it many many times by manually making requests to it. It was all working. &lt;/p&gt;

&lt;p&gt;On the app side the UI had a country dropdown with flags followed by the user entered phone number. It looked cool. You would select your country and then enter a phone number. The iOS team used a pod to build the UI and then sent the value to the API endpoint. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once the app was somewhat ready they sent it to a bunch of external testers.&lt;/strong&gt; Nobody could get it to work. No SMS was comming in from the API. Of course it got reported to the API team and they again tried manually testing via Postman. Everything was working for them - again. Frustration and friction between the iOS devs and API devs built up. iOS team was saying that they are doing everything by the book, the API team was saying it’s working for them when try try it… They had a stalemate on their hands. &lt;strong&gt;Together, they spent days communicating back and forth.&lt;/strong&gt; A few testers tried to enter different numbers, used different app versions…All they found out is that Twillio rejected the phone number - no idea why. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After a few days they added Treblle and as soon as they typed in the phone number in the app everybody understood what went wrong.&lt;/strong&gt; The pod that the iOS team used. for showing a list of countries, had been appending the selected flag emoji in front of the number. That was being sent to the API and logically it wasn’t working!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lessons learned:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;developers will always tend to test in perfect conditions - that is just how we are wired 🤷🏻‍♂️&lt;/li&gt;
&lt;li&gt;it’s really hard to debug something that no one can actually see 🧐&lt;/li&gt;
&lt;li&gt;it’s hard to find issues when third party code is causing it 🍝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅ &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; helped them solve a multi day issue that was blocking the release in literary a few seconds &lt;br&gt;
✅ &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; brought them together as a team and reduced friction&lt;/p&gt;

&lt;p&gt;Stay tuned for more concrete examples of how &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; can help you and your team make you daily dev life easier. Also if you used &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt; and it helped you comment here we would love to hear from you. &lt;/p&gt;

</description>
      <category>twilio</category>
      <category>api</category>
      <category>ios</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How WordPress can help you build a website for your business
</title>
      <author>ImbaChat</author>
      <pubDate>Thu, 05 Aug 2021 12:43:56 +0000</pubDate>
      <link>https://dev.to/imba_chat/how-wordpress-can-help-you-build-a-website-for-your-business-2ced</link>
      <guid>https://dev.to/imba_chat/how-wordpress-can-help-you-build-a-website-for-your-business-2ced</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-wordpress-can-help-you-build-a-website-for-your-business"&gt;
  &lt;/a&gt;
  How WordPress can help you build a website for your business?
&lt;/h2&gt;

&lt;p&gt;Websites are an essential platform for business. The website allows companies to showcase who they are. This is convenient for businesses whose customers from other parts of the world cannot make transactions in person.&lt;/p&gt;

&lt;p&gt;Your website can provide you with an otherwise wasted opportunity to expand on your products or services. This will help you convince your prospect to understand why they should invest in your products or services.&lt;/p&gt;

&lt;p&gt;Today you can install a &lt;a href="https://imbachat.com/en/wordpress-chat"&gt;multifunctional group chat plugin for WordPress&lt;/a&gt;. ImbaChat is a chat plugin that includes the functions of WordPress private chat between users, group chat, and online chat support in one cloud service. This is a pretty handy and practical software to make a WordPress chat room. There is integration with BuddyPress and WooCommerce.&lt;/p&gt;

&lt;p&gt;Fortunately, quality website development is no longer exclusively for large corporations. With the growing number of digital marketing companies, your content may display well and delight your potential customers.&lt;/p&gt;

&lt;p&gt;Aside from these agencies, there is a great tool that has allowed countless websites to thrive without bypassing thousands of companies - WordPress. &lt;/p&gt;

&lt;p&gt;So how does this help you better present yourself in the market?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-of-all-it-allows-you-to-make-blog-posts"&gt;
  &lt;/a&gt;
  First of all, it allows you to make blog posts
&lt;/h3&gt;

&lt;p&gt;For many websites, whether the business sells products or offers services, there is a blog section. This section can be used to showcase testimonials and information materials to help you show potential customers why you are the right choice.&lt;br&gt;
You are guaranteed automatic updates&lt;/p&gt;

&lt;p&gt;Updates are an important aspect for websites to maintain their functionality as well as security. While manual updates are just as effective as automatic updates, the latter allows you to update your site in no time.&lt;/p&gt;

&lt;p&gt;That being said, even if your web development team isn't working all day, you can rest assured that your site will be taken care of. When your team is back to work, after making updates, they can work on other tasks, such as improving the design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-add-your-flavor"&gt;
  &lt;/a&gt;
  You can add your flavor
&lt;/h3&gt;

&lt;p&gt;WordPress is open source. This means that although the blog is built on WordPress, you can easily modify it using a variety of plugins and themes to suit your preferences. All this allows you to create a blog that matches your business brand without incurring any cost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-forwith-seo"&gt;
  &lt;/a&gt;
  Great for/with SEO
&lt;/h3&gt;

&lt;p&gt;Part of being a successful site is visible. And more often than not, search engine optimization is the key. Fortunately, WordPress is a fairly SEO-friendly platform. There are free plugins like Yoast that help developers track ranking and performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-it-is-reliable"&gt;
  &lt;/a&gt;
  Finally, it is reliable
&lt;/h3&gt;

&lt;p&gt;Many of the most popular sites on the Internet, such as The New York Times website and Mashable, are WordPress users, so you know you are in good hands. WordPress is a popular choice for integrating a blog with a website, and for good reason, as evidenced by these sites, and ultimately your site.&lt;br&gt;
WordPress is undoubtedly a great tool that no business should give up. It works, it adapts, and most importantly, it shouldn't cost you anything.&lt;/p&gt;

&lt;p&gt;Note, however, that no matter how good WordPress is as a platform, you will need people with experience with it. If you want to get the most out of this, you will need people who can ensure that tools, plugins, and the like are used and installed properly.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>chat</category>
      <category>buddypress</category>
    </item>
    <item>
      <title>Best Programming Language To Learn For Cyber Security</title>
      <author>Uauua</author>
      <pubDate>Thu, 05 Aug 2021 12:27:55 +0000</pubDate>
      <link>https://dev.to/uauua/best-programming-language-to-learn-for-cyber-security-46ki</link>
      <guid>https://dev.to/uauua/best-programming-language-to-learn-for-cyber-security-46ki</guid>
      <description>&lt;p&gt;&lt;span&gt;Cybersecurity&lt;/span&gt; is more popular than ever. Cyber security is more important than ever, thanks to the highly consequential 2020 data breach and massive cyber and IT skill demand forecasts for the next ten years. Many of us wouldn’t have heard this word ten years ago.&lt;/p&gt;
&lt;p&gt;It should come as no surprise that cyber security is a popular topic. There’s also an increasing desire to work in the business. What are the most popular cyber-security programming languages? Let’s see.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/best-programming-language-to-learn-for-cyber-security/"&gt;Best Programming Language To Learn For Cyber Security&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>5 Git Tricks Every Developer Should Know</title>
      <author>Shadid Haque</author>
      <pubDate>Thu, 05 Aug 2021 12:26:05 +0000</pubDate>
      <link>https://dev.to/shadid12/5-git-tricks-every-developer-should-know-1201</link>
      <guid>https://dev.to/shadid12/5-git-tricks-every-developer-should-know-1201</guid>
      <description>&lt;p&gt;As software developers version control plays an important role in our day to day work life. In this article we will discuss 5 git tips and tricks that will enhance your productivity, better your workflow and make you an overall git ninja. Let’s dive in:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-remove-all-your-local-git-branches-but-keep-master"&gt;
  &lt;/a&gt;
  1. Remove all your local git branches but keep master
&lt;/h2&gt;

&lt;p&gt;You are often working on many features and every feature requires you to create a separate branch. At some point you will have lots of dangling local branches that you don’t need. As a developer I have this problem all the time. I want to get rid of all branches except &lt;strong&gt;master/main&lt;/strong&gt;. This following command will do the trick.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch | grep -v “master” | xargs git branch -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#2-how-do-i-undo-the-most-recent-local-commits-in-git"&gt;
  &lt;/a&gt;
  2. How do I undo the most recent local commits in Git?
&lt;/h2&gt;

&lt;p&gt;This happens to be one of the most asked questions on stack overflow. Let’s say you committed something by mistake and now you have to undo this.&lt;br&gt;
Here’s a git commit that I made recently that I want to undo&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m “this was a mistake”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I can reset to any previous commit by running &lt;strong&gt;git reset — hard &lt;/strong&gt; but this will override my local changes (the changes I made in the local files). We can do better.&lt;br&gt;
We can undo only the latest commit without changing the working tree (files that we made changes to on the disk) with the command below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After running this we can run our git add and git commit commands like we usually do.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m “some message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#3-a-better-git-log-visualization-on-terminal"&gt;
  &lt;/a&gt;
  3. A better git log visualization on terminal
&lt;/h2&gt;

&lt;p&gt;You have most definitely used the &lt;code&gt;git log&lt;/code&gt; command before. It prints out all the version control history in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuyZwXdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166090239_1_oSQgVsUCDJDPpgRXJU6hgQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuyZwXdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166090239_1_oSQgVsUCDJDPpgRXJU6hgQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git log output&lt;br&gt;
As you can see in the above output we can see the commit history. We can make this more intuitive with the following git command&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log — graph — pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset’ — abbrev-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now this will print the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOWuYa-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166130460_1_CJMLXsaXem3MNry8SKLOhQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOWuYa-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6D89DABFC9940A59D8BBC120EAC178B1EC503D67F9319BA08C657A9890F714AA_1628166130460_1_CJMLXsaXem3MNry8SKLOhQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git log 2&lt;br&gt;
As you can see this way we have much more information logged out in the terminal. You can also observe recent line changes with the associated commit. Just pass in a &lt;strong&gt;&lt;em&gt;-p&lt;/em&gt;&lt;/strong&gt; flag at the end of previous command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#4-how-to-delete-git-branch-locally-and-from-remote-"&gt;
  &lt;/a&gt;
  4. How to delete git branch locally and from remote ?
&lt;/h2&gt;

&lt;p&gt;This one is very self explanatory. To remove a git branch locally we can run the following command&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -d &amp;lt;name of your branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you would like to delete the branch without checking merge status use &lt;strong&gt;&lt;em&gt;-D&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;br&gt;
Now to delete branch from remote you can run the following&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin --delete &amp;lt;your remote branch name&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#5-how-to-cherry-pick-from-another-repository"&gt;&lt;br&gt;
  &lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;How to cherry pick from another repository
&lt;/li&gt;
&lt;/ol&gt;
&lt;/h2&gt;


&lt;p&gt;Let’s say we want to apply some changes from another repository. We can do this by running the following command.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch &amp;lt;remote-git-url&amp;gt; &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git cherry-pick SHA1&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#conclusion"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Conclusion&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed learning about these git tricks. That’s all for today, until next time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git"&gt;https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository"&gt;https://coderwall.com/p/sgpksw/git-cherry-pick-from-another-repository&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>discuss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hello, World! in 10 different languages 🔥🔥</title>
      <author>Rohidul Islam</author>
      <pubDate>Thu, 05 Aug 2021 12:15:41 +0000</pubDate>
      <link>https://dev.to/rohidhub/hello-world-in-10-different-languages-6ko</link>
      <guid>https://dev.to/rohidhub/hello-world-in-10-different-languages-6ko</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-python"&gt;
  &lt;/a&gt;
  1. Python
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-java"&gt;
  &lt;/a&gt;
  2. Java
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-javascript"&gt;
  &lt;/a&gt;
  3. JavaScript
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-c-sharp"&gt;
  &lt;/a&gt;
  4. C Sharp
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;         
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-swift"&gt;
  &lt;/a&gt;
  5. Swift
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-dart"&gt;
  &lt;/a&gt;
  6. Dart
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-go"&gt;
  &lt;/a&gt;
  7. Go
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-c"&gt;
  &lt;/a&gt;
  8. C++
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-c"&gt;
  &lt;/a&gt;
  9. C
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-kotlin"&gt;
  &lt;/a&gt;
  10. Kotlin
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>programming</category>
      <category>helloworld</category>
      <category>coding</category>
      <category>languages</category>
    </item>
    <item>
      <title>I tried AWS Serverless monitoring using Dashbird - here's my honest review</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Thu, 05 Aug 2021 12:10:54 +0000</pubDate>
      <link>https://dev.to/dashbird/i-tried-aws-serverless-monitoring-using-dashbird-here-s-my-honest-review-30jf</link>
      <guid>https://dev.to/dashbird/i-tried-aws-serverless-monitoring-using-dashbird-here-s-my-honest-review-30jf</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: This article was written by &lt;a href="https://www.linkedin.com/in/bklim5/"&gt;BK Lim&lt;/a&gt;, Co-founder of &lt;a href="https://interviewer.ai/"&gt;Interviewer.AI&lt;/a&gt;, and originally published on &lt;a href="https://bklim.medium.com/aws-serverless-monitoring-using-dashbird-io-4714fe222e2a"&gt;Medium&lt;/a&gt;. The information provided is solely based on his personal usage and opinion on the Dashbird platform.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tl;dr&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://dashbird.io/"&gt;Dashbird.io&lt;/a&gt; allows us to monitor our AWS Serverless resources better and helps us nailed down on specific errors quickly and more efficiently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a &lt;strong&gt;startup&lt;/strong&gt;, we always want to focus on the most important thing --- to &lt;strong&gt;deliver value to our customers&lt;/strong&gt;. For that reason, we are a huge fan of the serverless options provided by AWS (Lambda) and GCP (Cloud Function) as these allow us to maintain and quickly deploy bite-size business logic to production, without having to worry too much about maintaining the underlying servers and computing resources. Additionally, using services like &lt;a href="https://dashbird.io/blog/ultimate-guide-aws-step-functions/"&gt;AWS Step Functions&lt;/a&gt; allows us to orchestrate the Lambda function in a high-level visual and low-code fashion, at the same time allowing us to execute different functions in a specific order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLfHDqOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Aw7sOpwKwdIRtIuY2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLfHDqOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Aw7sOpwKwdIRtIuY2.png" alt="step functions workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-compute-database-messaging-analytics-and-machine-learning-integration-for-aws-step-functions/"&gt;Sample AWS Step Function Visual Workflow --- source: AWS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt; the execution of &lt;strong&gt;Lambda functions&lt;/strong&gt; starts to become a real issue when you have &lt;strong&gt;tens or hundreds of functions running at the same time&lt;/strong&gt;. When we first started, we relied a lot on Cloudwatch Logs as the Lambda function forwards the execution logs to Cloudwatch automatically without any additional setup. This helps when the &lt;strong&gt;number of invocation is small&lt;/strong&gt;, but as you can see in the screenshot down below, the native log streams provided by &lt;strong&gt;Cloudwatch doesn't contain the necessary information&lt;/strong&gt; to help to &lt;strong&gt;debug or to troubleshoot the errors&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03hYny99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A6fjaEyelbQUPeSaLTDlIzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03hYny99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A6fjaEyelbQUPeSaLTDlIzg.png" alt="aws cloudwatch logs&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do we know which invocation was successful or failed?&lt;/p&gt;

&lt;p&gt;A lot of times we have to look at the &lt;strong&gt;timing of the failed invocation&lt;/strong&gt; and click on a specific log stream around the timestamp, only to realize that it was not the log stream we are interested to see. Cloudwatch also clubs the logs from multiple invocations if they were close to each other, potentially &lt;strong&gt;making important information harder to find&lt;/strong&gt; for developers. Before we were introduced to monitoring products like Dashbird.io, we were manually creating additional logic in the Lambda function to send off Slack notifications when an error happens in the function, &lt;strong&gt;resulting in a bigger deployment than what is needed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Instead of creating a serverless monitoring tool ourselves, we were exploring &lt;strong&gt;off-the-shelf monitoring options&lt;/strong&gt; in the market. Dashbird.io was one of the services we explored. In this section, I will share the experience of using Dashbird.io, particularly on the onboarding process and the main offering by the platform.&lt;/p&gt;

&lt;p&gt;Dashbird.io offers a forever-free tier for smaller infrastructures of up to 1 million invocations and &lt;a href="https://dashbird.io/pricing/"&gt;a free 2-week trial&lt;/a&gt; that encompasses the professional plan. Both include not just AWS Lambda monitoring, but also additional AWS-managed services such as Step Function, ECS and more. After signing up an account, we were asked to launch the CloudFormation stack in AWS, which basically creates a role that has &lt;strong&gt;read-only permission&lt;/strong&gt; to access those services that Dashbird.io will monitor. The instructions are lined up clearly as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HkZXENu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AqaU77C9-PZs6bpQLp4fIpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HkZXENu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AqaU77C9-PZs6bpQLp4fIpw.png" alt="dasbhird onboarding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploy CF stack, and wait.&lt;/p&gt;

&lt;p&gt;One great thing to point out here is that all the permissions that are being requested are &lt;strong&gt;read-only access&lt;/strong&gt;. For companies that are particular about the third-party product having access to your computing resources, this is &lt;strong&gt;definitely an advantage compare to services that require write permission&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the role is created and the Role Arn is copied and pasted here, Dashbird will start syncing information from the AWS account and soon enough we will start seeing information populated in the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRV_3Yae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2At1zQs_cRb5t5Sf7ktLBnkA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRV_3Yae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2At1zQs_cRb5t5Sf7ktLBnkA.png" alt="dashbird aws dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Main Dashboard Overview&lt;/p&gt;

&lt;p&gt;The insights section is something refreshing to me, as it &lt;strong&gt;provides tips and best practices to optimize our cloud resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Moving on to the main objective which is to monitor our resources (in Dashbird.io, it's on the &lt;strong&gt;Inventory&lt;/strong&gt; tab), we have a high-level overview of our resources. At the point of writing, Dashbird.io supports AWS Lambda, ECS, Step Function, SQS and API Gateway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzNkn1ST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmlclWit4AjLzb5WYfjwB9Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzNkn1ST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmlclWit4AjLzb5WYfjwB9Q.png" alt="Dashbird Inventory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashbird Inventory&lt;/p&gt;

&lt;p&gt;Filtering down to one of our Lambda functions, we can see the metrics on the function such as invocations count, errors count etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBXwdT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ALQuzhltdg_Y-YcTQn1CxyQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBXwdT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ALQuzhltdg_Y-YcTQn1CxyQ.png" alt="Lambda function metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Information and metrics about a Lambda function&lt;/p&gt;

&lt;p&gt;![lambda invocations&lt;/p&gt;

&lt;p&gt;](&lt;a href="https://miro.medium.com/max/1400/1*FDcGud-uTxM9L50viY8jVQ.png"&gt;https://miro.medium.com/max/1400/1*FDcGud-uTxM9L50viY8jVQ.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Individual Lambda invocation, errors, and insights&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are 3 things I like about the information here:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Each invocation &lt;strong&gt;has its own logs&lt;/strong&gt;, and &lt;strong&gt;errors can be identified easily&lt;/strong&gt; with the red bug icon&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Errors are aggregated&lt;/strong&gt; &lt;strong&gt;by type&lt;/strong&gt; (we have 100+ connection aborted errors :( ) --- this helps us in identifying the common issues and &lt;strong&gt;we can focus our effort on solving them&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; Some insight about the Lambda function and &lt;strong&gt;how we can optimize it&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That basically summarizes how I use Dashbird so far. There are other tabs that I won't go into detail about in this article, but a summary of them down here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Events&lt;/strong&gt;: List of events (error, insight, alarm) of all the monitored resources&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Alarms&lt;/strong&gt;: Place to configure alerts&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Well-architected lens&lt;/strong&gt;: All the insight on monitored resources&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Resource-group&lt;/strong&gt;: Something similar to tagging so you can monitor your resources in different service grouping&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Log-search&lt;/strong&gt;: As the name suggests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#positive-points-about-dashbirdio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Positive points about Dashbird.io&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Very quick and easy onboarding&lt;/strong&gt;, for me it takes slightly longer than the 2 minutess Dashbird.io claimed during the onboarding process, but it was definitely &lt;strong&gt;hassle-free&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; Role created by Dashbird.io &lt;strong&gt;only requires read access&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; Information provided for &lt;strong&gt;Lambda invocation&lt;/strong&gt; is very useful --- errors can be identified easily, and similar errors are aggregated together so that you have a high-level understanding of the issue.&lt;/li&gt;
&lt;li&gt; Insights provided could be useful to &lt;strong&gt;optimize your serverless resources&lt;/strong&gt;, eg: "Function is not tagged", "ECS Service reserved memory is near limit". Gives information on the &lt;strong&gt;potential cost of running the AWS resources too&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Alerts/Alarms can be customized&lt;/strong&gt; from the UI based on the service type (eg: Lambda has errors count, retry count, cold start count; Step Function has failed execution, timed-out execution etc.)&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Support multiple AWS managed services&lt;/strong&gt; in addition to AWS Lambda (eg: Step Function, ECS, SQS &amp;amp; API Gateway)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#things-i-hope-dashbirdio-can-cover-in-the-future"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Things I hope Dashbird.io can cover in the future&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; More consistent / updated UI (there are some serverless services that have configuration screen and some don't, but both show the configuration icon)&lt;/li&gt;
&lt;li&gt; The bread and butter of Dashbird is &lt;strong&gt;AWS Lambda&lt;/strong&gt;; IMO, information for other services such as Step Function and ECS can be improved. At the point of writing, Step Function doesn't show the failed invocation details like how they are being displayed on AWS Console which to me is something fairly important.&lt;/li&gt;
&lt;li&gt; To cover other cloud providers like GCP and Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Using a third-party monitoring platform like &lt;a href="https://dashbird.io/"&gt;Dashbird.io&lt;/a&gt; can help the development team in identifying the root cause of a problem and optimize the cloud resources better. As mentioned at the start of the article, as a startup, you probably want to focus more on delivering value to the customer, and not spending engineering resources in searching through CloudWatch logs or building a separate monitoring tool.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
    </item>
    <item>
      <title>Cloud Technology News of the Month: July 2021</title>
      <author>CAST AI</author>
      <pubDate>Thu, 05 Aug 2021 11:39:37 +0000</pubDate>
      <link>https://dev.to/castai/cloud-technology-news-of-the-month-july-2021-1ipc</link>
      <guid>https://dev.to/castai/cloud-technology-news-of-the-month-july-2021-1ipc</guid>
      <description>&lt;p&gt;The cloud scene is moving fast even when we’re all busy enjoying the summer. Here’s another portion of fresh cloud technology news at your doorstep. &lt;/p&gt;

&lt;p&gt;This series brings you up to speed with the latest releases, acquisitions, research, and hidden gems in the world of cloud computing – the stuff actually worth reading. &lt;/p&gt;

&lt;p&gt;Without further ado, here’s what the cloud world has been up to this July.&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Story of the month: Kubernetes costs are rising, but companies still aren’t tracking them properly&lt;/h2&gt;

&lt;p&gt;Many companies running Kubernetes still struggle to monitor costs, despite their cloud bills growing higher than ever. &lt;/p&gt;

&lt;p&gt;The CNCF and the FinOps Foundation carried out a &lt;strong&gt;microsurvey to check how businesses manage Kubernetes and cloud costs today&lt;/strong&gt;. They found that cloud and Kubernetes-related bills continue to grow - over 35% of respondents saw their bills jump to &lt;strong&gt;more than 20% during the last year&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtxSYVo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Um5V_POOF1wR5RPGQUCHf5muK29MfvtzwXjwdY2TPUaZENNDwZ8lqntqoshhHJw4NeXmpIFNH6C-c7WqLiTCgcUBRL-T6e02Kw1l-5i9-Z2njYo2A2rGcGgOabFsKpOV57QItVLC" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtxSYVo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Um5V_POOF1wR5RPGQUCHf5muK29MfvtzwXjwdY2TPUaZENNDwZ8lqntqoshhHJw4NeXmpIFNH6C-c7WqLiTCgcUBRL-T6e02Kw1l-5i9-Z2njYo2A2rGcGgOabFsKpOV57QItVLC" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time, &lt;strong&gt;companies aren’t monitoring these costs with enough accuracy&lt;/strong&gt; to make informed estimations and eliminate cloud waste. &lt;/p&gt;

&lt;p&gt;While nearly 45% of surveyed businesses said their monitoring strategy relied on estimations, &lt;strong&gt;almost 25% admitted to having no monitoring in place&lt;/strong&gt; - at the same time declaring that the ability to accurately predict their monthly bill before it arrives was “Very important.” &lt;/p&gt;

&lt;p&gt;Back in the day, provisioning was easy. But with VMs that are cloud instances and dynamic Kubernetes setups, &lt;strong&gt;traditional cost management tactics don’t cut the chase anymore&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Reporting is important, but it’s just one side of the coin. The other is what you do with your findings: the actual optimization. We covered this topic in more detail on our blog: &lt;strong&gt;&lt;a href="https://cast.ai/blog/cloud-cost-reporting-alone-isnt-going-to-cut-your-aws-bill/"&gt;Cloud cost reporting alone isn’t going to cut your AWS bill&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href="https://www.cncf.io/blog/2021/06/29/finops-for-kubernetes-insufficient-or-nonexistent-kubernetes-cost-monitoring-is-causing-overspend/"&gt;CNCF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;The Business of Cloud&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Pentagon&lt;/strong&gt; canceled its &lt;strong&gt;JEDI cloud computing contract&lt;/strong&gt; with &lt;strong&gt;Microsoft&lt;/strong&gt; that could have been worth a smashing $10 billion, choosing to pursue deals with other cloud service providers (with Microsoft still on the table) and citing the evolution of the cloud landscape as the reason why. Is the Pentagon going &lt;strong&gt;multi cloud&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://news.yahoo.com/pentagon-cancels-disputed-jedi-cloud-041138247.html"&gt;Yahoo&lt;/a&gt;&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Pentagon cancels $10 billion JEDI cloud contract &lt;a href="https://t.co/6ULbHh5sBw"&gt;https://t.co/6ULbHh5sBw&lt;/a&gt;&lt;/p&gt;— Steven Sinofsky (@stevesi) &lt;a href="https://twitter.com/stevesi/status/1412451022232907780?ref_src=twsrc%5Etfw"&gt;July 6, 2021&lt;/a&gt;
&lt;/blockquote&gt; 





&lt;p&gt;Speaking of &lt;strong&gt;Microsoft&lt;/strong&gt;, the company will now provide &lt;strong&gt;Windows in the cloud&lt;/strong&gt; and stream it to local devices while running the legacy apps. Some enterprise customers might find that handy - instead of installing software and managing security on hundreds of desktops, you can get away with one configuration (in theory). But why stick to desktop when the cloud works so much better in a web browser?&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.microsoft.com/en-us/microsoft-365/blog/2021/07/14/introducing-a-new-era-of-hybrid-personal-computing-the-windows-365-cloud-pc/"&gt;Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cellular networks are transforming to commodity hardware with the cloud. Consider this: &lt;strong&gt;AT&amp;amp;T&lt;/strong&gt; decided to move its 5G management systems to &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Vodafone&lt;/strong&gt; launched a massive pilot program, and &lt;strong&gt;Ericsson is partnering with Google Anthos &lt;/strong&gt;to develop new solutions at Ericsson's Silicon Valley D-15 Labs. &lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.lightreading.com/service-provider-cloud/ericsson-puts-its-5g-on-googles-anthos-/d/d-id/770552?_mc=RSS_LR_EDT&amp;amp;utm_source=Benedict%27s+Newsletter&amp;amp;utm_campaign=299ab23dc4-Benedict%27s+newsletter_COPY_01&amp;amp;utm_medium=email&amp;amp;utm_term=0_4999ca107f-299ab23dc4-71235909"&gt;LightReading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zoom&lt;/strong&gt; agreed to buy the cloud call center service provider &lt;strong&gt;Five9&lt;/strong&gt; for some $14.7 billion in an all-stock transaction. The 20-year-old company is set to become an operating unit of Zoom after the deal closes in the first half of 2022.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://techcrunch.com/2021/07/18/zoom-buys-cloud-call-center-firm-five9-for-14-7-billion/?tpcc=ECFB2021&amp;amp;fbclid=IwAR3LCFJ59LwYTCZSmMYzoZRBxi6vbeYK9iXy1ncg489RttI123JA21Hj4UM"&gt;TechCrunch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloud cost monitoring and reporting solution &lt;strong&gt;Kubecost&lt;/strong&gt; raised $5.5M in the seed round. To see how Kubecost compares to CAST AI, take a look here: &lt;a href="https://cast.ai/blog/kubecost-vs-cast-ai-a-perfect-match-for-end-to-end-cloud-cost-optimization/"&gt;Kubecost vs. CAST AI: A perfect match for end-to-end cloud cost optimization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://venturebeat.com/2021/03/23/cloud-spend-management-startup-kubecost-raises-5-5m/"&gt;VentureBeat&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week&lt;/p&gt;— Twirlip of The Mists (@jna_sh) &lt;a href="https://twitter.com/jna_sh/status/1410178986978775040?ref_src=twsrc%5Etfw"&gt;June 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 







&lt;p&gt;A&lt;strong&gt; fake AWS product&lt;/strong&gt; called &lt;a href="https://whatisinfinidash.com/"&gt;Infinidash&lt;/a&gt; went viral in a prank gone awry on an industry scale. “It could have come out of thin air. I wanted to express this, and I’ve always found AWS’s product brands impenetrable, so it seemed like a natural home for the idea,” - said the man behind the mayhem.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.theregister.com/2021/07/05/infinidash/"&gt;The Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Research into the cloud&lt;/h2&gt;

&lt;p&gt;AWS use is still on the rise, a massive &lt;a href="https://www.jetbrains.com/lp/devecosystem-2021/"&gt;survey&lt;/a&gt; of almost 32,000 developers showed. Here are a few highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;37% of respondents&lt;/strong&gt; involved in infrastructure development &lt;strong&gt;use Kubernetes&lt;/strong&gt; (a slight decline from 40% last year)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;64% of surveyed devs use Amazon Web Services (AWS)&lt;/strong&gt;, 25% Google Cloud, and 22% Microsoft Azure. Compare that to 62%, 30%, and 25% in last year’s survey.&lt;/li&gt;
&lt;li&gt;While &lt;strong&gt;Azure usage is higher in larger companies&lt;/strong&gt;, Google Cloud is the top choice among individual and small company users. What about AWS? It peaked right in the middle among companies with 51-1,000 employees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href="https://www.theregister.com/AMP/2021/07/16/jetbrains_developer_survey_2021/"&gt;The Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But then there’s a new report from Gartner showing that &lt;strong&gt;AWS’s growth rate trailed behind its peers in 2020&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;AWS recorded a 29% gain in revenue - compared with a 41% jump for the entire market and an impressive 60% surge for Microsoft Azure and Google Cloud.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why are companies choosing AWS’s competitors? &lt;/strong&gt;Microsoft offers better integration with legacy infrastructures and is a one-stop relationship for enterprises already using its software. And Google is accelerating thanks to its AI tools and focus on open-source technologies like Kubernetes.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.businesslive.co.za/bd/companies/2021-07-01-amazons-rivals-encroach-on-cloud-computing-space/"&gt;BusinessLive&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMLBMIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/LO_j0jxs5jHm7YP0m1uU17SkRQixvYQeXePfqsQI3OWrmHUNqx3lfEbjVZz1x4VLzF9wMdPRuQjtxR2gSVtCRcPPZxqhUcYyYpoaFdlnIruinC6n6qUQ8DaKKH2z4fWfGLBfyYSx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMLBMIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/LO_j0jxs5jHm7YP0m1uU17SkRQixvYQeXePfqsQI3OWrmHUNqx3lfEbjVZz1x4VLzF9wMdPRuQjtxR2gSVtCRcPPZxqhUcYyYpoaFdlnIruinC6n6qUQ8DaKKH2z4fWfGLBfyYSx" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pulse and Red Hat teamed up to survey 100 enterprise tech leaders about Kubernetes. Which workloads are they deploying on containers? When do they choose hybrid cloud environments? A good source for anyone interested in how enterprises are using Kubernetes today.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://cloud.redhat.com/blog/what-workloads-do-customers-run-on-kubernetes"&gt;RedHat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;New in CAST AI&lt;/h2&gt;

&lt;h3&gt;Using AWS kOps? Here’s how to save up&lt;/h3&gt;

&lt;p&gt;Our team recently released a brand-new product: cloud cost optimization for kOps used with AWS! If you use this self-managed Kubernetes service and want to save up, connect your kOps cluster and &lt;a href="https://console.cast.ai/external-clusters/new"&gt;start saving. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTomMUdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/hS8fal5yRXfsekDtRebG5keGYzHZtgPWf1DMI0qGDH32qfFAoMqtKegRWOEhDwdOqHv0bieJ40tnMrZD3wc9W-XOOXjqXqHtXGaQva6TFe1Tiyoa6UX6ajkgVE2J_TrDnvQ_4FN8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTomMUdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/hS8fal5yRXfsekDtRebG5keGYzHZtgPWf1DMI0qGDH32qfFAoMqtKegRWOEhDwdOqHv0bieJ40tnMrZD3wc9W-XOOXjqXqHtXGaQva6TFe1Tiyoa6UX6ajkgVE2J_TrDnvQ_4FN8" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here are some new product features hot off the press:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our Savings Estimator and Autoscaler can &lt;strong&gt;target a higher variety of instance types &lt;/strong&gt;when recommending Spot Instances, allowing you to unlock even more savings.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Audit log&lt;/strong&gt; is now much more detailed and available for EKS and kOps clusters.&lt;/li&gt;
&lt;li&gt;We introduced an &lt;strong&gt;annotation and label &lt;/strong&gt;that protects a node from being considered for eviction and deletion.&lt;/li&gt;
&lt;li&gt;Users can now &lt;strong&gt;set the minimum and maximum values of CPU and RAM for nodes&lt;/strong&gt; to be added to a cluster in the Unscheduled pods policy. This will limit the possible pool of nodes that CAST AI considers. &lt;/li&gt;
&lt;li&gt;We have added the &lt;strong&gt;support of kOps 1.11, 1.15, and 1.17&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Clusters can now be sorted based on the name, region, or status.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Angular learning curve is a journey</title>
      <author>Aliaksei Kuncevič</author>
      <pubDate>Thu, 05 Aug 2021 11:39:35 +0000</pubDate>
      <link>https://dev.to/this-is-angular/angular-learning-curve-is-a-journey-2209</link>
      <guid>https://dev.to/this-is-angular/angular-learning-curve-is-a-journey-2209</guid>
      <description>&lt;p&gt;&lt;strong&gt;Every story can be very personal, but a story of a developer always ends up being framed.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abundance-of-information"&gt;
  &lt;/a&gt;
  Abundance of information
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwardt9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153880579/1LEMoKbd5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwardt9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153880579/1LEMoKbd5.jpeg" alt="1000x420_3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning Angular can be quite a task, especially when an abundance of online materials can be rather frustrating than helpful. And the trickiest part when working with information on the internet is that the verification process can be time-consuming. Today, when we live in a booming era of technology, time is precious like never before. Therefore productivity and cost-effective programming decisions are essential for any web developer who wants to succeed. Figuring out Angular tips &amp;amp; tricks comes not only with experience it also requires access to a good and trusted source of information. &lt;/p&gt;

&lt;p&gt;Browsing the internet for answers can be exhausting, especially when opting for a self-learning Angular journey. Going through various books, online sources trying to figure out the correct solution can bring all the spectrum of emotions due to the majority of sources being too advanced. Most of the Angular materials available online presume that you are already intermediate, making it hard for beginners or anyone who decided to switch from another framework.&lt;/p&gt;

&lt;p&gt;A good example is the complexity of TypeScript due to its combination with Angular. When both make a pair, it is impossible to avoid the feeling that you are dealing with a new programming language. Other various combinations like ngModules (Unique architecture), Angular decorators with assigned responsibilities require a change in developer mentality. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loneliness-in-online-classroom"&gt;
  &lt;/a&gt;
  Loneliness in "online classroom"
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDcmVjWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153895264/vEhdJwi5w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDcmVjWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153895264/vEhdJwi5w.jpeg" alt="1000x420_2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Angular learning curve can vary, and it is very individual, but synchronized and updated systematic information available to Angular developers can help a lot. And still, even with a guided step-step manual that explains that you can't avoid RxJS or that you must learn the RxJS operators by heart make no difference when there is none available to answer your questions. Therefore Angular workshops where you can discuss your difficulties with other developers can bring your Angular journey to another level. &lt;/p&gt;

&lt;p&gt;There are multiple Angular workshops available online, but some of them either don't follow the suitable structure for beginners or don't have a tutor who can clarify and help you when you are lost. And the combination of both is a must if you want to achieve your Angular ROI after becoming a developer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-workshop-series-by-aliaksei-kuncevic"&gt;
  &lt;/a&gt;
  Angular Workshop series by Aliaksei Kuncevic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Amf2dITa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153906134/JNDdZu4Jj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amf2dITa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628153906134/JNDdZu4Jj.jpeg" alt="1000x420_1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular Workshops series by Aliaksei Kuncevic, the Google Developer expert and founder of Angular Rocks podcast, tackles all the points.&lt;/p&gt;

&lt;p&gt;When he worked on his learning program, he stayed in touch with very famous industry professionals and used his own Angular experience as a base. Apart from that, he launched a free educational&lt;a href="https://angularrocks.com/"&gt; Angular Rocks Podcast &lt;/a&gt;with Angular-related information in a very structured order to help those who can't enroll in the paid workshops. &lt;/p&gt;

&lt;p&gt;Multiple years of experience, many Angular professional discussions, consulting assignments, and educational sessions all contributed to the three series of Angular workshops suitable for different levels. Whether you are a beginner or in the middle of your journey, you will be able to find your answers. What makes it gold is that all the paid workshops will secure professional guidance and the possibility to connect with other developers. Learning  Angular in a group is fun and motivating. You have no excuse to procrastinate when inspired by other Angular enthusiasts. &lt;/p&gt;

&lt;p&gt;During Aliaksei's previous workshop, one of the students made a great observation, which proved that a challenging process could be exciting too when you identify the right path for your Angular journey. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;" I love Angular for its modular architecture, extensibility, and clear separation between logic and markup. The initial learning curve can be exhausting, but as soon you grasp the Angular basic concepts and see a clear path, you turn your developing journey into a rewarding process."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as you are ready to make your first step gradually, you will progress. &lt;/p&gt;

&lt;p&gt;All of the tree workshops can be taken independently and are suitable for different levels. Angular Getting Started Workshop can work for anyone at the beginning of his journey with Angular. While Angular First Steps and Deep Dive can work if you are already familiar with Angular. &lt;/p&gt;

&lt;p&gt;The workshops’ structure ensures a very smooth Angular learning journey, which is why &lt;a href="https://kuncevic.dev/workshops/angular-getting-started"&gt;Angular Getting started&lt;/a&gt; workshop is free. This workshop will answer the critical question: is this framework really for you, and are you happy with the teaching style of your tutor, and you want him to guide you on your Angular journey. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-invitation"&gt;
  &lt;/a&gt;
  Your invitation
&lt;/h2&gt;

&lt;p&gt;Learning a new framework can be painful, but it is always fun when you are not alone. Stay inspired, connected, and never stop exploring. Keep your Angular developer spirit high, and remember that Angular will start paying you back when you master a rapid form of development. &lt;/p&gt;

&lt;p&gt;The registration for the Angular workshops series by Aliaksei Kuncevic is now open &lt;a href="https://kuncevic.dev/workshops"&gt;here&lt;/a&gt;. Check it out. Everyone is welcome to join, choose the one right for you, or find out which is the right for you by taking the FREE Angular Getting Started workshop. &lt;/p&gt;

&lt;p&gt;Thanks for reading, and ask your questions in the comments or contact me directly via &lt;a href="https://www.linkedin.com/in/kuncevic"&gt;linkedin&lt;/a&gt; or DM me on &lt;a href="https://twitter.com/kuncevic"&gt;twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>angular</category>
      <category>workshop</category>
      <category>webdev</category>
      <category>education</category>
    </item>
    <item>
      <title>Make VSCode lighter🪶</title>
      <author>KR Tirtho</author>
      <pubDate>Thu, 05 Aug 2021 11:38:15 +0000</pubDate>
      <link>https://dev.to/krtirtho/make-visual-studio-code-lighter-3end</link>
      <guid>https://dev.to/krtirtho/make-visual-studio-code-lighter-3end</guid>
      <description>&lt;p&gt;VSCode is a really great Code Editor rather say nearly an IDE or better than that. But this costs a great amount of RAM and CPU in bigger projects. That's not all related VSCode but to most of its extensions. VSCode's extensions are good, by far best. But these are written for Nodejs with JS so unsurprisingly these take a handy amount of resource but efficiently. And people unknowingly accuse vscode for this. Though most of the time it doesn't cause that much of issue. But in bigger projects this tiny problem gets bigger as most of the people don't have a AMD Thread Ripper, Samsung NVMe SSD with 16GB RAM &amp;amp; a RTX3090&lt;/p&gt;

&lt;p&gt;Let's find out the reasons of this high resource usage &amp;amp; fix 'em&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-file-watchers"&gt;
  &lt;/a&gt;
  Avoiding file watchers
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code's auto-completion or IntelliSense actually uses a Universal LSP(Language Server Protocol) package which are some bunch of file watchers. This package uses other language specific packages to watch each individual file for matching types or for intellisense. Well, that's okay &amp;amp; completely fine when your project is small. But when you have a project like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ci4rPD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brx95g408ltrhs5dz3zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ci4rPD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brx95g408ltrhs5dz3zr.png" alt="Big Project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh boy, now you hate VSCode but don't. It isn't VSCode's fault. VSCode has to watch those files else it can't give you the comfort for coding. But although it tries to give you a better experience it also sometimes overdo this. Which leads to tremendous RAM &amp;amp; CPU usage. Let's fix that:&lt;/p&gt;

&lt;p&gt;Go to settings and click the file edit icon located at top right corner of the window in the tab-bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx57QlOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kknhl18cxcyxc2tj3ley.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx57QlOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kknhl18cxcyxc2tj3ley.png" alt="picture showing vscode settings where the json file open button is"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there past the following code to exclude the unimportant &amp;amp; literally never used files &amp;amp; folders from file watchers..&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can do this in workspace level too. Just create a &lt;code&gt;settings.json&lt;/code&gt; inside the &lt;code&gt;.vscode&lt;/code&gt; folder in the project root. You can also add more files or folders temporarily if project has grown bigger as you might always don't need all the nested files &amp;amp; folders. So you can just add those project folders which aren't even touched by you so you can do your rest of the development comfortably…&lt;/p&gt;

&lt;p&gt;You also can disable some extensions which includes file-watchers. There's a list of extensions that seems to use file watchers (I'm not completely sure):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;TSLint&lt;/li&gt;
&lt;li&gt;Apollo GraphQL&lt;/li&gt;
&lt;li&gt;Todo Tree&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;li&gt;Code Spell Checker (Not sure)&lt;/li&gt;
&lt;li&gt;Template String Converter (JavaScript/TypeScript/JSX/TSX)&lt;/li&gt;
&lt;li&gt;Live Server&lt;/li&gt;
&lt;li&gt;Live Sass Compiler&lt;/li&gt;
&lt;li&gt;Compiler Hero&lt;/li&gt;
&lt;li&gt;TypeScript God&lt;/li&gt;
&lt;li&gt;Git-lens&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Flutter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've listed some of those which I encountered while using. Most of them are JavaScript/Typescript/Dart related as I'm from that world. But other extensions like : Rust, rust-analyzer etc are also like above list&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabling-unwanted-extensions-for-workspace"&gt;
  &lt;/a&gt;
  Disabling unwanted extensions for workspace
&lt;/h2&gt;

&lt;p&gt;I've over 35 extensions installed. But most of the time I don't need all of them at one project as I work in multiple types of project. You can enable/disable extensions for specific workspaces. E.g. you don't need flutter/dart while developing React or Nodejs Server or vice-versa. So you can just disable that just for that workspace. But don't forget to save the vs-code workspace&lt;/p&gt;

&lt;p&gt;Disabling &lt;code&gt;@builtin&lt;/code&gt; extensions that are not important for your project's stack can make VSCode a bit lighter too. Although most of the time these aren't even started by VSCode's extension host beacause VSCode doesn't start an extension unless you need it. But still there are some extension you can disable for your workspace:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the language basics except your stack's ones&lt;/li&gt;
&lt;li&gt;Grunt, Gulp &amp;amp; Jake support for VSCode (Three Separate Extensions)&lt;/li&gt;
&lt;li&gt;Node Debug (Lagecy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do this by searching in VSCode's extension tab with &lt;code&gt;@builtin&lt;/code&gt; tag. It'll show all the builtin extensions&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turn-off-autmatic-typeacquisition-for-typescript-only-projects"&gt;
  &lt;/a&gt;
  Turn off autmatic typeAcquisition for Typescript only projects
&lt;/h2&gt;

&lt;p&gt;If your project uses only Typescript then disable VSCode's automatic &lt;strong&gt;typeAcquisition&lt;/strong&gt;. It helps writing JavaScript by providing autocompletion by downloading &lt;code&gt;@types/&amp;lt;package-name&amp;gt;&lt;/code&gt; type definitions for a node_module. But typescript requires type definitions so most of the time you'll be installing types for your node_module through npm. So this feature becomes obsolete&lt;/p&gt;

&lt;p&gt;To turn off &lt;code&gt;typeAcquisition&lt;/code&gt;, go to vscode's settings and search it then uncheck the &lt;code&gt;typeAcquisition&lt;/code&gt; property&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>devops</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
