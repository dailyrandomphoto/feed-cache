<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Enjoy the classic Snake arcade game in your terminal</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sun, 11 Jul 2021 09:50:33 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</link>
      <guid>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</guid>
      <description>&lt;p&gt;If you were born before the rise of smartphones like me, you might vaguely recall the small yet sturdy Nokia flip phones during your childhood or early years, loaded with simple - almost primitive - yet addictive games such as &lt;a href="https://en.wikipedia.org/wiki/Snake_%28video_game_genre%29"&gt;Snake&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Space_Invaders"&gt;Space Invaders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Early this year, in order to exercise the Node.js skills I acquired through taking the &lt;a href="https://training.linuxfoundation.org/training/nodejs-application-development-lfw211/"&gt;LFW211&lt;/a&gt; course offered by the &lt;a href="https://linuxfoundation.org"&gt;Linux Foundation&lt;/a&gt;, I implemented a variant of the Snake arcade game that directly runs in the terminal. It's very simple and only depends on a Node.js runtime of version no less than 10 so you can even play it on a headless server, yet it can keep you occupied with the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 game maps: Unconfined (with wrapping behavior), Walled, Labyrinth&lt;/li&gt;
&lt;li&gt;4 difficulty levels per game map (the difference is speed): Easy, Medium, Hard, Insane&lt;/li&gt;
&lt;li&gt;High scores for each game map + difficulty level combination that persist between game runs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously, the game was only packaged for Linux which comprise but a tiny fraction of the desktop / laptop user base, while the larger macOS user base could only obtain it from source or through development tools such as npm and Docker. But no more! I have recently decided to package the game for &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; which should be more familiar to end users, and also make it easier for users of mainstream Linux distributions to obtain the game as well by publishing packages to &lt;a href="https://launchpad.net/ubuntu/+ppas"&gt;Ubuntu PPA&lt;/a&gt; and &lt;a href="https://copr.fedorainfracloud.org/"&gt;Fedora COPR&lt;/a&gt;, as opposed to offering the packages directly on GitHub. So let's get started!&lt;/p&gt;

&lt;p&gt;If installing on macOS (or Linux) using Homebrew, simply enter the following two commands which add the tap &lt;code&gt;DonaldKellett/games&lt;/code&gt; and install the formula &lt;code&gt;csnaketerm&lt;/code&gt; from the tap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew tap DonaldKellett/games
&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then invoke the game as &lt;code&gt;csnaketerm&lt;/code&gt;. A corresponding man page is also available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man 6 csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;macOS users: this is your chance to &lt;a href="https://github.com/DonaldKellett/homebrew-games/issues/1"&gt;test the formula and contribute to ensuring its quality on macOS&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For Linux users, the game is available &lt;a href="https://snapcraft.io/csnaketerm"&gt;in the Snap store&lt;/a&gt;. This is the only packaged version that does not come with a man page, but you get a desktop launcher with icon in a GUI environment. &lt;a href="https://snapcraft.io"&gt;Snaps&lt;/a&gt; are native to Ubuntu but come preinstalled in a number of other distributions, and can be manually installed in many more.&lt;/p&gt;

&lt;p&gt;While Snaps are cool and all, I understand the various concerns surrounding them: bloat, vendor lock-in, lack of software freedom and such. So for those reluctant (or unable) to install Snaps, I've got you covered. On Ubuntu 20.04 LTS and later (including non-LTS releases), you can install csnaketerm from &lt;code&gt;ppa:donaldsebleung/games&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;add-apt-repository ppa:donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, on RPM distributions such as Fedora, CentOS and openSUSE, you can obtain csnaketerm from Fedora COPR through the &lt;code&gt;donaldsebleung/games&lt;/code&gt; repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf copr &lt;span class="nb"&gt;enable &lt;/span&gt;donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;openSUSE users may need to first install &lt;code&gt;dnf&lt;/code&gt; / &lt;code&gt;yum&lt;/code&gt; and &lt;code&gt;dnf-plugins-core&lt;/code&gt; / &lt;code&gt;yum-plugin-copr&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;If none of the options above (including Homebrew) worked for you as a Linux user or you are using another Unix OS such as one of the *BSD's, fetching from source is also an option. Ensure Git and Node.js 10 or above is installed, then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/DonaldKellett/csnaketerm.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The executable and man page are both located at the top-level directory of the repo as &lt;code&gt;csnaketerm&lt;/code&gt; and &lt;code&gt;csnaketerm.6&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;As for Windows users, the game unfortunately does not play well with cmd, PowerShell or even Cygwin, so it should be run in a Linux environment such as &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about"&gt;WSL2&lt;/a&gt;. If in doubt, get &lt;a href="https://www.microsoft.com/en-us/p/ubuntu-2004-lts/9n6svws3rx71#activetab=pivot:overviewtab"&gt;Ubuntu 20.04 LTS from the Microsoft store&lt;/a&gt; and follow the installation instructions for Ubuntu.&lt;/p&gt;

&lt;p&gt;Last but not least, the source code for the game is licensed under the GNU GPL and hosted &lt;a href="https://github.com/DonaldKellett/csnaketerm"&gt;on GitHub&lt;/a&gt; so feel free to study the source code, fork it, and hack on the fork to your heart's desire. Happy coding, and don't forget to hit that Star button if you enjoyed the game 🌟 &lt;/p&gt;

&lt;p&gt;See also: &lt;a href="https://donaldkellett.github.io/csnaketerm"&gt;https://donaldkellett.github.io/csnaketerm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Java Nested Classes and Lambda Expressions</title>
      <author>Patricia Nicole</author>
      <pubDate>Sun, 11 Jul 2021 09:35:48 +0000</pubDate>
      <link>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</link>
      <guid>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-wilthinking-post-2"&gt;
  &lt;/a&gt;
  [Java WIL🤔 Post #2]
&lt;/h2&gt;

&lt;p&gt;Java has a very rich set of features that gives developers a lot of options to choose their implementation from, two of them, &lt;strong&gt;nested classes&lt;/strong&gt; and &lt;strong&gt;lambda expressions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I was reading a certain part of a code base and realized that I have not really fully understood the differences between the types of nested classes. The section below is heavily based from the Java Documentation for Nested Classes, so in-depth explanations can be checked &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#nested-classes"&gt;Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-nested-classes"&gt;Why Use Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inner-classes"&gt;Inner Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-nested-classes"&gt;Static Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shadowing-in-nested-classes"&gt;Shadowing in Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serialization-of-nested-classes"&gt;Serialization of Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-and-anon-classes"&gt;Local and Anonymous Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-interface"&gt;Functional Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#target-typing-in-lambdas"&gt;Target Typing In Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-references"&gt;Method References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-use-each"&gt;When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nested-classes"&gt;
  &lt;/a&gt;
  📌 Nested Classes  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A nested class is a class within another class, i.e. a member of its enclosing class. It is divided into two categories: &lt;strong&gt;non-static&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Non-static nested classes are called &lt;strong&gt;&lt;em&gt;inner classes&lt;/em&gt;&lt;/strong&gt;. They have access to other members of the enclosing class, even if they are declared private. &lt;/li&gt;
&lt;li&gt;Nested classes that are declared static are called &lt;strong&gt;&lt;em&gt;static nested classes&lt;/em&gt;&lt;/strong&gt;. They DO NOT have access to other members of the enclosing class. &lt;/li&gt;
&lt;li&gt;As a member of the outer class, a nested class can be declared &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note that outer classes can only be declared &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-use-nested-classes"&gt;
  &lt;/a&gt;
  📌 Why Use Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It is a way of logically grouping classes that are only used in one place.&lt;/li&gt;
&lt;li&gt;It increases encapsulation.&lt;/li&gt;
&lt;li&gt;It can lead to more readable and maintainable code. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#inner-classes"&gt;
  &lt;/a&gt;
  📌 Inner Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields. &lt;/li&gt;
&lt;li&gt;As an inner class is associated with an instance, &lt;strong&gt;IT CANNOT DEFINE ANY STATIC MEMBERS ITSELF.&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Objects that are instances of an inner class exist within an instance of the outer class. Thus an instance of an inner class can only exist within an instance of the outer class and has direct access to the methods and fields of the enclosing instance.&lt;/li&gt;
&lt;li&gt;To instantiate an inner class, the outer class must first be instantiated. &lt;/li&gt;
&lt;li&gt;There are two special kinds of inner classes: &lt;strong&gt;local classes&lt;/strong&gt; and &lt;strong&gt;anonymous classes&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InnerClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// class content here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-nested-classes"&gt;
  &lt;/a&gt;
  📌 Static Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;As with class methods, a static nested class is associated with its outer class. &lt;/li&gt;
&lt;li&gt;A static nested class cannot refer directly to instance variables or methods defined in its enclosing class. It can use them only through an object reference.&lt;/li&gt;
&lt;li&gt;A static nested class interacts with the instance members of its outer class and other classes just like any other top level class. &lt;strong&gt;Thus a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticNestedClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shadowing-in-nested-classes"&gt;
  &lt;/a&gt;
  📌 Shadowing in Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;If a declaration of a type in a particular scope has the same name as another declaration in the enclosing scope, then the declaration shadows the declaration of the enclosing scope.&lt;/li&gt;
&lt;li&gt;The shadowed declaration cannot be referenced by its name alone. Note, you can actually do this : &lt;code&gt;ShadowTest.this.x&lt;/code&gt;.  &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Go to shadowing section of this link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refer to member variables that enclose larger scopes by the class name to which they belong. For example, the ff. statement accesses the member variable of the class &lt;code&gt;ShadowTest&lt;/code&gt; from the method.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ShadowTest.this.x = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;ShadowTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  📌 Serialization &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Serialization of inner classes, including local and anonymous classes is &lt;strong&gt;strongly discouraged&lt;/strong&gt;. When the Java compiler compiles certain constructs such as inner classes, it creates &lt;strong&gt;&lt;em&gt;synthetic constructs&lt;/em&gt;&lt;/strong&gt;; these are classes, methods, fields and other constructs that do not have a corresponding construct in the source code. Synthetic constructs enable Java compilers to implement new Java language features without changes to the JVM. However, they may vary among different implementations.&lt;/li&gt;
&lt;li&gt;Might have compatibility issues if an inner class is serialized and then deserialize it with a different JRE implementation.&lt;/li&gt;
&lt;li&gt;Read more at the Serialization section of this &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#local-and-anonymous-classes"&gt;
  &lt;/a&gt;
  📌 Local and Anonymous Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;There are two types of inner classes : local and anonymous. An inner class within the body of a method is called a &lt;strong&gt;local class&lt;/strong&gt;. An &lt;strong&gt;inner class&lt;/strong&gt; can also be declared inside the body of a method without naming them, i.e. an &lt;strong&gt;anonymous class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The same modifiers used for other members of the outer class can be used for an inner class. For instance the access modifiers &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;package-private&lt;/code&gt; &lt;code&gt;protected&lt;/code&gt; can be used in an inner class just like how they are used for the instance fields of the outer class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#more-on-local-classes"&gt;
  &lt;/a&gt;
  📌 &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html"&gt;More on Local Classes&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeLocalClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Local classes are classes defined in a block, which is a group of zero or more statements. &lt;/li&gt;
&lt;li&gt;Local classes can be defined inside any block, i.e. in a method body, a for loop or an if clause.&lt;/li&gt;
&lt;li&gt;A local class has access to the members of its enclosing class. It also has access to local variables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IMPORTANT: A local class can only access local variables that are declared final.&lt;/strong&gt; When a local class accesses a local variable or parameter of the enclosing block, it &lt;strong&gt;&lt;em&gt;captures&lt;/em&gt;&lt;/strong&gt; the variable or parameter.&lt;/li&gt;
&lt;li&gt;Starting Java 8, a local class can access local variables and parameters of the enclosing block that are final or effectively final. A variable or parameter whose value is never changed after it is initialized is &lt;strong&gt;effectively final&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Starting also in Java SE 8, if you declare the local class in a method, it can access the method's parameters.&lt;/li&gt;
&lt;li&gt;Local classes are similar to inner classes because they cannot define or declare any static members.&lt;/li&gt;
&lt;li&gt;Local classes in static methods, can only refer static members of the enclosing classes.&lt;/li&gt;
&lt;li&gt;Local classes are non-static because they have access to instance members of the enclosing block. Consequently they cannot contain most kinds of static declarations.&lt;/li&gt;
&lt;li&gt;An interface cannot be declared inside a block. Interfaces are inherently static.&lt;/li&gt;
&lt;li&gt;Static initializers or member interfaces cannot be declared inside a local class. &lt;/li&gt;
&lt;li&gt;A local class can have static members provided that they are constant variables. A &lt;em&gt;constant variable&lt;/em&gt; is a variable of primitive type or type String that is declared final and initialized with a compile-time constant expression. A compile time constant expression is typically a string or an arithmetic expression that can be evaluated at compile time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-classes"&gt;
  &lt;/a&gt;
  📌 Anonymous Classes
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt; &lt;span class="n"&gt;anonClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// instance field declarations&lt;/span&gt;
        &lt;span class="c1"&gt;// methods &lt;/span&gt;
        &lt;span class="c1"&gt;// should contain no constructor&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Anonymous classes makes the code more concise. It enables declaration and instantiation of class at the same time. They are similar to local classes except that they do not have a name.&lt;/li&gt;
&lt;li&gt;While local classes are class declaration, &lt;strong&gt;anonymous classes are expressions&lt;/strong&gt;, which means that the class is defined in another expression. &lt;/li&gt;
&lt;li&gt;The syntax of an anonymous class expression is like the invocation of a constructor, except that there is a class definition contained in the code block.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The anonymous class expression consists of the following: &lt;code&gt;new&lt;/code&gt; operator, the name of an interface to implement or a class to extend, parentheses that contain the arguments to a constructor, just like a normal class instance creation expression and a body, which is a class declaration body.&lt;/li&gt;
&lt;li&gt;Because an anonymous class definition is an expression, it must be part of a statement. This explains why there is a semicolon after the closing brace.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-and-declaring-and-accessing-members-of-the-anonymous-class"&gt;
  &lt;/a&gt;
  📌 Accessing Local Variables of the Enclosing Scope and Declaring and Accessing Members of the Anonymous Class
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local classes, anonymous classes can capture variables; they have the same access to local variables of the enclosing scope.&lt;/li&gt;
&lt;li&gt;An anonymous class has access to the members of its enclosing class.&lt;/li&gt;
&lt;li&gt;An anonymous class cannot access local variables in its enclosing scope that are not declared as final or effectively final.&lt;/li&gt;
&lt;li&gt;Like a nested class, a declaration of a type in an anonymous class shadows any other declarations in the enclosing scope that have the same name.&lt;/li&gt;
&lt;li&gt;Anonymous classes also have the same restrictions as local classes with respect to their members: static initializers or member interfaces cannot be declared; an anonymous class can have static members provided that they are constant variables. &lt;/li&gt;
&lt;li&gt;Note, the ff can be declared in anonymous class
a. Fields
b. extra methods
c. instance initializers
d. local classes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT: You cannot declare constructors in an anonymous class.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Anonymous classes are ideal for implementing an interface that contains two or more methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize the hierarchy stated above, the image below shows the types of nested classes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" alt="Types of Nested Classes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lambda-expressions"&gt;
  &lt;/a&gt;
  📌 &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda Expressions&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Lambda Expressions enables developers to treat functionality as a method argument, or code as a data.&lt;/li&gt;
&lt;li&gt;For classes with only one method, an anonymous class, much more a named class is a bit excessive and cumbersome. Lambdas express instances of single-method classes more compactly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#syntax-of-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 Syntax of Lambda Expressions
&lt;/h4&gt;

&lt;p&gt;A lambda expression consists of the ff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A comma-separated list of formal parameters enclosed in parentheses. The data type of the parameters in the lambda expression can be omitted. Moreover, the parentheses can be omitted if there is only one parameter.&lt;/li&gt;
&lt;li&gt;The arrow token &lt;code&gt;-&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The body which consists of a single expression or a statement block. The return statement can also be used, however, keep in mind that a return statement is not an expression in lambdas, so they must be enclosed in braces. Lambdas can be treated as anonymous methods - methods without names.
For instance,
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#functional-interface"&gt;
  &lt;/a&gt;
  📌 Functional Interface &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;functional interface&lt;/em&gt;&lt;/strong&gt; is any interface that contains only one &lt;strong&gt;abstract method&lt;/strong&gt;. It may contain one or more default methods or static methods. Because it only contains one abstract method, the name can be omitted when implementing it. By doing this instead of using an anonymous class expression, a lambda expression is used. The JDK defines several standard functional interfaces which can be found in the package &lt;code&gt;java.util.function&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-in-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 Accessing Local Variables of the Enclosing Scope in Lambda Expressions
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local and anonymous classes, lambdas can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, &lt;strong&gt;lambdas do not have shadowing issues&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Lambdas are &lt;strong&gt;lexically scoped&lt;/strong&gt;. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in lambdas are interpreted just as they are in the enclosing environment.&lt;/li&gt;
&lt;li&gt;If the parameter passed to a lambda is declared in the enclosing scope, then the compiler generates an error, &lt;code&gt;Lambda expression's parameter {} cannot redeclare another local variable defined in an enclosing scope&lt;/code&gt;. This is because lambda expressions do not introduce a new level of scoping. Consequently, lambdas can directly access fields, methods and local variables of the enclosing scope. &lt;/li&gt;
&lt;li&gt;Like local and anonymous classes, a lambda expression can only access local variables and parameters of the enclosing block that are &lt;strong&gt;final&lt;/strong&gt; or &lt;strong&gt;effectively final&lt;/strong&gt; (value should not be changed after initialization).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#target-typing-in-lambdas"&gt;
  &lt;/a&gt;
  📌 Target Typing in Lambdas &lt;a&gt;
&lt;/a&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;So how can the type of a lambda expression be determined, e.g. the type of p in the example below?&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the Java runtime invokes the method where the lambda is passed, it is expecting a specific datatype, so the lambda expression is of this type.The data type that these methods expect is called the &lt;strong&gt;target type&lt;/strong&gt;. To determine the type of a lambda expression, the Java compiler uses the target type of the context or situation in which the lambda expression was found. Thus, &lt;strong&gt;_lambda expressions can only be used in situation in which the Java compiler can determine the target type _&lt;/strong&gt;, i.e. in :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;assignments&lt;/li&gt;
&lt;li&gt;return statements&lt;/li&gt;
&lt;li&gt;array initializers&lt;/li&gt;
&lt;li&gt;method or constructor arguments&lt;/li&gt;
&lt;li&gt;lambda expression bodies&lt;/li&gt;
&lt;li&gt;conditional expressions&lt;/li&gt;
&lt;li&gt;cast expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#target-types-and-method-arguments"&gt;
  &lt;/a&gt;
  📌 Target Types and Method Arguments
&lt;/h5&gt;

&lt;p&gt;For method arguments, the Java compiler determines the target type with two other language features &lt;strong&gt;overload resolution&lt;/strong&gt; and &lt;strong&gt;type argument interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance, if the functional interfaces &lt;code&gt;java.lang.Runnable&lt;/code&gt; and &lt;code&gt;java.util.Callable&amp;lt;V&amp;gt;&lt;/code&gt; are implemented and overloaded by a certain class like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which method will be invoked by the statement below?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method with argument &lt;code&gt;Callable&amp;lt;V&amp;gt;&lt;/code&gt; will be invoked because the lambda returns a value, in this case the string &lt;code&gt;done&lt;/code&gt;. Note that the method &lt;code&gt;invoke(Runnable)&lt;/code&gt; does not return a value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serialization-of-lambdas"&gt;
  &lt;/a&gt;
  📌 Serialization of Lambdas
&lt;/h4&gt;

&lt;p&gt;A lambda can be serialized if its target type and its captured arguments are serializable. However, like inner classes, 🛑 &lt;strong&gt;the serialization of lambdas are strongly discouraged&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#method-references"&gt;
  &lt;/a&gt;
  📌 Method References &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Lambdas can be used to create anonymous methods. However, there are times when it does nothing but call an existing method. In these cases, it is often clearer to refer to the existing method by name, called &lt;strong&gt;method referencing&lt;/strong&gt;. They are compact, easy-to-read lambdas for methods that already have a name.&lt;br&gt;
For instance this can be done in sorting an array of Person objects by age.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personListAsArray&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;Person:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method reference &lt;code&gt;Person::compareByAge&lt;/code&gt; is semantically the same as the lambda expression where &lt;code&gt;compareByAge&lt;/code&gt; is a static method of the Person class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#kinds-of-method-references"&gt;
  &lt;/a&gt;
  Kinds of Method References
&lt;/h5&gt;

&lt;p&gt;There are four types of method referencing&lt;br&gt;
|Kind|Syntax|Example|&lt;br&gt;
|:---|:----|:----|&lt;br&gt;
|Reference to a static method|&lt;code&gt;ContainingClass::staticMethodName&lt;/code&gt;|&lt;code&gt;Person::compareByAge&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of a particular object|&lt;code&gt;containingObject::instanceMethodName&lt;/code&gt;|&lt;code&gt;person1::compareByName&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of an arbitrary object of a particular type|&lt;code&gt;ContainingType::methodName&lt;/code&gt;|&lt;code&gt;String::concat&lt;/code&gt;|&lt;br&gt;
|Reference to a constructor|&lt;code&gt;ClassName::new&lt;/code&gt;|&lt;code&gt;HashSet::new&lt;/code&gt;|&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-nested-classes-local-classes-anonymous-classes-and-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nested Classes enable the logical grouping of classes that are only used in one place, increase the use of encapsulation, create more readable and maintainable code. Local classes, anonymous classes and lambda expressions also share the same advantages but they are usually used for more specific situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local Class&lt;/strong&gt; . Used if creating more than one instance of a class is needed, access its constructor and/or introduce a new, named type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anonymous Class&lt;/strong&gt; . Used if declared fields or additional methods are needed&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt; . &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used for encapsulating a single unit of behavior that is passed to the other parts of the code. &lt;/li&gt;
&lt;li&gt;Used if a simple instance of a functional interface is needed and some other criteria like constructor, named type, fields or additional methods are not needed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Nested Class&lt;/strong&gt; . Used for reasons similar to those of local classes, i.e. it is necessary to make the type more widely available, and access to local variables or method parameters are not needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inner class should be used if access to an enclosing instance's non-public fields and methods are required. &lt;/li&gt;
&lt;li&gt;Static class should be used if there is no instance field that needs to be accessed from the class.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Getting used and familiar with nested classes and advanced lambdas with generics certainly takes a lot of reading code and practice. We will eventually get there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As always, cheers to continued growth and learning 🍷!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Java Nested Classes&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.flowerbrackets.com/nested-classes-in-java/"&gt;Nested Classes in Java&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Is it important to know how Javascript work under the hood?</title>
      <author>Toni</author>
      <pubDate>Sun, 11 Jul 2021 09:21:09 +0000</pubDate>
      <link>https://dev.to/mhb2011_/is-it-important-to-know-how-javascript-work-under-the-hood-5489</link>
      <guid>https://dev.to/mhb2011_/is-it-important-to-know-how-javascript-work-under-the-hood-5489</guid>
      <description>&lt;p&gt;After using javascript for all kind of projects and doing it professionally for almost a year (Developing React Native apps) I asked myself how does javascript work and does it really matter ? When i asked my friend that is much more experienced than me, he told me : Look Toni, it works. I don't care what it does under the hood.&lt;/p&gt;

&lt;p&gt;Then one day i stumbled upon medium article named "Master the JavaScript Interview" or something like that, with bunch of questions I've heard about but i could't really answer them. There  were bunch of questions like which paradigm javascript uses, difference between class and prototypal inheritance, pure functions, composition, call stack , callback queue...&lt;/p&gt;

&lt;p&gt;Wait, maybe it does matter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Yes, there are two paths you can go by, but in the long run, there's still time to change the road you're on.” - Led Zeppelin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is when I've started to dig deeper.&lt;/p&gt;

&lt;p&gt;This article of course can't explain all of it but something that stuck with me on my journey of understanding javascript and something that i think can help a lot of you understand javascript better is this youtube video:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=8aGhZQkoFbQ&amp;lt;br&amp;gt;%0A"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKyLfL-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/8aGhZQkoFbQ/0.jpg" alt="Event loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is focused on explaining what the heck "event loop" is but it explains so much more. I can't recommend this talk enough that i had to write a dev.to post about it.&lt;/p&gt;

&lt;p&gt;Finally, after researching a lot i think i've changed the way i think. If you want code great websites, apps or anything else you have to understand the background , you have to understand how it works under the hood. It can save you so much time no matter which framework you are using Angular, Vue or React they are all based on javascript.&lt;/p&gt;

&lt;p&gt;I would like to hear your opinion.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Elevate your Git-fu!</title>
      <author>Abhay Krishna Arunachalam</author>
      <pubDate>Sun, 11 Jul 2021 09:08:36 +0000</pubDate>
      <link>https://dev.to/abhaykrishna/elevate-your-git-fu-3ip4</link>
      <guid>https://dev.to/abhaykrishna/elevate-your-git-fu-3ip4</guid>
      <description>&lt;p&gt;If I had a dollar for every time I looked up &lt;em&gt;how to ... in Git&lt;/em&gt;, I would have enough to launch a new cryptocurrency of my own (dibs on the name Gitcoin™️ 😛). As developers, we use Git almost everyday, and most of us find ourselves experiencing &lt;em&gt;dèjà vu&lt;/em&gt; with some common scenarios when working with Git. This blog discusses how to easily navigate your way through such scenarios using the Git command-line interface. It also covers some neat Git tricks along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-off-git-command-pagination"&gt;
  &lt;/a&gt;
  Turning off git command pagination
&lt;/h2&gt;

&lt;p&gt;Git commands like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; can print large amounts of text to standard output and are hence paginated by default, requiring user input for navigation and exit. This doesn't lend itself well to automation/scripting, where we want to avoid user interaction. To turn off pagination, we can use the &lt;code&gt;--no-pager&lt;/code&gt; flag with Git.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nt"&gt;--no-pager&lt;/span&gt; log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#removing-files-mistakenly-added-to-commit"&gt;
  &lt;/a&gt;
  Removing files mistakenly added to commit
&lt;/h2&gt;

&lt;p&gt;Many times, we may inadvertently commit the wrong file(s), and checking the &lt;code&gt;git status&lt;/code&gt; doesn't help since there are no hint commands displayed as would be before committing. In this situation, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git restore &lt;span class="nt"&gt;--source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HEAD~ &lt;span class="nt"&gt;--staged&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to bring a file back into the staging area.&lt;/p&gt;

&lt;p&gt;If you are unsure of the filenames and would prefer to move all files back into the staging area, then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git reset &lt;span class="nt"&gt;--soft&lt;/span&gt; HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be your best friend.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#checking-the-current-commit-hash"&gt;
  &lt;/a&gt;
  Checking the current commit hash
&lt;/h2&gt;

&lt;p&gt;I personally require this all the time to navigate back and forth between commits. Every commit has a SHA-1 hash composed of few of the commit's properties such as the date, author/committer, commit message, etc. You can get the current commit SHA using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rev-parse HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-committer-statistics"&gt;
  &lt;/a&gt;
  Git committer statistics
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;git shortlog&lt;/code&gt; command can be used to aggregate commits by author and title. This is especially useful for release announcements. It even provides a summary of commits by count. &lt;/p&gt;

&lt;p&gt;For example, commit count summaries in the &lt;a href="https://github.com/aws/eks-distro-prow-jobs"&gt;aws/eks-distro-prow-jobs&lt;/a&gt; repository are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git shortlog &lt;span class="nt"&gt;-sn&lt;/span&gt;
    62  EKS Distro Bot
    31  Abhay Krishna
    29  EKS Distro PR Bot
    27  Abhay Krishna Arunachalam
    23  &lt;span class="o"&gt;[&lt;/span&gt;REDACTED]
    15  &lt;span class="o"&gt;[&lt;/span&gt;REDACTED]
              &lt;span class="nb"&gt;.&lt;/span&gt;
              &lt;span class="nb"&gt;.&lt;/span&gt;
              &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#committing-without-editing-message"&gt;
  &lt;/a&gt;
  Committing without editing message
&lt;/h2&gt;

&lt;p&gt;Sometimes, we may need to make minor changes to files that have already been committed. Once the files have been updated and &lt;code&gt;git add&lt;/code&gt;ed, we need to commit the new changes, but we probably want to retain the same commit message.&lt;/p&gt;

&lt;p&gt;We can do that with the help of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="nt"&gt;--no-edit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I find myself using this a lot so I have configured the following Git alias, which is short for &lt;strong&gt;c&lt;/strong&gt;ommit &lt;strong&gt;w&lt;/strong&gt;ithout &lt;strong&gt;a&lt;/strong&gt;mend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config alias.cwa &lt;span class="s1"&gt;'commit --amend --no-edit'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#reordering-unmerged-commits"&gt;
  &lt;/a&gt;
  Reordering unmerged commits
&lt;/h2&gt;

&lt;p&gt;In a software company, more often than not, you may be working on multiple features or modules at the same time. In some cases, you may want a more recent feature change to get reviewed first and merged before other changes, for several reasons like coherence, priority, etc. In such cases, we can re-order commits as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the list of all commits with their hashes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--oneline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Identify the depth of the commit range you want to reorder with respect to the HEAD commit.&lt;/li&gt;
&lt;li&gt;Perform interactive rebase on the branch.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase &lt;span class="nt"&gt;-i&lt;/span&gt; HEAD~n &lt;span class="c"&gt;# n is the depth from the previous step&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;     This will open an editor with the commits in the range specified, along with      prompts on how to edit the history.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you have saved and exited the editor, you can repeat step 1 to view the re-ordered commit history.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; After changing history and before pushing to a remote branch, it's important to rebase on top of the remote head to validate that the re-ordering does not cause conflicts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch upstream
git rebase upstream/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#recovering-lost-changes"&gt;
  &lt;/a&gt;
  Recovering lost changes
&lt;/h2&gt;

&lt;p&gt;If you are in a situation where you wrote hundreds of lines of code and then end up losing them due to some conspiracy of the universe, then this one command can save the day. That command is &lt;code&gt;git reflog&lt;/code&gt; (read &lt;em&gt;ref-log&lt;/em&gt; and not &lt;em&gt;re-flog&lt;/em&gt;, though I get why one might think they can expect Git to co-operate by repeatedly flogging it for all the torture 😤).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt; gives you an entire history of all the changes and actions you made across all branches in the local repository. The entries in the log are called &lt;em&gt;reference logs&lt;/em&gt;, and they record when the tips of branches and other references were updated in the local Git working tree. Each entry is marked with an index number which can be used to move forward and backward through history.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reflog&lt;/code&gt; has several use-cases such as retrieving lost/deleted commits, reverting breaking changes, identifying divergent paths, etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#viewing-git-help-on-the-browser"&gt;
  &lt;/a&gt;
  Viewing Git help on the browser
&lt;/h2&gt;

&lt;p&gt;The manual pages for Git command help open in the terminal by default. Perusing man-pages can be a cumbersome task and they are also not user-friendly when searching for information (unless your Vim-fu is on point). If you would prefer to look up a command's manual page on the browser, all you need to do is use the &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--web&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;For example, the man-page for &lt;code&gt;git branch&lt;/code&gt; can be opened on the default browser (configurable) using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;help &lt;/span&gt;log &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--help&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#getting-affected-filenames"&gt;
  &lt;/a&gt;
  Getting affected filenames
&lt;/h2&gt;

&lt;p&gt;Commands like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git show&lt;/code&gt; work beautifully for displaying all the changes that are yet to be and have been committed, respectively. But in some cases, we may only require the names of files affected by a Git operation (for example, for scripting or filtering). We can directly obtain just the names by passing the following flags to the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
git show &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see all files added to the staging area, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--staged&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Filtering based on file extensions is also supported. For example, to get the list of all Python files in the latest commit, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git show &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="s2"&gt;"*.py"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That brings us to the end of this blog. Thank you all for giving it a read! As closing notes, I wish to point out that Git is flexible in that it gives you several different techniques to fix a single problem, and the above methods are just from my experience and not advocated as canon. Feel free to leave your comments and corrections, and do reach out to me on &lt;a href="https://www.linkedin.com/in/abhayk96/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/abhay_krishna96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>git</category>
      <category>devops</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Nodejs Express in AWS Lambda via SAM</title>
      <author>Paul</author>
      <pubDate>Sun, 11 Jul 2021 08:26:04 +0000</pubDate>
      <link>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</link>
      <guid>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</guid>
      <description>&lt;p&gt;I like NodeJS and Express it's handy, easy to use and light weight.  I have used this at work and in personal projects even though I tend to choose Python and Flask these days.  What I like about express is that I can host my Frontend ( and SSR content ) and API in the same project.  If I am building a PoC or a small site/application this make perfect sense.&lt;/p&gt;

&lt;p&gt;A year or so ago as I was building out a lab for the local &lt;a href="https://www.meetup.com/Melbourne-AWS-Programming-and-Tools-Meetup/"&gt;"AWS Programming and Tools"&lt;/a&gt; Meetup I built a small demo using localstack and Dynamo.  A team that is building an adaption of &lt;a href="http://scrumblr.ca/"&gt;Scrumbler&lt;/a&gt; Where having some issues so I whipped up a quick example of Express, wrapped up into a SAM template and deployed to AWS Lambda.&lt;/p&gt;

&lt;p&gt;The set this up simply I have used &lt;a href="https://www.npmjs.com/package/@vendia/serverless-express"&gt;@vendia/serverless-express&lt;/a&gt; as a wrapper/proxy for lambda.  In this way I can develop locally with hot reloading and push the same code without change to Lambda.&lt;/p&gt;

&lt;p&gt;There are 2 entry points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local (app.local.js)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`listening on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vendia/serverless-express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then of course the application itself.  This application is simple and small and is all in one file ( app.js )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//Static content ie images&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/ping&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;incomming&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;resonse&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox/:item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;qty&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMessage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ensure your POST body contains both a fruitName and a qty and content type is application/json &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full repo can be seen &lt;a href="https://github.com/kukielp/aws-sam-nodejs-express"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll now explain how this comes together....tbc&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Class Components vs Functional Components in React</title>
      <author>Megan Lo</author>
      <pubDate>Sun, 11 Jul 2021 08:19:43 +0000</pubDate>
      <link>https://dev.to/mehmehmehlol/class-components-vs-functional-components-in-react-4hd3</link>
      <guid>https://dev.to/mehmehmehlol/class-components-vs-functional-components-in-react-4hd3</guid>
      <description>&lt;p&gt;Disclaimer: This article is not about which components are better, but more of a discussion on the differences. &lt;/p&gt;

&lt;p&gt;When I started learning React with my bootcamp, we mainly focused on using class components -- if there is initial state, and presentational components if we are just grabbing props. I heard of functional components, but never felt comfortable using it until I started learning Hooks (Remember you can only use Hooks in functional components, not class components).&lt;/p&gt;

&lt;p&gt;Let's break down the syntax difference in each of these components!&lt;/p&gt;




&lt;h2&gt;Difference 1: Rendering JSX&lt;/h2&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component (without ES6 destructuring)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;As you can see above, there are a couple obvious differences in functional component: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We don't need to extend a component &lt;/li&gt;
&lt;li&gt;We also don't need to use the &lt;code&gt;render&lt;/code&gt; keyword. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Why do we need to extend the &lt;code&gt;React.Component&lt;/code&gt; class in class component?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: In React, by extending the &lt;code&gt;React.Component&lt;/code&gt; class, it allows us to pass props to a user defined class/component and inherit methods from &lt;code&gt;React.Component&lt;/code&gt; class, like the lifecycle methods (&lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, &lt;code&gt;componentWillUnmount&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt;) and &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;📝 Note 📝&lt;/h3&gt;

&lt;p&gt;In case you don't know, &lt;code&gt;render&lt;/code&gt; is one of the lifecycle methods and the only required method in a class component. It would examine &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; and return types like React elements (JSX), array and fragments, etc. Do not expect it will modify component state! &lt;/p&gt;

&lt;p&gt;The React documentation has a very precise and clear explanation on the &lt;code&gt;render&lt;/code&gt; method, as well as the rest of the lifecycle methods. &lt;a href="https://reactjs.org/docs/react-component.html#render"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;⭐️ Additional Note ⭐️&lt;/h3&gt;

&lt;p&gt;Here's a rule of thumb 👍🏻: &lt;br&gt;
If you only have the render method in your class component, use functional component (which is referred as stateless component sometimes) instead. In functional component, everything defined in the function's body is the render function which returns JSX in the end. &lt;/p&gt;

&lt;p&gt;That's how Hooks comes in place as well. In case you want to make a state change in that functional component, you can easily add it without changing to class component by using &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; for lifecycle methods (will cover that in a bit!).&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.javascriptjanuary.com/blog/extending-react"&gt;Extending React&lt;/a&gt; (JavaScript January)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/52585851/why-we-do-extends-react-component-when-creating-the-class-component-in-react"&gt;Why we do extends React.Component when creating the class component in React?&lt;/a&gt; (Stack Overflow)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;Difference 2: Passing Props&lt;/h2&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;Let's say we have a props &lt;code&gt;name&lt;/code&gt; from this &lt;code&gt;Component&lt;/code&gt;: &lt;br&gt;&lt;code&gt;&amp;lt;ExampleComponent name="Megan" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
   &lt;span class="c1"&gt;// or without destructuring, it will look like this:&lt;/span&gt;
   &lt;span class="c1"&gt;// return &amp;lt;h1&amp;gt;Hello, { this.props.name }!&amp;lt;/h1&amp;gt; &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// with destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// without destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, since it is a class, we have to use &lt;code&gt;this&lt;/code&gt; to refer to the props, or we can destructure it to get &lt;code&gt;name&lt;/code&gt; inside props. Or if we have multiple props, we can do that too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for &lt;strong&gt;functional components&lt;/strong&gt;, we are passing props as an argument of the function. Same as above, if we have mutliple props, we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// with destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// without destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;Difference 3: Handling and Updating state&lt;/h2&gt;

&lt;p&gt;Before React 16.8 (released in Feb 2019), class component was the only component that can handle state. With the introduction of Hooks and its &lt;code&gt;useState&lt;/code&gt; in React 16.8, we can handle state in functional component! &lt;em&gt;yay!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;In case you are not familiar with Hooks and wondering what so special about this &lt;em&gt;Hooks&lt;/em&gt; thing, this &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Intro to Hook&lt;/a&gt; from React documentation explains pretty thoroughly. &lt;/p&gt;

&lt;p&gt;(Off topic: I personally enjoy reading the React documentation because they are able to explain the most technical concepts in a not so robotic and boring tone, really unlike a lot of the documentations I have read. I highly recommend you to spend some time reading the doc!)&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Megan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// or you can write this without constructor():&lt;/span&gt;
  &lt;span class="c1"&gt;// this.state = {&lt;/span&gt;
  &lt;span class="c1"&gt;//  count: 0,&lt;/span&gt;
  &lt;span class="c1"&gt;//  name: "Megan"&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can write the function inside &lt;code&gt;onClick&lt;/code&gt; event before &lt;code&gt;render()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Megan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// or you can write this without constructor():&lt;/span&gt;
  &lt;span class="c1"&gt;// this.state = {&lt;/span&gt;
  &lt;span class="c1"&gt;//  count: 0,&lt;/span&gt;
  &lt;span class="c1"&gt;//  name: "Megan"&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// or &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// by the way, I don't want to continue this without explanation&lt;/span&gt;
&lt;span class="c1"&gt;// This is the arrow function, in case you are not familiar&lt;/span&gt;
&lt;span class="c1"&gt;// Alternatively, you can also write &lt;/span&gt;
&lt;span class="c1"&gt;// function ExampleComponent()&lt;/span&gt;
&lt;span class="c1"&gt;// They are basically the same thing.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react;
// ES6 destructure ^ 

const ExampleComponent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  // or without destructuring, this will be React.useState(0)

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={this.handleClick}&amp;gt;
      // or &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
         Click to add 1
       &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, we can access the value of the state by using &lt;code&gt;this.state&lt;/code&gt; inside JSX and we would use &lt;code&gt;setState&lt;/code&gt; to update the value of the state. You can set the function inside the event or outside of the render() method -- for readability.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;functional component&lt;/strong&gt;, we would use &lt;code&gt;useState&lt;/code&gt; to assign initial state and we would use &lt;code&gt;setCount&lt;/code&gt; (in our example) to update the state. If we want to access the value of the state, we can omit &lt;code&gt;this.state&lt;/code&gt; and call the name of the state instead, in our case, it would just be &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What's with the square bracket, like &lt;code&gt;[count, setCount]&lt;/code&gt;? &lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: The &lt;code&gt;[count, setCount]&lt;/code&gt; syntax is called "array destructuring"!! We are basically making two new variables, in other words,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be quite confusing by accessing with &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; as they have a specific meaning, so React use the "array destructuring" instead. &lt;/p&gt;

&lt;p&gt;This is simply the highlight I got from the React documentation, here's the &lt;a href="https://reactjs.org/docs/hooks-state.html#tip-what-do-square-brackets-mean"&gt;section&lt;/a&gt; where you can read in details!&lt;/p&gt;




&lt;p&gt;Last but not least...&lt;/p&gt;

&lt;h2&gt;Difference 4: Lifecycle Methods&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; is the combination of &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;&lt;code&gt;componentDidMount&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It is invoked immediately after a component is mounted (Mounting means when an instance of a  component is being created and  inserted into the DOM -- &lt;a href="https://reactjs.org/docs/react-component.html#mounting"&gt;React Doc&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, &lt;code&gt;componentDidMount&lt;/code&gt; is only called once after the first render.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;functional component&lt;/strong&gt;, we replace &lt;code&gt;componentDidMount&lt;/code&gt; with &lt;code&gt;useEffect&lt;/code&gt;. As we can see there's a &lt;code&gt;[]&lt;/code&gt; in the second argument, we usually would put some state we like to update/change, let's say you want to restart a quiz app. &lt;code&gt;useEffect&lt;/code&gt; will only be called if there's any selected changes. &lt;/p&gt;

&lt;p&gt;In our case right now, since it is an empty array, &lt;code&gt;useEffect&lt;/code&gt; will be called once on mounting, similar to &lt;code&gt;componentDidMount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in both components, we can set state inside the methods.&lt;/p&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are interested in seeing how useEffect works with fetching data using async/await and axios, here's a great &lt;a href="https://www.robinwieruch.de/react-hooks-fetch-data"&gt;article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👩🏻‍💻&lt;strong&gt;Author's Note&lt;/strong&gt;: I am not so sure how to demonstrate the &lt;code&gt;componentDidUpdate()&lt;/code&gt; and &lt;code&gt;useEffect()&lt;/code&gt;. If you are interested, I am attaching this &lt;a href="https://reactjs.org/docs/hooks-effect.html#example-using-classes"&gt;link&lt;/a&gt; from React Doc, this &lt;a href="https://stackoverflow.com/questions/53255951/equivalent-to-componentdidupdate-using-react-hooks"&gt;Stack Overflow post&lt;/a&gt; and &lt;a href="https://dev.to/savagepixie/how-to-mimic-componentdidupdate-with-react-hooks-3j8c"&gt;How to mimic componentDidUpdate() with React Hooks&lt;/a&gt; from another dev.to writer. Based on my quick research, it looks like we may need &lt;code&gt;useRef()&lt;/code&gt; and custom hook, which currently is out of my knowledge range at the moment.👩🏻‍💻 &lt;/p&gt;

&lt;h3&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It is invoked immediately before a component is unmounted and destroyed. It is usually used for performing any necessary cleanups. One of the most straightforward examples is clear an interval (&lt;code&gt;clearInterval&lt;/code&gt; duh).&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;(Code reference from this &lt;a href="https://stackoverflow.com/questions/49906437/how-to-cancel-a-fetch-on-componentwillunmount"&gt;Stack Overflow post&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// say we have a mounted function that returns a boolean&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;Not so much of a breakdown, but as you can see: &lt;br&gt;
Cool thing about &lt;code&gt;useEffect&lt;/code&gt; is that you can write functions for both mounting and unmounting in the same place. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt; is useful when doing cleanups as mentioned above, without that, it can cause severe memory leaks on a bigger project. &lt;/p&gt;




&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As this article is getting longer, I promise I will keep this conclusion section short but short enough to give you room to think about. &lt;/p&gt;

&lt;p&gt;React Hooks are taking over in modern React, as it is created to be more relevant and timeless (according to the React doc). &lt;/p&gt;

&lt;p&gt;From the comparisons above, we can see how functional components are written shorter and simpler, which makes it easier to read, write and test -- because they are just plain JS functions. However, the rendering time and performance in either components do not make a lot of differences. &lt;/p&gt;

&lt;p&gt;I do not necessarily think one is better than the other. A functional programmer may find easier to use functional components, while that applies the same to an object oriented programmer may find easier to use class components. &lt;/p&gt;

&lt;p&gt;As I mentioned in the introduction, I started with class components and I am currently in the transition of using functional components, as I like React Hooks a lot and I feel like I can do a lot more with it, but I still feel more comfortable to use the lifecycle methods in class component. &lt;/p&gt;

&lt;p&gt;There are a lot of discussions out there which one is better than which and why one prefer over the other. Let me know what you think and let's start a discussion down below!&lt;/p&gt;




&lt;h2&gt;Further Readings&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yassimortensen/container-vs-presentational-components-in-react-8eea956e1cea"&gt;Container vs Presentational Components in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flatlogic.com/blog/functional-components-vs-class-components-in-react-js/"&gt;Functional Components Vs. Class Components In React.Js&lt;/a&gt; -&amp;gt; they got more in-depth and did some performance test&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.twilio.com/blog/react-choose-functional-components"&gt;Understanding Functional Components vs. Class Components in React&lt;/a&gt; -&amp;gt; codepen examples &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Introducing Hooks&lt;/a&gt; (React Documentation) -&amp;gt; as you may have noticed, I have quoted from React documentation so many times in this article. I promise you you will find the documentation super helpful and also since React is a front-end framework, let's all agree that the design of the documentation makes it more fun to read... hehe...&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Connect Java with Mysql Database | Java JDBC</title>
      <author>Arjun Codes</author>
      <pubDate>Sun, 11 Jul 2021 08:11:35 +0000</pubDate>
      <link>https://dev.to/arjuncodes/connect-java-with-mysql-database-java-jdbc-3d6b</link>
      <guid>https://dev.to/arjuncodes/connect-java-with-mysql-database-java-jdbc-3d6b</guid>
      <description>&lt;p&gt;To connect Java application with MySQL database using Java JDBC, we follow 5 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register the Driver class&lt;/li&gt;
&lt;li&gt;Create connection &lt;/li&gt;
&lt;li&gt;Create statement &lt;/li&gt;
&lt;li&gt;Execute queries&lt;/li&gt;
&lt;li&gt;Close connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go through this video for detailed explanation :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AHFBPxWebFQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>jdbc</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Git Learning Materials</title>
      <author>Vansh Sharma</author>
      <pubDate>Sun, 11 Jul 2021 08:11:04 +0000</pubDate>
      <link>https://dev.to/vanshsh/git-learning-materials-1ho2</link>
      <guid>https://dev.to/vanshsh/git-learning-materials-1ho2</guid>
      <description>&lt;p&gt;Thanks, Everyone&lt;/p&gt;

&lt;p&gt;For being part of the series &lt;strong&gt;&lt;em&gt;From Git to GitHub&lt;/em&gt;&lt;/strong&gt;.  This is the 4th and the last &lt;strong&gt;Blog of the series&lt;/strong&gt;.&lt;br&gt;
In this blog, I will give you various resources to learn, apply, read about Git and GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-git"&gt;
  &lt;/a&gt;
  Install Git
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youtube-playlists-to-learn-git"&gt;
  &lt;/a&gt;
  Youtube Playlists to Learn Git
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://youtu.be/3RjQznt-8kE"&gt;The Net Ninja&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/SWYqp7iY_Tc"&gt;Traversy Media&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/SWYqp7iY_Tc"&gt;Tech with Tim&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reading-resources"&gt;
  &lt;/a&gt;
  Reading Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.w3schools.com/GIT/default.asp"&gt;W3School/Git&lt;/a&gt;  .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/GitHub"&gt;MDN docs&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#open-source-contribution"&gt;
  &lt;/a&gt;
  Open Source Contribution
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/firstcontributions"&gt;First contribution &lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://up-for-grabs.net/#/"&gt;Up for Grab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/danthareja/contribute-to-open-source/issues/1"&gt;DRY&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/TEAMMATES/teammates/contribute"&gt;TEAMMATES&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git Book&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://gitcheatsheet.org/"&gt;Git Cheatsheet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;Cheathsheet by GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-by-step-method"&gt;
  &lt;/a&gt;
  Step by Step Method
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.deployhq.com/git"&gt;Learn How to use Git&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thanks again&lt;/strong&gt; for being part of the series. And don't worry Git is not that difficult as it seems also you have to not learn everything there are only 10-15 commands that you will use mostly throughout your life.&lt;/p&gt;

&lt;p&gt;There are more informative and interesting blogs to come. So stay tuned. &lt;/p&gt;

&lt;p&gt;Until then &lt;strong&gt;Keep Learning, Keep Growing&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Connect with me 👇 &lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Twitter&lt;/th&gt;
&lt;th&gt;LinkedIn&lt;/th&gt;
&lt;th&gt;Gmail&lt;/th&gt;
&lt;th&gt;DEV&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://twitter.com/Vanshsh2701"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-ozPGI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/clouds/60/000000/twitter.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.linkedin.com/in/vanshsharma27/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNF6flA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/bubbles/60/000000/linkedin.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:vanshsharma9354@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDnSwS5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/clouds/60/000000/gmail.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://dev.to/vanshsh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfwG4qYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/office/50/000000/blog.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Serendipity, a new VS Code Theme.</title>
      <author>michael-andreuzza</author>
      <pubDate>Sun, 11 Jul 2021 07:48:02 +0000</pubDate>
      <link>https://dev.to/michaelandreuzza/serendipity-a-new-vs-code-theme-1f9b</link>
      <guid>https://dev.to/michaelandreuzza/serendipity-a-new-vs-code-theme-1f9b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#wvsc-serendipity-theme-for-vs-code"&gt;
  &lt;/a&gt;
  WVSC Serendipity Theme for VS Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wicked-labs.wvsc-serendipity"&gt;https://marketplace.visualstudio.com/items?itemName=wicked-labs.wvsc-serendipity&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;Extensions&lt;/strong&gt; sidebar panel in VS Code. &lt;code&gt;View → Extensions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;wvsc-serendipity&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Install&lt;/strong&gt; to install it.&lt;/li&gt;
&lt;li&gt;Code &amp;gt; Preferences &amp;gt; Color Theme &amp;gt; &lt;strong&gt;wvsc-serendipity&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Optional: Use the recommended settings below for best experience&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recommended-settings"&gt;
  &lt;/a&gt;
  Recommended Settings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is are my personal prefferences&lt;/span&gt;
  &lt;span class="c1"&gt;// Personally I use monospace, and it feels lovely.&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.colorTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wvsc-serendipity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontFamily&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'Jet Brains Mono' , Consolas, 'Courier New', monospace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.lineHeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.letterSpacing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files.trimTrailingWhitespace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontWeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prettier.eslintIntegration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorStyle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorWidth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorBlinking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.renderWhitespace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#colours"&gt;
  &lt;/a&gt;
  Colours
&lt;/h2&gt;

&lt;p&gt;DarkGray: #232834&lt;br&gt;
Peppermint: #9EF0F0&lt;br&gt;
Cherry: #F06897&lt;br&gt;
Violeta: #BE95FF&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;Anything you wonder just me on twitter @mike_andreuzza&lt;/p&gt;

&lt;p&gt;/Mike&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>ux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Best recommended VSCode Extensions </title>
      <author>akshat-2110</author>
      <pubDate>Sun, 11 Jul 2021 07:36:52 +0000</pubDate>
      <link>https://dev.to/akshat2110/5-best-recemented-vscode-extensions-1mpm</link>
      <guid>https://dev.to/akshat2110/5-best-recemented-vscode-extensions-1mpm</guid>
      <description>&lt;p&gt;Visual Studio Code is a source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-recommendation-for-extensions"&gt;
  &lt;/a&gt;
  Top 5 recommendation for extensions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-code-spell-checker"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension does what it exactly says. It checks spelling mistakes as you write code by default VSCode will check some spelling but it's not the best and only does so in specific file types but code spell checker will highlight any word it sees that is not in the dictionary and provides spelling suggestions for you it's smart enough to understand camel case snake case pascal case etc and it won't flag compound words in things like variable names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-prettier-code-formatter"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier - Code formatter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Prettier is a very popular extension that provides auto code formatting for most programming languages it's especially useful in html javascript and other languages where there's a lot of nested blocks and opening and closing tags after you install prettier you can configure your formatting by pressing CTRL+SHIFT+P&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is the new version of the original bracket colorizer that simply colors corresponding brackets such that it's easier to see where each block starts and ends now we'll do that with parentheses&lt;br&gt;
brackets angle brackets square brackets squiggly brackets all the different type of brackets&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens — Git supercharged&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is an add-on for git now git is integrated by default in VSCode and so you can already do a lot of git related stuff in VSCode but what git lens allows you to do is see more information about the code that you're working in in the git repository so specifically you can see things like authorship modifications you can go and look through all of the commit history and just gives you a better user interface than the default interface you have with vs code by default what it also does is provide file annotations related to commits authorships and also provides a bunch of different views for navigating revisions and changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-settings-sync"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings Sync&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is extremely useful especially if you work with VSCode on multiple machines and that is called settings sync. Now as the name suggests this will allow you to sync all of your VSCode settings, keybinds, extensions, extension settings and more across all of  your different devices. You do need to manually configure and install this extension on all of your different devices before.&lt;br&gt;
To upload all of your settings SHIFT+ALT+U.&lt;br&gt;
To download all of your settings SHIFT+ALT+D&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extension</category>
      <category>ide</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learning to toggle Dark Mode through React Hooks</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Sun, 11 Jul 2021 07:20:38 +0000</pubDate>
      <link>https://dev.to/tolentinoel/learning-to-toggle-dark-mode-through-react-hooks-43l1</link>
      <guid>https://dev.to/tolentinoel/learning-to-toggle-dark-mode-through-react-hooks-43l1</guid>
      <description>&lt;p&gt;I recently revisited a project of mine and found a feature that I think I can recreate with the use of React Hooks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My current goal is to try out things from React to deepen my familiarity of it and maybe others can relate or give tips to #codenewbies like myself about React Hooks. So if you have any resource suggestions, feel free to drop them in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So for starters..&lt;/p&gt;

&lt;p&gt;The app that I mentioned is called &lt;a href="https://splashglam.herokuapp.com/"&gt;SplashGlam&lt;/a&gt;. It is powered by ReactJS and hosted through Heroku. Feel free to toggle the day and night mode using the button on the top navigator to see what are we working with.&lt;/p&gt;

&lt;p&gt;On Day/Bright mode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw6txzZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrubarynm8n9bchy3ux7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw6txzZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrubarynm8n9bchy3ux7.png" alt="Day mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Night/Dark mode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ava9hPiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46r4bl1h80fsdk50rjkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ava9hPiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46r4bl1h80fsdk50rjkg.png" alt="Night mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also have discussed how I built the toggling feature using LocalStorage on my other blog.(&lt;a href="https://dev.to/tolentinoel/what-is-localstorage-3ffh"&gt;What is LocalStorage?&lt;/a&gt;) This time around, I wanted to try Hooks to recreate at least the toggling part.&lt;/p&gt;

&lt;p&gt;I created a repo to test things out and feel free to check it out if you wanted to test it out on your own. &lt;a href="https://github.com/tolentinoel/randomHex"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-breakdown-of-my-code"&gt;
  &lt;/a&gt;
  Small breakdown of my code:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  First
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KNZOT51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zz3e9bdavvtotm3xqdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNZOT51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zz3e9bdavvtotm3xqdp.png" alt="JSX for DOM elements"&gt;&lt;/a&gt;-So I built the elements on the page first with the corresponding attributes needed like an onClick eventListener.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#second"&gt;
  &lt;/a&gt;
  Second
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz9e7eCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siij491kn6b0f0hibtmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz9e7eCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siij491kn6b0f0hibtmr.png" alt="Function snapshot"&gt;&lt;/a&gt;-Here's how I incorporate useState in the toggle &amp;amp; using a function that has an if statement to trigger changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#third"&gt;
  &lt;/a&gt;
  Third
&lt;/h4&gt;

&lt;p&gt;CSS! Now that we have our functions and elements all set. Remember our function has a line of code where we change/replace the className of the body from &lt;code&gt;dayMode&lt;/code&gt; to &lt;code&gt;nightMode&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Here's my corresponding CSS to see DOM change!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_C9sA9_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aupzy3b6gj04mfxdeb9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_C9sA9_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aupzy3b6gj04mfxdeb9i.png" alt="CSS snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auluF-g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3y535mzrnjm6rw1dkco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auluF-g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3y535mzrnjm6rw1dkco.png" alt="Day Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAgWroaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqot4i6lv4uji4zos7ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAgWroaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqot4i6lv4uji4zos7ka.png" alt="Night Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is pretty much it! I hope anyone that needs an example in using hooks to toggle day/night mode find this helpful!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let-me-know-if-i-missed-anything-in-the-comments-please-until-the-next"&gt;
  &lt;/a&gt;
  Let me know if I missed anything in the comments please! Until the next!
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>codenewbie</category>
      <category>hooks</category>
    </item>
    <item>
      <title>C# Dictionary</title>
      <author>Ishaan Sheikh</author>
      <pubDate>Sun, 11 Jul 2021 06:55:15 +0000</pubDate>
      <link>https://dev.to/sheikh_ishaan/c-dictionary-191c</link>
      <guid>https://dev.to/sheikh_ishaan/c-dictionary-191c</guid>
      <description>&lt;p&gt;The Dictionary in C# is a generic collection, which is used to store data in key-value pairs. It is available under the &lt;code&gt;System.Collections.Generic&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TValue&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tkey"&gt;
  &lt;/a&gt;
  TKey
&lt;/h3&gt;

&lt;p&gt;It represents the data type of the &lt;strong&gt;key&lt;/strong&gt;. For example, &lt;strong&gt;string, bool, int&lt;/strong&gt;, etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tvalue"&gt;
  &lt;/a&gt;
  TValue
&lt;/h3&gt;

&lt;p&gt;It represents the data type of the &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-dictionary"&gt;
  &lt;/a&gt;
  Creating a Dictionary
&lt;/h2&gt;

&lt;p&gt;The Dictionary collection provides an &lt;code&gt;Add()&lt;/code&gt; method to add elements to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Jane"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-an-element"&gt;
  &lt;/a&gt;
  Accessing an element
&lt;/h2&gt;

&lt;p&gt;We can access the element from dictionary by providing the key inside &lt;code&gt;[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#removing-an-element"&gt;
  &lt;/a&gt;
  Removing an element
&lt;/h2&gt;

&lt;p&gt;We can remove an element from the dictionary using the &lt;code&gt;Remove&lt;/code&gt; method by providing the key to be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterating-over-the-dictionary"&gt;
  &lt;/a&gt;
  Iterating over the dictionary
&lt;/h2&gt;

&lt;p&gt;We can use the &lt;code&gt;foreach&lt;/code&gt; loop in C# to iterate over the dictionary collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" - "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
