<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Debugando Rust no VS Code</title>
      <author>Roger Torres</author>
      <pubDate>Fri, 09 Apr 2021 15:01:39 +0000</pubDate>
      <link>https://dev.to/rogertorres/debugando-rust-no-vs-code-5ii</link>
      <guid>https://dev.to/rogertorres/debugando-rust-no-vs-code-5ii</guid>
      <description>&lt;p&gt;&lt;em&gt;Versão em inglês &lt;a href="https://dev.to/rogertorres/debugging-rust-with-vs-code-11dj"&gt;aqui&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bem no começo da minha carreira (2008), consegui um trampo de desenvolvedor Oracle PL/SQL. Eu ainda não sei bem o porquê, mas a gente não usava qualquer debugger na época. Pra corrigir os bugs, a guriada adicionava mensagens pelo código, tentando isolar o problema. Os mais safos fazia algo como uma "busca binária", criando mensagens a cada 100 linhas (ex.: entre as linhas 300 e 400), descobrindo entre quais linhas estava o problema e, então, refinavam a busca, colocando mensagens a cada 10 linhas (ex.: 310, 320 e assim vai).&lt;/p&gt;

&lt;p&gt;Quando eu deixei de trabalhar com Oracle e passei a trablhar com SAP (que tem um debugger fantástico) eu descobri um mundo novo. Então, quando chegou a hora de eu trocar de tecnologia de novo (para Rust), eu fui imediatamente atormentado pela pergunta: "eu vou ter debugger lá?"&lt;/p&gt;

&lt;p&gt;Essa é a resposta que eu encontrei.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#o-que-te-trouxe-aqui-debugando-rust-no-vscode"&gt;
  &lt;/a&gt;
  O que te trouxe aqui: debugando Rust no VSCode
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Primeiro&lt;/em&gt;, você precisa de uma extensão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usando &lt;strong&gt;Unix&lt;/strong&gt; (Mac, Linux, ...)? Baixe &lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Usando &lt;strong&gt;Windows?&lt;/strong&gt; Baixe &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"&gt;C/C++&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Por que&lt;/em&gt; você precisa disso??&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Resposta curta&lt;/strong&gt;: O compilador do Rust usa LLVM para interagir com a máquina, e estas extensões permitem que você interaja com o código que roda nesse nível (já que, cê sabe, o Rust é compilado).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resposta longa&lt;/strong&gt;: Ai você me complica. Dá uma olhada nesse site &lt;a href="https://www.infoworld.com/article/3247799/what-is-llvm-the-power-behind-swift-rust-clang-and-more.html"&gt;aqui&lt;/a&gt; (em inglês).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, no seu VSCode, siga esses passos (o meu VSCode tá em inglês, mas acho que é tranquilo pra você se achar, caso o seu esteja em pt-brazuca): &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; &amp;gt; &lt;code&gt;Ok&lt;/code&gt; &amp;gt; &lt;code&gt;Yes&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" alt="First step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" alt="Second step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" alt="Third step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O resultado esperado é a criação do arquivo &lt;code&gt;/.vscode/launch.json&lt;/code&gt; que se parece algo com isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Arquivo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;copiado&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;de&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;um&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;MacOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;X&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lldb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Debug unit tests in library 'yourprogram'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cargo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--no-run"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--package=yourprogram"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"filter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yourprogram"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"kind"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou isso, se você estiver no Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Windows) Launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cppvsdbg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}/target/debug/yourprogram.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"stopAtEntry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"environment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"externalTerminal"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se por algum motivo os arquivos não forem criados para você, podes copiar e colar (a pasta &lt;em&gt;.vscode&lt;/em&gt; fica no mesmo nível da pasta &lt;em&gt;src&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Além do fato de os exemplos serem de SOs diferentes, o primeiro exemplo é de um programa com biblioteca (&lt;em&gt;library crate&lt;/em&gt;; &lt;code&gt;--lib&lt;/code&gt;), já o segundo é com binário (&lt;em&gt;binary crate&lt;/em&gt;; &lt;code&gt;--bin&lt;/code&gt;). Se você tiver os dois no mesmo projeto, você poderá ter duas ou três entradas em &lt;code&gt;configurations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora, teoricamente, você será capaz de adicionar um breakpoint no seu código (clicando na coluna da esquerda para criar esse ponto vermelho).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" alt="Fourth Step"&gt;&lt;/a&gt;Se você não consegue criar o breakpoint, provavelmente é porque você está com essa opção desativada. Para resolver isso, vá em &lt;strong&gt;Configurações&lt;/strong&gt; (&lt;strong&gt;Settings&lt;/strong&gt;) e selecione &lt;strong&gt;Debug&lt;/strong&gt; (no meu caso, está debaixo de &lt;em&gt;Features&lt;/em&gt;—mas você pode digitar "breakpoint" na barra de busca para encontrá-lo rapidamente) e habilite a opção &lt;strong&gt;"Allow Breakpoints Everywhere"&lt;/strong&gt; (&lt;em&gt;"Permitir Pontos de Parada em Todos os Lugares"&lt;/em&gt;, ou coisa parecida).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" alt="Allow Breakpoints Everywhere"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com os breakpoints acionados, aperte &lt;code&gt;F5&lt;/code&gt; ou &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; (que deve funcionar agora que você tem o arquivo). O resultado deve ser algo assim:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" alt="Fifth Step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basicamente, na esquerda, você tem os valores carregados na memória. As coisas são bem simples enquanto você está lidando com tipos como estes inteiros que eu tenho aqui, mas podem ficar complicadas se você estiver debugando um código com coisas como HashMaps. De qualquer forma, bem melhor que nada.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Não funcionou?&lt;/em&gt; Bom, não vai ser a primeira vez que alguém segue um tutorial na internet e não dá certo, né :) Mas comenta aí (mesmo se você tiver resolvido sozinho), porque há grandes chances de outra pessoa ter um problema similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a%C3%A7%C3%B5es-do-debugger"&gt;
  &lt;/a&gt;
  Ações do Debugger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" alt="Actions"&gt;&lt;/a&gt;Pra finalizar, essas são as ações que o debugger te permite (da esquerda pra direita):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/em&gt;: executa o programa até ele alcançar o próximo breakpoint (ou até o fim, se ele não achar nenhum).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F10&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Over&lt;/strong&gt;&lt;/em&gt;: Executa o próximo passo sem entrar nele; por exemplo, se for uma função, ele executa toda ela sem entrar nela.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Into&lt;/strong&gt;&lt;/em&gt;: Executa o próximo passo, mas, ao contrário do F10, entra no subprocesso.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step out&lt;/strong&gt;&lt;/em&gt;: Executa o código até ir para um nível acima; por exemplo, se estiver numa função, ele executa tudo até chegar no código que chamou a função.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Cmd&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Restart&lt;/strong&gt;&lt;/em&gt;: Executa tudo do começo.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Stop&lt;/strong&gt;&lt;/em&gt;: Interrompe a execução.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E é isso. Agora você já é mais safo que a guriada do meu primeiro emprego. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A foto da capa é do &lt;a href="https://unsplash.com/photos/ljDl1LoPxRY"&gt;Danilo Batista&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>debug</category>
      <category>vscode</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>The useEffect Cheatsheet</title>
      <author>M. Bagher Abiat</author>
      <pubDate>Fri, 09 Apr 2021 14:59:18 +0000</pubDate>
      <link>https://dev.to/aslemammad/the-useeffect-cheatsheet-4e9i</link>
      <guid>https://dev.to/aslemammad/the-useeffect-cheatsheet-4e9i</guid>
      <description>&lt;p&gt;When I started ReactJS, I really enjoyed my first steps, component, props and many fun things about react. One of that features was &lt;code&gt;useEffect&lt;/code&gt;; it was fun but complicated for me while I struggled to learn it. &lt;/p&gt;

&lt;p&gt;Now I want to share my mental model in this small cheat sheet to help you learn &lt;code&gt;useEffect&lt;/code&gt; better or own a better mental model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#philosophy"&gt;
  &lt;/a&gt;
  Philosophy
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; is not a lifecycle hook. It's a mechanism for synchronizing side-effects (&lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, ...) with the state of your app. &lt;a href="https://epicreact.dev/myths-about-useeffect"&gt;EpicReact.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main goal is not using &lt;code&gt;useEffect&lt;/code&gt; for the component lifecycle but using it to do stuff when state-changes (re-renders).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A: run whenever the deps changes&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// B: Optional, runs before 1, we call this the clean-up function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// deps is Optional too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt;'s running steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: Run A&lt;/li&gt;
&lt;li&gt;2: Wait for new state changes (component re-renders)&lt;/li&gt;
&lt;li&gt;3: If the &lt;code&gt;deps&lt;/code&gt; changed

&lt;ul&gt;
&lt;li&gt;Run B to cleanup the previous render's side-effects&lt;/li&gt;
&lt;li&gt;Go to 2&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;No dependency&lt;/strong&gt;: the side-effect function (A) will run on every state-change (re-render)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on everything, I'll run on every re-render&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Empty Array&lt;/strong&gt;: There's nothing to listen to its changes, so it'll run the side-effect function just one time at the state initialization (first render)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on nothing, I'll run just one time&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Non-Empty Array&lt;/strong&gt;: The side-effect function runs on every dependency changes (at least one of the dependencies)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I depend on state1, state2 and prop1&lt;/span&gt;
  &lt;span class="c1"&gt;// I'll run on every change of these dependencies&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#each-render-has-its-own-effects"&gt;
  &lt;/a&gt;
  Each Render Has Its Own Effects
&lt;/h2&gt;

&lt;p&gt;I really love the "&lt;a href="https://overreacted.io/a-complete-guide-to-useeffect/#each-render-has-its-own-effects"&gt;Each Render has its own Effects&lt;/a&gt;" title; I think almost all hooks rely on that title. We should note that every render has its own function body and its own values. The same goes for the side-effect function; check this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's do some fake state changes and see what happens to the side-effect function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in the first render, `count` is 0&lt;/span&gt;
&lt;span class="c1"&gt;// The side-effect function is going to be like this&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// assume we change `count` to 1 (setCount(1)), next render is like that&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// and so on...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's how &lt;code&gt;useEffect&lt;/code&gt; works around dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Aslemammad/Cheatsheets/blob/master/useEffect.pdf"&gt;PDF&lt;/a&gt; on GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this Cheatsheet. Don't forget to share and send reactions to my article. If you wanted to tell me something, tell me on &lt;a href="https://twitter.com/aslemammadam"&gt;Twitter&lt;/a&gt; or mention me anywhere else, You can even subscribe to my &lt;a href="https://bugged.dev/newsletter"&gt;newsletter&lt;/a&gt; and follow me on &lt;a href="https://github.com/Aslemammad"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Best UX design for your affiliate top lists</title>
      <author>Hugh Olssen</author>
      <pubDate>Fri, 09 Apr 2021 14:58:28 +0000</pubDate>
      <link>https://dev.to/hugholssen/best-ux-design-for-your-affiliate-top-lists-432n</link>
      <guid>https://dev.to/hugholssen/best-ux-design-for-your-affiliate-top-lists-432n</guid>
      <description>&lt;p&gt;A top list is, essentially, a collection of external website hyperlinks that are ranked according to some order or principle. The websites included on a top list may be ranked in various ways and for many different reasons, but most often are ranked in order of popularity. External website owners will seek inclusion on the top list to drive visitors to their website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do you need an affiliate top list?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Toplists are a great way of collecting and ranking websites that deal with a similar topic in one place, in a way that is easy for end-users to find them. Toplists also have the benefit of being listed in a ranked format, which is useful from a user engagement perspective as it tends to drive click-throughs. Generally speaking, the higher a website is ranked, the more likely it is to gain visitors. This is because users tend to pay attention to higher-ranked websites first, before visiting lower-ranked sites.&lt;/p&gt;

&lt;p&gt;Another great feature of top lists is how flexible they are. As a website designer, you have complete control over what principle you utilize to order your top list. This means you can easily tailor a top list to the specific needs of your website. From a design perspective, this is incredibly useful and makes top lists a very flexible resource in the designer’s toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Principles of UX design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given how flexible top lists are, this makes them a designer's dream from a UX perspective! However, just because they are flexible doesn’t mean you have free rein as a designer to format and shape them in whatever style you think best. As always with UX design, while there aren’t necessarily any hard and fast rules you always need to strictly abide by, there are nevertheless some &lt;a href="https://99designs.ie/blog/web-digital/ux-design-principles/"&gt;general principles&lt;/a&gt; you should keep in mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User focus&lt;/strong&gt;: With UX design, the experience of the end-user when using the website is the most important factor to keep in mind. Try and put yourself in their shoes when designing a top list: what value will it add to their browsing experience? If it won’t add any value, maybe it’s time to rethink your design strategy!&lt;br&gt;
&lt;strong&gt;Consistency&lt;/strong&gt;: Another important principle to keep in mind is consistency. Make sure the top list design fits in with the overall look and feel of the website. Ensure the aesthetic, design and interface are consistent with the host site.&lt;br&gt;
&lt;strong&gt;Accessibility&lt;/strong&gt;: Given that you want your top list to be usable by as many people as possible, make sure it is also accessible to as many individuals as possible! This could include making sure that the website is accessible to people with limited eyesight, older users who may be less experienced with the internet, or even users who might be color-blind. Ultimately, focusing on accessibility will ensure you maximize your chances of user engagement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online casino affiliates are known for good CRO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you are crafting online content, the goal is to achieve a solid CRO score. CRO – also known as Conversion Rate Optimization – refers to the process of optimizing a host website with a view towards increasing the likelihood that users will click through to the target website. The hope is that if you increase the probability that users will click through to a specific website, once they are there, their visit will be converted into the desired engagement. This might be in the form of an account sign-up or a product sale of some kind.&lt;/p&gt;

&lt;p&gt;When looking to &lt;a href="https://www.bluewinston.com/dictionary/cro-conversion-rate-optimization/"&gt;optimize your CRO&lt;/a&gt;, you should pay attention to both quantitative metrics, qualitative metrics, and to the design of the website itself. Design is a particularly important aspect, as to how information is presented will have a significant impact on the likelihood that a visit by a user will be converted. This is especially true of top lists, where the design of the top list and the surrounding website will have an impact on how the legitimacy of the target website is perceived.&lt;/p&gt;

&lt;p&gt;In terms of which websites tend to have a solid CRO rate, &lt;a href="https://www.casinospesialisten.net/"&gt;https://www.casinospesialisten.net/&lt;/a&gt; is known to score particularly well. There are a number of reasons for this, although it is primarily because would-be casino users tend to use affiliate websites to find information about casino platforms and for advice on which to sign up at. &lt;br&gt;
The online casino space is particularly crowded these days, and affiliate websites present a good way to provide users with information about what online casino to register with. Affiliate top lists are therefore a great way to help users navigate this space.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>bestofdev</category>
      <category>uxdesign</category>
    </item>
    <item>
      <title>Make your very own VSCode Theme and Publish🎉!</title>
      <author>Georgey</author>
      <pubDate>Fri, 09 Apr 2021 14:45:19 +0000</pubDate>
      <link>https://dev.to/geobrodas/make-your-very-own-vscode-theme-and-publish-4fj2</link>
      <guid>https://dev.to/geobrodas/make-your-very-own-vscode-theme-and-publish-4fj2</guid>
      <description>&lt;p&gt;VSCode has become the most popular Code editor and is the most ideal for Web Developers. In the Stack Overflow 2019 Developer Survey, Visual Studio Code was ranked the most popular developer environment tool, with 50.7% of 87,317 respondents reporting that they use it. The reason why VS Code is preferred is due to its customization. &lt;/p&gt;

&lt;p&gt;The IDE is highly customizable. Why is this so? VSCode is built using Github's Electron. What's so special? Electron is a web technology that enables you to build desktop apps using just plain HTML, CSS, and Javascript, with cross-platform compatibility. How cool is that! That means every component/element that you see on the VS Code editor is customizable. VSCode themes are a craze amongst developers. Themes match the person's persona, and who would not like to make one!!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-1-setting-up-yo-codegenerator"&gt;
  &lt;/a&gt;
  Step 1: Setting up Yo Code-Generator
&lt;/h3&gt;

&lt;p&gt;Yeoman Code-generator will help you get started with your first VSCode theme starting files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T4gsI0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617873376370/QC4IGoelP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T4gsI0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617873376370/QC4IGoelP.jpeg" alt="yocode.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm install -g yo generator-code&lt;/code&gt; to install the generator globally on your local device. I would recommend working on the basic Windows Powershell, as I was facing difficulties in installing it in the bash shell. &lt;/li&gt;
&lt;li&gt;Finally, run &lt;code&gt;yo code&lt;/code&gt; after you move to the directory you want to work on.&lt;/li&gt;
&lt;li&gt;You will be prompted with a few options to start with. Since we want to make a new Theme, move the arrow keys down and select &lt;strong&gt;New Color theme&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hh3bKCDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/microsoft/vscode-generator-code/main/yocode.png" alt="yo-code-prompt"&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Start Fresh&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBQ0y64c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/api/extension-guides/color-theme/yocode-colortheme.png" alt="yo-code-setup-2"&gt;
&lt;/li&gt;
&lt;li&gt;Choose a Dark or Light theme as per your preference.&lt;/li&gt;
&lt;li&gt;Enter in the name of the theme and other fields (optional).&lt;/li&gt;
&lt;li&gt;Enable Git repository when prompted to. 
&amp;gt; Enabling a git repository will help you afterward if you want to publish changes in your theme extension and release different versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-2-setting-up-a-local-debugging-environment"&gt;
  &lt;/a&gt;
  Step 2: Setting up a local debugging environment
&lt;/h3&gt;

&lt;p&gt;It's time to get to the fun part!&lt;/p&gt;

&lt;p&gt;If you go to your &lt;code&gt;themes/theme_name.json&lt;/code&gt; file, you will encounter a long file with 2015 lines of code. This is your default theme for VSCode which you must have seen when you first installed VSCode. &lt;/p&gt;

&lt;p&gt;Now press F5, which will open up the debugger window, and you should get another VSCode window opened with the default theme. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If not go to&lt;/strong&gt;: Run -&amp;gt; Add Configuration. You should get a file opened up with the name launch.json, with the suggestion popup on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IbS78AAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617876217192/KjOYGnydvp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IbS78AAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617876217192/KjOYGnydvp.jpeg" alt="debug.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go down to VSCode Extension development -&amp;gt; Save the File -&amp;gt; Rerun the debugger ( F5 ).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should work perfectly now! Now every change you make in your &lt;code&gt;theme_name.json&lt;/code&gt; file will be reflected in the debugger window.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're wondering which theme I'm using, it's the one I made the same way. Do check it out👇 &lt;br&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=GeoBrodas.geobrodas-theme-red-doyoubleed"&gt;Install theme&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/GeoBrodas/doyoubleed"&gt;GitHub Repo&lt;/a&gt; in case you get stuck&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-3-gui-for-customizing-your-theme"&gt;
  &lt;/a&gt;
  Step 3: GUI for customizing your theme
&lt;/h3&gt;

&lt;p&gt;Yeah, I know right! GUI for customizing! That will just speed up our development process 10x times.  Make a free account at &lt;a href="https://themes.vscode.one/"&gt;https://themes.vscode.one/&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7aSj7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887591369/6v30v34XI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7aSj7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887591369/6v30v34XI.jpeg" alt="gui.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new theme -&amp;gt; Select Dark/Light -&amp;gt; Name your file the same you named the extension file in VSCode. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcrLRdPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887707621/GULS7ZiQd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcrLRdPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617887707621/GULS7ZiQd.jpeg" alt="theme-dashboard.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see a lot of CSS values here, all you got to do is select your custom color palette. One site I would highly recommend is &lt;a href="https://colorhunt.co/"&gt;https://colorhunt.co/&lt;/a&gt; . You can select the color palette of your choice and start customizing the theme. &lt;/p&gt;

&lt;p&gt;After customizing everything, save the theme -&amp;gt; Go to &lt;strong&gt;Your Themes&lt;/strong&gt; -&amp;gt; Download. The file that gets downloaded is the &lt;code&gt;theme_name.json&lt;/code&gt; you made in the &lt;code&gt;themes/theme_name.json&lt;/code&gt; directory. Simply open the file you just downloaded, copy the content and paste it into your VSCode file.&lt;/p&gt;

&lt;p&gt;Now this GUI is still under development, so there can be a lot of bugs, some of which I have faced too, most common of them to be properties not getting saved. I have mailed the developer about the bug and he's working on it! Till then you can search for the property you want to edit in the VSCode file by clicking &lt;code&gt;Ctrl + F&lt;/code&gt; -&amp;gt; Search the property -&amp;gt; Change the hex code. The changes you make will be reflected in the VSCode debugger window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIjhbPio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888327015/-6Xc4ufnt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIjhbPio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888327015/-6Xc4ufnt.jpeg" alt="search.JPG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4-creating-personal-acess-tokens-and-setting-vscode-marketplace"&gt;
  &lt;/a&gt;
  Step 4: Creating Personal Acess tokens and setting VSCode MarketPlace.
&lt;/h3&gt;

&lt;p&gt;We are almost there, all that's left is to make few changes in the package.json file in the root directory. But before that, you need to make an account at Microsoft Azure DevOps. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to &lt;a href="https://dev.azure.com"&gt;https://dev.azure.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click here👇 and head to Personal Acess tokens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cy5mNuEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888814355/Kn1mhxD9E.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cy5mNuEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617888814355/Kn1mhxD9E.jpeg" alt="azure.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name the token as per your choice.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;All Accessible Organization&lt;/strong&gt; in Organization.&lt;/li&gt;
&lt;li&gt;Select expiration to &lt;strong&gt;Custom Defined&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Finally, click &lt;strong&gt;Show All Scopes&lt;/strong&gt; below and look for MarketPlace.&lt;/li&gt;
&lt;li&gt;Check the option &lt;strong&gt;Manage&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;Create&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy the personal access token you just received as you won't be able to view it hereafter.&lt;/p&gt;

&lt;p&gt;Next, go to &lt;a href="https://marketplace.visualstudio.com/"&gt;https://marketplace.visualstudio.com/&lt;/a&gt; and click on &lt;strong&gt;Publish Extensions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAJ9JWM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617889296168/CYeqoc4Yl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAJ9JWM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617889296168/CYeqoc4Yl.jpeg" alt="csmarket.JPG"&gt;&lt;/a&gt;&lt;br&gt;
Head over and fill up your details. Do remember the Publisher ID you make. We will need this in the next step.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5-publishing-your-vscode-theme"&gt;
  &lt;/a&gt;
  Step 5: Publishing your VSCode theme
&lt;/h3&gt;

&lt;p&gt;Before that let's do a final check. Make sure the &lt;code&gt;"publisher"&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; file matches your publisher ID&lt;/p&gt;

&lt;p&gt;For publishing, we will use a command-line tool by visual studio code itself called &lt;code&gt;vsce&lt;/code&gt; abbreviation for Visual Studio Code Extension. &lt;/p&gt;

&lt;p&gt;Start a terminal session :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install with &lt;code&gt;npm install -g vsce&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now let's login to the MarketPlace account we just created with  &lt;code&gt;vsce login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will be prompted to enter the personal access token we created in &lt;strong&gt;Step 4&lt;/strong&gt;, enter it.
&amp;gt; Now you are logged in to your marketplace account. Hereafter, every time you start a new terminal session to publish your changes, don't forget to log in!&lt;/li&gt;
&lt;li&gt;It's time to finally publish! Enter &lt;code&gt;vsce package&lt;/code&gt; to compile the file into a &lt;code&gt;.vsix&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;vsce publish&lt;/code&gt; to launch your theme on to marketplace!🚀&lt;/li&gt;
&lt;li&gt;Check your marketplace account you created to get details on the verification process.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Entire documentation for this step is available &lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-6-publishing-newer-versions"&gt;
  &lt;/a&gt;
  Step 6: Publishing newer versions
&lt;/h3&gt;

&lt;p&gt;If you search up your theme on the VSCode extensions, you should find your theme!&lt;br&gt;
Now it's likely that the changes you made may not be perfect, and you want to publish those changes to your existing extension.&lt;/p&gt;

&lt;p&gt;All you need to do is, make the changes and enter &lt;code&gt;vsce publish &amp;lt;version change&amp;gt;&lt;/code&gt;&lt;br&gt;
Before this make sure you're git remote repository is also up to date.&lt;br&gt;
There are three types of the version you can publish :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have made very few changes enter &lt;code&gt;vsce publish patch&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If relatively more changes then enter &lt;code&gt;vsce publish minor&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If huge developments are made then enter &lt;code&gt;vsce publish major&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources:
&lt;/h4&gt;

&lt;p&gt;Check out Gary Simon's video and Jessica Chan's video on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uQoYH2wLlhY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pGzssFNtWXw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That's all for now! It's good to see you have managed to complete all the steps. &lt;br&gt;&lt;br&gt;
If you did like the Blog, do give a ❤, retweet @&lt;a href="https://twitter.com/BrodasGeo"&gt;BrodasGeo&lt;/a&gt; &lt;br&gt;&lt;br&gt;
If you are facing any errors do let me know in the comments. &lt;br&gt;&lt;br&gt;
Until next time, Adios🤘&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Credits: Icon made by FreePik from &lt;a href="https://flaticon.com"&gt;https://flaticon.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>tutorial</category>
      <category>design</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>Postgres Triggers</title>
      <author>Siddhant Kumar</author>
      <pubDate>Fri, 09 Apr 2021 14:37:43 +0000</pubDate>
      <link>https://dev.to/siddhantk232/postgres-triggers-5h0b</link>
      <guid>https://dev.to/siddhantk232/postgres-triggers-5h0b</guid>
      <description>&lt;p&gt;Today in this blog, I want to talk about Postgres triggers. I will also go through an example use case to learn how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The Scenario
&lt;/h2&gt;

&lt;p&gt;I have an e-commerce app to sell books and I am implementing the cart functionality in the database. So, there is a carts table that stores unique cart entries per user and a books table. For cart items, we have another table, &lt;code&gt;carts_books&lt;/code&gt;. The &lt;code&gt;carts&lt;/code&gt; and &lt;code&gt;carts_books&lt;/code&gt; are using a many-to-many relation. So, A cart can have many books, and a book can be used in many carts.&lt;/p&gt;

&lt;p&gt;Whenever a row is inserted or updated in the &lt;code&gt;carts_books&lt;/code&gt; table, I want to calculate the total price of the cart used. I also want to take the &lt;code&gt;multiplier&lt;/code&gt; column of the &lt;code&gt;carts_books&lt;/code&gt; table into account. This &lt;code&gt;multiplier&lt;/code&gt; column is the quantity of a single book. That means I am allowing a customer to buy many copies of a book.&lt;/p&gt;

&lt;p&gt;Let's use Postgres triggers to solve this problem. Before that, below is the list of columns of every table discussed so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-schema"&gt;
  &lt;/a&gt;
  The schema
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                               Table "public.carts"
   Column    |           Type           | Collation | Nullable |      Default
-------------+--------------------------+-----------+----------+--------------------
 created_at  | timestamp with time zone |           | not null | now()
 updated_at  | timestamp with time zone |           | not null | now()
 archived_at | timestamp with time zone |           |          |
 amount      | numeric                  |           | not null |
 status      | text                     |           | not null | 'ENQUEUED'::text
 user_id     | text                     |           | not null |
 id          | uuid                     |           | not null | gen_random_uuid()


                                     Table "public.books"
   Column    |           Type           | Collation | Nullable |              Default
-------------+--------------------------+-----------+----------+-----------------------------------
 created_at  | timestamp with time zone |           | not null | now()
 updated_at  | timestamp with time zone |           | not null | now()
 archived_at | timestamp with time zone |           |          |
 name        | text                     |           | not null |
 price       | numeric                  |           | not null |
 user_id     | bigint                   |           | not null |
 id          | bigint                   |           | not null | nextval('books_id_seq'::regclass)
 description | text                     |           | not null |

              Table "public.carts_books"
   Column   |  Type   | Collation | Nullable | Default
-----------------+---------+-----------+----------+---------
 book_id    | bigint  |           | not null |
 multiplier | integer |           | not null |
 user_id    | text    |           | not null |
 cart_id    | uuid    |           | not null |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;We want to run a procedure (also known as a function) after a row in the table&lt;code&gt;carts_books&lt;/code&gt; is INSERTED or UPDATED.&lt;/p&gt;

&lt;p&gt;For this let's create two Postgres triggers, one for UPDATE and the other for INSERT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;update_cart_price&lt;/span&gt;
  &lt;span class="k"&gt;AFTER&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt;
  &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt;
  &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; 
&lt;span class="s1"&gt;'update the price of the related cart based on the updated cart item(s) in relation carts_books'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;calculate_cart_price&lt;/span&gt;
  &lt;span class="k"&gt;AFTER&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt;
  &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt;
  &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_cart_price&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;calculate_cart_price&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;carts_books&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; 
&lt;span class="s1"&gt;'update the price of the related cart based on the updated cart item(s) in relation carts_books'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is the code that creates two Postgres triggers. Let's understand the syntax and what each clause used above means.&lt;/p&gt;

&lt;p&gt;To create a Postgres trigger, we want to tell Postgres about the following things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Name of the trigger. In this case, I have used names, &lt;code&gt;update_cart_price&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;calculate_cart_price&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you want the code to run? I want to know the values that are inserted, &lt;br&gt;
for this, I have to use the &lt;code&gt;AFTER INSERT&lt;/code&gt; and the &lt;code&gt;AFTER UPDATE&lt;/code&gt; clause.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you want to run this trigger? There are two options, one is to run this trigger for each affected row. Another option is to run the trigger `per statement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you want to run? I have these triggers to run the procedure called &lt;code&gt;update_cart_price()&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;You must create the function before using it in a function.&lt;br&gt;
A function must return &lt;code&gt;TRIGGER&lt;/code&gt; in order to be used in a trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The function that I want to run on these triggers is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`sql&lt;/p&gt;

&lt;p&gt;CREATE OR REPLACE FUNCTION public.update_cart_price ()&lt;br&gt;
  RETURNS TRIGGER&lt;br&gt;
  AS $$&lt;br&gt;
DECLARE&lt;br&gt;
  item record;&lt;br&gt;
  new_amount numeric := 0;&lt;br&gt;
BEGIN&lt;br&gt;
  FOR item IN&lt;br&gt;
  SELECT&lt;br&gt;
    price,&lt;br&gt;
    multiplier&lt;br&gt;
  FROM&lt;br&gt;
    carts_books&lt;br&gt;
    JOIN books ON book_id = books.id&lt;br&gt;
  WHERE&lt;br&gt;
    cart_id = NEW.cart_id LOOP&lt;br&gt;
      new_amount := new_amount + (item.price * item.multiplier);&lt;br&gt;
    END LOOP;&lt;br&gt;
  UPDATE&lt;br&gt;
    carts&lt;br&gt;
  SET&lt;br&gt;
    amount = new_amount&lt;br&gt;
  WHERE&lt;br&gt;
    id = NEW.cart_id;&lt;br&gt;
  RETURN new;&lt;br&gt;
END;&lt;br&gt;
$$&lt;br&gt;
LANGUAGE plpgsql;&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This function selects the price and multiplier of all the books used inside the cart. It then updates the cart's amount column to reflect the updated amount.&lt;/p&gt;

&lt;p&gt;The data of the changed row is made available through the &lt;code&gt;new&lt;/code&gt; record.&lt;/p&gt;

&lt;p&gt;Also, the function cannot use plain &lt;code&gt;SQL&lt;/code&gt; language, you must use a procedural&lt;br&gt;
language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-conclusion"&gt;
  &lt;/a&gt;
  The Conclusion
&lt;/h2&gt;

&lt;p&gt;Postgres triggers make it easy to execute small business logic on data changes. &lt;/p&gt;

&lt;p&gt;Also, we do not need to care about the network latency that we would face if we execute the same logic in a different service (a nodejs app for example).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-reads"&gt;
  &lt;/a&gt;
  Good Reads
&lt;/h3&gt;

&lt;p&gt;In addition to this post, I also recommend reading these to know more about Postgres&lt;br&gt;
triggers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/13/trigger-definition.html"&gt;Official Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/13/trigger-datachanges.html"&gt;Data visibility in trigger functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TUTORIAL: How to use GitHub in Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 09 Apr 2021 14:21:31 +0000</pubDate>
      <link>https://dev.to/codesphere/tutorial-how-to-use-github-in-codesphere-12b5</link>
      <guid>https://dev.to/codesphere/tutorial-how-to-use-github-in-codesphere-12b5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Codesphere is a simple and powerful development platform that combines a collaborative IDE, GitOps, and cloud services to streamline the development of scalable web applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nowadays it's hard to imagine development without using git. That's why in today's article we'll show you how to use Github in Codesphere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloning-from-github"&gt;
  &lt;/a&gt;
  Cloning from Github
&lt;/h2&gt;

&lt;p&gt;Once you are signed in, navigate to the My Apps menu, and press the New App button. You can then click on Clone Repository, where you will be prompted to enter the Repository URL for the Repo you want to clone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UB2BbSAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydp4xl9z0llstwxechwo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UB2BbSAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydp4xl9z0llstwxechwo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For GitHub, the URL for a repository can be found by clicking on the green Code button and copying the HTTPS URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1K-PqR7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmwtogq6gq78yrs6jszu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1K-PqR7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmwtogq6gq78yrs6jszu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply copy that URL back into Codesphere and press "Continue". After choosing a name and billing plan, Codesphere will clone your GitHub Repository, allowing you to use Codesphere to develop and deploy your web application.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>github</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>5 React Libraries You Should Be Using in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Fri, 09 Apr 2021 14:21:30 +0000</pubDate>
      <link>https://dev.to/reedbarger/5-react-libraries-you-should-be-using-in-2021-4n4f</link>
      <guid>https://dev.to/reedbarger/5-react-libraries-you-should-be-using-in-2021-4n4f</guid>
      <description>&lt;p&gt;&lt;em&gt;📣 This post originally appeared on &lt;a href="https://reedbarger.com"&gt;ReedBarger.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at five React libraries that serve as a great addition to any React project you're looking to build in 2021 and beyond.&lt;/p&gt;

&lt;p&gt;The libraries I have chosen were selected because not only do they help us build functional and impressive-looking applications, but they also allow us to do so, faster, easier, and with less code.&lt;/p&gt;

&lt;p&gt;In this guide I'm going to show you how to get up and running with each of these libraries from scratch and integrate them into your projects today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Looking to build amazing real-world React projects with the best libraries? Check out the &lt;a href="https://reactbootcamp.com"&gt;React Bootcamp&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-react-query"&gt;
  &lt;/a&gt;
  1. React Query
&lt;/h2&gt;

&lt;p&gt;To fetch data with React is generally a process that involves a lot of code.&lt;/p&gt;

&lt;p&gt;You often need to use the useEffect hook in combination with useState to manage the fetched data. This requires a lot of boilerplate that we have to write in every component in which we want to fetch data.&lt;/p&gt;

&lt;p&gt;A great library to use to cut down on the code we write for making network requests with React is React Query. All of this React code that we had to write before can be replaced with the hook &lt;code&gt;useQuery&lt;/code&gt;, from which we get back all of the data that we need without having to declare a state variable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9NTsgQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-query-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9NTsgQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-query-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, making data fetching easier only covers a small slice of what React Query does. What makes it a very powerful library is that it caches (saves) requests that we make, so in many cases if we've requested data before, we don't have to make another request, we can just read it from the cache.&lt;/p&gt;

&lt;p&gt;This is immensely helpful to cut down repetition in our code, in the load we put on our API, and in managing our overall app state. If you pick any library to start adding to your projects today out of this list, make it React Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ant-design"&gt;
  &lt;/a&gt;
  2. Ant Design
&lt;/h2&gt;

&lt;p&gt;When it comes to making impressive looking React apps, there are many helpful component libraries that allow us to quickly style our applications with the help of pre-made components.&lt;/p&gt;

&lt;p&gt;There are lots of component libraries out there, but few that are as sophisticated and well designed as one called Ant Design. If you can think of a type of component to include within your React app interface and design, Ant Design almost certainly has it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---s6c49vu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/antd-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---s6c49vu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/antd-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use a component library like Ant Design speeds up our development time by reducing the amount of often unreliable styles that we have to write ourselves. Additionally, these pre-made components provide functionality that is often redundant to create ourselves, such as a common modal or tooltip. In most cases, we should opt for the reliable, proven solution rather than attempting to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;If you're thinking of building an application today and are looking for a solid component library, go with Ant Design. It has virtually every feature that you would need out of a component library, plus great customizability that serves any app feature you might consider implementing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-zustand"&gt;
  &lt;/a&gt;
  3. Zustand
&lt;/h2&gt;

&lt;p&gt;When it comes to managing state, React developers are often given two familiar choices: Redux or React Context.&lt;/p&gt;

&lt;p&gt;Redux has been the go to third-party library for React developers to manage state, but with the arrival of React Context in React version 16, we have an easier way to manage state by passing it around our component tree.&lt;/p&gt;

&lt;p&gt;If you're looking for a library with all of the functionality and power of Redux, with the simplicity of React Context, look at the library Zustand. It's incredibly easy to get started with, as you can see in the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cP2Cqee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/zustand-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cP2Cqee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/zustand-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It involves using the &lt;code&gt;create&lt;/code&gt; function to make a dedicated state object that can include any state values and functions to update that state as we need. It can all be created within a few lines of code.&lt;/p&gt;

&lt;p&gt;Plus, there's no need to use any context provider to pass your state to your app components. All you need to do is create a slice of state, call that created state as a hook, and receive whatever state variables and functions you've declared on the object within your React components.&lt;/p&gt;

&lt;p&gt;Give Zustand a shot the next time you are looking for a more complex state solution like Redux for your application--you'll love it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-hook-form"&gt;
  &lt;/a&gt;
  4. React Hook Form
&lt;/h2&gt;

&lt;p&gt;When it comes to building forms in React, all developers know how tedious it can be to perform basic tasks like validating inputs, plus managing all the form and error state.&lt;/p&gt;

&lt;p&gt;Perhaps the most user-friendly form library available today is React Hook Form. All the functionality that you need in a form library is provided in one simple hook, called &lt;code&gt;useForm&lt;/code&gt; and enables you to create as sophisticated forms as you like.&lt;/p&gt;

&lt;p&gt;It takes control of managing our form state internally, gives us easy helpers to display errors for the appropriate input, and applies validation rules without any external libraries such as Yup, along with handling submission of our form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeyWfa4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-hook-form-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeyWfa4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-hook-form-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to making building functional forms, you want a library that's easy to use and does not add too much code to our components. According to these two criteria, React Hook Form is arguably the best React form library out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-react-responsive"&gt;
  &lt;/a&gt;
  5. React Responsive
&lt;/h2&gt;

&lt;p&gt;There's no question--every React application should be created for users on different devices and needs to be responsive. Meaning, it needs to adjust the styles and appearance according to the screen size or device that your users are on.&lt;/p&gt;

&lt;p&gt;While media queries have typically been used in CSS stylesheets to hide and display different elements, the best React-based library to manage visibility or styles of React components is React Responsive.&lt;/p&gt;

&lt;p&gt;It gives us a convenient &lt;code&gt;useMediaQuery&lt;/code&gt; hook that enables us to pass in very precise conditions to determine whether users on a certain type of screen are using a certain device, they'll be able to adjust our user interface accordingly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lg1ZSBiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-responsive.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lg1ZSBiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.reedbarger.com/content/images/2021/04/react-responsive.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For making any React applications responsive without the use of CSS, be sure to check out the React Responsive library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I built a Logs Analyzer 📜📊</title>
      <author>Abdullah Di'bas</author>
      <pubDate>Fri, 09 Apr 2021 14:06:38 +0000</pubDate>
      <link>https://dev.to/abdullahdibas/i-built-a-logs-analyzer-3ef5</link>
      <guid>https://dev.to/abdullahdibas/i-built-a-logs-analyzer-3ef5</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AbdullahDibas"&gt;
        AbdullahDibas
      &lt;/a&gt; / &lt;a href="https://github.com/AbdullahDibas/LogsAnalyzer"&gt;
        LogsAnalyzer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I've just completed building &lt;strong&gt;Logs Analyzer&lt;/strong&gt; library that provides functionalities to filter and analyze logs and in a way that doesn't affect the original application nor the original logs. The analyzer can be run either in the same application domain for simplicity or in a separate process so that it doesn't affect the original application from which the logs are being generated. &lt;br&gt;
The idea behind the library is to facilitate troubleshooting issues and to monitor users behaviors in dealing with the application. It also gives the ability to report the analyzed logs in more readable ways.&lt;/p&gt;

&lt;p&gt;The library introduces the following three main functionalities:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logs-filtering"&gt;
  &lt;/a&gt;
  Logs Filtering:
&lt;/h3&gt;

&lt;p&gt;When the logs are huge or crowded with traces from different processes or application's areas they become hard to read which makes it helpful in some cases to report only part of the logs that are related to a specific feature or service. The user of the library can specify what logs they need to include in an output by specifying values for the components of each log. &lt;br&gt;
The log's components that the filters can be applied on are:  message, level, tags, extra parameters.&lt;br&gt;
The following is part of the analyzer's configuration file that identifies two logs messages:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ORd5iTct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5yqkbn1grsyy669m2w1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORd5iTct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5yqkbn1grsyy669m2w1.PNG" alt="LogsMessagesConfig"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logs-analyzing"&gt;
  &lt;/a&gt;
  Logs Analyzing:
&lt;/h3&gt;

&lt;p&gt;The library also supports applying analysis methods on the incoming logs that match defined filters (using Logs Filtering). The following are some of the supported methods:&lt;br&gt;
      1. &lt;em&gt;Time Difference&lt;/em&gt;: this method expects to have two different logs as input, and the output will be the time difference between them whenever the second one is received.&lt;br&gt;
      2. &lt;em&gt;Logs Frequency&lt;/em&gt;: it calculates the frequency at which a defined log message is being received.&lt;br&gt;
      3. &lt;em&gt;Duplicate Log Detection&lt;/em&gt;: the analyzer will detect receiving a specific log message more than once.&lt;br&gt;
      4. &lt;em&gt;Log Absence Detection&lt;/em&gt;: triggers an output if a specific log is not received within a configured interval in seconds.&lt;br&gt;
      5. &lt;em&gt;Aggregate Function&lt;/em&gt;: triggers an output when a specific log is received along with a value calculated from a specific log parameter. The aggregate function used should also be specified in the configuration file.&lt;/p&gt;

&lt;p&gt;The following is part of the library's configuration file for the supported analysis methods:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3PssQS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0lbyvxel32jpq4cn2pq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3PssQS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0lbyvxel32jpq4cn2pq.PNG" alt="LogsMessagesRulesConfig"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logs-outputs"&gt;
  &lt;/a&gt;
  Logs Outputs:
&lt;/h3&gt;

&lt;p&gt;The library also supports multiple ways of reporting the output of both Logs filters and analytics. The following are the supported output methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSV files&lt;/strong&gt;:
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fywtZMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd7gvwhetxyx1qyouooe.PNG" alt="CSV_Output"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTML files&lt;/strong&gt;: the library has a simple HTML template page for logs but it can be replaced.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjjNoOIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/texjlw6pxcjumpug0tge.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjjNoOIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/texjlw6pxcjumpug0tge.PNG" alt="HTML_Output"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Text files&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emails&lt;/strong&gt; (this is still being validated).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Windows Popup messages&lt;/strong&gt;:&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dji1SKvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pmuzoc3celhpkpfc4bn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dji1SKvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pmuzoc3celhpkpfc4bn.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#general-notes"&gt;
  &lt;/a&gt;
  General Notes:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The logs analyzer can be enabled\ disabled from the associated configuration file without the need to restart the original application.&lt;/li&gt;
&lt;li&gt;While the analyzer library can be hosted within the domain of the source application, it can be also hosted by a standalone application for better isolation. To achieve that purpose it supports receiving logs using &lt;a href="https://docs.microsoft.com/en-us/windows/win32/ipc/pipes"&gt;Named Pipes or Anonymous Pipes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Each analysis method can be associated with different output. &lt;/li&gt;
&lt;li&gt;Each analysis or filtering method can be configured to be run during a specific time.&lt;/li&gt;
&lt;li&gt;Emails and windows popups are used to quickly report a specific analysis output or issue, therefore they should be used when the expected results are not frequent or for exceptional cases.&lt;/li&gt;
&lt;li&gt;The analyzer also accepts having optional arguments with each log like tags and Key-Value parameters, and then they can be used in some of the supported analysis methods.&lt;/li&gt;
&lt;li&gt;While the analyzer can introduce useful reports and outputs, I don't recommend to fully depend on these reports as a complete substitution for building actual reports that depend on an official data source not the logs.
&lt;/li&gt;
&lt;li&gt;It's also worth to mention that the analyzer methods are useful depending on the scenario you are monitoring and so not all methods will introduce helpful results for every log.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I've just published the library on github but I'm still continuously testing and validating it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AbdullahDibas"&gt;
        AbdullahDibas
      &lt;/a&gt; / &lt;a href="https://github.com/AbdullahDibas/LogsAnalyzer"&gt;
        LogsAnalyzer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>design</category>
      <category>csharp</category>
      <category>opensource</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Starting with Scala 3 macros: a short tutorial</title>
      <author>Adam Warski</author>
      <pubDate>Fri, 09 Apr 2021 13:58:17 +0000</pubDate>
      <link>https://dev.to/softwaremill/starting-with-scala-3-macros-a-short-tutorial-11cb</link>
      <guid>https://dev.to/softwaremill/starting-with-scala-3-macros-a-short-tutorial-11cb</guid>
      <description>&lt;p&gt;&lt;a href="https://www.scala-lang.org"&gt;Scala 3&lt;/a&gt;, also known by its development name &lt;a href="https://dotty.epfl.ch"&gt;Dotty&lt;/a&gt;, is expected to ship by the end of April 2021. One of its flagship features is &lt;a href="https://dotty.epfl.ch/docs/reference/metaprogramming/toc.html"&gt;principled metaprogramming&lt;/a&gt;. This includes macros — &lt;strong&gt;compile-time code generation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Macros have been pioneered through an &lt;a href="https://docs.scala-lang.org/overviews/macros/usecases.html"&gt;experimental API&lt;/a&gt; since Scala 2.10. Even though the API was experimental, macros have become a useful tool, leveraged by a number of libraries. &lt;a href="https://medium.com/why-scala-a6ac8c98c541"&gt;Scala is a flexible&lt;/a&gt; and scalable language; still, macros allow to further reduce boilerplate code in a number of use-cases.&lt;/p&gt;

&lt;p&gt;Given their popularity, it doesn't come as a surprise that the next major revision of the Scala language keeps metaprogramming capabilities, however in an improved form. The new approach is &lt;strong&gt;no longer experimental&lt;/strong&gt;, and draws from the experiences from previous macros implementation.&lt;/p&gt;

&lt;p&gt;At the code level, Scala 3 macros are unfortunately quite different from the previous version; however, this mostly affects library code, as that's where macros were predominantly used.&lt;/p&gt;

&lt;p&gt;The scope of metaprogramming in Dotty / Scala 3 is also different from what we've seen in Scala 2. In some areas it is broader, in some — more constrained. For example, Scala 3 brings extensive &lt;strong&gt;inlining support&lt;/strong&gt;. On the other hand, &lt;strong&gt;macro annotations&lt;/strong&gt; are no longer there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-simple-macro"&gt;
  &lt;/a&gt;
  A simple macro
&lt;/h1&gt;

&lt;p&gt;Let's see how we can start developing a simple macro for Scala 3! I did a &lt;a href="https://www.warski.org/blog/2012/12/starting-with-scala-macros-a-short-tutorial/"&gt;similar tutorial&lt;/a&gt; for the Scala 2.10 macros, 8 years ago! Back then, we were writing a macro which improves on println-debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtMBwudN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo3wx2c4il45li3am8ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtMBwudN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo3wx2c4il45li3am8ep.png" alt="8 years of Scala and counting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turns out, 8 years later, &lt;code&gt;println&lt;/code&gt;-debugging is still one of the main debugging methods that I'm using. Quite often, we want to print some message and labeled values, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Funds transferred, from = $from, to = $to, amount = $amount"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would be nice if we didn't have to duplicate the names of the values used. Our goal is to write a macro which will automatically print the value labels. The syntax that we'd like to achieve is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Funds transferred"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we need a macro here? We need to access the abstract syntax tree (AST) of our code, so that we can find out what the names are. Let's see how we can implement the macro step-by-step. All of the code is &lt;a href="https://github.com/softwaremill/scala3-macro-debug"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h1&gt;

&lt;p&gt;Each project starts with a build; same here, we'll be using &lt;a href="https://www.scala-sbt.org"&gt;sbt&lt;/a&gt; (version 1.5.0), but any other tool which supports Scala3/Dotty can be used as well.&lt;/p&gt;

&lt;p&gt;The only property that we need to specify in &lt;code&gt;build.sbt&lt;/code&gt; is the Scala version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;scalaVersion&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"3.0.0-RC1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have that, we can import the project into &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; or &lt;a href="https://scalameta.org/metals/"&gt;Metals&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, world!
&lt;/h1&gt;

&lt;p&gt;We'll be working with two source files. First, &lt;code&gt;Debug.scala&lt;/code&gt; is going to be where the debug macro will be implemented. Second, &lt;code&gt;Test.scala&lt;/code&gt; will be where we'll be testing the code we've written. We need two separate files, as these need to be compiled separately by the compiler: we can't use code-generating code (the macro) before it has been compiled itself!&lt;/p&gt;

&lt;p&gt;Let's start with an even simpler task: writing code which will generate a &lt;code&gt;println("Hello, world!")&lt;/code&gt; when invoked. This is quite trivial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Debug&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;
  &lt;span class="kt"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="kt"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;
  &lt;span class="kt"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Debug._&lt;/span&gt;
  &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did we actually write a macro? Not really. Instead, we've taken advantage of a new Scala 3 / Dotty metaprogramming feature: &lt;a href="https://dotty.epfl.ch/docs/reference/metaprogramming/inline.html"&gt;inlining&lt;/a&gt;. Notice that the &lt;code&gt;hello&lt;/code&gt; method is prefixed with the &lt;code&gt;inline&lt;/code&gt; modifier. This instructs the compiler (and it's not only a suggestion — but a &lt;strong&gt;requirement&lt;/strong&gt;), that upon compilation, the method body should be inlined at the call-site.&lt;/p&gt;

&lt;p&gt;Hence, when we compile the above and inspect the bytecode, we won't see a &lt;code&gt;hello()&lt;/code&gt; invocation in our &lt;code&gt;Test&lt;/code&gt; application. Instead, the bytecode will contain directly &lt;code&gt;println("Hello, world!")&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a way, inlining as described above is a way to do &lt;strong&gt;static metaprogramming&lt;/strong&gt; — the code is generated, but basing on statically available information, without any computation. Let's see how we can take it one step further, and do some &lt;strong&gt;dynamic&lt;/strong&gt; &lt;strong&gt;metaprogramming&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#singleparameter-debug"&gt;
  &lt;/a&gt;
  Single-parameter debug
&lt;/h1&gt;

&lt;p&gt;Our goal will now be to write a &lt;code&gt;debugSingle&lt;/code&gt; method, which will expand a &lt;code&gt;debugSingle(x)&lt;/code&gt; call into:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of x is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inlining is no longer enough. We need to access the name (or code fragment) that is passed to our method — not its value. We start out similarly as before, with a method that should be inlined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the method that the user will invoke. However, the implementation will need to operate on a representation of the parameter which gives access to information available at compile-time: the textual representation of the code, to generate the label.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that this is quite different from the run-time representation; at compile-time, we manipulate trees corresponding to expressions. At run-time, we manipulate values to which the expressions are evaluated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The mechanism to convert between the compile-time and run-time representations is called &lt;strong&gt;quoting&lt;/strong&gt; &amp;amp; &lt;strong&gt;splicing&lt;/strong&gt;. When we quote a value (by prepending the expression with&lt;code&gt;'&lt;/code&gt;), we get back the abstract syntax tree (AST; a value of type &lt;code&gt;Expr[_]&lt;/code&gt;), representing the expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="ss"&gt;'expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In case of Scala macros, the AST is our code represented as data, which we can inspect. &lt;code&gt;Expr&lt;/code&gt; is the root type; each Scala construct corresponds to a subclass of this type. As these can be nested (e.g. an &lt;code&gt;If&lt;/code&gt; expression has child expressions), our code can be represented as a tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we splice a value using &lt;code&gt;${ }&lt;/code&gt;, we go back to the run-time land:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;anotherExpr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can think of quoting as a function &lt;code&gt;T =&amp;gt; Expr[T]&lt;/code&gt;, transforming code into an abstract syntax tree which can be manipulated at compile-time. Dually, splicing is a function &lt;code&gt;Expr[T] =&amp;gt; T&lt;/code&gt;, transforming an abstract syntax tree into code that will be compiled and evaluated at run-time, into a value of the given type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A crucial property that is enforced by the compiler is the &lt;strong&gt;phase consistency principle&lt;/strong&gt;. It makes sure that you can only access the AST during compile time (at run-time, this information is no longer available!), and that you are not trying to access the value of an expression when a macro is being invoked (as the values are only available at run-time).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The implementation of the &lt;code&gt;debugSingle&lt;/code&gt; macro will operate on abstract syntax trees. Hence, its signature is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingleImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="nc"&gt;Quotes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;**using** QuoteContext&lt;/code&gt; value: it is provided implicitly by the compiler, and allows e.g. to report error messages that might occur during macro invocation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;debugSingleImpl&lt;/code&gt; method takes an AST representing the expression that's been passed in as a parameter. This can be a simple value reference (&lt;code&gt;x&lt;/code&gt;), or anything more complex (e.g. &lt;code&gt;x+y*2&lt;/code&gt;). It returns an AST — code represented as data, of type &lt;code&gt;Expr[Unit]&lt;/code&gt;— which when evaluated, returns a unit (a side-effect).&lt;/p&gt;

&lt;p&gt;Here's the implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingleImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="nc"&gt;Quotes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; 
  &lt;span class="o"&gt;'{&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;show&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;$expr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The outer operation is quoting (&lt;code&gt;'{ ... }&lt;/code&gt;): converting code it contains (of any type &lt;code&gt;T&lt;/code&gt;) to a value of type &lt;code&gt;Expr[T]&lt;/code&gt;; that is, an abstract syntax tree — representing the code as data. For example, &lt;code&gt;'{ println("Hello, world!") }&lt;/code&gt; would return a value of type &lt;code&gt;Expr[Unit]&lt;/code&gt; (&lt;code&gt;Unit&lt;/code&gt; as that's the type returned by &lt;code&gt;println&lt;/code&gt;), which represents the AST corresponding to the invocation of &lt;code&gt;println&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, inside the code for which we are generating the AST, we want to &lt;strong&gt;embed&lt;/strong&gt; some expressions, represented as data: the string literal corresponding to the name of the value (the label), and the expression which computes the value.&lt;/p&gt;

&lt;p&gt;This first is done using &lt;code&gt;expr.show&lt;/code&gt;. This will be evaluated at compile-time, and converts the AST of &lt;code&gt;expr&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;: the textual representation of the code. We create an AST fragment — an expression which represents a constant string with the given value using &lt;code&gt;Expr(expr.show)&lt;/code&gt;, and finally we &lt;strong&gt;splice&lt;/strong&gt; (embed) it into the code that we are generating.&lt;/p&gt;

&lt;p&gt;The second is done by splicing the (unchanged) AST of &lt;code&gt;expr&lt;/code&gt; into the generated code. Any code that is passed as a parameter to &lt;code&gt;debugSingleImpl&lt;/code&gt;, will end up unchanged in the generated code. For example, calling &lt;code&gt;debugSingle(x+y)&lt;/code&gt; will generate, at compile-time, the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"x.+(y)"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One final task remains: calling &lt;code&gt;debugSingleImpl&lt;/code&gt; from &lt;code&gt;debugSingle&lt;/code&gt;. To do that, we need to quote the &lt;code&gt;expr&lt;/code&gt; so that the AST is passed to the macro implementation (we can access that since the method is inlined), and splice the result, converting the AST back into code that will be compiled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;debugSingleImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'expr&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Are we done? Not quite. We need to require that the compiler will inline any usages of the &lt;code&gt;expr&lt;/code&gt; parameter, instead of creating a temporary value with its value; that would spoil our labels! This is done by adding &lt;code&gt;inline&lt;/code&gt; to the parameter as well. Here's the whole implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;debugSingleImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'expr&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt; 

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugSingleImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;])(&lt;/span&gt;
  &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="nc"&gt;Quotes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; 
  &lt;span class="o"&gt;'{&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;show&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;$expr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#multiparameter-debug"&gt;
  &lt;/a&gt;
  Multi-parameter debug
&lt;/h1&gt;

&lt;p&gt;We can now improve our implementation so that it works with multiple parameters. Additionally, if a parameter is a string literal, we'd like to simply include it in the output, without the label.&lt;/p&gt;

&lt;p&gt;First, let's define the user-facing method. We'll use varargs so that it can be called with multiple parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;exprs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;debugImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'exprs&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is the same: we have an inlined method which splices the result of a computation involving code represented as ASTs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This follows the &lt;a href="https://dotty.epfl.ch/docs/reference/metaprogramming/macros.html"&gt;definition from the Dotty docs&lt;/a&gt;: a macro is an inline function that contains a splice operation outside an enclosing quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Varargs are represented as a sequence, hence the signature of the macro implementation is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exprs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Seq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]])(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="nc"&gt;Quotes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the implementation itself, we first have to inspect the passed &lt;code&gt;exprs&lt;/code&gt; tree and verify if it corresponds to multiple parameters passed as varargs. This can be done with &lt;strong&gt;pattern matching&lt;/strong&gt;, using the &lt;code&gt;Varargs&lt;/code&gt; extractor provided by the Scala 3 standard library. As a result, we get a sequence of trees (from &lt;code&gt;Expr[Seq[Any]]&lt;/code&gt;, we get &lt;code&gt;Seq[Expr[Any]]&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;stringExps&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Seq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exprs&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; 
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Varargs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// macro implementation called with varargs&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// macro implementation called with other parameters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the extraction is successful, we map each expression corresponding to subsequent parameters, using pattern matching again. This time, we inspect the underlying term tree, to check if it corresponds to a constant value (such as a constant string literal).&lt;/p&gt;

&lt;p&gt;If so, we return an expression containing that constant (as a string). Otherwise, we convert the expression to a string containing the label and value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Varargs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="nv"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;asTerm&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Literal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Constant&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;showWithValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why one time do we have to match on expressions, and the other on terms? &lt;code&gt;Varargs&lt;/code&gt; is a special construct used to handle this type of parameters. In all other cases, if we want to inspect the shape of the code that was passed in (the Abstract Syntax Tree), we'll have to match on the expression's term — as above.&lt;/p&gt;

&lt;p&gt;And we're almost done; the last step is converting the &lt;code&gt;stringExps: Seq[Expr[String]]&lt;/code&gt; to an &lt;code&gt;Expr[String]&lt;/code&gt; by &lt;strong&gt;generating code&lt;/strong&gt; which will concatenate all of the strings. Two string expressions can be concatenated by splicing both expressions, combining them as any other two strings, and quoting the result. More generally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;concatenatedStringsExp&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stringExps&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;reduceOption&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;'{&lt;/span&gt;&lt;span class="nc"&gt;$e1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;$e2&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;getOrElse&lt;/span&gt;&lt;span class="o"&gt;('{&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so we arrive at our final implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;exprs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;debugImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'exprs&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debugImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exprs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Seq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]])(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="nc"&gt;Quotes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;showWithValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; 
    &lt;span class="o"&gt;'{&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;show&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;stringExps&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Seq&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exprs&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; 
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Varargs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class="nv"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;asTerm&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Literal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Constant&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Expr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;showWithValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;showWithValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;concatenatedStringsExp&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stringExps&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;reduceOption&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;'{&lt;/span&gt;&lt;span class="nc"&gt;$e1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;$e2&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;getOrElse&lt;/span&gt;&lt;span class="o"&gt;('{&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;

  &lt;span class="o"&gt;'{&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;$concatenatedStringsExp&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h1&gt;

&lt;p&gt;We've just scratched the surface of metaprogramming capabilities in Scala 3 / Dotty. First of all, inlining (the "static" metaprogramming variant) has quite a lot of interesting features, as described in &lt;a href="https://dotty.epfl.ch/docs/reference/metaprogramming/toc.html"&gt;Dotty docs&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;recursive inline methods&lt;/li&gt;
&lt;li&gt;specialized inline methods&lt;/li&gt;
&lt;li&gt;using conditionals &amp;amp; matches in inlined methods&lt;/li&gt;
&lt;li&gt;selective summoning (conditional logic depending on available implicits)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Macros also have other features which we haven't covered, such as quoting &amp;amp; splicing types, summoning implicits in macros and more extensive pattern matching involving quoted patterns. Finally, there's multi-stage programming support, which enables constructing code at run-time.&lt;/p&gt;

&lt;p&gt;As mentioned before, all of the code presented here is &lt;a href="https://github.com/softwaremill/scala3-macro-debug"&gt;available on GitHub&lt;/a&gt;. Have fun exploring Scala 3 / Dotty!&lt;/p&gt;

</description>
      <category>scala</category>
      <category>metaprogramming</category>
      <category>macros</category>
    </item>
    <item>
      <title>Setting up my new Machine</title>
      <author>Laurie</author>
      <pubDate>Fri, 09 Apr 2021 13:56:03 +0000</pubDate>
      <link>https://dev.to/laurieontech/setting-up-my-new-machine-549i</link>
      <guid>https://dev.to/laurieontech/setting-up-my-new-machine-549i</guid>
      <description>&lt;p&gt;I started my new job this week, and that meant setting up a new machine. I have a set of tools that I'm comfortable with, so choosing what to download wasn't complicated.&lt;/p&gt;

&lt;p&gt;What I did find interesting is the tools I "just had to have" and those I haven't yet configured yet. A lot of my choices are available on my &lt;a href="https://laurieontech.com/uses/"&gt;uses page&lt;/a&gt;, but it also needs an update.&lt;/p&gt;

&lt;p&gt;So with that, I'm going to talk through my must-haves this past week!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminal"&gt;
  &lt;/a&gt;
  Terminal
&lt;/h2&gt;

&lt;p&gt;Over the years, my terminal has become my programming control center. Who would have thought! When I first started doing development work, I was incredibly intimidated by the command line. I suppose building CLIs will rid you of that fear 🤷.&lt;/p&gt;

&lt;p&gt;As it turns out, my terminal setup requires a lot of things. Oops!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://iterm2.com/"&gt;iterm2&lt;/a&gt;: I find this a nicer option than the built-in apple terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ohmyz.sh/"&gt;oh-my-zsh&lt;/a&gt;: All my machines use this and I've gotten comfortable with it rather than bash.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://starship.rs/"&gt;starship&lt;/a&gt;: This is a newer tool for me but I love the information-rich command prompts and the overall look.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the look and feel of my terminal was ready, I needed additional software.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://brew.sh/"&gt;homebrew&lt;/a&gt;: The essential package manager for macOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;: My JavaScript-loving heart can't live without it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also set up Xcode command line tools so I could get git working. But that was most of my first week essentials in terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apps"&gt;
  &lt;/a&gt;
  Apps
&lt;/h2&gt;

&lt;p&gt;Now it was time to get my most-used applications. My machine came preloaded with &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;, so I didn't need to worry about that. But there were a handful of other things I wanted right away.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;: My IDE of choice. I'll dive into this more in a moment.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://magnet.crowdcafe.com/"&gt;Magnet&lt;/a&gt;: I actually didn't download this until day three and was wondering why my monitor was bugging me so much. Windows managers are so key!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://help.elgato.com/hc/en-us/sections/360004115951-Elgato-Control-Center-Software"&gt;Elgato Control Center&lt;/a&gt;: This is how I control my lighting setup and make my video chats higher quality.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.getclockwise.com/"&gt;Clockwise&lt;/a&gt;: I technically downloaded the chrome extension and integrated it with Slack, but close enough. Calendar tools are a first-week necessity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/google-docs-dark-mode/lgjhepbpjcmfmjlpkkdjlbgomamkgonb?hl=en"&gt;Google Doc dark mode&lt;/a&gt;: Another chrome extension, but this one helps my eyes a ton when I'm trying to do a lot of deep focus reading.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's a surprisingly low number of apps. I'm sure it'll grow in the coming weeks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  VS Code
&lt;/h2&gt;

&lt;p&gt;Now we get to the really good stuff. I'm a developer after all! As it turns out, I didn't do much coding in this first week, but I did look at a lot of existing projects. So what were my go-to extensions?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;li&gt;Indent Rainbow&lt;/li&gt;
&lt;li&gt;JavaScript and Typescript&lt;/li&gt;
&lt;li&gt;Peacock&lt;/li&gt;
&lt;li&gt;Monokai theme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's the current list! It'll get longer, but you can already tell that it's focused on readability. I don't necessarily know what functional helpers I'll need yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yay-first-week"&gt;
  &lt;/a&gt;
  Yay first week!
&lt;/h2&gt;

&lt;p&gt;So that's my current computer setup. It's connected to all my existing hardware and you can read more about that on my &lt;a href="https://laurieontech.com/uses/"&gt;uses page&lt;/a&gt;. Thus far, I've done a lot of reading, had plenty of onboarding chats about logistics, and started to get a handle on what my new role is. Excited for what's to come.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Debugging Rust with VS Code</title>
      <author>Roger Torres</author>
      <pubDate>Fri, 09 Apr 2021 13:54:08 +0000</pubDate>
      <link>https://dev.to/rogertorres/debugging-rust-with-vs-code-11dj</link>
      <guid>https://dev.to/rogertorres/debugging-rust-with-vs-code-11dj</guid>
      <description>&lt;p&gt;&lt;em&gt;You can find a portuguese translation &lt;a href="https://dev.to/rogertorres/debugando-rust-no-vs-code-5ii"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the very beginning of my career (2008), I became an Oracle PL/SQL developer. I still don't know exactly why, but we didn't use any debugger back then. To fix the bugs, we would add messages everywhere and try to isolate the problem. The smarter kids would take a "binary search" approach, creating a message every 100 lines, finding out between which lines the problem was (say, between 300 and 400), and then refining the search, placing messages every 10 lines (310, 320 and so on). &lt;/p&gt;

&lt;p&gt;When I moved from working with Oracle to work with SAP and its ABAP language (which has a fantastic debugger), I discovered a new world. Then, when the time came for me to change technology again (to Rust) I was suddenly dreaded this question: "will I have a debugger there?"&lt;/p&gt;

&lt;p&gt;This is the answer I found.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-you-came-for-debugging-rust-in-vscode"&gt;
  &lt;/a&gt;
  What you came for: debugging Rust in VSCode
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, you need an extension.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On &lt;strong&gt;Unix&lt;/strong&gt; (Mac, Linux, ...)? Get &lt;a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"&gt;CodeLLDB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On &lt;strong&gt;Windows?&lt;/strong&gt; Get &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"&gt;C/C++&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Why&lt;/em&gt; do you need those?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Short answer&lt;/strong&gt;: Rust compiler uses LLVM to interact with the machine, and these extensions allow us to interact with the code that runs at this level (since, you know, Rust is compiled).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Long answer&lt;/strong&gt;: Above my paygrade, I'm just the support guy installing things on your computer; instead of asking me, check &lt;a href="https://www.infoworld.com/article/3247799/what-is-llvm-the-power-behind-swift-rust-clang-and-more.html"&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in your VSCode, follow these steps: &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; &amp;gt; &lt;code&gt;Ok&lt;/code&gt; &amp;gt; &lt;code&gt;Yes&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD79-CEf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftl8okpayl8084eubg8d.png" alt="First step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bq6Ymhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4qb4ntz6jgok1h7eyjk.png" alt="Second step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tm3U4Zqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j52awfjvl5fgsj2laui.png" alt="Third step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The expected result is the creation of the file &lt;code&gt;/.vscode/launch.json&lt;/code&gt; that looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;copied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;MacOS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;X&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lldb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Debug unit tests in library 'yourprogram'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cargo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--no-run"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="s2"&gt;"--package=yourprogram"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"filter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yourprogram"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"kind"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or this, if you're on Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Windows) Launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cppvsdbg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}/target/debug/yourprogram.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"stopAtEntry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"environment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"externalTerminal"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If for some reason I am unaware of, the files were not automatically created, you can copy and paste it (create the &lt;em&gt;.vscode&lt;/em&gt; folder at the same level as the &lt;em&gt;src&lt;/em&gt; folder).&lt;/p&gt;

&lt;p&gt;Besides the example files being from a different OS, in the first one, we have a library crate, while the second one is a binary. If you have both crates in the same project, you will have two or three entries under &lt;code&gt;configurations&lt;/code&gt; (depending on whether you have tests or not).&lt;/p&gt;

&lt;p&gt;Now, theoretically, you could add a breakpoint to your code (clicking on the left column, creating this red dot).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15jZZcbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztrklc0dil1rlyr60jg1.png" alt="Fourth Step"&gt;&lt;/a&gt;If you can't, it is because this option is deactivated. To solve it, open your &lt;strong&gt;Settings&lt;/strong&gt; and go to &lt;strong&gt;Debug&lt;/strong&gt; (under &lt;em&gt;Features&lt;/em&gt;—you can type "breakpoint" in the search bar to find it quickly) and check the &lt;strong&gt;"Allow Breakpoints Everywhere"&lt;/strong&gt; option.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mX3b8aOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0knvx5zuugso8ag9xakx.png" alt="Allow Breakpoints Everywhere"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With your breakpoints set up, press &lt;code&gt;F5&lt;/code&gt; or go to &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Start Debugging&lt;/code&gt; (which should work now that you have the file). You should end up with something like this:&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9rLacR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4t3v8ipylq8jk98i68s.png" alt="Fifth Step"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, on the left, you have the values loaded on the memory. Things are pretty straightforward while you're handling types like these integers, but can become quite messy when you load things like HashMaps; still, it is far better than nothing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Didn't work out for you?&lt;/em&gt; Comment here, for there is a considerable chance that someone else will have a similar problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debug-actions"&gt;
  &lt;/a&gt;
  Debug actions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv50KGx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61xoqkjfe8b9lcwasws9.png" alt="Actions"&gt;&lt;/a&gt;To wrap it up, these are the actions you may perform while debugging are (from left to right):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Continue&lt;/strong&gt;&lt;/em&gt;: runs the program until it reaches another breakpoint;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F10&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Over&lt;/strong&gt;&lt;/em&gt;: Executes the step without going in; eg. if it is a function, it will not go into it;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step Into&lt;/strong&gt;&lt;/em&gt;: Executes the step by going into;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F11&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Step out&lt;/strong&gt;&lt;/em&gt;: Eg. if you're in a function, it goes back to the caller.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Cmd&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Restart&lt;/strong&gt;&lt;/em&gt;: Execute from the beginning.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;F5&lt;/code&gt; &lt;em&gt;&lt;strong&gt;Stop&lt;/strong&gt;&lt;/em&gt;: Halt the execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it. Now you're smarter than the smart kids from my first job :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photograph by [Danilo Batista]&lt;/em&gt;(&lt;a href="https://unsplash.com/photos/ljDl1LoPxRY"&gt;https://unsplash.com/photos/ljDl1LoPxRY&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>rust</category>
      <category>vscode</category>
      <category>debug</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 9th April 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 09 Apr 2021 13:34:46 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-9th-april-2021-1968</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-9th-april-2021-1968</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-reactspring"&gt;
  &lt;/a&gt;
  1. react-spring
&lt;/h3&gt;

&lt;p&gt;react-spring is a spring-physics based animation library that should cover most of your UI related animation needs. It gives you tools flexible enough to confidently cast your ideas into moving interfaces.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pmndrs"&gt;
        pmndrs
      &lt;/a&gt; / &lt;a href="https://github.com/pmndrs/react-spring"&gt;
        react-spring
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✌️ A spring physics based React animation library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/973c99d17e4ce72d08c4433449045d8391948711f11ac5f328a585e2a7bc8663/68747470733a2f2f692e696d6775722e636f6d2f515a6f776e68672e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/973c99d17e4ce72d08c4433449045d8391948711f11ac5f328a585e2a7bc8663/68747470733a2f2f692e696d6775722e636f6d2f515a6f776e68672e706e67" width="240"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;react-spring&lt;/strong&gt; is a spring-physics based animation library that should cover most of your UI related animation needs. It gives you tools flexible enough to confidently cast your ideas into moving interfaces.&lt;/p&gt;

&lt;p&gt;This library represents a modern approach to animation. It is very much inspired by Christopher Chedeau's &lt;a href="https://github.com/animatedjs/animated"&gt;animated&lt;/a&gt; and Cheng Lou's &lt;a href="https://github.com/chenglou/react-motion"&gt;react-motion&lt;/a&gt;. It inherits animated's powerful interpolations and performance, as well as react-motion's ease of use. But while animated is mostly imperative and react-motion mostly declarative, react-spring bridges both. You will be surprised how easy static data is cast into motion with small, explicit utility functions that don't necessarily affect how you form your views.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pmndrs/react-spring/actions/workflows/main.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5i8ZLFIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pmndrs/react-spring/actions/workflows/main.yml/badge.svg%3Fstyle%3Dflat%26colorA%3D000000%26colorB%3D000000" alt="Build"&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/js/react-spring" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/11dbce08ffb79575ff967a9c95ff366286cd00e94b8cd09c462204fc92ec67e5/68747470733a2f2f62616467652e667572792e696f2f6a732f72656163742d737072696e672e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/ZZjjNvJ" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8ce53964ca942fe1400129d0be249a06278b98b3ee41573b195d3d7c070d9266/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3734303039303736383136343635313030382f7769646765742e706e673f7374796c653d736869656c64" alt="Discord Shield"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/pmndrs/react-spring/master/#backers"&gt;&lt;img src="https://camo.githubusercontent.com/f2d950c26381fb17dee837c7bf83e1f562c7ceafd55034b6daa6d7092a5840ba/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d737072696e672f6261636b6572732f62616467652e737667" alt="Backers on Open Collective"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/pmndrs/react-spring/master/#sponsors"&gt;&lt;img src="https://camo.githubusercontent.com/bf2c348098a3c0d948c66dd44da321483d70ab88684424b3d9aa00ba166e9ab6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d737072696e672f73706f6e736f72732f62616467652e737667" alt="Sponsors on Open Collective"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm install react-spring
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;
Documentation and Examples&lt;/h3&gt;
&lt;p&gt;More info about the project can be found &lt;a href="https://www.react-spring.io" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For info specific to v9 can be found &lt;a href="https://aleclarson.github.io/react-spring/v9/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Examples and tutorials can be found &lt;a href="https://www.react-spring.io/docs/hooks/basics" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
Why springs and not durations&lt;/h2&gt;
&lt;p&gt;The principle you will…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pmndrs/react-spring"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-wmr"&gt;
  &lt;/a&gt;
  2. WMR
&lt;/h3&gt;

&lt;p&gt;The tiny all-in-one development tool for modern web apps, in a single 2mb file with no dependencies.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/preactjs"&gt;
        preactjs
      &lt;/a&gt; / &lt;a href="https://github.com/preactjs/wmr"&gt;
        wmr
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      👩‍🚀 The tiny all-in-one development tool for modern web apps.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
WMR&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/preactjs/wmr/main/./docs/public/assets/wmr.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBg4EhbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/preactjs/wmr/main/./docs/public/assets/wmr.svg" alt="wmr logo" width="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://npm.im/wmr" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1078ce1794272f38094fe85894d654ca228a84eb9ed99d0823b96502427a43c4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f776d722e737667" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://packagephobia.com/result?p=wmr" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9c634a664beb9f91474b3771e0a071a37b9611cc8195cfcbef73ebd58073091a/68747470733a2f2f7061636b61676570686f6269612e636f6d2f62616467653f703d776d72" alt="install size"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/preactjs/wmr/main/#backers"&gt;&lt;img src="https://camo.githubusercontent.com/0d0ecac2b0f0c2ff5c470a3c5cb5217e5578bb525c7697ddf83be4851cdc98a9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7072656163742f6261636b6572732f62616467652e737667" alt="OpenCollective Backers"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/preactjs/wmr/main/#sponsors"&gt;&lt;img src="https://camo.githubusercontent.com/82ce8597daae0bc769f8250e00575037706280b279f34ca61b85420c676fc31f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7072656163742f73706f6e736f72732f62616467652e737667" alt="OpenCollective Sponsors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The tiny all-in-one development tool for modern web apps&lt;/strong&gt;, in a single 2mb file with no dependencies.&lt;/p&gt;
&lt;p&gt;All the features you'd expect and more, from development to production:&lt;/p&gt;
&lt;p&gt;🔨   No entry points or pages to configure - just HTML files with &lt;code&gt;&amp;lt;script type=module&amp;gt;&lt;/code&gt;&lt;br&gt;
🦦   Safely &lt;code&gt;import "packages"&lt;/code&gt; from npm &lt;strong&gt;&lt;em&gt;without installation&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
📦   Smart bundling and caching for npm dependencies&lt;br&gt;
↻   Hot reloading for modules, Preact components and CSS&lt;br&gt;
⚡️   Lightning-fast JSX support that you can debug in the browser&lt;br&gt;
💄   Import CSS files and &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt; (&lt;code&gt;*.module.css&lt;/code&gt;)&lt;br&gt;
🔩   Out-of-the-box support for &lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt;&lt;br&gt;
📂   Static file serving with hot reloading of CSS and images&lt;br&gt;
🗜   Highly optimized Rollup-based production output (&lt;code&gt;wmr build&lt;/code&gt;)&lt;br&gt;
📑   Crawls and pre-renders your app's pages to static HTML at build time&lt;br&gt;
🏎   Built-in HTTP2 in dev and prod (&lt;code&gt;wmr serve --http2&lt;/code&gt;)&lt;br&gt;
🔧   Supports &lt;a href="https://raw.githubusercontent.com/preactjs/wmr/main/packages/wmr/README.md#configuration-and-plugins"&gt;Rollup plugins&lt;/a&gt;, even in development…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/preactjs/wmr"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-dumi"&gt;
  &lt;/a&gt;
  3. dumi
&lt;/h3&gt;

&lt;p&gt;A Umi-based doc tool can assist you to develop libraries &amp;amp; write docs.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/umijs"&gt;
        umijs
      &lt;/a&gt; / &lt;a href="https://github.com/umijs/dumi"&gt;
        dumi
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📖 Documentation Generator of React Component
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
dumi&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/umijs/dumi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f64a7b6107f75bbd57edeac54dc0425ef3502862e50624e5be5545214e3fa3de/68747470733a2f2f636f6465636f762e696f2f67682f756d696a732f64756d692f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://npmjs.org/package/dumi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8507ebc67dfa8c67219d92e67c92c099ae0b632d432e1910512715e59bea29d8/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f64756d692e7376673f7374796c653d666c6174" alt="NPM version"&gt;&lt;/a&gt; &lt;a href="https://circleci.com/gh/umijs/dumi/tree/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/688867a53b47a7e68c82a0274cae945d2b824365006eb1f25c7c2b9ec180cd22/68747470733a2f2f636972636c6563692e636f6d2f67682f756d696a732f64756d692f747265652f6d61737465722e7376673f7374796c653d737667" alt="CircleCI"&gt;&lt;/a&gt; &lt;a href="https://github.com/umijs/dumi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmRkhMb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/umijs/dumi/workflows/Node%2520CI/badge.svg" alt="GitHub Actions status"&gt;&lt;/a&gt; &lt;a href="https://npmjs.org/package/dumi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6dd87a35e29a6736de8fff1d040a73e52febe24c0f4f1bfde1afe57c3bca5e1c/687474703a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f64756d692e7376673f7374796c653d666c6174" alt="NPM downloads"&gt;&lt;/a&gt; &lt;a href="https://lernajs.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Intro&lt;/h2&gt;
&lt;p&gt;A Umi-based doc tool can assist you to develop libraries &amp;amp; write docs.&lt;/p&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
📦 Out of the box, focus on development &amp;amp; documentation&lt;/li&gt;
&lt;li&gt;
🚀 Based on &lt;a href="https://umijs.org" rel="nofollow"&gt;Umi 3&lt;/a&gt;, high-performance &amp;amp; extensible&lt;/li&gt;
&lt;li&gt;
📋 Powerful Markdown extensions, support to embed demo or import external demo &amp;amp; inline demo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage &amp;amp; Guide&lt;/h2&gt;
&lt;p&gt;To view more online examples and docs, please visit &lt;a href="https://d.umijs.org" rel="nofollow"&gt;dumi official site&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$ yarn
$ yarn watch
$ yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Who are using dumi?&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://ahooks.js.org/" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/3535a8205188713d63953968a24edac7ac3264db0ac5f0468411d61b24369836/68747470733a2f2f61686f6f6b732e6a732e6f72672f6c6f676f2e737667"&gt;
        &lt;br&gt;
        &lt;strong&gt;ahooks&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://alitajs.com/" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klLTwfmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11746742/104428726-c2c90300-55bf-11eb-9b84-d52a86050b9a.png" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;alitajs&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://v2.formilyjs.org/" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/98d7f1119fff7da99daf72efdc0efc1acbe39a05e00114d0a20aed639e1390e3/68747470733a2f2f696d672e616c6963646e2e636f6d2f696d6765787472612f69322f4f31434e30314b71334f485531667068364c47716a497a5f2121363030303030303030343035362d35352d7470732d313134312d3135302e737667"&gt;
        &lt;br&gt;
        &lt;strong&gt;Formily&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://ggeditor.com" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/376470f859f22b8753d51388ff732af7b8f9e3c90b026854af4fe3ddb4ab3ce7/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f5442314646413143465037674b306a535a466a58586335615858612d3231342d3230302e706e67" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;GGEditor&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://graphin.antv.vision/" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/53886f0e306c9f01c96dee2edca3992830b7cbb769118029a7e5d677deb7e67e/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f616e7466696e63646e2f306234487a4f63454a592f4772617068696e2e737667" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;Graphin&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://actions-cool.github.io/issues-helper/" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNg2-B1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars1.githubusercontent.com/u/73879334%3Fs%3D200%26v%3D4" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;issues-helper&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://juejin-cn.github.io/open-source/" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDRAed2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/69633008%3Fs%3D200%26v%3D4" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;juejin-cn&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://lightproxy.org" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fe1YidR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5436704/81533849-83e00f00-9399-11ea-943d-ac5fd4653906.png" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;LightProxy&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://procomponents.ant.design/" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/363242675617648bfbedd1610f89ac28df0f9e1bac8749d83109fafdf8524fff/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f726d73706f7274616c2f4b4470677667754d704766716148506a6963524b2e737667" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;Pro Components&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://qiankun.umijs.org/" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/adfed1a938d042a302c2e51dcb5f983094f97d2199f9d1b8abbf549bd597c3e8/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f38613734633164332d313666332d343731392d626536332d3135653436376136386132342f6b6d30637638766e5f773530305f683530302e706e67" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;qiankun&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://github.com/react-component"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMztoKjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/9441414%3Fs%3D200%26v%3D4" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;react-component&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://remaxjs.org" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/b68f59bf585d35970d83be02e0fec57931b7ac0119bf9decad53caf44303df87/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f6d646e2f726d735f6235666363352f616674732f696d672f412a314e4841515964755169514141414141414141414141426b4152516e4151" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;Remax&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
      &lt;a href="https://umijs.org" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/a5823f56eacb36c3c8140c3584e4e17a1cab6e24273f30a9431ab05bf7927f94/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f35393864313461662d346631632d343937642d623537392d3561633432636434646431662f6b37626a756139635f773133325f683133302e706e67" width="42"&gt;
        &lt;br&gt;
        &lt;strong&gt;UmiJS&lt;/strong&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
    &lt;/td&gt;
    &lt;td width="160"&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
README Badge&lt;/h3&gt;
&lt;p&gt;Using dumi ? Add a README badge to show it off: &lt;a href="https://github.com/umijs/dumi"&gt;&lt;img src="https://camo.githubusercontent.com/dad488b294913d8474b87f5886800119082101668939b94280443d5acb7a2f73/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f637325323062792d64756d692d626c7565" alt="dumi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![dumi](https://img.shields.io/badge/docs%20by-dumi-blue)](https://github.com/umijs/dumi)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
Discuss group&lt;/h2&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/10962c1f224bdf5d6e860e006016ea7b938208b382c5ecbdace769fbb10c48d0/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f65633234393730332d626531322d343136632d386633332d3239376534376439343339632f6b6a79356c7338345f77313030345f68313334362e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/10962c1f224bdf5d6e860e006016ea7b938208b382c5ecbdace769fbb10c48d0/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f65633234393730332d626531322d343136632d386633332d3239376534376439343339632f6b6a79356c7338345f77313030345f68313334362e706e67" width="300"&gt;&lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8f321b5e32ca1a0125ee75adb80d7a1c2649090e97731ca45b7dcafa3bdbc741/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f63313862633261352d373139612d343863612d623232352d6337396566383862666234332f6b376d3130796d645f77313030345f68313334362e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/8f321b5e32ca1a0125ee75adb80d7a1c2649090e97731ca45b7dcafa3bdbc741/68747470733a2f2f67772e616c697061796f626a656374732e636f6d2f7a6f732f626d772d70726f642f63313862633261352d373139612d343863612d623232352d6337396566383862666234332f6b376d3130796d645f77313030345f68313334362e6a706567" width="300"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/umijs/dumi"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#4-restful-api-node-server-boilerplate"&gt;
  &lt;/a&gt;
  4. RESTful API Node Server Boilerplate
&lt;/h3&gt;

&lt;p&gt;A boilerplate for building production-ready RESTful APIs using Node.js, Express, and Mongoose&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hagopj13"&gt;
        hagopj13
      &lt;/a&gt; / &lt;a href="https://github.com/hagopj13/node-express-boilerplate"&gt;
        node-express-boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A boilerplate for building production-ready RESTful APIs using Node.js, Express, and Mongoose
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
RESTful API Node Server Boilerplate&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/hagopj13/node-express-boilerplate" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cb318500b28c646605da9e318b0a1a795dd476fe6cd0344af1da3bf02b063b44/68747470733a2f2f7472617669732d63692e6f72672f6861676f706a31332f6e6f64652d657870726573732d626f696c6572706c6174652e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/hagopj13/node-express-boilerplate?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0f524aef72c4168242eb91100254d8d38431b61a73910f54d08b94b537b0591/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6861676f706a31332f6e6f64652d657870726573732d626f696c6572706c6174652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://www.codacy.com/manual/hagopj13/node-express-mongoose-boilerplate?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=hagopj13/node-express-boilerplate&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cc20a85cd271b5b9960c2293627388773e8a592c5ef4c0c2903fe213d20dff6e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3261623033663564363261313430346638376136353961666538643664356465" alt="Codacy Badge"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A boilerplate/starter project for quickly building RESTful APIs using Node.js, Express, and Mongoose.&lt;/p&gt;
&lt;p&gt;By running a single command, you will get a production-ready Node.js app installed and fully configured on your machine. The app comes with many built-in features, such as authentication using JWT, request validation, unit and integration tests, continuous integration, docker support, API documentation, pagination, etc. For more details, check the features list below.&lt;/p&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;To create a project, simply run:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npx create-nodejs-express-app &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;project-name&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm init nodejs-express-app &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;project-name&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Manual Installation&lt;/h2&gt;
&lt;p&gt;If you would still prefer to do the installation manually, follow these steps:&lt;/p&gt;
&lt;p&gt;Clone the repo:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone --depth 1 https://github.com/hagopj13/node-express-boilerplate.git
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; node-express-boilerplate
npx rimraf ./.git&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Install the dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn install&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set the environment variables:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;cp .env.example .env
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; open .env and modify the environment variables (if needed)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#environment-variables"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#project-structure"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hagopj13/node-express-boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-react-email-editor"&gt;
  &lt;/a&gt;
  5. React Email Editor
&lt;/h3&gt;

&lt;p&gt;Drag-n-Drop Email Editor Component for React.js&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/unlayer"&gt;
        unlayer
      &lt;/a&gt; / &lt;a href="https://github.com/unlayer/react-email-editor"&gt;
        react-email-editor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Drag-n-Drop Email Editor Component for React.js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Email Editor&lt;/h1&gt;
&lt;p&gt;The excellent drag-n-drop email editor by &lt;a href="https://unlayer.com/embed" rel="nofollow"&gt;Unlayer&lt;/a&gt; as a &lt;a href="http://facebook.github.io/react" rel="nofollow"&gt;React.js&lt;/a&gt; &lt;em&gt;wrapper component&lt;/em&gt;. This is the most powerful and developer friendly visual email builder for your app.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Video Overview&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=MIWhX-NF3j8" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/461549bd49817ebd8865451d81f0a9293dd8dd6fda4e24a9ba19ea494a4288af/68747470733a2f2f756e726f6c6c2d6173736574732e73332e616d617a6f6e6177732e636f6d2f756e6c61796572766964656f746f75722e706e67" alt="React Email Editor"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Watch video overview: &lt;a href="https://youtu.be/MIWhX-NF3j8" rel="nofollow"&gt;https://youtu.be/MIWhX-NF3j8&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Live Demo&lt;/h2&gt;
&lt;p&gt;Check out the live demo here: &lt;a href="http://react-email-editor-demo.netlify.com/" rel="nofollow"&gt;http://react-email-editor-demo.netlify.com/&lt;/a&gt; (&lt;a href="https://github.com/unlayer/react-email-editor/blob/master/demo/src/index.js"&gt;Source Code&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;
Blog Post&lt;/h2&gt;
&lt;p&gt;Here's a blog post with a quickstart guide: &lt;a href="https://medium.com/unlayer-blog/creating-a-drag-n-drop-email-editor-with-react-db1e9eb42386" rel="nofollow"&gt;https://medium.com/unlayer-blog/creating-a-drag-n-drop-email-editor-with-react-db1e9eb42386&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;The easiest way to use React Email Editor is to install it from NPM and include it in your own React build process.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install react-email-editor --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Require the EmailEditor component and render it with JSX:&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useRef&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;render&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react-dom'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;EmailEditor&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react-email-editor'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;props&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;emailEditorRef&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useRef&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;null&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-en"&gt;exportHtml&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-s1"&gt;emailEditorRef&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;current&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;editor&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;exportHtml&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/unlayer/react-email-editor"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-pro-git-second-edition"&gt;
  &lt;/a&gt;
  6. Pro Git, Second Edition
&lt;/h3&gt;

&lt;p&gt;The second edition of the Pro Git book&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/progit"&gt;
        progit
      &lt;/a&gt; / &lt;a href="https://github.com/progit/progit2"&gt;
        progit2
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Pro Git 2nd Edition
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="asc"&gt;
&lt;h1&gt;
Pro Git, Second Edition&lt;/h1&gt;
&lt;div id="user-content-preamble"&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;Welcome to the second edition of the Pro Git book.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can find this book online at: &lt;a href="https://git-scm.com/book" rel="nofollow"&gt;https://git-scm.com/book&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Like the first edition, the second edition of Pro Git is open source under a Creative Commons license.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;A couple of things have changed since open sourcing the first edition
For one, we’ve moved from Markdown to the amazing AsciiDoc format for the text of the book; here’s an &lt;a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/" rel="nofollow"&gt;AsciiDoc quick reference&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We’ve also moved to keeping the translations in separate repositories rather than subdirectories of the English repository
See &lt;a href="https://raw.githubusercontent.com/progit/progit2/master/README.asc/TRANSLATING.md"&gt;the translating document&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-how-to-generate-the-book"&gt;
How To Generate the Book&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;You can generate the e-book files manually with Asciidoctor
We used to be able to build .mobi files (Kindle), but cannot do so now, see #1496 for more information
If you run the following you &lt;em&gt;may&lt;/em&gt; actually get HTML, Epub and PDF output files:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;$ bundle&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/progit/progit2"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-authelia"&gt;
  &lt;/a&gt;
  7. Authelia
&lt;/h3&gt;

&lt;p&gt;Authelia is an open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/authelia"&gt;
        authelia
      &lt;/a&gt; / &lt;a href="https://github.com/authelia/authelia"&gt;
        authelia
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Single Sign-On Multi-Factor portal for web apps
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/authelia-title.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcYva3La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/authelia-title.png" width="350" title="Authelia"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buildkite.com/authelia/authelia" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b420403b2e383f0c8e0e10ccbd741c554d397b1ae305847d00883fb16a9f12d7/68747470733a2f2f696d672e736869656c64732e696f2f6275696c646b6974652f64363534336433656365333433336634366462653566643966636661663166363861366462633438656231303438626332322f6d61737465723f6c6f676f3d6275696c646b697465267374796c653d666c61742d73717561726526636f6c6f723d627269676874677265656e" alt="Build"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/authelia/authelia" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b000c73e00ec8a0512a8184638424b0201bc6a77a51c47352de32b5daf34097/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f61757468656c69612f61757468656c69613f6c6f676f3d676f267374796c653d666c61742d737175617265" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://microbadger.com/images/authelia/authelia" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5960d8d4c7a19fda066b502a5f65b5e918c2f8475d30b74c42907fef89b84d11/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f61757468656c69612f61757468656c69612f6c61746573743f6c6f676f3d646f636b6572267374796c653d666c61742d73717561726526636f6c6f723d626c756526736f72743d73656d766572" alt="Docker Tag"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/authelia/authelia/tags" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc14f7065699acc1475d4b1c7a1584962199e5c16fb49c2e06f160ec94452cf4/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f61757468656c69612f61757468656c69612f6c61746573743f6c6f676f3d646f636b6572267374796c653d666c61742d73717561726526636f6c6f723d626c756526736f72743d73656d766572" alt="Docker Size"&gt;&lt;/a&gt;
&lt;a href="https://github.com/authelia/authelia/releases"&gt;&lt;img src="https://camo.githubusercontent.com/2ab276a8c098a3f41f306a16af12aacd142c364122fb3c8a43d3aed6e9e4e625/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f61757468656c69612f61757468656c69612e7376673f6c6f676f3d676974687562267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="GitHub Release"&gt;&lt;/a&gt;
&lt;a href="https://aur.archlinux.org/packages/authelia/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3cfe58475dfa59bd249ab764782ed62afd16b0123cb431639e4c5530c8898226/68747470733a2f2f696d672e736869656c64732e696f2f6175722f76657273696f6e2f61757468656c69613f6c6f676f3d617263682d6c696e7578266c6162656c3d61757468656c6961267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="AUR source version"&gt;&lt;/a&gt;
&lt;a href="https://aur.archlinux.org/packages/authelia-bin/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e7f7ca26049c02265f632f281246486e64ed85dda4d153fc5ec2a14ad706d53b/68747470733a2f2f696d672e736869656c64732e696f2f6175722f76657273696f6e2f61757468656c69612d62696e3f6c6f676f3d617263682d6c696e7578266c6162656c3d61757468656c69612d62696e267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="AUR binary version"&gt;&lt;/a&gt;
&lt;a href="https://aur.archlinux.org/packages/authelia-git/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e2d38f6bf1c4023e7326cf6f5693fcc9d7e2b70b58c5184b4af5c8c1f1d5ea6/68747470733a2f2f696d672e736869656c64732e696f2f6175722f76657273696f6e2f61757468656c69612d6769743f6c6f676f3d617263682d6c696e7578266c6162656c3d61757468656c69612d676974267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="AUR development version"&gt;&lt;/a&gt;
&lt;a href="https://www.apache.org/licenses/LICENSE-2.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/381fe07c1670cf81eeefac188ac6938336d62ddb97ca5ba9dbe4f6a8510c36e7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f61757468656c69612f61757468656c69613f6c6f676f3d617061636865267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/authelia-sponsors" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/42d8ff95254db2b02e908c45504146ca9afb1a81df5df1e891351f5e05007baa/68747470733a2f2f696d672e736869656c64732e696f2f6f70656e636f6c6c6563746976652f616c6c2f61757468656c69612d73706f6e736f72733f6c6f676f3d4f70656e253230436f6c6c656374697665266c6162656c3d66696e616e6369616c253230636f6e7472696275746f7273267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="Sponsor"&gt;&lt;/a&gt;
&lt;a href="https://discord.authelia.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80d8707e7884d1ceb456d2eed13fbb6c4eb76eceec97ae2abd33ea8fa30ac959/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3730373834343238303431323031323630383f6c6162656c3d646973636f7264266c6f676f3d646973636f7264267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://riot.im/app/#/room/#authelia:matrix.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78a6d76edf9e51ba782d6d98266050858cc8e3c272b2fb175739b200b0f31d3e/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f61757468656c69613a6d61747269782e6f72673f6c6162656c3d6d6174726978266c6f676f3d6d6174726978267374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="Matrix"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authelia&lt;/strong&gt; is an open-source authentication and authorization server
providing 2-factor authentication and single sign-on (SSO) for your
applications via a web portal
It acts as a companion of reverse proxies like &lt;a href="https://www.nginx.com/" rel="nofollow"&gt;nginx&lt;/a&gt;, &lt;a href="https://traefik.io/" rel="nofollow"&gt;Traefik&lt;/a&gt; or &lt;a href="https://www.haproxy.org/" rel="nofollow"&gt;HAProxy&lt;/a&gt; to let them know whether queries should pass through. Unauthenticated users are
redirected to Authelia Sign-in portal instead.&lt;/p&gt;
&lt;p&gt;Documentation is available at &lt;a href="https://docs.authelia.com" rel="nofollow"&gt;https://docs.authelia.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The architecture is shown in the diagram below.&lt;/p&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/archi.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UwKPOsIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/archi.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authelia&lt;/strong&gt; can be installed as a standalone service from the &lt;a href="https://aur.archlinux.org/packages/authelia/" rel="nofollow"&gt;AUR&lt;/a&gt;, &lt;a href="https://svnweb.freebsd.org/ports/head/www/authelia/" rel="nofollow"&gt;FreeBSD Ports&lt;/a&gt;, or using a &lt;a href="https://github.com/authelia/authelia/releases/latest"&gt;Static binary&lt;/a&gt;
&lt;a href="https://docker.com/" rel="nofollow"&gt;Docker&lt;/a&gt; or &lt;a href="https://kubernetes.io/" rel="nofollow"&gt;Kubernetes&lt;/a&gt; leveraging ingress controllers and ingress configurations. Assistance to publish a &lt;a href="https://github.com/authelia/authelia/issues/573"&gt;debian package&lt;/a&gt; would be greatly appreciated.&lt;/p&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/logos/kubernetes.logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3CZB0Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/logos/kubernetes.logo.png" height="100"&gt;&lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/logos/docker.logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__1fEF6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/logos/docker.logo.png" width="100"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Here is what Authelia's portal looks like&lt;/p&gt;

&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/1FA.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---O0RbOlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/1FA.png" width="400"&gt;&lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/2FA-METHODS.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ7Eeq8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/authelia/authelia/master/./docs/images/2FA-METHODS.png" width="400"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Features summary&lt;/h2&gt;

&lt;p&gt;Here is the list of the main available features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Several kind of second factor
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.authelia.com/features/2fa/security-key" rel="nofollow"&gt;Security Key (U2F)&lt;/a&gt;&lt;/strong&gt; with &lt;a href="https://www.yubico.com/products/yubikey-hardware/yubikey4/" rel="nofollow"&gt;Yubikey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.authelia.com/features/2fa/one-time-password" rel="nofollow"&gt;Time-based One-Time password&lt;/a&gt;&lt;/strong&gt; with &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=en" rel="nofollow"&gt;Google Authenticator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.authelia.com/features/2fa/push-notifications" rel="nofollow"&gt;Mobile Push Notifications&lt;/a&gt;&lt;/strong&gt; with &lt;a href="https://duo.com/" rel="nofollow"&gt;Duo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/authelia/authelia"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#8-frontend-development-bookmarks"&gt;
  &lt;/a&gt;
  8. Frontend Development Bookmarks
&lt;/h3&gt;

&lt;p&gt;Manually curated collection of resources for frontend web developers.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dypsilon"&gt;
        dypsilon
      &lt;/a&gt; / &lt;a href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;
        frontend-dev-bookmarks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Manually curated collection of resources for frontend web developers.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Frontend Development &lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Manually curated collection of resources for frontend web developers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are viewing a browseable version, split by category in many small files. There is also a really huge file with every single resource on one page. Proceed to the &lt;a href="https://raw.githubusercontent.com/dypsilon/frontend-dev-bookmarks/master/TOTALLY-GIGANTIC-FILE.md"&gt;totally gigantic file&lt;/a&gt; if you are into this kind of thing.&lt;/p&gt;
&lt;p&gt;This is the current version, which receives ongoing updates. If you want the good old bookmarks, please use the tag v.1.0. Keep in mind, that the old version has many outdated links.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://frontend.directory/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3f604d9621787c7fdfc0612e50ac111fcb2c60cc74b2d19da2021e5d23b83a5c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66726f6e74656e642d6469726563746f72792d626c75652e7376673f7374796c653d666c61742d737175617265" alt="frontend.directory"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/dypsilon/frontend-dev-bookmarks" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/99aafb95ba7938d6842331b3a9994a24d571aa68534c0a6b419d48c8df9d5247/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f64797073696c6f6e2f66726f6e74656e642d6465762d626f6f6b6d61726b732e7376673f7374796c653d666c61742d737175617265266d61784167653d32353932303030" alt="Gitter"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/FrontendDir" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/761c2c74a8f70750dc036fbe4753d1b0bdf563c359e4e1203e37958e275498d1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f666f6c6c6f772d747769747465722d3535616365652e7376673f7374796c653d666c61742d737175617265" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Appearance&lt;/h2&gt;
&lt;p&gt;The outward or visible aspect of a website.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/dypsilon/frontend-dev-bookmarks/master/appearance/animation.md"&gt;Animation&lt;/a&gt;&lt;/strong&gt;: The process of creating motion and shape change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/dypsilon/frontend-dev-bookmarks/master/appearance/typography.md"&gt;Typography&lt;/a&gt;&lt;/strong&gt;: The style, arrangement, or appearance of typeset matter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/dypsilon/frontend-dev-bookmarks/master/appearance/visualization.md"&gt;Visualization&lt;/a&gt;&lt;/strong&gt;: Placing data in a visual context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Architecture&lt;/h2&gt;
&lt;p&gt;High level structure of the frontend code and the discipline of creating such structures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/dypsilon/frontend-dev-bookmarks/master/architecture/algorithms.md"&gt;Algorithms&lt;/a&gt;&lt;/strong&gt;: A self-contained step-by-step set of operations to be performed. Algorithms perform calculation…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-kolorist"&gt;
  &lt;/a&gt;
  9. kolorist
&lt;/h3&gt;

&lt;p&gt;A tiny utility to colorize stdin/stdout&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/marvinhagemeister"&gt;
        marvinhagemeister
      &lt;/a&gt; / &lt;a href="https://github.com/marvinhagemeister/kolorist"&gt;
        kolorist
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A tiny utility to colorize stdin/stdout
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
kolorist&lt;/h1&gt;
&lt;p&gt;Tiny library to put colors into stdin/stdout 🎉&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/marvinhagemeister/kolorist/master/screenshot.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvzYFt5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/marvinhagemeister/kolorist/master/screenshot.png" alt="Screenshot of terminal colors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install --save-dev kolorist&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;red&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;cyan&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'kolorist'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;red&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;`Error: something failed in &lt;span class="pl-s1"&gt;&lt;span class="pl-kos"&gt;${&lt;/span&gt;&lt;span class="pl-en"&gt;cyan&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'my-file.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/span&gt;.`&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also disable or enable colors globally via the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;disable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TERM=dumb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FORCE_COLOR=0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FORCE_COLOR=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of that you can disable colors right from node:&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;red&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'kolorist'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;options&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;enabled&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;false&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;red&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'foo'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// Logs a string without colors&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also strip colors from a string:&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;red&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;stripColors&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'kolorist'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;stripColors&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;red&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'foo'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// Logs 'foo'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
License&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MIT&lt;/code&gt;, see &lt;a href="https://raw.githubusercontent.com/marvinhagemeister/kolorist/master/./LICENSE"&gt;the license file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/marvinhagemeister/kolorist"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#10-autarky"&gt;
  &lt;/a&gt;
  10. Autarky
&lt;/h3&gt;

&lt;p&gt;Liberating disk space from node_modules&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pranshuchittora"&gt;
        pranshuchittora
      &lt;/a&gt; / &lt;a href="https://github.com/pranshuchittora/autarky"&gt;
        autarky
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Liberating disk space from 📁 node_modules 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/Banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20_G7dp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/Banner.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8c3ec463fc420cb9705621b2c373dae6ae29d038e3968824344ceab81b30340e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f61757461726b79"&gt;&lt;img src="https://camo.githubusercontent.com/8c3ec463fc420cb9705621b2c373dae6ae29d038e3968824344ceab81b30340e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f61757461726b79" alt="npm"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4e7e83a580768c77d17479851846beae0f91e94472b2cf8945ec7b401dffaa35/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f61757461726b793f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/4e7e83a580768c77d17479851846beae0f91e94472b2cf8945ec7b401dffaa35/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f61757461726b793f7374796c653d666c6174" alt="downloads"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/200c201d1f11ac91479ca8b0f273b55e0f14e74d4f132c8607e2bd7252340453/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f61757461726b79"&gt;&lt;img src="https://camo.githubusercontent.com/200c201d1f11ac91479ca8b0f273b55e0f14e74d4f132c8607e2bd7252340453/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f61757461726b79" alt="NPM"&gt;&lt;/a&gt;
&lt;a href="https://dependabot.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b382827738f6741ea1d0c1a5a20a85ca472dbbb7b17e6a8c20da15820b797a4c/68747470733a2f2f62616467656e2e6e65742f62616467652f446570656e6461626f742f656e61626c65642f677265656e3f69636f6e3d646570656e6461626f74" alt="Dependabot"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/pranshuchittora/autarky/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d8f0b14c66b4e751ccd31b71fc5c275b61a6e19a5107b892fab9b43f26a4bcb5/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f63613530626564363865316338663037346335662f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fe62ca0ad6c107b275f14630092785ff1a394439b0fef47dc76fe3eefdafbc6c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7072616e73687563686974746f72612f61757461726b793f7374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/fe62ca0ad6c107b275f14630092785ff1a394439b0fef47dc76fe3eefdafbc6c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7072616e73687563686974746f72612f61757461726b793f7374796c653d736f6369616c" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/Demo.gif"&gt;&lt;img width="95%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kU2jz48P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/Demo.gif"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm&lt;/span&gt;
npm i -g autarky
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;yarn&lt;/span&gt;
yarn global add autarky&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; autarky&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Why autarky&lt;/h2&gt;
&lt;p&gt;In today's world storage is comparatively costlier than compute. Majority of devs uses MacBooks and sadly MacBooks have pretty low storage (for base models). Hence filling up storage is quite often and we spend a lot of time picking stuff to be deleted.&lt;/p&gt;
&lt;h3&gt;
Motivation&lt;/h3&gt;
&lt;p&gt;It's 2019 and I got ran out of storage in my laptop after a thorough analysis I found out that the majority of the storage is occupied by &lt;code&gt;node_modules&lt;/code&gt;. As each project have a separate node_modules (duplication despite the same version).&lt;/p&gt;
&lt;p&gt;I also have a few projects which I touch once in a blue moon, hence they end up eating a lot of space. On the other hand, picking &amp;amp; removing &lt;code&gt;node_modules&lt;/code&gt; manually is a tedious process. So I thought why not automate it.&lt;/p&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/heavy.png"&gt;&lt;img width="70%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBFg-VhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pranshuchittora/autarky/master/docs/assets/heavy.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;h3&gt;
How it&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pranshuchittora/autarky"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt;  +3,729 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/appsmithorg/appsmith"&gt;Appsmith&lt;/a&gt;    +1,634 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt;  +1,365 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt;   +672 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tailwindlabs/tailwindcss"&gt;TailwindCSS&lt;/a&gt;  +629 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,847 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +4,261 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web Development for Beginners&lt;/a&gt; +3,914 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +3,735 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,653 stars&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
