<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Everything JavaScript Arrays &amp; Array Methods!</title>
      <author>Waverley Leung</author>
      <pubDate>Fri, 23 Apr 2021 20:00:27 +0000</pubDate>
      <link>https://dev.to/wlcreate/everything-javascript-arrays-array-methods-14om</link>
      <guid>https://dev.to/wlcreate/everything-javascript-arrays-array-methods-14om</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-arrays"&gt;What are arrays?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-we-create-arrays"&gt;How do we create arrays?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#methods"&gt;Methods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#basic-methods"&gt;Basic Methods&lt;/a&gt;: pop, push, shift, unshift, splice, slice&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced Methods&lt;/a&gt;: reduce, sort, concat, filter, join, map, find, forEach&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun Methods&lt;/a&gt;: toString, includes, fill, indexOf, findIndex&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One data structure that many other complex ones build off of is the humble array. Therefore, it’s important to have a strong foundational understanding and knowledge of arrays before diving into other data structures. In this post we will cover what arrays are, how to create them, and 20 methods ranging from ones you will commonly use, some that are a bit more complex (mainly because of callback functions), and some fun ones to know as well. &lt;/p&gt;

&lt;p&gt;Before you go, if you’re interested in learning more data structures and want another resource for algorithms, check out the series Megan Lo and I are collaborating on! The series will focus on data structures and algorithms, and our first post covers the crossover of Strings and Arrays. If you need a refresher on Strings, check out her post &lt;a href="https://dev.to/mehmehmehlol/when-to-use-these-string-methods-in-javascript-3m4h"&gt;here&lt;/a&gt;, otherwise visit our collab and stay tuned for more!&lt;/p&gt;

&lt;p&gt;Without further ado, let’s dive into the wonderful world of arrays!&lt;/p&gt;

&lt;p&gt;P.S. Since this is a very long post, feel free to skip around as you like 😉&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-arrays"&gt;
  &lt;/a&gt;
  What are arrays? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;According to MDN, JavaScript arrays are “list-like objects whose prototype has methods to perform traversal and mutation operations”. In other words, arrays organize their items sequentially and have built-in methods that allow you to easily lookup and add/remove information based on its position. Array positions, also known as indexes, start at zero.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact&lt;/em&gt;: Unlike non-scripting languages like Java, C, or C++, JavaScript (as a scripted language) does not have static arrays where you need to specify in advance how many elements you plan to store because they have a fixed size. Instead, JavaScript arrays are dynamic, meaning the size of it will grow or shrink as needed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun Fact&lt;/em&gt;: Arrays are a special type of object! That said, the array’s object properties are kept separate from its elements and the methods you would use on the array’s elements cannot be used on its object properties. To set or access the array’s object property collection, you need to use bracket or dot notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// “object”&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// “object”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays have fast lookups of O(1) time because you can simply retrieve an element based on its given index, no matter how large the size of the array is.&lt;/li&gt;
&lt;li&gt;It is time expensive O(n)  to insert or delete from an array because it requires the other elements to “scoot” over to make room or fill the gap.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-do-we-create-arrays"&gt;
  &lt;/a&gt;
  How do we create arrays? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Essentially there are two ways to create an array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the array literal
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;literalEmptyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;literalFilledArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;With the new constructor
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;constructorEmptyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;constructorFilledArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That said, a third way to create an array is the &lt;code&gt;of&lt;/code&gt; method! Essentially the &lt;code&gt;of&lt;/code&gt; method creates a new Array instance from the passed in number of arguments, regardless of number or type of the arguments. The difference between the &lt;code&gt;of&lt;/code&gt; method and &lt;code&gt;Array&lt;/code&gt; constructor is what they do with the arguments; &lt;code&gt;Array.of(7)&lt;/code&gt; creates an array with a single element, 7, whereas &lt;code&gt;Array(7)&lt;/code&gt; creates an empty array with a length property of 7 (Note: this implies an array of 7 empty slots, not slots with actual undefined values)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;         &lt;span class="c1"&gt;// [1]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before going into some of the numerous (I roughly estimate more than 35) methods that arrays have, let’s first review what it means for something to be destructive vs non-destructive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Destructive&lt;/em&gt;: The action mutates the original array, meaning that once you perform the action on the original array, you will not be able to have the original’s information again. Rather, the original has become updated.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Non-destructive&lt;/em&gt;: The action does not mutate the original array, meaning that once you perform the action on the original array, you will have the original’s information. Therefore, you will be able to have both the original and updated information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding and being aware of when a method is destructive vs non-destructive is important when you will ultimately need to decide which method to use. Now, let’s take a look at some &lt;a href="#basic-methods"&gt;basic&lt;/a&gt;, &lt;a href="#advanced-methods"&gt;advanced&lt;/a&gt;, and &lt;a href="#fun-methods"&gt;fun&lt;/a&gt; methods!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-methods"&gt;
  &lt;/a&gt;
  Basic Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The methods we will be covering are: &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt;, and &lt;code&gt;slice&lt;/code&gt;. To demonstrate each method, the base array &lt;a&gt;&lt;/a&gt; we will be referring to is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;iceCream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;vanilla&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;chocolate&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;strawberry&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="nx"&gt;tea&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 4 most common use cases for methods on an array is to destructively add or remove an element from the beginning or end of it. &lt;/p&gt;

&lt;p&gt;In case you can't see the image below, here's a summary of the methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;push&lt;/code&gt;&lt;/strong&gt;: Add an item to the end of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/strong&gt;: Remove an item from the end of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/strong&gt;: Add an item to the beginning of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/strong&gt;: Remove an item from the beginning of an Array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku7bD4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g841pk0jc1v8ang6oed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku7bD4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g841pk0jc1v8ang6oed.png" alt="basic-destructive-methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other common cases are copying or removing a section of the array. While they have similar names, these methods are &lt;code&gt;splice&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt; and it's important to remember whether or not you want the action to be destructive or non-destructive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-splice-endraw-remove-an-item-by-index-position-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;splice&lt;/code&gt;: Remove an item by index position (destructive)
&lt;/h4&gt;

&lt;p&gt;When using &lt;code&gt;splice&lt;/code&gt;, you must pass in what index you want to start removing items from (inclusive). You can optionally include a second argument index to say where you want to stop removing items from (inclusive), however if you don’t the method will automatically remove to the end.  Additionally, starting from the third argument, any that you include will be elements added to the array, beginning from start (first argument). If you do not specify any elements, &lt;code&gt;splice&lt;/code&gt; will only remove elements from the array. That said, if no arguments at all are passed in, the return value will be an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget the &lt;a href="#original-basic-array"&gt;original array&lt;/a&gt; for the following example!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKUd5FpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay1g79rufdmej02uunhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKUd5FpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay1g79rufdmej02uunhu.png" alt="splice-method"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-slice-endraw-copy-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;slice&lt;/code&gt;: Copy an Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;If you simply want to make a copy of an array you do not need to pass in any arguments. That said, you do have the option to include the starting index (inclusive) and ending index (non-inclusive) to copy from. This method is often used over &lt;code&gt;splice&lt;/code&gt; because it avoids the “side-effect” of mutating the original array.&lt;/p&gt;

&lt;p&gt;If you do not pass in any arguments, by default the entire original array will be copied. If either index is negative, it extracts starting from the end or last element (&lt;code&gt;Array.length&lt;/code&gt; - index). On the other hand, if the arguments you pass in are larger than the actual array (for example, an array with 5 elements but passing in arguments to start at 10 and end at 50) the return value will be an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget the &lt;a href="#original-basic-array"&gt;original array&lt;/a&gt; for the following example!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9PWkyw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxyucp8qh6vlj50ovjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9PWkyw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxyucp8qh6vlj50ovjg.png" alt="slice-method"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#advanced-methods"&gt;
  &lt;/a&gt;
  Advanced Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The methods we will be covering in this section are: &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;flat&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;forEach&lt;/code&gt;. Before continuing on, it’s important to know that many of the methods have the same parameters; in this case &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;forEach&lt;/code&gt;. Instead of repeating it each time, I’ll leave the explanation of the parameters up here for you to refer to! &lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three arguments you can pass into the callback function, two of them being optional. The one argument you must pass in is the current value, which represents the current element being processed. The other two arguments are the index of the current element and array the method was called upon. Besides the callback function, you can also use the &lt;code&gt;thisArg&lt;/code&gt; parameter, which is the value to use as &lt;code&gt;this&lt;/code&gt; when executing the callback. However, if the callback uses an arrow function the &lt;code&gt;thisArg&lt;/code&gt; can be omitted because all arrow functions lexically bind the &lt;code&gt;this&lt;/code&gt; value.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-reduce-endraw-reduce-to-a-single-value-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;reduce&lt;/code&gt;: Reduce to a single value (destructive)
&lt;/h4&gt;

&lt;p&gt;Essentially, the reduce method takes in a callback function that executes the callback on each element of the array, resulting in single output value. The callback (reducer) function you provide must at the very least include two parameters: the accumulator and current value. The accumulator accumulates callback's return values; in other words, it is the accumulated value previously returned in the last invocation of the callback On the hand, the current value is the value currently being processed in the array.&lt;/p&gt;

&lt;p&gt;Optionally, the reduce method can take in a second argument that will represent the initialValue. This value is what the accumulator will start as if it is passed in. Additionally, the callback can take in other parameters for the index and array, which represent the index of the current element being processed and the array the reduce method was called on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFiPDJIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb03s75386jtjqpiknmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFiPDJIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb03s75386jtjqpiknmz.png" alt="reduce-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-sort-endraw-sorts-the-elements-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;sort&lt;/code&gt;: Sorts the elements (destructive)
&lt;/h4&gt;

&lt;p&gt;When calling this method on the array it will sort it in place and return the sorted version. By default the elements will be sorted in &lt;strong&gt;ascending&lt;/strong&gt; order by converting the elements to strings and then comparing their Unicode code points. It’s important to know how they are sorted because in a numeric sort, 9 comes before 80, but because numbers are converted to strings, "80" comes before "9" in the Unicode order. Something important to note, all undefined elements are sorted to the end of the array.&lt;/p&gt;

&lt;p&gt;Optionally, and if you want to be more specific on how to sort (i.e. for integers), you can pass in a callback (compare) function that compares two arguments; the first and second element, often referred to as &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, to each other. Under the hood, if the callback function returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;less than 0, it means that the current order is correct; the first element will remain before the second element (&lt;strong&gt;a&lt;/strong&gt; will still come before &lt;strong&gt;b&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;0, it means that the elements are equal to each other; the order will remain the same with respect to each other, but sorted with respect to all different elements.&lt;/li&gt;
&lt;li&gt;greater than 0, it means that the current order is incorrect; the second element will be before the first element (&lt;strong&gt;b&lt;/strong&gt; before &lt;strong&gt;a&lt;/strong&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8u6CsOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sabheybbo9vb35vrd87x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8u6CsOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sabheybbo9vb35vrd87x.png" alt="sort-method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-concat-endraw-merge-arrays-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;concat&lt;/code&gt;: Merge arrays (non-destructive)
&lt;/h4&gt;

&lt;p&gt;This method is used to merge two or more arrays, returning a new array without mutating the originals. To be more specific, the new array has all of the elements of the array it is called on, followed in order by, for each argument, the elements of the argument or the argument itself. However, if an argument is a nested array it will not take the nested array out, rather it will only remove it from the array it is in (one-level deep)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun Fact&lt;/em&gt;: &lt;code&gt;concat&lt;/code&gt; copies the object references of the original into the new array so that both the original and new array refer to the same object! Therefore, if a referenced object is modified, the changes are visible to both the new and original arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWVrpFiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9oltljr4kpp1vt43orz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWVrpFiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9oltljr4kpp1vt43orz.png" alt="concat-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-flat-endraw-creates-a-new-array-with-the-subarray-elements-concatenated-into-it-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;flat&lt;/code&gt;: Creates a new array with the sub-array elements concatenated into it (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Building off of the &lt;code&gt;concat&lt;/code&gt; method, the &lt;code&gt;flat&lt;/code&gt; method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. For a single level array, this accomplishes that same thing as the &lt;code&gt;reduce&lt;/code&gt; method calling upon the &lt;code&gt;concat&lt;/code&gt; method on its accumulator. On the other hand, to enable deep level flatten without the flat method, you can use recursion with reduce and concat.&lt;/p&gt;

&lt;p&gt;While not required, you can optionally pass in an argument that specifies how deep a nested array structure should be flattened. By default this argument is 1, for a single level array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t2wJrI0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y5i0ymullgri0co4x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2wJrI0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y5i0ymullgri0co4x1.png" alt="flat-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-filter-endraw-returns-all-the-elements-that-pass-the-test-function-provided-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;filter&lt;/code&gt;: Returns all the elements that pass the test function provided (non-destructive)
&lt;/h4&gt;

&lt;p&gt;This method creates a new array with all the elements that pass a callback (test) function. As it tests each element of the array it is called on, it returns a value that coerces to true to keep the element, or to false otherwise. When the value is false, it essentially skips over the element and does not include it in the array. If nothing passes the test, an empty array is returned. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rcO5HWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uiz06i9rzmf48fwodv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rcO5HWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uiz06i9rzmf48fwodv.png" alt="filter-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-join-endraw-join-all-the-elements-from-an-array-to-a-string-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;join&lt;/code&gt;: Join all the elements from an array to a string (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;join&lt;/code&gt; creates and returns a string by concatenating, or joining, all of the elements of the array it was called on. By default the elements are separated by commas, however you can specify what you want to join/separate the elements by. On the other hand, if there is only one element in the array, the single item will be returned as a string without separators, and if there are no elements, an empty string is returned.&lt;/p&gt;

&lt;p&gt;As mentioned, including an argument for the separator parameter is optional if you want the elements to be joined with a comma. Passing in an empty string as the argument will result in the elements joined without any characters/separators. Otherwise, the parameter is what you want to separate each pair of adjacent elements of the array for the returned string. If necessary, the separator is converted to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h9QhYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mwzmt1tr112fdvpr46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h9QhYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mwzmt1tr112fdvpr46.png" alt="join-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-map-endraw-creates-a-new-array-with-the-results-of-a-callback-function-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;map&lt;/code&gt;: Creates a new array with the results of a callback function (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; takes in a callback function that is called once for every element of the array it is called on. Each time the callback is executed, it returns the value into the new array, which is returned at the end. That said, if you do not use the returned (new) array and/or do not return a value from the callback, using the &lt;code&gt;map&lt;/code&gt; method is considered anti-pattern. Instead you should use the &lt;code&gt;forEach&lt;/code&gt; method or a for loop. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oD4u56o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmnuxv2owhi63zj34aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oD4u56o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmnuxv2owhi63zj34aw.png" alt="map-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-find-endraw-return-the-value-of-the-first-element-that-satisfies-the-provided-function-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;find&lt;/code&gt;: Return the value of the first element that satisfies the provided function (non-destructive)
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method only returns the first value of the element that satisfies the callback (test) function. If no element passes the test, the &lt;code&gt;find&lt;/code&gt; method will return undefined. That said, if you want to return the index of the element instead of its value, you can use the &lt;code&gt;findIndex&lt;/code&gt; method instead. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qptT1Fr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37yuxx94yfgt36eqtt04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qptT1Fr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37yuxx94yfgt36eqtt04.png" alt="find-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-foreach-endraw-loop-over-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;forEach&lt;/code&gt;: Loop over an Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Similar to a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;forEach&lt;/code&gt; executes a callback function once for each element in the array. While the &lt;code&gt;forEach&lt;/code&gt; method will not mutate the array it was called on, it is possible for the callback function to mutate it. That said, the &lt;code&gt;forEach&lt;/code&gt; method expects a synchronous function, always returns undefined, and is not chainable. Therefore, the typical use case is to execute side effects at the end of a chain. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLxop8x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl9q1aysk5miay5cfa58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLxop8x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl9q1aysk5miay5cfa58.png" alt="forEach-method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fun-methods"&gt;
  &lt;/a&gt;
  Fun Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now, time for some “fun” methods! The methods we will cover here are: &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, and &lt;code&gt;findIndex&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-tostring-endraw-returns-a-string-representing-the-array-and-its-elements-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;toString&lt;/code&gt;: Returns a string representing the array and its elements (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Like its name, the &lt;code&gt;toString&lt;/code&gt; method turns the array’s elements it was called on to a string. To be more specific, this method joins the array and returns one string containing each array element separated by commas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact&lt;/em&gt;: JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYwWM5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni7jbhep0wlnzk4oi9id.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYwWM5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni7jbhep0wlnzk4oi9id.png" alt="toString-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-includes-endraw-returns-a-boolean-if-a-value-exists-in-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;includes&lt;/code&gt;: Returns a boolean if a value exists in an array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;includes&lt;/code&gt; determines whether an array includes a certain value among its entries, returning true or false as appropriate. It does this by checking each element for equality with the value rather than using a testing callback function. That said, if you need to find if any element satisfies a provided testing callback function, you can use the some method.&lt;/p&gt;

&lt;p&gt;The argument you must pass in is the value you want the method to search for; keep in mind when comparing strings and characters, &lt;code&gt;includes&lt;/code&gt; is case-sensitive. The optional second argument is the index to start searching for the value and by default is zero. That said, if the index passed in is greater than or equal to the length of the array, false is returned and the array will not be searched. On the other hand, if the index is negative the method uses the absolute value of it as the number of elements from the end of the array at which to start the search&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VO03s7zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6js5a1t1r7jqndvav2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VO03s7zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6js5a1t1r7jqndvav2m.png" alt="includes-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-fill-endraw-fills-all-the-elements-of-an-array-with-a-static-value-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;fill&lt;/code&gt;: Fills all the elements of an array with a static value (destructive)
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; method changes all elements in an array to a static value, from a start index to an end index. It then returns the modified array with the filled values.&lt;/p&gt;

&lt;p&gt;There are three parameters however only the first one is required. The first argument you must pass in is the value to fill the array with. It’s important to know that all of the elements in the array will be this exact value. The other two optional parameters are for the start index, default is zero, and the end index, default is array.length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;staticValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzV5wdtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlvxejp8xxif5jndal1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzV5wdtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlvxejp8xxif5jndal1c.png" alt="fill-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#indexof-amp-findindex-find-the-index-of-an-item-in-the-array-nondestructive"&gt;
  &lt;/a&gt;
  indexOf &amp;amp; findIndex: Find the index of an item in the Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Similar to each other in that both return the first index that satisfies a condition. However, while &lt;code&gt;findIndex&lt;/code&gt; is based on the element that satisfies a testing callback function, &lt;code&gt;indexOf&lt;/code&gt; checks each element for equality with the value. Additionally, -1 is returned by &lt;code&gt;indexOf&lt;/code&gt; if the element you are searching for is not present, whereas -1 is returned by &lt;code&gt;findIndex&lt;/code&gt; if nothing satisfies the callback. That said, if you need to find if any element satisfies the provided testing function, you can use the some method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findIndex&lt;/code&gt; has the same parameters detailed in the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section. On the other hand, &lt;code&gt;indexOf&lt;/code&gt; takes in an argument for the element to search for and optionally the index to start searching for. If you include the second argument of the index to start searching and the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUkpogad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfrprhjctbudkz0l38ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUkpogad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfrprhjctbudkz0l38ut.png" alt="indexOf-findIndex-methods"&gt;&lt;/a&gt; &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Congratulations! I declare you “master of JavaScript arrays and (most) array methods”! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12Lt1KWHowKtKo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12Lt1KWHowKtKo/giphy.gif" alt="diploma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But seriously though, this was a lot of information and I hope you’ll be able to refer to it in the future! Here are some key takeaways, as well as a reminder of what methods we covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays organize their items sequentially and have built-in methods that allow you to easily lookup and add/remove information based on its position.&lt;/li&gt;
&lt;li&gt;JavaScript arrays are special type of object and unlike non-scripting languages, are dynamic&lt;/li&gt;
&lt;li&gt;To create arrays you can use the array literal, new constructor, or of method&lt;/li&gt;
&lt;li&gt;Additionally, you can copy, concatenate arrays, and convert a string into an array by using the spread operator &lt;/li&gt;
&lt;li&gt;
&lt;a href="#basic-methods"&gt;Basic methods&lt;/a&gt; about adding, removing, or copying an array: &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced methods&lt;/a&gt; to merge: &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;flat&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced methods&lt;/a&gt; do something based on a callback: &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun methods&lt;/a&gt; that have to do with the value or index: &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;findIndex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun methods&lt;/a&gt; to know: &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;All array methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com"&gt;Interview Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Hosting a Website or online Resume on GitHub (Free!)</title>
      <author>YusufAdel</author>
      <pubDate>Fri, 23 Apr 2021 19:39:39 +0000</pubDate>
      <link>https://dev.to/yusufadel/hosting-a-website-or-online-resume-on-github-free-p4n</link>
      <guid>https://dev.to/yusufadel/hosting-a-website-or-online-resume-on-github-free-p4n</guid>
      <description>&lt;p&gt;GitHub is not only a great place to store and share your code with others&lt;br&gt;
but they also offer free web hosting of your HTML, CSS, and JavaScript projects!&lt;br&gt;
want something like &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CrWeFi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gm0uaczdkcnuevojmsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CrWeFi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gm0uaczdkcnuevojmsk.png" alt="yusufadell.github.io"&gt;&lt;/a&gt; &lt;a href="https://yusufadell.github.io"&gt;https://yusufadell.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;follow these 8 easy steps&lt;/strong&gt;&lt;br&gt;
Firstly you should &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1create-a-github-account-on-githubcom"&gt;
  &lt;/a&gt;
  1-Create a GitHub account on github.com.
&lt;/h4&gt;

&lt;p&gt;after that you have 2 choices.&lt;br&gt;
create a repository from the website then chose &lt;strong&gt;setup on desktop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;or you can &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2download-desktop-version"&gt;
  &lt;/a&gt;
  2-download  desktop version:
&lt;/h4&gt;

&lt;p&gt;windows and mac &amp;gt;&amp;gt; &lt;a href="https://desktop.github.com/"&gt;this website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for &lt;a href="https://gist.github.com/yusufadell/807827670087c04f2cebe36a1b835b42"&gt;ubuntu-linux&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3on-mac-after-you-login-click-advanced-and-make-sure-that-your-name-and-email-are-correct-then-click-install-command-line-tools-just-in-case-you-want-to-start-using-the-command-line-later-in-life"&gt;
  &lt;/a&gt;
  3-(On Mac): After you login, click advanced and make sure that your name and email are correct. Then, click "Install Command Line Tools", just in case you want to start using the command line later in life.
&lt;/h4&gt;

&lt;p&gt;4-Create a new repository in your GitHub application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#name-it-yourusernamegithubio"&gt;
  &lt;/a&gt;
  Name it your-username.github.io
&lt;/h4&gt;

&lt;p&gt;The name is very important.&lt;br&gt;
Make sure the "Push to GitHub?" box is checked.&lt;/p&gt;

&lt;p&gt;5-Move your website's files into the folder that GitHub just created when you made the repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important"&gt;
  &lt;/a&gt;
  IMPORTANT:
&lt;/h3&gt;

&lt;p&gt;Your homepage HTML file must be called "index.html", and it must exist in the top-level directory.&lt;/p&gt;

&lt;p&gt;6-Back in the GitHub application, you should see your files in the left column. Make sure they are all checked. If so, enter a message in the text box called "commit summary", something like "initial commit." Then, click the commit button.&lt;/p&gt;

&lt;p&gt;7-Click the "Publish repo" button in the top right corner.&lt;/p&gt;

&lt;p&gt;8-Give it about 10 minutes, then check your-&lt;br&gt;
username.github.io. Your website should be there!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-in-using-a-custom-domain-name"&gt;
  &lt;/a&gt;
  Interesting in Using a custom Domain name
&lt;/h2&gt;

&lt;p&gt;consider reading &lt;a href="https://www.dev.to/yusufadel"&gt;this post&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Lists vs Tuples in Python. </title>
      <author>Ifihan Olusheye</author>
      <pubDate>Fri, 23 Apr 2021 19:23:33 +0000</pubDate>
      <link>https://dev.to/ifihan/lists-vs-tuples-in-python-4cg1</link>
      <guid>https://dev.to/ifihan/lists-vs-tuples-in-python-4cg1</guid>
      <description>&lt;p&gt;Python has support for data structures which enables you to store and access data in your piece of code. &lt;/p&gt;

&lt;p&gt;There are several data structures in Python such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List.&lt;/li&gt;
&lt;li&gt;Tuple.&lt;/li&gt;
&lt;li&gt;Set.&lt;/li&gt;
&lt;li&gt;Dictionary. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we would be looking at the list and tuple. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a List?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A list is a data structure that consists of an ordered sequence of mutable elements that can be modified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a Tuple?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A tuple is a list of ordered and immutable properties.&lt;/p&gt;

&lt;p&gt;Now that we know what they mean, what are the differences between these two data structures in Python?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-definition"&gt;
  &lt;/a&gt;
  1. Definition.
&lt;/h4&gt;

&lt;p&gt;Lists are defined by having values between square brackets [ ], while Tuples are defined by having values between parentheses ().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;l1 = [1, "string", True]
print(l1)
&amp;gt;&amp;gt;&amp;gt; [1, "string", True]   # for a list 

t1 = (25, "Python", False)
print(t1)
&amp;gt;&amp;gt;&amp;gt; (25, "Python", False)   # for a tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-mutability"&gt;
  &lt;/a&gt;
  2. Mutability.
&lt;/h4&gt;

&lt;p&gt;From the definitions above, we see that Lists are mutable data structures (can be modified) while Tuples are immutable data structures (cannot be modified). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-functions-and-methods"&gt;
  &lt;/a&gt;
  3. Functions and Methods.
&lt;/h4&gt;

&lt;p&gt;List and Tuples share some Python functions such as &lt;code&gt;len()&lt;/code&gt;, &lt;code&gt;max()&lt;/code&gt;, &lt;code&gt;min()&lt;/code&gt;, &lt;code&gt;sum()&lt;/code&gt;, &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;sorted()&lt;/code&gt;. They  also share the &lt;code&gt;index()&lt;/code&gt; and &lt;code&gt;count()&lt;/code&gt; methods. This is because that they are data structures; they have a shared general function. But as two different data structures, they will have specific functions and methods to suit their use case. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-errors"&gt;
  &lt;/a&gt;
  4. Errors.
&lt;/h4&gt;

&lt;p&gt;In Lists, unexpected changes and errors are more likely to occur. This is because it can be changed at anytime. But in Tuples, it is hard to take place as it is immutable.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-memory"&gt;
  &lt;/a&gt;
  5. Memory.
&lt;/h4&gt;

&lt;p&gt;Lists consume more memory than tuples. Because of this, Tuples are faster.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-available-operations"&gt;
  &lt;/a&gt;
  6. Available Operations.
&lt;/h4&gt;

&lt;p&gt;From the first example, if the List and Tuple are passed to the function dir() i.e dir (l1) and dir (t1), all inbuilt functions associated with List and Tuple can be obtained. The results would show and it can be deduced that Lists have more functions or operations than Tuples.&lt;/p&gt;

&lt;p&gt;Now that we know the differences between Tuples and Lists in Python, it shouldn’t be a very tough choice between the two. The major difference is that a List is mutable, but a Tuple isn’t. So, we use a List when we want to contain similar items, but use a Tuple when we know what information goes into it.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Basics of Kotlin- Part 2</title>
      <author>Chetan</author>
      <pubDate>Fri, 23 Apr 2021 18:31:28 +0000</pubDate>
      <link>https://dev.to/csj5483/basics-of-kotlin-part-2-51o3</link>
      <guid>https://dev.to/csj5483/basics-of-kotlin-part-2-51o3</guid>
      <description>&lt;p&gt;In the last article, we learnt about some basic concepts of Kotlin like what is Kotlin, features of Kotlin, how to declare variables and data types in Kotlin. Before reading this article make sure you had read the last article &lt;a href="https://dev.to/csj5483/basics-of-kotlin-part-1-jh"&gt;Basics of Kotlin- Part 1&lt;/a&gt;. Let's learn more about Kotlin.&lt;/p&gt;

&lt;h3&gt;Kotlin Type Conversion:&lt;/h3&gt;

&lt;p&gt;Type Conversion is a procedure of converting one type of data variable into another data type. It is also known as Type Casting. Unlike Java, Kotlin does not support the implicit conversion of a smaller data type into a larger data type. It means we can not assign Int into Long or Double.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;In Java:&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a=10;
long b=a; //no error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;In Kotlin:&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a=10;
var b:Long=a //compiler error Type mismatch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we can do the explicit conversion with the help of predefined helper functions. The list of helper functions used for numeric conversion in Kotlin is given below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toInt()&lt;/li&gt;
&lt;li&gt;toByte()&lt;/li&gt;
&lt;li&gt;toShort()&lt;/li&gt;
&lt;li&gt;toChar()&lt;/li&gt;
&lt;li&gt;toLong()&lt;/li&gt;
&lt;li&gt;toFloat()&lt;/li&gt;
&lt;li&gt;toDouble()&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For exapmle:
var a=10;
var b:Long=a.toLong() //compiles successfully no error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Operators:&lt;/h3&gt;

&lt;p&gt;Operators are the special characters or symbols which performs the operation on operand(value or variable). There is various kind of operators in Kotlin:&lt;/p&gt;

&lt;h4&gt;Arithmetic Operators:&lt;/h4&gt;

&lt;p&gt;Arithmetic operators are used to perform basic mathematical operations such as addition (+), subtraction (-), multiplication (*), division (/) and modulo(%)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbIC6ztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljb7lj8rmqfo87w69nhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbIC6ztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljb7lj8rmqfo87w69nhl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example:
var a=11
var b=5
print(a+b) // Output : 16
print(a-b) // Output : 6
print(a*b) // Output : 55
print(a/b) // Output : 2
print(a%b) // Output : 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Relation Operators:&lt;/h4&gt;

&lt;p&gt;Relation Operator is used to compare two values, two variables or two numbers. It always gives output as true or false.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6DLMFyCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sagaqo96zxzxq7lhhxkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6DLMFyCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sagaqo96zxzxq7lhhxkc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For example:
 var a=11
 var b=5
 print(a&amp;lt;b) //Output : false
 print(a&amp;gt;b) //Output : true
 print(a&amp;lt;=b) //Output : false
 print(a&amp;gt;=b) //Output : true
 print(a==b) //Output : false
 print(a!=b) //Output : true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Assignment Operators:&lt;/h4&gt;

&lt;p&gt;Assignment Operators are used to assigning the arithmetic operated values. The assignment of value takes from right to left.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tW6lv62---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rf30o41852qjqxlizyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tW6lv62---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rf30o41852qjqxlizyj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For example:
var x = 10
var y = 2
var x + = y // Output : 12
Var y - = x // Output : 8
Var x * = y // Output : 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Unary Operators:&lt;/h4&gt;

&lt;p&gt;Unary operators are used with only a single operand. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7X3QsN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8kjmynun11bzt3tdwjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7X3QsN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8kjmynun11bzt3tdwjs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In pre increment/decrement the value will be updated before assigning to the variable and in post increment/decrement the value will be updated after assigning to the variable&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a=10
print(a++) //Output : 10
print(a) //Output : 11
print(++a) //Output : 12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Logical Operators:&lt;/h4&gt;

&lt;p&gt;Logical Operators are used to check conditions between operands.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTw3lbdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xszlthz9dlg9y2lwzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTw3lbdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xszlthz9dlg9y2lwzl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For example
var a=10
var b=5
var c=16
print((a&amp;gt;b)&amp;amp;&amp;amp;(a&amp;gt;c)) //Outout : false
print((a&amp;gt;b)||(a&amp;gt;c)) //Output : true
var flag=true
print(!flag) //Output : false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Input in Kotlin:&lt;/h4&gt;

&lt;p&gt;Kotlin uses the standard library function &lt;b&gt;readLine()&lt;/b&gt; which read the line of string input from the standard input stream.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name=readLine() //For string input
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want the input of other data types, then we can use Scanner object. For that, we need to import Scanner class from Java standard library using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to create Scannerobject from this class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val scannerObj= Scanner(System.`in`)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use this scannerObj for taking the input from the user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name=scannerObj.next() // For String input
var age = scannerObj.nextInt() // For Integer input
var charInput=scannerObj.next().single() //For char input
var doubleInput=scannerObj.nextDouble() //For double input
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;Comments in Kotlin:&lt;/h4&gt;

&lt;p&gt;Comments are used for making the source code easier for humans to understand. They provide explanatory information about the source code. Comments are ignored by the compiler so they will not execute. Kotlin has two types of comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single Line: Single line comment is used for commenting single line of the statement.&lt;/li&gt;
&lt;li&gt;Multi-line: Multi-line comment is used for commenting multiple lines of the statement.&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//This is single line comment
/* This is
   multiline
   comment */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for this article. We will continue in the next article.&lt;br&gt;
Happy Learning! &lt;/p&gt;

</description>
      <category>android</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to use WebStorm on the server</title>
      <author>Nikita Kozlov</author>
      <pubDate>Fri, 23 Apr 2021 18:10:42 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/how-to-use-webstorm-on-the-server-5e1n</link>
      <guid>https://dev.to/kozlovzxc/how-to-use-webstorm-on-the-server-5e1n</guid>
      <description>&lt;p&gt;TLDR: Running WebStorm via Projector requires a noticeable amount of resources, 1CPU, 2Gb RAM won't be enough 🤷‍♂️&lt;/p&gt;

&lt;p&gt;Recently I've stumbled upon the new Jetbrains technology called &lt;a href="https://blog.jetbrains.com/blog/2021/03/11/projector-is-out/"&gt;Projector&lt;/a&gt;, tried it on the local virtual machine. It worked very nice, so I've decided to give it another try on my &lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; machine. &lt;/p&gt;

&lt;p&gt;Make some tea and get cookies, we are diving in 🤿&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;✅ DigitalOcean machine.&lt;br&gt;
✅ Domain connected to DigitalOcean.&lt;br&gt;
✅ Some free time 🤷&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;My DigitalOcean machine is super basic, it is just 1CPU/2GB RAM/10$ per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny52xcTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/705u82hkzrhwomq7jmh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny52xcTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/705u82hkzrhwomq7jmh9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I'm running default ubuntu 20.04 LTS, which, again, should be the most popular choice, so I won't stop here for long. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#projector-setup"&gt;
  &lt;/a&gt;
  Projector setup
&lt;/h2&gt;

&lt;p&gt;In order to run the projector, we need to install &lt;a href="https://github.com/JetBrains/projector-installer"&gt;projector-server&lt;/a&gt; on our DO server and &lt;a href="https://github.com/JetBrains/projector-client/releases"&gt;client&lt;/a&gt; on your own computer.&lt;/p&gt;

&lt;p&gt;First, we need to install all dependencies (the most recent docs are &lt;a href="https://github.com/JetBrains/projector-installer"&gt;here&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install python3 python3-pip -y
python3 -m pip install -U pip 
sudo apt install less libxext6 libxrender1 libxtst6 libfreetype6 libxi6 -y  
pip3 install projector-installer --user
# you may need to add this line to .bashrc or to .zshrc
source ~/.profile 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can install the needed version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Just select WebStorm, all options are straightforward
projector install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❗️It will automatically run it after the install steps, so I would recommend immediately turn it off because it will be exposed without any password protection right away❗️&lt;/p&gt;

&lt;p&gt;There are some "secure" steps described in the official FAQ, but they turned out to be misguiding and hard to follow for me 🤷‍♂️ We will choose a bit different direction here.&lt;/p&gt;

&lt;p&gt;To make the projector run in a password-protected mode we need to manually configure it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;projector config edit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1KUFgm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d59uahx0a1b1qy2fofks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1KUFgm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d59uahx0a1b1qy2fofks.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the most important questions.&lt;br&gt;
&lt;strong&gt;Use secure connection (this option requires installing a projector's certificate to browser)?&lt;/strong&gt; - you need to select &lt;strong&gt;No&lt;/strong&gt; here, we will configure it later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Would you like to set password for connection? [y/N]&lt;/strong&gt; - you must select &lt;strong&gt;Yes&lt;/strong&gt; here. You don't want your editor to be exposed to the world, do you?&lt;/p&gt;

&lt;p&gt;So right now we can try to run it locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;projector run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see something like this, it means your projector is working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wRQuKgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3c46vmyv1abqpg0dkpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wRQuKgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3c46vmyv1abqpg0dkpd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's configure encryption 🔐&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  NGINX
&lt;/h2&gt;

&lt;p&gt;We will be using &lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt; and &lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt; to handle all encryption.&lt;/p&gt;

&lt;p&gt;Long story short, here are the Nginx config which we need to put to &lt;code&gt;/etc/nginx/sites-enabled/projector.example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
  projector.example.com
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    listen 80;
    listen [::]:80;

    server_name projector.example.com;

    location / {
      proxy_pass http://localhost:9999;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Now we just need to reload Nginx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#certbot"&gt;
  &lt;/a&gt;
  Certbot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://certbot.eff.org/"&gt;Certbot&lt;/a&gt; is a CLI for &lt;a href="https://letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt;, which allows us to use SSL(HTTPS) for free, big thanks to them 🙏&lt;/p&gt;

&lt;p&gt;The installation process is SUPER simple, so I won't even list it here. You can just follow &lt;a href="https://certbot.eff.org/instructions"&gt;these instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, your /etc/nginx/sites-enabled/projector.example.com should look like this:&lt;/p&gt;

&lt;p&gt;
  projector.example.com
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

    server_name projector.example.com;

    location / {
      proxy_pass http://localhost:9999;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/projector.example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/projector.example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    if ($host = projector.example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    listen [::]:80;

    server_name projector.example.com;
    return 404; # managed by Certbot


}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-blow"&gt;
  &lt;/a&gt;
  Final blow
&lt;/h2&gt;

&lt;p&gt;✅ The projector is installed.&lt;br&gt;
✅ NGINX &amp;amp; Certbot are installed and configured.&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;We are good to go, let's run it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;projector run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your password on the console and you will be able to access the projector even via your browser at &lt;code&gt;https://projector.example.com/?token=$TOKEN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsxkqHPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cif2vgbymzipxb6rz8ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsxkqHPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cif2vgbymzipxb6rz8ka.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can install the &lt;a href="https://github.com/JetBrains/projector-client/releases"&gt;projector client&lt;/a&gt;, you will be able to access WebStorm via the desktop app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g0c7wnBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lz0nbe36roozhhl1vg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g0c7wnBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lz0nbe36roozhhl1vg7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Default:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYq_AKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0vrddb28xqd7kwr7i31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYq_AKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0vrddb28xqd7kwr7i31.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Just opened WebStorm:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXh0JBLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15djcozoz7terdy4kf6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXh0JBLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15djcozoz7terdy4kf6j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Editing file:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKygIJ6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gobdg1ftm157400050uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKygIJ6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gobdg1ftm157400050uk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Btw I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt; let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>development</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 23 Apr 2021 17:53:21 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-1dmd</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-1dmd</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Going on a beautiful walk ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/KEG5UtvXUD7WPIhhuy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KEG5UtvXUD7WPIhhuy/giphy.gif" alt="Excited astronaut"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Let's light it 🔥 up!</title>
      <author>Dharmen Shah</author>
      <pubDate>Fri, 23 Apr 2021 17:23:04 +0000</pubDate>
      <link>https://dev.to/shhdharmen/let-s-light-it-up-h99</link>
      <guid>https://dev.to/shhdharmen/let-s-light-it-up-h99</guid>
      <description>&lt;p&gt;In previous post, we saw how amazing it is to use animation with wave 👋 emoji! In this post, we will try to achieve the same for flame 🔥 emoji!&lt;/p&gt;

&lt;p&gt;Below is the CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--flame-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;flame-animation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-3deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-4%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-3deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.fire&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--flame-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flame.animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flame-animation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.flame.animate&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.flame.animate&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Light up
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fire"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flame base"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🔥&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flame animate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🔥&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flame animate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🔥&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flame animate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🔥&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also look at the output of above code on below codepen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shhdharmen/embed/YzNdjBz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I know above doesn't exactly look like actual flame, but I think it's good to start with at-least!&lt;/p&gt;

&lt;p&gt;Let me know your thoughts and feedbacks in the comments section.&lt;/p&gt;

&lt;p&gt;Happy Coding!!!&lt;/p&gt;

&lt;p&gt;🌲 🌞 😊&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>animation</category>
      <category>emoji</category>
    </item>
    <item>
      <title>Calendar Management API for your next project </title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Fri, 23 Apr 2021 17:19:43 +0000</pubDate>
      <link>https://dev.to/surajondev/calendar-management-api-for-your-next-project-6l</link>
      <guid>https://dev.to/surajondev/calendar-management-api-for-your-next-project-6l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this hectic world when we want to do a lot of things but we have only 24 hours a day, it becomes crucial to maximize productivity and manage time efficiently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VcgCs7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhq13lfl778inr0clx95.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VcgCs7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhq13lfl778inr0clx95.gif" alt="giphy (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://giphy.com/gifs/animation-time-2d-3oz8xKaR836UJOYeOc"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's hard to manage time on your own completely and it is not a trivial thing to do. But using a calendar manager makes a huge difference. Today we are going to look into Spruwing's time management API and review their API for building custom solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-spurwings-appointment-scheduler"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://www.spurwing.io/"&gt;Spurwing's Appointment Scheduler&lt;/a&gt;?
&lt;/h2&gt;

&lt;p&gt;Spurwing is in the business of helping companies reduce their time, cost, and related resources when it comes to time management and scheduling efficiency. Their API is very flexible and allows us to design, develop and release production-ready tools and solutions for your business or project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGjDx-Fd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukgtuibp4o7js1weyjoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGjDx-Fd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukgtuibp4o7js1weyjoq.png" alt="Spurwing's Appointment Scheduler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use Spurwing’s resources and API to build scheduling and time management solutions for any industry, from healthcare to construction, supply chain, transportation, aviation, and more. Building your own scheduling system from scratch is inefficient and error-prone, it’s not a good thing to reinvent the wheel, because these are already taken care of: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identifying Overlapping Slots&lt;/li&gt;
&lt;li&gt;Availability management&lt;/li&gt;
&lt;li&gt;Time zones and daylight savings&lt;/li&gt;
&lt;li&gt;Organizational access levels&lt;/li&gt;
&lt;li&gt;Privacy, security, and HIPAA compliance&lt;/li&gt;
&lt;li&gt;Two-way calendar syncing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many exciting things about Spurwing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-like-spurwings-calendar-management-api"&gt;
  &lt;/a&gt;
  Why I like Spurwing's Calendar Management API?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you work in a team with people from different countries and timezone, it will consider timezone as a parameter to match all the members of the team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It becomes hectic when you have multiple calendars, so Spurwing will integrate with multiple calendars such as Google, Outlook, and Apple to build a single calendar centralized calendar system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are other calendar management APIs but they don't have a lot of free resources and/or developer flexibility. Spurwing on the contrary is an advanced calendar management API with a lot of features and a free marketplace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It sends notifications on my behalf to others about appointments, meetings, and booking confirmation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They have open source widgets that we can put into our website so users can book appointments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot of features, you can check more on &lt;a href="https://www.spurwing.io/"&gt;Spurwing&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Spurwing's REST API makes appointments scheduling child’s play.&lt;/p&gt;

&lt;p&gt;Below are several wrappers for Spurwint’s API in different programming languages:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-library"&gt;
  &lt;/a&gt;
  JavaScript Library
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Spurwing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your provider id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allApps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_appointment_types&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GitHub: &lt;a href="https://github.com/Spurwing/Spurwing-API-Javascript-Library"&gt;Spurwing-API-Javascript-Library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-library"&gt;
  &lt;/a&gt;
  NodeJS Library
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const Spurwing = require('spurwing')

const PID = 'your_provider_id';
const KEY = 'your_api_key';

let sp = new Spurwing();

let allApps = await sp.list_appointments(KEY, 1000, 0, PID)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GitHub: &lt;a href="https://github.com/Spurwing/Spurwing-API-NodeJS-Library"&gt;Spurwing-API-NodeJS-Library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-widget"&gt;
  &lt;/a&gt;
  React Widget
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60zsNOej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggikb9g0juz9zu27ku54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60zsNOej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggikb9g0juz9zu27ku54.png" alt="React Widget "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub: &lt;a href="https://dev.to/spurwing/powerful-calendar-management-api-for-your-web-projects-jba"&gt;Spurwing-ReactJS-widget&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python-library"&gt;
  &lt;/a&gt;
  Python Library
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spurwing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;

&lt;span class="n"&gt;PID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'your_provider_id'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'your_api_key'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_appointments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GitHub: &lt;a href="https://github.com/Spurwing/Spurwing-API-Python-Library/"&gt;Spurwing-API-Python-Library&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;There are many things to do with Spurwing. I hope you will try &lt;a href="https://www.spurwing.io/"&gt;Spurwing's API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank You for reading the blog post.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>watercooler</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Funny Web Dev/Software Dev memes!!!</title>
      <author>ManuTheCoder</author>
      <pubDate>Fri, 23 Apr 2021 17:05:46 +0000</pubDate>
      <link>https://dev.to/manuthecoder/funny-web-dev-software-dev-memes-4hhf</link>
      <guid>https://dev.to/manuthecoder/funny-web-dev-software-dev-memes-4hhf</guid>
      <description>&lt;p&gt;LOL, each of these cracked me up. 🤣🤣🤣&lt;/p&gt;


&lt;p&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p3bQ0sup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/236x/a0/93/65/a09365f6def8d90139deeba12b4b6253.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p3bQ0sup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/236x/a0/93/65/a09365f6def8d90139deeba12b4b6253.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQxpXbU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inteng-storage.s3.amazonaws.com/img/iea/yrwQvLJbON/sizes/programmer-memes_md.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQxpXbU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inteng-storage.s3.amazonaws.com/img/iea/yrwQvLJbON/sizes/programmer-memes_md.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sjz3Tp8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.testbytes.net/wp-content/uploads/2019/06/Untitled-55-300x269.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sjz3Tp8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.testbytes.net/wp-content/uploads/2019/06/Untitled-55-300x269.png" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc-MOeK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images7.memedroid.com/images/UPLOADED366/5fad546bbabd3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc-MOeK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images7.memedroid.com/images/UPLOADED366/5fad546bbabd3.jpeg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4hobX7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/m41loixjno811.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4hobX7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/m41loixjno811.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8ZjQZnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/7d/01/3e/7d013ebff22587a085842154eff082e9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8ZjQZnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/7d/01/3e/7d013ebff22587a085842154eff082e9.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHfUnHhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/17/12/45/17124565fa09322c38c59d87a03cc2a0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHfUnHhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/17/12/45/17124565fa09322c38c59d87a03cc2a0.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Pd5NPvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/op96es9026wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Pd5NPvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/op96es9026wy.png" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
^ This one's one of my favorites&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkcRNn3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/s2n41qn1wuu11.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkcRNn3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/s2n41qn1wuu11.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjY-9R04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://iq.opengenus.org/content/images/2020/03/quarantine_opengenus.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjY-9R04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://iq.opengenus.org/content/images/2020/03/quarantine_opengenus.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gkWQcFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EUhyfScWsAAIAYn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gkWQcFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EUhyfScWsAAIAYn.png" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09WRGhq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qasg8puafqj66mgfr0hl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09WRGhq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qasg8puafqj66mgfr0hl.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aod8UQ5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/236x/b4/3b/57/b43b57d6fc759e6b26f606858413c88c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aod8UQ5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/236x/b4/3b/57/b43b57d6fc759e6b26f606858413c88c.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJG2_5tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-9gag-fun.9cache.com/photo/abGPYNX_460s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJG2_5tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-9gag-fun.9cache.com/photo/abGPYNX_460s.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7doHZ2Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.semicolonworld.com/uploads/memes/gmOAZ1nNYV.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7doHZ2Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.semicolonworld.com/uploads/memes/gmOAZ1nNYV.jpg" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BVYJTEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/nac35ntlfg831.jpg%3Fauto%3Dwebp%26s%3Deb6f638c77dd43d58fa01244ef47ffc9c2cadf98" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BVYJTEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://preview.redd.it/nac35ntlfg831.jpg%3Fauto%3Dwebp%26s%3Deb6f638c77dd43d58fa01244ef47ffc9c2cadf98" width="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEl4TJFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.chzbgr.com/thumb800/13537797/h77FE3027/codebase-jurassic-park-huge-turd-wrong-database-selected-8388409-rows-affected-hide-the-pain-harold" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEl4TJFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.chzbgr.com/thumb800/13537797/h77FE3027/codebase-jurassic-park-huge-turd-wrong-database-selected-8388409-rows-affected-hide-the-pain-harold" width="500px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's your favorite meme? Let me know in the comments below!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>1 year into coding 🎉. Here are the tips I would go back and give myself</title>
      <author>Kieran Roberts 👋</author>
      <pubDate>Fri, 23 Apr 2021 17:04:54 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/1-year-into-coding-here-are-the-tips-i-would-go-back-and-give-myself-41d2</link>
      <guid>https://dev.to/kieran6roberts/1-year-into-coding-here-are-the-tips-i-would-go-back-and-give-myself-41d2</guid>
      <description>&lt;p&gt;In March 2020 I began my coding journey which means I have now been learning about web-development for 1 full year 🎈! I've learned a lot along the way but there are a few things I would tell myself if I could travel back in time.&lt;/p&gt;

&lt;p&gt;Let's not waste any more time 👏.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Don't be afraid of joining developer communities&lt;/li&gt;
&lt;li&gt;You can't learn everything so don't try&lt;/li&gt;
&lt;li&gt;Take notes or better yet write a blog&lt;/li&gt;
&lt;li&gt;Become comfortable with Git and command line basics early&lt;/li&gt;
&lt;li&gt;You learn the most when building projects&lt;/li&gt;
&lt;li&gt;Consistency is key&lt;/li&gt;
&lt;li&gt;Have fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-be-afraid-of-joining-developer-communities"&gt;
  &lt;/a&gt;
  1.) Don't be afraid of joining developer communities
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFz_qGRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925295648/frgDI6Q77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFz_qGRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925295648/frgDI6Q77.png" alt="illustration of cuommunity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is probably &lt;strong&gt;my number 1 tip&lt;/strong&gt;. It took me around 9 months before I had the confidence to branch out of my own bubble and connect with other developers. I was hesitant about putting myself out there. About putting my work into the open. Thinking I wasn't qualified to share ideas or that I didn't have enough knowledge to teach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I was completely wrong&lt;/strong&gt;😅&lt;/p&gt;

&lt;p&gt;The developer community is extremely supportive and there are loads of aspiring developers openly sharing their progress with each other. Check out the &lt;a href="https://twitter.com/search?q=%23100DaysOfCode&amp;amp;src=typeahead_click"&gt;#100DaysOfCode&lt;/a&gt; on Twitter for some examples.&lt;/p&gt;

&lt;p&gt;Sharing and learning from other developers is a key part of your progression. It can also be a great source of inspiration for your future work or perhaps a source of networking for you. These are a few of the amazing benefits I can think of 👇.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can learn from other devs in similar positions&lt;/li&gt;
&lt;li&gt;You can learn from more experienced devs &lt;/li&gt;
&lt;li&gt;It can be a great confidence builder&lt;/li&gt;
&lt;li&gt;You can get feedback on your work&lt;/li&gt;
&lt;li&gt;You can network with other devs&lt;/li&gt;
&lt;li&gt;You could make some friends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so much more. Just make the jump and I promise it is the best thing you can do for yourself as an aspiring developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-cant-learn-everything-so-dont-try"&gt;
  &lt;/a&gt;
  2.) You can't learn everything so don't try
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBrKeUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925304481/rpQ3_4LgF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBrKeUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925304481/rpQ3_4LgF.png" alt="illustration of person learning by reading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a front-end developer I realized that there is always going to be some new shiny tech that becomes &lt;em&gt;the thing&lt;/em&gt;. It is impossible to become a master of everything so don't try.&lt;/p&gt;

&lt;p&gt;Do your best to focus on a few key technologies and try to master them. As a learning front-end developer I was jumping into different CSS frameworks, build tools and more. It really wasn't necessary for someone who is leaning front-end development early on. &lt;/p&gt;

&lt;p&gt;If you get good at regular CSS then applying it to different CSS frameworks becomes easy when there is a good use-case for them. Once your comfortable by all means try out a framework but don't expect to become good with all of them.&lt;/p&gt;

&lt;p&gt;Instead I would now tell myself to focus on the key tech and get good with them before moving on to the shiny stuff. For me as a front-end developer I would focus on the following 👇.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Vanilla JavaScript&lt;/li&gt;
&lt;li&gt;1 JavaScript Framework&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-take-notes-or-better-yet-write-a-blog"&gt;
  &lt;/a&gt;
  3.) Take notes or better yet write a blog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D940d_T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925316894/q6Lz4VGOm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D940d_T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925316894/q6Lz4VGOm.png" alt="illustration of typewriter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didn't really take many notes while I was learning over the past year. I wish I had now. Recently I found myself trying to explain simple topics out loud and found that I struggled to articulate answers.&lt;/p&gt;

&lt;p&gt;Having some of my own notes to quickly reference would have been extremely useful 🙄.&lt;/p&gt;

&lt;p&gt;Keeping notes as you learn has so many incredible benefits. Writing will help you reinforce the knowledge you gain and can give you a reference for the future. You could also take it a step further and turn your notes into a blog for others to read. &lt;/p&gt;

&lt;p&gt;If you would like to know more about the benefits of blogging while learning web-development then check out my article &lt;a href="https://blog.kieranroberts.dev/why-its-awesome-for-new-developers-to-blog-as-they-learn"&gt;Why it's awesome for new developers to blog as they learn&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-become-comfortable-with-git-amp-command-line-basics-early"&gt;
  &lt;/a&gt;
  4.) Become comfortable with Git &amp;amp; command line basics early
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HdoHSSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925326542/Lo0_nHQmT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HdoHSSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925326542/Lo0_nHQmT.png" alt="illustration of person working with Git"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even as a front-end developer the command line is something we use on a daily basis. It can be intimidating but even learning some basics can drastically improve your workflow. Things like folder navigation and running executables are valuable skills.&lt;/p&gt;

&lt;p&gt;As well as this I would tell myself to &lt;strong&gt;not be intimidated by version control specifically using Git&lt;/strong&gt;. As I prepare to start applying for my first web-development role I have been diving deeper into Git. It has made me realize how little I actually knew about it and what it can do.&lt;/p&gt;

&lt;p&gt;The reality is that it is a very important skill to know if you plan on working as a developer in the industry. When you become comfortable with the code itself and you start building projects I highly recommend you practice with Git. &lt;/p&gt;

&lt;p&gt;Treat it how you would CSS or JavaScript and you will definitely fell the benefits later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-learn-the-most-when-building-projects"&gt;
  &lt;/a&gt;
  5.) You learn the most when building projects
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thSg00BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925335637/-uHAcHkzK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thSg00BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925335637/-uHAcHkzK.png" alt="Illustration of person building a brick wall"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building projects is awesome. That feeling when you host a project you built on the web for others to see and use is hard to beat. I have found that is also the thing that will help you learn the most.&lt;/p&gt;

&lt;p&gt;It is easy to follow tutorials and early on it is a great way to become comfortable with the basics. But at some point it is important to break away and attempt to build your own projects. Start small and if you get stuck then of course use all of the amazing resources we have online to help you. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google is every developers best friend&lt;/strong&gt; 😃.&lt;/p&gt;

&lt;p&gt;The process of running into problems, googling for solutions and implementing fixes is the iteration that will see you solving your own problems. This is key to becoming a confident developer. Even if the project doesn't turn out how you hoped, &lt;strong&gt;it is better than not trying at all&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The important thing is that you try it yourself first. Look up some simple projects and try to personalize it in some way based on your likes or interests. &lt;/p&gt;

&lt;p&gt;Get building!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-consistency-is-key"&gt;
  &lt;/a&gt;
  6.) Consistency is key
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7mnej6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925343419/Ab6tEGSo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7mnej6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925343419/Ab6tEGSo8.png" alt="illustration of person working on computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consistency is the key to becoming proficient at most things. If you work at it everyday then you are sure to see some progress. The same is true for coding.&lt;/p&gt;

&lt;p&gt;Unfortunately not everyone can put all of their time into it. We all have commitments. But if you can dedicate a little time everyday then you are on the right track. &lt;/p&gt;

&lt;p&gt;Try to have a specific topic in mind for the session and put all of your focus into it. Could be 30 minutes or it might be a couple of hours. &lt;strong&gt;As long as your focus is on the work for that time the consistency will be key to your development&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-have-fun"&gt;
  &lt;/a&gt;
  7.) Have fun
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AO8ggfPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925350793/WHYpvKoTP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AO8ggfPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616925350793/WHYpvKoTP.png" alt="illustration of people celebrating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes coding can be frustrating. We've all been there. It's easy to get frustrated and feel downbeat when we run into problems. But try to remember why we became developers in the first place. For me at least it is because &lt;strong&gt;It's fun and I love it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's sometimes easy to lose sight of this. Now that I have a little more experience I'm getting better at controlling my code frustration and find that I can now walk away leaving it for later when I come up with a better solution. There was a time when I would stress over a problem for hours at a time.&lt;/p&gt;

&lt;p&gt;I now realize that I would become frustrated because I'm passionate about coding and wanting to be as good as I possibly can. I love what I do and I try to keep this in mind which is easy to do &lt;em&gt;most of the time&lt;/em&gt; 🙂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Those were some of my the tips I would go back in time and tell myself and I think they are great tips for any developers learning their trade. I hope you are able to take something with you and if you did then please tell me about it.&lt;/p&gt;

&lt;p&gt;You can do so &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt; where I'm always active or in the comments below.&lt;/p&gt;

&lt;p&gt;If you could go back a year(or to the beginning) and give yourself a piece of advice, what would it be?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>motivation</category>
    </item>
    <item>
      <title>ReasonML &amp; Rescript in 5 minutes</title>
      <author>Alex Verein</author>
      <pubDate>Fri, 23 Apr 2021 16:46:57 +0000</pubDate>
      <link>https://dev.to/tpom6oh/reasonml-rescript-in-5-minutes-58l6</link>
      <guid>https://dev.to/tpom6oh/reasonml-rescript-in-5-minutes-58l6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-this-language-about"&gt;
  &lt;/a&gt;
  What is this language about?
&lt;/h3&gt;

&lt;p&gt;It's a functional language that compiles to JavaScript (or to OCaml).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ml-in-reasonml"&gt;
  &lt;/a&gt;
  What is ML in ReasonML?
&lt;/h3&gt;

&lt;p&gt;Nowadays ML usually stands for Machine Learning, but in the old days there was a programming language called "Meta Language" which is the ancestor of ReasonML, or Reason Meta Language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-rename"&gt;
  &lt;/a&gt;
  Why rename?
&lt;/h3&gt;

&lt;p&gt;ReasonML is compatible with both JS and OCaml, but lately it was mostly used in the JS ecosystem.&lt;br&gt;
Rescript takes JS-related things from Reason and stops being limited by OCaml support.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-the-good-things"&gt;
  &lt;/a&gt;
  What are the good things?
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#immutability"&gt;
  &lt;/a&gt;
  Immutability
&lt;/h4&gt;

&lt;p&gt;All references are actually constants. Shadowing is widely used. Standard library functions are non-mutative and produce new instances if any changes are made. There is a workaround to create a mutable reference if needed but deliberate enough to be discouraging.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#piping-and-currying"&gt;
  &lt;/a&gt;
  Piping and currying
&lt;/h4&gt;

&lt;p&gt;Rescript is a functional language with no methods on objects, but you can call and chain functions in a familiar way with piping and currying, like&lt;br&gt;
&lt;code&gt;myList-&amp;gt;List.length&lt;/code&gt; &lt;br&gt;
or &lt;br&gt;
&lt;code&gt;myArray-&amp;gt;Array.map(item =&amp;gt; item * 2)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#sound-type-system-and-type-inference"&gt;
  &lt;/a&gt;
  Sound type system and type inference
&lt;/h4&gt;

&lt;p&gt;This is probably the main reason to choose rescript. It has strong type system and powerful type inference, so you are rarely required to explicitly define types, but the compiler always knows what the types are.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#no-folder-requirements-and-no-imports"&gt;
  &lt;/a&gt;
  No folder requirements and no imports
&lt;/h4&gt;

&lt;p&gt;This is a case in many languages, but coming from Java I really appreciate this feature. And Javascript developers love the no imports thing!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#full-support-of-algebraic-data-types"&gt;
  &lt;/a&gt;
  Full support of algebraic data types
&lt;/h4&gt;

&lt;p&gt;It's very easy to describe any domain with the custom types&lt;br&gt;
You can create type aliases like &lt;code&gt;type eventId = string&lt;/code&gt; or complex types like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type event = {
  id: eventId,
  name: string,
  uniqueName: option&amp;lt;string&amp;gt;,
  description: string,
  properties: list&amp;lt;property&amp;gt;,
  types: list&amp;lt;eventType&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-main-construction-in-the-language-is-the-exhaustive-switch-optimized-for-pattern-matching"&gt;
  &lt;/a&gt;
  The main construction in the language is the exhaustive switch optimized for pattern matching
&lt;/h4&gt;

&lt;p&gt;It's accompanied by an empowered kind of enum called variants. There are options of variants with and without duck typing. &lt;a href="https://tinyurl.com/yv4nfpkm"&gt;Better to see it in action&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-syntax"&gt;
  &lt;/a&gt;
  Simple syntax
&lt;/h4&gt;

&lt;p&gt;It's possible to start writing code after just a few hours of learning if you already know another programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relatively-safe-refactoring"&gt;
  &lt;/a&gt;
  Relatively safe refactoring
&lt;/h3&gt;

&lt;p&gt;The combination of a rigid type system and exhaustive switches make the compiler very efficient in finding bugs in the compile time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-not-so-good-things"&gt;
  &lt;/a&gt;
  What are the not so good things?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#simple-syntax-means-its-verbose"&gt;
  &lt;/a&gt;
  Simple syntax means it's verbose
&lt;/h4&gt;

&lt;p&gt;There is not much syntax sugar, for example to unwrap an optional constant you'd have to write &lt;code&gt;maybeSomething-&amp;gt;Option.map(something -&amp;gt; something-&amp;gt;performOperation)&lt;/code&gt; instead of &lt;code&gt;maybeSomething?.performOperation()&lt;/code&gt; in some other languages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-have-to-define-functions-before-using-them"&gt;
  &lt;/a&gt;
  You have to define functions before using them
&lt;/h4&gt;

&lt;p&gt;Yes, like in good old C.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-can-still-have-typerelated-bugs"&gt;
  &lt;/a&gt;
  You can still have type-related bugs
&lt;/h4&gt;

&lt;p&gt;Having a powerful compiler that catches 99% of the type bugs can be too relaxing and it becomes easier to miss that one occasional bug that slips through the compiler checks. 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;We are maintaining a public code style guide for &lt;a href="https://github.com/avohq/reasonml-code-style-guide"&gt;ReasonML&lt;/a&gt;, contributions are very welcome!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>web</category>
      <category>node</category>
    </item>
    <item>
      <title>💬 Chatwoot : Nice open-source customer support tool, chatbot  (Alternative to Intercom)</title>
      <author>Javid Mougamadou</author>
      <pubDate>Fri, 23 Apr 2021 16:46:31 +0000</pubDate>
      <link>https://dev.to/javidjms/chatwoot-nice-open-source-customer-support-tool-chatbot-alternative-to-intercom-4pon</link>
      <guid>https://dev.to/javidjms/chatwoot-nice-open-source-customer-support-tool-chatbot-alternative-to-intercom-4pon</guid>
      <description>&lt;h2&gt;
  &lt;a href="#concepts"&gt;
  &lt;/a&gt;
  Concepts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/5b6ffa0b767ae3ca18eb4c910e7ffe4f6bd1d24b04207b423f7f28d9586604fc/68747470733a2f2f73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f67682d6173736574732e63686174776f6f742e636f6d2f63686174776f6f742d64617368626f6172642d6173736574732e706e67" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/5b6ffa0b767ae3ca18eb4c910e7ffe4f6bd1d24b04207b423f7f28d9586604fc/68747470733a2f2f73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f67682d6173736574732e63686174776f6f742e636f6d2f63686174776f6f742d64617368626f6172642d6173736574732e706e67" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chatwoot is an open-source customer communication platform that helps companies engage their customers on their website, Facebook page, Twitter, Whatsapp, SMS, email, etc. It is an open-source alternative to Intercom, Zendesk, Salesforce Service Cloud etc. Connect your customer conversation channels and converse with your customers from a single place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-A4vVu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marketplace.whmcs.com/product/5530/images/screenshots/16568-892-2aa54410738288d1a9d695f641291745.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-A4vVu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marketplace.whmcs.com/product/5530/images/screenshots/16568-892-2aa54410738288d1a9d695f641291745.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Chatwoot gives an integrated view of conversations happening in different communication channels.&lt;/p&gt;

&lt;p&gt;It supports the following conversation channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Website&lt;/strong&gt;: Talk to your customers using our live chat widget and make use of our SDK to identify a user and provide contextual support.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Facebook&lt;/strong&gt;: Connect your Facebook pages and start replying to the direct messages to your page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Twitter&lt;/strong&gt;: Connect your Twitter profiles and reply to direct messages or the tweets where you are mentioned.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Whatsapp&lt;/strong&gt;: Connect your Whatsapp business account and manage the conversation in Chatwoot&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SMS&lt;/strong&gt;: Connect your Twilio SMS account and reply to the SMS queries in Chatwoot&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API Channel&lt;/strong&gt;: Build custom communication channels using our API channel.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Email (beta)&lt;/strong&gt;: Forward all your email queries to Chatwoot and view it in our integrated dashboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Multi-brand inboxes&lt;/strong&gt;: Manage multiple brands or pages using a single dashboard.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Private notes&lt;/strong&gt;: Inter team communication is possible using private notes in a conversation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Canned responses (Saved replies)&lt;/strong&gt;: Improve the response rate by adding saved replies for frequently asked questions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conversation Labels&lt;/strong&gt;: Use conversation labelling to create custom workflows.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto assignment&lt;/strong&gt;: Chatwoot intelligently assigns a ticket to the agents who have access to the inbox depending on their availability and load.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conversation continuity&lt;/strong&gt;: If the user has provided an email address through the chat widget, Chatwoot would send an email to the customer under the agent name so that the user can continue the conversation over the email.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi-lingual support&lt;/strong&gt;: Chatwoot supports 10+ languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Powerful API &amp;amp; Webhooks&lt;/strong&gt;: Extend the capability of the software using Chatwoot’s webhooks and APIs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrations&lt;/strong&gt;: Chatwoot natively integrates with Slack right now. Manage your conversations in Slack without logging into the dashboard.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;Detailed documentation is available at &lt;a href="https://www.chatwoot.com/help-center"&gt;www.chatwoot.com/help-center&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-with-dockercompose"&gt;
  &lt;/a&gt;
  Installation with docker-compose
&lt;/h2&gt;

&lt;p&gt;Here is the guide : &lt;a href="https://www.chatwoot.com/docs/deployment/deploy-chatwoot-with-docker/"&gt;Installation with Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can install it with docker-compose and change the environment variables.&lt;/p&gt;

&lt;p&gt;Here is the docker-compose.yml and the .env .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;base&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;chatwoot/chatwoot:develop&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt; &lt;span class="c1"&gt;## Change this file for customized env variables&lt;/span&gt;
    &lt;span class="na"&gt;stdin_open&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# docker run -i&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;        &lt;span class="c1"&gt;# docker run -t&lt;/span&gt;

  &lt;span class="na"&gt;rails&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=production&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;RAILS_ENV=production&lt;/span&gt;
    &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/entrypoints/rails.sh&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;bundle'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;exec'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;rails'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;s'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-p'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3000'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-b'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0.0.0.0'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;sidekiq&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*base&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=production&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;RAILS_ENV=production&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;bundle'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;exec'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;sidekiq'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-C'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;config/sidekiq.yml'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;postgres&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:12&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5432:5432'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/data/postgres:/var/lib/postgresql/data&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=chatwoot&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=postgres&lt;/span&gt;
      &lt;span class="c1"&gt;# Please provide your own password.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=chatwoot&lt;/span&gt;

  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:alpine&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sh"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-c"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis-server&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--requirepass&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;$REDIS_PASSWORD&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt; &lt;span class="c1"&gt;## Change this file for customized env variables&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/data/redis:/data&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;6379:6379'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .env&lt;/span&gt;
&lt;span class="c1"&gt;# Used to verify the integrity of signed cookies. so ensure a secure value is set&lt;/span&gt;
&lt;span class="s"&gt;SECRET_KEY_BASE=replace_with_lengthy_secure_hex&lt;/span&gt;

&lt;span class="c1"&gt;# Replace with the URL you are planning to use for your app&lt;/span&gt;
&lt;span class="s"&gt;FRONTEND_URL=http://0.0.0.0:3000&lt;/span&gt;

&lt;span class="c1"&gt;# If the variable is set, all non-authenticated pages would fallback to the default locale.&lt;/span&gt;
&lt;span class="c1"&gt;# Whenever a new account is created, the default language will be DEFAULT_LOCALE instead of en&lt;/span&gt;
&lt;span class="c1"&gt;# DEFAULT_LOCALE=en&lt;/span&gt;

&lt;span class="c1"&gt;# If you plan to use CDN for your assets, set Asset CDN Host&lt;/span&gt;
&lt;span class="s"&gt;ASSET_CDN_HOST=&lt;/span&gt;

&lt;span class="c1"&gt;# Force all access to the app over SSL, default is set to false&lt;/span&gt;
&lt;span class="s"&gt;FORCE_SSL=false&lt;/span&gt;

&lt;span class="c1"&gt;# This lets you control new sign ups on your chatwoot installation&lt;/span&gt;
&lt;span class="c1"&gt;# true : default option, allows sign ups&lt;/span&gt;
&lt;span class="c1"&gt;# false : disables all the end points related to sign ups&lt;/span&gt;
&lt;span class="c1"&gt;# api_only: disables the UI for signup, but you can create sign ups via the account apis&lt;/span&gt;
&lt;span class="s"&gt;ENABLE_ACCOUNT_SIGNUP=false&lt;/span&gt;

&lt;span class="c1"&gt;# Redis config&lt;/span&gt;
&lt;span class="s"&gt;REDIS_URL=redis://redis:6379&lt;/span&gt;
&lt;span class="c1"&gt;# If you are using docker-compose, set this variable's value to be any string,&lt;/span&gt;
&lt;span class="c1"&gt;# which will be the password for the redis service running inside the docker-compose&lt;/span&gt;
&lt;span class="c1"&gt;# to make it secure&lt;/span&gt;
&lt;span class="s"&gt;REDIS_PASSWORD=chatwoot&lt;/span&gt;
&lt;span class="c1"&gt;# Redis Sentinel can be used by passing list of sentinel host and ports e,g. sentinel_host1:port1,sentinel_host2:port2&lt;/span&gt;
&lt;span class="s"&gt;REDIS_SENTINELS=&lt;/span&gt;
&lt;span class="c1"&gt;# Redis sentinel master name is required when using sentinel, default value is "mymaster".&lt;/span&gt;
&lt;span class="c1"&gt;# You can find list of master using "SENTINEL masters" command&lt;/span&gt;
&lt;span class="s"&gt;REDIS_SENTINEL_MASTER_NAME=&lt;/span&gt;

&lt;span class="c1"&gt;# Postgres Database config variables&lt;/span&gt;
&lt;span class="s"&gt;POSTGRES_HOST=postgres&lt;/span&gt;
&lt;span class="s"&gt;POSTGRES_USERNAME=postgres&lt;/span&gt;
&lt;span class="s"&gt;POSTGRES_PASSWORD=chatwoot&lt;/span&gt;
&lt;span class="s"&gt;RAILS_ENV=development&lt;/span&gt;
&lt;span class="s"&gt;RAILS_MAX_THREADS=5&lt;/span&gt;

&lt;span class="c1"&gt;# The email from which all outgoing emails are sent&lt;/span&gt;
&lt;span class="c1"&gt;# could user either  `email@yourdomain.com` or `BrandName &amp;lt;email@yourdomain.com&amp;gt;`&lt;/span&gt;
&lt;span class="s"&gt;MAILER_SENDER_EMAIL=Chatwoot &amp;lt;accounts@chatwoot.com&amp;gt;&lt;/span&gt;


&lt;span class="c1"&gt;#SMTP domain key is set up for HELO checking&lt;/span&gt;
&lt;span class="s"&gt;SMTP_DOMAIN=chatwoot.com&lt;/span&gt;
&lt;span class="c1"&gt;# the default value is set "mailhog" and is used by docker-compose for development environments,&lt;/span&gt;
&lt;span class="c1"&gt;# Set the value as "localhost" or your SMTP address in other environments&lt;/span&gt;
&lt;span class="s"&gt;SMTP_ADDRESS=mailhog&lt;/span&gt;
&lt;span class="s"&gt;SMTP_PORT=1025&lt;/span&gt;
&lt;span class="s"&gt;SMTP_USERNAME=&lt;/span&gt;
&lt;span class="s"&gt;SMTP_PASSWORD=&lt;/span&gt;
&lt;span class="c1"&gt;# plain,login,cram_md5&lt;/span&gt;
&lt;span class="s"&gt;SMTP_AUTHENTICATION=&lt;/span&gt;
&lt;span class="s"&gt;SMTP_ENABLE_STARTTLS_AUTO=true&lt;/span&gt;
&lt;span class="c1"&gt;# Can be: 'none', 'peer', 'client_once', 'fail_if_no_peer_cert', see http://api.rubyonrails.org/classes/ActionMailer/Base.html&lt;/span&gt;
&lt;span class="s"&gt;SMTP_OPENSSL_VERIFY_MODE=peer&lt;/span&gt;

&lt;span class="c1"&gt;# Mail Incoming&lt;/span&gt;
&lt;span class="c1"&gt;# This is the domain set for the reply emails when conversation continuity is enabled&lt;/span&gt;
&lt;span class="s"&gt;MAILER_INBOUND_EMAIL_DOMAIN=&lt;/span&gt;
&lt;span class="c1"&gt;# Set this to appropriate ingress channel with regards to incoming emails&lt;/span&gt;
&lt;span class="c1"&gt;# Possible values are :&lt;/span&gt;
&lt;span class="c1"&gt;# relay for Exim, Postfix, Qmail&lt;/span&gt;
&lt;span class="c1"&gt;# mailgun for Mailgun&lt;/span&gt;
&lt;span class="c1"&gt;# mandrill for Mandrill&lt;/span&gt;
&lt;span class="c1"&gt;# postmark for Postmark&lt;/span&gt;
&lt;span class="c1"&gt;# sendgrid for Sendgrid&lt;/span&gt;
&lt;span class="s"&gt;RAILS_INBOUND_EMAIL_SERVICE=&lt;/span&gt;
&lt;span class="c1"&gt;# Use one of the following based on the email ingress service&lt;/span&gt;
&lt;span class="c1"&gt;# Ref: https://edgeguides.rubyonrails.org/action_mailbox_basics.html&lt;/span&gt;
&lt;span class="s"&gt;RAILS_INBOUND_EMAIL_PASSWORD=&lt;/span&gt;
&lt;span class="s"&gt;MAILGUN_INGRESS_SIGNING_KEY=&lt;/span&gt;
&lt;span class="s"&gt;MANDRILL_INGRESS_API_KEY=&lt;/span&gt;

&lt;span class="c1"&gt;# Storage&lt;/span&gt;
&lt;span class="s"&gt;ACTIVE_STORAGE_SERVICE=local&lt;/span&gt;

&lt;span class="c1"&gt;# Amazon S3&lt;/span&gt;
&lt;span class="c1"&gt;# documentation: https://www.chatwoot.com/docs/configuring-s3-bucket-as-cloud-storage&lt;/span&gt;
&lt;span class="s"&gt;S3_BUCKET_NAME=&lt;/span&gt;
&lt;span class="s"&gt;AWS_ACCESS_KEY_ID=&lt;/span&gt;
&lt;span class="s"&gt;AWS_SECRET_ACCESS_KEY=&lt;/span&gt;
&lt;span class="s"&gt;AWS_REGION=&lt;/span&gt;

&lt;span class="c1"&gt;# Sentry&lt;/span&gt;
&lt;span class="s"&gt;SENTRY_DSN=&lt;/span&gt;

&lt;span class="c1"&gt;# Log settings&lt;/span&gt;
&lt;span class="c1"&gt;# Disable if you want to write logs to a file&lt;/span&gt;
&lt;span class="s"&gt;RAILS_LOG_TO_STDOUT=true&lt;/span&gt;
&lt;span class="s"&gt;LOG_LEVEL=info&lt;/span&gt;
&lt;span class="s"&gt;LOG_SIZE=500&lt;/span&gt;

&lt;span class="c1"&gt;### This environment variables are only required if you are setting up social media channels&lt;/span&gt;

&lt;span class="c1"&gt;# Facebook&lt;/span&gt;
&lt;span class="c1"&gt;# documentation: https://www.chatwoot.com/docs/facebook-setup&lt;/span&gt;
&lt;span class="s"&gt;FB_VERIFY_TOKEN=&lt;/span&gt;
&lt;span class="s"&gt;FB_APP_SECRET=&lt;/span&gt;
&lt;span class="s"&gt;FB_APP_ID=&lt;/span&gt;

&lt;span class="c1"&gt;# Twitter&lt;/span&gt;
&lt;span class="c1"&gt;# documentation: https://www.chatwoot.com/docs/twitter-app-setup&lt;/span&gt;
&lt;span class="s"&gt;TWITTER_APP_ID=&lt;/span&gt;
&lt;span class="s"&gt;TWITTER_CONSUMER_KEY=&lt;/span&gt;
&lt;span class="s"&gt;TWITTER_CONSUMER_SECRET=&lt;/span&gt;
&lt;span class="s"&gt;TWITTER_ENVIRONMENT=&lt;/span&gt;

&lt;span class="c1"&gt;#slack integration&lt;/span&gt;
&lt;span class="s"&gt;SLACK_CLIENT_ID=&lt;/span&gt;
&lt;span class="s"&gt;SLACK_CLIENT_SECRET=&lt;/span&gt;

&lt;span class="c1"&gt;### Change this env variable only if you are using a custom build mobile app&lt;/span&gt;
&lt;span class="c1"&gt;## Mobile app env variables&lt;/span&gt;
&lt;span class="s"&gt;IOS_APP_ID=6C953F3RX2.com.chatwoot.app&lt;/span&gt;


&lt;span class="c1"&gt;### Smart App Banner&lt;/span&gt;
&lt;span class="c1"&gt;# https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html&lt;/span&gt;
&lt;span class="c1"&gt;# You can find your app-id in https://itunesconnect.apple.com&lt;/span&gt;
&lt;span class="c1"&gt;#IOS_APP_IDENTIFIER=1495796682&lt;/span&gt;

&lt;span class="c1"&gt;## Push Notification&lt;/span&gt;
&lt;span class="c1"&gt;## generate a new key value here : https://d3v.one/vapid-key-generator/&lt;/span&gt;
&lt;span class="c1"&gt;# VAPID_PUBLIC_KEY=&lt;/span&gt;
&lt;span class="c1"&gt;# VAPID_PRIVATE_KEY=&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# for mobile apps&lt;/span&gt;
&lt;span class="c1"&gt;# FCM_SERVER_KEY=&lt;/span&gt;

&lt;span class="c1"&gt;## Bot Customizations&lt;/span&gt;
&lt;span class="s"&gt;USE_INBOX_AVATAR_FOR_BOT=true&lt;/span&gt;



&lt;span class="c1"&gt;## IP look up configuration&lt;/span&gt;
&lt;span class="c1"&gt;## ref https://github.com/alexreisner/geocoder/blob/master/README_API_GUIDE.md&lt;/span&gt;
&lt;span class="c1"&gt;## works only on accounts with ip look up feature enabled&lt;/span&gt;
&lt;span class="c1"&gt;# IP_LOOKUP_SERVICE=geoip2&lt;/span&gt;
&lt;span class="c1"&gt;# maxmindb api key to use geoip2 service&lt;/span&gt;
&lt;span class="c1"&gt;# IP_LOOKUP_API_KEY=&lt;/span&gt;

&lt;span class="c1"&gt;## Development Only Config&lt;/span&gt;
&lt;span class="c1"&gt;# if you want to use letter_opener for local emails&lt;/span&gt;
&lt;span class="c1"&gt;# LETTER_OPENER=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prepare the database by running the migrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose run &lt;span class="nt"&gt;--rm&lt;/span&gt; rails bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails db:chatwoot_prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the service up and running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Chatwoot installation should be accessible with &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.chatwoot.com/"&gt;https://www.chatwoot.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/chatwoot/chatwoot"&gt;https://github.com/chatwoot/chatwoot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDTTisq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/73185/107608463-129ff600-6c62-11eb-84f4-1dc1ebdbf1de.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDTTisq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/73185/107608463-129ff600-6c62-11eb-84f4-1dc1ebdbf1de.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
