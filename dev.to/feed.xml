<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Time Zones Are Hard</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 05 Oct 2021 17:04:39 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/time-zones-are-hard-4pan</link>
      <guid>https://dev.to/jeffreyfate/time-zones-are-hard-4pan</guid>
      <description>&lt;p&gt;I recently saw this on Twitter (hope it doesn't trigger any of you):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NEW TIME ZONES!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzFs2I5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAv7UPuVEAA87S9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS_bPZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1369555721033904131/SkcVjCe3_normal.jpg" alt="Maz Jovanovich profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Maz Jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @maz_jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      PSA: As of today, Australia has 5 time zones once again. Apologies in advance to our overseas friends trying to make sense of this temporal anarchy. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:47 AM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#whats-the-big-deal"&gt;
  &lt;/a&gt;
  What's The Big Deal?
&lt;/h2&gt;

&lt;p&gt;Imagine your application has users throughout Australia. They probably include people in the three red states in the right image above; where time is different during daylight saving time.&lt;/p&gt;

&lt;p&gt;Let's also say your application has a feature that is very time-dependent. Let's say live TV recording. Users set recordings based on the schedule, in their local time. They expect not to miss recording their favorite shows.&lt;/p&gt;

&lt;p&gt;Without updating and releasing a new version, everyone in the 3 states with a new time zone (only during DST) could miss recording a show at what is now 9pm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-everywhere"&gt;
  &lt;/a&gt;
  Problems Everywhere
&lt;/h2&gt;

&lt;p&gt;There aren't many devices or applications or services that don't depend on correct time. DRM. Caching. Shoe launches. Events. Reminders.&lt;/p&gt;

&lt;p&gt;I bet most people reading this have stored or fetched time that needed to be displayed in the correct time zone. Perhaps you didn't convert the time, but I bet it had to be converted somewhere downstream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-it"&gt;
  &lt;/a&gt;
  Fix It
&lt;/h2&gt;

&lt;p&gt;One solution to this problem is to do away with time zones altogether. As amazing as this would be for us, the chances are extremely low. If the United States can't convert to metric, there is basically no chance the entire world will ditch time zones.&lt;/p&gt;

&lt;p&gt;Time for an engineering solution.&lt;/p&gt;

&lt;p&gt;One possible solution is to only persist UTC (coordinated universal time) for any date-time. This gets us partway there. No users (ok, maybe a couple) will want to enter time in UTC, so we'll probably have to convert it. Here's where it gets tricky.&lt;/p&gt;

&lt;p&gt;This amazing video by Computerphile puts it better than I could.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5wpm-gesOY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's see if we can find a solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-first"&gt;
  &lt;/a&gt;
  User First
&lt;/h2&gt;

&lt;p&gt;Let's start with a user story:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a TV lover, I want to record my show in my local time, so that I can watch it later&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How do we know the local time? Location. There are a few different ways to know location: IP address, Geolocation API, GPS, asking where the user is, more. Now that we have the location, we must find the time zone.&lt;/p&gt;

&lt;p&gt;This is the part I don't have a solid abstraction for. We must somehow map that location (latitude/longitude, city name, address) to the correct time zone. The most accurate is latitude/longitude, but we must fallback to a less precise location too.&lt;/p&gt;

&lt;p&gt;Is it feasible to map the borders of each time zone and do our best to match locations to those borders?&lt;/p&gt;

&lt;p&gt;The rest of the solution is simple enough. Once we have the correct time zone, we can convert UTC to the local time and we're done.&lt;/p&gt;

&lt;p&gt;Logic that does this should be encapsulated into something that can be easily integrated and reused. Something like a REST API or a local library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#just-an-exercise"&gt;
  &lt;/a&gt;
  Just An Exercise
&lt;/h2&gt;

&lt;p&gt;I admit, this appears to have been solved already, but I thought it was a fun exercise. A reminder that we always have to think about time.&lt;/p&gt;

&lt;p&gt;Here are some of the resources I found while trying to better understand time zones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/david-dick/time-zone-olson/blob/master/lib/Time/Zone/Olson.pm"&gt;Olson Time Zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/unicode-org/cldr/master/common/supplemental/windowsZones.xml"&gt;Windows Time Zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://timezonedb.com/references/get-time-zone"&gt;TimeZoneDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.washingtonpost.com/news/worldviews/wp/2016/02/12/the-radical-plan-to-destroy-time-zones-2/"&gt;The radical plan to destroy time zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.wired.co.uk/article/universal-time-zones"&gt;What would happen if we abolished time zones altogether?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://theconversation.com/the-hazards-of-living-on-the-right-side-of-a-time-zone-border-116630"&gt;The hazards of living on the right side of a time zone border&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theguardian.com/news/2019/jan/11/watching-the-sun-not-the-clock-sleep-body-clocks-daylight-saving-time"&gt;Why we should be watching the sun, not the clock&lt;/a&gt;&lt;/p&gt;

</description>
      <category>timezones</category>
    </item>
    <item>
      <title>SQL Server to React in 60 Seconds With Prisma</title>
      <author>Jon Crowell</author>
      <pubDate>Tue, 05 Oct 2021 16:44:07 +0000</pubDate>
      <link>https://dev.to/jonrcrowell/sql-server-to-react-in-60-seconds-with-prisma-16fj</link>
      <guid>https://dev.to/jonrcrowell/sql-server-to-react-in-60-seconds-with-prisma-16fj</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Previously published at &lt;a href="//www.fullstackfish.com"&gt;fullstackfish.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Connecting SQL Server to React with Prisma is a straightforward and satisfying experience. This post will guide you through the process of getting your Azure SQL Server data onto a screen in a React app in less than a minute. Really. (As long as you pause your timer while &lt;code&gt;npm&lt;/code&gt; is downloading files.)&lt;/p&gt;

&lt;p&gt;Of course, there are a few prerequisites before you can get it connected that quickly. Prisma supports working with existing databases (which we are doing in this post) as well as defining the database in your app and then creating the database objects through migrations (which will be covered in other posts).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You must have an existing Azure SQL Server with a database that you have credentials for. You must also have your ip whitelisted in Azure.&lt;/li&gt;
&lt;li&gt;The database must have at least one table with data that we can query.&lt;/li&gt;
&lt;li&gt;You must have up-to-date versions of Node.js (12.6 or higher) and Visual Studio Code installed. &lt;em&gt;See &lt;a href="https://www.fullstackfish.com/posts/2021-10-05-use-volta-like-a-sophisticated-dev/"&gt;nvm is for barbarians. Manage Node versions with Volta instead&lt;/a&gt; for a great way to manage Node versions.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;You must have &lt;code&gt;create-next-app&lt;/code&gt; installed globally. (&lt;code&gt;npm global install create-next-app&lt;/code&gt; if you don't)&lt;/li&gt;
&lt;li&gt;You must have an empty folder on your hard-drive for this project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's it. Let's do this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your empty project folder in VS Code&lt;/li&gt;
&lt;li&gt;Open a terminal and run the following command to initialize a new next app:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dot (.) will create the next app in the current path.&lt;/p&gt;

&lt;p&gt;Once the app is initialized, you should see a confirmation. Run the app to verify it compiles and runs correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser to verify.&lt;/p&gt;

&lt;p&gt;Now stop the app and let's get some data.&lt;/p&gt;

&lt;p&gt;You'll need to add the following dependencies, &lt;code&gt;prisma&lt;/code&gt; as a dev dependency and &lt;code&gt;@prisma/client&lt;/code&gt; as a regular dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @prisma/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your package.json file to verify that you have version 3.01 or greater of prisma in the dev dependencies.&lt;/p&gt;

&lt;p&gt;Initialize prisma in your app. This will add a prisma folder in root with a schema.prisma file. It will also add a .env file if you don't already have one, which you shouldn't at this point. For future reference, if you do have a .env file, this step will add a new entry into the file without harming anything else you may have in there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default connection that is configured in the schema.prisma file is for Postgres. Let's fix that.&lt;/p&gt;

&lt;p&gt;Edit the file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// schema.prisma&lt;/span&gt;
&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sqlserver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the constant DATABASE_URL that is referenced. We'll update the value of that constant in the .env file now.&lt;/p&gt;

&lt;p&gt;Set the connection string in the .env file to point to your Azure SQL Server database. I'm using a username and password for this example. Explaining all the variations on connection strings is beyond the scope of this post, but I'm assuming you can figure that out.&lt;/p&gt;

&lt;p&gt;My connection string, with the sensitive bits masked to protect the innocent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://[SERVERNAME].database.windows.net:1433;database=[DATABASENAME];encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;user=[USERNAME];password=[PASSWORD]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connection strings can be long, so you'll have to scroll to the right to see the whole thing.&lt;/p&gt;

&lt;p&gt;Now we're ready to introspect the database. This step will populate the Prisma schema based on your database schema. Make sure you have your schema.prisma file open before you run the following. It's fun to watch the magic happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma db pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! Our app and database are now friends.&lt;/p&gt;

&lt;p&gt;Assuming your connection string is correct and you have access to your database, you should now see a list of all the tables in the dbo schema generated as models in your schema.prisma file. This functionality is currently limited to tables in the dbo schema. You won't have views or functions, or stored procs in the schema file, which is true for all databases Prisma works with, so don't get your SQL Server feelings hurt. You can still interact with those objects in your app.&lt;/p&gt;

&lt;p&gt;Now that we have a valid schema, let's run the command to generate the Prisma client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is a fabulous tool that keeps your backend and frontend code safely separate but extremely easy to work with in the same project, among many other benefits.&lt;/p&gt;

&lt;p&gt;Add a lib folder in root with a prisma.js file, and copy/paste or type the following into that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/prisma.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the best practice defined by Prisma and Next for the integration. You'll be able to import a single instance of the prisma client throughout your app (something we'll do shortly), which will handle connection pools for you and protect you from memory leaks. See &lt;a href="https://www.prisma.io/docs/support/help-articles/nextjs-prisma-client-dev-practices"&gt;Best practice for instantiating PrismaClient with Next.js&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Let's define an API route that our front-end will consume.&lt;/p&gt;

&lt;p&gt;Add a file in pages/api called products.js. Replace "products" with whatever table you want to work with from your database. I'm using Adventure Works for this example.&lt;/p&gt;

&lt;p&gt;Add this to the products.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/products.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/prisma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now delete the contents of the pages/index.js file and replace it with the following as a guide. You'll need to use your React skills to create a component that incorporates your data.&lt;/p&gt;

&lt;p&gt;You'll need to replace &lt;code&gt;products&lt;/code&gt; with whatever table you want from your database, and use fields from that table instead of the ones I'm using below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000/api/products&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProductID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListPrice&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Let's see if it worked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser and behold your data!&lt;/p&gt;

&lt;p&gt;Hit me up on twitter &lt;a href="https://twitter.com/jonrcrowell"&gt;@jonrcrowell&lt;/a&gt; to let me know what you think or if you ran into any issues.&lt;/p&gt;

&lt;p&gt;Prisma released the SQL Server connector on September 7, 2021. Read the official announcement here:&lt;br&gt;
&lt;a href="https://www.prisma.io/blog/prisma-microsoft-sql-server-azure-sql-production-ga"&gt;Microsoft SQL Server Support in Prisma is Production-Ready&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to Create a PWA With Next.js</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Tue, 05 Oct 2021 16:39:50 +0000</pubDate>
      <link>https://dev.to/byteslash/how-to-create-a-pwa-with-next-js-4dbm</link>
      <guid>https://dev.to/byteslash/how-to-create-a-pwa-with-next-js-4dbm</guid>
      <description>&lt;p&gt;Hey all,&lt;/p&gt;

&lt;p&gt;This post is in collaboration with &lt;a href="https://www.youtube.com/c/JamesQQuick"&gt;James Q Quick&lt;/a&gt;. If you like to see videos then check out this video by  &lt;a href="https://www.youtube.com/c/JamesQQuick"&gt;James Q Quick&lt;/a&gt;.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ARNN_zmrwcw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So let's get the party started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-pwa"&gt;
  &lt;/a&gt;
  What is a PWA?
&lt;/h3&gt;

&lt;p&gt;PWA stands for Progressive web app. It is basically like a web app built with HTML, CSS, and Javascript with a few more features like-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extremely Fast&lt;/li&gt;
&lt;li&gt;Installable&lt;/li&gt;
&lt;li&gt;Works in all browsers&lt;/li&gt;
&lt;li&gt;Provides an offline page&lt;/li&gt;
&lt;li&gt;Push notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-nextjs-app"&gt;
  &lt;/a&gt;
  Creating a Next.js app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app next-pwa-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am going to convert the default Next.js template into a PWA, you can convert your web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-required-dependency"&gt;
  &lt;/a&gt;
  Installing the required dependency
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i next-pwa # npm
yarn add next-pwa # yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generating-a-manifest"&gt;
  &lt;/a&gt;
  Generating a manifest
&lt;/h2&gt;

&lt;p&gt;I am going to use &lt;a href="https://www.simicart.com/manifest-generator.html"&gt;Simicart &lt;/a&gt; for generating the manifest. You can simply add the details of your app and it will generate a manifest. Make sure to select &lt;code&gt;standalone&lt;/code&gt; in the display&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbVTZ_qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105021139/isB5mFO9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbVTZ_qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105021139/isB5mFO9g.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The generated manifest will look similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "theme_color": "#000000",
  "background_color": "#ffffff",
  "display": "standalone",
  "scope": "/",
  "start_url": "/",
  "name": "Next PWA",
  "short_name": "PWA",
  "description": "This app is to demo PWA in Next.js",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-256x256.png",
      "sizes": "256x256",
      "type": "image/png"
    },
    {
      "src": "/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you are done with adding all the details, install the zip file and extract it. After you have extracted, drag and drop all the files in the public folder.&lt;br&gt;
 We will rename &lt;code&gt;manifest.webmanifest&lt;/code&gt; to &lt;code&gt;manifest.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the public directory should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOYYMdf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631104061093/p46yEEcg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOYYMdf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631104061093/p46yEEcg8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-raw-documentjs-endraw-"&gt;
  &lt;/a&gt;
  Creating  &lt;code&gt;_document.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;_document.js&lt;/code&gt; in the pages folder and add the following piece of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Document, { Html, Head, Main, NextScript } from "next/document";

class MyDocument extends Document {
  render() {
    return (
      &amp;lt;Html&amp;gt;
        &amp;lt;Head&amp;gt;
          &amp;lt;link rel="manifest" href="/manifest.json" /&amp;gt;
          &amp;lt;link rel="apple-touch-icon" href="/icon.png"&amp;gt;&amp;lt;/link&amp;gt;
          &amp;lt;meta name="theme-color" content="#fff" /&amp;gt;
        &amp;lt;/Head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;Main /&amp;gt;
          &amp;lt;NextScript /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/Html&amp;gt;
    );
  }
}

export default MyDocument;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-pwa-in-next-config"&gt;
  &lt;/a&gt;
  Configuring PWA in Next config
&lt;/h3&gt;

&lt;p&gt;We will need to add some data for configuring the PWA, so add this snippet in &lt;code&gt;next.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const withPWA = require("next-pwa");

module.exports = withPWA({
  pwa: {
    dest: "public",
    register: true,
    skipWaiting: true,
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have made your app a PWA 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqVgS4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631107349883/VTP2RgjEd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqVgS4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631107349883/VTP2RgjEd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-better-development-environment"&gt;
  &lt;/a&gt;
  Making better development environment
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#adding-the-autogenerated-files-to-gitignore"&gt;
  &lt;/a&gt;
  Adding the auto-generated files to .gitignore
&lt;/h4&gt;

&lt;p&gt;If you notice then a few files like service workers, and workbox has been added to the public folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dp0jIg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106642797/L1CYGDmvD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dp0jIg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106642797/L1CYGDmvD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These files change constantly and are not needed in your GitHub. So, do the following to remove them from production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delete &lt;code&gt;sw.js&lt;/code&gt;, &lt;code&gt;sw.js.map&lt;/code&gt;, &lt;code&gt;workbox-****.js&lt;/code&gt; and &lt;code&gt;workbox-****.js.map&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the files to &lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PWA files
**/public/sw.js
**/public/workbox-*.js
**/public/worker-*.js
**/public/sw.js.map
**/public/workbox-*.js.map
**/public/worker-*.js.map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now if you restart the server then the filenames will be dark&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmh5y8xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106954234/TB-1YKiLR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmh5y8xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106954234/TB-1YKiLR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disabling-pwa-in-development"&gt;
  &lt;/a&gt;
  Disabling PWA in development
&lt;/h4&gt;

&lt;p&gt;In development, you might want to disable PWA because it gives a lot of console messages.&lt;/p&gt;

&lt;p&gt;We will disable it like this in &lt;code&gt;next.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const withPWA = require("next-pwa");

module.exports = withPWA({
  pwa: {
    dest: "public",
    register: true,
    skipWaiting: true,
    disable: process.env.NODE_ENV === "development",
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you found this useful. See ya in the next one ✌🏻&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ARNN_zmrwcw"&gt;James's video&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jamesqquick"&gt;Follow James on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Skeleton Screen Loading Animation using HTML &amp; CSS</title>
      <author>Shantanu Jana</author>
      <pubDate>Tue, 05 Oct 2021 16:36:09 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3</link>
      <guid>https://dev.to/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3</guid>
      <description>&lt;p&gt;In this article I have shown how Skeleton Screen Loading Animation is created using HTML CSS and JavaScript. I created this animation on a &lt;a href="https://www.foolishdeveloper.com/2021/09/simple-profile-card-ui-design.html"&gt;profile card&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You will see various websites where you can see &lt;strong&gt;Skeleton Loading Animation&lt;/strong&gt; before loading any element. Undoubtedly it enhances the quality and beauty of the website a lot. You need to have a basic idea about HTML and CSS to make it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skeleton-screen-loading-animation"&gt;
  &lt;/a&gt;
  Skeleton Screen Loading Animation
&lt;/h2&gt;

&lt;p&gt;I have shown this kind of effect before but it was not effective. In this case I have used JavaScript to make it work. This &lt;a href="https://www.foolishdeveloper.com/2021/09/skeleton-screen-loading-animation.html"&gt;Skeleton Screen Loading Animation&lt;/a&gt; will continue for three seconds when you open the web page. After three seconds this effect is off and all the information on the profile card can be seen.&lt;/p&gt;

&lt;p&gt;Below I have given a live demo that will help you know how it works.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fghty/embed/yLXGqZE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you create an HTML, CSS and JavaScript file. You can use this link to download the source code. If you are a beginner, follow the tutorial below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-web-page"&gt;
  &lt;/a&gt;
  Step 1: Design the web page
&lt;/h3&gt;

&lt;p&gt;To create this animation, I first designed the webpage with CSS code. Here I have used light blue as the background color of the web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eff7f2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Lato"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3IUaZn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rb3fwz9lla2jnmczcx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3IUaZn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rb3fwz9lla2jnmczcx.jpg" alt="Design the web page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-basic-structure-of-skeleton-loading"&gt;
  &lt;/a&gt;
  Step 2: Basic structure of Skeleton Loading
&lt;/h3&gt;

&lt;p&gt;Now I have created the basic structure of this Skeleton Loading Animation or Profile Card. I have used the &lt;code&gt;width: 300px&lt;/code&gt; and &lt;code&gt;height: 400px&lt;/code&gt; of this profile card. A shadow has been used around the card to enhance the beauty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-card skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ppBixttf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiyr8facewnna20lubh9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ppBixttf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiyr8facewnna20lubh9.jpg" alt="Basic structure of Skeleton Loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-profile-image-and-cover-image"&gt;
  &lt;/a&gt;
  Step 3: Add profile image and cover image
&lt;/h3&gt;

&lt;p&gt;Now I have added profile image and cover image in profile card. I have used the width and height of the profile image 100 px. I used &lt;code&gt;border-radius: 50%&lt;/code&gt; to make it completely round. I have added a cover image with &lt;code&gt;height: 150px&lt;/code&gt; and width: 100%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"user profile image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img1.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7JeGmnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd44pjk2q0ato9o5je1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7JeGmnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd44pjk2q0ato9o5je1.jpg" alt="Add profile image and cover image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-add-basic-information-to-the-card"&gt;
  &lt;/a&gt;
  Step 4: Add basic information to the card
&lt;/h3&gt;

&lt;p&gt;Now I have added some basic information in this Skeleton Screen Loading Animation or Profile Card. I used margin-top: 35px to keep all the information from top to bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Anamika Roy&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-email hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Web Designer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-text hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum ... consectetur. &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0f5fc0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-8bTsKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mjy7oln31ooup6ydxjm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-8bTsKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mjy7oln31ooup6ydxjm.jpg" alt="Add basic information to the card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-contact-button"&gt;
  &lt;/a&gt;
  Step 5: Create contact button
&lt;/h3&gt;

&lt;p&gt;Now I have added a contact button in it. I have used the button &lt;code&gt;height: 35px&lt;/code&gt;, &lt;code&gt;width 60%&lt;/code&gt; and background color blue. I have used font-weight: bold to increase the size of the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-user hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.contact-user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#035f7d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NL8kypuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lant0cy7ebkgedh7pqz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NL8kypuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lant0cy7ebkgedh7pqz.jpg" alt="Create contact button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-loading-effect-to-images"&gt;
  &lt;/a&gt;
  Step 5: Add Loading Effect to images
&lt;/h3&gt;

&lt;p&gt;First I added animation between the profile image and the cover image. However, there is no animation in the image, only I have used gray color in the background. The way I designed the profile image and the cover image is the same way I designed it here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iu7cjUb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ghj5th10vbuhd2ozo8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iu7cjUb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ghj5th10vbuhd2ozo8.jpg" alt="Add Loading Effect to images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-add-loading-effect-to-the-information"&gt;
  &lt;/a&gt;
  Step 6: Add Loading Effect to the information
&lt;/h3&gt;

&lt;p&gt;Now I have added animation and color between the text and the button. First I added colors to the buttons and texts, then I added animations using &lt;code&gt;@keyframes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;animation-duration: 2s&lt;/code&gt; used to help make this animation work every two seconds. Here animation means a black shadow will continue to travel from left to right every 2 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.hide-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.hide-text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#d5d5d5&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have implemented this animation using @keyframes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-wM8YzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjohmn92lreq0gw27iyb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-wM8YzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjohmn92lreq0gw27iyb.jpg" alt="Add Loading Effect to the information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-turn-off-skeleton-loading-effect-using-javascript"&gt;
  &lt;/a&gt;
  Step 7: Turn off Skeleton Loading Effect using JavaScript
&lt;/h3&gt;

&lt;p&gt;Now the most important thing is to turn off the animation using JavaScript. Above we have added Skeleton Screen Loading Animation using css. &lt;/p&gt;

&lt;p&gt;This animation will continue indefinitely. So now after some time using JavaScript you have to turn off that animation and instruct to view all the information in the profile card. I set the time to 3000 milliseconds using &lt;code&gt;setTimeout&lt;/code&gt;. That means after &lt;code&gt;3000 milliseconds&lt;/code&gt; that gray color animation will be hidden.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to use 4 seconds instead of these 3 seconds then you have to use 4000 instead of 3000 here.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Loading finished&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;$el&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.hide-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hide-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFBx2xrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n9n2kkpkj9ublipoo5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFBx2xrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n9n2kkpkj9ublipoo5.jpg" alt="Skeleton Screen Loading Animation using HTML CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you learned from this tutorial how to create &lt;strong&gt;Skeleton Loading Animation using HTML CSS and JavaScript&lt;/strong&gt;. I have already shared many more such tutorials, you can see those designs.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Two ways to integrate Javadoc into IntelliJ IDEA</title>
      <author>scottshipp</author>
      <pubDate>Tue, 05 Oct 2021 15:55:33 +0000</pubDate>
      <link>https://dev.to/scottshipp/two-ways-to-integrate-javadoc-into-intellij-idea-leb</link>
      <guid>https://dev.to/scottshipp/two-ways-to-integrate-javadoc-into-intellij-idea-leb</guid>
      <description>&lt;p&gt;Do you Google for Javadoc? Isn't it annoying? Picture this: you're in a flow state, with a full stack on your mind, and a good couple dozen business concepts thrown in, and you just want to double-check the behavior of a given library method. Do you really want to stop what you're doing, open a browser, search for the library documentation, make sure you are looking at the right version, and then navigate to the class and method in question?&lt;/p&gt;

&lt;p&gt;You don't have to!&lt;/p&gt;

&lt;p&gt;Here are two fast and easy ways to add Javadoc to IntelliJ so you can see it using the "Quick Documentation" feature: simply hover your mouse on any piece of code or use the Quick Documentation shortcut key, Ctrl+Q for Linux or Windows and F1 on macOS!&lt;/p&gt;

&lt;p&gt;Now, on to the first way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-maven"&gt;
  &lt;/a&gt;
  Using Maven
&lt;/h2&gt;

&lt;p&gt;On Maven projects, run the &lt;code&gt;dependency:resolve&lt;/code&gt; phase with &lt;code&gt;classifier=javadoc&lt;/code&gt; and IntelliJ will automatically acquire documentation superpowers.&lt;/p&gt;

&lt;p&gt;There are two ways to run this. First, you can run the following Maven command from the terminal inside the root directory for the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mvn dependency:resolve &lt;span class="nt"&gt;-Dclassifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;javadoc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also run that from the "Execute Maven goal" window, which appears when you open the Maven tool window (View &amp;gt; Tool windows &amp;gt; Maven) and press the "M" icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gUME1JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9sigyoogrweb805bl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gUME1JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9sigyoogrweb805bl3.png" alt="The Execute Maven Goal window in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want, you can even tell Maven to &lt;em&gt;always&lt;/em&gt; download Javadoc when available. Navigate to Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Maven &amp;gt; Importing and check the Automatically download documentation checkbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#with-a-url-or-jar-file"&gt;
  &lt;/a&gt;
  With a URL or Jar file
&lt;/h2&gt;

&lt;p&gt;Do you have a URL to some Javadoc on the web? Then open Project Structure, navigate to Libraries, and click the icon that combines a "+" and a globe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7wks6sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo81b2lojco9tlki6uiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7wks6sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo81b2lojco9tlki6uiv.png" alt="The Libraries UI in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the URL and save it.&lt;/p&gt;

&lt;p&gt;If you happen to have the javadoc in a jar file instead, you can use the normal "+" icon you see in this same Project Structure &amp;gt; Libraries window.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-looks-like"&gt;
  &lt;/a&gt;
  What it looks like
&lt;/h2&gt;

&lt;p&gt;With any of those settings in place, you can simply hover your mouse on any piece of code and see the resulting Javadoc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5NVmM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc7rtw2lqenng6174lo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5NVmM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc7rtw2lqenng6174lo.png" alt="Quick Documentation view in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With Javadoc just a mouse-hover away, you can remain focused on the task at hand rather than disrupting your flow and going on a wild goose chase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Miriam Espacio from Pexels&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Mobile Banking Landing Page</title>
      <author>Md Delowar</author>
      <pubDate>Tue, 05 Oct 2021 15:25:42 +0000</pubDate>
      <link>https://dev.to/delowar77680635/mobile-banking-landing-page-d6h</link>
      <guid>https://dev.to/delowar77680635/mobile-banking-landing-page-d6h</guid>
      <description>&lt;p&gt;Download From UIHUT. Get Lifetime Access Only for 99$. Use “dol10” coupon for the extra 10% off.&lt;/p&gt;

&lt;p&gt;More than 14,000 high-quality ui design resources for commercial use. It's easy to download and use. Create your best design website easily. Download from &lt;a href="https://htmltemplates.org/"&gt;https://htmltemplates.org/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNOXkRiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7omn6a6u97x0mxulsfo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNOXkRiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7omn6a6u97x0mxulsfo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>hmlptemplate</category>
      <category>landingpage</category>
      <category>landingpagedesigner</category>
    </item>
    <item>
      <title>React 18 milestone: React-Redux adopts useSyncExternalStore</title>
      <author>Sebastien Lorber</author>
      <pubDate>Tue, 05 Oct 2021 15:20:01 +0000</pubDate>
      <link>https://dev.to/sebastienlorber/react-18-milestone-react-redux-adopts-usesyncexternalstore-102b</link>
      <guid>https://dev.to/sebastienlorber/react-18-milestone-react-redux-adopts-usesyncexternalstore-102b</guid>
      <description>&lt;p&gt;This is a &lt;strong&gt;sample&lt;/strong&gt; from my &lt;a href="https://thisweekinreact.com"&gt;This Week In React&lt;/a&gt; newsletter. &lt;strong&gt;Subscribe for more!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thisweekinreact.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XH1uILnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633438809395/zNdSjKPIY.png" alt="This Week In React newsletter banner"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://github.com/reduxjs/react-redux/releases/tag/v8.0.0-alpha.0"&gt;React-Redux v8 alpha.0&lt;/a&gt; was just  &lt;a href="https://twitter.com/acemarke/status/1444736773142241285"&gt;announced by Mark Erikson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The library is now fully rewritten in TypeScript.&lt;/p&gt;

&lt;p&gt;More importantly, React-Redux v8 is adopting a new React 18 hook &lt;a href="https://github.com/reactwg/react-18/discussions/86"&gt;&lt;code&gt;useSyncExternalStore&lt;/code&gt;&lt;/a&gt; (replacing &lt;code&gt;useMutableSource&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This hook allows React to work properly in concurrent mode and sync with an external state (from Redux) without &lt;a href="https://github.com/reactwg/react-18/discussions/69"&gt;tearing&lt;/a&gt; (the UI can't become inconsistent with store state).&lt;/p&gt;

&lt;p&gt;This hook is the "level 2" (&lt;em&gt;make it right&lt;/em&gt;) of the &lt;a href="https://github.com/reactwg/react-18/discussions/70"&gt;state subscription ladder&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aCxDEZ4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633431540221/DWMU6Iwtc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aCxDEZ4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633431540221/DWMU6Iwtc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/dan_abramov/status/1444742231513051138"&gt;Dan Abramov explains it's an important milestone for React 18&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the first time we’ve been able to move the “meat” of the react-redux bindings implementation &lt;em&gt;into&lt;/em&gt; react itself.&lt;br&gt;
It wasn’t a lot of code, but it relied on a bunch of hacks and complexity that kept growing. Now that “meat” is 5 lines of code, we handle the rest.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSyncExternalStoreExtra&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-sync-external-store/extra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// React-Redux v8 alpha code in useSelector()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSyncExternalStoreExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="c1"&gt;// TODO Need a server-side snapshot here&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;equalityFn&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To ease incremental adoption in libraries today, an external package &lt;a href="https://www.npmjs.com/package/use-sync-external-store"&gt;&lt;code&gt;use-sync-external-store&lt;/code&gt;&lt;/a&gt; has been published, allowing to use this hook with a consistent API on React 16, 17 &amp;amp; 18.&lt;/p&gt;

&lt;p&gt;Unlike the former &lt;code&gt;useMutableSource&lt;/code&gt; API, this new hook supports &lt;a href="https://github.com/reactwg/react-18/discussions/84"&gt;unstable, inline selectors&lt;/a&gt; without re-subscribing, and you won't need to wrap selectors in &lt;code&gt;useCallback&lt;/code&gt; to stabilize them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Not ideal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Simpler&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The community remains very interested to have a native &lt;a href="https://github.com/facebook/react/pull/20646"&gt;&lt;code&gt;useContextSelector()&lt;/code&gt;&lt;/a&gt; hook in React core. &lt;/p&gt;

&lt;p&gt;A performant &lt;code&gt;useContextSelector()&lt;/code&gt; hook would allow Redux to &lt;a href="https://github.com/reduxjs/react-redux/releases/tag/v7.0.1"&gt;try again&lt;/a&gt; passing the store state directly as context value, instead of passing a store object and managing subscriptions internally. React would now hold entirely the Redux state and the React-Redux bindings would move to the &lt;a href="https://github.com/reactwg/react-18/discussions/70"&gt;ladder's stage 3&lt;/a&gt; (&lt;em&gt;make it fast&lt;/em&gt;). This stage would permit React to avoid unnecessary rendering work when a Redux store update happens while a concurrent rendering is in progress. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;useContextSelector&lt;/code&gt; is still under research and is not a mandatory feature for React 18 to land. Andrew Clark &lt;a href="https://github.com/reactwg/react-18/discussions/73"&gt;commented&lt;/a&gt; that it will more likely be released in a minor 18.x release.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building the Modern Web Stack: Babel</title>
      <author>Alex</author>
      <pubDate>Tue, 05 Oct 2021 15:19:30 +0000</pubDate>
      <link>https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp</link>
      <guid>https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-babel"&gt;
  &lt;/a&gt;
  What is Babel?
&lt;/h2&gt;

&lt;p&gt;Babel is a tool that lets you write your Javascript code using all the latest syntax and features, and still run it in older browsers. Babel is a &lt;a href="https://en.wikipedia.org/wiki/Source-to-source_compiler"&gt;transpiler&lt;/a&gt; that will translate your modern JS code into an older version of Javscript that more browsers are able to understand.&lt;/p&gt;

&lt;p&gt;Babel is often built into the tools that we use every day to built modern web applications (like &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; for example) so many developers don't have a full understanding of what the tool actually does. This tutorial is designed to set up a Babel configuration piece by piece and is part of a larger tutorial series in setting up your own custom development environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You will need to have &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed on your machine and available from your terminal. Installing Node will automatically install &lt;a href="https://en.wikipedia.org/wiki/Npm_(software)"&gt;npm&lt;/a&gt; as well, which is what you will use to install Babel.&lt;/p&gt;

&lt;p&gt;If you see version numbers when running the two commands below (your numbers will likely be different than this example) then you are ready to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v15.5.0

npm &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 7.16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a new &lt;code&gt;npm&lt;/code&gt; project. Run the following command to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag will automatically select default values for everything, which is appropriate in our example.&lt;/p&gt;

&lt;p&gt;Next let's create a very basic Javascript file using some modern syntax. Create a file called &lt;code&gt;script.js&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a return value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasThree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a new value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, the &lt;code&gt;arrow function&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt; array method and &lt;code&gt;class&lt;/code&gt; are all features of &lt;a href="https://www.w3schools.com/js/js_es6.asp"&gt;ES6&lt;/a&gt; that won't run properly in older browsers such as &lt;code&gt;Internet Explorer 11&lt;/code&gt; (which unfortunately some organizations still use extensively even in 2021).&lt;/p&gt;

&lt;p&gt;You may also catch the brand new (as of 2021) &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment"&gt;logical OR assignment&lt;/a&gt;. This will not run in versions of Firefox before 79 and versions of Chrome before 85, and it won't run in IE11 at all.&lt;/p&gt;

&lt;p&gt;So what can we do to run this code on older browsers without having to rewrite it ourselves?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-babel"&gt;
  &lt;/a&gt;
  Installing Babel
&lt;/h2&gt;

&lt;p&gt;There are three basic packages we need to accomplish our goal, all of them are part of the Babel ecosystem, but each has a different function. Start by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @babel/core @babel/cli @babel/preset-env &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at what each one is doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@babel/core&lt;/code&gt; - This is the main engine that knows how to transform code based on a set of instructions it is given&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@babel/cli&lt;/code&gt; - This is the actual program we are going to run to trigger the core engine and output a transformed Javascript file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@babel/preset-env&lt;/code&gt; - This is a preset that tells the core engine what kind of transformations to make. It looks at your environment (in our case it will be our &lt;code&gt;package.json&lt;/code&gt; file) to determine what kind of changes need to be made depending on the browsers you wish to support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to add a couple values to our &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;browserslist&lt;/code&gt; - This tells Babel which browsers we are aiming to target. The older / less supported they are, the more work and more transformations Babel will have to make in order for your application to work in these browsers. The syntax is a simple array of strings. You can &lt;a href="https://github.com/browserslist/browserslist"&gt;learn about here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;babel&lt;/code&gt; - This is where we defined all the presets that we will use, as well as any configuration options related to those presets. We will start with the simplest one, &lt;code&gt;@babel/preset-env&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our &lt;code&gt;package.json&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@babel/cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.15.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@babel/core"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.15.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.15.6"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"last 2 Chrome versions"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;devDependencies&lt;/code&gt; should already be there from your &lt;code&gt;npm install&lt;/code&gt;. The other two properties described above you will need to add yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transforming-your-code"&gt;
  &lt;/a&gt;
  Transforming Your Code
&lt;/h2&gt;

&lt;p&gt;At its most basic configuration &lt;code&gt;babel&lt;/code&gt; will transform your modern syntax into the much wider supported &lt;a href="https://www.w3schools.com/js/js_es5.asp"&gt;ES5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's begin with a simple example. Run the following command in your project root directory containing your &lt;code&gt;package.json&lt;/code&gt; file and your &lt;code&gt;script.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx babel script.js &lt;span class="nt"&gt;--out-file&lt;/span&gt; script-transformed.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Presuming you have followed all the instructions so far you should see a new file created called &lt;code&gt;script-transformed.js&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script-transformed.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a return value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasThree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a new value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not much different right? Aside from adding &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;strict mode&lt;/a&gt; nothing has actually changed.&lt;/p&gt;

&lt;p&gt;The reason for this is because of how we have configured our environment in &lt;code&gt;package.json&lt;/code&gt;, which is where &lt;code&gt;@babel/plugin-env&lt;/code&gt; looks in order to decide what it should do.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"last 2 Chrome versions"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are only targeting the most recent 2 versions of Chrome, Babel knows that we have no problem including all the modern JS syntax that we want, it will work fine in those modern browsers.&lt;/p&gt;

&lt;p&gt;But let's say that we are required to support &lt;code&gt;Internet Explorer 11&lt;/code&gt;. We don't want to have to change the way we write our code just to accommodate that browser, but fortunately that's where Babel saves the day. Update your &lt;code&gt;package.json&lt;/code&gt; to add IE11 to your &lt;code&gt;browserslist&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"last 2 Chrome versions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"IE 11"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this command again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx babel script.js &lt;span class="nt"&gt;--out-file&lt;/span&gt; script-transformed.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look at the output this time:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script-transformed.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_classCallCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cannot call a class as a function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sampleFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sampleFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a return value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_classCallCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hasThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasThree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a new value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks a lot different from our original file! Notice that almost all the &lt;code&gt;ES6&lt;/code&gt; terms we discussed above are gone, &lt;code&gt;const&lt;/code&gt; is replaced with &lt;code&gt;var&lt;/code&gt;, our arrow function is replaced with &lt;code&gt;function&lt;/code&gt; syntax, and our &lt;code&gt;class&lt;/code&gt; has been transformed into a basic Javascript &lt;a href="https://javascript.info/object"&gt;object&lt;/a&gt;. We can now take this &lt;code&gt;script-transformed.js&lt;/code&gt; file, serve it up to &lt;code&gt;Internet Explorer 11&lt;/code&gt; and it would run just fine... almost!&lt;/p&gt;

&lt;p&gt;We still have one small problem: The &lt;code&gt;includes&lt;/code&gt; method was not transformed. Why is that? To understand the reason, we first need to understand &lt;code&gt;polyfills&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyfills"&gt;
  &lt;/a&gt;
  Polyfills
&lt;/h2&gt;

&lt;p&gt;To understand why we need &lt;code&gt;polyfills&lt;/code&gt; we have to understand the difference between what is new &lt;code&gt;syntax&lt;/code&gt; and what is new &lt;code&gt;functionality&lt;/code&gt;. The &lt;code&gt;includes&lt;/code&gt; method is new &lt;code&gt;functionality&lt;/code&gt;. It has its own logic behind it, and simply changing the syntax of how the code is written won't explain to older browsers how the logic of the &lt;code&gt;includes&lt;/code&gt; method is supposed to function.&lt;/p&gt;

&lt;p&gt;For new features that introduce new functionality we need something called a &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"&gt;polyfill&lt;/a&gt;. Polyfills are simply just the source code for a method like &lt;code&gt;includes&lt;/code&gt; that you bundle along with your application to essentially teach older browsers how it works.&lt;/p&gt;

&lt;p&gt;You do not need to write polyfills yourself, polyfills for just about every feature of JS already exist and are easy to include. In future tutorials we will get into bundling and only including the specific ones that we need, but until then we can simply include a library called &lt;a href="https://www.npmjs.com/package/core-js"&gt;core-js&lt;/a&gt; and instantly give our app access to all modern JS features even on older browsers.&lt;/p&gt;

&lt;p&gt;To test it out let's load the entirety of the &lt;code&gt;core-js&lt;/code&gt; library into our app. Since we are still not yet using a bundler, we will simply load the already bundled and &lt;code&gt;minified&lt;/code&gt; version from the web into our app. If you don't already have an &lt;code&gt;index.html&lt;/code&gt; template, create this file in your project root directory:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script-transformed.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll begin by trying to load the file in IE11. If your machine doesn't have Internet Explorer 11, you can simply follow with the example here. This example is running on &lt;code&gt;Windows 11&lt;/code&gt; which has removed IE11 entirely.  Fortunately &lt;code&gt;Microsoft Edge&lt;/code&gt; comes with an &lt;a href="https://docs.microsoft.com/en-us/deployedge/edge-ie-mode"&gt;IE 11 Mode&lt;/a&gt; for testing applications that require backward compatibility.&lt;/p&gt;

&lt;p&gt;When we run Babel and try to load our &lt;code&gt;script-transformed.js&lt;/code&gt; file in IE11 we get the following error on the console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKtFZK95--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z58qnbnh3xrwevh2ehbe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKtFZK95--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z58qnbnh3xrwevh2ehbe.jpg" alt="Array Includes Error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add the &lt;code&gt;core-js&lt;/code&gt; library to a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; in our &lt;code&gt;index.html&lt;/code&gt;.  You can find the most updated minified bundle URL &lt;a href="https://cdnjs.com/libraries/core-js"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/core-js/3.18.1/minified.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script-transformed.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we reload the page in IE11 we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71vIiZ76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w3gl19dmgk4pp9y4bw1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71vIiZ76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w3gl19dmgk4pp9y4bw1.jpg" alt="Array Includes Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works! We're writing modern Javascript and running it in an old dinosaur browser! That's great!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;You should now have a fairly solid grasp of the fundamentals of what Babel is, and how it works.  Of course there's a lot more to discover.  In future tutorials we'll go deeper into two more of the major presets that are supported by Babel for transpiling supersets of Javascript: &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Before we do that we'll first go over the fundamentals of each (similar to this introduction) before diving into how to configure them all together into a modern web stack.  Stay tuned.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>babel</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Join Hacktoberfest 2021 and contribute to QuestDB!</title>
      <author>PSWU</author>
      <pubDate>Tue, 05 Oct 2021 15:16:50 +0000</pubDate>
      <link>https://dev.to/pswu11/join-hacktoberfest-2021-and-contribute-to-questdb-3o9p</link>
      <guid>https://dev.to/pswu11/join-hacktoberfest-2021-and-contribute-to-questdb-3o9p</guid>
      <description>&lt;p&gt;Hacktoberfest 2021 is starting today! For the first time, &lt;a href="https://questdb.io"&gt;QuestDB&lt;/a&gt; is participating as an open source project. We're super excited to meet with other open source contributors and maintainers.&lt;/p&gt;

&lt;p&gt;For those who're not familiar with Hacktoberfest, it's a month-long online celebration for open source software and communities. By &lt;a href="https://hacktoberfest.digitalocean.com/resources/participation"&gt;contributing to open source projects&lt;/a&gt;, you can get a special edition Hacktoberfest T-shirt 👕 or choose to plant a tree for our planet. 🌴&lt;/p&gt;

&lt;p&gt;Many widely used open-source projects are maintained by a small number of developers or even a single person without any financial incentives. And we rely so much on their perseverance and commitment! Participating in Hacktoberfest is one of our approaches to raise awareness and encourage more people to contribute to open source. To celebrate Hacktoberfest, we put together some hints for you to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  ⛳ Get started
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you have a GitHub (or GitLab) account&lt;/li&gt;
&lt;li&gt;Sign up for the event at
&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest's official website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Go to open source repositories that opt in for Hacktoberfest:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;QuestDB Core Project&lt;/strong&gt;:
&lt;a href="https://github.com/questdb/questdb"&gt;https://github.com/questdb/questdb&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;QuestDB Documentation&lt;/strong&gt;:
&lt;a href="https://github.com/questdb/questdb.io"&gt;https://github.com/questdb/questdb.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or, look for other open source projects labeled with &lt;code&gt;hacktoberfest&lt;/code&gt; in their topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you're new to the project, look for open issues labeled with &lt;code&gt;good first issues&lt;/code&gt; or &lt;code&gt;help wanted&lt;/code&gt; to get started&lt;/li&gt;
&lt;li&gt;Before you commit, don't forget to read &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; and follow the contribution guideline 👍&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tees-trees-and-questdb-swag"&gt;
  &lt;/a&gt;
  🎁 Tees, trees and QuestDB swag
&lt;/h2&gt;

&lt;p&gt;Once you reach the &lt;a href="https://hacktoberfest.digitalocean.com/resources/participation"&gt;contribution target&lt;/a&gt; of &lt;strong&gt;4 valid pull requests&lt;/strong&gt;, you can claim the reward from the official organizer! In addition, if you successfully contribute to QuestDB projects, we offer extra SWAG for you through our &lt;a href="https://questdb.io/community/"&gt;SWAG program&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To make sure that your pull request is valid, please follow Hacktoberfest's &lt;a href="https://hacktoberfest.digitalocean.com/resources/qualitystandards"&gt;quality standard&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-support-and-updates"&gt;
  &lt;/a&gt;
  ℹ️ Get support and updates
&lt;/h2&gt;

&lt;p&gt;Some questions might appear when you're trying to contribute to QuestDB projects; here are the places to get support and hints from our team:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QuestDB Community Slack: &lt;a href="https://slack.questdb.io"&gt;https://slack.questdb.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub Discussions:
&lt;a href="https://github.com/questdb/questdb/discussions"&gt;https://github.com/questdb/questdb/discussions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;QuestDB Documentation:
&lt;a href="https://questdb.io/docs/introduction/"&gt;https://questdb.io/docs/introduction/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, don't forget to follow us on social media to receive the latest updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QuestDB Twitter: &lt;a href="https://twitter.com/questdb"&gt;https://twitter.com/questdb&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;QuestDB Linkedin:
&lt;a href="https://www.linkedin.com/company/questdb/"&gt;https://www.linkedin.com/company/questdb/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>typescript</category>
    </item>
    <item>
      <title>What is Silo Structure in SEO?</title>
      <author>Bhavyashah</author>
      <pubDate>Tue, 05 Oct 2021 15:13:57 +0000</pubDate>
      <link>https://dev.to/bhavyashah/what-is-silo-structure-in-seo-15gh</link>
      <guid>https://dev.to/bhavyashah/what-is-silo-structure-in-seo-15gh</guid>
      <description>&lt;p&gt;In the past few years, many have been promoting this theory that you must have silo structure in order to rank in Google. But do you know what a silo is? What does it mean to have a silo structure? &lt;br&gt;
According to Wikipedia , a "&lt;a href="https://en.wikipedia.org/wiki/Silo"&gt;silo&lt;/a&gt;" is a tall cylindrical structure for storing bulk materials. In the world of SEO, it's called a silo structure because it's supposed to use "silos" within your website to promote authority and trust. In fact, in his video below, Danny Sullivan even called the word "silos" when he meant "subdomains." The exact definition from Google reads:&lt;/p&gt;

&lt;h1&gt;What is Silo Structure in SEO?&lt;/h1&gt;

&lt;p&gt;A silo structure is a way to organize pages on the web so as to channel users from one page within your website to another. In practice, this means organizing the pages on your site according to a user's intent and then arranging your internal linking structure so that a user who navigates through successive pages in a top-down fashion will be led to the relevant destination page without a detour or backtracking.&lt;/p&gt;

&lt;h2&gt;Important of Silo Structure in SEO&lt;/h2&gt;

&lt;p&gt;The Silo Structure is the important topic in SEO since Google algorithm is development to follow the Content Structure. Table of contents (TOC) is not be considered in this structure because the content has different level such as H-Content (High-quality content) and L-Content (Low-quality content).&lt;/p&gt;

&lt;p&gt;I hope you understand what is Silo structure in website? &amp;amp; Important of Silo Structure.&lt;/p&gt;

&lt;p&gt;If you want to know about &lt;a href="https://www.blogtriggers.com/2021/09/seo-silo-structure-in-blogger.html"&gt;How to add Silo structure in blogger&lt;/a&gt;, then you can ask me.&lt;/p&gt;

</description>
      <category>website</category>
      <category>seo</category>
    </item>
    <item>
      <title>Handling Multiple Lambda functions </title>
      <author>Vivek Siva</author>
      <pubDate>Tue, 05 Oct 2021 15:12:35 +0000</pubDate>
      <link>https://dev.to/viv/handling-multiple-lambda-functions-22pi</link>
      <guid>https://dev.to/viv/handling-multiple-lambda-functions-22pi</guid>
      <description>&lt;p&gt;Don't do this -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVklp_MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrv0std8n6bdo1xawag6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVklp_MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrv0std8n6bdo1xawag6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Problems -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Er-x5Xj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkhfnlhb6bq43q7nmgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Er-x5Xj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkhfnlhb6bq43q7nmgr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solution -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8AZlM8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1dwg3zvrvszgkrlhlnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8AZlM8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1dwg3zvrvszgkrlhlnv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How your architecture should look -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xCrHBAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs07m6el56f3k22fsd1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xCrHBAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs07m6el56f3k22fsd1q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;High Level -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqlmNBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx4ky9onokyflwaemjyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqlmNBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx4ky9onokyflwaemjyl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>Clean Conventional Commits</title>
      <author>Jonathan Irvin</author>
      <pubDate>Tue, 05 Oct 2021 15:11:25 +0000</pubDate>
      <link>https://dev.to/sublimegeek/clean-conventional-commits-40l8</link>
      <guid>https://dev.to/sublimegeek/clean-conventional-commits-40l8</guid>
      <description>&lt;p&gt;Let’s face it, Git is a chore.  It’s about as exciting as cold oatmeal. However, when used properly, it can save millions™.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-sanity-checks-for-your-commits"&gt;
  &lt;/a&gt;
  5 Sanity Checks For Your Commits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frequent"&gt;
  &lt;/a&gt;
  Frequent
&lt;/h3&gt;

&lt;p&gt;The more often you commit, the better you track your changes and have the ability to revert if needed.  Frequent and small commits are easily merged without conflict.  It’s like saving a game, only better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#atomic"&gt;
  &lt;/a&gt;
  Atomic
&lt;/h3&gt;

&lt;p&gt;Atoms are small and your commits should be, too.  Don’t cram 8 hours of work into a single commit. &lt;a href="https://en.wikipedia.org/wiki/Atomicity_(database_systems)"&gt;Atomicity&lt;/a&gt; should also apply to your commits.  Everything that’s in the commit should be related.  This allows you to easily revert without undoing unrelated changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#descriptive"&gt;
  &lt;/a&gt;
  Descriptive
&lt;/h3&gt;

&lt;p&gt;What’s the last thing you need when moving? Mislabeled boxes or boxes with incorrect labels.  Commits should be written in the imperative sense.  They should describe what they DO, not what they DID.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decentralized"&gt;
  &lt;/a&gt;
  Decentralized
&lt;/h3&gt;

&lt;p&gt;Git, in its design, allows complete shared “ledgers” of changes between each clone of the repo.  The entire history of the project is kept on every machine.  As such, don’t let commits stay on your local machine.  If you have a remote repo, keep your code published somewhere else. You never know when your laptop will cache on fire, become self-aware, or worse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable"&gt;
  &lt;/a&gt;
  Immutable
&lt;/h3&gt;

&lt;p&gt;Git gives you the “keys to the kingdom” and allows you to do any number of destructive operations to your repo.  I’ve seen bad merges go down and months of work lost from one wrong move.  As such, treat your commits as immutable.  Once they have been written, they are sealed for all eternity.  If you need to make changes, revert a commit and make a proper change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-conventional-commits"&gt;
  &lt;/a&gt;
  What are "Conventional" commits?
&lt;/h2&gt;

&lt;p&gt;As Git gives you all the freedom in the world to name your branches and commits whatever you want, it’s a good idea to have a common convention for how those commit labels are authored.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;strong&gt;td;lr&lt;/strong&gt; &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#summary"&gt;(Summary)&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;

[optional body]

[optional footer(s)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, commits can be multi-line and are written like emails. 99% of the time, however, you will be focusing on the first line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bare-minimum"&gt;
  &lt;/a&gt;
  Bare minimum
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbqzRw8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d22ex8ohk2v7tf6rrvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbqzRw8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d22ex8ohk2v7tf6rrvy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scared-dont-be"&gt;
  &lt;/a&gt;
  Scared? Don't be.
&lt;/h3&gt;

&lt;p&gt;I know what you're thinking...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvAK5yx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwl7y72ugwwa6q8xvzqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvAK5yx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwl7y72ugwwa6q8xvzqx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily there are tools that help this process go super smooth.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Commitizen CLI - &lt;a href="https://commitizen-tools.github.io/commitizen/"&gt;https://commitizen-tools.github.io/commitizen/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VS Code Extension - &lt;a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits"&gt;https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commitlint - &lt;a href="https://commitlint.js.org/"&gt;https://commitlint.js.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other Tools - &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#tooling-for-conventional-commits"&gt;https://www.conventionalcommits.org/en/v1.0.0/#tooling-for-conventional-commits&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJHWrNDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc7cyytbnhptf22ilwm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJHWrNDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc7cyytbnhptf22ilwm2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-me-the-deets-already"&gt;
  &lt;/a&gt;
  Give me the deets already.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#type-required-spec"&gt;
  &lt;/a&gt;
  Type (Required) &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#specification"&gt;(Spec)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;These categorize a commit and tell you what kind of change this is.  Here are examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt; - for new features&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fix&lt;/strong&gt; - for defects or bugs&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chore&lt;/strong&gt; - for changes that don’t alter the source, but necessary&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ci&lt;/strong&gt; - for ci pipeline changes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;docs&lt;/strong&gt; - for documentation changes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;perf&lt;/strong&gt; - for performance enhancements&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refactor&lt;/strong&gt; - for refactors; altering the code, but not changing functionality&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;revert&lt;/strong&gt; - reverting changes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style&lt;/strong&gt; - for cosmetic changes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt; - for unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#scope-optional-spec"&gt;
  &lt;/a&gt;
  Scope (Optional) &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#specification"&gt;(Spec)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Scope allows you to box your commit into a specific feature, file, or sub-set of the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fix(Navigation): change Loggin to Login

chore(deps): upgrade Jest to v24.5.7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#body-optional-spec"&gt;
  &lt;/a&gt;
  Body (Optional) &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#specification"&gt;(Spec)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Just like the body of an email, if you want to add more of a description to your commit, you can do so below the first line.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If the commit contains a BREAKING CHANGE, this goes in the body of the commit.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;feat(Authentication): update cipher for better security

 BREAKING CHANGE all security keys will need to be regenerated and deployed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#footer-optional-spec"&gt;
  &lt;/a&gt;
  Footer (Optional) &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#specification"&gt;(Spec)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Footers are optional, but allow for ticket references to be made in the commit without clogging up the commit subject line.  The follow a specific format: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;..."each footer MUST consist of a word token, followed by either a : or # separator, followed by a string value."&lt;br&gt;
&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#specification"&gt;Conventional Commits&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are several tools that will parse commit messages and automatically make links to tickets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;refactor(Header): correct minor typos in code

see the issue for details

Refs: JIRA-9999
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWjT6Kly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05biezzxtqo6rpulzqup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWjT6Kly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05biezzxtqo6rpulzqup.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faq-source"&gt;
  &lt;/a&gt;
  FAQ &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/#faq"&gt;(source)&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-should-i-deal-with-commit-messages-in-the-initial-development-phase"&gt;
  &lt;/a&gt;
  How should I deal with commit messages in the initial development phase?
&lt;/h3&gt;

&lt;p&gt;Proceed as if you’ve already released the product. Typically somebody, even if it’s your fellow software developers, is using your software. They’ll want to know what’s fixed, what breaks etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-the-types-in-the-commit-title-uppercase-or-lowercase"&gt;
  &lt;/a&gt;
  Are the types in the commit title uppercase or lowercase?
&lt;/h3&gt;

&lt;p&gt;Any casing may be used, but it’s best to be consistent.&lt;/p&gt;

&lt;p&gt;Although, more often than not, lowercase is used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-do-if-the-commit-conforms-to-more-than-one-of-the-commit-types"&gt;
  &lt;/a&gt;
  What do I do if the commit conforms to more than one of the commit types?
&lt;/h3&gt;

&lt;p&gt;Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#doesnt-this-discourage-rapid-development-and-fast-iteration"&gt;
  &lt;/a&gt;
  Doesn’t this discourage rapid development and fast iteration?
&lt;/h3&gt;

&lt;p&gt;It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors. &lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
