<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HacktoberFest '21 Devlog #1: Starting the adventure</title>
      <author>Danix</author>
      <pubDate>Sat, 02 Oct 2021 19:31:44 +0000</pubDate>
      <link>https://dev.to/danix421/hacktoberfest-21-devlog-1-starting-the-adventure-4pf0</link>
      <guid>https://dev.to/danix421/hacktoberfest-21-devlog-1-starting-the-adventure-4pf0</guid>
      <description>&lt;p&gt;HacktoberFest 2021 started yesterday, on October 1st (for me September 30th), and I registered myself to help open source "one contribution at a time".&lt;br&gt;
I'm very happy to make part of this developer effort to empower the future of software and coding. I hope this year goes better than the earlier ones!&lt;/p&gt;

&lt;p&gt;This is the first part of a devlogs series I'm going to do thought all October, sharing my experience on this HacktoberFest. It's the first time I do something like, so I'll try my best.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#day-1"&gt;
  &lt;/a&gt;
  Day 1
&lt;/h1&gt;

&lt;p&gt;I began preparing myself for the event, making some (small) Pull Requests, searching good repositories to contribute to, getting a good community to talk about the event, and other stuff.&lt;br&gt;
I contributed to a few repositories with random code.&lt;br&gt;
I was very newbie and didn't know what to do, so there where not much effort.&lt;/p&gt;

&lt;p&gt;I just hope these Pull Requests doesn't make me be banned from HacktoberFest üòê.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#day-2-today"&gt;
  &lt;/a&gt;
  Day 2 (today)
&lt;/h1&gt;

&lt;p&gt;I'm beginning to make more quality Pull Requests, so I can really begin this HacktoberFest. I firstly contributed to a collection of website components on GitHub, and now I'm working on other contributions. It's my first year, so I'm very nervious of making something wrong.&lt;br&gt;
I'm doing my best. I want to show my real coding skills, by making valuable code for people üñ•Ô∏è. To be honest, I'm really proud for having joined to HacktoberFest üòÑ.&lt;br&gt;
I hope everything goes good.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last words
&lt;/h1&gt;

&lt;p&gt;At this point, I want to thank all people that are helping me. You all are great people üòé.&lt;br&gt;
I also want to recommend any developer searching for a coding community to join to the Devcord Discord community; they are a great community, where you can code along other people, get help, chat about (almost) any topic and other stuff. You can join with this link: &lt;a href="https://discord.gg/devcord"&gt;https://discord.gg/devcord&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking, and good luck! ‚òï&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How I Created an Interview CLI with Node.js for self-interview preparation</title>
      <author>karthikdevarticles</author>
      <pubDate>Sat, 02 Oct 2021 19:04:34 +0000</pubDate>
      <link>https://dev.to/karthikdevarticles/how-i-created-an-interview-cli-with-node-js-for-self-interview-preparation-39g</link>
      <guid>https://dev.to/karthikdevarticles/how-i-created-an-interview-cli-with-node-js-for-self-interview-preparation-39g</guid>
      <description>&lt;p&gt;Hi Guys, In this article, we will focus on topics of Node.js, CLI, and Interview Preparation.&lt;/p&gt;

&lt;p&gt;I have created a self-interview preparation CLI toolkit, which will show me random questions whenever I run a CLI command called "interview".&lt;/p&gt;

&lt;p&gt;Sounds cool right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;I felt I would require a real-time experience of attending an interview, but I wanted to have control over what I could be expecting, and still having the random unexpectedness of attending an interview.&lt;/p&gt;

&lt;p&gt;This simple project I felt was in the right direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitestools-required"&gt;
  &lt;/a&gt;
  Prerequisites/Tools required.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Latest version of  &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed(I used v14.18.0)&lt;/li&gt;
&lt;li&gt;Text editor - &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, open your project folder and enter the below commands to create and initiate the node.js project setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir interview-cli
cd interview-cli
npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the interview-cli folder and create a bin folder and an index.js file within it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyErkzZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633186344733/tne5Iyehm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyErkzZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633186344733/tne5Iyehm.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//bin/index.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to the Mock Interview!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A string that begins with &lt;code&gt;#!&lt;/code&gt; is called a ‚Äúshebang‚Äù. With this string, we are explicitly stating the command line/terminal to run our script with &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now open the &lt;code&gt;package.json&lt;/code&gt; file and update the &lt;code&gt;main&lt;/code&gt; key value to the path &lt;code&gt;"bin/index.js"&lt;/code&gt; and append a new key &lt;code&gt;bin&lt;/code&gt; with the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"interview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/index.js"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure you add a comma(",") to the end of the previous line for the above step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; must look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"interview-cli"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bin/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"interview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can run the application like any other node application with the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But since our goal is to run the application from anywhere, I want to simply open my computer/laptop and hit the command line to prepare for the interview. For achieving that, we install our application globally with the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs our script globally. This means the "interview" command mentioned in the &lt;code&gt;bin&lt;/code&gt; key section in the &lt;code&gt;package.json&lt;/code&gt; file is made available to the command line.&lt;/p&gt;

&lt;p&gt;Let's run our script globally with the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvCbU_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633187935207/gI-b6Y2Af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvCbU_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633187935207/gI-b6Y2Af.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now create few questions for the interview in a file called &lt;code&gt;mock-interview-questions.txt&lt;/code&gt; at the root of the project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EiVpD3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633191536251/YJhAV-vRl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EiVpD3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633191536251/YJhAV-vRl.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add the script to show a random interview question when we enter "interview" in the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//bin/index.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mock-interview-questions.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For the tutorial I have kept the number of questions to 10, but in reality, I would suggest you add at least 50 questions for keeping the interview interesting and helpful for you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-output"&gt;
  &lt;/a&gt;
  Final Output
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_owsDOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198127126/wYsvK3N4D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_owsDOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198127126/wYsvK3N4D.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kh_gdmHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198067346/azbklHLAh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kh_gdmHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198067346/azbklHLAh.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#if-you-would-like-to-support-my-work"&gt;
  &lt;/a&gt;
  If you would like to support my work:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/karthikdevblog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;br&gt;
and Follow my Blog at(&lt;a href="https://karthikdevarticles.com/"&gt;https://karthikdevarticles.com/&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python: Reimaging Constants</title>
      <author>Parth Agarwal</author>
      <pubDate>Sat, 02 Oct 2021 18:58:26 +0000</pubDate>
      <link>https://dev.to/ra101/python-reimaging-constants-1ghh</link>
      <guid>https://dev.to/ra101/python-reimaging-constants-1ghh</guid>
      <description>&lt;p&gt;A different implementation of constant for python&lt;/p&gt;

&lt;p&gt;I couldn't find a good implementation of constants, so created my own! Let's get started!&lt;/p&gt;

&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it Should work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"„Äà RA „Äâ"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Links.GITHUB&lt;/code&gt; should return &lt;code&gt;https://github.com/ra101&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;Link.GITHUB = 'new_value'&lt;/code&gt; or &lt;code&gt;Links.NEW_CONTANTS = NEW_VALUE&lt;/code&gt; both should return None, without assigning or creating new field&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#here-is-how-i-made-it"&gt;
  &lt;/a&gt;
  Here is How I made it!
&lt;/h1&gt;

&lt;p&gt;1) We need to mock all setter in a meta class, which will be used by main class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Meta Class for Constant, How Constant class would behave
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.5) Lets add a external setter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# A external set method to make sure we can update value in __new__
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Override &lt;code&gt;__new__&lt;/code&gt; to make the actual class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        adding __keys__, __values__ fields
        and keys(), values() methods
        """&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__values__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__keys__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.5) Add below methods for polishing the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# adding __getitem__ to make objects "subscriptable"
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# In case of for loops
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Finally Lets create the class!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Now this class can be inherited whenever required to make constants
    """&lt;/span&gt;

    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally! We are Done! We Created a almost immutable class that could be used as constants&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"„Äà RA „Äâ"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;

    &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'any_new_value'&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Links.WEB: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Author.values(): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;dict(Author): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;for key in Author.LINKS.keys()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'getattr(Author.LINKS, "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Links.WEB: https://ra101.github.io/

Author.values(): ['„Äà RA „Äâ', 'https://ra101.github.io/', &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;]

dict(Author): {'NAME': '„Äà RA „Äâ', 'WEB': 'https://ra101.github.io/', 'LINKS': &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;}

for key in Author.LINKS.keys()
getattr(Author.LINKS, "GITHUB"): https://github.com/ra101
getattr(Author.LINKS, "WEB"): https://ra101.github.io/
getattr(Author.LINKS, "EMAIL"): dev.ra.101@protonmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>One more PR for Hactoberfest </title>
      <author>Hulya</author>
      <pubDate>Sat, 02 Oct 2021 18:56:24 +0000</pubDate>
      <link>https://dev.to/hulyakarakaya/one-more-pr-for-hactoberfest-5gkp</link>
      <guid>https://dev.to/hulyakarakaya/one-more-pr-for-hactoberfest-5gkp</guid>
      <description>&lt;p&gt;Hactoberfest is upon us and it may be hard to find a project to contribute to especially for beginners. I have created a project with React and Docusaurus and looking for new contributors. You can create a PR and get one step closer to finishing your Hactoberfest.  &lt;/p&gt;

&lt;p&gt;If you are new to Open Source, you can follow along with this guide and create your PR for the project.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://github.com/hulyak/a-to-z-coding-resources"&gt;Github link&lt;/a&gt; for the project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-pull-request-for-az-coding-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to create a Pull Request for A-Z Coding Resources&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this guide, we will learn how to make a pull request for A-Z Coding Resources. We will make the changes from the command line. But first, let‚Äôs make clear the difference between Git and Github.&lt;/p&gt;

&lt;p&gt;Git is a version control software and Github is a collaboration platform that uses Git.&lt;/p&gt;

&lt;p&gt;Now, we can start contributing to our project by installing Git on our computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-git"&gt;
  &lt;/a&gt;
  1. Install Git
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, let's see if you have Git already installed on your computer. Type the command below in Terminal, PowerShell, or any terminal application. If you already have git installed, you can skip the next few steps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you don‚Äôt have git installed, go to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select your operating system and the installer will download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the installer and follow the instructions. It should be fine to select all of the default options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart your terminal, PowerShell, or Git Bash.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;git --version&lt;/code&gt; command again.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-configure-git"&gt;
  &lt;/a&gt;
  2. Configure Git
&lt;/h2&gt;

&lt;p&gt;We want to configure our local environments so that the correct GitHub account is associated with our commits.&lt;/p&gt;

&lt;p&gt;1.On GitHub, find your user name. You can find it by clicking your avatar in the upper right-hand corner. It will say "Signed in as"&lt;/p&gt;

&lt;p&gt;2.Return to your command line or terminal. Replace &lt;code&gt;hulyak&lt;/code&gt; with your username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"hulyak"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Use the command below to configure your email address as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"your-email-address"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4.You can use the two commands below to double-check that you've set this up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config user.name

git config user.email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-fork-the-repository"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Fork the Repository&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Navigate to the GitHub repo and click Fork in the upper right-hand corner, this will open up a dialog where you can click on your username to fork the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41yuKlhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fksg34wzrdsjhbkdex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41yuKlhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fksg34wzrdsjhbkdex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a local copy under your GitHub username. You need to fork the repo into your account because Github doesn't allow pushing code to repositories that you don't own, then you can make all your changes to the copied repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-clone-the-repo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Clone the Repo&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;clone&lt;/strong&gt; the repository, go to your forked copy of the GitHub repo, and select the green &lt;strong&gt;'Clone or download'&lt;/strong&gt; menu button, then click on the icon shown in the screenshot to copy the repository URL that you will need to use:&lt;/p&gt;

&lt;p&gt;Go to your terminal and navigate to the directory where you want to clone the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, to clone the remote repository to your computer, execute the &lt;strong&gt;git clone&lt;/strong&gt; command with the link that you just copied:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;github-repo-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new folder with the remote GitHub repository name and download all the project files and repository data into it.&lt;/p&gt;

&lt;p&gt;Cd into the folder that was just created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;a-to-z-coding-resources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should this something similar to the screenshot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-check-out-the-contributing-guideline"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Check out the Contributing guideline&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we make any changes in the code, we need to check out the Contributing Guidelines.&lt;/p&gt;

&lt;p&gt;If you check out the Readme page, it will redirect you to the CONTRIBUTING.md file. File name is &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or, you can check out the &lt;code&gt;Issues&lt;/code&gt; tab, and decide how to contribute to the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-new-resource"&gt;
  &lt;/a&gt;
  Adding a New Resource
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &lt;code&gt;docs&lt;/code&gt; folder and look at the resources. &lt;/li&gt;
&lt;li&gt;All you need is to add a unique new resource to any of the markdown files. You only need to add one resource for the Pull Request. &lt;/li&gt;
&lt;li&gt;Go to the end of the page and add a new resource. &lt;/li&gt;
&lt;li&gt;Image of the resource is not necessary, if you want to add the image of the website, you can first load the image on Dev.to and paste the link from there.&lt;/li&gt;
&lt;li&gt;You can add a short description after the heading. For the heading use &lt;code&gt;###&lt;/code&gt; for Heading level 3 and make sure it looks good. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need help writing markdown files, you can check out &lt;a href="https://www.markdownguide.org/basic-syntax"&gt;this website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can checkout this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;### 1.[Reacti Flux](https://discord.com/invite/reactiflux)&lt;/span&gt;

Reacti Flux is the largest community of React developers (110,000+)!

&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Alt Text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at0opxihu02u0o2xvcq2.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-new-resource-page-and-adding-new-resource"&gt;
  &lt;/a&gt;
  Creating A New Resource Page and Adding New Resource
&lt;/h3&gt;

&lt;p&gt;If you cannot find a new resource to add, you can just create a new page and a different category. It can be related to frontend, backend, cloud, blockchain, or mobile development. It can be whatever you want.&lt;/p&gt;

&lt;p&gt;For that, create a new markdown file for a new category and add the resource there.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create the file name as &lt;code&gt;&amp;lt;category&amp;gt;-&amp;lt;number&amp;gt;.md&lt;/code&gt; and add the resource to the file. For example, you can the file as &lt;code&gt;free-websites-1.md&lt;/code&gt;. Then, go to the &lt;code&gt;sidebars.js&lt;/code&gt; file in the root of the project and add the file name to the list.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someSidebar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;free-websites-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;free-media-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// 'markdown-features',&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript-4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nextjs-6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;job-hunt-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;career-9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;computer-science-7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// add the new file name&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;MDX file starts with &lt;a href="https://jekyllrb.com/docs/step-by-step/03-front-matter/"&gt;YAML front matter&lt;/a&gt; block declared as triple-dashed lines. Declare the &lt;code&gt;title&lt;/code&gt; property.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Free&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Images/Videos"&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After the title, add your resource similar to this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;### 1.[Reacti Flux](https://discord.com/invite/reactiflux)&lt;/span&gt;

Reacti Flux is the largest community of React developers (110,000+)!

&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Alt Text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at0opxihu02u0o2xvcq2.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-pull-the-recent-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Pull the recent changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before you make any changes, it's good to check if there have been any changes from GitHub down to your local copy¬† by using the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-make-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Make Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Make changes in any of the markdown files under the &lt;code&gt;docs&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-review-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Review Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;git diff&lt;/code&gt; command to see the changes you‚Äôve made. This will show your changes with the + sign. To quit the terminal, use the q key.&lt;/p&gt;

&lt;p&gt;Run the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the page loads without any errors and you have added a new resource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-stage-commit-and-push-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Stage, Commit and Push Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Next, you want to stage, commit, and push your changes to your fork. Staging means saving your changes so they are ready to be added to your branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "type your commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;m is a flag for the message. That means that whatever comes after -m is a message explaining your commit. Your commit message doesn't have any effect on your code; it's like a comment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; adds the changes on your computer to your GitHub repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-create-a-pull-request"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Create a Pull Request&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Navigate back to the original repo from which you forked, and you will see a prompt to open a new Pull Request from the branch you just pushed to.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Compare &amp;amp; pull request&lt;/strong&gt;, add a description describing the changes you made. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-screenshot-of-the-page-with-the-added-resource"&gt;
  &lt;/a&gt;
  Add a screenshot of the page with the added resource.
&lt;/h2&gt;

&lt;p&gt;To submit your pull request, click the green &lt;strong&gt;'Create pull request'&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Well done, you have made your pull request! üéâüéâüéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-wait-for-merge-and-code-review"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. Wait For Merge and Code Review&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The owner of the repo can now review your changes and decide whether to approve and merge, request changes, or decline your pull request.&lt;/p&gt;

&lt;p&gt;TIP: If you need to add more changes to this pull request, you don't need to create different pull requests. Just push your new changes to the same fork and it will automatically update the PR.&lt;/p&gt;

&lt;p&gt;I hope you liked this guide on how to make a pull request for the project. If you would like to learn more about Open Source, you can check out these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/how-to-contribute/"&gt;How to Contribute to Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=c6b6B9oN4Vg&amp;amp;ab_channel=FacebookOpenSource"&gt;Contributing to Open Source for the first time&lt;/a&gt; video&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;What is Free Software?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May the FOSS be with you!&lt;/p&gt;

&lt;p&gt;Let's connect. You can follow me on &lt;a href="https://github.com/hulyak"&gt;Github&lt;/a&gt; and &lt;a href="https://twitter.com/hulyakarkya"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>contributorswanted</category>
      <category>news</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Some useful Libraries for .NET projects</title>
      <author>J√©ssica Nathany</author>
      <pubDate>Sat, 02 Oct 2021 18:29:17 +0000</pubDate>
      <link>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</link>
      <guid>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will share same libraries and packages to make your .NET project easier, and explain a little about their functionality.Note: You can copy copy the library links from github and paste them into your Notions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NBuilder&lt;/strong&gt;&lt;br&gt;
Is a library that allows you to rapidly create test data, automatically. Some examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nbuilder/nbuilder"&gt;NBuilder Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package NBuilder -Version 6.1.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote about this library in my last article&lt;a href="https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb"&gt;Tools o improve your unit test with .NET&lt;/a&gt;. I have a Github repository about Unit Test and I used this library for test ([Unit Test]&lt;a href="https://github.com/JessicaNathany/unit-test"&gt;https://github.com/JessicaNathany/unit-test&lt;/a&gt;) the code ist portuguese but I will write in english.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is a little diferent the NBuilder, because if you want something whic looks like actual names, address, email, thelephone numbers, etc you can use Faker.NET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/slashdotdash/faker-cs"&gt;Faker.Net Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Faker.Net -Version 1.5.148&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bogus is a simple and sane fake data generator for .NET languages like C#, F# and VB.NET. Bogus is fundamentally a C# port of faker.js and inspired by FluentValidation's syntax sugar. Created by Brian Chavez.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bchavez/Bogus"&gt;Bogus Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Bogus -Version 33.1.1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example bellow is from repository Brian Chavez&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ocelot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ocelot is a .NET API Gateway. This project is aimed at people using .NET running a micro services / service oriented architecture that need a unified point of entry into their system. However it will work with anything that speaks HTTP and run on any platform that ASP.NET Core supports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Ocelot Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Ocelot -Version 17.0.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from the website &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/implement-api-gateways-with-ocelot"&gt;Microsoft Documentation API Gateway with Ocelot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polly&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Polly is a .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Polly Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Polly -Version 7.2.2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from repository Polly Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CacheManager&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features.&lt;/p&gt;

&lt;p&gt;The main goal of the CacheManager package is to make developer's life easier to handle even very complex caching scenarios..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MichaCo/CacheManager"&gt;CacheManager Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package CacheManager.Core -Version 2.0.0-beta-1629&lt;/em&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>developers</category>
      <category>packages</category>
    </item>
    <item>
      <title>ü™ü Windows 11 inspired portfolio ü™ü</title>
      <author>vova ushenko</author>
      <pubDate>Sat, 02 Oct 2021 18:19:47 +0000</pubDate>
      <link>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</link>
      <guid>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</guid>
      <description>&lt;p&gt;üëãHi there and Happy Hacktoberfest 2021 fellow developers! üéä &lt;br&gt;
I hope you're doing fantastic!&lt;/p&gt;

&lt;p&gt;In the past, I was powerfully impressed by a portfolio that was built like a simple OS. So, this basically has always been my small dream to build a portfolio-app that visually mimics an operating system.&lt;/p&gt;

&lt;p&gt;Recently, I had some free time and I finally decided to turn this plan into reality. So, I started working on ü™ü Windows-11 inspired portfolio ‚ú®.&lt;/p&gt;

&lt;p&gt;You can try it out here: &lt;a href="https://www.vovacodes.ca/"&gt;https://www.vovacodes.ca/&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/vovaushenko/vovacodes"&gt;https://github.com/vovaushenko/vovacodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a Next.js app built from scratch, that has a small backend powered by MongoDB. It is fully written in TypeScript, so if you're learning it, you could explore the GitHub repo üí•&lt;/p&gt;

&lt;p&gt;In a nutshell the stack is - &lt;br&gt;
‚≠ê Next.js, &lt;br&gt;
‚≠ê React, &lt;br&gt;
‚≠ê Styled-Components, &lt;br&gt;
‚≠ê Redux &lt;br&gt;
‚≠ê Mongo DB.&lt;/p&gt;

&lt;p&gt;The app has a design and component system powered by &lt;br&gt;
üíú Storybook üíú &lt;/p&gt;

&lt;p&gt;This is not only an &lt;em&gt;OS-looking app&lt;/em&gt; but also &lt;em&gt;beautiful slides&lt;/em&gt; about me, which can be found by navigating and using the OS.&lt;/p&gt;

&lt;p&gt;The App has a ton of cool features (for instance you can leave me a comment and later it will be displayed with a nice random avatar in a flying carousel). &lt;strong&gt;So, leave a comment!üòâ&lt;/strong&gt; I would be happy to hear from You! üôå&lt;/p&gt;

&lt;p&gt;Essentially, it has a lot of nifty features, so consider exploring it and let me know what is your favorite one!‚ú® &lt;/p&gt;

&lt;p&gt;‚ùó &lt;em&gt;Notice, on mobile only portfolio part will be shown&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. I Use Arch BTW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest 2021 Again! Wish you all the best! &lt;/p&gt;

&lt;p&gt;Cheers! ü§ô&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At a glance&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind, this is a work in progress! More features to come (and bugs tackled üòÑ)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitLab CI Inheritance Sucks</title>
      <author>Randall</author>
      <pubDate>Sat, 02 Oct 2021 18:12:00 +0000</pubDate>
      <link>https://dev.to/mistval/gitlab-ci-inheritance-sucks-2dh5</link>
      <guid>https://dev.to/mistval/gitlab-ci-inheritance-sucks-2dh5</guid>
      <description>&lt;p&gt;Or at least, cross-repo inheritance.&lt;/p&gt;

&lt;p&gt;I've worked at a couple of places now where GitLab CI templates are heavily used, &lt;code&gt;include&lt;/code&gt;d across repos, and inherited from.&lt;/p&gt;

&lt;p&gt;I've found it confusing, inflexible, and an enemy of build reproducibility.&lt;/p&gt;

&lt;p&gt;In a repo where this is done heavily, if I want to change something, I must figure out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Does my &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; actually contain this job at all? Or is it from a template somewhere else?&lt;/li&gt;
&lt;li&gt;Where the heck is it (or its parent) coming from? This repo includes templates from three other repos, and they include templates from other repos too. Where it at???&lt;/li&gt;
&lt;li&gt;How do I change the parent job without breaking any other pipelines that depend on it? Maybe I can just inherit from it and add a &lt;code&gt;before_script&lt;/code&gt;? But what if the parent job gets updated with its own &lt;code&gt;before_script&lt;/code&gt; later, and my overriding it breaks something?&lt;/li&gt;
&lt;li&gt;Will the person who owns the parent template's repo let me change it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So after getting all of that out of the way, I make the change in the template repo. It breaks someone else's pipeline somewhere. But there wasn't even a commit to their repo. Their pipeline just suddenly just starts failing. What?? This totally breaks build reproducibility!&lt;/p&gt;

&lt;p&gt;I've gotten to where I'd rather just have a bunch of duplicated GitLab CI code across repos.&lt;/p&gt;

&lt;p&gt;Am I crazy, am I missing something, or do others feel the same?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>Flutter Widgets Stateless ‚Äì Stateful Widget Difference</title>
      <author>Baransel</author>
      <pubDate>Sat, 02 Oct 2021 17:00:01 +0000</pubDate>
      <link>https://dev.to/baransel/flutter-widgets-stateless-stateful-widget-difference-3fl7</link>
      <guid>https://dev.to/baransel/flutter-widgets-stateless-stateful-widget-difference-3fl7</guid>
      <description>&lt;p&gt;We will discuss the concept of widget, which is one of the structures we hear the most in Flutter. At the same time, we will talk about Stateless and Stateful widgets that change shape according to our page structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-widget"&gt;
  &lt;/a&gt;
  What is widget?
&lt;/h3&gt;

&lt;p&gt;Almost everything in Flutter is widget, and the concept we call widgets are components that are given to us ready-made. Many structures, like each interface element, are considered as widgets. You can review the &lt;em&gt;&lt;strong&gt;&lt;a href="https://flutter.dev/docs/development/ui/widgets" rel="nofollow"&gt;widget catalog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt; to look at Flutter's widget features and examples. Using these widgets, we can develop our application easily and quickly. It is appropriate, we use widgets within the widget. For this, it is important to understand the widget structure. We should know that each structure is actually a widget and the features of these widgets.&lt;/p&gt;

&lt;p&gt;Speaking of nested widgets, we can give an example. While some widgets accept only one widget; some widgets can accept multiple widgets inside. We can think of it this way. In Flutter, there is a widget called Column, which we will cover in detail as page structures in the following lessons, it can take multiple widgets. Because we can think of the Column widget as a list that is aligned one after the other. Thus, we can easily understand that it can actually take more than one element. However, we think of the Container widget as a box, and we can add only one element to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxRqDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/flutter-widgets-stateless-and-stateful/basic-widget-structure.png" class="article-body-image-wrapper"&gt;&lt;img alt="Basic widget structures for Flutter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxRqDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/flutter-widgets-stateless-and-stateful/basic-widget-structure.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also talk about &lt;em&gt;MaterialApp&lt;/em&gt; and &lt;em&gt;Scaffold&lt;/em&gt; and &lt;em&gt;AppBar&lt;/em&gt; widgets, which are the most used widgets.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;MaterialApp&lt;/strong&gt; widget is one of the richest widgets. After we create our project in our Main class, we usually give a material app inside the run app method. In order to use other widgets, we especially need the MaterialApp widget for routing. When we build our application, we can consider this widget as its outermost part.&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;Scaffold&lt;/strong&gt; widget means screen. We create our screen with Scaffold. If we don't create the scaffold, if we add it in, we will see a black screen. After creating a white screen with Scaffold, it is entirely up to us to shape it.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppBar&lt;/strong&gt; widget is a structure that we created at the top of the screen that we created with Scaffold. Here we can write the name of the application, change the color of the area like this top line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-state"&gt;
  &lt;/a&gt;
  What is a state?
&lt;/h3&gt;

&lt;p&gt;Continue this post on my blog! &lt;a href="https://baransel.dev/post/flutter-widgets-stateless-and-stateful/"&gt;Flutter Widgets Stateless ‚Äì Stateful Widget Difference&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learning TypeScript: Part 1</title>
      <author>ü¶æJack Maddenü¶æ</author>
      <pubDate>Sat, 02 Oct 2021 16:50:10 +0000</pubDate>
      <link>https://dev.to/john_madden_13/learning-typescript-part-1-3ll</link>
      <guid>https://dev.to/john_madden_13/learning-typescript-part-1-3ll</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-all"&gt;
  &lt;/a&gt;
  Hello all!
&lt;/h3&gt;

&lt;p&gt;This is my first post to Dev.to and I am very excited for this to be the beginning of my TypeScript series where I will be documenting what I am learning through Codecademy and Free Code Camp. I will not just be copying and pasting the information, but learning, and bringing it to you in a concise manner. Please enjoy and don't be timid to send me a message of what you think!&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                         LETTUCE BEGINü•¨
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVC2DJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op3j8sw21rw8vne15d2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVC2DJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op3j8sw21rw8vne15d2v.png" alt="Alt TS-logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-typescript-works"&gt;
  &lt;/a&gt;
  How TypeScript Works
&lt;/h2&gt;

&lt;p&gt;TypeScript is a superset of Javascript, invented by Microsoft, that adds strong type checking. Hence, the 'type' in TypeScript, I guess. The TS code is taken into a compiler and then translated into JS code, meaning all of the features of JS are available to us, plus the added features of TS. &lt;/p&gt;

&lt;p&gt;Some added features are such as better development-time tooling (the amount of time from work started to work delivered), static code analysis (analysis of the code without launching code), and compile-time type checking (making sure all the types are used as they should be). &lt;/p&gt;

&lt;p&gt;If you are coming into this with some Javascript knowledge, already, then that is preferred because TS sometimes looks roughly the same as JS code! TS files are stored in .ts files, compared to JS files being stored in .js files, so don't get that mixed up, ya hear? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-typescript"&gt;
  &lt;/a&gt;
  When To Use TypeScript
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#large-codebase"&gt;
  &lt;/a&gt;
  Large Codebase
&lt;/h4&gt;

&lt;p&gt;When to use a specific language, library, or framework can definitely be tricky. The same goes for TS, as there are many times where it is best to use, but also times where it may not be most practical. From what I gather, TS is getting such a big following in the Javascript community because it cuts down on common errors. However, if your codebase is not going to be large to begin with, there really isn't much reason to convert your JS files to TS, as sometimes it will add about 30% to the total size of the code &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#accustomed-to-type-languages"&gt;
  &lt;/a&gt;
  Accustomed to Type Languages
&lt;/h4&gt;

&lt;p&gt;That's pretty vague and self-explanatory, right? If you or your team wants to use it, then use it. Sure? I can't judge because I had learned React a little while back and now I try to work it into every project I can. &lt;/p&gt;

&lt;p&gt;There are also some other type-strict languages out there that keep the same mindset as TS, such as C#. While they are based on much different languages, the same person that created TS is also the same person that created C#. I guess you could say they have a TYPE üòè.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#library-or-framework-wants-ts"&gt;
  &lt;/a&gt;
  Library or Framework Wants TS
&lt;/h4&gt;

&lt;p&gt;I personally have never ran into this sort of request from a library or framework, but it is definitely not too far out of the ordinary. It seems that for TS, Angular 2 seems to be really screaming for the necessity of it. So if you are reading through the documentation of a library or framework and it is begging you to use TS, be my guest. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-demanding-situations"&gt;
  &lt;/a&gt;
  Type Demanding Situations
&lt;/h4&gt;

&lt;p&gt;It makes sense that there would be some situations where having a strict type is crucial for your app or code snippet. One that pops into my mind is anything having to do with forms. If a rascal of a user tries to input a number into a string situation, that can throw a major error or crash your app if not handled properly. TS acts as some sort of gatekeeper in the way that this is one of the first things that it checks for via the compile-time type-checking we had discussed earlier. If you're expecting to be using a good amount of forms, or a type heavy application, then TS might be the best option. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I can not thank you enough for making it to the end of my first insertion to the Learning TypeScript series! While this article was more based on what TS is, and when to use it, the following articles should jump into some sweet, sweet code that we all know and love. Thank you and look out for the next submission, don't forget to follow me here and on Twitter! Peace!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Automate CI/CD build pipeline for a Springboot app using Jenkins and Github Webhooks</title>
      <author>Amaka Mbah</author>
      <pubDate>Sat, 02 Oct 2021 16:49:56 +0000</pubDate>
      <link>https://dev.to/saucekode/automate-ci-cd-build-pipeline-for-a-springboot-app-using-jenkins-and-github-webhooks-3h30</link>
      <guid>https://dev.to/saucekode/automate-ci-cd-build-pipeline-for-a-springboot-app-using-jenkins-and-github-webhooks-3h30</guid>
      <description>&lt;p&gt;In this article, we will be setting up a CI/CD pipeline for a springboot application using Jenkins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An existing Springboot application&lt;/li&gt;
&lt;li&gt;You should have Jenkins installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Continous integration and delivery make up the devops lifecycle. There are 8 phases in the devops lifecyle. &lt;/p&gt;

&lt;p&gt;Continous delivery make up the first four phases which include: &lt;strong&gt;plan, code, build and test&lt;/strong&gt;. Continous integration make up the last four phases which include: &lt;strong&gt;integrate, deploy, operate and monitor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Jenkins is a tool for integrating automatically into the existing codebase after testing is complete. It spans both continous delivery (build and test phase) and continous integration (integration).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-repository-and-branches"&gt;
  &lt;/a&gt;
  Step 1: Create a repository and branches
&lt;/h3&gt;

&lt;p&gt;If your project is already hosted on Github, you can skip this step. Otherwise, create a repository on Github, map the remote url to your project and create two branches: &lt;strong&gt;prod&lt;/strong&gt; and &lt;strong&gt;dev&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The dev branch is what Jenkins will be interfacing with, once there is a successful build in this branch then we can integrate the changes into our prod branch, this would interface with your deployment platform.&lt;/p&gt;

&lt;p&gt;Using this method, we will catch errors during development and avoid them at production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setup-jenkins"&gt;
  &lt;/a&gt;
  Step 2: Setup Jenkins
&lt;/h3&gt;

&lt;p&gt;Start up Jenkins. &lt;/p&gt;

&lt;p&gt;To start up Jenkins for Ubuntu users, locate the &lt;em&gt;jenkins.war&lt;/em&gt;  file in the /usr/share/jenkins path. Once found, run the command below to start Jenkins manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar jenkins.war --httpPort=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have Jenkins running now. Jenkins default port is 8080. Head over to your browser and run &lt;strong&gt;localhost:8080&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;An aside, Springboot runs on port 8080 as well, you will have to change your port using &lt;strong&gt;server.port=9090&lt;/strong&gt; in your &lt;em&gt;application.properties&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you're using Jenkins for the first time, you will be presented with a page that has path to a file. The file contains your Jenkins administrator password. Copy the path. To view the contents, run this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat &amp;lt;file path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you should be able to see the password. Copy and paste into the input field provided and click the button. Next up, you will be required to install Jenkins plugins. You can choose to install all plugins or install selected plugins. Go for the former and wait for the installation to be done. If it fails, retry. &lt;/p&gt;

&lt;p&gt;After the installation is complete. You will be required to create a new user admin. You can choose to skip this step and continue with the initial administrator credentials provided by Jenkins. I strongly advise you create a new user. Once that is done, you will be redirected to your Jenkins dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-set-up-jenkins-credentials"&gt;
  &lt;/a&gt;
  Step 3: Set up Jenkins credentials
&lt;/h2&gt;

&lt;p&gt;This step is vital in the build automation. On the dashboard menu items, click &lt;strong&gt;Manage Jenkins&lt;/strong&gt; and then, &lt;strong&gt;Manage Credentials&lt;/strong&gt;. There is an already existing Jenkins credential. Click on it and then the Global credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_c2Hcw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcbyp2r53yq83sphk76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_c2Hcw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcbyp2r53yq83sphk76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add Credentials&lt;/strong&gt; and you will be presented with where to fill your details.&lt;/p&gt;

&lt;p&gt;Github no longer has support for username and password. In selecting a credential kind, pick SSH Username with private key. This means you should already have your SSH keys (private and public). &lt;/p&gt;

&lt;p&gt;If you do not have one, follow this link to generate yours and link to Github &lt;a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enter your username and select &lt;strong&gt;Enter directly&lt;/strong&gt; in the private key option and make sure it is your generated private SSH key you are entering not the public SSH key. Click OK to continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-set-up-jenkins-pipeline"&gt;
  &lt;/a&gt;
  Step 4: Set up Jenkins pipeline
&lt;/h2&gt;

&lt;p&gt;Go back to your dashboard. Create a job. Enter a name for your job, select Freestyle project and save to continue.&lt;/p&gt;

&lt;p&gt;Enter a description for your Jenkins job in the General tab. In the source code management tab, select Git, enter the repository url for your project. Under credentials, select the credential your created. In branches to build, edit the prepopulated branch and set to dev. &lt;/p&gt;

&lt;p&gt;In the Build Triggers tab, check &lt;strong&gt;GitHub hook trigger for GITScm polling&lt;/strong&gt;. You can choose to run this trigger with the &lt;strong&gt;Poll SCM&lt;/strong&gt; option. This setup would require you input a time schedule for when the hook trigger would happen. Currently, I didn't select the Poll SCM option.&lt;/p&gt;

&lt;p&gt;Scroll to the Build tab and select &lt;strong&gt;Execute shell&lt;/strong&gt;. This is where we specify the build command for our Spring application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./mvnw install test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Input this maven build command, it runs both test and build our app into an artifact. Once done, click save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-setup-github-webhook"&gt;
  &lt;/a&gt;
  Step 5: Setup Github WebHook
&lt;/h2&gt;

&lt;p&gt;The webhook automates the build process as opposed to manually running the build from Jenkins.&lt;/p&gt;

&lt;p&gt;Navigate to the settings tab of your spring app github repository, click on &lt;strong&gt;Webhooks&lt;/strong&gt;. You will be required to provide a &lt;strong&gt;Payload URL&lt;/strong&gt; and &lt;strong&gt;secret&lt;/strong&gt;. The secret key is a token you generate in Jenkins and it is used to make API calls. For our payload URL, we will generate one using ngrok. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ngrok is a tool for generating a live URL for your locally hosted project. We need to expose Jenkins to our webhook, hence the need for ngrok.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Download ngrok zip file from &lt;a href="https://ngrok.com/download"&gt;here&lt;/a&gt; and unzip. Open your terminal and cd into the directory you unzipped ngrok.&lt;/p&gt;

&lt;p&gt;For Ubuntu users, run this command to generate a url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./ngrok http 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to append &lt;strong&gt;/github-webhook/&lt;/strong&gt; to your payload url, this is required by the webhook. Set content type to &lt;strong&gt;application/json&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's get our secret token. In your Jenkins dashboard, click on the dropdown arrow beside your name located at the top left corner. Select &lt;strong&gt;configure&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RN14L5gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1iri89ajhznc99e2bmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RN14L5gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1iri89ajhznc99e2bmy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to locate the API token tab, click on &lt;strong&gt;Add new token&lt;/strong&gt; and generate one. Once it is generated, copy the token, save and paste it in the secret field in github.&lt;/p&gt;

&lt;p&gt;In github, still in webhooks, the question &lt;strong&gt;Which events would you like to trigger this webhook?&lt;/strong&gt;, for this article we will select &lt;strong&gt;Just the push event&lt;/strong&gt; option and click &lt;strong&gt;Add webhook&lt;/strong&gt;. You can explore other options to see what they offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-lets-test"&gt;
  &lt;/a&gt;
  Step 6: Let's test
&lt;/h2&gt;

&lt;p&gt;You should be in your dev branch. Make changes to your code and push. The build started automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3nHB_Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ts0bhjne2pm0wllgosh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3nHB_Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ts0bhjne2pm0wllgosh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the build is successful, next, make a merge request to the prod branch and deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we successfully setup a CI/CD pipeline using Jenkins and with Github webhooks, automated our build process as opposed to manually triggering the build from Jenkins.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>jenkins</category>
    </item>
    <item>
      <title>Improving API Documentation using React Query and TypeScript</title>
      <author>Arnav Gosain</author>
      <pubDate>Sat, 02 Oct 2021 16:43:30 +0000</pubDate>
      <link>https://dev.to/arn4v/improving-api-documentation-using-react-query-and-typescript-2321</link>
      <guid>https://dev.to/arn4v/improving-api-documentation-using-react-query-and-typescript-2321</guid>
      <description>&lt;p&gt;As your codebase grows, there is only one way to increase developer productivity: Documentation. One of many reasons I prefer TypeScript to JavaScript is that overtime, as your codebase grows, developer productivity increases because TypeScript (and typed languages in general) offer something that dynamically typed languages cannot, automatic documentation in your IDE.&lt;/p&gt;

&lt;p&gt;This article assumes you're familiar with React Query. If you're not, I highly recommend you read the &lt;a href="https://react-query.tanstack.com/docs"&gt;official docs&lt;/a&gt; and &lt;a href="https://www.kranthicodes.com/getting-started-with-react-query/"&gt;this intro guide&lt;/a&gt; by &lt;a href="https://www.kranthicodes.com"&gt;Sai Kranthi&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-react-query"&gt;
  &lt;/a&gt;
  Why React Query
&lt;/h2&gt;

&lt;p&gt;Imagine an simple app that does two things based on the PokeAPI:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Renders a list of Pokemons that link to their own dedicated page&lt;/li&gt;
&lt;li&gt;Have dedicated pages for all pokemons&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To fetch the list of pokemons, with &lt;strong&gt;Redux&lt;/strong&gt; you would have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a global store&lt;/li&gt;
&lt;li&gt;Create a reducer with an action to update the list in the store&lt;/li&gt;
&lt;li&gt;Write a thunk action to fetch the data.&lt;/li&gt;
&lt;li&gt;Write a useEffect hook &lt;strong&gt;inside&lt;/strong&gt; to dispatch the thunk action.&lt;/li&gt;
&lt;li&gt;Render the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then you'd have to write invalidation logic, loading status logic and much more.&lt;/p&gt;

&lt;p&gt;But with React Query, fetching your list of pokemons is as easy as wrapping your &lt;code&gt;App&lt;/code&gt; in a &lt;code&gt;QueryClientProvider&lt;/code&gt; and then making use of the &lt;code&gt;useQuery&lt;/code&gt; and &lt;code&gt;useMutation&lt;/code&gt; hooks.&lt;/p&gt;

&lt;p&gt;Example of basic React Query usage:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/runtime-thunder-uy81c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;This approach works for simple apps like a Pokemon List, but it quickly becomes unmanageable as you add more endpoints to your API. In which case, you would have to create many such custom hooks.&lt;/p&gt;

&lt;p&gt;This is the problem I ran into as I hopped on my first project after joining &lt;a href="https://tartanhq.com"&gt;TartanHQ&lt;/a&gt;. While it's a fairly simple CRUD app, it makes use of many endpoints and making custom hooks for each endpoint simply isn't an option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-hook-for-all-queries"&gt;
  &lt;/a&gt;
  One Hook For All Queries
&lt;/h2&gt;

&lt;p&gt;To counteract this problem, we created a layer of abstraction over React Query's &lt;code&gt;useQuery&lt;/code&gt; hook, a hook that makes use of TypeScript to improve discoverability of endpoints across the entire application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;useReactQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/lib/api/queries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;arg3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arg3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useReactQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Legend:
 *
 * QKEY = Query Key
 * QData = Query Data
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_ALL_POKEMONS_QKEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons/all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllPokemons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=151&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons/byId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GetPokemonByIdQData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPokemonById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GetPokemonByIdQData&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;GET_ALL_POKEMONS_KEY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GET_ALL_POKEMONS_QKEY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;getAllPokemons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;getPokemonById&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h2&gt;

&lt;p&gt;Now that you're all done, you can take full advantage of VSCode autocomplete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DwERo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnavgosain.com/static/queryhook-autocomplete.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DwERo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnavgosain.com/static/queryhook-autocomplete.png" alt="Custom useQuery in Action"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/queryhook-demo-9mjy3?module=src/pages/IndexPage.tsx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>reactquery</category>
    </item>
    <item>
      <title>Have fun with Windows message boxes</title>
      <author>Cl√©ment Gaudini√®re</author>
      <pubDate>Sat, 02 Oct 2021 16:40:17 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/have-fun-with-windows-message-boxes-ckl</link>
      <guid>https://dev.to/clementgaudiniere/have-fun-with-windows-message-boxes-ckl</guid>
      <description>&lt;p&gt;Hello everyone, today we are going to focus on our computers and more particularly on those under Windows. We will generate a Windows message box using the following programming language: Visual Basic. Don't worry, no prerequisites are necessary to follow this tutorial and all the steps will be explained. Through this article we will also see how to enrich and improve our message box, so that, for example, it can no longer be closed, that it remains in the foreground, etc. This way you can joke with your friends in a friendly manner, as there are several solutions to remove a dialogue box that cannot be closed. This type of dialog box can also be called fake virus, since it can worry the person at first, even if it does not affect the user's computer in any way. You can already see what the dialog box will look like at the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZyiev6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ymg5gfkgtfcg5dbt9uk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZyiev6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ymg5gfkgtfcg5dbt9uk.PNG" alt="Box message exemple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The basics
&lt;/h3&gt;

&lt;p&gt;To begin with, you will need your computer running the Windows operating system. Once turned on, we will use the basic notepad software installed on almost all computers in the operating system. If you do not have a notepad, you can also use a code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ey0t6aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjkpa3db1p5z0i2th7uf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ey0t6aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjkpa3db1p5z0i2th7uf.jpg" alt="Notepad editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once open we will write our first line of code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once written, click on "File", then on "Save as", now give your file a name in the following form: &lt;code&gt;name.vbs&lt;/code&gt;. Then click on "Save". It is important to specify the extension of the .vbs file, otherwise the file will be executed as a text file and no action will be performed. VBS means Visual Basic Script. Once saved, the file icon will normally look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgIV7PoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydgh4rrdydxmyc3aha.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgIV7PoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydgh4rrdydxmyc3aha.PNG" alt="File vbs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you double click on this file you will see a windows dialogue box open, which you can close by clicking on "Ok" or on the cross.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-nonclosable-message-box"&gt;
  &lt;/a&gt;
  A non-closable message box
&lt;/h3&gt;

&lt;p&gt;Now we are going to add a few lines of code so that our box can no longer be closed simply with the cross, nor with "Ok". To do this, we will use the Visual Basic &lt;code&gt;Do...Loop&lt;/code&gt; statement. The previously written code will be wrapped up in the &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;loop&lt;/code&gt; instructions :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We re-save the file as a &lt;code&gt;.vbs&lt;/code&gt; file, and when we execute the file, we will not be able to close it simply with the cross or with the "Ok" button, since the &lt;code&gt;loop&lt;/code&gt; instruction allows to create an infinite loop. &lt;/p&gt;

&lt;p&gt;You can also put several messages in your code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your other text here"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So once both messages have been read, the code will go back to the beginning and read the first and second messages over and over again. To permanently close a message box, go to the Windows Task Manager. For example, you can right-click in the navigation bar and then click on Task Manager. Once this is done, click on "Microsoft Windows Based Script Host" and then on "End Task". If you can't find it, here's an overview of what to find :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ehVVcn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yruk4xv3hfxxz0xiruoi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ehVVcn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yruk4xv3hfxxz0xiruoi.PNG" alt="Task"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also turn off your computer, and all messages will be gone the next time you turn it on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customise-the-message-box"&gt;
  &lt;/a&gt;
  Customise the message box
&lt;/h3&gt;

&lt;p&gt;Before you become a Windows message box pro, you need to know the different ways to customise it. Indeed you can for example give a title to your message box, add a critical error icon, a questioning warning... We will also see how to make sure that our dialog box is always in the foreground. In the following non-functional piece of code, the variables x, y, z can have several values :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Non-functional code&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Title"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will detail these values later, but first let's break down the msgbox. The first string in quotes represents the text inside the dialog box, the &lt;code&gt;x&lt;/code&gt; allows you to define the buttons of the dialog box, the &lt;code&gt;y&lt;/code&gt; enables you to put an icon, and the &lt;code&gt;z&lt;/code&gt; permits you to make the message box always in the foreground. Finally, the last string represents the title of the popup.&lt;/p&gt;

&lt;p&gt;Let's first look at the &lt;code&gt;x&lt;/code&gt;, this is a number which can have different values and which allows the buttons to be defined. All the values of x and their effects are here, in the table below :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;OK button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;OK and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Abort, Restart and Ignore buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Yes, No and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Yes and No buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Restart and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Then the values of &lt;code&gt;y&lt;/code&gt; can be as follows :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Critical error icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Interrogative warning icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;Simple warning icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Message icon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Finally, the &lt;code&gt;z&lt;/code&gt; values can be :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;z&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Normal dialogue box&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;Dialog box always in the foreground&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's put into practice what we have just learned, if we want to create a message box that is always in the foreground, with the title "Virus", the content "Trojan Horse", with the Ok and Cancel buttons and with a critical error icon, our code will look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Trojan Horse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Virus"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-go-further"&gt;
  &lt;/a&gt;
  To go further
&lt;/h3&gt;

&lt;p&gt;To go further and make a joke to your friends, we will see how to customize the appearance of our &lt;code&gt;vbs&lt;/code&gt; file, so that it looks like a web browser. For example the following icon refers to a vbs file which opens an infinite message box :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ddhk-E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y2f9jrvijxanial6ihr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ddhk-E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y2f9jrvijxanial6ihr.PNG" alt="Shortcut"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, you need to save your &lt;code&gt;vbs&lt;/code&gt; file anywhere unobtrusively. Then right click and click on "copy". Then go to the place where you want to create your shortcut and right click and "paste shortcut". Then right click on the item you have just created and click on "Properties" and then "Change Icon" in the "Shortcut" tab. Choose the icon you prefer then click on "Ok" then on "Apply". All that's left to do is rename it and you're done!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial, if you liked the concept, I might do another article on fake viruses. If you have any questions, feel free to ask me in the comments. üëç&lt;/p&gt;

</description>
      <category>vbs</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
