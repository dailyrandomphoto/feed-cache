<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>decoding html. (the pony he comes)</title>
      <author>domonic</author>
      <pubDate>Fri, 15 Oct 2021 08:03:01 +0000</pubDate>
      <link>https://dev.to/domonic/decoding-html-the-pony-he-comes-bll</link>
      <guid>https://dev.to/domonic/decoding-html-the-pony-he-comes-bll</guid>
      <description>&lt;p&gt;One cool way to decode html is with a parser. i.e.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://html5-parser.readthedocs.io/en/latest/"&gt;https://html5-parser.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a ticket for one here...&lt;br&gt;
&lt;a href="https://github.com/byteface/domonic/issues/28"&gt;https://github.com/byteface/domonic/issues/28&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;at the heart of domonic is a regex html parser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/byteface/domonic"&gt;https://github.com/byteface/domonic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's in development but it currently HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ&lt;/p&gt;

</description>
      <category>html</category>
      <category>python</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 low-code platform myths debunked
</title>
      <author>Technocrat</author>
      <pubDate>Fri, 15 Oct 2021 07:44:17 +0000</pubDate>
      <link>https://dev.to/technocrat/5-low-code-platform-myths-debunked-373m</link>
      <guid>https://dev.to/technocrat/5-low-code-platform-myths-debunked-373m</guid>
      <description>&lt;p&gt;Did you know that the worldwide low-code development technologies market is expected to reach $13.8 billion in 2021? &lt;/p&gt;

&lt;p&gt;While the consumption of low-code platforms is steadily increasing among tech-savvy organizations, a large number of businesses still consider this technology as niche. That's why we decided to debunk 5 of the most common low-code myths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-1-lowcode-platforms-cant-be-used-to-build-complex-apps"&gt;
  &lt;/a&gt;
  Myth 1: Low-code platforms can't be used to build complex apps
&lt;/h2&gt;

&lt;p&gt;Most low-code platforms have a two-pronged approach to reduce the complexities involved in software development. The drag-and-drop UI components help tackle front-end complexities, while the back end is supported by English-like scripting languages for complex workflow automation. This means that the software-building activity is only limited by the user's imagination and not the tool itself. Don't let a myth like this stop you from exploring these platforms and experiencing their true capabilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-2-lowcode-is-a-misnomer-it-requires-expert-coding-abilities"&gt;
  &lt;/a&gt;
  Myth 2: Low-code is a misnomer — it requires expert coding abilities
&lt;/h2&gt;

&lt;p&gt;The technical expertise needed to build applications with low-code platforms is based on business needs and application complexity. While traditional coding platforms require complex lines of code, low-code platforms possess ready-made code snippets, requiring fewer lines of code. Most low-code platforms borrow elements from open-source/open-standard languages, such as C, Java, JavaScript, Python, and more. The critical factor, however, is the logical reasoning required to utilize the code for specific uses case within the application. There are multiple open-source resources one can use to tweak code for their needs, and most low-code development platforms have debugging tools that provide suggestions and throw errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-3-lowcode-and-legacy-systems-are-mutually-exclusive"&gt;
  &lt;/a&gt;
  Myth 3: Low-code and legacy systems are mutually exclusive
&lt;/h2&gt;

&lt;p&gt;Many firms refrain from rocking the boat and choose to hold on to their legacy systems. However, with improvements in digital transformation, relying only on legacy systems will inevitably hinder scalability. Low-code platforms provide cross-platform accessibility and can integrate with multiple third-party tools with the help of built-in connectors or code-like API calls. This means that low-code software can enhance existing legacy systems, rather than replace them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-4-niche-technology-like-lowcode-has-a-steep-learning-curve"&gt;
  &lt;/a&gt;
  Myth 4: Niche technology, like low-code, has a steep learning curve
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.zoho.com/creator/?utm_source=evang&amp;amp;utm_medium=blog&amp;amp;utm_campaign=evang"&gt;Low-code platforms&lt;/a&gt; thrive on ease of use, quicker app builds, and economical benefits. With drag-and-drop functionalities, visual builders for automation, and other user-friendly features, deploying a simple app takes a few days, or sometimes just hours. One of the successes of low-code is that people with varied technical expertise—from novice business users to hardcore technical developers—have been able to build apps with astonishing ease. This indicates that the learning curve is a function of complex business requirements and not technical expertise. Even with complex business requirements, low-code platforms still have an edge over traditional coding platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#myth-5-data-privacy-and-storage-is-a-concern-with-lowcode"&gt;
  &lt;/a&gt;
  Myth 5: Data privacy and storage is a concern with low-code
&lt;/h2&gt;

&lt;p&gt;A majority of low-code platforms, such as Appian, Caspio, Outsystems, and Zoho Creator, store data securely on the cloud. Caspio, Outsystems, and Zoho Creator provide on-premise data storage, as well. With digital advancements and many organizations adopting cloud-based solutions, regulations, such as GDPR compliance, ensure that low-code platforms providers take data security and privacy seriously. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Low-code platforms help build powerful, business-critical applications. Rather than rely on off-the-shelf products, business users, as well as expert developers, can tweak their applications to suit their exact needs. With visual builders and out-of-the box coding components, automating processes on low-code platforms is easier, and saves you both time and money.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>lowcode</category>
      <category>cloud</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Styling - Console.log</title>
      <author>CoderZ90</author>
      <pubDate>Fri, 15 Oct 2021 07:21:05 +0000</pubDate>
      <link>https://dev.to/official_fire/styling-consolelog-35k5</link>
      <guid>https://dev.to/official_fire/styling-consolelog-35k5</guid>
      <description>&lt;p&gt;Hello 👋 Guys Hope you are &lt;strong&gt;safe and happy&lt;/strong&gt;. so in this blog i will tell you that how you can style console.log using javascript and CSS 😊&lt;/p&gt;

&lt;p&gt;Q. Why We Need To Style Console.log And When ?&lt;/p&gt;

&lt;p&gt;Ans - You have seen many social media websites such as Facebook or Google Plus, where they have big red text appearing in the console saying "WARNING!" or similar to prevent you from entering malicious code. There are many reasons for styling console.log but the main purpose is to prevent users from entering malicious code in the website 😊&lt;/p&gt;

&lt;p&gt;To style console.log follow my steps 😊&lt;/p&gt;

&lt;p&gt;When you console something it looks normal and not very cool looking but to style it we need to put "%c" attached to the text &lt;/p&gt;

&lt;p&gt;Check this code and if you want to test it just open the dev tools and go to console and then paste the code so that you can see the output...&lt;/p&gt;

&lt;p&gt;Code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;console.log("Here comes the text you want to display to the users", "and then put your css styles here to decorate the text");&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cStyled Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: #fff; background: #000; padding: 12px; font-family: Poppins; font-size: 20px; font-weight: bold;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankyou Guys for giving your time and reading this hope you are safe and Happy...&lt;br&gt;
Also don't forget to subscribe 🌟⚡ to my youtube channel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>React basics: explaining the useState hook</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 15 Oct 2021 06:58:17 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/react-basics-explaining-the-usestate-hook-o9n</link>
      <guid>https://dev.to/dailydevtips1/react-basics-explaining-the-usestate-hook-o9n</guid>
      <description>&lt;p&gt;Hooks are a superb way to store and manage state inside React components.&lt;/p&gt;

&lt;p&gt;The useState hook is a super-easy way to maintain states efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-a-new-state"&gt;
  &lt;/a&gt;
  Declaring a new state
&lt;/h2&gt;

&lt;p&gt;To use the hook, we first need to import it from React like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it, we can declare a new variable. Let's say we have a name variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's expand a bit on the above code piece:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: The variable name, we can display it to the user like so &lt;code&gt;{name}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setName&lt;/code&gt;: The setter function as we can't modify the name variable directly. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useState('')&lt;/code&gt;: The initial constructor, in this case, we set it to an empty string&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can set all kinds of default values some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see, the naming convention for the set function has to be the same as the variable but prefixed with &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-the-state"&gt;
  &lt;/a&gt;
  Reading the state
&lt;/h2&gt;

&lt;p&gt;As mentioned, it's super easy to use this state variable, as we can render it out or map it if it's an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Your&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;must&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-the-state"&gt;
  &lt;/a&gt;
  Updating the state
&lt;/h2&gt;

&lt;p&gt;When it comes to updating the state, let's take the number example for a second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us an initial value of 10. Let's then add a button that will invoke a function to add one each time we click it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the most basic example, and it works. However, it might give us some issues.&lt;/p&gt;

&lt;p&gt;Let's change this a bit to demonstrate an issue we might have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same thing as before, but now we are using a function to add a new count. And actually, call it twice.&lt;/p&gt;

&lt;p&gt;Should we expect to see the number go up by two, right?&lt;br&gt;
But this is not the case. Since React will take the initial value and has not been changed yet, it counts with that in the second call.&lt;/p&gt;

&lt;p&gt;There is an easy way to fix this.&lt;br&gt;
The setter function comes with a previous value argument we can use like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we now change our code to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll see the count increment by two each time we click!&lt;/p&gt;

&lt;p&gt;I hope you had some fun learning about setState in React. I created this small playground for you to try out yourself.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/qBjeWMB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Learn with me:Apple's Swift </title>
      <author>Ansh Gupta</author>
      <pubDate>Fri, 15 Oct 2021 06:43:37 +0000</pubDate>
      <link>https://dev.to/thisisanshgupta/learn-with-meapples-swift-528p</link>
      <guid>https://dev.to/thisisanshgupta/learn-with-meapples-swift-528p</guid>
      <description>&lt;p&gt;Hey guys,Welcome to 2nd part of Learn With Me:Apple's Swift.In previous tutorial you learned how to write Hello World in Swift and in this tutorial we are going to learn about Variables and Constants in Swift.I will highly recommend to read the first part of Swift tutorial &lt;a href="https://dev.to/thisisanshgupta/learn-with-meapples-swift-o21"&gt;here&lt;/a&gt;.So let's get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h1&gt;

&lt;p&gt;In programming,variable is a storage area to store data.For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Swift"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;strong&gt;name&lt;/strong&gt; is a variable storing "Swift".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#declaring-variables-in-swift"&gt;
  &lt;/a&gt;
  Declaring Variables in Swift
&lt;/h1&gt;

&lt;p&gt;In Swift,variables are declared using &lt;strong&gt;var&lt;/strong&gt; keyword.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,&lt;br&gt;
•name is a variable of type String. Meaning, it can only store textual values.&lt;br&gt;
•id is a variable of Int type. Meaning, it can only store integer values.&lt;/p&gt;

&lt;p&gt;You can assign values to a variable using &lt;strong&gt;=&lt;/strong&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Swift"&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My favorite programming language is:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;My favorite programming language is:Swift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;You can also assign a variable directly without the type annotation.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Swift"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#constants-in-swift"&gt;
  &lt;/a&gt;
  Constants in Swift
&lt;/h1&gt;

&lt;p&gt;A constant is a special type of variable whose value cannot be changed. A constant is declared using &lt;strong&gt;let&lt;/strong&gt; keyword.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;John Doe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'll try to change the value of &lt;strong&gt;name&lt;/strong&gt; then you will get an error.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Jonathan"&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: cannot assign to value: 'name' is a 'let' constant
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;You cannot declare constant without initializing it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading.I hope it will help you a lot in achieving your dreams.And in next part we are going to learn about Literals in Swift.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>swift</category>
      <category>ios</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>DataEngBytes conference wrap up</title>
      <author>Helen Anderson</author>
      <pubDate>Fri, 15 Oct 2021 06:40:05 +0000</pubDate>
      <link>https://dev.to/helenanders26/dataengbytes-conference-wrap-up-3bn2</link>
      <guid>https://dev.to/helenanders26/dataengbytes-conference-wrap-up-3bn2</guid>
      <description>&lt;p&gt;This month DataEngBytes, Australia’s ultimate data engineering conference, was back for 2021 with more talks than ever. There was something for everyone, whether you work in a start-up, an established company, or you are just learning the art and science of data engineering.&lt;/p&gt;

&lt;p&gt;Talks aligned to four themes:&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Data at rest&lt;/strong&gt; – data warehousing, data lakes, and data storage.&lt;br&gt;
– &lt;strong&gt;Data in motion&lt;/strong&gt; – event-driven architecture, data pipelines, and streaming.&lt;br&gt;
– &lt;strong&gt;Data for machine learning&lt;/strong&gt; – data pipelines for machine learning and managing data artefacts.&lt;br&gt;
– &lt;strong&gt;Data you trust&lt;/strong&gt; – data management, lineage, testing, and security.&lt;/p&gt;

&lt;p&gt;Here are just some of the talks from the three-day online conference.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#day-one"&gt;
  &lt;/a&gt;
  Day one
&lt;/h2&gt;

&lt;p&gt;The first day of DataEngBytes featured talks from industry experts on data privacy, productionising machine learning models, building data products, data pipelines, and MLOps.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/se6O5wFXEXw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/se6O5wFXEXw"&gt;The Rise &amp;amp; Downfall of the Data Engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/lCI2oQghyP8"&gt;Data Engineers: Privacy Is Your Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/goUbbAP2G94"&gt;From experiment to production – a journey of a machine learning model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/mOurdoETU6M"&gt;Chain-speed inference for Computer Vision Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/n8UKQq4hIDE"&gt;Trust, Knowledge and your Data: building a great data product at KADA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MR50CEFqZZo"&gt;Shift-left testing : Building reliable Data Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/4zqQhB_YxLs"&gt;Beginners guide to Azure MLOps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#day-two"&gt;
  &lt;/a&gt;
  Day two
&lt;/h2&gt;

&lt;p&gt;Day two kicked off with our keynote on Data Mesh which led on to talks on data quality, reliability, building a data platform and a panel on all things data in the enterprise.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ltoDyDWK23Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/ltoDyDWK23Q"&gt;What is a Data Mesh – And How Not To Mesh it Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/RF0kntmTFG8"&gt;Data Quality with Great Expectations and Airflow in a Reverse-ETL World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/-qf26mwuFhg"&gt;Reliable data engineering made easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/4h7f9-pjmnc"&gt;Data quality: the key to long term happiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MP2WiI2dmy0"&gt;Building a Data Platform at Assembly Payments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qgQmY5xlpY8"&gt;Streaming data analytics with Apache Flink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/LaaRQccCPd0"&gt;Teleport Data: The future of data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#day-three"&gt;
  &lt;/a&gt;
  Day three
&lt;/h2&gt;

&lt;p&gt;The final day of the conference focused on tools for the modern data stack with Apache Flink, dbt, Snowflake and data warehousing.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6CoSLTQKAmw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/6CoSLTQKAmw"&gt;From telescope to data centre: adventures in astronomical data pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Cdvv_f9F_LI"&gt;Gone Streaming: dbt+Materialize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/HY0GsnzayM8"&gt;A Single Data Platform for All of Your Workloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MoXB3hDpB-8"&gt;Putting your data warehouse to work – Reverse ETL &amp;amp; Operational Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vqS7aMmQQlE"&gt;Snowflake and dbt — Our Journey to the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/AyDgk2GUh1Q"&gt;Situational Intelligence with Analytics in Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Tj1iUgQXUZs"&gt;Albero – Decision Tree: when to use what – the full Azure data estate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That wraps up this year’s conference! Hopefully, we’ll be back to in-person events real soon but in the meantime check out the DataEngBytes YouTube channel for more data engineering talks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/dataengau"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dataengconfau"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/dataengconfau/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dataengineering</category>
      <category>database</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Sending SMS Messages with AWS Amplify and NextJS</title>
      <author>Michael Liendo</author>
      <pubDate>Fri, 15 Oct 2021 06:30:47 +0000</pubDate>
      <link>https://dev.to/mtliendo/sending-sms-messages-with-aws-amplify-and-nextjs-a0m</link>
      <guid>https://dev.to/mtliendo/sending-sms-messages-with-aws-amplify-and-nextjs-a0m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#send-an-sms-to-customers-using-react-and-aws-amplify"&gt;
  &lt;/a&gt;
  Send an SMS to Customers Using React and AWS Amplify
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ivmFUE_6ZKE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Whether it's notifying customers that their food is ready, getting school notifications, or a status update on a delivered package, SMS is a great way to get a communicate.&lt;/p&gt;

&lt;p&gt;When it comes to sending push notifications, email, or SMS, AWS has a service known as  &lt;a href="https://aws.amazon.com/sns"&gt;Amazon Simple Notification Service&lt;/a&gt;  or SNS. In this post, we'll discuss how we can leverage SNS inside of a project built with React and  &lt;a href="https://docs.amplify.aws"&gt;AWS Amplify&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Specifically, we'll mimic a scenario often found in delivery apps, such as catering companies: Customers have sent us orders, and now that the order is ready, we'll send a notification that the order is out for delivery. The architecture setup is a bit contrived, but this post will contain plenty of foundational tools for folks to get started with and will help us build more complex apps in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-sns-concepts"&gt;
  &lt;/a&gt;
  Key SNS Concepts
&lt;/h2&gt;

&lt;p&gt;When working with SNS, it's important to define four main ideas you'll commonly run into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Topic&lt;/strong&gt;: It's possible to create many instances of the SNS service. You can for example, create on that sends emails regarding signups, and another that sends texts regarding orders. Each SNS instance has a name, which AWS calls a "topic".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Publisher&lt;/strong&gt;: Simply put, who is sending the message. In our example, we'll create an API to publish the message ourselves. However, this can also be triggered based on another action, such as an item being saved to a database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscriber&lt;/strong&gt;: Converse to a publisher is a subscriber. Who are the recipients.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fan Out&lt;/strong&gt;: One of the most common design patterns in serverless architectures. This allows multiple endpoints (emails, phone numbers, etc) to subscribe to a single topic. In doing so, when a single message is published, it can be sent (or fanned out) to multiple targets.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#project-starter-files"&gt;
  &lt;/a&gt;
  Project Starter Files
&lt;/h2&gt;

&lt;p&gt;To keep the focus on sending SMS messages to our customers, our project will use a static list of orders. To get started with this setup, feel free to clone &lt;a href="https://github.com/mtliendo/catering-sns-example"&gt;this repo&lt;/a&gt;  from GitHub and install the dependencies.&lt;/p&gt;

&lt;p&gt;Upon starting the project, you should see the following page on &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21sBINhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634148651347/2rkJzwjOE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21sBINhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634148651347/2rkJzwjOE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The markup to create the application isn't the focus, but feel free to take a look. The mock data used for an order is definitely something worth calling out. In particular, note that an order is made up of an &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;products&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, and &lt;code&gt;customerNotes&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🤔 Because this is a delivery app, you might be wondering why there aren't fields like &lt;code&gt;phoneNumber&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Instead of having those accessible on the frontend, we'll use the order's &lt;code&gt;id&lt;/code&gt; to send them to the driver from our backend whenever an order is ready for delivery. This helps protect sensitive customer information by only allowing drivers to access them when they need them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_y6FhXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634149542731/ZjnKEcYi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_y6FhXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634149542731/ZjnKEcYi7.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-our-backend"&gt;
  &lt;/a&gt;
  Adding Our Backend
&lt;/h2&gt;

&lt;p&gt;Recall our scenario: A driver is given a list of customer orders. When selecting an order, we want to notify the customer that their order is being delivered.&lt;/p&gt;

&lt;p&gt;To get started, we'll want to first setup Amplify so we can begin adding categories.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If needing to setup AWS Amplify for the first time, add run the command &lt;code&gt;npm i -g @aws-amplify/cli&lt;/code&gt; and follow the prompts after running &lt;code&gt;amplify configure&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your terminal and while in your project's directory, run the following command to initialize Amplify in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After selecting a name for the project, select &lt;code&gt;n&lt;/code&gt; when asked if wanting to accept the default configuration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default configuration assumes a project created with  &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt;, but this project is scaffolded with  &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;create-next-app&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While most of the defaults will be the same, when asked for a &lt;code&gt;Source Directory Path&lt;/code&gt;, instead of &lt;code&gt;src&lt;/code&gt;, use &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, when asked for a &lt;code&gt;Distribution Directory Path&lt;/code&gt;, instead of &lt;code&gt;build&lt;/code&gt;, use &lt;code&gt;.next&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2vljRDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634150381595/RhUm34Oni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2vljRDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634150381595/RhUm34Oni.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done initializing our project with Amplify, we'll install two packages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;aws-amplify&lt;/code&gt;: This will allow us to connect our frontend to our cloud backend&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@aws-amplify/ui-react&lt;/code&gt;: Prebuilt UI components so we don't have to write our own login and signup forms
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i aws-amplify @aws-amplify/ui-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;One of the greatest features of Amplify, is its ability to easily add authentication.&lt;/p&gt;

&lt;p&gt;This allows developers to focus more on their apps business logic and less on unvarying app aspects. In the case of our application, we want to provide our drivers the ability to login. In our terminal, we'll run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will walk us through a series of prompts. In this project, we'll accept the default configuration and have drivers signup with a username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Li9SUA7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634152615476/icdQ_1yt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Li9SUA7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634152615476/icdQ_1yt6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-an-api"&gt;
  &lt;/a&gt;
  Adding an API
&lt;/h3&gt;

&lt;p&gt;This is the main part of the project!&lt;/p&gt;

&lt;p&gt;From here, we'll create an API that instructs a serverless function to send an SMS message.&lt;/p&gt;

&lt;p&gt;Using the Amplify CLI again in our terminal, we'll run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As before, this will ask a series of prompts on how we would like to configure our API.&lt;br&gt;
Amplify supports both GraphQL and REST API's, and both can be configured in the same project. For our purposes, we'll create a REST API and select the options in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZi0yWuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634153532781/BeMQO1Lsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZi0yWuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634153532781/BeMQO1Lsa.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🚨We'll update the code for the Lambda function that was created for us in the next step, but keep the terminal prompt open as there are a few more prompts to answer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the Lambda that was just templated for us, let's replace the generated code with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Amplify Params - DO NOT EDIT
    API_DELIVERYAPI_APIID
    API_DELIVERYAPI_APINAME
    ENV
    REGION
Amplify Params - DO NOT EDIT */&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SNSClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SNS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. get orderID from the event&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;orderID&lt;/span&gt;

    &lt;span class="c1"&gt;// 🪄 used orderID to look up orderDetails in database 🪄&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;orderID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123-abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;987 fakeaddress ln&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+12813308004&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//replace with your phone #&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 2.  🎉 send order update to customer&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SNSClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your order is out for delivery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;TargetArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SNS_TOPIC_ARN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;MessageAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;sms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;String.Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 3. send response back to the frontend&lt;/span&gt;
        &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;987 fakeaddress ln&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// todo: update response for when things go bad 😢&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aside from bringing in the &lt;code&gt;aws-sdk&lt;/code&gt; itself to create an new &lt;code&gt;SNS&lt;/code&gt; instance, there are 3 key areas we'll want to focus on (I noted the code snippets above to reflect the 3 areas).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The data from the frontend is sent as a string and is accessible from the &lt;code&gt;body&lt;/code&gt; of the event. By parsing it out, we can use that to lookup the order from a database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here, we send the message! This showcases how easy it is to publish a message. We specify the SNS topic we want to send to, specify a message, and provide some attributes. The attributes are important here. By default, SNS will publish a message to all of its subscribers. This allows us to specify the exact subscriber(s) to send to.  More on that last bit in a minute!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We allow CORS access and send the address to the driver on the frontend.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;🗒️ Because the purpose of this post is to showcase how to send an SMS message, we're removing topics like database lookups or updating database fields. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With our Lambda function coded out, back in your terminal, finish the prompts by answering the remaining questions as show in the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--StUl1tU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634153787298/w9s5YFRjM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--StUl1tU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634153787298/w9s5YFRjM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-sns-topic"&gt;
  &lt;/a&gt;
  Creating Our SNS Topic
&lt;/h3&gt;

&lt;p&gt;In our Lambda function, you'll notice that there is an environment variable for the target ARN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TargetArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SNS_TOPIC_ARN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This assumes that we have an SNS topic already configured. Amplify doesn't have a CLI command to create SNS topics, but we can do so in the console and the use the CLI to handle the rest. &lt;/p&gt;

&lt;p&gt;Head to &lt;a href="https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-topic"&gt;this link&lt;/a&gt; to be taken to the AWS Console for SNS, note you may be promoted to sign into your AWS account. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🗒️ Ensure the region in the top right of the page is the same as the region your Amplify project is in.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From here, select "Standard" as the topic type, and give it a name. Once done, click the "Create topic" button at the bottom on the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21tY_AP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634184688425/XzXXXgOhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21tY_AP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634184688425/XzXXXgOhk.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create a subscriber. This can be done automatically through the API or manually via the Console. While we're in the Console we'll select "Create Subscriber" and on the following page, enter our subscriber details&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAbkh49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634185422388/WV1sjnok7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmAbkh49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634185422388/WV1sjnok7.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🚨Copy the ARN. We'll need that in a bit. Also note that the phone number entered, should be replaced with a valid phone number and is what should be put in the &lt;code&gt;order&lt;/code&gt; object inside of our Lambda function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may be wondering what is going on with the filter policy. When publishing to an SNS topic, the message will automatically be fanned out to all of the subscribers. By specifying a filter policy on the subscriber, we are telling SNS that this subscriber only cares about messages with those attributes. Note that these attributes match up with what is in lambda function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SNSClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your order is out for delivery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;TargetArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SNS_TOPIC_ARN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;MessageAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;sms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;String.Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our topic created with a subscriber, we can head back to our code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-our-function"&gt;
  &lt;/a&gt;
  Updating Our Function
&lt;/h3&gt;

&lt;p&gt;As mentioned, you'll want to update the phone number in our Lambda function to be the same as the phone number entered in your SNS topic.&lt;/p&gt;

&lt;p&gt;Next, we'll update need to give our Lambda function permission to call SNS, and also set the environment variable for the &lt;code&gt;SNS_TOPIC_ARN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To update the Lambda permissions, Amplify now creates a file called &lt;code&gt;custom-policies.json&lt;/code&gt; whenever a lambda function is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIyby2SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634186142263/EHluiKAGT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIyby2SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634186142263/EHluiKAGT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Replace the contents of that file with the following JSON policy, replacing the ARN with the ARN of your SNS topic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sns:Publish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:sns:us-east-1:ActNumber:Orders&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all it takes to give our function permission to call SNS.&lt;/p&gt;

&lt;p&gt;To add the environment variable, we'll use the CLI. Run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify update &lt;span class="k"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the Lambda function we are working with and follow the prompts to add an environment variable as show in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5NHvuve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634186703138/40tnC25_w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5NHvuve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634186703138/40tnC25_w.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, our Lambda function is now configured to send messages to subscribers!&lt;/p&gt;

&lt;p&gt;Go ahead and push up all of local backend services to AWS by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-our-application"&gt;
  &lt;/a&gt;
  Testing Our Application
&lt;/h3&gt;

&lt;p&gt;With our backend changes up, let's create a test user and configure our frontend to trigger an API call.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;_app.js&lt;/code&gt;, uncomment the code so that we can our frontend can be configured with the credentials needed to talk to our backend.&lt;/p&gt;

&lt;p&gt;Next, we'll do the same in &lt;code&gt;index.js&lt;/code&gt;. Note that in addition to the import and export statements, there is the &lt;code&gt;onClick&lt;/code&gt; handler definition and where it's being called that need to be uncommented.&lt;/p&gt;

&lt;p&gt;With everything saved, go ahead and restart the application, sign up for an account, and upon clicking a product, the phone number used to subscribe should receive a message!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🚨 To clean up the app, run &lt;code&gt;amplify delete&lt;/code&gt;. This will delete all of the Amplify created resources, both locally and in the cloud. Note that since the SNS topic was created outside of Amplify, that would have to be done manually.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;While a bit contrived, this example showcased how to use Amplify to send updates to SNS subscribers and a practical use case for using filter policies. In a real world application, a database entry could serve as a trigger for the Lambda instead of an API call. If interested in how to setup a database trigger, feel free to checkout my post on  &lt;a href="https://blog.focusotter.com/serverless-contact-form-using-aws-amplify"&gt;Setting Up A Serverless Contact Form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for checking out this post, let me know your thoughts down in the comments and stay tuned for more tips on how Amplify can speed up your development flow!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>aws</category>
      <category>react</category>
      <category>serverless</category>
    </item>
    <item>
      <title>No-code development for dummies</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Fri, 15 Oct 2021 06:19:21 +0000</pubDate>
      <link>https://dev.to/abhirajb/no-code-development-for-dummies-291o</link>
      <guid>https://dev.to/abhirajb/no-code-development-for-dummies-291o</guid>
      <description>&lt;p&gt;The low-code no-code movement began its slow and gradual revolution during the 1970s. Now this revolution is the norm in almost every software and application category. Low-code no-code app development platforms are becoming more and more prominent in modern organizations across a wide range of industries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.forrester.com/report/The+Forrester+Wave+LowCode+Development+Platforms+For+ADD+Professionals+Q1+2019/-/E-RES144387"&gt;Forrester&lt;/a&gt; expects the no-code/low-code market to reach $21.2 billion by 2022. And &lt;a href="https://www.gartner.com/en/documents/3956079/magic-quadrant-for-enterprise-low-code-application-platf"&gt;Gartner&lt;/a&gt; estimates that enterprise low-code application platforms (LCAP) will be 65% of all app creations within the next five years.&lt;/p&gt;

&lt;p&gt;In the no-code space, developers build functional but limited apps without writing a single line of code. The low-code space focuses on professional IT developers, creating enterprise-class applications without going through the process of coding an entire app manually.&lt;/p&gt;

&lt;p&gt;In an era where digital transformation and innovation play a critical role in organizational growth, speed and automation can mean the difference between moving forward and falling behind. To help you better understand the low-code no-code movement, let’s explore what all of these platforms really mean for your business.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#whats-the-lowcode-nocode-movement"&gt;
  &lt;/a&gt;
  What’s the Low-Code No-Code Movement?
&lt;/h4&gt;

&lt;p&gt;Low-code, no-code app development platforms are experiencing unprecedented amounts of hype. Why? Because the low-code no-code movement enables businesses to keep up with the rapidly changing technology landscape by empowering software development with little to no coding.&lt;/p&gt;

&lt;p&gt;This means you are able to move forward without having to wait in the IT queue. Requirements can be quickly documented and approved, then implemented in a matter of days. In fact, almost every mobile application development company is looking to position itself in the low-code/no-code space.&lt;/p&gt;

&lt;p&gt;Low-code development supports digital transformation and it is responsible for creating new growth opportunities for both small and large businesses. This movement also helps IT teams be more productive by relieving the pressure to quickly deliver basic applications. Because the business can self-serve, the IT team is able to instead focus on more complex tasks.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#benefits-of-lowcode-and-nocode-platforms"&gt;
  &lt;/a&gt;
  Benefits of Low-Code and No-Code Platforms
&lt;/h4&gt;

&lt;p&gt;Trying to build applications more quickly, at less cost, and with higher quality is no longer a thing of the past. Low-code platforms are making this a reality. Let’s look at the many benefits of low-code and no-code platforms.&lt;/p&gt;

&lt;p&gt;No-code low-code development platforms deliver many benefits, but the main benefit is speed with digital transformation. When you’re building applications with a low code platform, you don’t have to spend time worrying about coding rules for traffic routing, scalability, or any other time-consuming aspect.&lt;/p&gt;

&lt;p&gt;Reducing the time it takes to develop an app means your team gets to the production phase even faster. For enterprises, it means they have an opportunity to do a lot more by reducing a whole year’s project down to a few months—or even, a few weeks.&lt;/p&gt;

&lt;p&gt;The development of solutions based on low-code no-code concepts further reduces the complexity of creating, testing, and deploying new applications. The reduced complexity of building new apps results in easier access to innovation to help keep up with market movements.&lt;/p&gt;

&lt;p&gt;Low-code no-code app development platforms have transformed how companies build applications. These platforms have turned a cumbersome and costly process into an agile and efficient development process.&lt;/p&gt;

&lt;p&gt;With low-code platforms, a development background is not needed to build applications that bring full automation to reality. Self-service applications with existing templates, pre-built forms, and elements enable a team of citizen developers to quickly build a working app with little hassle.&lt;/p&gt;

&lt;p&gt;For more complex processes, or where custom coding is needed, these low-code app development platforms ensure a seamless way for departments to collaborate, build, and deploy applications. Building a functional prototype of a complex application provides a living set of requirements to the IT team for further development. The prototype can help you set expectations and ensure that the final product delivers on your vision.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#the-risks-of-lowcode-and-nocode-platforms"&gt;
  &lt;/a&gt;
  The Risks of Low-Code and No-Code Platforms
&lt;/h4&gt;

&lt;p&gt;Low-code or no-code doesn’t mean “low or no risk.” Here are some concerns to consider with low-code and no-code platforms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No Chance for Customization&lt;br&gt;
Customization options vary widely from platform to platform. The modular components in low-code platforms limit your customization options. Once you’re inside a new system, you’ll want to improve a specific component or maintain one to meet your specific needs. However, instead of providing the option to customize the system, low-code no-code platforms require you to change business processes to meet their capabilities. On the other side of this, many low-code no-code platforms are making huge strides to address this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limited System Integration&lt;br&gt;
Several products and tools work together to form a digital transformation strategy. But going with a no-code approach alone can create integration problems down the road. Since you will be dealing with systems that are core to your business, you cannot afford to sacrifice custom integration for speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constrained Ability to Deliver Refined User Experience&lt;br&gt;
When you create a custom platform, you are confident that you can rely on it because you understand every aspect of how it works.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The low-code no-code movement is putting frontline citizen developers in the driver’s seat while allowing IT to focus on critical systems and security initiatives. These platforms are flexible and robust enough to rise to the market’s toughest challenges. Organizations who “get it” will turn this power into an unfair competitive advantage.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>programming</category>
      <category>nocode</category>
    </item>
    <item>
      <title>3 Lightweight JavaScript Carousel Libraries</title>
      <author>Rupak Dey</author>
      <pubDate>Fri, 15 Oct 2021 05:41:47 +0000</pubDate>
      <link>https://dev.to/deyrupak/3-lightweight-javascript-carousel-libraries-3o06</link>
      <guid>https://dev.to/deyrupak/3-lightweight-javascript-carousel-libraries-3o06</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emblacarouselcom"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.embla-carousel.com/"&gt;embla-carousel.com&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A lightweight carousel library with fluid motion and great swipe precision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPWltOat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc3ffxmskpn6qm1ll41u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPWltOat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc3ffxmskpn6qm1ll41u.png" alt="embla-c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#glidejscom"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://glidejs.com/"&gt;glidejs.com&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A dependency-free JavaScript ES6 slider and carousel. It’s lightweight, flexible and fast. Designed to slide. No less, no more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FB1mrMer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4xsqn6uqsffu23paz6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FB1mrMer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4xsqn6uqsffu23paz6a.png" alt="Glidejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#splidejscom"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://splidejs.com/"&gt;splidejs.com&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A lightweight, flexible and accessible slider and carousel. No dependencies, no Lighthouse errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhHfwEnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/peek3six7rea63v7vk42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhHfwEnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/peek3six7rea63v7vk42.png" alt="splide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Thank you for reading. Please leave a like if you enjoyed the post and follow for upcoming articles!&lt;/p&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Divtober Day 15: Float</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 15 Oct 2021 05:31:38 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-15-float-5c2b</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-15-float-5c2b</guid>
      <description>&lt;p&gt;The word of the day is float... so I did a boat floating peacefully by itself, with the oars in disarray:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdvmVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And with a video of how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kb-MxR1BXHw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;The drawing is based on a &lt;a href="https://codepen.io/alvaromontoro/pen/OJXVXMO"&gt;previous drawing I had done&lt;/a&gt;... which is funny, because initially I was doing a different illustration for divtober, also based on a &lt;a href="https://codepen.io/alvaromontoro/details/XWdrQOg"&gt;drawing for a CSS game&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOLbKoO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Receiving an error for a while... </title>
      <author>Bharat Sharma</author>
      <pubDate>Fri, 15 Oct 2021 05:30:52 +0000</pubDate>
      <link>https://dev.to/bharatsharma77/receiving-an-error-for-a-while-25cd</link>
      <guid>https://dev.to/bharatsharma77/receiving-an-error-for-a-while-25cd</guid>
      <description>&lt;p&gt;./src/Redux/Reducer/rootReducer.js&lt;br&gt;
Attempted import error: 'combineReducer' is not exported from 'redux'.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Day 9: Picking the dark-mode color palette for web app buttons logically</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Fri, 15 Oct 2021 05:25:14 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/day-9-picking-the-dark-mode-color-palette-for-web-app-buttons-logically-mao</link>
      <guid>https://dev.to/masakudamatsu/day-9-picking-the-dark-mode-color-palette-for-web-app-buttons-logically-mao</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;To design the dark mode color scheme for buttons on a web app with embedded Google Maps, I apply the same logic, wherever possible, as used for designing the light mode color scheme so that the dark mode UI appears visually consistent with the light mode counterpart.&lt;/p&gt;

&lt;p&gt;But I’ve learned that there are a couple of things unique about the dark mode.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;opacity&lt;/em&gt; level needs to be lower than in the light mode, to achieve a visually similar level of translucency (see Section 2).&lt;/p&gt;

&lt;p&gt;Also, the shadow’s &lt;em&gt;blur radius&lt;/em&gt; for the glow effect needs to be longer than in the light mode, to make the glowing light appear natural (see Section 6).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I'm designing/coding &lt;em&gt;My Ideal Map App&lt;/em&gt;, a web app that improves the user experience of Google Maps (see &lt;a href="https://dev.to/masakudamatsu/creating-saas-to-solve-my-own-problem-4gk9"&gt;&lt;strong&gt;Day 1 of this blog series&lt;/strong&gt;&lt;/a&gt; for detail).&lt;/p&gt;

&lt;p&gt;The app's main user interface embeds Google Maps full-screen, with the buttons for main features positioned at screen corners on top of the map.&lt;/p&gt;

&lt;p&gt;The design and coding for these buttons has been described in this blog series:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/masakudamatsu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecVAc1ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PLbsBsYv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/522915/238cfd20-65e5-4b05-8803-2c4c18f29192.jpeg" alt="masakudamatsu"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Day 7: Making buttons look like "clouds" for embedded Google Maps&lt;/h2&gt;
      &lt;h3&gt;Masa Kudamatsu ・ Sep 30 ・ 25 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#svg&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#buttons&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uidesign&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/masakudamatsu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecVAc1ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PLbsBsYv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/522915/238cfd20-65e5-4b05-8803-2c4c18f29192.jpeg" alt="masakudamatsu"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/masakudamatsu/day-8-positioning-buttons-over-embedded-google-maps-3d5b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Day 8: Positioning buttons over embedded Google Maps&lt;/h2&gt;
      &lt;h3&gt;Masa Kudamatsu ・ Oct 7 ・ 18 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#googlemaps&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#styledcomponents&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uidesign&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This article is the third one for button design, describing how I've designed the dark mode color scheme for the buttons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-consistency-with-light-mode"&gt;
  &lt;/a&gt;
  1. Consistency with light mode
&lt;/h2&gt;

&lt;p&gt;If the color scheme is inconsistent between dark and light modes, the user may perceive each mode as a different app. It'll be the failure of branding the app.&lt;/p&gt;

&lt;p&gt;One way to make light and dark modes consistent with each other is to use the same logic behind the choice of color for both modes as much as possible.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;My Ideal Map App&lt;/em&gt;, the light mode color scheme for buttons is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dy8xoM2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf2upduxynnm9akm16o1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dy8xoM2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf2upduxynnm9akm16o1.png" alt="Fill color is semi-transparent white (rgba(255,255,255,0.93)); label color is medium gray (rgb(90,90,90)); outline color is light gray (rgb(148,148,148)); shadow color is semi-transparent black (rgba(0,0,0,0.33)"&gt;&lt;/a&gt; &lt;strong&gt;Light mode color scheme for button's default state&lt;/strong&gt; (image source: the author)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xP2Zgkuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90unz5q0l0k2s7mrpdap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xP2Zgkuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90unz5q0l0k2s7mrpdap.png" alt="Fill color is semi-transparent white (rgba(255,255,255,0.93)); label color is black (rgb(3,3,3)); outline color and shadow color are bright blue-cyan (rgb(69,159,189))"&gt;&lt;/a&gt; &lt;strong&gt;Light mode color scheme for button's focus/hover state&lt;/strong&gt; (image source: the author)&lt;/p&gt;

&lt;p&gt;Each color is chosen for a reason (see &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for detail). I follow the same reason wherever possible, to pick the corresponding color for the dark mode. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fill-color"&gt;
  &lt;/a&gt;
  2. Fill color
&lt;/h2&gt;

&lt;p&gt;For the light mode, I chose &lt;code&gt;rgba(255, 255, 255, 0.93)&lt;/code&gt;, a semi-transparent white, for the reason as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Clouds are white. Making the button semi-transparent allows the map beneath to be partially visible, creating an impression that the cloud-shaped button is floating over the map. The opacity value of 0.93 is chosen to strike the balance between making it recognized as a button and creating the “floating” impression.” — Section 6.1 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the dark mode, a pure white would be too glaring for the user's eye. To avoid any glare, the button's color should have a similar level of luminance to the brightest color on the map, which is the dark orange (&lt;code&gt;#ae6f2f&lt;/code&gt;) of streets (see &lt;a href="https://dev.to/masakudamatsu/day-5-switching-embedded-google-maps-into-custom-dark-mode-after-6pm-g9j"&gt;&lt;strong&gt;Day 5 of this blog series&lt;/strong&gt;&lt;/a&gt; for detail):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x58k6u3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ahgv5b1esfelpvrgql3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x58k6u3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ahgv5b1esfelpvrgql3.png" alt="A street map with place labels in light gray (outlined in darker gray), buildings outlined in medium gray, streets in dark orange, parks in dark green, rivers and canals in dark cyan and other elements in dark shades of gray"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The embedded Google Maps in the dark theme of &lt;em&gt;My Ideal Map App&lt;/em&gt;&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;p&gt;In the above screenshot, notice how glaring Google Maps's white default search box buttons are against the dark theme of the map.&lt;/p&gt;

&lt;p&gt;For the dark theme fill color of buttons, therefore, I pick &lt;code&gt;rgb(123,123,123)&lt;/code&gt; whose luminance is similar to the dark orange of streets: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RHfskrQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3hikfet29p9ho82r9s8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RHfskrQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3hikfet29p9ho82r9s8.png" alt="Luminance contrast ratio of rgb(123, 123, 123) to #ae6f2f is 1 to 1.03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luminance contrast ratio between &lt;code&gt;rgb(123, 123, 123)&lt;/code&gt; and &lt;code&gt;#ae6f2f&lt;/code&gt;&lt;/strong&gt; (image source: &lt;a href="https://contrast-ratio.com/#%23ae6f2f-on-rgb%28123%2C123%2C123%29"&gt;contrast-ratio.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;To reinforce the appearance of a cloud, I want the button to be semi-transparent (as I did for the light mode). I tried several values of opacity, and the opacity of &lt;code&gt;0.8&lt;/code&gt; looks best, allowing the map beneath to be slightly shown without losing an impression of being a button. &lt;/p&gt;

&lt;p&gt;Interestingly, this is lower than the opacity of &lt;code&gt;0.93&lt;/code&gt; for the daytime color scheme. I've learned that a lower level of overall luminance of the dark theme requires a lower level of opacity to achieve the semi-transparent look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-outline-color"&gt;
  &lt;/a&gt;
  3. Outline color
&lt;/h2&gt;

&lt;p&gt;For the button's outline in the light mode, I've picked &lt;code&gt;rgb(148,148,148)&lt;/code&gt; for the following reason:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The relative luminance in the map’s color scheme ranges from 6 of the gray of city blocks (#898989 ) to 21 of the pure white of streets (where the value refers to the contrast ratio against pure black). ... If the cloud-shaped button is above streets on the map, however, it visually merges with them due to the lack of luminance contrast. A solution is to outline the cloud-shaped button with a shade of gray that’s just enough to satisfy the 3-to-1 contrast ratio against pure white. — Section 6.3 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the dark mode, I've just set the button's fill color to have a similar level of luminance to the color of streets on the map. So the same consideration needs to be applied as in the light mode. &lt;/p&gt;

&lt;p&gt;So I add an outline in the same shade of gray as city blocks, &lt;code&gt;#2b2b2b&lt;/code&gt;, to the button. Since the color of city blocks and streets was chosen to satisfy the 3-to-1 contrast ratio in luminance (see Section 2.5 of &lt;a href="https://dev.to/masakudamatsu/day-5-switching-embedded-google-maps-into-custom-dark-mode-after-6pm-g9j"&gt;&lt;strong&gt;Day 5 of this blog series&lt;/strong&gt;&lt;/a&gt;), this ensures the perceptually distinct button against its background. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-shadow-color"&gt;
  &lt;/a&gt;
  4. Shadow color
&lt;/h2&gt;

&lt;p&gt;In the light mode, the button's shadow color is &lt;code&gt;rgba(0,0,0,0.33)&lt;/code&gt;, a semi-transparent black. This shadow color was chosen so that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“the distinction between the button outline and the shadow gets blurry, and the outline’s gray will be perceived as part of the shadow.” — Section 7.5 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To implement this design strategy for the dark mode as well, I search for the level of opacity of black whose luminance contrast against the background of dark orange streets on the map will be similar to the dark gray of the button's outline (i.e., &lt;code&gt;#2b2b2b&lt;/code&gt;). It turns out that the opacity level of 0.65 does the job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9Nc7KIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcbw0kbb8f26g2lfpa8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9Nc7KIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcbw0kbb8f26g2lfpa8r.png" alt="Luminance contrast of rgba(0, 0, 0, 0.65) against the background in dark orange (#ae6f2f) is 1 to 3.42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luminance contrast between &lt;code&gt;#ae6f2f&lt;/code&gt; and &lt;code&gt;rgba(0, 0, 0, 0.65)&lt;/code&gt; when the former is used as the background&lt;/strong&gt; (image source: &lt;a href="https://contrast-ratio.com/#rgb%280%2C0%2C0%2C%200.65%29-on-%23ae6f2f"&gt;contrast-ratio.com&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6k68pABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8135xcogjz884nb7jxiy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6k68pABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8135xcogjz884nb7jxiy.png" alt="Luminance contrast of #2b2b2b against the background in dark orange (#ae6f2f) is 1 to 3.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luminance contrast between &lt;code&gt;#ae6f2f&lt;/code&gt; and &lt;code&gt;#2b2b2b&lt;/code&gt;&lt;/strong&gt; (image source: &lt;a href="https://contrast-ratio.com/#%232b2b2b-on-%23ae6f2f"&gt;contrast-ratio.com&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;But I cannot use &lt;code&gt;rgba(0,0,0,0.65)&lt;/code&gt; as the shadow color, because for the button's shadow to be natural-looking, it needs to be three layers of drop shadows with different degrees of blur radius (see Section 7.4 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for why; see also &lt;a href="https://tobiasahlin.com/blog/layered-smooth-box-shadows/"&gt;Ahlin 2019&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To achieve the opacity of 0.65 (or 35% transparency) with three layers of shadow, each layer needs to have the opacity of 0.3 (or 70% transparency), because 0.7 to the power of 3 is close to 0.35. With a positive value of blur-radius, the opacity of a shadow at the edge of a shadowed element is half the value specified. So we need to double the opacity of 0.3 and get &lt;code&gt;rgba(0,0,0,0.6)&lt;/code&gt; as the color of shadow. &lt;/p&gt;

&lt;p&gt;The CSS declaration for the button's shadow will be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
  &lt;span class="nt"&gt;drop-shadow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; 
  &lt;span class="nt"&gt;drop-shadow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="nt"&gt;drop-shadow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;filter: drop-shadow()&lt;/code&gt; instead of the &lt;code&gt;box-shadow&lt;/code&gt; property because our buttons are made of SVG code (see &lt;a href="https://css-tricks.com/adding-shadows-to-svg-icons-with-css-and-svg-filters/"&gt;Olawanle 2021&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This way, the button outline blends nicely into the shadow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-button-label-color"&gt;
  &lt;/a&gt;
  5. Button label color
&lt;/h2&gt;

&lt;p&gt;For the dark mode's button label color, we need a different logic from the light mode. In the light mode, the button's fill color is white, against which a wide range of gray shades are visually distinctive. In the dark mode, however, the button's fill color is a medium shade of gray, against which there is only a limited range of lighter shades of gray with a sufficient level of luminance contrast.&lt;/p&gt;

&lt;p&gt;I go for &lt;code&gt;rgb(218,218,218)&lt;/code&gt; whose luminance contrast ratio is 3.02 to 1 against the button's fill color of &lt;code&gt;rgb(123,123,123)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7yWo_E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p0u64rqqlxjl26x0qmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7yWo_E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p0u64rqqlxjl26x0qmf.png" alt="Luminance contrast ratio of rgb(123,123,123) to rgb(218,218,218) is 3.02 to 1"&gt;&lt;/a&gt; &lt;strong&gt;Luminance contrast ratio between &lt;code&gt;rgb(123,123,123)&lt;/code&gt; and &lt;code&gt;rgb(218,218,218)&lt;/code&gt;&lt;/strong&gt; (image source: &lt;a href="https://contrast-ratio.com/#rgb%28218%2C218%2C218%29-on-rgba%28123%2C123%2C123%29"&gt;contrast-ratio.com&lt;/a&gt;)&lt;/p&gt;




&lt;p&gt;Let me summarize the dark mode color scheme of the button's default state:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0u-EO2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97dkuxogu4pk2m8qzvsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0u-EO2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97dkuxogu4pk2m8qzvsz.png" alt="Fill color is semi-transparent grey (rgba(123,123,123,0.8)); label color is off-white (rgb(218,218,218)); outline color is dark gray (#2b2b2b); shadow color is semi-transparent black (rgba(0,0,0,0.6)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark mode color scheme for button's default state&lt;/strong&gt; (image source: the author)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-focushover-states-style"&gt;
  &lt;/a&gt;
  6. Focus/Hover states style
&lt;/h2&gt;

&lt;p&gt;For the light mode, the button's focus and hover states feature a shade of cyan blue (&lt;code&gt;rgb(69, 159, 189)&lt;/code&gt;) as its outline and shadow color, creating a glowing effect. And this color satisfies the 3-to-1 luminance contrast ratio against the button's fill color, that is white.&lt;/p&gt;

&lt;p&gt;For the dark mode, I want the button to look illuminated with moonlight when it's in focus. A simple way to go is to use pure white for the single layer of shadow and semi-transparent white for the outline. So I go with the following CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nf"&gt;#cloud&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nf"&gt;#cloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use the &lt;code&gt;storke&lt;/code&gt; property, not the &lt;code&gt;border&lt;/code&gt;, to specify the outline color because the button is drawn with SVG's &lt;code&gt;&amp;lt;path id="#cloud"&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;rgba(255,255,255,0.4)&lt;/code&gt; as the outline color. The opacity of 0.4 ensures that the outline is not too obvious. &lt;/p&gt;

&lt;p&gt;Then I set the blur radius of &lt;code&gt;10px&lt;/code&gt; for the shadow, larger than the 5px I used for the daytime style. I don't know exactly why, but these adjustments make the glow look more natural than otherwise. Perhaps it's because glowing light appears to spread wider at night than at daytime.&lt;/p&gt;

&lt;p&gt;Correspondingly, I set the button label color for the focus/hover states to be pure white (&lt;code&gt;rgb(255,255,255)&lt;/code&gt;) as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where I use the &lt;code&gt;fill&lt;/code&gt; property, not the &lt;code&gt;color&lt;/code&gt; property, because the button label is an SVG image.&lt;/p&gt;

&lt;p&gt;Let me summarize the dark mode color scheme for the focus/hover states:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XyH_Ytvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq7gjow2hw8d88fxjj7b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XyH_Ytvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq7gjow2hw8d88fxjj7b.png" alt="Fill color is semi-transparent grey (rgba(123,123,123,0.8)); label color and shadow color are white (rgb(255,255,255)); outline color is semi-transparent white (rgba(255,255,255,0.4))"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark mode color scheme for button's focus/hover state&lt;/strong&gt; (image source: the author)&lt;/p&gt;

&lt;p&gt;Pure white may be glaring when seen at night. I'll review this decision as I modify the focus state for the light mode (see Section 8 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-active-state-style"&gt;
  &lt;/a&gt;
  7. Active state style
&lt;/h2&gt;

&lt;p&gt;For the light mode, the active state (i.e., the appearance when the user taps/clicks the button) is styled so that it removes the outline and the shadow to make the button flicker briefly in response to the user's action. &lt;/p&gt;

&lt;p&gt;There's no reason why we change this for the dark mode. Therefore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="nf"&gt;#cloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step
&lt;/h2&gt;

&lt;p&gt;With the dark mode theme for buttons all set, &lt;em&gt;My Ideal Map App&lt;/em&gt; should show its dark mode UI as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vjVxAdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb5d3qplj1lcvulqcqei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vjVxAdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb5d3qplj1lcvulqcqei.png" alt="Buttons shown in the dark mode over the embedded Google Maps in the dark mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark mode buttons on the dark mode embedded Google Maps&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;p&gt;It should be a piece of cake to implement the dark mode UI with CSS and JavaScript: the standard technique is to use CSS variables with attribute selectors and to toggle the attribute when switching on and off the dark mode (see &lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#dark-mode-in-the-wild"&gt;Adhuham 2020&lt;/a&gt; and &lt;a href="https://epicreact.dev/css-variables/"&gt;Dodds 2020&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Well, that was my initial thought. And I was wrong... &lt;/p&gt;

&lt;p&gt;(To be continued to the next article of this blog series.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Adhuham (2020) “&lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/"&gt;A Complete Guide to Dark Mode on the Web&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jul 1, 2020.&lt;/p&gt;

&lt;p&gt;Ahlin, Tobias (2019) “&lt;a href="https://tobiasahlin.com/blog/layered-smooth-box-shadows/"&gt;Smoother &amp;amp; sharper shadows with layered box-shadows&lt;/a&gt;”, &lt;em&gt;tobiasahlin.com&lt;/em&gt;, Sep 19, 2019.&lt;/p&gt;

&lt;p&gt;Dodds, Kent C. (2020) “&lt;a href="https://epicreact.dev/css-variables/"&gt;Use CSS Variables instead of React Context&lt;/a&gt;”, &lt;em&gt;Epic React&lt;/em&gt;, Oct 2020.&lt;/p&gt;

&lt;p&gt;Olawanle, Joel (2021) “&lt;a href="https://css-tricks.com/adding-shadows-to-svg-icons-with-css-and-svg-filters/"&gt;Adding Shadows to SVG Icons With CSS and SVG Filters&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jun 11, 2021.&lt;/p&gt;

</description>
      <category>darkmode</category>
      <category>color</category>
      <category>uidesign</category>
      <category>button</category>
    </item>
  </channel>
</rss>
