<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Planning my career development for 2021</title>
      <author>Patricio Ferraggi</author>
      <pubDate>Tue, 19 Jan 2021 19:48:53 +0000</pubDate>
      <link>https://dev.to/patferraggi/planning-my-career-development-for-2021-52oo</link>
      <guid>https://dev.to/patferraggi/planning-my-career-development-for-2021-52oo</guid>
      <description>&lt;p&gt;If you are interested in reading this article in Spanish üá™üá∏, check out my blog:&lt;br&gt;
&lt;a href="https://www.patferraggi.dev/blog/2021/jan/planning/"&gt;The Developer's Dungeon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey guys, 2021 is finally here!. It has been a hard year but now so it is time to plan everything again, to write down on paper what I want to learn or do this year.&lt;/p&gt;

&lt;p&gt;If you been following my blog posts for some time you will know that I am a big fan of setting goals, planning, tracking, and of course DOING. &lt;/p&gt;

&lt;p&gt;Last year I focused on too many things and while I accomplished quite a few of the things I proposed to myself, I also noticed the pressure of not reaching what I was expecting was pushing me back. This year I am gonna go a little lighter, in the number of things but not on the effort, let's call it just having a "better" direction.&lt;/p&gt;

&lt;p&gt;Let's start already, shall we?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-be-comfortable-writing-at-least-in-one-functional-programming-language" class="anchor"&gt;
  &lt;/a&gt;
  1. Be comfortable writing at least in one functional programming language
&lt;/h2&gt;

&lt;p&gt;Last year I spent quite a lot messing around, going from book to book, looking up languages, talking to people, doing small tests on different environments. For this year I have made the decision to focus on learning &lt;code&gt;Haskell&lt;/code&gt;, at least first. This is gonna be my initial curriculum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read &lt;a href="https://www.goodreads.com/book/show/25587599-haskell-programming-from-first-principles"&gt;Haskell Book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read a &lt;a href="https://atypeofprogramming.com/"&gt;Type of programming&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read &lt;a href="http://learnyouahaskell.com/"&gt;Learn you a Haskell for great good&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read &lt;a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Category Theory for programmers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do at least one big personal project with Haskell.&lt;/li&gt;
&lt;li&gt;Explore other languages like Elm, PureScript, F#, Clojure.&lt;/li&gt;
&lt;li&gt;Read &lt;a href="https://leanpub.com/fp-oo"&gt;Functional programming for the object-oriented programmer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Re-Read¬†&lt;a href="https://web.mit.edu/alexmv/6.037/sicp.pdf"&gt;Structure and interpretation of computer programs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By separating a big goal into smaller concise tasks I don't need to worry about what to do next, I just follow the plan, if something is not going right I solve the issue and continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-get-better-at-software-architecture-and-computer-science" class="anchor"&gt;
  &lt;/a&gt;
  2. Get better at software architecture and computer science
&lt;/h2&gt;

&lt;p&gt;Last year I didn't focus on this at all, last year I had this idea that I wanted to learn more frontend, so I switched positions at my job and became a frontend developer. That taught me that I not really that interested in the frontend after all haha.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read¬†&lt;a href="https://bigmachine.io/products/the-imposters-handbook/"&gt;The imposter‚Äôs handbook series&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read and study &lt;a href="https://www.amazon.com/-/es/Robert-C-Martin-ebook/dp/B075LRM681"&gt;Clean Architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read and study &lt;a href="https://www.amazon.com/-/es/Eric-Evans/dp/0321125215"&gt;Domain Driven Design: Tackling Complexity in the heart of software&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Read and study &lt;a href="https://www.amazon.com/-/es/Vaughn-Vernon/dp/0321834577"&gt;Implementing Domain-Driven Design&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Take on a project at work where I can design a system from scratch.&lt;/li&gt;
&lt;li&gt;Create a personal project using the concepts learned, while diagraming the architecture.&lt;/li&gt;
&lt;li&gt;Participate in architecture discussions at my new position to learn about distributed systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started the year with a new position, a new job as a Senior Software Developer in a place with some complex architectural decisions and a lot of cools systems to play with. I am gonna use this opportunity to learn as much as I can from my new team members and at the same time try to boost my own knowledge on the subject.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-get-better-at-writing" class="anchor"&gt;
  &lt;/a&gt;
  3. Get better at writing
&lt;/h2&gt;

&lt;p&gt;Last year I wrote a lot of blog posts, even a few that got me on the top of the list at awesome communities like CodeNewbie, but not nearly as much as I would like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3ISa7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvzufz2o2i5ka4ctzl2l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3ISa7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvzufz2o2i5ka4ctzl2l.jpg" alt="CodeNewbie 100k"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started strong but in the end, the search for a new job, and my other goals got in the way. This year I am aiming to have fewer things to focus on, but do them with maximum effort!.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plan certain dates during the week where I am gonna write.&lt;/li&gt;
&lt;li&gt;Have a list of topics I can write about so I can just pick one from the pile when the time comes.&lt;/li&gt;
&lt;li&gt;Write at least 2 blog posts a week.&lt;/li&gt;
&lt;li&gt;Write about what I am learning to solidify knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-improve-my-involvement-with-the-community" class="anchor"&gt;
  &lt;/a&gt;
  4. Improve my involvement with the community
&lt;/h2&gt;

&lt;p&gt;This year I joined a community called &lt;a href="https://frontend.cafe/"&gt;FrontendCafe&lt;/a&gt;, awesome people from Argentina and other countries of Latin America (and people from Spain too üòÑ ). This year I want to continue meeting developers all over the world but I want to give special attention to people from the Spanish speaking community, specifically those who don't have the means to learn new things or that face some of the problems I faced when I was starting in this industry.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give more mentorships at &lt;a href="https://frontend.cafe/"&gt;FrontendCafe&lt;/a&gt; and outside the Spanish speaking community.&lt;/li&gt;
&lt;li&gt;Spend more time helping new users and using my role as a Staff member in &lt;a href="https://frontend.cafe/"&gt;FrontendCafe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to meetups (if they come back).&lt;/li&gt;
&lt;li&gt;Give a talk at a local meetup (if they come back).&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;As you may notice some of the things I already said in the planning of 2020 and that is perfectly fine. I didn't reach the level I want to achieve in many topics so this year I am gonna focus even more on those.&lt;br&gt;
Other topics have disappeared completely, that is fine too. After 2020 I learned a few lessons about myself, about what I like, and in which topics I want to invest more of my time on.&lt;/p&gt;

&lt;p&gt;I hope you like my planning for 2021, if so please share it and let me know below in the comments. Do you have a similar plan? I would like to read it, the comments is also the perfect place for that. &lt;/p&gt;

&lt;p&gt;See you soon üòÑ&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>‚ú® Inclusive components: making modals accessible üßë‚Äçü¶Ø</title>
      <author>Alena Nik</author>
      <pubDate>Tue, 19 Jan 2021 19:18:30 +0000</pubDate>
      <link>https://dev.to/alenanik/inclusive-components-making-modals-accessible-1hn9</link>
      <guid>https://dev.to/alenanik/inclusive-components-making-modals-accessible-1hn9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In order for us to help create a more accessible, equal society for everyone, change needs to happen. But for those changes to happen, we need to have conversations.&lt;br&gt;
&lt;a href="https://twitter.com/lifeofablindgrl"&gt;Holly - Award-winning disability blogger and writer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;As Holly is saying, 2021 seems like a good year to start having a conversation about accessibility, if you haven't started yet.&lt;/p&gt;

&lt;p&gt;Working from home, shopping online, ordering food, doing anything online is often a challenge for someone who is blind or visually impaired and relies on a screen reader.&lt;/p&gt;

&lt;p&gt;What we can do as front-end developers? &lt;br&gt;
Make a small change, educate ourselves, have conversations, not to be afraid of sharing information. &lt;/p&gt;

&lt;p&gt;I've started my accessibility journey this year and I invite you to join me. Today I'm sharing my notes on modals.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#definition" class="anchor"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A modal dialog is a dialog that appears on top of the main content and moves the system into a special mode requiring user interaction.&lt;br&gt;
This dialog disables the main content until the user explicitly interacts with the modal dialog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#should-i-avoid-modals-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Should I avoid modals all together? ü§®
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Modals are evil and should be avoided&lt;/code&gt; it's a common misconception that existed for some time. The reasons might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modals eat up a lot of space&lt;/li&gt;
&lt;li&gt;If the content doesn't fit inside, the scrollbars might cause a problem on mobile screens&lt;/li&gt;
&lt;li&gt;Any other reason&lt;/li&gt;
&lt;li&gt;Often unaccessible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can definitely discuss all of them with your designer, but let's break down the last one together.&lt;/p&gt;

&lt;p&gt;Often, modals are a piece of UI that contains text or an image, or a form and buttons. Like alerts, modals disrupt the flow of what the user is doing, so we must help them to be able to open it, close and read through the content with the screen reader.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;If the user navigates with the keyboard through our website, and the modal pops up, the user can't interact with the content (sign-in, say yes or even close it) because the keyboard focus is behind the modal. Pressing TAB or ESC won't work either. Very frustrating. üò£ If the user can't navigate, they will need sighted assistance.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-do-the-specs-say" class="anchor"&gt;
  &lt;/a&gt;
  What do the specs say? ü§ì
&lt;/h2&gt;

&lt;p&gt;First of all, "the rules" or "read the specs" sounds intimidating, I get that. No, really. But bear with me:&lt;/p&gt;

&lt;p&gt;WCAG stands for Web Content Accessibility Guidelines. It's useful to developers as a guideline to make websites more accessible for disabled people. Those standards exist for us to use them, as any other resource. &lt;br&gt;
Personally, I find myself reaching out to "Quick Reference": &lt;br&gt;
&lt;a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0"&gt;A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what it says about &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/dialog-modal/dialog.html"&gt;Modal Dialog&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial focus placement.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors SHOULD provide a dialog label, which can be done with the &lt;code&gt;aria-label&lt;/code&gt; or &lt;code&gt;aria-labelledby&lt;/code&gt; attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyboard interaction&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚û°Ô∏è Tab 
Moves focus to next focusable element inside the dialog.
When focus is on the last focusable element in the dialog, moves focus to the first focusable element in the dialog.
‚û°Ô∏è Shift + Tab 
Moves focus to previous focusable element inside the dialog.
When focus is on the first focusable element in the dialog, moves focus to the last focusable element in the dialog.
‚Ü©Ô∏è Escape   
Closes the dialog.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Focus and accessible descriptions are set based on the content of each dialog, usage of &lt;code&gt;aria-describedby&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When closed ‚ùé, the focus is set on another element that provides logical work flow.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-can-i-do" class="anchor"&gt;
  &lt;/a&gt;
  What Can I do? üôÇ
&lt;/h2&gt;

&lt;p&gt;There are many edge cases and it all depends on your particular modal dialog, but here are some quick-wins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  ...content of my page...
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"openDialog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt; 
     &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt;
     &lt;span class="na"&gt;aria-modal=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
     &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"modalTitle"&lt;/span&gt;
     &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;"modalDescription"&lt;/span&gt;
     &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'modalTitle'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Registration Form&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"closeDialog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Labeling&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Give the modal an ARIA &lt;code&gt;aria-describedby&lt;/code&gt; attribute which will be linked to the &lt;code&gt;id&lt;/code&gt; of some visually hidden text which describes the modal‚Äôs function, and how to exit it.&lt;/p&gt;

&lt;p&gt;The dialog has either:&lt;br&gt;
A value set for the &lt;code&gt;aria-labelledby&lt;/code&gt; property that refers to a visible dialog title.&lt;br&gt;
A label specified by aria-label.&lt;br&gt;
Optionally, the &lt;code&gt;aria-describedby&lt;/code&gt; property is set on the element with the dialog role to indicate which element or elements in the dialog contain content that describes the primary purpose or message of the dialog. &lt;br&gt;
&lt;a href="https://www.w3.org/TR/wai-aria-practices/"&gt;WAI-ARIA Roles, States, and Properties&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shift focus when the modal is open&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the content is large enough that focusing on the first interactive element could cause the beginning of content to scroll out of view, it is advisable to add tabindex=-1.&lt;/p&gt;

&lt;p&gt;Upon clicking the modal-activating button, all the main content should get an &lt;code&gt;aria-hidden='true'&lt;/code&gt; attribute so that a screen reader will no longer read any of the content. Additionally, the modal should get an &lt;code&gt;aria-hidden='false'&lt;/code&gt; and go from having &lt;code&gt;{display: none;}&lt;/code&gt; to &lt;code&gt;{display: block;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When a user clicks the ‚ÄòOpen modal‚Äô button then, we need to actively set their focus to the modal with JavaScript, and if they ever tab outside the modal, we need to set the focus back on the modal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When the dialog is open, pressing the ESC key should close it&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What if the button is X?&lt;/strong&gt; ‚ùé&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;It is strongly recommended that the tab sequence of all dialogs include a visible element with role button that closes the dialog, such as a close icon or cancel button.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the 'close' element is implemented as a button containing merely the letter 'x', you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   This is a pop-up box.
   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"document.getElementById('box').style.display='none';"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;X&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;                
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you need to, make sure to use the &lt;strong&gt;high contrast&lt;/strong&gt; close icon in the top corner for people people who have low vision:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'modalCloseButton'&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modalCloseButton"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;'Close registration form'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'cancel'&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'x.png'&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;'close the registration form'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources üìÇ
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  Github üë©üèº‚Äçüíª
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/andrewvasilchuk"&gt;
        andrewvasilchuk
      &lt;/a&gt; / &lt;a href="https://github.com/andrewvasilchuk/vue-accessible-modal"&gt;
        vue-accessible-modal
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vue.js component for accessible modals
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Chakra UI is one of my favorite references for accessibility in Vue components. They are doing an amazing job!&lt;br&gt;&lt;/p&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/chakra-ui"&gt;
        chakra-ui
      &lt;/a&gt; / &lt;a href="https://github.com/chakra-ui/chakra-ui-vue"&gt;
        chakra-ui-vue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ‚ö°Ô∏è Build scalable and accessible Vue.js applications with ease.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#articles" class="anchor"&gt;
  &lt;/a&gt;
  Articles üìã
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bitsofco.de/accessible-modal-dialog/"&gt;Creating An Accessible Modal Dialog&lt;/a&gt;&lt;br&gt;
&lt;a href="http://web-accessibility.carnegiemuseums.org/code/dialogs/"&gt;Modals (Dialog Windows)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://inclusive-components.design/notifications/"&gt;Notifications&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specs" class="anchor"&gt;
  &lt;/a&gt;
  Specs üß∑
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal"&gt;3.9 Dialog (Modal)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conslusion" class="anchor"&gt;
  &lt;/a&gt;
  Conslusion üí°
&lt;/h1&gt;

&lt;p&gt;Building accessible websites shows that you care about disabled people. It's a small change that makes difference.&lt;/p&gt;

&lt;p&gt;How often could you hear someone say &lt;code&gt;"I'm not sacrificing visuals for accessibility"&lt;/code&gt;? The good news is you don't have to. üòä What we &lt;em&gt;can&lt;/em&gt; do is make sure that all of our users can have similar experiences: to be able to find a button, have a dialog with the interface, close a modal or add items to the card. &lt;/p&gt;

&lt;p&gt;I'm quoting Holly again and wish you good luck in making a small change for a better experience for all. Just give it a try tomorrow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The lack of accessibility leaves disabled people feeling frustrated, isolated, and forgotten. But when accessibility is considered, disabled people feel included and most importantly, we feel equal.&lt;/p&gt;

&lt;p&gt;Accessibility should be at the heart ‚ù§Ô∏è of everything you do. Whether it personally makes a difference to your life or not, accessibility should always be considered and made a priority."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you like this article and the information that I have put together, please, share it with your colleague and reach out to me on Twitter, whether you liked it or have suggestions üíö&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4KtyRxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1287805514898907138/QL3eZeyo_normal.jpg" alt="Alena Nikolaeva profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Alena Nikolaeva
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @alenanik11
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      A gentle introduction to screen readers: &lt;br&gt;‚ú® What screen readers are - and why they are so important to accessibility testing&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/y34fxIJnRO"&gt;accessibility-developer-guide.com/knowledge/scre‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/a11y"&gt;#a11y&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:47 PM - 13 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1349473220089573378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1349473220089573378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1349473220089573378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

</description>
      <category>a11y</category>
      <category>frontend</category>
      <category>inclusive</category>
    </item>
    <item>
      <title>Livestream Event: Build a REST API using Fastify &amp; HarperDB</title>
      <author>Margo McCabe</author>
      <pubDate>Tue, 19 Jan 2021 18:29:30 +0000</pubDate>
      <link>https://dev.to/harperdb/livestream-event-build-a-rest-api-using-fastify-harperdb-2p4h</link>
      <guid>https://dev.to/harperdb/livestream-event-build-a-rest-api-using-fastify-harperdb-2p4h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#join-harperdb-amp-top-fastify-maintainer-ethan-arrowood-for-this-live-code-along-event" class="anchor"&gt;
  &lt;/a&gt;
  Join HarperDB &amp;amp; top Fastify maintainer, Ethan Arrowood, for this &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;live code along event&lt;/a&gt;!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkQ-HSds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svyck3kjiih4bxy1a6fm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkQ-HSds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svyck3kjiih4bxy1a6fm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastify-the-fast-amp-low-overhead-web-framework-for-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Fastify: The fast &amp;amp; low overhead web framework for Node.js
&lt;/h3&gt;

&lt;p&gt;HarperDB is hosting Ethan Arrowood, a top open source maintainer for Fastify and Microsoft Engineer, for a &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;virtual livestream on January 26th&lt;/a&gt;. Ethan will build a REST API using Fastify with HarperDB. Fastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture.&lt;/p&gt;

&lt;p&gt;Throughout the livestream, Ethan will highlight best practices for general data organization, running HarperDB in Fastify, using Undici to make high throughput requests to HarperDB, and building an API in Fastify. The API will be demoed using Postman or Insomnia tools. Ethan will be running HarperDB locally off of &lt;a href="https://hub.docker.com/r/harperdb/hdb"&gt;Docker&lt;/a&gt;, and managing his database(s) through the HarperDB &lt;a href="https://studio.harperdb.io/sign-up?code=FASTIFYEVENT&amp;amp;utm_source=devto&amp;amp;utm_medium=margopost"&gt;Management Studio&lt;/a&gt;.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;January 26th @ 6pm MT&lt;/strong&gt; (we'll send a recording to all RSVP's in case you can't attend live)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/#fastify_rsvp"&gt;RSVP (free event)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://studio.harperdb.io/sign-up?code=FASTIFYEVENT&amp;amp;utm_source=devto&amp;amp;utm_medium=margopost"&gt;Register for the HarperDB Studio&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This event is for developers of any skill level, and will help you strengthen your Fastify and app development skills, as well as general database / data management knowledge.&lt;/strong&gt; (You'll also be able to see some of the sweet new HarperDB features in action!)&lt;/p&gt;








&lt;h3&gt;
  &lt;a href="#meet-ethan" class="anchor"&gt;
  &lt;/a&gt;
  Meet Ethan
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/ethanarrowood"&gt;@ethanarrowood&lt;/a&gt;
 is a Software Engineer 2 at Microsoft, based out of Boston, MA. Apart from his professional work, Ethan is an active Node.js open source community member. He is a maintainer for Fastify, contributor to Node.js and Undici, and is involved in many other community-related aspects. In addition, he enjoys the outdoors and can often be found hiking, climbing, and skiing around the Northeast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-harperdb" class="anchor"&gt;
  &lt;/a&gt;
  Meet HarperDB
&lt;/h3&gt;

&lt;p&gt;&lt;a href="//harperdb.io?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB&lt;/a&gt; is a distributed database focused on making data management easy. It has an easy to use REST API, and supports NoSQL and SQL including joins. HarperDB leverages standard interfaces so that you can use the reporting and analysis tools that best meet your needs. Great for use cases where you need rapid application development, integration, edge computing, distributed computing, and real-time operational analytics. If you want to learn more before the event, you can check out the SDK's in the &lt;a href="https://studio.harperdb.io/resources/marketplace/active?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB Marketplace&lt;/a&gt;, read about &lt;a href="https://dev.to/harperdb/building-a-database-written-in-node-js-from-the-ground-up-2hgm"&gt;HarperDB's technology&lt;/a&gt;, or &lt;a href="https://dev.to/harperdb"&gt;read our other articles&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-fastify" class="anchor"&gt;
  &lt;/a&gt;
  Meet Fastify
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; is a fast and low overhead web framework for Node.js. It's inspired by Hapi and Express, and is one of the fastest web frameworks in town. Fatify lists its core features as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Highly performant: super fast, depending on the code complexity we can serve up to 30 thousand requests per second.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extendible: Fastify is fully extensible via its hooks, plugins and decorators.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Schema based: even if it is not mandatory we recommend to use JSON Schema to validate your routes and serialize your outputs, internally Fastify compiles the schema in a highly performant function.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logging: logs are extremely important but are costly; we chose the best logger to almost remove this cost, Pino!
Developer friendly: the framework is built to be very expressive and to help developers in their daily use, without sacrificing performance and security.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;TypeScript ready: we work hard to maintain a TypeScript type declaration file so we can support the growing TypeScript community.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fun fact - Jaxon, our VP of Product, recently mentioned that HarperDB currently uses Express for our internal API, but we're ripping it out and replacing it with Fastify. Our internal benchmarks say this will increase API performance by at least 50%, but we're hoping for double that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbr4x_OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whgo3vnu6dw5yxylfdyo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbr4x_OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whgo3vnu6dw5yxylfdyo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-get-coding" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/"&gt;Now let's get coding!&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Creating a Killer GitHub Profile README Part 1</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 19 Jan 2021 17:19:15 +0000</pubDate>
      <link>https://dev.to/dailydotdev/creating-a-killer-github-profile-readme-part-1-33nm</link>
      <guid>https://dev.to/dailydotdev/creating-a-killer-github-profile-readme-part-1-33nm</guid>
      <description>&lt;p&gt;README's. You know, those markdown files that get created when you generate a new project or create a GitHub repository. Perhaps you're a developer who updates the README file for each project you work on. Or maybe you're a developer who leaves the boilerplate content inside. &lt;/p&gt;

&lt;p&gt;As of July 2020, GitHub now allows developers to create a profile-level repository and use the README to add some personality to their page. &lt;/p&gt;

&lt;p&gt;I've known about this for a few months now but only recently dove in. And, well... I may have gone a bit overboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tzFjGxURDcjzVoTusV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tzFjGxURDcjzVoTusV/giphy.gif" alt="README Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/braydoncoyer"&gt;Check out my GitHub profile here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many developers, I believe, inject a bunch of 'cool' widgets and badges in their profile instead of realizing that their GitHub profile is very much like a portfolio ‚Äî it should highlight &lt;em&gt;what makes you unique&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;There are many articles and tutorials on the web (some linked throughout this article) that show you how to add basic information to your &lt;code&gt;README.md&lt;/code&gt; file ‚Äî images, badges and statistics. But I wanted something a bit more personal; I wanted a unique profile that accomplished a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provided a route for visitors to find my other social outlets&lt;/li&gt;
&lt;li&gt;Highlighted my most recently published articles&lt;/li&gt;
&lt;li&gt;Displayed pinned repositories in a visual-appeasing fashion&lt;/li&gt;
&lt;li&gt;Allowed visitors to see some of my GitHub statistics &lt;/li&gt;
&lt;li&gt;Listed some of my skills for those interested or for future employers&lt;/li&gt;
&lt;li&gt;End the experience with something a bit more fun; a quote from an API I built.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I encourage you to make your own list ‚Äî what do you want on your profile? How is it going to highlight what makes you unique? &lt;/p&gt;

&lt;p&gt;In this two-part article series, I will walk through, step by step, how I created my profile so that you can make your own &lt;code&gt;README.md&lt;/code&gt; file stand out from the crowd.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-limitations" class="anchor"&gt;
  &lt;/a&gt;
  Understanding Limitations
&lt;/h3&gt;

&lt;p&gt;If you're new to markdown files in general, it's important to have a high-level idea of what we'll be doing. After all, you can't provide solutions without understanding limitations. &lt;/p&gt;

&lt;p&gt;I knew that I wanted basic content and information in my README ‚Äî things like images, headings, badges that redirect users when clicked and even graphs and widgets that display GitHub statistics. Tutorials are scattered across the internet and make implementing these things relatively easy.&lt;/p&gt;

&lt;p&gt;But I also knew I wanted my README to be dynamic; I wanted it to automatically fetch my most recent blog posts and to display a quote from The Office API that I built. This is where things get tricky. Markdown files can't make API requests on their own, so how would I inject content dynamically? &lt;/p&gt;

&lt;p&gt;GitHub Actions. These built-in repository pipelines allow developers to automate tasks and workflows and is what I used to fetch blog posts and request a random quote from my API. These workflows can trigger files or functions to obtain information and inject the content into my README. I assigned a cron job to run the workflow every hour so my profile is always up-to-date with new articles and visitors get a fresh quote each time they visit my profile.&lt;/p&gt;

&lt;p&gt;There's a few 'gotchas' with this implementation that we'll discuss in the next article, but I hope this gives you a high-level overview of how we'll approach the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-your-profile-repository" class="anchor"&gt;
  &lt;/a&gt;
  Create Your Profile Repository
&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and create a new repository that has the same name as your GitHub username. My username is &lt;code&gt;braydoncoyer&lt;/code&gt;, so I created a repository with the name &lt;code&gt;braydoncoyer&lt;/code&gt;. If you‚Äôve done this correctly, GitHub will display a secret message (pictured below).&lt;/p&gt;

&lt;p&gt;I set the repository access to &lt;strong&gt;private&lt;/strong&gt; until I was ready for the world to see it, but feel free to make it public if you want.&lt;/p&gt;

&lt;p&gt;I also initialized the repository with  &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: The screenshot below is giving me an error because I've already created a profile-level repository. You shouldn't see this error. Also, if you didn't know, GitHub recently shipped dark mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4a-aNVm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp7vy1937cifyxuno56w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4a-aNVm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp7vy1937cifyxuno56w.png" alt="Create GitHub Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I created the repository, I cloned it down and opened it in my favorite editor. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-readme-template" class="anchor"&gt;
  &lt;/a&gt;
  Create a README Template
&lt;/h3&gt;

&lt;p&gt;Although I initialized the repository with a &lt;code&gt;README.md&lt;/code&gt; file, I quickly found out that I needed to edit my content in a separate file and use it as a template ‚Äî a skeleton of static content that will be used to construct the final &lt;code&gt;README.md&lt;/code&gt; file. There are several reasons for this, but here are two of the most important:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Eventually, the GitHub Actions workflow will trigger files that will use the template, inject the dynamic content and then take the entire template and paste it in the README file. &lt;/li&gt;
&lt;li&gt;If you're editing the &lt;code&gt;README.md&lt;/code&gt; file directly, you're going to have LOTS of merge conflicts after the dynamic injection performs its magic.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that said, at the root level of my repository, I created a new file called &lt;code&gt;README.template.md&lt;/code&gt;. This is the file I will be editing manually.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#banner-image" class="anchor"&gt;
  &lt;/a&gt;
  Banner Image
&lt;/h3&gt;

&lt;p&gt;I decided I wanted visitors to be greeted with a nice banner image that directed visitors to my portfolio when it was clicked.&lt;/p&gt;

&lt;p&gt;I opened Illustrator, created a 1500x500 document and designed the banner image according to my personal style.&lt;/p&gt;

&lt;p&gt;Back in my repository, I created a new root-level directory named &lt;code&gt;assets&lt;/code&gt; , placed the image in the folder and consumed it in the &lt;code&gt;README.template.md&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Braydon's GitHub Banner&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;./assets/GitHubHeader.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://braydoncoyer.dev)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#social-badges" class="anchor"&gt;
  &lt;/a&gt;
  Social Badges
&lt;/h3&gt;

&lt;p&gt;One of my goals with my GitHub profile README is to direct visitors to my other social networks (Twitter, LinkedIn and CodePen, specifically). &lt;/p&gt;

&lt;p&gt;To do that, I made sure I had social badges listed at the top of the profile so that it's one of the first things visitors see. &lt;/p&gt;

&lt;p&gt;To create these badges, I  used &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; and edited the badge text, badge color and destination URL. &lt;/p&gt;

&lt;p&gt;I thought it would also be fun to keep a track of my profile visits, so I created a badge and listed it next to the social badges.&lt;/p&gt;

&lt;p&gt;To create your own visits badge, copy the 'Visits Badge' markdown content below and change the repository destination in the URL (everything after '/visits/').&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Visits Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://badges.pufler.dev/visits/braydoncoyer/braydoncoyer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https:braydoncoyer.dev)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Twitter Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Twitter-Profile-informational?style=flat&amp;amp;logo=twitter&amp;amp;logoColor=white&amp;amp;color=1CA2F1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://twitter.com/BraydonCoyer)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![LinkedIn Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/LinkedIn-Profile-informational?style=flat&amp;amp;logo=linkedin&amp;amp;logoColor=white&amp;amp;color=0D76A8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://www.linkedin.com/in/braydon-coyer/)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![CodePen Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/CodePen-Profile-informational?style=flat&amp;amp;logo=codepen&amp;amp;logoColor=white&amp;amp;color=black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://codepen.io/braydoncoyer)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-introduction-section" class="anchor"&gt;
  &lt;/a&gt;
  The Introduction Section
&lt;/h3&gt;

&lt;p&gt;Believe it or not, the banner image and social badges don't take up that space. Now that visitors have an optional route to see my other social networks, they need to know a little about me.&lt;/p&gt;

&lt;p&gt;I only wrote a small blurb for the introduction. If visitors want to know more about me, they can find that information on my portfolio website or LinkedIn profile. Don't make the mistake of overwhelming visitors with too much information.&lt;/p&gt;

&lt;p&gt;At the end of the introduction, I present the visitor with a call-to-action to visit my portfolio website ‚Äî again, I don't want to overwhelm the visitor, but rather give just enough information about me and provide a way for them to read more if they desire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-blog-posts" class="anchor"&gt;
  &lt;/a&gt;
  Latest Blog Posts
&lt;/h3&gt;

&lt;p&gt;Next, I want visitors to see my most recent blog posts. This needs to be dynamic and updated with regular cadence. The hard work will eventually be delegated to a separate file that the GitHub Action workflow will run, but in order for that file to know where to inject the content, it requires a certain pattern in the template. &lt;/p&gt;

&lt;p&gt;For now, I put the following under the blog post section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To inject my blog feed into the &lt;code&gt;README.md&lt;/code&gt; file, I followed &lt;a href="https://hashnode.com/@iamdarshshah"&gt;Darsh Shah's&lt;/a&gt; article &lt;em&gt;&lt;a href="https://iamdarshshah.hashnode.dev/how-to-add-your-recently-published-articles-to-your-github-profile-readme-using-github-actions"&gt;How to Add Your Recently Published Articles to Your GitHub Profile README using GitHub Actions ü§ñ&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pinned-repositories-amp-github-stats" class="anchor"&gt;
  &lt;/a&gt;
  Pinned Repositories &amp;amp; GitHub Stats
&lt;/h3&gt;

&lt;p&gt;Along with my most recent blog posts, I wanted to shift the spotlight to a few of my other repositories and display some statistics. To accomplish this, I used Anurag Hazra‚Äòs &lt;em&gt;&lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub ReadMe Stats&lt;/a&gt; -&lt;/em&gt; The content you retrieve from his API can be wrapped in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and styled in various ways. The documentation is easy to follow; I encourage you to check it out!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Pinned Repositories -- &amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/tailwindcss-v2-dark-mode-template"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:1rem 0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=tailwindcss-v2-dark-mode-template&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/ng-limeade"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=ng-limeade&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/officeapi"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=officeapi&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- GitHub Stats -- &amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/top-langs/?username=braydoncoyer&amp;amp;hide=html,css&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api?username=braydoncoyer&amp;amp;show_icons=true&amp;amp;line_height=27&amp;amp;count_private=true&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB097&amp;amp;bg_color=1A2B34" alt="Braydon's GitHub Stats" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#skills" class="anchor"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;Next, I needed a way to show visitors my skills as a full-stack web developer. I didn't want to put my skills in an unordered list; it would take up a lot of space on the page and the unordered list doesn't provide much of a stylish flare.&lt;/p&gt;

&lt;p&gt;Instead, I used badges from &lt;a href="http://shield.io"&gt;shield.io&lt;/a&gt; and displayed the badges inline on the page, using the same background color as the banner image to keep design consistency throughout the profile.&lt;/p&gt;

&lt;p&gt;Because I wanted to list a lot of skills, I decided to have some core-skills displayed by default, and optionally show more skills using a &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-Angular-informational?style=flat&amp;amp;logo=angular&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-Ionic-informational?style=flat&amp;amp;logo=ionic&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-React-informational?style=flat&amp;amp;logo=react&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
...

&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;More Skills&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-CSS-informational?style=flat&amp;amp;logo=css3&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Tailwind-informational?style=flat&amp;amp;logo=Tailwind-CSS&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Sass-informational?style=flat&amp;amp;logo=Sass&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Stylus-informational?style=flat&amp;amp;logo=Stylus&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To see the full list of badges I used in the &lt;code&gt;README.template.md&lt;/code&gt; file, click &lt;a href="https://raw.githubusercontent.com/braydoncoyer/braydoncoyer/main/README.template.md"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-office-quote" class="anchor"&gt;
  &lt;/a&gt;
  The Office Quote
&lt;/h3&gt;

&lt;p&gt;Before visitors leave my profile I wanted to end their experience with something unique and with a personal touch. Very much like the blog post section, a GitHub Action workflow will run a script that will look for a pattern in the &lt;code&gt;README.template.md&lt;/code&gt; and inject a random quote.&lt;/p&gt;

&lt;p&gt;I put the following pattern in the Office quote section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{office_quote}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{office_character}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

Check back at the top of the hour for a new quote!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With that, the static content is complete and satisfies the goals I listed for my profile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the next article, I‚Äôll show you how I created my GitHub Action workflow and injected the dynamic content into the &lt;code&gt;README.md&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you liked this article and want more content like this, &lt;a href="https://braydoncoyer.dev/newsletter/"&gt;subscribe to my newsletter&lt;/a&gt; and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>webdev</category>
      <category>readme</category>
    </item>
    <item>
      <title>Create Better Notifications For Your Web</title>
      <author>David D√≠az</author>
      <pubDate>Tue, 19 Jan 2021 17:13:58 +0000</pubDate>
      <link>https://dev.to/dd8888/create-better-notifications-for-your-web-7c6</link>
      <guid>https://dev.to/dd8888/create-better-notifications-for-your-web-7c6</guid>
      <description>&lt;p&gt;If you have ever done web development, I'm quite sure that you have encountered a situation where you need to alert the user or ask for a response to a certain event, and in that case, you have probably used &lt;strong&gt;&lt;em&gt;alert()&lt;/em&gt;&lt;/strong&gt; to do that. But let's be real, it just looks unprofessional and it's style probably won't fit with the rest of your web. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rzNxNiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611075096791/CT_N-nizY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rzNxNiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611075096791/CT_N-nizY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some tricks to add some style to the 'alert' (like creating an HTML element and mimicking the alert() functionality), but there are is a way to make it so simple yet so good and pretty, that you will use it for every project from now on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSab-kr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sweetalert2.github.io/images/SweetAlert2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSab-kr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sweetalert2.github.io/images/SweetAlert2.png" alt="Sweet Alert Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sweetalert2.github.io"&gt;SweetAlert2&lt;/a&gt; is a fantastic library that gives us a nice and clean alternative when it comes to displaying messages to our users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDhYYDpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611073653058/FM6Q9xC1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDhYYDpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611073653058/FM6Q9xC1l.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both installing and using it is really easy, you can use npm or jsdelivr CDN, just follow the &lt;a href="https://sweetalert2.github.io/#download"&gt;steps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the best part is that we can use it on React, Vue, Angular, and plain HTML and JS. &lt;/p&gt;

&lt;p&gt;This is an example, using only HTML and Javascript.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/daviddiaz/embed/ZEpPpaN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Easy right? Well with React is not harder, this is a code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_BegsZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611074910224/1gkmZ7BUlF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_BegsZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611074910224/1gkmZ7BUlF.png" alt="carbon (4).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here it is with Vue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ll7enPgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611074992923/8iyEaLPdF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ll7enPgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611074992923/8iyEaLPdF.png" alt="carbon (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the library is really versatile, as there are a lot of customizable alerts to choose from, and we can even rely on it when it comes to certain logic like removing a file or not.&lt;/p&gt;

&lt;p&gt;Also, you can install &lt;a href="https://sweetalert2.github.io/#themes"&gt;themes&lt;/a&gt; in case you don't like the preinstalled one.&lt;/p&gt;

&lt;p&gt;And that's it! Hope this library can help you with your future projects!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is semantic HTML and why should you use it?</title>
      <author>Chrissie</author>
      <pubDate>Tue, 19 Jan 2021 17:07:25 +0000</pubDate>
      <link>https://dev.to/chrissiemhrk/what-is-semantic-html-and-why-should-you-use-it-4dbj</link>
      <guid>https://dev.to/chrissiemhrk/what-is-semantic-html-and-why-should-you-use-it-4dbj</guid>
      <description>&lt;p&gt;As a web developer chances are you must have heard of the term semantic HTML at least once. Semantic HTML is an important principle in web development and in this article, you'll learn what's semantic HTML, why you must use it, and the way to use semantic HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  What's semantic HTML?
&lt;/h2&gt;

&lt;p&gt;In programing, semantics refers to the purpose or role of a piece of code. Plenty of HTML tags have a semantic meaning, which means that they are defined to have a specific meaning that conveys some information about the sort of content contained between the opening and closing tag. This allow web browsers, search engines, and screen readers to make sense of your markup by adding meaning to it.&lt;/p&gt;

&lt;p&gt;For example the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element represent a group of navigation links and the &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; element represent the footer section of a page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-have-to-use-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  Why do you have to use semantic HTML?
&lt;/h2&gt;

&lt;p&gt;As I wrote above, semantic HTML allow web browsers, search engines, and screen readers to make sense of your markup by adding meaning to it. This is can be especially important if you wish your website to be maintainable, to be accessible to all your visitors, and to achieve a better SEO ranking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maintainability is something that should always be at the forefront of your mind when developing be it a website or a mobile application, it is also a key factor in writing high quality code. Semantic HTML helps us in that clear, easy to read code is more maintainable. It allows you quickly look at your code and know what is going on and in the future allow for easy editing. &lt;/p&gt;

&lt;p&gt;Another benefit would be that we don't have a reference our elements with classes or ids, writing semantic HTML allows you to reference all your elements with CSS directly using the tag with the use of classes or ids.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessibility is a very important area of the website that cannot be ignored. Semantic HTML plays a big role in increasing the general accessibility of your website and conveys better meaning without compromising the code structure. It provides the guidance needed to properly transcribe your content to your audience, one example can be screen readers. &lt;/p&gt;

&lt;p&gt;Screen reader is an assistive technology that converts text and image content to speech and braille. For screen readers to understand your content they have to scan it and this is made easier by using semantic HTML which makes your markup better understandable for the screen reader and thus making your content accessible to users that cannot read.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SEO&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Search Engine Optimization is the process of improving the quantity and quality of traffic to a website from search engines. SEO is another section where making your markup easier to grasp for machines comes in play. If a search engine can't read your website, it won't properly rank it and it will probably be flag as low quality. &lt;/p&gt;

&lt;p&gt;If you want your website to be seen, it has to be ranked by search engines and the best way to do that is to use semantic HTML to make your content readable by the machine so that the search engine's algorithm can properly rank you website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  How to write semantic HTML
&lt;/h2&gt;

&lt;p&gt;Now that you understand what is semantic HTML and why you should use it when building your website, let's see how you can write semantic HTML. To write semantic HTML the only thing needed is to use the proper HTML tags that conveys information about the type of content contained between the opening and closing tag.&lt;/p&gt;

&lt;p&gt;There are HTML elements that are semantic and others that are not. An example of a non-semantic HTML tag would be &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; as these tags don't convey any information about the content inside.&lt;/p&gt;

&lt;p&gt;In the case of semantic HTML, we can divide them into three categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Section elements&lt;/li&gt;
&lt;li&gt;Text elements&lt;/li&gt;
&lt;li&gt;Media elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#section-elements" class="anchor"&gt;
  &lt;/a&gt;
  Section elements
&lt;/h3&gt;

&lt;p&gt;These are elements that helps you to arrange your document into separate blocks. Section elements are mainly used to create the outline of your webpage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; represents the header container of the web page. It's usually contains navigation links, logo, a search bar, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; represents the main content of the web page and can only be used once in a page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; represents the footer container of the web page. It's usually contains copyright data, author of the section, or links to related documents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; represents a set of navigation links. It's usually used inside the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; section of the page but can also be used inside the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; section.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; represent content that is related to the main content of the web page but isn't part of it. It can also be used to create a sidebar. An example could be a page displaying a blog post, the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element could be used to display links to other related articles to the article inside the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; represents standalone sections within the web page that don't have a more specific element to represent it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; represents self contained blocks of content such as blog posts which can be reused in other settings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; represent section heading. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest level and most important one while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#text-elements" class="anchor"&gt;
  &lt;/a&gt;
  Text elements
&lt;/h3&gt;

&lt;p&gt;These are elements that are used to organize blocks of content, these are important for SEO and accessibility. Some elements in this category can be applied to a single word or line of text.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; represents text that is a quotation from another source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; represents an ordered list, usually displayed as a numbered list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; represents an unordered list, usually displayed as a bulleted list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; represents an item inside a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; represents a paragraph.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; represents a break between paragraphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; represents content that is given importance or urgency, usually displayed in bold.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; represents small prints like copyright, usually displayed in a smaller font-size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; represents content such as illustrations, diagrams, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; represents the caption for a  element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; represents the reference of a cited work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; represents a short piece of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; represents a specific period of time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#media-elements" class="anchor"&gt;
  &lt;/a&gt;
  Media elements
&lt;/h3&gt;

&lt;p&gt;These are elements that are used to identify the different type of media that can be found in a web page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; represents sound content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; represents video content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; represents an image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt; represents a clickable area inside an image map.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; represents an image map.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Semantic HTML is should be kept at the forefront of your mind when building a website, there are many more semantic HTML elements not listed in this article but these are enough to get you started and reduce the amount of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements in your website. &lt;/p&gt;

&lt;p&gt;Stay safe and thanks for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Additional Hooks in React - useReducer()</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 19 Jan 2021 16:46:34 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/additional-hooks-in-react-usereducer-10ef</link>
      <guid>https://dev.to/olenadrugalya/additional-hooks-in-react-usereducer-10ef</guid>
      <description>&lt;p&gt;This blog post continues the series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It covers one of additional hooks in React - &lt;strong&gt;useReducer()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-usereducer" class="anchor"&gt;
  &lt;/a&gt;
  What is useReducer()?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useReducer()&lt;/strong&gt; is JavaScript function, which allows to use  reducer functions from state management in &lt;em&gt;functional component&lt;/em&gt;.  It is an alternative to &lt;code&gt;useState()&lt;/code&gt; hook and as react developers say : "New one and improved" :)&lt;/p&gt;

&lt;p&gt;Before you read any further, you should be familiar with &lt;a href="https://olena.hashnode.dev/managing-state-with-react-context"&gt;state management&lt;/a&gt; and &lt;a href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers"&gt;reducers&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-and-when-use-usereducer" class="anchor"&gt;
  &lt;/a&gt;
  How and when use useReducer()
&lt;/h2&gt;

&lt;p&gt;To use this hook, you need to import it first from React library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this hook without import as well like this - &lt;code&gt;React.useReducer()&lt;/code&gt;, for me it's just more convenient to import and destructure first this function and then use it when need in the code.&lt;/p&gt;

&lt;p&gt;Afterwards we can set up this hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's examine this example  more detailed. &lt;/p&gt;

&lt;p&gt;NOTE: If you are familiar with Redux, you already know how it works&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useReducer&lt;/strong&gt; hook :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; accepts &lt;em&gt;reducer function&lt;/em&gt; and &lt;em&gt;initial state&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;returns &lt;em&gt;current state&lt;/em&gt; and &lt;em&gt;dispatch method&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's consider the following example - we are building an app which is a simulation of the farm. &lt;/p&gt;

&lt;p&gt;Here‚Äôs a store of data, where we have four hungry animals (this is our &lt;code&gt;initialState&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sheep&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let‚Äôs create a &lt;code&gt;reducer&lt;/code&gt; to feed them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animalsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giveWater&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the important thing to notice here is what we pass to our &lt;code&gt;animalsReducer&lt;/code&gt; function: our &lt;strong&gt;initial state&lt;/strong&gt; (animals) and &lt;strong&gt;action&lt;/strong&gt; (you could think of this as a setState method). The &lt;code&gt;action.type&lt;/code&gt; identifies what type of action we want to do and &lt;code&gt;action.specificAnimal&lt;/code&gt; identifies for us which animal we want to perform the action on.&lt;/p&gt;

&lt;p&gt;Now that we have our reducer and store setup, let‚Äôs implement them with our &lt;strong&gt;useReducer()&lt;/strong&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalsReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally let's implement our &lt;code&gt;dispatch&lt;/code&gt; functions and use them in JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animalType&lt;/span&gt; &lt;span class="p"&gt;});}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;giveWater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giveWater&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animalType&lt;/span&gt; &lt;span class="p"&gt;});}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-around&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NOT HUNGRY! &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; feed &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HUNGRY&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;giveWater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; give water&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The dispatch method receives an object that represents the action we desire to be done. We pass our action to our reducer through the useReducer. Our reducer returns updated state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;useState&lt;/code&gt; in the same component or hook that's using &lt;code&gt;useReducer&lt;/code&gt; and you can have multiple useStates and multiple useReducers in a single hook or component.&lt;br&gt;
&lt;strong&gt;useReducer&lt;/strong&gt; is usually preferable to &lt;strong&gt;useState&lt;/strong&gt; when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. &lt;br&gt;
useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Server Rendering in JavaScript: Optimizing for Size</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 19 Jan 2021 16:02:13 +0000</pubDate>
      <link>https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-for-size-3518</link>
      <guid>https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-for-size-3518</guid>
      <description>&lt;p&gt;Continuing from where &lt;a href="https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94"&gt;Server Rendering in JavaScript: Why SSR?&lt;/a&gt; left off I want to talk about the different techniques JavaScript Frameworks are using Server Rendering to optimize the performance of their websites and applications. There are numerous techniques and every framework has its own take.&lt;/p&gt;

&lt;p&gt;In this article, we will cover all things related to size. The amount of JavaScript you ship to the client can be heavy on the network, and it can be heavy on the CPU when you consider both parsing and execution. &lt;/p&gt;

&lt;p&gt;So how are frameworks optimizing for bundle size? Last time we talked about Code splitting what else is being done?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#encoding-view-code" class="anchor"&gt;
  &lt;/a&gt;
  Encoding View Code
&lt;/h1&gt;

&lt;p&gt;This is the idea that we can compress our Components even further than the executable JavaScript when shipping over the wire.&lt;/p&gt;

&lt;p&gt;I am referring to things like &lt;a href="https://engineering.linkedin.com/blog/2017/12/the-glimmer-binary-experience"&gt;Glimmer's ByteCode&lt;/a&gt; or &lt;a href="https://prepack.io/"&gt;Facebook's Prepack&lt;/a&gt;. The idea is that if you can codify the instructions into fewer characters, and possibly even pre-solve parts of it the way you would reduce an algebraic equation. If you haven't seen Prepack you should &lt;a href="https://prepack.io/repl.html"&gt;try it out&lt;/a&gt; you are in for a bit of a treat.&lt;/p&gt;

&lt;p&gt;While the Prepack experiments haven't yet borne fruit, Facebook is back at it again with React having come up with a serialized form of their VDOM representation of their &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;Server Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These techniques clearly benefit Virtual DOM libraries where our views are a series of instructions. LinkedIn reported a 50% reduction in component size, but size isn't the only benefit here. JavaScript is about the most expensive things to parse in the browser.&lt;/p&gt;

&lt;p&gt;But what about non-VDOM libraries? At first thought, you might think of a compiler like &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; or &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt;. But this is not the same thing. While they reduce the code into real DOM instructions, which allows them to have a much smaller core runtime, this approach can actually increase the code size per component. &lt;/p&gt;

&lt;p&gt;However, libraries that use the real DOM have other ways to optimize component code size. One such way is Template Cloning(using DOM Template Element) the static parts that can drastically reduce the number of instructions. In so most of your components can be encoded as strings that already benefit from being Gzipped. As it turns out template cloning is more performant than creating nodes one at a time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#partial-hydration" class="anchor"&gt;
  &lt;/a&gt;
  Partial Hydration
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq1XW1UU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/70db133i2k9il2e98opj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq1XW1UU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/70db133i2k9il2e98opj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a server-rendered page arrives in the browser and we want to attach the interactive JavaScript to it we call this hydration. It's a lot like the first render of a client rendered application. We traverse the whole application creating components and state, attaching event handlers, but we don't re-create the DOM nodes.&lt;/p&gt;

&lt;p&gt;However, do we really need all those components in the browser if we rendered everything on the server? The answer is often no. There are plenty of examples of static parts like headers, footers, navigation. In so you can view the interactive parts of the page as isolated &lt;a href="https://jasonformat.com/islands-architecture"&gt;islands&lt;/a&gt;. This can reduce code size dramatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSO9MUN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/614hsmf7qnfeevs9k0gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSO9MUN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/614hsmf7qnfeevs9k0gq.png" alt="Effect of Partial Hydration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;eBay's Marko Team ran some tests toggling the Partial Hydration off on a few pages of the eBay website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand how this works, I find it easiest to imagine there are 3 types of components. The topmost components like the page itself and header and footer are "Server" components that are completely static and do not need to be sent to the browser. The next set are "Stateful" Components which can be rendered completely on the server but have local state, event handlers, things that cause them to update. Finally we have "Client" components that need to be completely rendered in browser.&lt;/p&gt;

&lt;p&gt;However, every framework has its own way of handling these. For most VDOM libraries there is no difference between "Stateful" and "Client" components because they need to build the VDOM tree anyway. For reactive libraries with Template Cloning, there is very little difference between "Server" and "Stateful" components since they can skip shipping the template in either case and only have as much code as is needed to hydrate which for "Server" components is basically none.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Vue being both reactive and a VDOM uses a similar static hoisting method with string encoded views. While it might not be able to leverage being able to hydrate at a sub-component level it can still reduce the majority of code without the complexity of moving application entry points.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To pull this off, at build time analysis or heuristics (perhaps a file naming convention, or config file) are used to ensure the client bundle does not get the unneeded code. Alternatively, it can be manual by creating your own roots. Custom Elements can actually a pretty good tool for this, bringing their interactivity in a sea of native elements client or server(with the right library).&lt;/p&gt;

&lt;p&gt;This is an area that frameworks are working on improving. &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; is the only framework today that &lt;a href="https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec"&gt;automatically handles this&lt;/a&gt; for the end-user without any manual intervention.&lt;/p&gt;

&lt;p&gt;Unfortunately, it isn't always that simple. And I know what we have covered so far is not simple, but there is more. In the example above, eBay is not a single page application. Even though there are interactive portions and places that need to redraw, primary navigation is handled by rendering new pages from the server.&lt;/p&gt;

&lt;p&gt;As you have probably realized by now is once you need to render the page in the browser you need to bring all the JavaScript code. Even if you don't need all the JavaScript initially you will need it if you navigate back to that page. They all become "Client" components.&lt;/p&gt;

&lt;p&gt;Perhaps the most obvious way to address this is to create multiple bundles. You aggressively partially hydrate the initial page even under the router, and then load full client renderable bundles for any navigation later, including back to the original page. This can deliver on the promise of Partial Hydration and less JavaScript on initial load. But it does mean code duplication. You will eventually be sending (different versions of the) the same Components twice. But after the fact maybe that's ok. Vue has been &lt;a href="https://youtu.be/xXrhg26VCSc?t=2803"&gt;exploring this approach with VitePress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; have an interesting take here. Just continue to render these portions on the server even after the first load. We can load our client router in the browser but then re-render each nested page on the server. So we can regain our Islands below the client router and our pages can return to being mostly static even with a SPA.&lt;/p&gt;

&lt;p&gt;Interestingly both of these approaches require special consideration around routing and in React's case a dedicated backend solution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#analysis" class="anchor"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h1&gt;

&lt;p&gt;Naturally, the first thing I want to do is put these to the test, but it would be anecdotal at best. The first thing that came to mind was the comparison of &lt;a href="https://github.com/halfnelson/svelte-it-will-scale"&gt;Svelte Component Scaling compared to React&lt;/a&gt;. Some sort of test to see how much difference a small library that ignored all this compared to a large library that didn't.&lt;/p&gt;

&lt;p&gt;Something like byte code might reduce size for a VDOM but is it smaller than GZip compression on a string. Which is more expensive to parse? Is it worth the extra client-side code to handle this? The same goes for topics around server components and partial hydration. At what point does a now larger, 50kb React intersect with a 4kb library?  &lt;/p&gt;

&lt;p&gt;But these are limited comparisons. If the eBay example earlier is any indicator these numbers can vary greatly. Real large apps have a lot more code than even the component code. It's the 3rd party libraries. No toy demo/benchmark is going to demonstrate this. The biggest win is not just not shipping the component code but not shipping heavy libraries.&lt;/p&gt;

&lt;p&gt;That is a pretty good case for React Server Components which can avoid ever shipping certain JavaScript to the client. Marko's multi-page approach also achieves this. Of course, there are other ways to offload work to the server. Also if it doesn't block initial hydration, loading the rest of the JS after can not be terribly detrimental assuming it can be cached afterward. I will look more at performance optimization in the next article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The thing to remember about size is, with pretty much every technique your mileage will vary based on the nature of pages you have and the scale of the project. There are plenty of applications where these techniques are not worth the effort. Sometimes due to the framework. Sometimes due to a highly dynamic nature so there are minimal gains. Sometimes a different architecture is more beneficial and is simpler.&lt;/p&gt;

&lt;p&gt;This is a pretty tricky thing to test/benchmark independently. So it might be best to look at examples holistically. Even tree shaking already makes tools like &lt;a href="https://bundlephobia.com/"&gt;Bundlephobia&lt;/a&gt; limited in their use. There are libraries consistently producing smaller bundles than those half their size.&lt;/p&gt;

&lt;p&gt;But know every framework is working on mechanisms to address size. It will be interesting to see how effective they will be as more continue to release their versions over the coming year.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webperf</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Single App, Multi Login - Proof Of Concept</title>
      <author>BK ‚òï</author>
      <pubDate>Tue, 19 Jan 2021 15:37:30 +0000</pubDate>
      <link>https://dev.to/bk/single-app-multi-login-proof-of-concept-2k9m</link>
      <guid>https://dev.to/bk/single-app-multi-login-proof-of-concept-2k9m</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally posted on &lt;a href="https://bilalkhoukhi.com/blog/single-app-multi-login"&gt;https://bilalkhoukhi.com/blog/single-app-multi-login&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#original-post" class="anchor"&gt;
  &lt;/a&gt;
  Original Post:
&lt;/h2&gt;

&lt;p&gt;Google, Instagram, Twitter, and many other services allow users to login to multiple accounts and to switch between them without having to logout from one and login to another. &lt;/p&gt;

&lt;p&gt;At BuildOn Technologies, I saw the need for a similar solution, so I have decided to create a Proof of Concept to assess how easy it can be done with Angular, and whether this is the right solution for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-it-done" class="anchor"&gt;
  &lt;/a&gt;
  How is it done?
&lt;/h2&gt;

&lt;p&gt;Google's approach is the oldest I have seen as I used it for many years. When you go to Gmail, you will notice the URL looks like this &lt;code&gt;https://mail.google.com/mail/u/N/...&lt;/code&gt; where N is the index of the account starting from 0. This allows the Frontend app to identify which account it should get data for from the server or &lt;code&gt;localStorage&lt;/code&gt; and gives you the ability view different accounts in different tabs, where refreshing does not affect which account/page you are viewing.&lt;/p&gt;

&lt;p&gt;Looking at Gmail's cookies, you will notice that the keys &lt;code&gt;GMAIL_AT&lt;/code&gt; and &lt;code&gt;COMPASS&lt;/code&gt; have their &lt;code&gt;Path&lt;/code&gt; values correspond to &lt;code&gt;/mail/u/N&lt;/code&gt; and I believe this is where each account's token is stored.&lt;/p&gt;

&lt;p&gt;Twitter's approach is a bit different, you cannot use different accounts in different tabs, once you switch to a different account in one tab, the other tab switches the account right away, I believe they use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel"&gt;BroadcastChannel Web API&lt;/a&gt; to detect the switch, and then refresh the whole page. As for Instagram, I could not test their multi-login mechanism, but I would think it behaves in a similar way to Twitter. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objective" class="anchor"&gt;
  &lt;/a&gt;
  Objective
&lt;/h2&gt;

&lt;p&gt;My goal is to imitate Google's approach with some twists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login to multiple accounts&lt;/li&gt;
&lt;li&gt;The ability to use them independently in different tabs.&lt;/li&gt;
&lt;li&gt;Refreshing a tab should not log you out or switch you to another account.&lt;/li&gt;
&lt;li&gt;Logout from each account should not force you to log out from all, which is the case for Google's implementation.&lt;/li&gt;
&lt;li&gt;Avoid Google's routing style. So, no &lt;code&gt;/mail/u/N&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tracking-logins-and-workarounds" class="anchor"&gt;
  &lt;/a&gt;
  Tracking logins and workarounds:
&lt;/h3&gt;

&lt;p&gt;As mentioned, Google forces you to logout of all accounts and that is due to the use of indexes they assign for each account, you cannot logout of account 3 (index 2) and still use account 4 (index 3). If we follow Google's approach, we would be giving up on the ability to logout from accounts independently. Unless we use random digits instead of in-order indexes.&lt;/p&gt;

&lt;p&gt;We could also use query parameters instead to detect which account we are currently using, but we would still face the same logout issue, unless we use random digits instead of indexes. &lt;code&gt;?account=536&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My preferred solution is to use a mix of &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; to keep track of the user in each tab. &lt;code&gt;localStorage&lt;/code&gt; keeps track of all the accounts that are logged in, while &lt;code&gt;sessionStorage&lt;/code&gt; can store which of these accounts we are using in the current session. This should allow using different account in different tabs, refreshing does not remove your session, but closing the tab does.&lt;/p&gt;

&lt;p&gt;So, what happens if we visit a link in a fresh tab IF we are already logged into multiple accounts? Well, we can show the user a list of accounts, they can choose which to use. And this is a pro and a con:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The con is that the user's navigation must interrupt, but luckily it only happens if the user is logged into multiple accounts.&lt;/li&gt;
&lt;li&gt;The pro is fixing the issue in Google's implementation where sharing links with others is wacky... let me explain: Jane and I work at a company that uses Google Suite, she uses the work account as her default (index 0), and I use my personal Gmail account as my default, and the work account as index 1. Jane shares a link with index 0, Google will not let me see the content, and I must switch manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;This POC is done using Angular. To view the completed solution head over to &lt;a href="https://github.com/Bilal-io/Multi-Login-POC"&gt;https://github.com/Bilal-io/Multi-Login-POC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's walk through some files to explain what is going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything under &lt;code&gt;interceptors&lt;/code&gt; is borrowed from &lt;a href="https://github.com/cornflourblue"&gt;https://github.com/cornflourblue&lt;/a&gt; and it is acting as a fake backend. We call &lt;code&gt;./users/authenticate&lt;/code&gt; route to login and we get a response.&lt;/li&gt;
&lt;li&gt;The auth service &lt;code&gt;services/auth.service.ts&lt;/code&gt; has helper functions to login, logout, switch accounts, and deal with &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;, as well as store our login state. Too much in one file, it could be refactored.&lt;/li&gt;
&lt;li&gt;There are two lazy loaded modules, dashboard and admin.&lt;/li&gt;
&lt;li&gt;If we look at &lt;code&gt;guards/authentication.guard.ts&lt;/code&gt; and &lt;code&gt;guards/admin.guard.ts&lt;/code&gt; we find two auth guards for the dashboard and admin modules. Each has a &lt;code&gt;canLoad&lt;/code&gt; interface that prevent downloading its respective module if we are not authenticated, or authenticated but not an admin. There is also a  &lt;code&gt;canActivate&lt;/code&gt; interface that prevents the route from being accessed if not authenticated. (in can the module was loaded, then the user logs out)&lt;/li&gt;
&lt;li&gt;The Header component lists the users in a dropdown menu, allows us to logout of the active user, or switch to another.&lt;/li&gt;
&lt;li&gt;The Login page checks the app state to see if we have any accounts, and displays them, giving us the option to choose which to use. Or we can switch to the form and enter the credentials of a different account. In either case, we get redirected to the &lt;code&gt;/dashboard&lt;/code&gt; unless the tab was initially to a specific URL i.e. &lt;code&gt;./dashboard/test&lt;/code&gt; then we store that in a query param &lt;code&gt;?redirect=&lt;/code&gt; and redirect the user to it after a successful login or account switch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-remark" class="anchor"&gt;
  &lt;/a&gt;
  Final Remark
&lt;/h2&gt;

&lt;p&gt;If you've worked on a similar implementation, I'd like to hear your feedback.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>poc</category>
    </item>
    <item>
      <title>Becoming A Software Developer</title>
      <author>Kira McLean</author>
      <pubDate>Tue, 19 Jan 2021 15:25:54 +0000</pubDate>
      <link>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</link>
      <guid>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</guid>
      <description>&lt;p&gt;I get asked a lot for advice on becoming a software developer. I didn't study anything related to software in university, but now it's what I do for a living. I also spent about 3.5 years mentoring with &lt;a href="https://www.lighthouselabs.ca"&gt;Lighthouse Labs&lt;/a&gt;, a local web development bootcamp, and watched (and would like to believe at least in some cases, helped) hundreds of people of every age from wildly diverse backgrounds get jobs as software developers.&lt;/p&gt;

&lt;p&gt;This is my advice for people with no technical experience who want to land their first job writing software. It's based on my experience as both a person who did it myself and as a mentor to other people who did it. There's no single right way to go about this, and no matter how you do it's a lot of work. But these are some things that have worked for other people, myself included. These suggestions are arranged roughly in order, but of course many overlap and kind of happen at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-what-youre-getting-yourself-into" class="anchor"&gt;
  &lt;/a&gt;
  Know what you're getting yourself into
&lt;/h2&gt;

&lt;p&gt;Software engineering is nothing like I expected it to be. All the hard parts involve dealing with people. Part of my original motivation for choosing a career in software was thinking I wouldn't have to deal much with people. I wasn't very good at it and didn't enjoy it, but my fantasy of just sitting in front of my computer all day and watching my bank account fill up was totally delusional.&lt;/p&gt;

&lt;p&gt;The reality of writing code for a living, in my experience, includes dealing with a lot of office politics, entitled middle managers, stressed out co-workers, and yes, condescencion and occasional harassment (especially if you're not male). I find the culture of the tech industry generally toxic and abusive and it has very nearly broken my spirit on multiple occasions.&lt;/p&gt;

&lt;p&gt;You won't be alone dealing with this. Your co-workers and countless people across the industry share the experience. And it is ultimately bearable.&lt;/p&gt;

&lt;p&gt;I don't say this to discourage anyone from getting into software, but just to highlight that the stuff you hear from recruiters is bullshit. It's not all free trips and fancy perks and big paycheques. It is those things, sure, but the reality is much less glamorous than they make it sound.&lt;/p&gt;

&lt;p&gt;Being a software developer means getting paid to solve other people's problems. The rest is fluff. This makes it a solid career path, though, because other people have a lot of problems.&lt;/p&gt;

&lt;p&gt;It is still an empowering and lucrative career. Despite my generally negative view of the industry, I still highly recommend and help people into a career in software regularly. Most individual software developers, like most people, are genuine and kind. And I can't speak to problems in other industries first hand, but I gather most high-paying, male-dominated industries are pretty similar anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-lots-of-people" class="anchor"&gt;
  &lt;/a&gt;
  Meet lots of people
&lt;/h2&gt;

&lt;p&gt;I was referred to three of the four programming jobs I've had so far through friends. I made friends with those people who were already programmers at meetups. I didn't ask them to get me a job, but a lot of companies are pretty much always looking for new software engineers, so when your friend hears you're looking for that kind of job, they can bring it up at work. I still did interviews, but it makes an enormous difference when someone the boss already knows and trusts can vouch for you.&lt;/p&gt;

&lt;p&gt;A word on meeting strangers. I, like many people who are into nerd things like software, am the most introverted person I know. I found hanging out in groups of new people excruciating at first, but honestly learning how to not be awkward around strangers is just as important as learning how to code if you want to do well in your career. I just went to the meetups and stood off to the side, awkwardly making eye contact with a few random people. Eventually a friendly extrovert would come up and initiate a conversation, and before I knew it I could hold my own in a crowd.&lt;/p&gt;

&lt;p&gt;Check out meetups for programming languages you're interested in, or if there aren't those kinds of groups where you live, join online communities. Most programming languages have a slack or discord server where people hang out, and in my experience people are usually very welcoming and kind to newbies (at least in the Ruby, Elixir, and Clojure communities; all of which I highly recommend).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-code-in-public" class="anchor"&gt;
  &lt;/a&gt;
  Learn how to code, in public
&lt;/h2&gt;

&lt;p&gt;Without any formal education in software development, you have to offer something else to prove you actually know how to write code. I did this by building a bunch of crappy side projects. The very first thing I ever did was replicate the Google landing page with HTML and CSS. The first actual app I made was a blackjack game with Sinatra. I also made Twitter and Reddit clones with Rails, and little browser games like Pacman with different JavaScript frameworks. Some of that code still exists in my &lt;a href="https://github.com/kmclean-old"&gt;GitHub graveyard&lt;/a&gt; if you want to see what I mean by crappy. Other common toy projects include link shorteners, photo galleries, e-commerce stores, time trackers, or clones of whatever software you normally use, like spreadsheets, workflow management, calendars, etc. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Look for tutorials online that walk through how to build the kinds of things you're interested in. If you don't know where to start, &lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org"&gt;Free Code Camp&lt;/a&gt; are two free programs that offer very realistic learning roadmaps. I did parts of both of those but never finished either. I also did several free courses on &lt;a href="https://www.coursera.org/browse/computer-science"&gt;Coursera&lt;/a&gt; and &lt;a href="https://www.edx.org/course/subject/computer-science"&gt;edX&lt;/a&gt;, which are both amazing but you have to be careful not to end up in a rabbit hole. Those two mostly have actual university courses, which are super interesting, but not very relevant to things you'll do in a real job.&lt;/p&gt;

&lt;p&gt;If your goal is to get from nothing to making money as a developer as fast as possible I recommend sticking to a more targeted learning roadmap like the two above. There are also countless paid ones which vary wildly in price and quality. Be weary about shelling out huge amounts of money for bootcamps. I did pay for a few months of &lt;a href="https://launchschool.com"&gt;Launch School&lt;/a&gt; (which at the time was called "Tea Leaf Academy"), and it was the best career move I ever made. I highly recommend them because they're in a sweet spot of offering a robust and relevant curriculum without costing a fortune. It's not free ($200/month), but a few hundred dollars is a very small investment in the scheme of your career. Apparently they also offer a deferred payment option now, too.&lt;/p&gt;

&lt;p&gt;The career-oriented bootcamps will also teach you loads of useful practical things they don't teach in the free university courses, like version control (git), testing, and how to collaborate with other developers on one project.&lt;/p&gt;

&lt;p&gt;It took me 6 months of studying, meeting people, and building crappy software full time before I got my first internship. &lt;a href="https://www.lighthouselabs.ca/student-outcomes"&gt;95% of Lighthouse Labs graduates&lt;/a&gt; are employed as software developers in that timeframe. Launch School delivers &lt;a href="https://launchschool.com/results"&gt;impressive, concrete results&lt;/a&gt; for many of their students, too. I never finished most of the courses or programs I started. I funded that time off by living like a peasant on money I made running one of those student painting businesses the previous summer. Learning to code can feel like a slog at times, but just stick with it and you're very likely to be among the vast majority who succeed at this self-educated developer thing. It is a totally achievable and realistic goal and you're in good company.&lt;/p&gt;

&lt;p&gt;Other than doing free online courses and building apps from tutorials, other ways I learned in public during this time included blogging about my learning journey, making myself a portfolio website to showcase my little projects, and volunteering with some local tech communities. Do what works for you, but focus on ending up with at least a few medium sized projects you can show someone to prove you know how to make software that works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Learn best practices
&lt;/h2&gt;

&lt;p&gt;A surprising number of experienced developers still write really horrible code. Spend some time learning about software design and software engineering best practices to avoid becoming one of them. How you do that depends a lot on how you learn. (BTW, you should figure that out before you embark upon a journey of self-re-education for a career change). I absorb a lot from reading and prefer to learn by studying theory over trial and error, so reading and watching talks works really well for me. YMMV and you do ultimately just need experience to really get this stuff, but you don't have to start from scratch.&lt;/p&gt;

&lt;p&gt;Read "The Pragmatic Programmer" by Dave Thomas and Andrew Hunt, and anything by Sandi Metz. Watch Rich Hickey's talks, especially "&lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simple Made Easy&lt;/a&gt;", and Sarah Mei's "&lt;a href="https://brightonruby.com/2017/livable-code-sarah-mei/"&gt;Livable Code&lt;/a&gt;". Other classics include Eric Evans' "Domain Driven Design" and Martin Fowler's "Refactoring". There are countless others and everyone has their opinion about what should be included in the software engineering canon, but these are my recommendations. They'll provide a solid foundation and ample fodder for further reading and watching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pour-your-heart-out" class="anchor"&gt;
  &lt;/a&gt;
  Pour your heart out
&lt;/h2&gt;

&lt;p&gt;Once you can write code that mostly works, start looking for a job. Put the word out that you're seeking your first role writing software. Hopefully one of your programmer friends will know about an open position, but you can still apply to random jobs on the internet, too. This has a very low success rate, but it's possible. I got one of my four jobs by firing my resume into the abyss. I included a very long and heartfelt cover letter about how I loved programming so much and really wanted to work for this specific company (which I did), and how I learn fast and really believed I could do the job if they'd give me a chance.&lt;/p&gt;

&lt;p&gt;It worked. The hiring manager said my letter caught his attention. I had one year of experience at that time and had never worked remotely before, but I got the job.&lt;/p&gt;

&lt;p&gt;Don't be afraid to be authentic. Don't lie and say you know more than you do, but don't sell yourself short, either. Bootstrapping a career in software is no small feat and there are many teams out there who would love to hire the kinds of self-starting fast learners who do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-too-picky-at-first" class="anchor"&gt;
  &lt;/a&gt;
  Don't be too picky (at first!)
&lt;/h2&gt;

&lt;p&gt;The reality is that your first job or two will probably be pretty crappy and underpaid. At this point you're trying to convince someone to take a chance on you, and it's a trade off between your dignity and your future career. In the very beginning, you should prioritize gaining experience over almost everything else. Obviously never put up with anything you're uncomfortable with, but if you can stick it out it's worth setting the bar pretty low just to get your first few months of real job experience, IMHO.&lt;/p&gt;

&lt;p&gt;I lucked out and worked with the most amazing team in the world for my first job as a developer, but I discovered from the students I mentored that that is very much not the norm.&lt;/p&gt;

&lt;p&gt;There are pros and cons to every kind of company, so don't worry too much about finding the perfect fit right away. Focus on gaining experience at first so you can have the freedom to focus on finding the perfect fit later. I've worked with a few different kinds of companies and there are pros and cons no matter where you go.&lt;/p&gt;

&lt;p&gt;Big corporations usually have a lot of experienced developers and lethargic processes, so there's more opportunity to take your time and get help from people more advanced than you. The pressure is often pretty low because people have such low expectations for new developers, which honestly is fair. You have a lot of room to screw up because you're such a tiny cog in a massive machine. The downsides depend on your personality. For me it was that I find most large tech companies to be evil and didn't like the soul-crushing feeling of helping to build something I hated.&lt;/p&gt;

&lt;p&gt;Startups usually have fewer people available to be mentors, but more opportunity to take on disproportionate responsibility for your level, which can be an amazing learning experience in a different way. You also have a lot of room to screw up, but it's more because your screw ups just blend in with the overall culture of moving fast and breaking things. I now believe that's a ridiculous way to run a business, but when there's widespread acceptance of breaking even important things, you have a lot freedom to experiment and learn by trial and error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-a-good-student" class="anchor"&gt;
  &lt;/a&gt;
  Be a good student
&lt;/h2&gt;

&lt;p&gt;Lastly, once you finally land your first job, be a good student. Treat your first year or two on the job like paid education, not your chance to go in and show everyone how it's done. You know way less than you think, and you have no idea what it takes to build functioning software systems, let alone to deploy or maintain them. Always be humble and eager to learn. Soak up every minute of attention you get from more experienced developers around you and learn from them. Not everything they say is wise or true, but pay attention and copy the things that work whilst ignoring the things that clearly don't.&lt;/p&gt;

&lt;p&gt;Learn how to ask good questions. Don't be afraid to ask for help, but before you do, at least try to figure out the problem yourself. Write down what you tried, and explain why you're surprised your attempt didn't work.&lt;/p&gt;

&lt;p&gt;There are certain things you can only really learn from experience on a real world project, so see what opportunities there are to learn those things, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;securing and backing up actual important customer data&lt;/li&gt;
&lt;li&gt;deploying a huge app with no downtime&lt;/li&gt;
&lt;li&gt;refactoring large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;adding new features to large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;fixing obscure bugs with no instructions to reproduce them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few examples of things you won't run into on your little demo projects. Pay attention to the problems you're dealing with at work that you don't run into on side projects and learn how to fix those. That's your pathway to levelling up. Most importantly, never stop learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all" class="anchor"&gt;
  &lt;/a&gt;
  That's all
&lt;/h2&gt;

&lt;p&gt;Software development is a great career. It's allowed me to be financially independent and stable, travel the world, meet cool people, and lots more. My path won't work for everyone. There are as many different ways to become a software developer as there are people, but I've seen countless aspiring software engineers go through their own journeys and many of them touch on these points, so see how they fit in to your own path. And let me know how it goes üôÇ&lt;/p&gt;

</description>
      <category>education</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Why visual novel game development matters to me</title>
      <author>Diana Chin</author>
      <pubDate>Tue, 19 Jan 2021 15:23:17 +0000</pubDate>
      <link>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</link>
      <guid>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</guid>
      <description>&lt;p&gt;Hello friends and welcome to the New Year! It‚Äôs been a while since my last post as I‚Äôve been managing a busy schedule between my full-time job as a support engineer and helping my son with his remote learning.&lt;/p&gt;

&lt;p&gt;For this article, I‚Äôm focusing on visual novel game development and why it matters to me tremendously. Since 2018, I was introduced to visual novel programming when I wanted to make a simple game featuring my cow character from my webcomics. Though my art style has changed throughout the years, I‚Äôm happy that I‚Äôve managed to keep on learning new techniques. The satisfaction behind combining code and art makes it worthwhile to share my projects. &lt;/p&gt;

&lt;p&gt;I‚Äôve played a good amount of visual novel games, and I can tell you that it amazes me to see so many different interactive stories. I enjoy supporting other visual novel developers who are creating their unique games. &lt;/p&gt;

&lt;p&gt;I‚Äôll be honest - I‚Äôve had some folks who berated my projects since they believe that visual novel game development isn‚Äôt real development. And that‚Äôs because it falls under the assumed notion that anytime we think of game development, it‚Äôs easy and shouldn‚Äôt require a lot of brainpower. &lt;/p&gt;

&lt;p&gt;I‚Äôm here to tell you that it‚Äôs not the case. Game development, just like any other development field, requires the ability to plan and develop your project through phases. No matter the language/framework involved, you‚Äôre building a functional piece of software. It‚Äôll require testing, rewriting code, testing it again, maybe refactor to keep the code neat and tidy, and the cycle pretty much repeats itself until you‚Äôre satisfied with the end result. &lt;/p&gt;

&lt;p&gt;Visual novel games, to me, is a beautiful marriage of code and storytelling. As I‚Äôve to use Ren‚ÄôPy for developing my games, I can incorporate some Python scripts, if needed. I‚Äôm also utilizing my own writings and art assets in creating my story. To me, it‚Äôs a labor of love and I‚Äôm in awe of how the pieces interact with each other to make the game come to life. &lt;/p&gt;

&lt;p&gt;My end goal for creating visual novel games is simple - to make others smile. Money isn‚Äôt a motivator when I build my games. I just love creating them. &lt;/p&gt;

&lt;p&gt;If you're an aspiring visual novel game developer and don't know where to start, you can check out my series on  &lt;a href="https://hashnode.com/series/lets-build-a-simple-visual-novel-game-using-renpy-ckfe5jbdn018k65s1fj0r30gp"&gt;creating a simple visual novel game using Ren'Py&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading my article! If you happen to like it, I appreciate your thoughts in the comments section. Lastly, don't forget to follow me on my visual novel game development, test automation adventures, and webcomics via &lt;a href="http://twitter.com/redlotusdesignz"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>devjournal</category>
      <category>python</category>
    </item>
    <item>
      <title>Customizing the scrollbar with CSS</title>
      <author>Nikki</author>
      <pubDate>Tue, 19 Jan 2021 15:17:15 +0000</pubDate>
      <link>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</link>
      <guid>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</guid>
      <description>&lt;p&gt;Have you ever noticed the intricacies of the websites you visit? You can style just about every pixel of it, including the scrollbar. I was curious about how to go about this and found that it could be accomplished with just a few lines of CSS. &lt;/p&gt;

&lt;p&gt;Here's what we'll build in Codepen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the final project: &lt;a href="https://codepen.io/nikki-peel/pen/oNzmEMa"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three boxes containing overflowing text content will all be scrollable but styled differently. The first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have content be scrollable while the scrollbar itself is hidden. The second &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar that is always visible. The third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar but only display it when the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is focused upon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-three-sections-with-text-content" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create the three sections with text content&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First, create three &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements and within those sections create a paragraph containing a long string of text (I used 4 paragraphs of dummy text, enough to create overflow). I also chose to label each &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-base-styles-with-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create base styles with CSS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Next, you'll want to create some basic styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I decided to use custom properties for the colors in this project and declared them first at the top of the file (this is optional of course). Next, we'll use Flexbox to style the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; using display: flex and space the sections evenly using &lt;code&gt;justify-content: space-evenly&lt;/code&gt;. I also added margin to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; so that the sections would be centered horizontally with a bit of space on top and bottom as well: &lt;code&gt;margin: 2rem auto&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The sections each have a &lt;code&gt;height&lt;/code&gt; of 60vh with a &lt;code&gt;border-radius&lt;/code&gt; of 5px for rounded corners. I added some padding to the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; as well so that there is a nice amount of whitespace. You want to make sure you declare &lt;code&gt;overflow-y: auto&lt;/code&gt; when styling your sections so that they are scrollable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section {
  display: block;
  background-color: var(--white);
  border: 3px solid #121212;
  height: 60vh;
  border-radius: 5px;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only styling I chose for the paragraph elements was a line-height of 1.35 and changing the font-family to sans-serif:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-the-scrollbar-component" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Styling the scrollbar component&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now it's time for the fun part! In order to select the scrollbar, we'll use the pseudo-element &lt;code&gt;::webkit-scrollbar&lt;/code&gt; on our &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element to indicate that we want to use a custom scrollbar and assign it a &lt;code&gt;width&lt;/code&gt; of 1.25em:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: if you plan to use a horizontal scroll bar instead (or in addition to) you'll need to declare a &lt;code&gt;height&lt;/code&gt; for the scrollbar&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar {
width: 1.25em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we can style the 'track' of the scrollbar using &lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I added a small &lt;code&gt;border-radius&lt;/code&gt; because the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; container has rounded corners as well. You may also create an inner-shadow for the track using &lt;code&gt;box-shadow&lt;/code&gt; and the keyword 'inset'.&lt;/p&gt;

&lt;p&gt;Now that the &lt;code&gt;sidebar&lt;/code&gt; and &lt;code&gt;sidebar-track&lt;/code&gt; have been made we can add custom styling to the &lt;code&gt;sidebar-thumb&lt;/code&gt; (this is the element that moves along the track):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once again, we've added &lt;code&gt;border-radius&lt;/code&gt; for rounded corners and an inner-shadow on the element. Adding an explicit height here was also necessary because the height of the &lt;code&gt;scrollbar-thumb&lt;/code&gt; adapts to screen size and becomes too small of a target on mobile devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remember, we want to hide the scrollbar on the first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; while still maintaining scroll. To do this, simply target the element by its ID (&lt;code&gt;#hidden&lt;/code&gt;) and write &lt;code&gt;display: none;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#hidden::-webkit-scrollbar {  
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar-until-focused" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar until focused&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Styling the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; was a bit trickier. We don't want the scrollbar to show unless the section has been focused upon. First, you must target the element by its ID (&lt;code&gt;#inactive&lt;/code&gt;) and hide the overflowing content (this also hides the scrollbar!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive {
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, target the element's &lt;code&gt;:focus&lt;/code&gt; state and change the overflow of the y axis to &lt;code&gt;auto&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive:focus {
  overflow-y: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you click or tap on the third section, you should now see our custom scrollbar appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-sections-tabbable-and-adding-raw-focus-endraw-styling" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making the sections tabbable and adding &lt;code&gt;:focus&lt;/code&gt; styling&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These next few steps are implemented so that the sections can be focused upon by keyboard users as well. The &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element is not tabbable by default as is the case with input elements, buttons, and anchor tags. In order to fix this, I added a &lt;code&gt;tabindex&lt;/code&gt; to each of the sections within the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section tabindex="2"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section id="inactive" tabindex="3"&amp;gt;&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, custom styling can be used to indicate more clearly whether an element has been focused upon. For this project, I applied &lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; styles globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finishing-touches" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Finishing touches&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You may also wish to add a short note as I have to the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; indicating that the user must tap to view the content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In our CSS file, we can hide this element on large screens using a media query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we should add another media query so that our content collapses when viewed on small screens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we update our &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element to use &lt;code&gt;flex-direction: column&lt;/code&gt;. Next, adjust the margin on the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements so that there is a vertical gap between them and they are centered horizontally: &lt;code&gt;margin: 1rem auto;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-html" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final HTML:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section tabindex="2"&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section id="inactive" tabindex="3"&amp;gt;
  &amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final CSS:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 

section::-webkit-scrollbar {
    width: 1.25em;
} 

section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}

section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}


/* hiding the scrollbar for the first &amp;lt;section&amp;gt; */
#hidden::-webkit-scrollbar {
  display: none;
}

#inactive {
  overflow: hidden;
}

#inactive:focus {
  overflow-y: auto;
}

/* use hidden-scrollbar type for 'body' */
body::-webkit-scrollbar {
  display: none;
}

@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}

em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We now have three scrollable sections each with custom styling üéâ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-things-up" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Wrapping things up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is just the beginning of what you can do to style the scrollbars for your projects. There are a variety of pseudo-elements that can be used to customize each part of the scrollbar:&lt;/p&gt;

&lt;p&gt;*&lt;code&gt;::-webkit-scrollbar&lt;/code&gt; ‚Äî the entire scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-button&lt;/code&gt; ‚Äî the buttons on the scrollbar (arrows pointing upwards and downwards).&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-thumb&lt;/code&gt; ‚Äî the draggable scrolling handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt; ‚Äî the track (progress bar) of the scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track-piece&lt;/code&gt; ‚Äî the part of the track (progress bar) not covered by the handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-corner&lt;/code&gt; ‚Äî the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet.&lt;br&gt;
*&lt;code&gt;::-webkit-resizer&lt;/code&gt; ‚Äî the draggable resizing handle that appears at the bottom corner of some elements.&lt;/p&gt;

&lt;p&gt;One important factor to keep in mind is accessibility. According to MDN, it is not suggested to be used in production due to its incompatibility with some browsers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar"&gt;MDN Docs - webkit-scrollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also another method being developed which I think is important to point out: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scrollbars"&gt;MDN Docs - CSS Scrollbars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example from MDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scroller {
  width: 300px;
  height: 100px;
  overflow-y: scroll;
  scrollbar-color: rebeccapurple green;
  scrollbar-width: thin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we're using green for the color of our thumb and purple for our scrollbar's track (both declared using &lt;code&gt;scrollbar-color&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="scroller"&amp;gt;
Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi
welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.
Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette
tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato.
Dandelion cucumber earthnut pea peanut soko zucchini.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Current browser compatibility for scrollbar-color and scrollbar-width:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you know of any other methods that can be used for customizing the scrollbar, please share in the comments. Thank you for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
