<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating a snowfall effect with HTML and CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 18 Feb 2021 05:35:40 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/creating-a-snowfall-effect-with-html-and-css-1pp1</link>
      <guid>https://dev.to/alvaromontoro/creating-a-snowfall-effect-with-html-and-css-1pp1</guid>
      <description>&lt;p&gt;It has been snowing and freezing in Texas lately (it still is)... and that was the inspiration for this quick animation of &lt;a href="https://www.youtube.com/watch?v=XO02P3QwENo"&gt;snow falling done with HTML and CSS&lt;/a&gt; in less than 10 minutes (video at the bottom of the page).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we used &lt;a href="https://pugjs.org/api/getting-started.html"&gt;Pug&lt;/a&gt; and &lt;a href="https://sass-lang.com/"&gt;Sass/SCSS&lt;/a&gt; to simplify the repetitive parts of HTML and CSS respectively, but they are not needed. You can extrapolate the code so it's only HTML and CSS (for simplicity, we will show both in the article.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is how our animation will look in the end (&lt;a href="https://codepen.io/alvaromontoro/full/GRNmdzB"&gt;demo via CodePen&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/GRNmdzB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-the-background" class="anchor"&gt;
  &lt;/a&gt;
  Setting the background
&lt;/h2&gt;

&lt;p&gt;Let's start by setting up the background. This step is optional and can be done in multiple ways. For demo purposes, we will just limit ourselves to making a dark background with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-snowflakes" class="anchor"&gt;
  &lt;/a&gt;
  Adding the snowflakes
&lt;/h2&gt;

&lt;p&gt;Then we will create a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for each snowflake that we want on the screen. We could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snowflake"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
...
...
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snowflake"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snowflake"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- 50 times! --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But for simplicity, we used PugJS that allows us to use loops for these repetitive tasks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- for (i = 0; i &amp;lt; 50; i++)
  div(class="snowflake")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styling-the-snowflakes" class="anchor"&gt;
  &lt;/a&gt;
  Styling the snowflakes
&lt;/h2&gt;

&lt;p&gt;We now have all the snowflake &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s on the page, and we need to style them. They will be small, rounded, and white:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.snowflake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We used a custom property (&lt;code&gt;--size&lt;/code&gt;) for the width and height because it will be convenient later when we want to have different sized snowflakes.&lt;/p&gt;

&lt;p&gt;Also, we positioned the snowflakes outside of the view frame (from the top). We will make them fall to the outside of the view frame (from the bottom).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-animation" class="anchor"&gt;
  &lt;/a&gt;
  Adding the animation
&lt;/h2&gt;

&lt;p&gt;To animate this fall, we need to use a CSS animation with &lt;code&gt;@keyframes&lt;/code&gt;. We are going to start with something basic and then make it grow a little.&lt;/p&gt;

&lt;p&gt;First, we will use &lt;code&gt;translate3d&lt;/code&gt; to make the snowflakes move vertically. Because it is a 3D transform, it will trigger the hardware acceleration and look nicer than if we animated a different property like &lt;code&gt;top&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We could apply this animation to the snowflake class by adding this property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;snowfall&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But that would only move the snowflakes vertically from top to bottom and look unrealistic. Plus, all the snowflakes are overlapping because of the absolute positioning, which is not a good look. We need to fix that.&lt;/p&gt;

&lt;p&gt;We could create 50 different rules, one for each snowflake, assigning each of them a different left position, angle, speed... but while that would be possible in plain CSS, it is really tedious:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="m"&gt;8s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;49&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;78vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="m"&gt;7s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="m"&gt;10s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is easier to code with SCSS and its functions and then use the generated CSS code. So instead of having to write hundreds of lines of code, we can use loops to simplify considerably the development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* randomize size! */&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Boom! That's 7 lines of code that will be later compiled into 250! And we don't have to worry about coming up with random numbers because SCSS provides the &lt;a href="https://blog.codepen.io/2013/08/26/random-function-in-sass/"&gt;&lt;code&gt;random()&lt;/code&gt; function&lt;/a&gt; for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-touches" class="anchor"&gt;
  &lt;/a&gt;
  Final touches
&lt;/h2&gt;

&lt;p&gt;The snowflakes have different sizes and they move at different speeds, but they are still moving just vertically, which is not too realistic. We can combine CSS variables with the SCSS functions to add some &lt;em&gt;random&lt;/em&gt; lateral movement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* uses CSS variables to determine initial and final position */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;left-ini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;left-end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--left-ini&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* random initial translation */&lt;/span&gt;
    &lt;span class="na"&gt;--left-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* random final translation */&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a final touch, we added a negative &lt;code&gt;animation-delay&lt;/code&gt;, so not all the snowflakes started the animation at the same spot. Otherwise, all of them would start falling at the same time and look a bit weird.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a simple animation that can be eye-catchy... but it can also be CPU-consuming if too many snowflakes are added. Use it with caution.&lt;/p&gt;

&lt;p&gt;You can watch a video of the animation development on Youtube:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XO02P3QwENo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
And while at it, you can &lt;a href="https://www.youtube.com/c/AlvaroMontoroCSS"&gt;subscribe&lt;/a&gt; :)



</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>...Spread and ...Rest Operator</title>
      <author>marlonry</author>
      <pubDate>Thu, 18 Feb 2021 02:49:55 +0000</pubDate>
      <link>https://dev.to/marlonry/spread-and-rest-operator-2f1m</link>
      <guid>https://dev.to/marlonry/spread-and-rest-operator-2f1m</guid>
      <description>&lt;p&gt;Hello, today I will be talking about the Spread and Rest operator, and give sample situations where they are most commonly used. As a beginner is hard to tell which one is the right operator since they share the same syntax. However, these operators are complete opposites in the way they behave.&lt;/p&gt;

&lt;p&gt;The first thing to understand about each of these operators is that the &lt;code&gt;...&lt;/code&gt; &lt;strong&gt;Spread operator expands&lt;/strong&gt; arrays, strings, and objects into single elements, and the &lt;code&gt;...&lt;/code&gt; &lt;strong&gt;Rest operator combines&lt;/strong&gt; elements into an array. This can be better understood in practice so let's dive right into each context where they are presented.&lt;/p&gt;

&lt;p&gt;In the following examples, I will show where the Spread and Rest operators are used and show a reminder of how each of the following situations used to be done before the operators were implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-operator" class="anchor"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#concatenate-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Concatenate Arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wade&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Samantha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moreNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daito&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Helen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;moreNames&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["Wade", "Samantha", "Daito", "Helen"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Arrays can also be concatenated with &lt;code&gt;Array.prototype.concat()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#copy-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Copy Arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;run&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;climb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;walk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actionsCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["run", "climb", "walk"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCopy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["run", "climb", "walk"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There are multiple ways to copy arrays like using the &lt;code&gt;Array.prototype.slice()&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#merge-objects" class="anchor"&gt;
  &lt;/a&gt;
  Merge Objects
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sushi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Japanese&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;servings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dishInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// fix&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dishInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {dish: "Sushi", type: "Japanese", servings: 8}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Objects can also be merged or copied with &lt;code&gt;Object.assign()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#expand-strings-into-single-elements" class="anchor"&gt;
  &lt;/a&gt;
  Expand Strings into Single Elements
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Oasis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["T", "h", "e", " ", "O", "a", "s", "i", "s"] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Strings can also be split with &lt;code&gt;String.prototype.split()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pass-elements-as-arguments-to-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Pass elements as arguments to a function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiplyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;multiplyNumber&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Passing elements as arguments to a function can also be done with &lt;code&gt;Function.prototype.apply()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#rest-operator" class="anchor"&gt;
  &lt;/a&gt;
  Rest Operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pass-an-indefinite-amount-of-arguments-to-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Pass an indefinite amount of arguments to a function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTotal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [4, 5, 1, 8, 10]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 28&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;getTotal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;arguments&lt;/code&gt; object can also be used when passing an indefinite amount of arguments to a function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you for reading!😃 and let me know what other cool things the Spread and Rest operator can do. Happy Coding!!&lt;/p&gt;

</description>
      <category>whatilearnedtoday</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Hack the Planet Reminder &amp; FAQ</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Thu, 18 Feb 2021 00:00:53 +0000</pubDate>
      <link>https://dev.to/devteam/hack-the-planet-reminder-faq-3ibi</link>
      <guid>https://dev.to/devteam/hack-the-planet-reminder-faq-3ibi</guid>
      <description>&lt;p&gt;There are just 11 days left in our &lt;a href="https://dev.to/devteam/announcing-the-new-relic-hack-the-planet-contest-on-dev-5d"&gt;current hackathon with New Relic&lt;/a&gt;! As I've mentioned before, New Relic has generously &lt;a href="https://dev.to/devteam/new-relic-hackathon-update-doubling-the-cash-prize-26n5"&gt;DOUBLED&lt;/a&gt; their cash prize package for winners and runners-up. That means three grand prize winners get $5,000 and 10 runners-up get $500 USD 😱 — by far the biggest hackathon cash prize DEV members have ever received!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Because Hack the Planet is slightly different in structure than anything we've done before, I wanted to address some frequently asked questions about this hackathon...&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#q-what-can-i-build-for-hack-the-planet" class="anchor"&gt;
  &lt;/a&gt;
  Q: "What can I build for Hack the Planet?"
&lt;/h3&gt;

&lt;p&gt;A: Your options are basically endless, but they do depend on the category you select. Here's a breakdown...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Science and Observation:&lt;/strong&gt; Build a web application that uses New Relic to observe science phenomena in the world around you. This app will either call open-source endpoints supplying climate change-related data OR you can create errors/issues within your app and show screenshots of the New Relic dashboards observing those errors or alerts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year, New Resources:&lt;/strong&gt; Same as the above, except instead of building a NEW application, you'll be implementing New Relic into an existing application you've built to add a climate-change monitoring element. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Out of This World:&lt;/strong&gt; Build any kind of web application you want using New Relic! No climate change aspect required! The only caveat here is that you'll be asked a short essay question about observability and climate change in your submission template&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-where-do-i-submit-my-project" class="anchor"&gt;
  &lt;/a&gt;
  Q: "Where do I submit my project?"
&lt;/h3&gt;

&lt;p&gt;A: Unlike our previous hackathons where contestants were asked to submit their projects on DEV, &lt;strong&gt;you'll be submitting your final project on &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt; for Hack the Planet&lt;/strong&gt;! This community is built on Forem and moderated by the New Relic team. It's a welcoming space for software developers to ask questions/connect directly with the New Relic team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-how-do-i-submit-my-project" class="anchor"&gt;
  &lt;/a&gt;
  Q: "How do I submit my project?"
&lt;/h3&gt;

&lt;p&gt;A: Again, &lt;a href="https://therelicans.com/enter"&gt;create an account on The Relicans&lt;/a&gt;as a first step (and be sure to enjoy all the discussions the community has to offer!). From there, you'll want to use their &lt;a href="https://www.therelicans.com/new/hacktheplanet"&gt;submission template&lt;/a&gt; and answer all the questions you see there. Note: If you're submitting your application under the "Out of This World" category, please answer the short essay question at the end of the template. For the other two categories, this field is optional.&lt;/p&gt;

&lt;p&gt;Be sure to submit your project by midnight (PT) on 2/28. Full contest rules &lt;a href="https://dev.to/page/hack-the-planet-rules"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-i-have-another-question-where-can-i-ask-it" class="anchor"&gt;
  &lt;/a&gt;
  Q: "I have another question. Where can I ask it?"
&lt;/h3&gt;

&lt;p&gt;A: Head over to &lt;a href="https://www.therelicans.com/therelicans/help-thread-new-relic-hack-the-planet-contest-eg3"&gt;this help thread&lt;/a&gt; on The Relicans to ask your Hack the Planet/New Relic questions directly to their moderators and the New Relic team.&lt;/p&gt;

&lt;p&gt;If you just want to share updates and thoughts on your project or motivate others, check out their &lt;a href="https://www.therelicans.com/therelicans/community-discussion-thread-hack-the-planet-1937"&gt;community discussion thread&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Good luck, everyone! I'm so excited to see what you build for this contest 🎉 &lt;/p&gt;

</description>
      <category>hacktheplanet</category>
      <category>challenge</category>
      <category>newrelic</category>
    </item>
    <item>
      <title>Zsh Tricks to Blow your Mind</title>
      <author>Lizzie Siegle</author>
      <pubDate>Wed, 17 Feb 2021 19:51:26 +0000</pubDate>
      <link>https://dev.to/twilio/zsh-tricks-to-blow-your-mind-291f</link>
      <guid>https://dev.to/twilio/zsh-tricks-to-blow-your-mind-291f</guid>
      <description>&lt;p&gt;In UNIX-based programming, we often talk about shells, terminals, and the command line interfaces. Bash is probably the most well-known, but there are other widely-used options as well, such as Zsh or the Z shell. Read on to learn more about Zsh and some tips and tricks to optimize your development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-zsh" class="anchor"&gt;
  &lt;/a&gt;
  What is Zsh?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;Zsh&lt;/a&gt;, also known as the Z shell, extends functionality of the Bourne Shell (sh), offering newer features and more support for plugins and themes. Starting with MacOS Catalina in 2019, Zsh became the default login and interactive shell in Mac machines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-zsh" class="anchor"&gt;
  &lt;/a&gt;
  Install Zsh
&lt;/h3&gt;

&lt;p&gt;You can install &lt;a href="https://brew.sh/"&gt;Zsh&lt;/a&gt; using Homebrew with &lt;code&gt;brew install zsh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While you're at it, you can also install the most popular Zsh plugin, &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;, that comes with many built-in plugins and themes using this install script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-lesserknown-zsh-tips-and-tricks" class="anchor"&gt;
  &lt;/a&gt;
  9 Lesser-Known Zsh Tips and Tricks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://twitter.com/valeriane_IT/status/1359433683506262016"&gt;My teammate Valériane Venance tweeted about the &lt;code&gt;take&lt;/code&gt; command&lt;/a&gt; which creates a new directory and changes to it, thus eliminating the need to type the two commands &lt;code&gt;mkdir&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt;.&lt;/em&gt; &lt;code&gt;take&lt;/code&gt; will also make intermediate directories as needed.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIv4JVRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/j3U3-JIccLp-w9U6_-JOG2it7X_GyYkCHOpNByHSN_GLy.width-1600.png" alt="take example"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Searching through history.&lt;/em&gt; In the terminal, pressing the up arrow cycles through previous commands you used starting with the most recent first. With Zsh, you can cycle through times you used a specific command, ie. &lt;code&gt;mkdir&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QJvm2xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/NLVN2cW1nu4TtxchyotrhRkm5zXqji_pL06nVLkEYk4sW672_iO0rnwEEVdbhZCDI27sCsiLg7Si_S" alt="search history of mkdir uses"&gt;
&lt;a href="https://twitter.com/MaximumGilliard/status/1147113043052113924"&gt;My wonderful teammate Matthew Gilliard told me about &lt;code&gt;ctrl-r ___&lt;/code&gt;&lt;/a&gt; which finds the last time you searched for the given phrase. Clicking &lt;code&gt;ctrl-r&lt;/code&gt; again would find the second most recent, then third, etc.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vL9ACfgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/Y73UIsvfNntxscPwBVLT-IZA_mODIgePdVhNBP90aGINVbNMKxUwdw6m0gRF8QrQTdRS2wSME_P1ug" alt="cmd-r example"&gt;
&lt;/li&gt;
&lt;li&gt;Automatic &lt;code&gt;cd&lt;/code&gt;. No need to type &lt;code&gt;cd&lt;/code&gt; to switch directories, just type the directory name.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Mass rename files with &lt;code&gt;zmv&lt;/code&gt;.&lt;/em&gt; To install zmv, run &lt;code&gt;autoload zmv&lt;/code&gt;. I downloaded a lot of images for a machine learning model and wanted to rename them to be more consistent (ie. epcot-1.jpg, epcot-2.jpg, epcot-3.jpg… instead of 1.jpg, 2.jpg, 3.jpg...) The command to do so would be &lt;code&gt;zmv '(*).(jpg|jpeg)' 'epcot-$1.$2'&lt;/code&gt;. To check what would happen before running the command, you can add &lt;code&gt;-n&lt;/code&gt;, instead running &lt;code&gt;zmv -n '(*).(jpg|jpeg)' 'epcot-$1.$2'&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af9N6E9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/tcdT37LNVuRR1lmA7c_ivOEK9eAiRS1EOacPWRy7zwVGN.width-1600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af9N6E9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/tcdT37LNVuRR1lmA7c_ivOEK9eAiRS1EOacPWRy7zwVGN.width-1600.png" alt="check mass renaming using zmv -r"&gt;&lt;/a&gt;&lt;br&gt;
What does that command mean? &lt;code&gt;(*).(jpg|jpeg)&lt;/code&gt; finds each file in the directory that ends in either &lt;code&gt;.jpg&lt;/code&gt; or &lt;code&gt;.jpeg&lt;/code&gt;. Then &lt;code&gt;epcot-$1.$2&lt;/code&gt; says to edit each file name by prepending &lt;code&gt;epcot-&lt;/code&gt; followed by the original file name (represented by &lt;code&gt;$1&lt;/code&gt;) and then the original file type (with &lt;code&gt;$2&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Perform calculations from the command line like a calculator.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8uYJseD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/lKp36T5JCcKhvGh4NWFOMrDk3Va2ghtR-VRGKyuegTJU3.width-1600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8uYJseD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/lKp36T5JCcKhvGh4NWFOMrDk3Va2ghtR-VRGKyuegTJU3.width-1600.png" alt="calculations with zcalc"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Bountiful potential plug-ins.&lt;/em&gt; As mentioned in the &lt;em&gt;Installation&lt;/em&gt; section, oh-my-zsh comes with many plug-ins. You would include the &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;sudo&lt;/code&gt; plug-ins by adding this line to your &lt;code&gt;~.zshrc&lt;/code&gt; file: &lt;code&gt;plugins=(npm sudo)&lt;/code&gt;. Some stand-out plug-ins include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm&lt;/code&gt; adds auto-complete to &lt;code&gt;npm&lt;/code&gt; commands.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sudo&lt;/code&gt; adds--you guessed it--&lt;code&gt;sudo&lt;/code&gt; to a command even after you've typed it by clicking &lt;code&gt;esc&lt;/code&gt; twice.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JyS2CMz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/escesc.gif" alt="sudo with esc-esc"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zsh-autosuggestions&lt;/code&gt; suggests commands while you type according to your history of previous commands and completions.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SSBTLcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/URTQRFT6coapY1IGBvRUyo5Gik0kbZxZKlQfImvcNIQGwD5JRxrdjlsTTnpuHZ_zeFPTwN5FNdn0B7" alt="zsh-autosuggestions gif"&gt;
( &lt;code&gt;web-search&lt;/code&gt; lets you open a search engine from your command line: running &lt;code&gt;google ___&lt;/code&gt; will search Google for the given phrase, ie. Serena Williams as shown below.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_gE4CXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/google.gif" alt="search Serena Williams via the command line"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git&lt;/code&gt; includes many aliases for git commands, letting you type less and save time. Why type &lt;code&gt;git add&lt;/code&gt; when you can type &lt;code&gt;ga&lt;/code&gt; instead? &lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git"&gt;More aliases are listed here&lt;/a&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oG4KaWQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/uuQ8yjyqWYgAbAfaflnmvKCGdhgOQavB4oEqV7ZvTJULF.width-1600_VDheRVg.png" alt="example of ga ."&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Park a command.&lt;/em&gt; &lt;code&gt;Ctrl-q&lt;/code&gt; "parks" the command you're currently typing and takes you back to the prompt, letting you start over and type another command. Once you run that other command, the original command is un-parked and refills the command line so you can continue--this is good for if you, say, forgot to do a command before a command. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JRFF4tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/ctrlq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JRFF4tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/ctrlq.gif" alt="ctrl-q parks a command for later"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Easily edit a command after you've typed it on the command line.&lt;/em&gt; If you've typed or pasted a long command and decide you need to edit it before running, &lt;code&gt;ctrl-x-e&lt;/code&gt; opens it in an editor (usually vi, but you can set it to be any text editor with the &lt;code&gt;$EDITOR&lt;/code&gt; environment variable.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Key combo shortcuts&lt;/em&gt;. Type &lt;code&gt;ctrl l&lt;/code&gt; instead of &lt;code&gt;clear&lt;/code&gt; to clear your terminal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-next-for-turbocharging-your-shell" class="anchor"&gt;
  &lt;/a&gt;
  What's Next for Turbo-Charging your Shell
&lt;/h3&gt;

&lt;p&gt;This is just the beginning--there is so much more you can do with zsh and oh-my-zsh. Check out &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet"&gt;this oh-my-zsh cheat sheet&lt;/a&gt; and &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;this list of ZSH frameworks, themes, and plug-ins&lt;/a&gt; maintained by Twilio engineer Joe Block, and let me know online what your terminal looks like!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>productivity</category>
      <category>shell</category>
      <category>discuss</category>
      <category>tips</category>
    </item>
    <item>
      <title>Start Using Prettier The Right Way</title>
      <author>Austin Hill</author>
      <pubDate>Wed, 17 Feb 2021 19:47:28 +0000</pubDate>
      <link>https://dev.to/akinghill/start-using-prettier-the-right-way-59kg</link>
      <guid>https://dev.to/akinghill/start-using-prettier-the-right-way-59kg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;If you are like me, you have the Prettier extension installed, enabled formatting on save, got frustrated when your code kept jumping around on save, and disabled the extension. Unfortunately, it took me a long time to start using Prettier the way it is supposed to be used. The purpose of this post is to help you avoid the mistakes I made.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-prettier" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Prettier
&lt;/h2&gt;

&lt;p&gt;If you don't have Prettier installed, do so now.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Install Prettier&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the following file in the root of your project: &lt;code&gt;.prettierrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file will contain all of the rules we want Prettier to follow in this project.&lt;/p&gt;

&lt;p&gt;For those that want to have pretty code without knowing why, just paste the code in your new file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trailingComma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;es5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tabWidth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;semi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleQuote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsxSingleQuote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For those looking for an explanation for each line keep reading.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#explanations" class="anchor"&gt;
  &lt;/a&gt;
  Explanations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#trailing-commas" class="anchor"&gt;
  &lt;/a&gt;
  Trailing Commas
&lt;/h3&gt;

&lt;p&gt;Starting in es5 we are allowed to write trailing commas in JavaScript (note they are not allowed in JSON). I love this feature as it allows you do add properties right away to an object without having to look at the line above to see if you remembered to type a comma there. One character might not seems like it would make a difference, but trust me it does.&lt;/p&gt;

&lt;p&gt;Let's take a look at this option in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ "trailingComma": 2 }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// turns this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// into this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tab-width" class="anchor"&gt;
  &lt;/a&gt;
  Tab Width
&lt;/h3&gt;

&lt;p&gt;One of the simplest options to explain. Changed the width of the tab key from 4 (default) to 2 spaces. Code will look more compact and I think it's easier to read.  &lt;/p&gt;

&lt;p&gt;Option in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ "tabWidth": 2 }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// turns this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// into this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#semicolons" class="anchor"&gt;
  &lt;/a&gt;
  Semicolons
&lt;/h3&gt;

&lt;p&gt;One of the great things about JavaScript is &lt;a href="https://dev.to/promhize/what-you-need-to-know-about-javascripts-automatic-semi-colon-insertion-78a"&gt;Automatic Semicolon Insertion&lt;/a&gt;. It can also be a pain when you are working with a team where some people use semicolons and others don't. The semi option adds semis in when you format. Allowing everyone on the team to see where those implied semicolons actually are.&lt;/p&gt;

&lt;p&gt;Option in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ "semi": true }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// turns this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;// into this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#standardize-quotes" class="anchor"&gt;
  &lt;/a&gt;
  Standardize Quotes
&lt;/h3&gt;

&lt;p&gt;The last two options accomplish the same thing. The last one is just needed if you are writing jsx. These options will convert all double quotes to single quotes. If you need to use an apostrophe, just use the escape key and Prettier will format just that particular string to use double quotes.&lt;/p&gt;

&lt;p&gt;Option in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ "singleQuote": true }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// turns this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t try this at home.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// into this&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't try this at home.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Now that I'm actually starting to understand Prettier and how to use it for my specific workflow, it's becoming an invaluable tool, that has made me a more productive developer that writes cleaner code. &lt;/p&gt;

&lt;p&gt;Are there options I left out that you think are a must in any &lt;code&gt;.prettierrc&lt;/code&gt; file?&lt;br&gt;
Would you like to see more posts like this about Prettier of other coding tools? Let me know!&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A beginners guide to data streaming with Kafka, NodeJs and Socket.io</title>
      <author>yuvraj2112</author>
      <pubDate>Wed, 17 Feb 2021 18:34:42 +0000</pubDate>
      <link>https://dev.to/yuvraj2112/a-beginners-guide-to-data-streaming-with-kafka-nodejs-and-socket-io-4pn9</link>
      <guid>https://dev.to/yuvraj2112/a-beginners-guide-to-data-streaming-with-kafka-nodejs-and-socket-io-4pn9</guid>
      <description>&lt;p&gt;Through this small guide, my intention is to enable anyone to understand and begin their journey of working with Kafka in a few minutes.&lt;br&gt;
After following this guide and using the tools mentioned, which is not the only way to achieve the output, you should have a working example on your hands and the understanding to use more advanced concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqZBn0Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg8fojmzgl0i2u28xpgq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqZBn0Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg8fojmzgl0i2u28xpgq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We shall start by building the individual modules, step-by-step and integrate all of them in the end. So, let's get started!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-setting-up-kafka" class="anchor"&gt;
  &lt;/a&gt;
  1. Setting up Kafka
&lt;/h4&gt;

&lt;p&gt;This is where we set up Kafka in our system. So, head down to the official &lt;a href="https://kafka.apache.org/quickstart"&gt;Apache Kafka quick-start guide&lt;/a&gt;. Follow the steps till &lt;strong&gt;Step 3&lt;/strong&gt; and create a topic with any desired name. In my examples I have used the name &lt;strong&gt;&lt;em&gt;topic_stream&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-creating-a-kafka-consumer" class="anchor"&gt;
  &lt;/a&gt;
  2. Creating a Kafka Consumer
&lt;/h4&gt;

&lt;p&gt;Glad you are back! Let's now use the &lt;a href="https://www.npmjs.com/package/kafka-node#consumer"&gt;Kafka-node consumer&lt;/a&gt; to see how a consumer functions. A consumer simply reads messages from the Kafka topic.&lt;br&gt;
Below, we have created a Consumer that subscribes to &lt;code&gt;topic_stream&lt;/code&gt; and prints the data that is produced.&lt;br&gt;
I have setup the Kafka client on &lt;code&gt;port 9092&lt;/code&gt; in step 1. You should change the configuration according to your settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kafka-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KafkaClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:9092&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;topic_stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;autoCommit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty straightforward, right?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-creating-a-socket-api" class="anchor"&gt;
  &lt;/a&gt;
  3. Creating a Socket API
&lt;/h4&gt;

&lt;p&gt;Let's now setup a WebSocket API in our NodeJs service so we start streaming data to a webpage. We use &lt;a href="https://www.npmjs.com/package/socket.io"&gt;Socket.io&lt;/a&gt; in conjunction with &lt;a href="https://www.npmjs.com/package/express"&gt;express&lt;/a&gt;. In a file called &lt;code&gt;server_consumer.js&lt;/code&gt; create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Event triggered by client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Client disconnected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-creating-the-consumer-socket-api" class="anchor"&gt;
  &lt;/a&gt;
  4. Creating the Consumer, Socket API
&lt;/h4&gt;

&lt;p&gt;We now know what a consumer is and how we intend to use the Socket.io API. Let's bring it all together now. Edit the &lt;code&gt;server_consumer.js&lt;/code&gt; such that it now contains the Consumer as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kafka-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;kafka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KafkaClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:9092&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;topic_stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;autoCommit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Client disconnected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-creating-the-frontend-using-chart-js" class="anchor"&gt;
  &lt;/a&gt;
  5. Creating the frontend using Chart JS
&lt;/h4&gt;

&lt;p&gt;On our web browser, we will create a webpage that invokes the socket API and displays the data using Chart JS. You may use &lt;code&gt;D3.js&lt;/code&gt; or any other libraries that you are comfortable with to display the data.&lt;br&gt;
Let's create a simple &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src="https://cdn.socket.io/socket.io-3.0.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script type="text/javascript" src="index.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;canvas id="myChart" width='300' height='100'&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;index.js&lt;/code&gt;, we will make a call to our socket API and initiate listeners for data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$(document).ready(function(){
  const count = 10;
  const data = {
    labels : [...Array(count).keys()].map(i =&amp;gt; i.toString()),
    datasets : [
      {
        label: '# - Streamed number',
        backgroundColor: "rgba(50,220,220,0.5)",
        data : Array(count).fill(0),
      }
    ]
  }
  const updateData = function(newVal){
    const labels = data["labels"];
    const dataSetInitial = data["datasets"][0]["data"];
    count++;
    labels.push(count.toString());
    labels.shift();
    const newData = Math.floor(newVal);
    dataSetInitial.push(newData);
    dataSetInitial.shift();
  };
  const ctx = document.getElementById("myChart").getContext("2d");
  const chart = new Chart(ctx, {
    type: 'line',
    data,
    options: {animation : false}
  });

  function webSocketInvoke() {
    var socket = io('http://localhost:3000');
    socket.on('event', (value) =&amp;gt; {
      updateData(value);
      chart.update();
    });
  }
  webSocketInvoke();
 });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will now open the &lt;code&gt;index.html&lt;/code&gt; and wait for the data to stream through.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-producing-data" class="anchor"&gt;
  &lt;/a&gt;
  6: Producing data
&lt;/h4&gt;

&lt;p&gt;Let's get to the final step where we produce data that can then be streamed to our setup. I will mention with 2 options to do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow the instruction given in &lt;a href="https://kafka.apache.org/quickstart#quickstart_send"&gt;Step 4&lt;/a&gt; of the Kafka quick-start guide. That's it.&lt;/li&gt;
&lt;li&gt;If you would like to explore the kafka-node library further, you may experiment and create a &lt;code&gt;producer.js&lt;/code&gt; file and run it using your node environment; example file given &lt;a href="https://github.com/yuvraj2112/kafka_socket_stream/blob/master/producer.js"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it! You should now have a fully functional Apache Kafka stream at your hands and the understanding on how the end-to-end flow works.&lt;/p&gt;

&lt;p&gt;Github link for the project: &lt;a href="https://github.com/yuvraj2112/kafka_socket_stream"&gt;https://github.com/yuvraj2112/kafka_socket_stream&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Show off your VSCode Setup 👩🏻‍💻💯</title>
      <author>Sarthak Sharma</author>
      <pubDate>Wed, 17 Feb 2021 15:20:36 +0000</pubDate>
      <link>https://dev.to/xenoxdev/show-off-your-vscode-setup-5no</link>
      <guid>https://dev.to/xenoxdev/show-off-your-vscode-setup-5no</guid>
      <description>&lt;p&gt;If you are like me you also like changing your theme and font of VSCode frequently. I also love to find new themes and fonts. Here is mine.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ElYuSby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Eub7o6MVkAANI5R.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      𝙈𝙮 𝙑𝙎𝘾𝙤𝙙𝙚 𝙎𝙚𝙩𝙪𝙥 ✨💯&lt;br&gt;&lt;br&gt;𝗧𝗵𝗲𝗺𝗲: Cobalt2 🚀 by &lt;a href="https://twitter.com/wesbos"&gt;@wesbos&lt;/a&gt; &lt;br&gt;𝗙𝗼𝗻𝘁: Cascadia Code PL by &lt;a href="https://twitter.com/Microsoft"&gt;@Microsoft&lt;/a&gt; &lt;br&gt;𝗣𝗲𝗮𝗸𝗰𝗼𝗮𝗸 𝘁𝗵𝗲𝗺𝗲: &lt;a href="https://twitter.com/hashtag/Svelte"&gt;#Svelte&lt;/a&gt; Orange &lt;a href="https://twitter.com/John_Papa"&gt;@John_Papa&lt;/a&gt; &lt;br&gt;&lt;br&gt;What's your current setup?&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DevDiscuss"&gt;#DevDiscuss&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbie"&gt;#CodeNewbie&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:00 PM - 17 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1362054221336485888" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1362054221336485888" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1362054221336485888" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuDYHXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yicn0lu8at4og8e8zjem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuDYHXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yicn0lu8at4og8e8zjem.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;𝗧𝗵𝗲𝗺𝗲: Cobalt2 Rocket &lt;br&gt;
𝗙𝗼𝗻𝘁: Cascadia Code PL&lt;br&gt;
𝗣𝗲𝗮𝗸𝗰𝗼𝗮𝗸 𝘁𝗵𝗲𝗺𝗲: Svelte Orange &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Top 3 Plugins I ❤️&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode"&gt;Polacode&lt;/a&gt; : Carbon like Polaroid for your code &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus"&gt;Todo+&lt;/a&gt;: Manage todo lists with ease. Powerful, easy to use and customizable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So tell me what's your current VSCode theme and font look like? I'm Curious.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TDMbOHni02MZM8fTgS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TDMbOHni02MZM8fTgS/giphy.gif" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Ditch the dreaded &lt;div /&gt;. Semantic HTML elements we should use instead</title>
      <author>Kieran Roberts</author>
      <pubDate>Wed, 17 Feb 2021 15:20:00 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/ditch-the-dreaded-div-semantic-html-elements-we-should-use-instead-1k60</link>
      <guid>https://dev.to/kieran6roberts/ditch-the-dreaded-div-semantic-html-elements-we-should-use-instead-1k60</guid>
      <description>&lt;p&gt;First of all let's clear up the meaning of semantic HTML. The semantics of an entity describes what the purpose of it is. By using semantic HTML elements we are able to provide meaning to the structure of our code. If you think about the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag for a second ask yourself this: If you had never heard of this element before what would you think its purpose was? &lt;/p&gt;

&lt;p&gt;Difficult right?&lt;/p&gt;

&lt;p&gt;Imagine trying to build a new desk from one of those sets you can buy at a furniture store. It includes everything you need to construct it as well as an informational booklet with all the information related to the desk. Now imagine each page of the instruction booklet is missing a header. It makes finding the instruction page much more difficult as well as the list of contents in the box, the warranty policy and so on. You can still find them but you have to look very closely. &lt;/p&gt;

&lt;p&gt;The name &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; does not offer any information as to what role it might perform. Now think of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag or any heading tag for that matter. There should only ever be &lt;em&gt;one&lt;/em&gt; &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element on the page because this heading element has a role that describes the role it performs (as a heading).&lt;/p&gt;

&lt;p&gt;There are three primary advantages to using semantic HTML elements to you and the users of your site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search Engine Optimization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This refers to the way in which search engines such as Google interpret the content of your site and it affects where your site will come in search results. This means that neglecting semantic HTML could have a negative effect on how many users will find and interact with the site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using elements that better describe the role they perform make it easier for screen readers to inform users with disabilities about the content of your site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code readability and maintainability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using semantic HTML elements can help you with the maintaining and debugging of your code making it clear which part of the code you are looking at. This is especially important if you are working with other developers in the same codebase.&lt;/p&gt;

&lt;p&gt;There are many semantic elements we can use that which in principle do the same thing but offer the benefits outlined above. Now that we understand what a semantic element is and why they are important, let me show you some semantic elements that we can use to replace the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that you might still be using a little to often.   &lt;br&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ltarticlegt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This element is often used to wrap pieces of content where your code might contain multiples of them. An example of this is a blog post preview card or a blog post itself but really you could use it whenever you have a piece of content that has a heading to describe it and the content representative of the heading. Both include a header for the article and some content. You can also nest &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements inside each other.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article class="product"&amp;gt;
  &amp;lt;h2&amp;gt;
    Coffee
  &amp;lt;/h2&amp;gt;
  &amp;lt;article class="product-info&amp;gt;
    &amp;lt;h2&amp;gt;
      Product information
    &amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;
      Very delicious coffee!
    &amp;lt;/p&amp;gt;
  &amp;lt;/article&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltheadergt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;This element is typically useful for grouping elements that represent the header of an article or post together where at least one of the elements includes a heading element &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;. I have also used it in a landing page of a modern site that includes the main heading element &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and possibly some images, text, links or other introductory content.&lt;/p&gt;

&lt;p&gt;Although called a header element it is not necessary to use this element at the top of the page and can used in other sectional elements such as &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header class="blog-header"&amp;gt;
  &amp;lt;h2&amp;gt;
    Blog section header
  &amp;lt;/h2&amp;gt;
  &amp;lt;img src="blogimage.webp" alt="a nice descriptive alternative"&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h2&amp;gt;
      Article header
    &amp;lt;/h2&amp;gt;
    &amp;lt;a href="/somwhere"&amp;gt;
      Link
    &amp;lt;/a&amp;gt;
  &amp;lt;/header&amp;gt;
  ...
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltsectiongt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; there is often a better choice than the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element. Even so it is an improvement on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; when you need to section-off a piece of content that would not be suitable for a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; or similar elements (as long as it is not used for styling purposes). It should be a logical choice for wrapping a section of your web page that also requires a heading element. If you require an element wrapper for styling purposes it is better to stick to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="blog-articles"&amp;gt;
  &amp;lt;h2&amp;gt;
    Section header
  &amp;lt;/h2&amp;gt;
  ...any other content related to the section
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltnavgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;Use it to wrap the primary set of links that are used to navigate around your page indicating clearly to your screen reader users exactly where the main navigational links of your site are based. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav id="main-nav"&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="/"&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="/blog"&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltmaingt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element represents the dominant content of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will only ever have one &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element per page of a site that indicates to the user where the primary content of the page exists. This is the content that is left when you ignore secondary content that is repeated across other pages of the site such as the content enclosed in the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; and similar additional elements. &lt;/p&gt;

&lt;p&gt;It also has an important role for users requiring a screen reader to navigate your site because they are able to to instruct their browser to skip straight to the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element and the content it includes. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav id="main-nav"&amp;gt;
  &amp;lt;ul&amp;gt;
    ...navigational links
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;header id="landing"&amp;gt;
  &amp;lt;h1&amp;gt;
    ...Some descriptive page header
  &amp;lt;h1&amp;gt;
  &amp;lt;p&amp;gt;
    ...explanation
  &amp;lt;/p&amp;gt;
  &amp;lt;a href="/blog"&amp;gt;
    call to action for user
  &amp;lt;/a&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;h2&amp;gt;
    Welcome to the main content of the page
  &amp;lt;/h2&amp;gt;
  &amp;lt;article&amp;gt;
    &amp;lt;h3&amp;gt;
      Article title
    &amp;lt;/h3&amp;gt;
    ...
  &amp;lt;/article&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;footer&amp;gt;
  ...
&amp;lt;/footer
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltasidegt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Commonly it is used as the container for the mobile navigational links or any sidebar of content that can be opened by the user. This fits the definition of providing content that  is related to the documents main content but it is not required to understand the content. It could also be used in an article to provide a definition or a further explanation the relates to the content. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;h2&amp;gt;
    Article header
  &amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;
    I really enjoy writing JavaScript.
  &amp;lt;/p&amp;gt;
  &amp;lt;aside&amp;gt;
    JavaScript is a high-level dynamically typed programming language.
  &amp;lt;/aside&amp;gt;
  &amp;lt;p&amp;gt;
    I also really like semantic HTML.
  &amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;aside id="sidebar"&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="/"&amp;gt;
        Home
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href="/contact"&amp;gt;
        Contact
      &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/aside&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltdetailsgt-amp-ltsummarygt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;details&amp;gt; &amp;amp; &amp;lt;summary&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML Details Element (&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;) creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label can be provided using the &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; element.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These two elements are really useful when you require widget that can be toggled to an 'open' or 'close' state that reveals or hides some content. A typical use case for this is an faq (frequently asked questions) section of a website that allows the user to click on a question to reveal the answer.&lt;/p&gt;

&lt;p&gt;It uses no JavaScript meaning it will continue to function properly for your uses even if they have set their browser to ignore it making your site more accessible. The &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; tag contains the text that is always visible to the user while the &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag hold the information to display when the widget is in the 'open' state. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;details&amp;gt;
  &amp;lt;summary&amp;gt;
    Do you offer tours of the brewery?
  &amp;lt;/summary&amp;gt;
     Unfortunately at this time we do not offer tours of the brewery. We are currently building   our tap room so stay tuned.
&amp;lt;/details&amp;gt;
&amp;lt;details&amp;gt;
  &amp;lt;summary&amp;gt;
    Are your beers gluten free?
  &amp;lt;/summary&amp;gt;
     All of our beers are gluten free and vegan friendly!
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltfiguregt-amp-ltfigcaptiongt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;figure&amp;gt; &amp;amp; &amp;lt;figcaption&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; (Figure With Optional Caption) element represents self-contained content, potentially with an optional caption, which is specified using the (&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;) element. The figure, its caption, and its contents are referenced as a single unit.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Generally the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element encloses an image (although it is not required) and is usually accompanied by a &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; element that provides the caption for the element. You could also include other elements such as &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag that are relevant to the the figure.&lt;/p&gt;

&lt;p&gt;In my experience it is useful to include the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element when you include a piece of content such as an image, diagram or piece of code that relates to the content you are writing within some article or post. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;h2&amp;gt;
    Article header
  &amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;
    ...some introductory text
  &amp;lt;/p&amp;gt;
  &amp;lt;figure&amp;gt;
    &amp;lt;img src="post1.webp" alt="a nice descriptive alternative" /&amp;gt;
    &amp;lt;figcaption&amp;gt;
      Photo taken by Kieran Roberts
    &amp;lt;/figcaption&amp;gt;
  &amp;lt;/figure&amp;gt;
  &amp;lt;p&amp;gt;
    ..rest of the article
  &amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltblockquotegt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use the &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; when you want to inlcude text in your site that comes from another source. The &lt;code&gt;cite&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; element should be used to provide original source of the content. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;blockquote cite="link to the souce"&amp;gt;
  &amp;lt;p&amp;gt;
    This is an inspirational quote from another source
  &amp;lt;/p&amp;gt;
  &amp;lt;footer&amp;gt;
    Source author, &amp;lt;cite&amp;gt;content of the citation&amp;lt;/cite&amp;gt;
  &amp;lt;footer&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltabbrgtltabbrgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;abbr&amp;gt;...&amp;lt;/abbr&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML Abbreviation element (&lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation. If present, title must contain this full description and nothing else.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This element is nice for providing a simple but effective tooltip effect to acronyms you might have in your site. I have included this in my portfolio when describing web-development terms such JavaScript (js) and TypeScript (ts). The &lt;code&gt;title&lt;/code&gt; attribute provides the full description of the acronym when the users hover over the acronym. &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  I really enjoy working with&amp;lt;abbr title="JavaScript"&amp;gt; js &amp;lt;/abbr&amp;gt;but I am now beginning to learn &amp;lt;abbr title="TypeScript"&amp;gt; ts &amp;lt;/abbr&amp;gt;.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltfootergtltfootergt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;footer&amp;gt;...&amp;lt;/footer&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;Definition by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The HTML &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; element represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about the author of the section, copyright data or links to related documents.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Typically people include one &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; at the bottom of the document but we can also include a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; for each &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element as long as it does not have another &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element as a descendant. Inside the &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; you can include any kind of text, images or links related to the placement of the element.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;p&amp;gt;
    This is the end of the site
  &amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;h2&amp;gt;
    Article header
  &amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;
    Article content
  &amp;lt;/p&amp;gt;
  &amp;lt;footer&amp;gt;
    &amp;lt;p&amp;gt;
      Article footer
    &amp;lt;/p&amp;gt;
  &amp;lt;footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you have learned something about semantic HTML that you can take with you into future projects to make your markup more accessible for everyone that interacts with your site!&lt;/p&gt;

&lt;p&gt;You can follow me &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt; for more helpful tips as well as my own progress through web development.&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I Landed My First Tech Role: A Practical Guide</title>
      <author>Rita Correia</author>
      <pubDate>Wed, 17 Feb 2021 15:09:38 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/how-i-landed-my-first-tech-role-a-practical-guide-3f32</link>
      <guid>https://dev.to/ritaxcorreia/how-i-landed-my-first-tech-role-a-practical-guide-3f32</guid>
      <description>&lt;p&gt;As per my last post, I have recently landed my first role in tech (!) and since then I’ve had a few people asking me for tips and advice on how to make that happen too. So I thought of writing a blogpost to share my learnings, hoping it helps you in your job search. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-find-your-stack" class="anchor"&gt;
  &lt;/a&gt;
  1. Find your stack
&lt;/h2&gt;

&lt;p&gt;Although this is not directly tied to getting a role, it’s important to understand where your strengths lie before thinking about applying for jobs. In my case, I always knew I leaned more towards frontend engineering rather than backend.&lt;br&gt;
I carefully picked the tech stack I was going to specialise in and invested all my time learning certain languages and frameworks. Certainly there are people who disagree with me, but when you know exactly what you want for your career, it’s easier to set a clear, strategic path. Ultimately, do what feels right for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-the-job-search" class="anchor"&gt;
  &lt;/a&gt;
  2. The job search
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/"&gt;LinkedIn&lt;/a&gt; is my preferred job search tool. For the past 11 years all my jobs have come through LinkedIn, whether it’s directly applying to companies or getting leads from recruiters.&lt;br&gt;
You can set up job alerts based on your desired location and specific keywords, and get daily or weekly email alerts so you can apply straight away. Bear in mind this might not apply to other countries, where the use of LinkedIn isn’t common practice. In that case, try to find what’s the number one job board for the tech industry where you live.&lt;/p&gt;

&lt;p&gt;It’s also handy to keep a spreadsheet with the status of your job applications. Notion have a really good Job Applications template, if you’re looking into getting more organised.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-github-and-personal-portfolio" class="anchor"&gt;
  &lt;/a&gt;
  3. GitHub and personal portfolio
&lt;/h2&gt;

&lt;p&gt;You’ve likely been building your own projects to put into practice your coding skills. Make sure to have your code on &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; on public repositories. Your prospective employer can take a look at your code, what languages and frameworks you use and see how well structured your code is.&lt;/p&gt;

&lt;p&gt;When applying to jobs, it’s very important to have your own personal portfolio on top of your GitHub repos. See it as your own shopfront, showcasing the skills you have with a splash of your own personality. Choose a design style that reflects your character stands out. Ultimately, as well as featuring a collection of your best projects, your personal portfolio should be a reflection of you as an individual. This ties with my next point…&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-tell-your-story" class="anchor"&gt;
  &lt;/a&gt;
  4. Tell your story
&lt;/h2&gt;

&lt;p&gt; As well as technical skills, a company looks for culture fit. You’re a unique human being with an incredible life story. At the end of the day, we work with and for other people with personal interests and quirky facts. It’s what makes us &lt;em&gt;us&lt;/em&gt;. People buy into people, so make sure to craft your personal pitch. Sell it. Think of what makes you unique and how can that help your prospective company.&lt;br&gt;
My pal &lt;a href="https://twitter.com/AnnaJMcDougall"&gt;Anna&lt;/a&gt; recently put out this great video on how to craft your story:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nV6rXd_vtNY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-leverage-your-past-work-experience%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  5. Leverage your past work experience 
&lt;/h2&gt;

&lt;p&gt;This might not apply to everyone, but if you’ve held other jobs or come from a totally different industry and have a few years of experience under your belt, it’s smart to leverage the skills you’ve harnessed along the way.&lt;br&gt;
We’re multidisciplinary beings and there are a lot of transferrable skills. Have you led meetings? Do you have great people skills? Highlight your achievements to make you stand out.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-interviewing-as-a-software-engineer%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  6.  Interviewing as a software engineer 
&lt;/h2&gt;

&lt;p&gt;The interviewing process for a software engineering role is regarded as extremely difficult and it takes practice. The process can range from a take-home project with a designated tech stack, timed or non-timed kata-style challenges and technical interviews. I personally like the take-home project better because you can show off your skills and creativity without the pressure of a timed challenge. &lt;br&gt;
It’s likely that you’ll have a few interviews before landing your role. Learn from each one of them. See them as an opportunity to improve for the next one.&lt;br&gt;
Interviewing is definitely a skill that takes practice, and it can become emotionally overwhelming. Be kind to yourself, and remember that that "Yes" will come soon - it's only a matter of time.&lt;/p&gt;



&lt;p&gt;Good luck on your job search! I got my fingers crossed for you 🤞&lt;/p&gt;



&lt;p&gt;If you're interested in reading a more personal post sharing my journey, you can find it here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ritaxcorreia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5OL8dAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NWvMJSKJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/407623/c2f3e3d1-d1d8-4c68-8fd6-58275a106900.jpg" alt="ritaxcorreia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ritaxcorreia/changing-careers-into-tech-why-perseverance-and-mindset-matters-3g6j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Changing Careers Into Tech: Why Perseverance and Mindset Matter.&lt;/h2&gt;
      &lt;h3&gt;Rita Correia ・ Feb 12 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>career</category>
      <category>devjournal</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>How to GraphQL? A fair introduction to GraphQL</title>
      <author>Michael De Abreu</author>
      <pubDate>Wed, 17 Feb 2021 14:39:14 +0000</pubDate>
      <link>https://dev.to/michaeljota/how-to-graphql-a-fair-introduction-to-graphql-4865</link>
      <guid>https://dev.to/michaeljota/how-to-graphql-a-fair-introduction-to-graphql-4865</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I'm not an expert in GraphQL, and this introduction it's most likely to be for my-future-self.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, this weekend I spend it working on GraphQL, and I want to share my experience with it because it was hard for me to understand what was happening.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-graphql" class="anchor"&gt;
  &lt;/a&gt;
  What is GraphQL?
&lt;/h1&gt;

&lt;p&gt;GraphQL is a query language for APIs. This is prompted to be used as a substitute for RESTful, but I think you would be safe using those two together, as they probably won't interfere with each other.&lt;/p&gt;

&lt;p&gt;The main difference between REST and GraphQL is that in REST you request a specific resource, and in GraphQL you made a query with the resources you want. Think like SQL, but in a declarative way, and for the web.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-graphql-so-popular" class="anchor"&gt;
  &lt;/a&gt;
  Why is GraphQL so popular?
&lt;/h1&gt;

&lt;p&gt;I think is because it allows you to select the data you want to show, instead of making multiple requests for the same data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I started to play with this because my brother built a Pokedex-like app, and it is really confusing the number of requests you need to make in order to show all the information you need. There is a lot of data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#how-to-work-with-graphql" class="anchor"&gt;
  &lt;/a&gt;
  How to work with GraphQL?
&lt;/h1&gt;

&lt;p&gt;This is where I got lost. The official tutorial tries to teach you the definitions of things that you don't know what are. And it is really confusing, but I don't think it should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-with-your-schema" class="anchor"&gt;
  &lt;/a&gt;
  Start with your schema
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Schemas are the answer, when "What data is needed?" is the question.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A schema is the shape of the things that you'll be querying. Even the Query itself needs a schema to know what should it returns when you query for something, but we will return to that in a second. There are multiple tools to create and declare your schema. In the standard &lt;code&gt;.graphql&lt;/code&gt; file, the pokemon would be something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;base_experience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;is_default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;alternativeForms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you see, I define a Pokemon schema, with all the properties a Pokemon has. But also, I'm defining a Query schema. That schema is the one I will use to send my queries.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can notice that it's not a replacement for the PokeAPI, so sorry if that disappoints you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#user-defined-types" class="anchor"&gt;
  &lt;/a&gt;
  User defined types
&lt;/h3&gt;

&lt;p&gt;As you can see, in the example we are declaring a schema, named &lt;code&gt;Pokemon&lt;/code&gt;. GraphQL is a strictly typed query language, and user-defined schemas are used to check for the shape of the things the user can ask for as well as what the server should return.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, schemas are the what.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#rootlevel-schemas" class="anchor"&gt;
  &lt;/a&gt;
  Root-level schemas
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Root-level schemas are the answer when "How the data would be served?" Is the question.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In GraphQL, the Query schema is considered a top-level or root-level schema, along with Mutation and Subscription. Following the same example, we add two new schemas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;allPokemon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryPokemonBy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryPokemonBy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-type-query-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;type Query&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is the most important schema of all. This is the one that gets the first hit when GraphQL tries to understand your request. This is the root of all queries and the shape of things that you can ask in your request. &lt;/p&gt;

&lt;p&gt;In the example, we have a Query schema with two properties, &lt;code&gt;allPokemon&lt;/code&gt; and &lt;code&gt;pokemon&lt;/code&gt;. Those properties define how are we going to ask for the data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Query shows how are we going to ask for some data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#other-types" class="anchor"&gt;
  &lt;/a&gt;
  Other types
&lt;/h3&gt;

&lt;p&gt;There are other root type schemas, &lt;code&gt;Mutation&lt;/code&gt; and &lt;code&gt;Subscription&lt;/code&gt;. Mutations allow us to declare the schema of operators to C*UD in the API, and Subscriptions allow for a live Read operator, that can be updated from the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolvers" class="anchor"&gt;
  &lt;/a&gt;
  Resolvers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Resolvers are the answer, when "Where the data is coming from?" is the question&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe this was the most interesting/difficult thing to understand about GraphQL, but once you get it, it just clicks. This object that the GraphQL needs to understand where the data would come from. It may be tricky, but one thing that would help me to understand is that we are not defining this for request, but for schemas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;allPokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's the resolver for the Query schema. Each key of the resolvers object represents a defined schema, that holds an object, with properties being functions that would eventually return some data.&lt;/p&gt;

&lt;p&gt;But, the wonder about GraphQL is that we don't need to return all the needed data and can even return more data than we are declaring, and that data will be inaccessible. For the data that is missing, it will use resolvers for other schemas to fill them.&lt;/p&gt;

&lt;p&gt;Let's review again the primary schema of our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;base_experience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;is_default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;alternativeForms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Both &lt;code&gt;image&lt;/code&gt; and &lt;code&gt;alternativeForms&lt;/code&gt;, are not properties that are returned from our database. Instead, the database returns this shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pokemon {
  id,
  identifier,
  species_id,
  height,
  weight,
  base_experience,
  order,
  is_default,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that the database returns the property species_id, and we don't declare it in our shape, yet, we are able to use it inside our app. &lt;/p&gt;

</description>
      <category>graphql</category>
      <category>node</category>
      <category>apollo</category>
    </item>
    <item>
      <title>How to Generate a Secure Random Number in Node.js</title>
      <author>Kai</author>
      <pubDate>Wed, 17 Feb 2021 14:31:45 +0000</pubDate>
      <link>https://dev.to/kais_blog/how-to-generate-a-secure-random-number-in-node-js-16io</link>
      <guid>https://dev.to/kais_blog/how-to-generate-a-secure-random-number-in-node-js-16io</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/how-to-generate-a-secure-random-number-in-nodejs"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;




&lt;p&gt;While you are working on your JavaScript apps, the moment will come when you need a secure random number. Generating it has been quite tricky in the past. Some people use &lt;code&gt;Math.random&lt;/code&gt; whenever the need for a random number arises. Please don't do this if there is any chance for an attacker.&lt;/p&gt;

&lt;p&gt;If you are generating random numbers for security reasons (e.g. verification codes), you should use a cryptographically secure random number. Fortunately, the &lt;code&gt;crypto&lt;/code&gt; module has been extended in recent Node.js versions. So, now there's an easy way to do it in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js (v14.10.0+ / v12.19.0+)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#generate-a-secure-random-number-between-raw-min-endraw-and-raw-max-endraw-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Generate a Secure Random Number Between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; in JavaScript
&lt;/h2&gt;

&lt;p&gt;Without further ado, let's generate our secure random number. First, import the &lt;code&gt;crypto&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, you have access to the &lt;code&gt;randomInt&lt;/code&gt; function. &lt;code&gt;randomInt&lt;/code&gt; takes up to three arguments.&lt;/p&gt;

&lt;p&gt;Probably, you want to generate a random number in a given range. Therefore, you can specify the minimum (&lt;code&gt;min&lt;/code&gt;) and maximum (&lt;code&gt;max&lt;/code&gt;). Note that the minimum is &lt;em&gt;inclusive&lt;/em&gt; and the maximum is &lt;em&gt;exclusive&lt;/em&gt;. So, if you want to generate a number between 0 and 999,999 you'll have to pass &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1000000&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Synchronous&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The third argument is optional. You can provide a &lt;code&gt;callback&lt;/code&gt; function. Then, the random integer is generated asynchronously:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Asynchronous&lt;/span&gt;
&lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Good! Now, &lt;code&gt;n&lt;/code&gt; is a secure random integer between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;999999&lt;/code&gt;. For example, this could be used as a 6-digit verification code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verificationCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The changes in recent Node.js versions made generating secure random numbers easy. So, if you are generating random numbers to use as verification codes or for a secure random shuffle, you now know how to do it.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/how-to-generate-a-secure-random-number-in-nodejs"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>security</category>
    </item>
    <item>
      <title>How I Switched from PHP to Ruby</title>
      <author>David Morales</author>
      <pubDate>Wed, 17 Feb 2021 14:26:54 +0000</pubDate>
      <link>https://dev.to/davidmles/how-i-switched-from-php-to-ruby-2j9b</link>
      <guid>https://dev.to/davidmles/how-i-switched-from-php-to-ruby-2j9b</guid>
      <description>&lt;p&gt;I remember starting to use PHP in 1998, when I began browsing the web at home. It’s been quite a long time ago, it was like magic added on top of HTML, or maybe in the background 🙂&lt;/p&gt;

&lt;p&gt;PHP was really thought to live in the web environment, and as such, it has plenty of helpers and ways to make that task easy. You can include partials and compose a modular website in less than 5 minutes. It was so easy that a huge community was born, growing to be one of the biggest nowadays in the web development field.&lt;/p&gt;

&lt;p&gt;I sticked with plain PHP until 2008, when I faced an old project which I needed to rebuild in a modular way. Why should I invent a new way to modularize it? There were some frameworks on the market, so I chose the most complete I could find: Symfony. It had a steep learning curve, but once I got used to it, it felt natural to me.&lt;/p&gt;

&lt;p&gt;I was happy to migrate to Symfony2 when it came out in 2011. It was rewritten from scratch changing the philosophy: it changed the magic for explicit commands. I had the feeling that it migrated its inspiration from Ruby on Rails to Django, maybe because Fabien Potencier loves Python.&lt;/p&gt;

&lt;p&gt;So, another steep learning curve. This time, while many things felt better, other seemed unnecessarily complex. I had the sensation that the framework forced to follow design patterns to do simple things. That was a wall that was constantly on my way. I was thinking more about the tool rather than the app I was building.&lt;/p&gt;

&lt;p&gt;One day I decided to look for some alternative, and since I was tired of PHP, I wanted to look for a different language. When I was in University, I learned Ruby in an elective course. Why not taking a look at Ruby on Rails? It was used by Twitter, so it had to be a good tool.&lt;/p&gt;

&lt;p&gt;I was impressed with all the resources and the community that I found. There were tons of free tutorials, screencasts and the best of all: gems. In my opinion, the most negative thing PHP and its frameworks had was the poor support for plugins. Many of them were out of date, incomplete, or very basic. Ruby on Rails had tons of well supported mature plugins (called gems). They are hosted in &lt;a href="https://rubygems.org"&gt;Rubygems&lt;/a&gt;, but I find &lt;a href="https://www.ruby-toolbox.com/"&gt;The Ruby Toolbox&lt;/a&gt; to have a better categorization. Whatever you need for your project, it’s probably already developed in a gem. And to manage the versioning of all these gems easily, you can use &lt;a href="https://bundler.io"&gt;Bundler&lt;/a&gt;. I was understanding where did &lt;a href="https://getcomposer.org"&gt;Composer&lt;/a&gt; come from. It’s amazing how fast you can build your application thanks to this huge help from the community. So it was an easy decision for me to switch to Ruby on Rails.&lt;/p&gt;

&lt;p&gt;But since everything changes, I wanted to learn as fast as I could. I started to overview the official guide, and when I finished I started to follow the fantastic &lt;a href="https://www.railstutorial.org/book"&gt;Ruby on Rails tutorial&lt;/a&gt;, which teaches to build a Twitter clone.&lt;/p&gt;

&lt;p&gt;When using PHP, I tried to test my applications mainly with PHPUnit, but I felt so alone when I was having problems. Nobody here was testing PHP applications, in any company I was (and I worked in many). It was totally different with Ruby, because almost everyone tests applications. Better or worse, but they do. So many resources are available, and of course a bunch of good tools. Even Ruby itself has a built-in testing framework supporting unit testing, specs, mocks and even benchmarks. Impressive and very convenient.&lt;/p&gt;

&lt;p&gt;My next steps were very pleasant when I found Code School (it doesn’t exist anymore) and &lt;a href="http://railscasts.com"&gt;Railscasts&lt;/a&gt; (abandoned). The first one offered learning while practicing in the browser, while the second one offered very practical and to-the-point screencasts about almost anything you could need.&lt;/p&gt;

&lt;p&gt;This was my refreshing switch to Ruby. How was yours? 🙂&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>ruby</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
