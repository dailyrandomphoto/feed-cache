<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Online Food Ordering System in 2022 </title>
      <author>Idea2App</author>
      <pubDate>Sat, 11 Dec 2021 07:35:35 +0000</pubDate>
      <link>https://dev.to/idea_2app_dev/best-online-food-ordering-system-in-2022-4fl8</link>
      <guid>https://dev.to/idea_2app_dev/best-online-food-ordering-system-in-2022-4fl8</guid>
      <description>&lt;p&gt;If you plan to open a restaurant or might be a grocery store in the next couple of years, or are already running a business, your first concern should be ensuring that your customers can conveniently place an order.&lt;/p&gt;

&lt;p&gt;Online food ordering systems have significantly changed the way people eat out, and this trend is not going to slow down anytime soon. As indicated by a new report distributed by Statista, online food delivery experienced the biggest development among all areas in the business, with over $58 million in market volume in 2019. In comparison, traditional restaurants saw only $8 million growth.&lt;/p&gt;

&lt;p&gt;The online food ordering systems industry is expected to grow from USD 111. The industry has already reached a market value of $58M in 2019. In 2021 an annual growth rate of 4.3% that is USD 28.48 billion, was seen. &lt;/p&gt;

&lt;p&gt;Txtng Inc., an online food ordering system development company, announced that they had received $20M in funding in order to expand their services and hire more employees. According to an article published on techcrunch.com, Daniel May, CEO of Txtng Inc, stated that "the recent funding will be used to develop new features and applications."&lt;/p&gt;

&lt;p&gt;The company's current roster includes clients such as McDonald's and Chipotle Mexican Grill. They have developed 300 apps across multiple industries, including food, entertainment and travel.&lt;br&gt;
Here are the Best 3 Online Ordering Systems for Restaurants&lt;/p&gt;

&lt;p&gt;1 MenuDrive&lt;/p&gt;

&lt;p&gt;MenuDrive is the first online POS and online ordering system that allows restaurants to customise their ordering experience by creating a branded online ordering system. This can be done by sending custom content to the system, such as product photos, menu items, and more. Moreover, your restaurant staff will no longer have to worry about taking time out of their day to take orders for customers; instead, they can focus on other tasks in the restaurant. Instead of just receiving orders on paper from customers, now all orders are transmitted online so that you can view records in real-time.&lt;/p&gt;

&lt;p&gt;Some of our customers love this because it streamlines their business workflow. This is especially beneficial if your staff is busy with other duties like running the front of house or kitchen.&lt;br&gt;
MenuDrive's sister company MenuDash also offers a similar service.&lt;/p&gt;

&lt;p&gt;2 Toast POS&lt;/p&gt;

&lt;p&gt;Toast POS is an ideal restaurant point-of-sale system for growing businesses. The program was designed to be easy for all types of restaurateurs, from chain restaurants to local eateries. Toast POS comes with features such as an easy-to-use interface that makes it simple for staff members to learn how to use the system and take orders, a Web dashboard that allows owners to see real-time data on their business and make adjustments, and a mobile app that enables servers to take orders away from the point of sale so they can focus on delivering food and drinks.&lt;/p&gt;

&lt;p&gt;Toast can integrate with existing restaurant equipment and connect to payment processors or cash drawers through either wired or wireless connections. The system is compatible with iOS and Android devices, making it possible for customers to place orders on their smartphones. Moreover, Toast POS Software is an integrated restaurant management system that operates as a point of sale system. The program also allows for online ordering, gift card and rewards programs and inventory management.&lt;/p&gt;

&lt;p&gt;3 Upserve&lt;/p&gt;

&lt;p&gt;Upserve renders an end-to-end restaurant management system. The respective system includes options for bars, coffee shops, wineries, and bakeries. Moreover, the Upserve system goes well with its own POS system, mobile app, as well as the payment system. Upserve is convenient and accessible, also 24X7 U.S.-based assistance is rendered. &lt;/p&gt;

&lt;p&gt;Upserve is a kind of food ordering system that allows the restaurant’s customers to pay the bill from their tables. Besides, it also offers detailed analytical reports and data-driven reports about the restaurant’s performance. &lt;/p&gt;

&lt;p&gt;Besides, the Upserve POS system has successfully set itself distinguished from other generic POS systems. Likewise, the restaurants, cafes, bars, bakeries, or wineries can opt to see the information on sales, customer discounts, labour costs, expenditures, and many more.  Besides, the respective software is a cloud-based one and works well on iOS, Android, as well as the Hybrid devices. &lt;/p&gt;

&lt;p&gt;Grocery Delivery Software&lt;/p&gt;

&lt;p&gt;In the past few years, there has been a lot of hype around "software as a service," or SaaS. It's hard to go to a tech conference these days without hearing about the triumph of this business model over the old-fashioned way of selling software: shrink-wrap CDs and upgrades every few years. It seems almost like a done deal; if you're not in SaaS, then you're living in the past. We started out with this model, but pretty quickly realised that it wasn't right for us. We still think there are huge advantages to running your own software, and we're proud to be part of a movement that's bringing more self-hosted software into the world. We hope that by setting down some of our experiences and observations from this transition, we can help other people who are thinking about doing something similar.&lt;/p&gt;

&lt;p&gt;Top 10 Grocery Delivery App Builder APIs&lt;/p&gt;

&lt;p&gt;Let us discuss the top 10 &lt;a href="https://www.idea2app.dev/grocer-app-development.html"&gt;grocery delivery app builder&lt;/a&gt;&lt;br&gt;
 APIs&lt;/p&gt;

&lt;p&gt;1 SHOP.COM API&lt;br&gt;
2 Spoonacular Food API&lt;br&gt;
3 Kroger API&lt;br&gt;
4 BigOven Recipe API&lt;br&gt;
5 Paprika API&lt;br&gt;
6 Grocery Bear API&lt;br&gt;
7 Whisk Graph API&lt;br&gt;
8 Information Machine API&lt;br&gt;
9 midíadía API&lt;br&gt;
10 Preisente Merchant MyShop API&lt;br&gt;
11 Edamam Food and Grocery Database&lt;br&gt;
12 Recipes to Grocery Store&lt;br&gt;
13 Routific&lt;br&gt;
14 Super App&lt;br&gt;
15 Search Grocery Product Reviews by Barcode&lt;br&gt;
16 Tasty API&lt;br&gt;
17 Nutrionix API&lt;br&gt;
18 Halla&lt;br&gt;
19 Fotex App&lt;br&gt;
20 Bilka App&lt;br&gt;
21 BaglQ&lt;br&gt;
22 Netto Mobile App&lt;br&gt;
23 Pushpins&lt;/p&gt;

&lt;p&gt;The above-mentioned pointers are the list of APIs but just having access to API isn’t enough; youneed to hire a professional app builder in order to develop a grocery delivery app. Either hire an in-house team, a local agency, freelancers or opt to outsource the developing team, the choice is yours.  &lt;/p&gt;

&lt;p&gt;Things to Consider While Planning for &lt;a href="https://www.idea2app.dev/food-delivery-app-development.html"&gt;Food Ordering App Development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The requirements for android and iOS food ordering app development are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The app must be able to accept and store orders from customers through the mobile interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The app must have a feature that allows the customer to see what the menu is and what items are available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There must be a way for customers to view pictures of the food on offer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers should be able to place an order, make changes to an order, and then check out, paying for their order via credit card or Paypal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deliveries should be able to be made using whichever delivery service is most convenient, including the customer's own vehicle.&lt;br&gt;
There are some differences between ordering food and ordering a car, though.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A big one is that if your customer uses the food ordering app, then he or she won't need directions to the restaurant. That's because the restaurants will come to them. The only exception would be for people who live in high-rises or other places that don't allow vehicles to pick up customers at their doorsteps.&lt;br&gt;
The other difference is that customers might not need cash or credit cards to pay for their food. Many restaurants accept payment through the app, so there would be no need to dig into a customer’s pocket for a wallet if they don't want to.&lt;/p&gt;

&lt;p&gt;The menu items available through the food ordering app will vary from city to city and even from restaurant to restaurant. But it will probably be easier to find something on the menu than it is when you order a car through the vehicle rental site because the cab driver doesn't have much control over what kind of fare he'll get or what kind of passengers he'll pick up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Plan Building a Food Delivery App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow the below-mentioned steps if you are planning to build a food delivery app:&lt;/p&gt;

&lt;p&gt;1 Before starting to frame your strategies, conduct an in-depth market analysis to check on the revenues generated and the ROI.&lt;/p&gt;

&lt;p&gt;2 Check on the latest marketing trends- Social media integration, virtual assistant, and link with smartwatch&lt;/p&gt;

&lt;p&gt;3 Select the food delivery model- aggregator model or logistic/delivery service model.&lt;/p&gt;

&lt;p&gt;4 Think upon the revenue model- delivery charges, surge pricing, revenue sharing, promotional and advertising services, and daily deals. &lt;/p&gt;

&lt;p&gt;5 Select the features- registrations, payment gateway, profile management, analytics, storage, direction-finding, user location, easy search options, ratings and reviews, rewards, and push notifications.&lt;/p&gt;

&lt;p&gt;6 Decide the versions- admin app, customers app, delivery valets app.&lt;/p&gt;

&lt;p&gt;7 Select the technological stack- Autho, Google Places API, Braintree, Stripe, and Routific&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Builder, A Great Career Prospect&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to get rich as a &lt;a href="https://www.idea2app.dev/"&gt;software builder&lt;/a&gt;, almost certainly the best way is to start or join a startup company. The reason is that big company are great for making money, but not so good for making wealth. You can get rich by joining a big company, but it is unlikely that you will ever be among the top few per cent of the wealth holders. For example, suppose you got hired today at Apple Computer. You will probably do well there. Your salary will be high and will probably go up over time. But it is unlikely that your stock options will turn out to be worth anything to speak of.&lt;br&gt;
Is Opting Restaurant App Builder Really Worth of it?&lt;/p&gt;

&lt;p&gt;When it comes to your restaurant delivery builder, you have a lot of choices. What can be confusing is deciding which one of the restaurant app builders is best for you and your business. However, the key to making the right decision lies in understanding what your overall purpose is in adopting this type of technology.&lt;/p&gt;

&lt;p&gt;Truly, the goal of creating an online ordering system for your restaurant is to create an enjoyable online experience for your customers so they will continue to purchase and be loyal to your brand. The reason for doing this should always be about improving customer satisfaction and not just about saving money on labour or other expenses.&lt;/p&gt;

&lt;p&gt;As a suggestion, before making a final decision on any particular ordering system, it is important to consider how these systems are typically rated by customers. Many times customers will complain about poor service even when a company has done everything possible to ensure that their customers are getting exactly what they order. If you have time, visit some websites that rate interactive ordering systems to get an idea of what customers are saying.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>react</category>
    </item>
    <item>
      <title>Advent of code Day 11</title>
      <author>Marco Servetto</author>
      <pubDate>Sat, 11 Dec 2021 07:02:26 +0000</pubDate>
      <link>https://dev.to/marcoservetto/advent-of-code-day-11-4o23</link>
      <guid>https://dev.to/marcoservetto/advent-of-code-day-11-4o23</guid>
      <description>&lt;p&gt;This was a nice puzzle, I appreciate the short input, so that I can simply cut-pasting into a multiline string.&lt;br&gt;
Thanks to this experience I'm getting more and more feedback on what I should add to AdamsTowel. See after the code for details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reuse [L42.is/AdamsTowel]
Split={class method S.List (S that)=\()(
  for c in that.replace(S"" with=S",").split(S",")\add(c)
  )}
Matrix=Collection.matrix(I.List,row=10I,col=10I)
Coords = Collection.list(Matrix.Coord)
Near={class method Coords (Matrix.Coord that) = Coords()(
  for r in Range(I"-1" to=2I)
    for c in Range(I"-1" to=2I)
      if r!=0I || c!=0I (
        new = that.with(row=\row+r).with(col=\col+c)
        catch error Any _ void
        \add(new)
        )
  )}
Step={
  class method I (mut Matrix that)=(
    for var v in that ( v+=1I )
    \flashes(m=that)
    )
  class method I flashes(mut Matrix m) = {
    flashes=Match.Count()(
      for c in m.coords() var v in m if v&amp;gt;9I (
        \add(\.true())
        v:=0I
        for n in Near(c) (
          vi = m.val(n) 
          if vi!=0I m.set(n val=vi+1I)
          )
        ))
    if flashes==0I return 0I
    return flashes+\flashes(m=m)
    }
  }
Main11=(
  input=S"""
    |3113284886
    |2851876144
    |2774664484
    |6715112578
    |7146272153
    |6256656367
    |3148666245
    |3857446528
    |7322422833
    |8152175168
  """
  m1=Matrix(\()(for l in input.split(S.nl())
    for s in Split(l) \add(I(string=s))))
  var tot = 0I
  for i in Range(100I) ( tot+=Step(m1) )
  Debug(tot)//1705  
  m2=Matrix(\()(for l in input.split(S.nl())
    for s in Split(l) \add(I(string=s))))
  for i in Range.unbounded() if Step(m2)==100I (
    Debug(i+1I)//of course the puzzle wants it
    Break()//starting from one, so 265 not 264 :-/
    )
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Splitting on all characters seams to be very common, so I should add it to my spliterators.
for example we could have
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;m1=Matrix(\()(for l in input.split(S.nl())
    for s in l.split() \add(I(string=s))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Near elements of matrixes are quite a common feature too,
ideally I would like to allow either:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (coord,val) in myCoord.near8(map) ( .. ) //or near4()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for coord in myCoord.near8() val in map.near8(myCoord) ( .. )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What would be better? the first one requires boxing objects, the second requires two iterations and thus double checks for what coordinates actually are in the range.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should I change Match.Count to offer \addOne,\addIf(Bool that) \add(I that) and may be other operations like \times and \divide ? 
If so, that would remove the need to make an Accumulator for I... but what about Num and Math.Long? or even Math.Double??
That is, do we want to write
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;res=Double.Count()( for v in list (\add(v) \times(2\) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;res=Match.CountDouble()( for v in list (\add(v) \times(2\) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>adventofcode</category>
      <category>adventofcode2021</category>
      <category>programming</category>
      <category>42</category>
    </item>
    <item>
      <title>10 Python Tips &amp; Tricks that no One Teaches</title>
      <author>Ani</author>
      <pubDate>Sat, 11 Dec 2021 06:47:35 +0000</pubDate>
      <link>https://dev.to/anisla/10-python-tips-tricks-that-no-one-teaches-12k5</link>
      <guid>https://dev.to/anisla/10-python-tips-tricks-that-no-one-teaches-12k5</guid>
      <description>&lt;p&gt;Python is one of the most preferred languages out there. Its brevity and high readability makes it so popular among all programmers.&lt;br&gt;So here are few of the tips and tricks you can use to bring up your Python programming game. &lt;/p&gt;

&lt;p&gt;Read More: &lt;strong&gt;&lt;a href="https://www.codelivly.com/10-python-tips-tricks-that-no-one-teaches/" rel="noreferrer noopener"&gt;10 Python Tips &amp;amp; Tricks that no One Teaches&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Planning for last release</title>
      <author>Hung Nguyen</author>
      <pubDate>Sat, 11 Dec 2021 06:05:08 +0000</pubDate>
      <link>https://dev.to/nguyenhung15913/planning-for-last-release-2kld</link>
      <guid>https://dev.to/nguyenhung15913/planning-for-last-release-2kld</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  overview
&lt;/h1&gt;

&lt;p&gt;In this release I will choose to add a new feature to a current project. The first thing came up in my mind was finding an issue that would require me to create a new component or a page. I went to Github and spent nearly 1 hour to find one. At the moment, I have chose 2 issues to work on. They they were both interesting&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#telescope"&gt;
  &lt;/a&gt;
  Telescope
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2550"&gt;Issue-2550&lt;/a&gt;&lt;br&gt;
The prop named &lt;code&gt;justify&lt;/code&gt; was deprecated, so I what I would do was replacing all of them with &lt;code&gt;justifyContent&lt;/code&gt; instead.&lt;br&gt;
I already created a pull request to Telescope so I had everything set up for the project. This will not really complicated for me, but who knows what is going to happen because there might be bugs or at the time I am dealing with the issue, there may be someone's PR gets merged and there will be conflict.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code-peak"&gt;
  &lt;/a&gt;
  Code Peak
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/VishalIITP/CodepeakSuperDuper/issues/13"&gt;Issue-13&lt;/a&gt;&lt;br&gt;
This one was more interesting since I would be adding a new design for the website, the leaderboard. Because the website had a lot of pages that were already designed, finding and making a new appearance for the leaderboard page will be challenging. Everything needs to match together. What I would do is going to the internet to find some template to get inspired. And also this is the first time I have seen this project so it might take me sometimes to get used to the code and have everything set up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-thought"&gt;
  &lt;/a&gt;
  Last thought
&lt;/h1&gt;

&lt;p&gt;I am ready for the challenge. It seems challenging and will take time but I am excited to get into work.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build the deployment system around GitHub deployment API</title>
      <author>Noah Lee</author>
      <pubDate>Sat, 11 Dec 2021 05:55:55 +0000</pubDate>
      <link>https://dev.to/hanjunlee/build-the-deployment-system-around-github-deployment-api-2kjh</link>
      <guid>https://dev.to/hanjunlee/build-the-deployment-system-around-github-deployment-api-2kjh</guid>
      <description>&lt;p&gt;I've been working as a DevOps engineer for the last three years and built the deployment system around GitHub deployment API. In this article, I'll explain the deployment API for those of you who want to build the deployment system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-deployment-api"&gt;
  &lt;/a&gt;
  GitHub Deployment API
&lt;/h2&gt;

&lt;p&gt;GitHub provides the &lt;a href="https://docs.github.com/en/rest/reference/repos#deployments"&gt;deployment API&lt;/a&gt; &lt;strong&gt;to trigger deploying a specific ref (branch, SHA, tag) and dispatches the deployment event&lt;/strong&gt;. The workflow seems relatively straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request to deploy a specific ref with a payload, and GitHub dispatches the deployment event.&lt;/li&gt;
&lt;li&gt;A system such as GitHub Action or Jenkins listens for the event and runs the actual deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn1mkXx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tcpxw5p5cp5vjdtaru6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn1mkXx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tcpxw5p5cp5vjdtaru6.png" alt="Image description" width="880" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to deploy the specific branch to the &lt;code&gt;dev&lt;/code&gt; environment, you can do it by the API call below. Then GitHub dispatches the deployment event to your tools. The &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment"&gt;deployment event&lt;/a&gt; has information that your tools can deploy, such as the commit SHA, environment, and payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--request&lt;/span&gt; POST &lt;span class="s1"&gt;'https://api.github.com/repos/{OWNER}/{REPO}/deployments'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s1"&gt;'Authorization: Bearer {TOKEN}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--data-raw&lt;/span&gt; &lt;span class="s1"&gt;'{
    "ref": "{BRANCH}",
    "environment": "dev"
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For details, the deployment API provides various parameters to verify a deployment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ref&lt;/code&gt; parameter specifies branch, tag, or SHA. Many teams often deploy branches and verify them before merging a pull request.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;environment&lt;/code&gt; parameter allows specifying a runtime environment. Teams often have multiple environments for verifying, such as &lt;code&gt;production&lt;/code&gt; or &lt;code&gt;qa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;auto_merge&lt;/code&gt; parameter is used to ensure that the requested ref is not behind the repository's main branch. The default value is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;required_contexts&lt;/code&gt; parameter allows you to specify a subset of commit status that must be &lt;code&gt;success&lt;/code&gt;. By default, every status must be in a &lt;code&gt;success&lt;/code&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gitploy"&gt;
  &lt;/a&gt;
  What is Gitploy?
&lt;/h2&gt;

&lt;p&gt;GitHub provides a beautiful deployment API. But it is not easy to build a new deployment system around the deployment API, especially for a small team (or organization) it doesn't have enough resources to build.  If you find the tooling to fill these gaps, &lt;a href="https://github.com/gitploy-io/gitploy"&gt;Gitploy&lt;/a&gt; can be one of the options. Gitploy provides a straightforward UI and great features for deployment such as rollback, review, lock.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOeo5i0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u35io7jhofmt2wfsml7l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOeo5i0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u35io7jhofmt2wfsml7l.gif" alt="Image description" width="600" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading, and leave me comments on what do you think!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>deployment</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Progress Report </title>
      <author>Emily</author>
      <pubDate>Sat, 11 Dec 2021 05:52:02 +0000</pubDate>
      <link>https://dev.to/hphan9/progress-43na</link>
      <guid>https://dev.to/hphan9/progress-43na</guid>
      <description>&lt;h2&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h2&gt;

&lt;p&gt;Until now, my first &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2520"&gt;PR&lt;/a&gt; for adding route &lt;code&gt;\feeds\invalid&lt;/code&gt; to Posts service merged, and I also sent another &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2575"&gt;PR&lt;/a&gt; for the issue &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2413"&gt;#2413&lt;/a&gt;. So everything is going well, and I have not had any significant challenges working on these issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding"&gt;
  &lt;/a&gt;
  Finding
&lt;/h2&gt;

&lt;p&gt;The hardest part for implementing the route &lt;code&gt;\feeds\delayed&lt;/code&gt; for Posts service is testing my code. When microservices finished downloading feeds and processing them, I checked the Redis server to find the delayed one. And I found nothing. After asking a question on Telescope's Slack channel, I got an answer from prof. David that this case is not usual. The reason is a feed is marked delayed only when the processor receives an &lt;code&gt;HTTP 429&lt;/code&gt; response ("the user has sent too many requests in a given amount of time ("rate limiting")"). This issue made it hard to test my new functions against the real-time database.&lt;br&gt;
The workaround is implementing an integration test to create delayed feeds on the fly. Surprisingly, those feeds does not have the time to live when I used &lt;code&gt;ttl&lt;/code&gt; command. I found that the &lt;code&gt;setDelayedFeeds()&lt;/code&gt; function did not set the expire time for the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// old code&lt;/span&gt;
&lt;span class="nx"&gt;setDelayedFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createDelayedFeedKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="c1"&gt;// new code&lt;/span&gt;
&lt;span class="nx"&gt;setDelayedFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createDelayedFeedKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;EX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#takeaway"&gt;
  &lt;/a&gt;
  Take-away
&lt;/h2&gt;

&lt;p&gt;The biggest take-away for me this time is learning about Redis commands and &lt;a href="https://nodejs.org/api/stream.html"&gt;Readable stream&lt;/a&gt; in NodeJs. &lt;br&gt;
Stream is the core concept in NodeJs, and it is often used when we need to work with a large amount of data.&lt;br&gt;
When calling the &lt;code&gt;scanStream()&lt;/code&gt; method on a Redis client, I actually created an object of readable stream.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scanstream : Convenient class to convert the process of scaning keys to a readable stream&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFeedKeysUsingScanStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchPattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scanStream&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;matchPattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;//create a readable stream object &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error while scanning redis keys&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error while scanning redis keys&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A stream object has many events: 'closed', 'data', 'end', 'error', etc. Because the stream processes data chunk by chunk, we need to wrap it inside a Promise and only &lt;em&gt;resolve&lt;/em&gt; when there is no more data to consume _ &lt;strong&gt;the end event&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the end, I was able to make the route work, and I am happy with the progress.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>stream</category>
    </item>
    <item>
      <title>Integrations, Integrations &amp; Integrations using Chatwoot!</title>
      <author>Sankalp Swami</author>
      <pubDate>Sat, 11 Dec 2021 05:40:00 +0000</pubDate>
      <link>https://dev.to/aviyel/integrations-integrations-integrations-using-chatwoot-5pk</link>
      <guid>https://dev.to/aviyel/integrations-integrations-integrations-using-chatwoot-5pk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kNQ9Uhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639051895415-event-announcement-5-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kNQ9Uhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639051895415-event-announcement-5-resized.png" alt="chatbot, facebook integrations, instagram integrations" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
Working with a large customer base is troublesome if you have not structured all of your social media channels in a well-organized way. Aviyel comes with another special event where you will learn how one can integrate all of their social media channels into a self-hosted customer engagement platform with the help of &lt;a href="https://aviyel.com/projects/6/chatwoot"&gt;Chatwoot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Customer satisfaction is as important as a Product of a company. Delighting your customers and meeting their expectations is a tough task. This is where Chatwoot comes into the picture. Chatwoot is a super tool for building endless relations with customers. You can integrate all of your social media handles in one place to make it more organized than ever. Join this event to learn the various rich features of Chatwoot.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will learn how to send one-time messages like promotions, greetings to users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will learn how to integrate chatwoot with the messaging tools you have already been using.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will learn how to respond to customers from various social media with cool keyboard shortcuts in just one dashboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mohmed Ishak is coming live where he will help your customer engagement by integrating various tools into &lt;a href="https://aviyel.com/projects/6/chatwoot"&gt;Chatwoot&lt;/a&gt;. Ishak is a Malaysian software engineering student. Ishak started programming during his 2nd year at a university. Ishak's primary stack is the MERN stack, but Ishak does know other technologies too such as Spring, Django, React Native, all the way to CI/CD tools. Ishak became the President of the IT Club at his university in January 2021 and has conducted 4 successful programming workshops in that year alone. Ishak has written countless tech articles too.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with Chatwoot &amp;amp; &lt;a href="https://aviyel.com/discussions"&gt;open-source&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 21st, 2021&lt;br&gt;
Time: 08 AM PST | 11 AM EST&lt;br&gt;
Register here:&lt;/strong&gt; &lt;a href="https://bit.ly/3IMiEGr"&gt;https://bit.ly/3IMiEGr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mohmed Ishak Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/mo_ishak975"&gt;mo_ishak975&lt;/a&gt;&lt;br&gt;
DEV: &lt;a href="https://dev.to/ishakmohmed"&gt;Mohmed Ishak&lt;/a&gt;&lt;br&gt;
Linkedin: &lt;a href="https://www.linkedin.com/in/mohmed-ishak/"&gt;Mohmed Ishak&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React.js for Beginners 2022</title>
      <author>Kunal Garg</author>
      <pubDate>Sat, 11 Dec 2021 05:35:09 +0000</pubDate>
      <link>https://dev.to/gargkunal/reactjs-for-beginners-2022-531c</link>
      <guid>https://dev.to/gargkunal/reactjs-for-beginners-2022-531c</guid>
      <description>&lt;p&gt;Learn react from scratch &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/maJNKiu9lFg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>web3</category>
    </item>
    <item>
      <title>15 reasons why you should learn JavaScript right now</title>
      <author>Ani</author>
      <pubDate>Sat, 11 Dec 2021 05:01:32 +0000</pubDate>
      <link>https://dev.to/anisla/15-reasons-why-you-should-learn-javascript-right-now-4j10</link>
      <guid>https://dev.to/anisla/15-reasons-why-you-should-learn-javascript-right-now-4j10</guid>
      <description>&lt;p&gt;There are two reasons why it’s sometimes hard to make a choice; either there are too few options to choose from, or there are too many. When it comes to programming languages, there is an embarrassment of riches, which in turn can cause mental gridlock. There’s Python, Java, JavaScript, C/CPP, PHP, Swift, C#, Ruby, Objective-C, and SQL, and that’s not even the full list! How do you choose?&lt;/p&gt;
&lt;p&gt;Now, bear in mind that as far as programmers go, there’s no such thing as knowing too many languages. A programmer with a grasp of many languages is a programmer who is highly marketable and very much in demand. Upskilling is always a smart way to go. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-reasons-why-you-should-learn-javascript-right-now/&amp;amp;ved=2ahUKEwjq3LetlNPzAhWCjeYKHXtzBaUQFnoECAQQBQ&amp;amp;usg=AOvVaw2jcX34baRnSUligpWiA29Q&amp;amp;cshid=1634532657525"&gt;15 reasons why you should learn JavaScript right now&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Responsive Personal Portfolio Website Using HTML CSS And JavaScript</title>
      <author>Kishan Sheth</author>
      <pubDate>Sat, 11 Dec 2021 04:59:33 +0000</pubDate>
      <link>https://dev.to/koolkishan/responsive-personal-portfolio-website-using-html-css-and-javascript-23di</link>
      <guid>https://dev.to/koolkishan/responsive-personal-portfolio-website-using-html-css-and-javascript-23di</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fontawesome&lt;/li&gt;
&lt;li&gt;Scroll Reveal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Uu8MJhtbQnY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TypeScript Promises Examples</title>
      <author>Pankaj Kumar</author>
      <pubDate>Sat, 11 Dec 2021 04:58:37 +0000</pubDate>
      <link>https://dev.to/pankajkumar/typescript-promises-examples-1387</link>
      <guid>https://dev.to/pankajkumar/typescript-promises-examples-1387</guid>
      <description>&lt;p&gt;The popularity of TypeScript is increasing very rapidly for frontend web development as well as backend web development. TypeScript is designed for the development of large applications and transpiles to JavaScript. As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs. TypeScript may be used to develop JavaScript applications for both client-side and server-side execution. If you are completely new to TypeScript for serverside(Node.js) then &lt;a href="https://medium.com/@pankaj.itdeveloper/getting-started-using-typescript-with-node-js-and-express-6aff573667d5"&gt;read this article&lt;/a&gt; to get the basic understanding of Typescript and how it can be used with Node.js. If you want to use promises with Nodejs(JavaScript) click here to &lt;a href="https://jsonworld.com/demo/start-working-with-promises-in-node.js"&gt;read the article&lt;/a&gt;.&lt;br&gt;
In this article, We will understand about promises in TypeScript and how we can make our code efficient after using promise in our TypeScript Code.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#callback-examples-in-typescript"&gt;
  &lt;/a&gt;
  Callback examples in TypeScript
&lt;/h3&gt;

&lt;p&gt;One way to program asynchronously is to use callbacks. We pass to an asynchronous function a function which it will call when the task is completed.&lt;/p&gt;

&lt;p&gt;Let’s understand with below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function showMessage(callback) {
setTimeout(() =&amp;gt; {
console.log("This is first line");
callback(); // will be called when the task will be finished
}, 3000);
}
asyncMethod(() =&amp;gt; console.log("This is second line"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, A normal function is defined and an argument is passed which is a function and will be called once the task inside the function block is completed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-working-with-promises"&gt;
  &lt;/a&gt;
  Start Working with Promises
&lt;/h3&gt;

&lt;p&gt;A promise is an object that may produce a single value sometime in the future: either a resolved value or a reason that it’s not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State of Promises&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pending:&lt;/strong&gt; This is the initial state which indicates that promise has not either resolved or rejected. For example, We are making any HTTP call and the request takes few milliseconds to get response, so while its waiting for the response the state of the promise will be in pending state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fulfilled:&lt;/strong&gt; This is the state which indicates that the final output has been returned by promise successfully.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;rejected:&lt;/strong&gt; This state denotes that some error has been occured while doing task inside the promises and the operation gets failed.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const promise = new Promise((resolve, reject) =&amp;gt; {
// Code to execute
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In example above, a promise takes callback function as a parameter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Its callback function has 2 parameters resolve and reject.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the condition inside promise is true then the promise returns resolve else it returns the reject.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the coding a promise condition is writen like below to return a valid promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function asyncFun() {
const promise = new Promise((resolve, reject) =&amp;gt; {
setTimeout(() =&amp;gt; {
console.log("Console from promise function");
resolve();
}, 3000);
});
return promise;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#attach-success-and-error-handler-with-promise"&gt;
  &lt;/a&gt;
  Attach Success and Error Handler with Promise
&lt;/h3&gt;

&lt;p&gt;A function returning promise can be handled easily like in below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;asyncFun().then(function(success) {
  // This is success handler
  console.log(success);
})
.catch(function(error) {
  // This is error handler
  console.error(error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promise-chaining"&gt;
  &lt;/a&gt;
  Promise Chaining
&lt;/h3&gt;

&lt;p&gt;We can also connect a series of then handlers together in a chain, like in below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise.resolve("done")
.then(
(val) =&amp;gt; {
console.log(val);
return 'done2';
},
(err) =&amp;gt; console.error(err)
)
.then(
(val) =&amp;gt; console.log(val),
(err) =&amp;gt; console.error(err)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The promise is a very efficient way to write asynchronous code. Also, it solved all the problem occurred while working with callbacks.&lt;br&gt;
This article was originally posted over &lt;a href="https://jsonworld.com"&gt;JsonWorld&lt;/a&gt;&lt;br&gt;
Thank You!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>promises</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Progress on Terminus </title>
      <author>Luigi Zaccagnini</author>
      <pubDate>Sat, 11 Dec 2021 04:52:36 +0000</pubDate>
      <link>https://dev.to/luigizaccagnini/progress-on-terminus-2389</link>
      <guid>https://dev.to/luigizaccagnini/progress-on-terminus-2389</guid>
      <description>&lt;p&gt;So far the problem with Terminus has stayed the same. I am currently trying to find a better way to communicate with the people of the community for my pull request. This repository doesn't get updated quite often so I am hoping that someone can review the pull request soon so I can spend more time improving. Everything was left off with tests working and the headers being passed correctly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Although this was a short blog post about the status of the pull request, I wanted to go into detail about the entire experience of contributing. When I first picked the issue, I thought I would be working with the Telescope project. I decided to work with this code base because I was very comfortable and understood the project. I also found during this semester that working with newer projects took me a lot longer to learn and setup. Once I found out that I would have to work within Terminus, I was a little intimidated. I was worried it would take time to learn the code and understand how to work with it to get exactly what I needed. Eventually after moving on from being intimidated, I spent each night slowly examining the code and coming up with solutions to the problem. After that process I created the pull request. Working on this problem and the many problems this semester was a journey and I hope to work on more open source projects in the future in OSD700. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
