<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>App Developer Roadmap 2021</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 07:51:35 +0000</pubDate>
      <link>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</link>
      <guid>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</guid>
      <description>&lt;h2&gt;What is App Development?&lt;/h2&gt;
&lt;p&gt;App Development refers to the creation of computer applications for use on mobile devices such as tablets, smartphones and smart watches. Mobile device features such as cameras, motion and location awareness can be used to create unique and inventive mobile-only applications for things such as taxi and bike sharing.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mobile devices typically have popular apps for searching, browsing and social media preinstalled and users can download and install additional apps from Google Play (Android) and the Apple App Store (iOS). Mobile applications are designed and built for different operating systems and developers will want to learn how to build for both the Android operating system and Apple’s iOS.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To learn android development from starting to become pro. You can follow these steps:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Learn Kotlin (atleast basics) ( If you have no experience in Java programming or starting from scratch. else, You can continue with Java). My suggestion is to choose Kotlin as programming language for native android app development because Kotlin is official language since 2017 and all industries are shifting from Java to Kotlin for android development point of view.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, Time to install Android Studio. It is official IDE( Integrated Development Environment) for native android app development.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Get familiar with all Android Studio menus, controls and file structure. (Use 20–80 rules to starting you journey as a android developer)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about all basic views in XML and how to use them with best practices. How to modify and change the property of view at run time using Java and Kotlin program. (Learn about TextView, EditText, Button, LinearLayout)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about some more advance view and concepts like ListView, RecyclerView, ImageView and their implementations.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about Cursor, SQlite Database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, It's time to check your learning. Develop some basic apps like todo app, note taking app using SQLite database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about third party libraries for making life easier and saving your time.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn implementations of retrofit, volley or okhttp to consume rest api for building networking app like social media, online note taking app, weather app etc.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn, how to play video and audio and view PDFs.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn advance concept like architecture pattern, costum view&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Congratulations, You are now a pro android developer.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;These steps you can learn any time, you wish:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;How to build and generate apk and app bundle&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;How to deploy on google play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn debugging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn automated testing of android app&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Publish app on play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Build some cool and innovative projects and publish it.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;Make sure to use Git / GitHub for version controlling, collaborating and remote working.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Note: It is my personal experience in android development. If you find anything wrong in this you can connect and message on discussion box .&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can visit Originally Published for More queries: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/app-developer-roadmap/"&gt;App development roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>kotlin</category>
      <category>java</category>
    </item>
    <item>
      <title>Making Horizontal Mouse Scrolling With HTML, CSS, and JavaScript</title>
      <author>Ismaili Simba</author>
      <pubDate>Tue, 10 Aug 2021 07:50:12 +0000</pubDate>
      <link>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</link>
      <guid>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</guid>
      <description>&lt;p&gt;I recently came across a beautiful html5 template featuring horizontal mouse scrolling &lt;a href="https://html5up.net/ethereal"&gt;here&lt;/a&gt;. I'm not sure how they do it, so instead of trying to find that out, like any self-respecting coder I decided to come up with my own "better way".&lt;/p&gt;

&lt;p&gt;You can judge the results for yourself &lt;a href="https://github.com/ismailisimba/afrika1"&gt;here!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now with the inspirational story out of the way, here's how I did it. View the sample &lt;a href="https://ismailisimba.github.io/horizontalmousescrolling/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, the HTML. You'll need an outer container element, an inner container element and then your items will go in this inner container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outercontainer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="na"&gt;scrl1&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"innercontainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Used&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;To&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rule&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;World&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Seas&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Would&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rise&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;When&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, the CSS. The important thing to note here is if the viewport is scrollable, then by default whenever the wheel is scrolled, the page will scroll vertically. To prevent this, just make sure all content fits within the viewport vertically. Then, we make the outer container scrollable and the inner container non scrollable. We also hide the scrollbar so you can't scroll manually unless its a touch device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;scrollbar-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="nl"&gt;-ms-overflow-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

    &lt;span class="nc"&gt;.innercontainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;269px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.69%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;large&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the Javascript. We bundle all our functions inside &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event"&gt;window.onload&lt;/a&gt; to ensure our HTML is loaded before the script starts. We then assign the document's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel"&gt;onwheel&lt;/a&gt; event to our customScrollFunction. Every time the event happens (a wheel scroll), our function is called. Then we read the event's deltaY value. If this value is negative the wheel is going down and if its positive then the wheel is going up. We use a simple if to scroll our container left or right accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-client-side"&gt;
  &lt;/a&gt;
  JavaScript Code - Client Side
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onwheel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaYSign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaYSign&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>design</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to WebRTC</title>
      <author>Ponikar</author>
      <pubDate>Tue, 10 Aug 2021 07:23:25 +0000</pubDate>
      <link>https://dev.to/ponikar/introduction-to-webrtc-3kn8</link>
      <guid>https://dev.to/ponikar/introduction-to-webrtc-3kn8</guid>
      <description>&lt;p&gt;Hey there, I hope you are safe. So today we are going to talk about WebRTC. (Web Real Time Communication)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebRTC allows you to perform Peer to Peer real-time communication without bothering the Server.&lt;/strong&gt; Yes, You read it right, You can perform &lt;strong&gt;Peer to Peer communication&lt;/strong&gt; and &lt;strong&gt;share media stream like Audio, Video and arbitrary data&lt;/strong&gt; in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" alt="Introduction to WebRTC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-do-that"&gt;
  &lt;/a&gt;
  How do we do that?
&lt;/h2&gt;

&lt;p&gt;So before we can move forward to WebRTC. Let's talk about Socket Connections. &lt;strong&gt;Web Sockets allows us to send/receive real-time event at client side&lt;/strong&gt; that we know that. We established socket connection with Socket Server and then we can broadcast/receive events from/to Server.&lt;/p&gt;

&lt;p&gt;We are connected with server. Let's say 2 Clients(Peers) are connected with Server. So, the communication is happening through Server. &lt;strong&gt;Server is responsible for that Socket Connection.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;because of this reason, peers may sometimes experience of &lt;strong&gt;connectivity issue, Message lost and Message delay.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-that-something-like-magic"&gt;
  &lt;/a&gt;
  Is that something like Magic?
&lt;/h3&gt;

&lt;p&gt;Hold on, before we send any data to our peer, &lt;strong&gt;we need to make a connection&lt;/strong&gt; and that is a challenging task for developers to &lt;strong&gt;established WebRTC connection between two peer.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signalling"&gt;
  &lt;/a&gt;
  Signalling
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Signalling is the way to exchange information between peers in order to establish connection.&lt;/strong&gt; This information contains SDP, ICE candidates, User Information etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signalling can be done via Sockets, Real time Database like Firestore etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can always &lt;strong&gt;make your signalling Logic&lt;/strong&gt; to make connection across peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-connection-negotiation"&gt;
  &lt;/a&gt;
  How to make Connection? Negotiation
&lt;/h3&gt;

&lt;p&gt;The process start with Making an Offer. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;Peer A create an Offer&lt;/strong&gt; in order to communicate with Peer B. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Peer B need to accept the offer&lt;/strong&gt; and send back to the Answer of the Offer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer A accept the Answer.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;This process is known as Negotiation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Negotiation is process in which Peers negotiate about which kind of data they want to exchange (i.e Media Streams, Arbitrary Data) and the best way to exchange that data between two devices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In general Negotiation &lt;strong&gt;let Peers decide what type of Data they want to exchange,&lt;/strong&gt; before the connection establish between Peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdp-session-description-protocol"&gt;
  &lt;/a&gt;
  SDP (Session Description Protocol)
&lt;/h3&gt;

&lt;p&gt;Offer/Answer is known as &lt;strong&gt;SDP (Session Description Protocol).&lt;/strong&gt; SDP is a format that describe multimedia connections and Sessions across peers. &lt;strong&gt;You can assume SDP as ordinary Browser based Sessions.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output of below code SDP Offer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sdp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v=0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;o=- 6306366628372337755 2 IN IP4 127.0.0.1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;s=-&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;t=0 0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=extmap-allow-mixed&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=msid-semantic: WMS&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Once the negotiations has been done, Peers can now communicate with each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#okay-show-some-codes-now"&gt;
  &lt;/a&gt;
  Okay! Show some codes now.
&lt;/h3&gt;

&lt;p&gt;It's time to write some codes. &lt;strong&gt;We are going to make WebRTC Connection between Peer A and Peer B.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am assuming that We are having &lt;strong&gt;socket connection between two peer.&lt;/strong&gt; We are going to use this &lt;strong&gt;Sockets as Signalling server.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creating a &lt;strong&gt;global connection object&lt;/strong&gt; so we can use it later in functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting up &lt;strong&gt;ICE candidate Listeners&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onicecandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling ICE candidates to Peer B whenever we get it.&lt;/span&gt;
   &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adding Ice Candidates&lt;/strong&gt; to the connection &lt;strong&gt;whenever we get over Signalling.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 1: &lt;strong&gt;Peer A Creating and Signalling the Offer&lt;/strong&gt; for Peer B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// creating offer &lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// setting up offer as Peer's Local Description&lt;/span&gt;
      &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// signalling offer with Sockets&lt;/span&gt;
      &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer-created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: &lt;strong&gt;Peer B Accepting Offer and Signalling the Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acceptOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// setting up offer as Remote Description&lt;/span&gt;
     &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// creating answer &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnswer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// setting up answer as Local Description.&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling the answer&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;answer-added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: &lt;strong&gt;Peer A Saving an Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savingAnswer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// lastly, setting up Remote Description of Peer A&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, You have created Peer to Peer Connection. Now both peer can exchange data with each other.&lt;/p&gt;

&lt;p&gt;Throughout this process &lt;strong&gt;both connections have shared ICE candidates with each other.&lt;/strong&gt; That's why we have added Listeners and Signalling whenever we get an ICE candidates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exchange-arbitrary-data-between-two-peers"&gt;
  &lt;/a&gt;
  Exchange Arbitrary data between two peers.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We can create a data channel of connection&lt;/strong&gt; and then we can send and receive data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peer A can create Data Channel.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meeting-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Peer B can listen for that Data Channel&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondatachannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Send and Receive Messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// listening for message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I got message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// sending message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey Peer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: we need to &lt;strong&gt;create data channel before peers start communication with each other.&lt;/strong&gt; Otherwise both &lt;strong&gt;peers need to renegotiate.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If peers need to renegotiate, we can listen for that event&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this method can be called anytime if Peers need to &lt;/span&gt;
&lt;span class="c1"&gt;// perform negotiations again.&lt;/span&gt;
&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onnegotiationneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please start the negotiation process again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sending Media Streaming&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendStream&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// browser navigator API to fetch media stream&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="c1"&gt;// sending media tracks to peers&lt;/span&gt;
     &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Receiving Media Streams&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ontrack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you can use this media stream with &amp;lt;video&amp;gt; tag&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey I got Media Streams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;If you are &lt;strong&gt;stuck somewhere and want to debug&lt;/strong&gt; your WebRTC connection, you can debug with in your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;brave://webrtc-internals
chrome://webrtc-internals
about:webrtc &lt;span class="c"&gt;&amp;lt;!-- For Firefox --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That was &lt;strong&gt;basic implementation WebRTC connections.&lt;/strong&gt; Still If you &lt;strong&gt;want to know more about WebRTC and How does it works under the hood,&lt;/strong&gt; You need to understand the &lt;strong&gt;network terminologies.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-terminologies"&gt;
  &lt;/a&gt;
  Network Terminologies
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;NAT (Network Address Translation)&lt;/a&gt; &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT"&gt;TURN (Traversal Using Relays Around NAT)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment"&gt;ICE Candidates&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Session_Description_Protocol"&gt;SDP (Session Description Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this blog would help you to understand How can you use WebRTC in your next Project.&lt;/p&gt;

&lt;p&gt;If you want to add on something, &lt;strong&gt;please feel free to leave comment.&lt;/strong&gt; Also Tell me in the comment section which part did you like most.&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br&gt;
Darshan Ponikar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" alt="WebRTC Introduction"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The ultimate guide for junior frontend developers</title>
      <author>Nikolina Ljubičić</author>
      <pubDate>Tue, 10 Aug 2021 06:55:12 +0000</pubDate>
      <link>https://dev.to/lloyds-digital/the-ultimate-guide-for-junior-frontend-developers-cff</link>
      <guid>https://dev.to/lloyds-digital/the-ultimate-guide-for-junior-frontend-developers-cff</guid>
      <description>&lt;p&gt;How hard is it to become a developer? Can I do that? The answer is yes, you can. First of all, it should be noted that this path is not easy; there will undoubtedly be frustration and a desire to give up. If you want to be a good frontend developer, you have to realize that you will never finish learning. I have been through all of this, and I can tell you if you are persistent in achieving your goals, I can guarantee you that you will succeed.&lt;/p&gt;

&lt;p&gt;But how to get to the desired position of junior frontend developer? I believe that most of the students graduating from college are interested in that. Many employers look for people with work experience in their profession, &lt;strong&gt;but how do you gain experience if no one provides you a job opportunity?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sit tight, and let me share my story.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  How to start?
&lt;/h1&gt;

&lt;p&gt;One solution is to look for a professional internship. Keep in mind that even if you do it pro bono, believe me, it will pay off. Be grateful for the opportunity and try to use that time to learn as much as possible. You’ll have a chance to experience the real work environment, and that’s exactly what you need after college. Try to prove yourself, show the desire to learn, and progress. Don't come to an internship for the formality and signature that you have to take to college; you are making a big mistake that you will only be aware of later. Make the most of that time: ask questions, research, work hard, code, and learn. &lt;strong&gt;Perseverance will pay off.&lt;/strong&gt; It always does. &lt;/p&gt;

&lt;p&gt;However, if you don't have the opportunity to start with an internship, there are other alternatives, such as courses on Udemy, Udacity, Coursera, etc. You can find various courses for less than 15€. And here is a tip for you: the prices of the courses should be researched in the Incognito window, only in this way you will find out the real price. When you take a course, finish it completely and write the code in parallel with the lecturer. In addition, you should regularly take notes on paper or laptop, write comments in the code, and additionally follow official documentation as you discover new things. At that moment, you think you will remember it, but trust me, you probably won’t so you will be grateful when you see that you have something written down. &lt;strong&gt;It has been proven that we remember faster while writing.&lt;/strong&gt; After finishing the course, there is no need to immediately take a new one. You should rather set yourself your own project that needs to be done, and you will be able to apply your knowledge there. To sharpen your skills, it is necessary to complete as many projects as possible and invest a lot of effort in the exercises. This is a guaranteed path to success, no mistake.&lt;/p&gt;

&lt;p&gt;Consistently invest in your knowledge. If you focus on working on yourself, the results will definitely come. That’s guaranteed! Depending on how you want to feel or what you want more in your path to success, choose one book or online program - and get started. Just start somewhere and do it as soon as possible. &lt;strong&gt;Yes, it's never too late, but if you can start learning earlier and possibly create something, why not do it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqQh82eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6oc1ggzrsq7y8wsvrw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqQh82eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6oc1ggzrsq7y8wsvrw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-tech-skills-you-need-to-know"&gt;
  &lt;/a&gt;
  Top tech skills you need to know
&lt;/h1&gt;

&lt;p&gt;First of all, it's important to point out a few significant facts. If you want to become a frontend developer, needless to say, you must know HTML and CSS, because these are the basics. If you are asked at a job interview which programming languages you know, do not say HTML and CSS because they are not programming languages. HTML is a markup language, while CSS is a style language. Five years ago, it was completely normal to say at job interviews that you have knowledge of HTML or CSS, and they would be thrilled. Today is different and much more is expected from you. There is no need for fear; if you have the desire to learn, you will master other programming languages with ease. &lt;/p&gt;

&lt;p&gt;What we need to know now when we talk about the position of a frontend developer are JavaScript and/or TypeScript. Today, it's good to know Sass or Less - both are CSS preprocessors that script superset of CSS that makes writing CSS code easier. &lt;strong&gt;Knowing the rules for responsive web design is a crucial thing you need to know today.&lt;/strong&gt; One of the things that have made my life a lot easier is the &lt;a href="https://jonitrythall.com/content/flexboxsheet.pdf"&gt;CSS flex property&lt;/a&gt;. The number of internet users who access and use the web through smartphones and other mobile devices is constantly increasing at an alarming rate. This means that websites should be even more optimized than before, especially the customization of web design for different types of screen sizes is necessary. If you fail to do that, then you will end up losing customers. Based on &lt;a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/"&gt;Statista&lt;/a&gt; research, 54,8% of websites are viewed from a mobile device - use that information wisely.&lt;/p&gt;

&lt;p&gt;Another thing to know are &lt;strong&gt;software version control platforms&lt;/strong&gt; - which allow users to track changes in projects and collaboration between teams during and after software development. There are some free platforms such as GitLab, GitHub, or BitBucket. Realistically, working on it isn’t that abstract at all; it’s quick to learn, and it can make your life so much easier. Trust me, you will sleep more peacefully when you know that everything is stored on your Git.&lt;/p&gt;

&lt;p&gt;It is a big plus for a frontend developer if you know the basics of DNS, HTTP, and HTTPS (read: you have to know it).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-soft-skills-you-need-to-know-as-a-junior-frontend-developer"&gt;
  &lt;/a&gt;
  The soft skills you need to know as a junior frontend developer
&lt;/h1&gt;

&lt;p&gt;Now we came to the point that developers don’t really like, but these skills are just as important as tech skills. These skills do not include programming, but if you stick to them, they can make you a more skilled and better programmer as well as a team player.&lt;/p&gt;

&lt;p&gt;In this industry, things change very quickly, and only by learning can one keep up with new things and technologies. When learning, it is important to be humble and learn from your mistakes because that is one of the better ways to learn. And most important of all, show that you are always passionate and highly motivated for what you do.&lt;/p&gt;

&lt;p&gt;Of course, in this position, the key skill is writing code, but there is much more behind it, and to progress, it is important to know other skills.&lt;/p&gt;

&lt;p&gt;Here are some skills that are important to master:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Written communication.&lt;/strong&gt;  You can't escape it, you will use it every day in email. Try to write in a friendly way, always thank the person for contacting you, and most important of all - quickly get to the point without overcomplicating things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Mentoring.&lt;/strong&gt;  You probably don't understand why a junior frontend developer needs this, but in fact, there is always something you know and some of your colleagues don’t. Also, after a while and after you master things, you find yourself in situations where you need to explain something to someone. Trust me, this is the best way to further solidify and validate your knowledge (and only then realize how much you have already learned!). In principle, as soon as you teach someone something new,  you are on the right track, so just keep it up. I speak from my own experience when I say the combination of learning and mentoring is very effective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Focus.&lt;/strong&gt; In this industry, your focus should be on goals.  For example, to achieve a goal which is developing a website, you have to be focused on details, especially on small ones, because the frontend is just that, what is seen on the user’s screen. The developer must be focused on how the website works and how it will look, although the look and feel are resolved with the designers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Troubleshooting.&lt;/strong&gt;  This aspect is crucial in programming. It would be easiest to remember the commands to copy from StackOverflow and throw in the code. However it is crucial to know the problem, look at the bigger picture of the problem, and only then, with the help of Google and StackOverflow, solve the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Teamwork.&lt;/strong&gt; If you want to be a good programmer, it is also decisive that you are a team player. There is a lot of collaboration with designers, other developers, clients, and others in this work, so this skill is necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---erHa30O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg06iq48zdcvllf2i9pb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---erHa30O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg06iq48zdcvllf2i9pb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-can-you-do-to-become-a-better-programmer"&gt;
  &lt;/a&gt;
  What can you do to become a better programmer?
&lt;/h1&gt;

&lt;p&gt;Frontend development is considered to be much harder to master than it was before. The difficulty has remained the same, but web development is evolving very quickly, which entails several new things in a very short time and in a much larger number. That way, you need to learn a lot more things in a shorter amount of time than previously. Documentation will save you in many situations, don't be repulsed by it, read it several times.&lt;/p&gt;

&lt;p&gt;Here are some tips on how to quickly overcome all the difficulties of the programming process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learn to read someone else's code.  You can find out a lot from it and see good ways to write code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always be informed - this is one of the ways to help you learn constantly. There is nothing better than listening to industry experts. This allows you to keep up with the dev trends so focus on things you need to master.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attend technical meetings. The advice is to listen to podcasts, follow certain YT channels, join Facebook groups - a lot can be learned from the community.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to make your code clear and understandable from the beginning. However, once you start training as a programmer, you will certainly try to go back to some parts and prepare that source code. Make your code better for other developers that will work on its maintenance in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s important to seek feedback, be it good or bad, it will surely help you see what you are doing wrong or which direction you have to follow.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#short-tips-and-tricks"&gt;
  &lt;/a&gt;
  Short tips and tricks
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It’s important to understand the difference between image formats:  PNG, SVG, and JPG. Whenever you need a transparent image, use PNG, when you use icons, use SVG, for full-color images (and whenever possible if you don't need one of the above.), use JPG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For web optimization, it is necessary to compress images. There are free services available online such as &lt;a href="https://tinypng.com/"&gt;TinyPNG&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have icons on the web that change color on hover or some other action, use the program for &lt;a href="https://icomoon.io/"&gt;vector icons&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you install some packages but end up not using them, please uninstall those unnecessary packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the designer didn't prepare the final pictures for you, don't use some crazy gray squares, use &lt;a href="https://placeholder.com/"&gt;placeholders&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every time you finish a task on your project upload it on Git (&lt;code&gt;git push&lt;/code&gt;) and every time you enter the project use &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-you-need-to-know-as-a-junior-frontend-developer"&gt;
  &lt;/a&gt;
  What you need to know as a junior frontend developer
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Mandatory knowledge of HTML and CSS (CSS flex property)&lt;/li&gt;
&lt;li&gt;Knowledge of JavaScript or Typescript&lt;/li&gt;
&lt;li&gt;Basic knowledge of WordPress&lt;/li&gt;
&lt;li&gt;Knowing some JS frameworks (e.g. Vue.js, Nuxt.js)&lt;/li&gt;
&lt;li&gt;Basic understanding of SEO optimization&lt;/li&gt;
&lt;li&gt;Knowledge of working on Git&lt;/li&gt;
&lt;li&gt;Know how to use CSS preprocessors - Less or Sass&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#basic-things-that-you-need-to-do-on-the-web-as-a-frontend-developer"&gt;
  &lt;/a&gt;
  Basic things that you need to do on the web as a frontend developer
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Set up SEO optimization&lt;/li&gt;
&lt;li&gt;Enable Google Analytics&lt;/li&gt;
&lt;li&gt;Turn on the Google Search Console&lt;/li&gt;
&lt;li&gt;Turn on Sitemap&lt;/li&gt;
&lt;li&gt;Enable REcaptcha if the website has forms&lt;/li&gt;
&lt;li&gt;Set Error page&lt;/li&gt;
&lt;li&gt;Set up a website favicon&lt;/li&gt;
&lt;li&gt;Set an open graph image&lt;/li&gt;
&lt;li&gt;Placing of lazy loading on images to reduce the initial load &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h1&gt;

&lt;p&gt;I realized over time that the more we know, the clearer it is to us how much we still have to learn. The fact that you know how much you don't know is the best indicator that you already know a lot.&lt;br&gt;
You have to be committed to the end goal, that’s the key that will guide you forward when it gets tough or tricky. &lt;strong&gt;The most important thing is to learn to think like a programmer.&lt;/strong&gt; Once you have fully mastered one programming language, you can easily switch to new languages.&lt;/p&gt;

&lt;p&gt;As long as you’re willing to invest your time learning the necessary skills for a developer, you’ll be at a huge advantage over others, so if you’re not embarking on doing new things, it’s time to do it today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PfykaYKS5tY"&gt;Keep on learning!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>JavaScript Self Typewriting</title>
      <author>Femi Obadimu</author>
      <pubDate>Tue, 10 Aug 2021 06:54:15 +0000</pubDate>
      <link>https://dev.to/femiobadimu/javascript-self-typewriting-8go</link>
      <guid>https://dev.to/femiobadimu/javascript-self-typewriting-8go</guid>
      <description>&lt;p&gt;Get Pumped 😃😃😃 Guys, Because Today we'd be Exploring the world of Self Typewriting in Javascript..&lt;/p&gt;

&lt;p&gt;I'm Pretty sure most of you must have seen it, this automated and dynamically typing stuff all over the web today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#have-you-wondered-how-its-been-made"&gt;
  &lt;/a&gt;
  Have you wondered how it's been made??
&lt;/h1&gt;

&lt;p&gt;Well, i'm here to let you know how.&lt;br&gt;
This Here explains it in Javascript.&lt;/p&gt;

&lt;p&gt;You have to create a function , then use the &lt;em&gt;this&lt;/em&gt; keyword attached with some attributes which does the same thing as referring to the function you just created as shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRv7U0jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2leksw1ua3cupqixlrl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRv7U0jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2leksw1ua3cupqixlrl.png" alt="Best on Javascript Typewriting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secondly, you use the prototype syntax of writing,&lt;br&gt;
also all logic goes in here, e.g the length, speed of movement etc..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4De8Xhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c5dd17t1k2a20cw7n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4De8Xhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c5dd17t1k2a20cw7n8.png" alt="Best on Javascript Typewriting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly , You initialize and use it on the DOM , depending on what you want or how you want to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmmS5rPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3w0c11bk1iwj3wyxfss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmmS5rPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3w0c11bk1iwj3wyxfss.png" alt="Best on Javascript Typewriting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;READ, CLAP, SHARE&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#techforeveryone"&gt;
  &lt;/a&gt;
  techforeveryone
&lt;/h1&gt;

&lt;p&gt;follow for more [devsinstitute(&lt;a href="https://instagram.com/devsinstitute"&gt;https://instagram.com/devsinstitute&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Show us your coding setup!</title>
      <author>Siddharth</author>
      <pubDate>Tue, 10 Aug 2021 06:14:15 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/show-us-your-coding-setup-356g</link>
      <guid>https://dev.to/siddharthshyniben/show-us-your-coding-setup-356g</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;We all have our own configuration which we have been tuning and fine-tuning over the years. I would like to see how everyone here has their editors/terminals/stuff setup.&lt;/p&gt;

&lt;p&gt;I'll start with mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FB_vLDwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9xhu99u1u0vb5ezidw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FB_vLDwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9xhu99u1u0vb5ezidw3.png" alt="cooler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's tmux + vim + iTerm + zsh&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://github.com/siddshy/dotfiles"&gt;dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The vim theme is &lt;a href="https://github.com/kaicataldo/material.vim"&gt;material.vim&lt;/a&gt;. I also use NERDTree.&lt;/p&gt;

&lt;p&gt;Share your setup🚀&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Mobile Platformer Thoughts</title>
      <author>Paul Mason</author>
      <pubDate>Tue, 10 Aug 2021 05:55:55 +0000</pubDate>
      <link>https://dev.to/paulhmason/mobile-platformers-thoughts-28e4</link>
      <guid>https://dev.to/paulhmason/mobile-platformers-thoughts-28e4</guid>
      <description>&lt;p&gt;I've been playing around with some ideas for a mobile pixel art platformer game and one thing I noticed while playing with some from Google Play is that there aren't many that use traditional controls (left, right, jump and fire/hit). There's a lot of endless runners which are a cop-out as far as I'm concerned - I really don't like them and much prefer the more traditional platformer control.&lt;/p&gt;

&lt;p&gt;I found that simple onscreen virtual buttons for the 4 common actions work quite well. The main problem people have with them is there's no tactile feedback, but I found that if you get the size and position right they work well enough and I don't have a problem with them at all.&lt;/p&gt;

&lt;p&gt;Another thing that wasn't really obvious is what resolution to use when developing such a game. High resolution pixel art is a bit beyond my limited ability and I can only really manage 16x16 sprites and maybe 32x32 background tiles (but that's pushing it). An HD resolution game with sprites and tiles that size on mobile would be unplayable because everything would be so tiny.&lt;/p&gt;

&lt;p&gt;I played around in Godot and found that the following project settings work nicely:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#window"&gt;
  &lt;/a&gt;
  Window
&lt;/h6&gt;

&lt;p&gt;Width: 320&lt;br&gt;
Height: 180&lt;br&gt;
Test Width: 640&lt;br&gt;
Test Height: 360&lt;br&gt;
Orientation: landscape&lt;br&gt;
Mode: 2d&lt;br&gt;
Aspect: keep_width&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#rendering-2d"&gt;
  &lt;/a&gt;
  Rendering (2D)
&lt;/h6&gt;

&lt;p&gt;Snapping: Use GPU pixel snap is on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#virtual-control-buttons"&gt;
  &lt;/a&gt;
  Virtual Control Buttons
&lt;/h4&gt;

&lt;p&gt;A TextureButton with a single 32x32 image works just fine, but there's no harm in having a pressed state image as well.&lt;/p&gt;

&lt;p&gt;The layout below worked well for me, with the play area (blue) being 320x144 pixels. The little orange player sprite is 16x16, which looks okay on mobile if you keep things simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Fmb0QR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9zm1ral8jezxfh1txdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Fmb0QR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9zm1ral8jezxfh1txdp.png" alt="Game layout showing virtual button placement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's one thing I'm not sure about. I want my game to use traditional pixel art, but I'm not sure if the virtual controller buttons should. The ones in the image do, and look pretty pixelated as a result (to be expected). They're not, however, part of the game so maybe making them higher resolution with antialiasing would be better. I'm still on the fence about it...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#higher-resolution"&gt;
  &lt;/a&gt;
  Higher Resolution
&lt;/h4&gt;

&lt;p&gt;If you want things to look more crisp and detailed then you can just double all the dimensions so that a 32x32 sprite will still have the same screen size, but with more detail. Doubling the dimensions again will give HD resolution (1280x720), which is probably too much for a pixel art game, but will look good with more traditional art (like Spelunky 2).&lt;/p&gt;

&lt;p&gt;For a pixel art game you want to see the blockiness and the resolution I suggest makes it fairly obvious.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>platformer</category>
      <category>godot</category>
    </item>
    <item>
      <title>Forever Functional: Injecting for Purity</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 10 Aug 2021 05:54:52 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/forever-functional-injecting-for-purity-3emk</link>
      <guid>https://dev.to/asayerio_techblog/forever-functional-injecting-for-purity-3emk</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/federico-kereki"&gt;Federico Kereki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Functional Programming is based on pure functions, which have several good qualities that make for better code. However, usual practices don't normally apply them, with consequent difficulties and problems. In this article we'll explain what pure functions are, why they matter, and how to use &lt;em&gt;injection&lt;/em&gt;, a functional programming concept, to work with frameworks such as React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-vs-impure-functions"&gt;
  &lt;/a&gt;
  Pure vs Impure functions
&lt;/h2&gt;

&lt;p&gt;What are pure functions, and why should we care about them? The key concepts are understandability and maintainability. Pure functions behave just like mathematical functions in two important senses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given the same arguments, pure functions always return the same result.&lt;/li&gt;
&lt;li&gt;Pure functions do not produce any observable side effects when they do their work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A function that behaves in this way is predictable, testable, and easier to follow and understand. Before studying how to achieve this style, let's see some examples of impure functions. After, we'll consider how to make them better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-of-impurity"&gt;
  &lt;/a&gt;
  An example of impurity
&lt;/h2&gt;

&lt;p&gt;Let's start with a basic example of impure functions. A function that calculates the square root of a number should (obviously!) always produce the same result for the same number! The following example shows a different case: &lt;code&gt;isAdult()&lt;/code&gt; is meant to check if a person is an adult by testing if he's 21 in 2021.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yearBorn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;yearBorn&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of the function (which certainly isn't very sophisticated in the way it calculates ages, I admit it) doesn't only depend on its &lt;code&gt;yearBorn&lt;/code&gt; parameter, but also on an external value, &lt;code&gt;currentYear&lt;/code&gt;. If you modify the value of that variable, &lt;code&gt;isAdult(...)&lt;/code&gt; will start returning different results. The function is not pure by our definition, and not very safe to use either! A much better version would be as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAdult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentYear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yearBorn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;yearBorn&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple problem, and the solution is easy. Instead of the function directly accessing an external value, we provide it to control what the function uses. A similar case would occur in React if a functional component directly accesses a Redux store; we'll see more about this below. However, there are more complex cases to attend to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-complex-impurities"&gt;
  &lt;/a&gt;
  More complex impurities
&lt;/h2&gt;

&lt;p&gt;The situation becomes more complex if the function does some "side jobs" and changes external things. Even if the function always returns the same result, it may cause other problems down the line. Ideally, functions should work with nothing but the arguments they are called with. Functions shouldn't access other things (like global variables as in our original &lt;code&gt;isAdult(...)&lt;/code&gt; example) and they should just calculate something without modifying anything else. This meshes well with the "&lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single responsibility&lt;/a&gt;" design principle that basically says that a function &lt;em&gt;should do one thing, just that thing, and nothing but that thing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another type of side effect is when a function modifies its parameters. JavaScript passes arrays and objects as references, so if a function modifies them, it affects the original argument. This is not helped by several methods that do the same: for instance, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;&lt;code&gt;array.sort(...)&lt;/code&gt;&lt;/a&gt; modifies the array in place, instead of returning a new one. Other array methods are even trickier: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"&gt;&lt;code&gt;array.pop()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"&gt;&lt;code&gt;array.shift()&lt;/code&gt;&lt;/a&gt; both remove and return an element of the array, and the latter is modified. This is not ideal, but at least is expected -- but why should users of your function expect it to modify its arguments?&lt;/p&gt;

&lt;p&gt;Functions that don't have side effects are simpler to reason about: you don't have to consider any external aspects to use them. Also, working with such functions is safer: you don't have to worry about them messing with something they shouldn't. Imagine what would happen if the &lt;code&gt;isAdult(...)&lt;/code&gt; function itself modified &lt;code&gt;currentYear&lt;/code&gt;! When you call a pure function, you don't have to worry about something unexpected happening. &lt;br&gt;
Also, you can refactor and rewrite a pure function, keeping it pure, and it won't break other things. Finally, doing unit tests for pure functions is much easier; another plus. However, as we'll see, total purity is not achievable, and we'll have to compromise; let's see this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-need-for-impurity"&gt;
  &lt;/a&gt;
  The need for impurity
&lt;/h2&gt;

&lt;p&gt;What are &lt;em&gt;side effects&lt;/em&gt;? One category is when the program interacts with outside entities: the user, a database, another computer, a remote service. The second category is when code changes the global state: modifying some global variable or mutating an object or array received as an argument, for example. Note that side effects aren't some sort of "collateral damage": with our definition, something as trivial as logging to the console is considered a side effect -- even if you totally planned to do so!&lt;/p&gt;

&lt;p&gt;However, if you decided to forego all side effects, your programs would be truly uninteresting! They wouldn't be able to receive inputs, access files or databases, or even show whatever they calculated! Your web pages would also suffer: the user wouldn't be allowed to enter values, web service calls would be forbidden, and so would be updating the DOM.&lt;/p&gt;

&lt;p&gt;So, the idea of reducing side effects sounds good but becomes too shackling. We have to accept that working with impure functions is a must and that our code will have to interact with users, services, files, and more. However, we have to find some way to contain such functions, so we can limit their scope and ensure they don't do the unexpected. How can we alleviate the possible problems? In the next two sections we'll consider the most common problems: doing I/O and working with state.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dealing-with-impurity-injecting-functionality"&gt;
  &lt;/a&gt;
  Dealing with impurity: injecting functionality
&lt;/h2&gt;

&lt;p&gt;If you work with React or other similar frameworks, it's fairly common to have components calling to APIs to get data. &lt;/p&gt;

&lt;p&gt;In React you'd probably go with the &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;useEffect&lt;/a&gt; hook, but that isn't relevant now. &lt;/p&gt;

&lt;p&gt;This is a common pattern, but it makes testing harder and doesn't really allow black-box testing. To write mocks for, say, Jest, you have to be aware of how the API is called, and that requires looking into the code. In true black-box testing fashion, you shouldn't have to be aware of internal details of a component to test it:  you shouldn't even have to know if (and how) it calls an API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
   &lt;span class="p"&gt;[]&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(loading...)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;UserEmail&lt;/code&gt; component, we are using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; to call a &lt;a href="https://randomuser.me/"&gt;random user generator&lt;/a&gt; API (in more realistic cases the call would depend on other parameters and user input). We can free the component from the dependency on an API by injecting a prop that will do the I/O. This can be said to be an example of the &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy&lt;/a&gt; design pattern, common in OOP (Object Oriented Programming). The new definition of the &lt;code&gt;UserEmail&lt;/code&gt; component would be as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(loading...)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The needed function to be injected would be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
 &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this new implementation, testing becomes easier (it would be even better if the component just displayed an email received as a prop, and didn't try to get it by itself, but we'll let that pass for now). You don't have to know internal details of the component; it's enough to know that &lt;code&gt;getData&lt;/code&gt; is a function that returns a Promise that resolves to an email. To test this component you'd render it providing a function and verifying if the output correctly shows the fake email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fake@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Injecting the needed functions in this way makes for clarity; now the component is "dumber" and, despite having side effects, they are controlled by the component's parents. You could change the way you get an email, and the component wouldn't require any changes, and all existing tests would still work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dealing-with-impurity-handling-state"&gt;
  &lt;/a&gt;
  Dealing with impurity: handling state
&lt;/h2&gt;

&lt;p&gt;The second problem with our functions: how to manage state? State is, by definition, a global set of values, and it implies the possibility that any function or component may modify it. Tools such as &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; offer a way to manage it in a more guarded way (because the only way to update state is through a limited set of &lt;a href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers"&gt;actions&lt;/a&gt;) but the fact remains that any component could modify the &lt;a href="https://redux.js.org/tutorials/fundamentals/part-4-store"&gt;store&lt;/a&gt; that keeps global state.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It's been said that with old GOTO-based coding, the big question was "How did we get here?" and with modern style programming the question is "How did state become thus?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Redux allows your component to directly get data without "&lt;a href="https://kentcdodds.com/blog/prop-drilling/"&gt;prop drilling&lt;/a&gt;" at the cost of taking us back to having the equivalent of a global variable. Accessing data is a problem (of the same type that we illustrated in our &lt;code&gt;isAdult(...)&lt;/code&gt; example) but we can cope by passing down props... but what about updating data? Injection can help us there too.&lt;/p&gt;

&lt;p&gt;Imagine in our &lt;code&gt;UserEmail&lt;/code&gt; component that we wanted to store the email address in the store. You could have code like the following -- and yes, a much better practice would be having separate concerns in separate files, but I wanted to make the example simple! First, let's have a store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_EMAIL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// continues...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our component could update the store in the following way, by dispatching an action. Once again, in actual React+Redux applications, you would probably use action creators, but that's not needed and working like this &lt;a href="https://redux.js.org/usage/reducing-boilerplate"&gt;reduces boilerplate&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...continued&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
   &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_EMAIL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(loading...)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our component now dispatches and action to update the email in the store. But what if you wanted to use this component without updating state -- just to show results, but not store them? Or, if you wanted to &lt;a href="https://redux.js.org/usage/writing-testshttps://redux.js.org/usage/writing-tests"&gt;write tests&lt;/a&gt; for it without much problem? The solution is, again, to inject a function: in this case, one that will take care of the data update. Let's add a setData prop to the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(loading...)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you want your component to store data, you could use it as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
 &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_EMAIL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we totally control what the component will or won't do. If we don't want it to update the store, we should pass an empty function that won't do anything -- or better yet, define a default value for &lt;code&gt;setData&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For testing purposes, you would provide a mock function and then you could test if it was called with the right parameters; easy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Aiming for pure functions is a great goal -- though some flexibility is required! Using injection can help you write clearer and more easily tested code. With this practice, you may even allow higher degrees of functionality by externally defining how components will work. Getting accustomed to injection may take a bit, but the results are worth it; give it a try!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>react</category>
    </item>
    <item>
      <title>Restricting Access in LitmusChaos</title>
      <author>Sarthak Jain</author>
      <pubDate>Tue, 10 Aug 2021 05:51:54 +0000</pubDate>
      <link>https://dev.to/sarthakjain26/restricting-access-in-litmuschaos-11ab</link>
      <guid>https://dev.to/sarthakjain26/restricting-access-in-litmuschaos-11ab</guid>
      <description>&lt;h2&gt;
  &lt;a href="#here-are-the-points-that-we-will-discuss-about-in-this-blog"&gt;
  &lt;/a&gt;
  Here are the points that we will discuss about in this blog:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What do we mean by Restricting Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Why is it needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Restricting access in LitmusChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;How we implemented it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-do-we-mean-by-restricting-access"&gt;
  &lt;/a&gt;
  What do we mean by Restricting Access &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Access restriction, suggested by the name, refers to controlling the access level of a user for any resource as per their role in an organisation or project.&lt;br&gt;
For example, a premium Spotify user will have access to download any song and play it offline, whereas a non-premium user cannot download the songs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-is-it-needed"&gt;
  &lt;/a&gt;
  Why is it needed &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Giving access to everything to everyone can be very vulnerable. Imagine google not restricting users to unmute other users, or Imagine the HR team having permissions to handle the Github repo of your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5xtDarC0XyqmUhD5eDK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5xtDarC0XyqmUhD5eDK/giphy.gif" alt="No way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By implementing good restriction policies, it is possible for an organization to optimize the use of resources and build a better product.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#restricting-access-in-litmuschaos"&gt;
  &lt;/a&gt;
  Restricting access in LitmusChaos &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/litmuschaos/litmus"&gt;LitmusChaos&lt;/a&gt; is a tool that allows users to test the resilience of their Kubernetes or non-Kubernetes applications when it is under testing in a chaotic environment.&lt;/p&gt;

&lt;p&gt;LitmusChaos has built a cool teaming feature that enables users to have any of the three(Owner, Editor, Viewer) roles in a project.&lt;br&gt;
The project owner has access to all the features in a project, right from inviting other members to their project, managing those members, scheduling workflows, and managing workflows.&lt;br&gt;
The editor has the same privileges as the owner, minus managing the project and inviting other members to the project. The viewer has only access to view the workflows and analytics related to it.&lt;/p&gt;

&lt;p&gt;You can read more about this feature here:&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/litmus-chaos" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYiERGJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AusC0Xso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3775/9c0dac2d-078a-4e1b-bf87-aab26ac22759.png" alt="LitmusChaos"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7I8HnFh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xeQoC5zE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435368/c3228e42-7d6c-4400-bb99-f5f0a0653c85.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/litmus-chaos/introducing-teaming-in-litmuschaos-to-ease-your-chaos-engineering-experience-5alo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introducing Teaming in LitmusChaos to ease your Chaos Engineering experience&lt;/h2&gt;
      &lt;h3&gt;Saranya Jena for LitmusChaos ・ May 20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#chaosengineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#litmuschaos&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sre&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-we-implemented-it"&gt;
  &lt;/a&gt;
  How we implemented it &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The basic implementation that comes to mind is to disable the features that should not be accessed by the users in the user interface or just hide them. While it can be the first layer of security, it is not enough for a tool like litmus. Some users directly want to access the APIs, and therefore the validation has to be done while executing the API itself.&lt;br&gt;
To ensure this here is the overview of architecture that we follow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOTh6YY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weq37xr2stlkwfy6c57o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOTh6YY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weq37xr2stlkwfy6c57o.png" alt="FLowchart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before processing the request, the validator confirms if the user has sufficient permissions to access the resource. If not, then the request is not processed &amp;amp; instead, an error message will be presented to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for sticking around. I hope you had a productive time reading this article.This article was also contributed by &lt;a class="mentioned-user" href="https://dev.to/vanshbhatiaa4k9"&gt;@vanshbhatiaa4k9&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Are you an SRE or a Kubernetes enthusiast? Does Chaos Engineering excite you?&lt;br&gt;
Join Our Community On Slack For Detailed Discussion, Feedback &amp;amp; Regular Updates On Chaos Engineering For Kubernetes: &lt;a href="https://slack.litmuschaos.io"&gt;https://slack.litmuschaos.io&lt;/a&gt; (#litmus channel on the Kubernetes workspace)&lt;br&gt;
LitmusChaos 2.0 GA will be out on 15th August 2021, with some exciting new features. &lt;/p&gt;

&lt;p&gt;LitmusGithubRepo&lt;br&gt;
Check out the Litmus Chaos GitHub repo and do share your feedback: &lt;a href="https://github.com/litmuschaos/litmus"&gt;https://github.com/litmuschaos/litmus&lt;/a&gt;&lt;br&gt;
Submit a pull request if you identify any necessary changes.&lt;br&gt;
Don't forget to share these resources with someone who you think might benefit from them. Peace out. ✌🏼&lt;/p&gt;

</description>
      <category>litmuschaos</category>
      <category>kubernetes</category>
      <category>cncf</category>
      <category>security</category>
    </item>
    <item>
      <title>Fullstack (Nodejs + Reactjs) interview experience at Nutanix</title>
      <author>Prashant Yadav</author>
      <pubDate>Tue, 10 Aug 2021 05:50:40 +0000</pubDate>
      <link>https://dev.to/learnersbucket/fullstack-nodejs-reactjs-interview-experience-at-nutanix-403i</link>
      <guid>https://dev.to/learnersbucket/fullstack-nodejs-reactjs-interview-experience-at-nutanix-403i</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8R778kW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Fullstack-Nodejs-ReactJs-SASS-Nutanix-Interview-Experience-1.png%3Fw%3D768%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8R778kW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Fullstack-Nodejs-ReactJs-SASS-Nutanix-Interview-Experience-1.png%3Fw%3D768%26ssl%3D1" alt="Fullstack interview experience at Nutanix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://learnersbucket.com"&gt;learnersbucket.com&lt;/a&gt; If you are preparing for your JavaScript interview. You will find DSA, System Design and JavaScript Questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had applied for the MTS-3 Fullstack – SAAS (Nodejs + Reactjs) on Nutanix’s career section and got the shortlisting email on 21’st April 2021. It was for the Bangalore location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TH9kvyre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Nutanix-hiring.png%3Fw%3D709%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TH9kvyre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/learnersbucket.com/wp-content/uploads/2021/08/Nutanix-hiring.png%3Fw%3D709%26ssl%3D1" alt="Shortlisting email from Nutanix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the email, the recruiter called me and we had brief introduction about myself, my experience, etc and what are they looking for in the candidate and about the Nutanix and role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1st-round-phone-screen-sde2-full-stack"&gt;
  &lt;/a&gt;
  1st Round: Phone screen (SDE2 – Full Stack)
&lt;/h2&gt;

&lt;p&gt;I was asked what I do on a daily basis, followed by some JavaScript questions and some Rest API questions.&lt;/p&gt;

&lt;p&gt;It went well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2nd-round-javascript-platform-amp-dsa-sde3-full-stack"&gt;
  &lt;/a&gt;
  2nd Round: JavaScript Platform &amp;amp; DSA. (SDE3 – Full Stack)
&lt;/h2&gt;

&lt;p&gt;Don’t remember about the interviewer.&lt;/p&gt;

&lt;p&gt;In this round I was asked to implement programs based on Closure, Promise and Objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://learnersbucket.com/examples/interview/deep-flatten-object-in-javascript-1"&gt;Deep Flatten an object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learnersbucket.com/examples/array/how-to-flat-an-array-in-javascript"&gt;Flat an array&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learnersbucket.com/examples/interview/what-is-debouncing-in-javascript"&gt;Debounce&lt;/a&gt; and its variations using promise.&lt;/li&gt;
&lt;li&gt;Where do we need to use async code in Nodejs, why?. Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a good round, and I learned lots of things. Went good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3rd-round-system-design-frontend-backend-team-lead-full-stack"&gt;
  &lt;/a&gt;
  3rd Round: System Design (Frontend + Backend) (Team lead – Full Stack)
&lt;/h2&gt;

&lt;p&gt;The interviewer had around 9 years of experience and was leading the team which I was being hired for, we exchanged introductions and started the interview.&lt;/p&gt;

&lt;p&gt;As I was being hired for the Payment &amp;amp; Pricing team.&lt;/p&gt;

&lt;p&gt;This round was mainly focused towards creating dynamic form and handling the payment and pricing based on the features selected.&lt;/p&gt;

&lt;p&gt;Security, CORs, XSS.&lt;/p&gt;

&lt;p&gt;How to secure your API, Server side vs Client Side, which to use for security purposes?. What if the same has to be achieved on the alternate side &amp;amp; vice versa.&lt;/p&gt;

&lt;p&gt;Lots of discussion of form handling and uncontrolled and controlled form components. Select box, etc.&lt;/p&gt;

&lt;p&gt;I haven’t read about security still it went well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4th-round-system-design-javascript-manager-pricing-amp-payment-team"&gt;
  &lt;/a&gt;
  4th round: System Design (Javascript) (Manager – Pricing &amp;amp; Payment Team)
&lt;/h2&gt;

&lt;p&gt;The interviewer was quite nice, he first introduced himself and what they are looking for in a candidate who will join this team, what type of work will be there, etc.&lt;/p&gt;

&lt;p&gt;I was asked to implement a &lt;a href="https://learnersbucket.com/examples/interview/number-increment-counter-in-javascript-react"&gt;Number increment counter in JS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this round, I came up with a solution using &lt;a href="https://learnersbucket.com/examples/javascript/javascript-settimeout-method"&gt;setTimeout&lt;/a&gt; and &lt;a href="https://learnersbucket.com/examples/javascript/javascript-setinterval-method"&gt;setInterval&lt;/a&gt;, even though it was not perfect he pushed me to the next round.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5th-round-dsa-vp-pricing-amp-payment-team"&gt;
  &lt;/a&gt;
  5th round: DSA (VP – Pricing &amp;amp; Payment Team)
&lt;/h2&gt;

&lt;p&gt;The interviewer was from San Jose and he was a little strange.&lt;/p&gt;

&lt;p&gt;He asked me to introduce myself and when I was done, after a pause he unmuted and asked that’s it?. Please elaborate a little. I thought he was doing something else simultaneously and not concentrating towards the interview.&lt;/p&gt;

&lt;p&gt;Later he asked me to implement an algorithm to count all possible subarrays in an array with sum k. (Note:- They are not consecutive).&lt;/p&gt;

&lt;p&gt;As I had to find all the possible sub arrays, I thought of using Dynamic Programming first.&lt;/p&gt;

&lt;p&gt;But the interviewer asked me to implement an O(N ^ 2) algorithm.&lt;/p&gt;

&lt;p&gt;Failed in this. He showed me the solution using the bitwise operator.&lt;/p&gt;

&lt;p&gt;At the end he was constantly asking me from where I come?, where I am living. In Spite of repeatedly telling him that I live in Mumbai and having been born and brought up here. He was not ready to accept it. I was getting a feeling that he has some personal issue with name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verdict"&gt;
  &lt;/a&gt;
  Verdict.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT SELECTED.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I guess because my 4th round went okay and 5th round went bad they dropped me. Interviewer asked me to apply in different verticals, but I lost my interest and so I left it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 5, Exploring the math module</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 10 Aug 2021 05:39:37 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-5-exploring-the-math-module-5alo</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-5-exploring-the-math-module-5alo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-study-how-to-import-modules-in-python-and-explore-the-math-module"&gt;
  &lt;/a&gt;
  Today we will study how to import modules in Python, and explore the math module. 
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#what-are-modules"&gt;
  &lt;/a&gt;
  What are  modules?
&lt;/h3&gt;

&lt;p&gt;A module is a python file containing Python definitions and statements. A module  it must end with the &lt;code&gt;.py&lt;/code&gt; extension like all other Python files. &lt;/p&gt;

&lt;p&gt;A module is basically a bunch of functions, variables and runnable  code. By grouping code into modules makes the code easier to read, logically understandable and enhances flexibility.&lt;br&gt;
You can get the official documentation of modules &lt;a href="https://docs.python.org/3/tutorial/modules.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will learn to create our own modules in the later parts, but today we explore one of the very useful Python module, that is the &lt;code&gt;math&lt;/code&gt; module.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#importing-modules"&gt;
  &lt;/a&gt;
  Importing modules.
&lt;/h3&gt;

&lt;p&gt;For using the math module, we just need to type &lt;code&gt;import math&lt;/code&gt;, and you are set to go! You can import any Python module using the import statement.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-math-module"&gt;
  &lt;/a&gt;
  The math module
&lt;/h3&gt;

&lt;p&gt;The math module in Python is a very useful module which lets us use mathematical functions in Python. It contains many useful mathematical functions and some constants. You can check the whole list &lt;a href="https://docs.python.org/3/library/math.html#math.log"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I am presenting some of the very commonly used functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="c1"&gt;# import the math module
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;4.4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the ceiling function in Python gives the smallest integer greater than or equal to the number.
&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the floor function in Python gives the greatesr integer less than or equal to the number.
&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Return the number of ways to choose a items from b items without repetition and without order.
&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Raises TypeError if either of the arguments are not integers
&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'float'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;interpreted&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Raises ValueError if either of the arguments are negative.
&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;negative&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# e raised to the power a
&lt;/span&gt;&lt;span class="mf"&gt;7.38905609893065&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# logarithm to the base 10
&lt;/span&gt;&lt;span class="mf"&gt;0.6931471805599453&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# logarithm to the base 2
&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# logarithm to the base b
&lt;/span&gt;&lt;span class="mf"&gt;0.6309297535714574&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# a^b
&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#square root of a
&lt;/span&gt;&lt;span class="mf"&gt;1.4142135623730951&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# trigoonomatric functions
&lt;/span&gt;&lt;span class="mf"&gt;0.9092974268256817&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# hyperbolic trigonometric functions
&lt;/span&gt;&lt;span class="mf"&gt;1.1071487177940904&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# convert to degrees
&lt;/span&gt;&lt;span class="mf"&gt;114.59155902616465&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#convert to radians
&lt;/span&gt;&lt;span class="mf"&gt;0.03490658503988659&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# gamma function.
&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hypot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#hypotaneous calculation using the pythagores theorem.
&lt;/span&gt;&lt;span class="mf"&gt;3.6055512754639896&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="c1"&gt;# mathematical constant pi
&lt;/span&gt;&lt;span class="mf"&gt;3.141592653589793&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="c1"&gt;# mathematical constant e
&lt;/span&gt;&lt;span class="mf"&gt;2.718281828459045&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

&lt;p&gt;Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too!&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Two diagrams showing the current Rust network ecosystem</title>
      <author>Alex</author>
      <pubDate>Tue, 10 Aug 2021 04:37:16 +0000</pubDate>
      <link>https://dev.to/zhanghandong/two-diagrams-showing-the-current-rust-network-ecosystem-39hi</link>
      <guid>https://dev.to/zhanghandong/two-diagrams-showing-the-current-rust-network-ecosystem-39hi</guid>
      <description>&lt;p&gt;Today I drew two diagrams to show the current Rust Web ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokio-ecosystem"&gt;
  &lt;/a&gt;
  tokio ecosystem
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zbh8QN-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqnj15eq4sl2jmd42uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zbh8QN-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilqnj15eq4sl2jmd42uf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the diagram, the tokio ecosystem is now complete with the basic core components for web services and web development. Especially with the introduction of the Axum framework, tokio is close to being complete in the Web ecosystem.&lt;/p&gt;

&lt;p&gt;Axum's middleware uses the tower abstraction directly, which has the following advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the use of a unified Service and Layer abstraction standards, to facilitate everyone to prosper the ecology&lt;/li&gt;
&lt;li&gt;reuse the tokio / hyper / tonic ecosystem&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;axum's routing mechanism does not use property macros like rocket, but provides a simple DSL (chain call). Routing is based on iterations and regular expressions to match, and routing performance should be similar to actix-web.&lt;/p&gt;

&lt;p&gt;A convenient extractor is also provided, as long as FromRequest is implemented it is an extractor and very easy to implement.&lt;/p&gt;

&lt;p&gt;There are also some others advantages.&lt;/p&gt;

&lt;p&gt;In a word, Axum is, in my opinion, a milestone for Rust in the Web development field, and it strongly drives the tokio/tower ecosystem. It's not quite mature yet, but it has a lot of potential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#others-web-frameworks"&gt;
  &lt;/a&gt;
  Others Web Frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_BNFtIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdu0qjqitrxvunpy9r0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_BNFtIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdu0qjqitrxvunpy9r0f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;actix-web&lt;/code&gt; itself adds a layer of runtime threads as Actor to manage multiple threads, each thread is actually running a tokio single thread &lt;code&gt;block_on&lt;/code&gt; , so that between the threads can not task stealing , lost the advantages of tokio task scheduling , in exchange for the performance of wireless thread context switching . This is the main difference between actix-web and other frameworks. actix-web's middleware also borrows from Tower Service, but it is not as generic as tower.&lt;/p&gt;

&lt;p&gt;The advantage of &lt;code&gt;rocket&lt;/code&gt; is a well-developed API, especially for handling forms very well. Unlike other frameworks, rocket has strong constraints on middleware in order to achieve security and correct goals, and it is not as free to implement middleware as Axum. This also predestines it to be more difficult to form an generic ecosystem. rocket is not performance oriented at the moment, maybe it will be optimized for performance in the future after 1.0.&lt;/p&gt;

&lt;p&gt;How to choose your own web framework, combined with your scenario and preferences to choose it.&lt;/p&gt;

</description>
      <category>tokio</category>
      <category>rust</category>
    </item>
  </channel>
</rss>
