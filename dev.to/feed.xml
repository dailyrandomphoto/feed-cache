<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Minimal Programming Kit</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 11 May 2021 09:55:35 +0000</pubDate>
      <link>https://dev.to/sm0ke/minimal-programming-kit-gej</link>
      <guid>https://dev.to/sm0ke/minimal-programming-kit-gej</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This page aims to help beginners to set up their PC for programming. All recommended tools are free, stable, and widely used even by experienced programmers and designers. In the end, we will build a popular open-source project using the downloaded tools. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;The Short-list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;A modern editor - &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt; - used in Javascript-based products and tools&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; - a modern script language used for many types of projects &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - a command-line tool used to download sources from &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h2&gt;

&lt;p&gt;We need this software to visualize and edit the sources, execute our projects and investigate the issues that might occur during the programming process. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJT18_kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr29ouux80qxitfe3pdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJT18_kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr29ouux80qxitfe3pdx.png" alt="Programming Kit - VSCode editor."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h2&gt;

&lt;p&gt;Installing NodeJS unlocks access to a huge ecosystem that exposes &lt;br&gt;
many tools and libraries we can use in our projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For coding web pages: &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Backend: &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;, &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;, &lt;a href="https://koajs.com/"&gt;Koa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tools: &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt;, &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To get started with &lt;strong&gt;NodeJS&lt;/strong&gt; please access the official website and download a version compatible with your operating system&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;NodeJS&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m54xzZHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nowklhu6p46jx8fh5zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m54xzZHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nowklhu6p46jx8fh5zt.png" alt="Programming Kit - NodeJS."&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;Python is a general-purpose coding language—which means that, unlike HTML, CSS, and JavaScript, it can be used for other types of programming and software development besides web development. Python is interpreted, easy to learn surrounded by a huge ecosystem, actively supported and used in many industries and domains. Can be used for things like (starting from the simple ones): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic programming: using strings, adding numbers, open files&lt;/li&gt;
&lt;li&gt;Writing system scripts (creating instructions that tell a computer system to “do” something)&lt;/li&gt;
&lt;li&gt;Back end (or server-side) web and mobile app development&lt;/li&gt;
&lt;li&gt;Desktop apps and software development&lt;/li&gt;
&lt;li&gt;Processing big data and performing mathematical computations&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Python can be downloaded from the &lt;a href="https://www.python.org/"&gt;official website&lt;/a&gt;. Choose the installer for your operating system, download, and click a few times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
Python 3.7.2 &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; All Good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRKcyMCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuiuzuoggsyes9ie5brc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRKcyMCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuiuzuoggsyes9ie5brc.png" alt="Programming Kit - Python Interpreter."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  GIT
&lt;/h2&gt;

&lt;p&gt;Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Using GIT we can clone/download and manage projects from Github and BitBucket with ease. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/downloads"&gt;GIT&lt;/a&gt; - download page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To check the installation, feel free to open a terminal and type  &lt;code&gt;git --version&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nt"&gt;--version&lt;/span&gt;
git version 2.28.0.windows.1 &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; All Good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---I-iegEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzonmw3atr4g9dmkfm2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---I-iegEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzonmw3atr4g9dmkfm2w.png" alt="Programming Kit - GIT versioning tool."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-a-sample-project"&gt;
  &lt;/a&gt;
  Build a Sample Project
&lt;/h2&gt;

&lt;p&gt;To make this short tutorial useful, we will build in the local environment a popular open-source project from &lt;a href="https://bit.ly/3fKQZaL"&gt;Creative-Tim&lt;/a&gt;: &lt;a href="https://bit.ly/3u2lZc6"&gt;Material Kit&lt;/a&gt; (free version) with a few commands typed in the terminal.  Material Kit is a Free Bootstrap 4 UI Kit with a fresh, new design inspired by Google's material design.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3u2lZc6"&gt;Material Kit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2RMZDO4"&gt;Material Kit&lt;/a&gt; - LIVE Demo &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To build locally this amazing product, we will follow up a simple setup: clone the sources from the public repository (Github), install modules, and start the template. Let's go!&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/creativetimofficial/material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install project dependencies (this might take a while)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If all goes well, we should see &lt;strong&gt;Material Kit&lt;/strong&gt; starter running in the browser: &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjCWpWy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhnq8ktvkojpo6tlnha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjCWpWy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhnq8ktvkojpo6tlnha.png" alt="Programming Kit - Sample Project."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Free &lt;strong&gt;&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt;&lt;/strong&gt; - a curated list published here on Dev.to&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt;&lt;/strong&gt; provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hi all</title>
      <author>tiepvv</author>
      <pubDate>Tue, 11 May 2021 09:49:05 +0000</pubDate>
      <link>https://dev.to/tiepvv/hi-all-2nn</link>
      <guid>https://dev.to/tiepvv/hi-all-2nn</guid>
      <description>&lt;p&gt;nice to meet you &lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 Ways To Create A Healthy Eating Lifestyle</title>
      <author>Darren Ainsworth</author>
      <pubDate>Tue, 11 May 2021 09:49:00 +0000</pubDate>
      <link>https://dev.to/darrenainsworth/5-ways-to-create-a-healthy-eating-lifestyle-26b</link>
      <guid>https://dev.to/darrenainsworth/5-ways-to-create-a-healthy-eating-lifestyle-26b</guid>
      <description>&lt;p&gt;We all know that eating healthy is one of the major keys to a healthier, happier, and longer life. That is I, &lt;a href="https://www.crunchbase.com/person/darren-ainsworth"&gt;Darren Ainsworth&lt;/a&gt;, your number one dietitian is all for healthy eating and how to make it a healthy eating lifestyle. And while many must have made resolutions and goals to incorporate a healthy diet, sticking to these goals is where the challenge lies.&lt;/p&gt;

&lt;p&gt;However, it doesn’t have to be hard. To eat healthier and smarter, I have shared with you a few tips and tricks to get you started. With these together with exercising and taking care of your overall well-being, you can stay on top of sicknesses, and live healthier and happier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-colorful"&gt;
  &lt;/a&gt;
  Go Colorful
&lt;/h2&gt;

&lt;p&gt;Fruits and vegetables are colorful for good reasons: they contain different antioxidants, vitamins and minerals that will do your body good. Along with keeping you from free radicals and protecting against diseases and illnesses, it can also help your mental health by protecting from oxidative stress. This means the more you are making your meal colorful, the more nutrients you are enriching your body.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-sugar-intake"&gt;
  &lt;/a&gt;
  Reduce Sugar Intake
&lt;/h2&gt;

&lt;p&gt;Sugar is one of the things I love most. I love sweet things but as a dietitian, I know this is not something my body loves. What did I do? I replaced sweets with healthier snacks and I keep these snacks handy at home in case those cravings rear their heads. I consume whole food and ditch sugar-sweetened drinks for smoothies or home-made iced drinks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-overly-processed-food"&gt;
  &lt;/a&gt;
  Avoid Overly Processed Food
&lt;/h2&gt;

&lt;p&gt;Avoid processed food as much as possible. The point is you never can tell how much has been added into the food. And you can be consuming more than the ideal amount of fat, sugar, salt and calories. Hence, less of boxed macaroni, potato chips or hamburgers. More fresh foods, whole grains, healthy breads, fruits and vegetables and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drink-enough-water"&gt;
  &lt;/a&gt;
  Drink Enough Water
&lt;/h2&gt;

&lt;p&gt;Proper hydration is essential to stay healthy. While you crave for those sugary drinks every time, why not replace them with water or fruit- infused water? This way, not only are you ensuring your body is getting the required amount of water, but you are also keeping away from obesity and illnesses. And if you have difficulty keeping up with the right amount of water, make it a habit to keep a bottle of water on your desk or take it with you when you run errands. This way, you can always reach out when there’s a need for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fall-for-tempting-food-blogs"&gt;
  &lt;/a&gt;
  Don’t Fall for Tempting Food Blogs
&lt;/h2&gt;

&lt;p&gt;You are working on healthy diets, but you can’t stop yourself from watching those yummy food videos and pictures? This might be a difficult feat to conquer and you are more likely to want more of those foods you swear to keep away from. For this, try as much as you can to limit how much you watch food TV shows, blogs and videos and work more on realising your goals.&lt;/p&gt;

&lt;p&gt;To conclude, don’t beat yourself too much on what to eat and what not to eat. It’s all about finding a balance- eating healthy and still satisfying your desires when it comes knocking. Contact me, &lt;a href="https://darrenainsworth.wordpress.com/"&gt;Darren Ainsworth&lt;/a&gt; for more on diet and healthy eating.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original Source:&lt;a href="https://getjoys.net/health/healthy-eating-lifestyle/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

</description>
      <category>darrenainsworth</category>
      <category>healthydiet</category>
      <category>healthtips</category>
      <category>healthcare</category>
    </item>
    <item>
      <title>Solution: Maximum Points You Can Obtain from Cards</title>
      <author>seanpgallivan</author>
      <pubDate>Tue, 11 May 2021 09:35:04 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-points-you-can-obtain-from-cards-2no</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-points-you-can-obtain-from-cards-2no</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/discuss/1202397"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1423-medium-maximum-points-you-can-obtain-from-cards"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/"&gt;Leetcode Problem #1423 (&lt;em&gt;Medium&lt;/em&gt;): Maximum Points You Can Obtain from Cards&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are several cards &lt;strong&gt;arranged in a row&lt;/strong&gt;, and each card has an associated number of points The points are given in the integer array &lt;code&gt;cardPoints&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In one step, you can take one card from the beginning or from the end of the row. You have to take exactly &lt;code&gt;k&lt;/code&gt; cards.&lt;/p&gt;

&lt;p&gt;Your score is the sum of the points of the cards you have taken.&lt;/p&gt;

&lt;p&gt;Given the integer array &lt;code&gt;cardPoints&lt;/code&gt; and the integer &lt;code&gt;k&lt;/code&gt;, return the &lt;em&gt;maximum score&lt;/em&gt; you can obtain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,2,3,4,5,6,1], k = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [2,2,2], k = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Regardless of which two cards you take, your score will always be 4.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [9,7,7,9,7,7,9], k = 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You have to take all the cards. Your score is the sum of points of all cards.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,1000,1], k = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You cannot take the card in the middle. Your best score is 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 5:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cardPoints = [1,79,80,1,1,1,200,1], k = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= cardPoints.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= cardPoints[i] &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= cardPoints.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Since we're forced to take &lt;strong&gt;K&lt;/strong&gt; amount of cards no matter what, we can solve this problem with a &lt;strong&gt;two-pointer system&lt;/strong&gt; with a &lt;strong&gt;sliding window&lt;/strong&gt; approach. Instead of counting the sum of the values &lt;em&gt;between&lt;/em&gt; the two pointers, we'll instead be counting the sum of the values &lt;em&gt;outside&lt;/em&gt; the sliding window.&lt;/p&gt;

&lt;p&gt;We can start by iterating through the first &lt;strong&gt;K&lt;/strong&gt; cards of our card list (&lt;strong&gt;C&lt;/strong&gt;) and finding the &lt;strong&gt;total&lt;/strong&gt; points. At this point, our reverse window will be the cards from &lt;strong&gt;i = K&lt;/strong&gt; to &lt;strong&gt;j = C.length - 1&lt;/strong&gt;. At each iteration, we'll slide the window backwards, removing one card from the left side (&lt;strong&gt;-C[i]&lt;/strong&gt;) and adding one card from the right side (&lt;strong&gt;+C[j]&lt;/strong&gt;) each time.&lt;/p&gt;

&lt;p&gt;We should keep track of the &lt;strong&gt;best&lt;/strong&gt; possible result at each iteration, then &lt;strong&gt;return best&lt;/strong&gt; once we reach the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--th9xg4Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ec3x0su.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--th9xg4Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ec3x0su.gif" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(K)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maxScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxScore&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>React Bootstrap 5</title>
      <author>MD Bootstrap</author>
      <pubDate>Tue, 11 May 2021 09:31:25 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/react-bootstrap-5-2bkb</link>
      <guid>https://dev.to/mdbootstrap/react-bootstrap-5-2bkb</guid>
      <description>&lt;p&gt;We just released  &lt;strong&gt;&lt;a href="https://www.producthunt.com/posts/react-bootstrap-5"&gt;React Bootstrap 5&lt;/a&gt;&lt;/strong&gt;  on Product Hunt.&lt;/p&gt;

&lt;p&gt;Only a few days after the stable release of Bootstrap 5 - we can integrate it with React 17.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RTL support&lt;/li&gt;
&lt;li&gt;Material Design 2.0 guidelines&lt;/li&gt;
&lt;li&gt;extensive docs &amp;amp; API&lt;/li&gt;
&lt;li&gt;700+ UI components &amp;amp; templates&lt;/li&gt;
&lt;li&gt;MIT license - free for personal &amp;amp; commercial use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you will enjoy it :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOEKc2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cbee6y5y3i92smfw5eg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOEKc2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cbee6y5y3i92smfw5eg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#npm-installation"&gt;
  &lt;/a&gt;
  NPM Installation
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before starting the project make sure to install Node LTS (12.x.x or higher). We are using yarn to start a project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to use package from npm you have to have a project with React. We recommend creating an app with create-react-app from react for beginners.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-react-app"&gt;
  &lt;/a&gt;
  Step 1: Create React App.
&lt;/h3&gt;

&lt;p&gt;We are using React 17+ version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create-react-app my-app or npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-navigate-to-apps-directory"&gt;
  &lt;/a&gt;
  Step 2:  Navigate to App's directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-bootstrap-5-installlation"&gt;
  &lt;/a&gt;
  React Bootstrap 5 installlation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setup-mdb"&gt;
  &lt;/a&gt;
  Step 1:  Setup MDB
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add mdb-react-ui-kit or npm i mdb-react-ui-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS import&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in your index.js file before the App.js file import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'mdb-react-ui-kit/dist/css/mdb.min.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Font Awesome&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in public/index.html file inside head section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://use.fontawesome.com/releases/v5.15.1/css/all.css" rel="stylesheet" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Roboto font&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line in public/index.html file inside head section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap" rel="stylesheet" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set font family in globally css file for example src/index.css inside src folder as in the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body { font-family: Roboto, Helvetica, Arial, sans-serif; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-launch-your-app"&gt;
  &lt;/a&gt;
  Step 2:  Launch Your App
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start or npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Magento Developer Experience Level</title>
      <author>Karl Gorman</author>
      <pubDate>Tue, 11 May 2021 09:09:39 +0000</pubDate>
      <link>https://dev.to/karlgorman6/magento-developer-experience-level-1b60</link>
      <guid>https://dev.to/karlgorman6/magento-developer-experience-level-1b60</guid>
      <description>&lt;p&gt;Experience is always a crucial factor for employers to hire a candidate for a particular job role. Just like any of the roles in software development companies, employers also put forth varying experience requirements depending on the type of position and role they will play. Here’s a brief description of each category:&lt;/p&gt;

&lt;p&gt;Junior&lt;br&gt;
Some software companies in Germany and other parts of the world hire career starters as Trainees or Junior Developers who have good theoretical knowledges as well as motivation and have performed exceptionally well during the interwies and execution of technical test task. Junior Magento developers work under the guidance of senior developers and gain practical software development experience.&lt;/p&gt;

&lt;p&gt;However, they ought to have basic knowledge of technologies associated with Magento eCommerce and aspects of testing. They should also be familiar with PHP, a programming language used for developing Magento 2 code. Additionally, as a Frontend developer in Magento development, one should be skillful in HTML, CSS, and JavaScript. They are subject to diligent and fruitful training by the experts or seniors so that they end up becoming the Perfect Magento website developer.&lt;/p&gt;

&lt;p&gt;Secondly, the essential attribute upon which candidates are selected for a junior position is their soft skills. In other words, they need to possess a professional working style, ethics and values, phenomenal client management and should be committed and dedicated to delivering quality work on time and meet the deadlines.&lt;/p&gt;

&lt;p&gt;Middle (2-3 Years Experience)&lt;br&gt;
In the case of middle positions, the leading e-Commerce companies in Germany demand 2-3 years of experience for the role of Magento developers. Middle developers should have good combination of soft skills and hard skills.&lt;/p&gt;

&lt;p&gt;At this level, developers for the Magento platform are supposed to be self-skilled in liaising with the design team. They are asked to be prominent in setting Magento 1x and 2x websites for clients. In addition, they should have excellent object-oriented programming knowledge, the ability to build modules, testing the performance of websites, and customizing extensions.&lt;/p&gt;

&lt;p&gt;To be selected for the role, one ought to hold the certificate of Magento development. In addition to technical soundness, it is the management skills of Magento employees that help them hit the jackpot and attain the position of senior or manager in the nearby future.&lt;/p&gt;

&lt;p&gt;Senior (5 Years Experience)&lt;br&gt;
The A-list eCommerce or software development companies in Germany require 5+ years of experience for the role of Senior Magento developer. The recruitment for Senior-level may happen in two ways. First is internal recruitment, that is, when middle developer is promoted to the senior-level based on his or her incredible performance for a consistent period. The second is external recruitment when the vacancy for the senior developer is filled from outside the organization.&lt;/p&gt;

&lt;p&gt;In the case of external hiring, employees determine the proficiency of the candidate in line with previous experience and knowledge about the Magento platform. The employers also consider the refrences of different projects that the candidate has worked on in a previous firm. Besides, management skills is another foremost aspect that helps to become a senior developer in a reputed enterprise in Germany and other parts of the world.&lt;/p&gt;

&lt;p&gt;Lead Developer ( min. 7 Years Experience)&lt;br&gt;
In comparison to junior, middle and senior PHP developer positions, vacancies for Lead developer are less in number. They should have hands-on experience working on different aspects of Magento development, including core PHP, HTML, CSS, MySQL, JavaScript &amp;amp; Query, and plugins.&lt;br&gt;
&lt;a href="https://chudovo.com/magento-developer/"&gt;https://chudovo.com/magento-developer/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>magento</category>
      <category>software</category>
      <category>devops</category>
    </item>
    <item>
      <title>_b00t_ - a startup environment</title>
      <author>Brian Horakh</author>
      <pubDate>Tue, 11 May 2021 08:47:40 +0000</pubDate>
      <link>https://dev.to/elasticdotventures/b00t-a-startup-environment-298</link>
      <guid>https://dev.to/elasticdotventures/b00t-a-startup-environment-298</guid>
      <description>&lt;p&gt;The idea behind &lt;em&gt;b00t&lt;/em&gt; is a framework to build a startup properly and provide tooling &amp;amp; infrastructure, devops pipeline, vs code environments, "startup kit", mostly python &amp;amp; typescript with optional libraries such as ai, crypto, ecommerce, etc. necessary for building &lt;em&gt;and&lt;/em&gt; testing &lt;em&gt;and&lt;/em&gt; deploying those.&lt;/p&gt;

&lt;p&gt;I'm still very early into the process, I'm presently building heavily into the Azure Cloud,  OpenID and the authentication middleware in Vue.JS, using the Vittesse framework.  The final product can give you a Vue.JS interface to push a button that runs an authenticated function, and then builds a plurality of messaging layers MQTT, Redis, etc. At least that's the dream.&lt;/p&gt;

&lt;p&gt;Presently the docker and fzf menuing system is coming along nicely.  This is a massive cloud-stack span of knowledge will ultimately come together in a crescendo of pre-configured bash scripting &amp;amp; menuing environment, thereby compressing the first 100 hours of action required for "creating a startup" into a few commands and reducing operational costs substantially by starting from a functional template.  &lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/elasticdotventures/_b00t_"&gt;http://github.com/elasticdotventures/_b00t_&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>pointers</title>
      <author>Thilak</author>
      <pubDate>Tue, 11 May 2021 08:32:55 +0000</pubDate>
      <link>https://dev.to/221910302004/pointers-24mf</link>
      <guid>https://dev.to/221910302004/pointers-24mf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  pointers:
&lt;/h1&gt;

&lt;p&gt;A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before using it to store any variable address. The general form of a pointer variable declaration is −&lt;/p&gt;

&lt;p&gt;syntax:&lt;/p&gt;

&lt;p&gt;type *var-name;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;int main () {&lt;/p&gt;

&lt;p&gt;int  var = 20; &lt;br&gt;
   int  ip;        &lt;/p&gt;

&lt;p&gt;ip = &amp;amp;var;  &lt;/p&gt;

&lt;p&gt;printf("Address of var variable: %x\n", &amp;amp;var  );&lt;/p&gt;

&lt;p&gt;/* address stored in pointer variable */&lt;br&gt;
   printf("Address stored in ip variable: %x\n", ip );&lt;/p&gt;

&lt;p&gt;/* access the value using the pointer */&lt;br&gt;
   printf("Value of *ip variable: %d\n", *ip );&lt;/p&gt;

&lt;p&gt;return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-pointers"&gt;
  &lt;/a&gt;
  Types of Pointers
&lt;/h1&gt;

&lt;p&gt;There are different types of pointers which are as follows −&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Null pointer

Void pointer

Wild pointer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;1.Null Pointer:&lt;/p&gt;

&lt;p&gt;You create a null pointer by assigning the null value at the time of pointer declaration.&lt;/p&gt;

&lt;p&gt;This method is useful when you do not assign any address to the pointer. A null pointer always contains value 0.&lt;/p&gt;

&lt;p&gt;syntax:&lt;/p&gt;

&lt;p&gt;Begin.&lt;br&gt;
   Declare a pointer p of the integer datatype.&lt;br&gt;
      Initialize *p= NULL.&lt;br&gt;
   Print “The value of pointer is”.&lt;br&gt;
      Print the value of the pointer p.&lt;br&gt;
End.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;br&gt;
int main() {&lt;br&gt;
   int *p= NULL;//initialize the pointer as null.&lt;br&gt;
   printf("The value of pointer is %u",p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.Void Pointer:&lt;/p&gt;

&lt;p&gt;It is a pointer that has no associated data type with it. A void pointer can hold addresses of any type and can be typecast to any type.&lt;/p&gt;

&lt;p&gt;It is also called a generic pointer and does not have any standard data type.&lt;/p&gt;

&lt;p&gt;It is created by using the keyword void.&lt;/p&gt;

&lt;p&gt;syntax:&lt;br&gt;
Begin&lt;br&gt;
   Declare a of the integer datatype.&lt;br&gt;
      Initialize a = 7.&lt;br&gt;
   Declare b of the float datatype.&lt;br&gt;
      Initialize b = 7.6.&lt;br&gt;
   Declare a pointer p as void.&lt;br&gt;
   Initialize p pointer to a.&lt;br&gt;
   Print “Integer variable is”.&lt;br&gt;
      Print the value of a using pointer p.&lt;br&gt;
   Initialize p pointer to b.&lt;br&gt;
   Print “Float variable is”.&lt;br&gt;
      Print the value of b using pointer p&lt;br&gt;
End.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include&lt;br&gt;
int main() {&lt;br&gt;
   int a = 7;&lt;br&gt;
   float b = 7.6;&lt;br&gt;
   void *p;&lt;br&gt;
   p = &amp;amp;a;&lt;br&gt;
   printf("Integer variable is = %d", ( (int) p) );&lt;br&gt;
   p = &amp;amp;b;&lt;br&gt;
   printf("\nFloat variable is = %f", ( (float) p) );&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.Wild Pointer:&lt;/p&gt;

&lt;p&gt;Wild pointers are also called uninitialized pointers. Because they point to some arbitrary memory location and may cause a program to crash or behave badly.&lt;/p&gt;

&lt;p&gt;syntax:&lt;br&gt;
include &lt;br&gt;
int main(){&lt;br&gt;
   int *p; //wild pointer&lt;br&gt;
   printf("\n%d",*p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;example:&lt;br&gt;
include &lt;br&gt;
int main(){&lt;br&gt;
   int *p; //wild pointer&lt;br&gt;
   printf("\n%d",*p);&lt;br&gt;
   return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>A Comprehensive Guide To JavaScript Design Patterns</title>
      <author>Rahul</author>
      <pubDate>Tue, 11 May 2021 08:24:16 +0000</pubDate>
      <link>https://dev.to/jainrahul/a-comprehensive-guide-to-javascript-design-patterns-2h7d</link>
      <guid>https://dev.to/jainrahul/a-comprehensive-guide-to-javascript-design-patterns-2h7d</guid>
      <description>&lt;p&gt;Design Pattern is a widely acknowledged concept in the software engineering industry in terms of the benefits it brings to areas of code-reuse and maintainability. As a software developer, you likely stumble upon this term at one point. Unsurprisingly, without even knowing it, the chances are that you might have already implemented them somewhere in the development journey.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;design pattern&lt;/strong&gt; is used to identify reusable solutions that can be applied to recurring problems that software developers commonly face during software design. They represent time-tested solutions and best practices adopted by object-oriented software developers over time.&lt;/p&gt;

&lt;p&gt;This blog will be your guide to everything you need to know about popular JavaScript design patterns. The only prerequisite is that you should have basic knowledge of JavaScript and Object-Oriented Programming concepts.&lt;/p&gt;

&lt;p&gt;Starting with the historical perspective, we will do an in-depth exploration of various common JavaScript design patterns from an object-oriented view. By the end, you will be accustomed to various &lt;a href="https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;JavaScript design patterns&lt;/a&gt; along with a basic idea of their implementation.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history-of-design-pattern"&gt;
  &lt;/a&gt;
  History of Design Pattern
&lt;/h2&gt;

&lt;p&gt;Since its inception, the concept of design pattern has been around in the programming world. But it was not formalized till 1994 when one of the most influential work was published called “Design Patterns: Elements Of Reusable Object-Oriented Software” – written by &lt;a href="https://en.wikipedia.org/wiki/Erich_Gamma"&gt;Erich Gamma&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/w/index.php?title=Richard_Helm&amp;amp;action=edit&amp;amp;redlink=1"&gt;Richard Helm&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Ralph_Johnson"&gt;Ralph Johnson&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/John_Vlissides"&gt;John Vlissides&lt;/a&gt; – a group that became known as the Gang of Four (or GoF).&lt;/p&gt;

&lt;p&gt;In this book, 23 object-oriented design patterns are featured. Since then, the “pattern approach” became popular in the software engineering industry, and after that, dozens of other patterns have been discovered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNwjquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/software-engineering.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNwjquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/software-engineering.png" alt="object-oriented design patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-design-pattern"&gt;
  &lt;/a&gt;
  What is a Design Pattern?
&lt;/h2&gt;

&lt;p&gt;Design patterns can be considered pre-made blueprint applied to solve a particular design problem. It is not a finished piece of code that can be directly applied to your program. But rather, it is more like a template or description that can give you an idea of approaching a problem and inspiring solutions. Hence, the code for the two separate programming scenarios, implementing the same pattern can be different.&lt;/p&gt;

&lt;p&gt;Now, if you are wondering how a pattern gets discovered, it’s simple. When the same solution gets repeated over and over, someone will eventually recognize it, put a name to it, and then describe the solution in detail. That’s how a pattern gets discovered. Definitely, they were not forged overnight.&lt;/p&gt;

&lt;p&gt;A design pattern is often confused with algorithms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-a-design-pattern"&gt;
  &lt;/a&gt;
  Structure of a Design Pattern
&lt;/h3&gt;

&lt;p&gt;As mentioned in the above section, the author of a design pattern provides documentation. Even though there is no strict agreement among the pattern community regarding the documentation template structure, the following are the sections that are usually present.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vlo5cNIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/4ddbcc85-89bd-4e25-acfc-0e664274cf5b/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vlo5cNIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/4ddbcc85-89bd-4e25-acfc-0e664274cf5b/" alt="Capture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some other sections are Applicability, Collaborations, Consequences, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-patterns"&gt;
  &lt;/a&gt;
  Why Patterns?
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, we already use patterns every day. They help us solve recurring design problems. But is it necessary to spend time learning them? Let’s look into a few key benefits that design patterns grant us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Avoid reinventing the wheel:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the frequently faced design problems already have a well-defined solution that is associated with a pattern. Patterns are proven solutions that can speed up development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Codebase Maintenance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Patterns help in implementing DRY(Do not Repeat Yourself) – the concept which helps to prevent your codebase from growing large and unwieldy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Easily reused:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reusing patterns assists in preventing minor subtle issues that can cause major problems in the application development process. This also improves code readability for coders and architects familiar with the patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Enables efficient communication:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Patterns add to a developer’s vocabulary. This allows developers to communicate using well-known, well-understood names for software interactions, making communication faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Improve your object-oriented skills:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now even if you never encounter any of these problems, learning patterns can give you insights into various approaches to solving problems using object-oriented principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criticism-of-patterns"&gt;
  &lt;/a&gt;
  Criticism of Patterns
&lt;/h3&gt;

&lt;p&gt;Over time design patterns have also received a fair share of criticism. Let’s peek into the popular arguments against patterns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Increases Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inappropriate use of patterns creates undesired complexity. This is a problem suffered by many novices, who try to apply the pattern wherever they can think of, even in situations where simpler code would do just fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Reduced Relevance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In “&lt;em&gt;Design Patterns in Dynamic Languages&lt;/em&gt;,” Peter Norvig points out that over half of the design patterns in the 1994 book (written by GoF) are workarounds for missing language features. In many cases, patterns just become kludges that gave the programming language the much-needed super-abilities it lacked then.&lt;/p&gt;

&lt;p&gt;As the language features, frameworks, and libraries evolved, there is no reason to use a few patterns anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Lazy Design:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As suggested by Paul Graham in “Revenge of the Nerds” (2002), patterns are a form of lazy design, when the developer is not focused on the problem requirement at hand. Instead of creating a new and appropriate design for the problem, they might just reuse the existing design patterns because they think they should.&lt;/p&gt;

&lt;p&gt;So far, we have seen what design patterns are and also discussed their advantages and disadvantages. Now it’s time for in-depth exploration of various types of JS design patterns available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the upcoming sessions, we will explore object-oriented JavaScript implementations of both classical and modern design patterns. It is to be noted that a few of the classic design patterns mentioned in the GoF book have reduced relevance over time. Hence they will be omitted, and modern patterns from sources like &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Addy Osmani’s Learn JavaScript Design Patterns&lt;/a&gt; will be included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-design-patterns"&gt;
  &lt;/a&gt;
  JavaScript Design Patterns
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most in-demand programming languages for web development today. As we will be concentrating on JavaScript design patterns in this article, let’s just have a quick recap of essential JavaScript features that will aid in smoother understanding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Flexible with programming styles&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
JavaScript has support for procedural, object-oriented, and functional programming styles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Supports First-class Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This means functions can be passed as arguments to other functions just like a variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Prototype-based Inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Though JavaScript supports objects, unlike other OOPs languages, JavaScript doesn’t have the concept of class or class-based inheritance in its basic form. Instead, it uses something called prototype-based or instance-based inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In ES6, even though the keyword “class” is introduced, it still utilizes prototype-based inheritance in the hood.&lt;/p&gt;

&lt;p&gt;To know more about defining “class” using JavaScript, do check out this useful post by Stoyan Stefanov on &lt;a href="https://www.phpied.com/3-ways-to-define-a-javascript-class/"&gt;three ways to define a JavaScript class&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#categories-of-design-pattern"&gt;
  &lt;/a&gt;
  Categories of Design Pattern
&lt;/h3&gt;

&lt;p&gt;Based on intent, the JavaScript design pattern can be categorized into 3 major groups:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Creational Design Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns focus on handling object creation mechanisms. A basic object creation approach in a program can lead to an added complexity. Creational JS design patterns aim to solve this problem by controlling the creation process.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Constructor, Factory, Prototype, Singleton, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Structural Design Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns are concerned with object composition. They explain simple ways to assemble objects and classes into larger structures. They help ensure that when one part of a system changes, the entire structure of the system doesn’t need to do the same, keeping them flexible and efficient.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Module, Decorator, Facade, Adapter, Proxy, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Behavioral Design Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These patterns focus on improving the communication and assignment of responsibilities between dissimilar objects in a system.&lt;/p&gt;

&lt;p&gt;Few patterns that fall under this category are – Chain of Responsibility, Command, Observer, Iterator, Strategy, Template, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCLRYrmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Behavioral-Design-Patterns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCLRYrmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Behavioral-Design-Patterns.png" alt="Behavioral Design Patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this understanding of the categorization, let’s examine each JavaScript design pattern.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creational-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creational Design Patterns&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Constructor Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The constructor pattern is one of the most simple, popular, and modern JS design patterns. As suggested by the name, the purpose of this pattern is to aid constructor creation.&lt;/p&gt;

&lt;p&gt;In Addy’s words-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A constructor is a special method used to initialize a newly created object once the memory has been allocated for it. In JavaScript, as almost everything is an object, we’re most often interested in object constructors.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the below code, we have defined a function/class Person with attributes name and age. The getDetails() method will print the name and age of the person in the format –&lt;/p&gt;

&lt;p&gt;“Name is age years old!”&lt;/p&gt;

&lt;p&gt;The syntax is given in 2 formats – (a) traditional function-based syntax and (b) EC6 class syntax.&lt;/p&gt;

&lt;p&gt;Then, we instantiate an object for the class Person by invoking the constructor method using the new keyword and passing respective attribute values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//  a) Traditional "function" based syntax

function Person(name,age) {
        this.name = name;
        this.age = age;
        this.getDetails = function () {
            console.log(`${this.name} is ${this.age} years old!`);

    }
}

//  b) ES6 "class" syntax

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.getDetails = function () {
            console.log(`${this.name} is ${this.age} years old!`);
        };
    }
}

//Creating new instance of Person
const personOne = new Person('John',20);
personOne.getDetails(); // Output - “John is 20years old!”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Factory Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Factory pattern is another creational pattern concerned with creating objects but using some sort of generic interface. According to GoF’s book, this pattern has the following responsibility.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Define an interface for creating an object, but let subclasses decide which class to instantiate.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This pattern is typically used when we need to handle object groups that share similar characters yet are different through appropriate custom calls. An example would bring more clarity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWaER7cY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Factory-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWaER7cY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Factory-Pattern.png" alt="Factory Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Though the definition particularly mentions that an interface needs to be defined, we don’t have interfaces in JavaScript. Therefore, we are going to implement it using an alternative way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, the &lt;strong&gt;shapeFactory&lt;/strong&gt; constructor is responsible for creating new objects of the constructors’ Rectangle, Square, and Circle. The &lt;strong&gt;createShape()&lt;/strong&gt; inside &lt;strong&gt;shapeFactory&lt;/strong&gt; takes in parameters, depending on which it delegates the responsibility of object instantiation to the respective class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Factory method for creating new shape instances
function shapeFactory(){
    this.createShape = function (shapeType) {

        var shape;
        switch(shapeType){
            case "rectangle":
                shape = new Rectangle();
                break;
            case "square":
                shape = new Square();
                break;
            case "circle":
                shape = new Circle();
                break;    
            default:
                shape = new Rectangle();
                break;
        }
        return shape;
    }
}

// Constructor for defining new Rectangle
var Rectangle = function () {
    this.draw = function () {
        console.log('This is a Rectangle');
    }
};

// Constructor for defining new Square
var Square = function () {
    this.draw = function () {
        console.log('This is a Square');
    }
};

// Constructor for defining new Circle
var Circle= function () {
    this.draw = function () {
        console.log('This is a Circle);
    }
};

var factory = new shapeFactory();
//Creating instance of factory that makes rectangle,square,circle respectively
var rectangle = factory.createShape('rectangle');
var square = factory.createShape('square');
var circle= factory.createShape('circle');

rectangle.draw();
square.draw();
circle.draw();

/*
  OUTPUT

  This is a Rectangle
  This is a Square
  This is a Circle

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Prototype Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An object that supports cloning is called a &lt;strong&gt;prototype&lt;/strong&gt;. Using the prototype pattern, we can instantiate new objects based on a template of an existing object through cloning.&lt;/p&gt;

&lt;p&gt;As the prototype pattern is based on prototypal inheritance, we can utilize the native prototypical strengths of JavaScript. In the previous JS design patterns, we were trying to imitate features of other languages in JavaScript, which is not the case here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0X5JXhEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Prototype-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0X5JXhEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Prototype-Pattern.png" alt="Prototype design Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have a prototype class car, which is cloned to create a new object myCar using &lt;code&gt;Object.create&lt;/code&gt; feature defined by ES5 standard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Prototype Class
const car = {
    noOfWheels: 4,
    start() {
      return 'started';
    },
    stop() {
      return 'stopped';
    },
  };


//using Object.create to create clones - as recommended by ES5 standard
  const myCar = Object.create(car, { owner: { value: 'John' } });

  console.log(myCar.__proto__ === car); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Singleton Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The singleton pattern is a creational JavaScript design pattern that restricts the instantiation of a class to a single object. It creates a new instance of the class if one doesn’t exist and if existing already, it simply returns a reference to it. It is also known as the Strict Pattern.&lt;/p&gt;

&lt;p&gt;A singleton pattern solves two problems at the same time, violating the Single Responsibility Principle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guarantees that there is only a single instance of a class.&lt;/li&gt;
&lt;li&gt;Provide a global access point to this instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvDIUGv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Singleton-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvDIUGv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Singleton-Pattern.png" alt="Singleton Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A practical example would be a single database object shared by different parts of the program. There is no need to create a new instance of a database when one is already existing.&lt;/p&gt;

&lt;p&gt;One drawback of the pattern is the difficulty associated with testing. There are hidden dependencies objects, which are difficult to single out to test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Singleton class
var Singleton = (function () {
    var instance;

    function createDBInstance() {
        var object = new Object("I am the DataBase instance");
        return object;
    }

    return {
        getDBInstance: function () {
            if (!instance) {
                instance = createDBInstance();
            }
            return instance;
        }
    };
})();

function run() {

    var instance1 = Singleton.getDBInstance();
    var instance2 = Singleton.getDBInstance();

    console.log("Same instance? " + (instance1 === instance2));  
}

run(); // OUTPUT = "Same instance? true"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#structural-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Structural Design Patterns&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Adapter Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The adapter is a structural JS design pattern that allows objects or classes with incompatible interfaces to collaborate. It matches interfaces of different classes or objects; therefore, they can work together despite incompatible interfaces. It is also referred to as the Wrapper pattern.&lt;/p&gt;

&lt;p&gt;A real-world analogy would be trying to connect a projector to a laptop. The projector might have a VGA plug, and the laptop might have an HDMI plug. So we require an adapter that can make these two unrelated interfaces compatible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeVn3_0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Adapter-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeVn3_0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Adapter-Pattern.png" alt="Adapter Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern will include a class that will be responsible for joining the incompatible interfaces/functionalities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below code shows an online flight ticket pricing calculation system. There is an old interface that performs pricing calculations in one way. There is a new, improved interface with additional features like user identification and improvised calculations.&lt;/p&gt;

&lt;p&gt;An adapter class is introduced, which allows the client program to continue working without any API changes by matching the old interface with the new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// old interface
function TicketPrice() {
    this.request = function(start, end, overweightLuggage) {
        // price calculation code...
        return "$150.34";
    }
}

// new interface
function NewTicketPrice() {
    this.login = function(credentials) { /* process credentials */ };
    this.setStart = function(start) { /* set start point */ };
    this.setDestination = function(destination) { /* set destination */ };
    this.calculate = function(overweightLuggage) { 
        //price calculation code...
        return "$120.20"; 
    };
}

// adapter interface
function TicketAdapter(credentials) {
    var pricing = new NewTicketPrice();

    pricing.login(credentials);

    return {
        request: function(start, end, overweightLuggage) {
            pricing.setStart(start);
            pricing.setDestination(end);
            return pricing.calculate(overweightLuggage);
        }
    };
}

var pricing = new TicketPrice();
var credentials = { token: "30a8-6ee1" };
var adapter = new TicketAdapter(credentials);

// original ticket pricing and interface
var price = pricing.request("Bern", "London", 20);
console.log("Old price: " + price);

// new ticket pricing with adapted interface
price = adapter.request("Bern", "London", 20);
console.log("New price: " + price);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Composite Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Composite is a structural JavaScript design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects. According to GoF’s book, this pattern composes objects into tree structures to represent part-whole hierarchies. It is also known as a partitioning JS design pattern.&lt;/p&gt;

&lt;p&gt;The perfect example of this pattern would be tree control. The nodes of the tree either contain an individual object (leaf node) or a group of objects (a subtree of nodes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQc0wRvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Composite-Pattern-1024x842.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQc0wRvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Composite-Pattern-1024x842.png" alt="Composite Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modern JS frameworks like React and Vue use the composite pattern to build user interfaces. The entire view is divided into components. Each component can contain multiple components. This method is preferred because of the ease of development and scalability compared to fewer monolithic objects. The composite pattern reduces the complexity of a system by allowing you to work with small objects and build them up into larger ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A file-folder(directory) structure is explained in the below code. Here a directory can have two types of entities, a file or another directory, which can contain files or directories and so on.&lt;br&gt;&lt;br&gt;
We have two classes – File and Directory. We can add or remove files in the Directory and also getFileName, and the display will list all file names inside the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function File(name) {
    this.name = name;
}

File.prototype.display = function () {
    console.log(this.name);
}

function Directory(name) {
    this.name = name;
    this.files = [];
}

Directory.prototype.add = function (file) {
    this.files.push(file);
}

Directory.prototype.remove = function (file) {
    for (let i = 0, length = this.files.length; i &amp;lt; length; i++) {
        if (this.files[i] === file) {
            this.files.splice(i, 1);
            return true;
        }
    }

    return false;
}

Directory.prototype.getFileName = function (index) {
    return this.files[index].name;
}

Directory.prototype.display = function() {
    console.log(this.name);
    for (let i = 0, length = this.files.length; i &amp;lt; length; i++) {
        console.log("   ", this.getFileName(i));
    }
}

directoryOne = new Directory('Directory One');
directoryTwo = new Directory('Directory Two');
directoryThree = new Directory('Directory Three');

fileOne = new File('File One');
fileTwo = new File('File Two');
fileThree = new File('File Three');

directoryOne.add(fileOne);
directoryOne.add(fileTwo);

directoryTwo.add(fileOne);

directoryThree.add(fileOne);
directoryThree.add(fileTwo);
directoryThree.add(fileThree);

directoryOne.display();
directoryTwo.display();
directoryThree.display();

/*
Directory One
    File One
    File Two
Directory Two
    File One
Directory Three
    File One
    File Two
    File Three
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Module Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module Pattern is another prevalent JavaScript design pattern for keeping our code clean, separated, and organized. A module is a piece of self-contained code that can be updated without affecting other components. As the concept of access modifier is not supported in JavaScript, the modules help in mimicking the behavior of private/public access hence providing encapsulation.&lt;/p&gt;

&lt;p&gt;The typical code structure will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function() {

    // declare private variables and/or functions

    return {
    // declare public variables and/or functions
    }

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have the flexibility of renaming like we have renamed addAnimal to add. A point to be noted is that we can’t invoke removeAnimal from an outside environment as it is dependent on the private property container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function AnimalContainter () {
    //private variables and/or functions
    const container = [];

    function addAnimal (name) {
    container.push(name);
    }

    function getAllAnimals() {
    return container;
    }

    function removeAnimal(name) {
    const index = container.indexOf(name);
    if(index &amp;lt; 1) {
    throw new Error('Animal not found in container');
    }
    container.splice(index, 1)
    }

    return {
    public variables and/or functions
    add: addAnimal,
    get: getAllAnimals,
    remove: removeAnimal
    }
    }

    const container = AnimalContainter();
    container.add('Hen');
    container.add('Goat');
    container.add('Sheep');

    console.log(container.get()) //Array(3) ["Hen", "Goat", "Sheep"]
    container.remove('Sheep')
    console.log(container.get()); //Array(2) ["Hen", "Goat"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Decorator Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Decorators are a structural JS design pattern that aims to promote code reuse. This pattern allows behavior to be added to an individual object dynamically, without affecting the behavior of other objects from the same class. Decorators can also provide a flexible alternative to subclassing for extending functionality.&lt;/p&gt;

&lt;p&gt;Since JavaScript allows us to add methods and properties to objects dynamically, implementing this JavaScript pattern is a very straight-forward process. Do check out Addy Osmani’s post to know more about &lt;a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"&gt;Decorators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Let’s take a look at the simple implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A vehicle constructor
function Vehicle( vehicleType ){

    // some sane defaults
    this.vehicleType = vehicleType || "car";
    this.model = "default";
    this.license = "00000-000";

}

// Test instance for a basic vehicle
var testInstance = new Vehicle( "car" );
console.log( testInstance );

// Outputs:
// vehicle: car, model:default, license: 00000-000

// Lets create a new instance of vehicle, to be decorated
var truck = new Vehicle( "truck" );

// New functionality we're decorating vehicle with
truck.setModel = function( modelName ){
    this.model = modelName;
};

truck.setColor = function( color ){
    this.color = color;
};

// Test the value setters and value assignment works correctly
truck.setModel( "CAT" );
truck.setColor( "blue" );

console.log( truck );

// Outputs:
// vehicle:truck, model:CAT, color: blue

// Demonstrate "vehicle" is still unaltered
var secondInstance = new Vehicle( "car" );
console.log( secondInstance );

// Outputs:
// vehicle: car, model:default, license: 00000-000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Facade Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The facade pattern consists of a facade, which is an object that acts as a “front-face” for a much complex structural code. Developers normally use this pattern when a system is very complex or difficult to understand to provide a simpler interface to the client. This helps to create an abstraction layer between what is shown publicly and what is implemented behind the curtain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9M5y3Znt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Facade-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9M5y3Znt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Facade-Pattern.png" alt="Facade Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here Mortgage is a facade for Bank, Credit, and Background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Mortgage = function(name) {
        this.name = name;
    }

    Mortgage.prototype = {

        applyFor: function(amount) {
            // access multiple subsystems...
            var result = "approved";
            if (!new Bank().verify(this.name, amount)) {
                result = "denied";
            } else if (!new Credit().get(this.name)) {
                result = "denied";
            } else if (!new Background().check(this.name)) {
                result = "denied";
            }
            return this.name + " has been " + result +
                   " for a " + amount + " mortgage";
        }
    }

    var Bank = function() {
        this.verify = function(name, amount) {
            // complex logic ...
            return true;
        }
    }

    var Credit = function() {
        this.get = function(name) {
            // complex logic ...
            return true;
        }
    }

    var Background = function() {
        this.check = function(name) {
            // complex logic ...
            return true;
        }
    }

    function run() {
        var mortgage = new Mortgage("Joan Templeton");
        var result = mortgage.applyFor("$100,000");

        alert(result);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Proxy Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, the Proxy Pattern provides a surrogate or placeholder for another object to control access, reduce cost, and reduce complexity. The proxy could interface to anything – a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9jGDAif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Proxy-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9jGDAif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Proxy-Pattern.png" alt="Proxy Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we will create a proxy object that ‘stands in’ for the original object. The proxy interface will be the same as that of the original object so that the client may not even be aware they are dealing with a proxy rather than the real object. In the proxy, extra functionality can be provided, for example, caching, checking some preconditions, etc.&lt;/p&gt;

&lt;p&gt;There are three common situations in which the Proxy pattern is applicable.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;virtual proxy&lt;/strong&gt; is a placeholder for expensive to create or resource-intensive objects. &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;remote proxy&lt;/strong&gt; controls access to the remote object.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;protective proxy&lt;/strong&gt; controls access rights to a sensitive master object. The caller’s access permissions are checked prior to forwarding the request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code will aid you in getting a gist of Proxy implementation. We have an external API FlightListAPI for accessing Flight Details databases. We will create a proxy FlightListProxy which will act as the interface through which the client can access the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*  External API*/
var FlightListAPI = function() {
//creation
};

FlightListAPI.prototype = {
getFlight: function() {
    // get master list of flights
    console.log('Generating flight List');
},

searchFlight: function(flightDetails) {
    // search through the flight list based on criteria
    console.log('Searching for flight');
},

addFlight: function(flightData) {
    // add a new flight to the database
    console.log('Adding new flight to DB');
}
};

// creating the proxy
var FlightListProxy = function() {
    // getting a reference to the original object
this.flightList = new FlightListAPI();
};

FlightListProxy.prototype = {
getFlight: function() {
    return this.flightList.getFlight();
},

searchFlight: function(flightDetails) {
    return this.flightList.searchFlight(flightDetails);
},

addFlight: function(flightData) {
    return this.flightList.addFlight(flightData);
},

};

console.log("----------With Proxy----------")
const proxy = new FlightListProxy()
console.log(proxy.getFlight());
/*

OUTPUT

----------With Proxy----------
Generating flight List


*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#behavioural-design-pattern"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Behavioural Design Pattern&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Chain of Responsibility Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a behavioral JavaScript design pattern that creates a chain of receiver objects for a request. This pattern promotes loose coupling. We can avoid coupling the sender of a request to a receiver, and more than one receiver can handle the request.&lt;/p&gt;

&lt;p&gt;The receiving objects will be linked together, and they can choose to act on the request and/or pass it to the next receiver object. It is also easy to add new receiver objects to the chain.&lt;/p&gt;

&lt;p&gt;Event Handling in DOM is one implementation of the Chain of Responsibility pattern.&lt;/p&gt;

&lt;p&gt;Once an event is fired, it propagates through the DOM hierarchy, calling every event handler it runs into until it finds the appropriate “event listener” and then acts on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us consider the scenario of an ATM. When we request an amount for withdrawal, the machine processes the request and dispends the amount as combinations of available note denominations ($100, $50, $20, $10, $5, $1).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIy3olX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/pasted-image-0-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIy3olX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/pasted-image-0-15.png" alt="ATM Cash Withdrawl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this code on requesting an amount, a Request object is created. This object then invokes a series of get calls, which are chained together, each one handling a particular denomination. Finally, the user receives the amount as a note combination which satisfies the amount value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Request = function(amount) {
    this.amount = amount;
    console.log("Request Amount:" +this.amount);
}

Request.prototype = {
    get: function(bill) {
        var count = Math.floor(this.amount / bill);
        this.amount -= count * bill;
        console.log("Dispense " + count + " $" + bill + " bills");
        return this;
    }
}

function run() {
    var request = new Request(378); //Requesting amount
    request.get(100).get(50).get(20).get(10).get(5).get(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Command Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command Pattern is a behavioral JS design pattern that aims to encapsulate actions or operations as objects. This pattern is useful in scenarios where we want to decouple or split the objects executing the commands from objects issuing the commands. Command objects allow you to centralize the processing of these actions/operations.&lt;/p&gt;

&lt;p&gt;The four participants involved in the command pattern are command, receiver, invoker, and client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Command&lt;/strong&gt; – A command object knows about the receiver and invokes a method of the receiver. Values for parameters of the receiver method are stored in the command.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Client&lt;/strong&gt; – The client’s responsibility is to create the command object and pass it to the invoker.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Invoker&lt;/strong&gt; – The invoker receives the command object from the client, and it’s only responsibility is to call (or invoke) a command.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Receiver&lt;/strong&gt; – Then, the receiver receives the command and looks for a method to call based on the received command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In our example, the calculator object contains four methods – add, subtract, divide, and multiply. Command objects define a method execute, which has the responsibility of invoking a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var calculator = {
    add: function(x, y) {
        return x + y;
    },
    subtract: function(x, y) {
        return x - y;
    },
    divide: function(x,y){
        return x/y;
    },
    multiply: function (x,y){
        return x*y;
    }
}
var manager = {
    execute: function(name, args) {
        if (name in calculator) {
            return calculator[name].apply(calculator, [].slice.call(arguments, 1));
        }
        return false;
    }
}
console.log(manager.execute("add", 5, 2)); // prints 7
console.log(manager.execute("multiply", 2, 4)); // prints 8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Observer Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Observer is a behavioral JS design pattern that lets you define a subscription mechanism to notify multiple objects (observers) about any events that happen to the object (subject) they’re observing. This pattern is also called Pub/Sub, short for Publication/Subscription. It defines a one-to-many dependency between objects, promotes loose coupling, and facilitates good object-oriented design.&lt;/p&gt;

&lt;p&gt;The observer pattern is the foundation of event-driven programming. We write event handler functions that will be notified when a certain event fires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKxo3qri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Observer-Pattern-1024x380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKxo3qri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Observer-Pattern-1024x380.png" alt="Observer Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have set up a Subject function Click and extended it using the prototype. We have created methods to subscribe and unsubscribe objects to the Observer collection, which is handled by the clickHandler function. Also, there is a fire method to propagate any changes in the Subject class object to the subscribed Observers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Click() {
    this.observers = [];  // observers
}

Click.prototype = {

    subscribe: function(fn) {
        this.observers.push(fn);
    },

    unsubscribe: function(fn) {
        this.observers = this.observers.filter(
            function(item) {
                if (item !== fn) {
                    return item;
                }
            }
        );
    },

    fire: function(o, thisObj) {
        var scope = thisObj;
        this.observers.forEach(function(item) {
            item.call(scope, o);
        });
    }
}

function run() {

    var clickHandler = function(item) { 
        console.log("Fired:" +item);
    };

    var click = new Click();

    click.subscribe(clickHandler);
    click.fire('event #1');
    click.unsubscribe(clickHandler);
    click.fire('event #2');
    click.subscribe(clickHandler);
    click.fire('event #3');

}

/* OUTPUT:

Fired:event #1
Fired:event #3

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Iterator Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Iterator Pattern lets you access and traverses through elements of an aggregate object (collection) sequentially without exposing its underlying representation. This pattern allows JavaScript developers to design looping constructs that are far more flexible and sophisticated. In ES6, Iterator and Generators are introduced, which further aids in the Iteration pattern implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a simple straight-forward code for front-to-back iteration. We have defined two methods for the Iterator – hasNext() and next().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = [1,"hello",false,99.8];

function Iterator(items){
  this.items = items;
  this.index = 0; // to start from beginning position of array
}

Iterator.prototype = {
  // returns true if a next element is available
  hasNext: function(){
    return this.index &amp;lt; this.items.length;
  },
  //returns next element
  next: function(){
    return this.items[this.index++]
  }
}

//Instantiate object for Iterator
const iterator =  new Iterator(items);
while(iterator.hasNext()){
  console.log(iterator.next());
}
/*
OUTPUT

1
hello
false
99.8

*/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Template Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The template pattern defines the skeleton of an algorithm in operation in terms of some high-level steps. These steps are themselves implemented by additional helper methods in the same class as the template method. The objects that implement these steps retain the original structure of the algorithm but have the option to redefine or adjust certain steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GX_V5XJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Template-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX_V5XJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Template-Pattern.png" alt="Template Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have an abstract class datastore that offers an interface to implement the template method by defining primitive steps for an algorithm. And we have a concrete MySQL class, which implements the primitive steps defined in the abstract class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // implement template method

var datastore = {
    process: function() {
        this.connect();
        this.select();
        this.disconnect();
        return true;
    }
};

function inherit(proto) {
    var F = function() { };
    F.prototype = proto;
    return new F();
}


function run() {
    var mySql = inherit(datastore);

    // implement template steps

    mySql.connect = function() {
        console.log("MySQL: connect step");
    };

    mySql.select = function() {
        console.log("MySQL: select step");
    };

    mySql.disconnect = function() {
        console.log("MySQL: disconnect step");
    };

    mySql.process();

}

run();
/* 

MySQL: connect step
MySQL: select step
MySQL: disconnect step

*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Strategy Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Strategy Patterns allows one of a family of algorithms to be selected on-the-fly at runtime. The pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable at run-time without client interference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMfvfujV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Strategy-Pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMfvfujV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/Strategy-Pattern.png" alt="Strategy Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have created a class Shipping which encapsulates all possible strategies for shipping a parcel – FedEx, UPS, and USPS. Using this pattern, we can swap the strategy during runtime and generate appropriate output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Strategy1 
function FedEx(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 2.99
  }
}

//Strategy2
function UPS(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 1.59
  }
}

//Strategy3
function USPS(){
  this.calculate = package =&amp;gt; {
    //calculations  happen here..
    return 4.5
  }
}

// encapsulation
function Shipping(){
  this.company = "";
  this.setStrategy = (company) =&amp;gt; {
    this.company=company;
  }
  this.calculate = (package) =&amp;gt;{
    return this.company.calculate(package);
  }
}

//usage
const fedex = new FedEx();
const ups = new UPS();
const usps = new USPS();

const package = { from: 'Alabama',to:'Georgia',weight:1.5};

const shipping = new Shipping();
shipping.setStrategy(fedex);
console.log("Fedex:" +shipping.calculate(package)); // OUTPUT =&amp;gt; "Fedex:2.99"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#antipatterns"&gt;
  &lt;/a&gt;
  Anti-Patterns
&lt;/h3&gt;

&lt;p&gt;While it’s important to know about design patterns, it is equally important to know about Anti-Patterns. If a design pattern can be considered as a best practice, an anti-pattern represents just the opposite.&lt;/p&gt;

&lt;p&gt;The term anti-pattern was coined in 1995 by Andrew Koenig. According to Koenig, an anti-pattern is a bad solution to a particular problem that resulted in a bad situation.&lt;/p&gt;

&lt;p&gt;Few examples of anti-patterns in JavaScript are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polluting the global namespace by defining a large number of variables in the global context&lt;/li&gt;
&lt;li&gt;Passing strings rather than functions to either setTimeout or setInterval as this triggers the use of eval() internally.&lt;/li&gt;
&lt;li&gt;Modifying the Object class prototype (this is a particularly bad anti-pattern) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To summarize, an anti-pattern is a bad design that is worthy of documenting. Knowledge about them will help you recognize such anti-patterns in your code and hence improve code quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-design-patterns-and-testing"&gt;
  &lt;/a&gt;
  Applying Design Patterns and Testing
&lt;/h2&gt;

&lt;p&gt;Once a design pattern has been implemented and validated, we need to ensure that it works across multiple browser and browser versions seamlessly. LambdaTest is a &lt;a href="https://www.lambdatest.com/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;cross browser testing&lt;/a&gt; platform for manual and automated cross browser testing. It includes more than 2000 real browsers &amp;amp; browser versions, and allows browser compatibility regression testing across all major browsers and browser versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7s12aPgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/cross-browser-testing-1024x480.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7s12aPgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/cross-browser-testing-1024x480.png" alt="cross browser testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also leverage &lt;a href="https://www.lambdatest.com/lt-browser?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Rahul-11052021&amp;amp;utm_term=Rahul"&gt;LT Browser&lt;/a&gt;, a developer friendly tool to perform a detailed analysis of the responsiveness of your design patterns across popular devices and viewports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUhqx6xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/responsiveness-1024x544.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUhqx6xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/03/responsiveness-1024x544.png" alt="test responsiveness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Design patterns represent some of the best practices adopted by experienced object-oriented software developers. They are time-tested solutions for various software design problems. In this article, we have explored common design patterns in JavaScript. Additionally, we also briefly discussed Anti-Patterns and how we can test websites with such patterns on LambdaTest platform. Hopefully, this chapter will enable you to get accustomed to various JavaScript design patterns. To dive deeper into the concept, do checkout &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Learn JavaScript Design Patterns&lt;/a&gt; by Addy Osmani.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>responsive</category>
    </item>
    <item>
      <title>Kubernetes: Apprentice Cookbook</title>
      <author>Antoine Veuiller</author>
      <pubDate>Tue, 11 May 2021 08:05:08 +0000</pubDate>
      <link>https://dev.to/aveuiller/kubernetes-apprentice-cookbook-4j6h</link>
      <guid>https://dev.to/aveuiller/kubernetes-apprentice-cookbook-4j6h</guid>
      <description>&lt;p&gt;You probably already heard of &lt;strong&gt;Kubernetes&lt;/strong&gt;, a powerful &lt;a href="https://www.redhat.com/en/topics/automation/what-is-orchestration"&gt;orchestrator&lt;/a&gt; that will ease deployment and automatically manage your applications on a set of machines, called a &lt;em&gt;Cluster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With great power comes great complexity, &lt;a href="https://www.theregister.com/2021/02/25/google_kubernetes_autopilot/"&gt;even in the eyes of Google&lt;/a&gt;. Thus, learning Kubernetes is oftentimes considered as cumbersome and complex, namely because of the number of new concepts you have to learn. On the other hand, those very same concepts can be found in other orchestrators. As a result, mastering them will ease your onboarding on other orchestrators, such as &lt;a href="https://docs.docker.com/engine/swarm/"&gt;Docker Swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The aim of this article is to explain the most used concepts of Kubernetes relying on basic system administration concepts, then use some of these to deploy a simple web server and showcase the interactions between the different resources. Lastly, I will lay out the usual CLI interactions while working with Kubernetes.&lt;/p&gt;

&lt;p&gt;This article mainly focuses on the developer side of a Kubernetes cluster, but I will leave some resources about cluster administration at the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminology-and-concepts"&gt;
  &lt;/a&gt;
  Terminology and concepts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h3&gt;

&lt;p&gt;The Kubernetes realm is the &lt;strong&gt;cluster&lt;/strong&gt;, everything needed is contained within this cluster. Inside it, you will find two types of nodes: the &lt;a href="https://kubernetes.io/docs/concepts/overview/components/#control-plane-components"&gt;Control Plane&lt;/a&gt; and the &lt;a href="https://kubernetes.io/docs/concepts/architecture/nodes/"&gt;Worker Nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;control plane&lt;/strong&gt; is a centralized set of processes that manages the cluster resources, load balance, health, and more. A Kubernetes cluster usually has multiple controller nodes for availability and load balancing purposes.&lt;br&gt;
As a developer, you will most likely interact through the API gateway for interactions.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;worker node&lt;/strong&gt; is any kind of host running a local Kubernetes agent &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/"&gt;Kubelet&lt;/a&gt; and a communication process &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/"&gt;Kube-Proxy&lt;/a&gt;. The former handles the operations commanded by the &lt;strong&gt;control plane&lt;/strong&gt; on the local container runtime (&lt;em&gt;e.g.&lt;/em&gt; docker), while the latter redirects connectivity to the right pods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lH5Yjas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwkedddkp6eh2vnpd14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lH5Yjas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwkedddkp6eh2vnpd14.png" alt="Kubernetes Architecture"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#namespaces"&gt;
  &lt;/a&gt;
  Namespaces
&lt;/h3&gt;

&lt;p&gt;After some time, a Kubernetes cluster may become huge and heavily used. In order to keep things well organized, Kubernetes created the concept of &lt;strong&gt;Namespace&lt;/strong&gt;. A namespace is basically a virtual cluster inside the actual cluster.&lt;/p&gt;

&lt;p&gt;Most of the resources will be contained inside a namespace, thus unaware of resources from other namespaces. Only a few kinds of resources are completely agnostic of namespaces, and they define computational power or storage sources (&lt;em&gt;i.e.&lt;/em&gt; Nodes and PersistentVolumes). However, access to those can be limited by namespace using &lt;a href="https://kubernetes.io/docs/concepts/policy/resource-quotas/"&gt;Quotas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Namespace-aware resources will always be contained in a namespace as Kubernetes creates and uses a namespace named &lt;em&gt;default&lt;/em&gt; if nothing is specified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9R6SJaOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xya7q54a69uxxoq4h83s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9R6SJaOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xya7q54a69uxxoq4h83s.png" alt="Namespace Organization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no silver bullet on the way to use namespaces, as it widely depends on your organization and needs. However, we can note some usual namespaces usages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Divide the cluster by team or project, to avoid naming conflict and help repartition of resources.&lt;/li&gt;
&lt;li&gt;Divide the cluster by environment (&lt;em&gt;i.e.&lt;/em&gt; dev, staging, prod), to keep a consistent architecture.&lt;/li&gt;
&lt;li&gt;Deploy with more granularity (&lt;em&gt;e.g.&lt;/em&gt; &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue/green deployment&lt;/a&gt;), to quickly fall back on an untouched working environment in case of issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;Namespace Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"&gt;Manage The Cluster Namespaces&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#glossary"&gt;
  &lt;/a&gt;
  Glossary
&lt;/h3&gt;

&lt;p&gt;Kubernetes did a great work of remaining agnostic of any technology in their design. This means two things:  &lt;a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/"&gt;handle multiple technologies under the hood&lt;/a&gt; and there is a whole new terminology to learn.&lt;/p&gt;

&lt;p&gt;Fortunately, these concepts are pretty straightforward and can most of the time be compared to a unit element of classic system infrastructure. The table below will summarize the binding of the most basic concepts. The comparison might not be a hundred per cent accurate but rather here to help understand the need behind each concept.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Abstraction Layer&lt;/th&gt;
&lt;th&gt;Physical Layer&lt;/th&gt;
&lt;th&gt;Uses Namespace&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/"&gt;Pod&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Container&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A Pod is the minimal work unit of Kubernetes, it is generally equivalent to one applicative container but it can be composed of multiple ones.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"&gt;Replicaset&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Load Balancing&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A ReplicaSet keeps track of and maintain the amount of instances expected and running for a given pod.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A Deployment keeps track of and maintain the required configuration for a pod and replicaset.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A StatefulSet is a Deployment with insurance on the start order and volume binding, to keep state consistent in time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/architecture/nodes/"&gt;Node&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;A Node can be a physical or virtual machine that is ready to host pods.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A Service will define an entrypoint to a set of pods semantically tied together.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Reverse Proxy&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;An Ingress publishes Services outside the Cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/#design"&gt;Cluster&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Datacenter&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;A Cluster is the set of available nodes, including the Kubernetes controllers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;Namespace&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;➖&lt;/td&gt;
&lt;td&gt;A Namespace defines an isolated pseudo cluster in the current cluster.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/"&gt;StorageClass&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Disk&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;A StorageClass configures filesystems sources that can be used to dynamically create PersistentVolumes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;PersistentVolume&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Disk Partition&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;A PersistentVolume describe any kind of filesystem ready to be mounted on a pod.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"&gt;PersistentVolumeClaim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A PersistentVolumeClaim binds a PersistentVolume to a pod, which can then actively use it while running.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Environment Variables&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A ConfigMap defines widely accessible properties.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secret&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Secured Env. Var.&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;A Secret defines widely accessible properties with potential encryption and access limitations.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/glossary/?all=true"&gt;Official Kubernetes Glossary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/"&gt;Official Concepts Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#definition-files"&gt;
  &lt;/a&gt;
  Definition files
&lt;/h2&gt;

&lt;p&gt;The resources in Kubernetes are created in a declarative fashion, and while it is possible to configure your application deployment through the command line, a good practice is to keep track of the resource definitions in a versioned environment. Sometimes named &lt;a href="https://www.gitops.tech/"&gt;GitOps&lt;/a&gt;, this practice is not only applicable for Kubernetes but widely applied for delivery systems, backed up by the &lt;a href="https://aws.amazon.com/devops/what-is-devops/"&gt;DevOps&lt;/a&gt; movement.&lt;/p&gt;

&lt;p&gt;To this effect, Kubernetes proposes a &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;YAML&lt;/a&gt; representation of the resource declaration, and its structure can be summarized as follow:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;File type&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apiVersion&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All files&lt;/td&gt;
&lt;td&gt;Version to use while parsing the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kind&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All files&lt;/td&gt;
&lt;td&gt;Type of resource that the file is describing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All files&lt;/td&gt;
&lt;td&gt;Resource identification and labeling.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Data centric files (Secret, ConfigMap)&lt;/td&gt;
&lt;td&gt;Content entry point for data mapping.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Most files (Pod, Deployment, Ingress, ...)&lt;/td&gt;
&lt;td&gt;Content entry point for resource configuration.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Watch out: some resources such as StorageClass do no use a single entry point as described above&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-apiversion-definition-guide.html"&gt;Guide on apiVersion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yaml.org/spec/1.2/spec.html"&gt;Yaml Specifications&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#metadata-and-labels"&gt;
  &lt;/a&gt;
  Metadata and labels
&lt;/h3&gt;

&lt;p&gt;The metadata entry is critical while creating any resource as it will enable Kubernetes and yourself to easily identify and select the resource.&lt;/p&gt;

&lt;p&gt;In this entry, you will define a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;namespace&lt;/code&gt; (defaults to &lt;code&gt;default&lt;/code&gt;), thanks to which the control plane will automatically be able to tell if the file is a new addition to the cluster or the revision of a previously loaded file.&lt;/p&gt;

&lt;p&gt;On top of those elements, you can define a &lt;code&gt;labels&lt;/code&gt; section.&lt;br&gt;
It is composed of a set of key-value pairs to narrow down the context and content of your resource. Those labels can later be used in almost any CLI commands through &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"&gt;Selectors&lt;/a&gt;. As those entries are not used in the core behavior of Kubernetes, you can use any name you want, even if Kubernetes defines some &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/"&gt;best practices recommendations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you can also create an &lt;code&gt;annotations&lt;/code&gt; section, which is almost identical to &lt;code&gt;labels&lt;/code&gt; but not used by Kubernetes at all. Those can be used on the applicative side to trigger behaviors or simply add data to ease debugging.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;metadata&amp;gt; narrows down selection and identify the resource&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# The &amp;lt;name&amp;gt; entry is required and used to identify the resource&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-resource&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-namespace-or-default&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;labels&amp;gt; is optional but often needed for resource selection&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application-name&lt;/span&gt;
    &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;back&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;annotations&amp;gt; is optional and not needed for the configuration of Kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/"&gt;Naming and Identification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"&gt;Labels and Selectors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/"&gt;Annotations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-centric-configuration-files"&gt;
  &lt;/a&gt;
  Data centric configuration files
&lt;/h3&gt;

&lt;p&gt;Those files define key-value mappings that can be used later in other resources. Usually, those resources (&lt;em&gt;i.e.&lt;/em&gt; Secrets and ConfigMap) are loaded before anything else, as it is more likely than not that your infrastructure files are dependent on them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;kind&amp;gt; defines the resource described in this file&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-config&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;data&amp;gt; configures data to load&lt;/span&gt;
  &lt;span class="na"&gt;configuration_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;configuration_value"&lt;/span&gt;
  &lt;span class="na"&gt;properties_entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;# Any multiline content is accepted&lt;/span&gt;
    &lt;span class="s"&gt;multiline_config=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#infrastructure-centric-configuration-files"&gt;
  &lt;/a&gt;
  Infrastructure centric configuration files
&lt;/h3&gt;

&lt;p&gt;Those files define the infrastructure to deploy on the cluster, potentially using content from the data files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;kind&amp;gt; defines the resource described in this file&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-web-server&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;spec&amp;gt; is a domain specific description of the resource.&lt;/span&gt;
  &lt;span class="c1"&gt;# The specification entries will be very different from one kind to another&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources-definition"&gt;
  &lt;/a&gt;
  Resources definition
&lt;/h2&gt;

&lt;p&gt;In this section, we will take a closer look at the configuration of the most used resources on a Kubernetes application. This is also the occasion to showcase the interactions between resources.&lt;/p&gt;

&lt;p&gt;At the end of the section, we will have a running Nginx server and will be able to contact the server from outside the cluster. The following diagram summarizes the intended state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqfdrtHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5ync932y9zg86swoiwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqfdrtHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5ync932y9zg86swoiwk.png" alt="Intended Deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configmap"&gt;
  &lt;/a&gt;
  ConfigMap
&lt;/h3&gt;

&lt;p&gt;ConfigMap is used to hold properties that can be used later in your resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-config&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;configuration_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Configuration&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;value"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration defined above can then be &lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/#configmaps-and-pods"&gt;selected from another resource definition&lt;/a&gt; with the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-config&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;configuration_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: ConfigMaps are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#secret"&gt;
  &lt;/a&gt;
  Secret
&lt;/h3&gt;

&lt;p&gt;All sensitive data should be put in Secret files (e.g. API keys, passphrases, …). By default, the data is simply held as base64 encoded values without encryption. However, Kubernetes proposes ways of mitigating leakage risks by &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;integrating a Role-Based Access Control&lt;/a&gt; or &lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/"&gt;encrypting secrets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Secret file defines a &lt;code&gt;type&lt;/code&gt; key at its root, which can be used to add validation on the keys declared in the &lt;code&gt;data&lt;/code&gt; entry. By default, the type is set to &lt;code&gt;Opaque&lt;/code&gt; which does not validate the entries at all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Secret&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-secrets&lt;/span&gt;
&lt;span class="c1"&gt;# Opaque &amp;lt;type&amp;gt; can hold generic secrets, so no validation will be done.&lt;/span&gt;
&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Opaque&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Secrets should be encoded in base64&lt;/span&gt;
  &lt;span class="na"&gt;secret_configuration_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;c2VjcmV0IHZhbHVl"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The secret defined above can then be &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables"&gt;selected from another resource definition&lt;/a&gt; with the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-secrets&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secret_configuration_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Secrets are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secrets Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/#secret-types"&gt;Available Secret Types&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pod"&gt;
  &lt;/a&gt;
  Pod
&lt;/h3&gt;

&lt;p&gt;A Pod definition file is pretty straightforward but can become pretty big due to the quantity of configuration available. The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; fields are the only mandatory ones, but you might commonly use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ports&lt;/code&gt; to define the ports to open on both the container and pod. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;env&lt;/code&gt; to define the environment variables to load on the container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;args&lt;/code&gt; and &lt;code&gt;entrypoint&lt;/code&gt; to customize the container startup sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pods are usually not created as standalone resources on Kubernetes, as the best practice indicates to &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/#working-with-pods"&gt;use pod as part of higher level definition&lt;/a&gt; (&lt;em&gt;e.g.&lt;/em&gt; Deployment). In those cases, the Pod file's content will simply be embedded in the other resource's file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-web-server&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;containers&amp;gt; is a list of container definition to embed in the pod&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
      &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
          &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SOME_CONFIG&lt;/span&gt;
          &lt;span class="c1"&gt;# Create a line "value: &amp;lt;config_entry&amp;gt;" from the ConfigMap data&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-config&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;configuration_key&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SOME_SECRET&lt;/span&gt;
          &lt;span class="c1"&gt;# Create a line "value: &amp;lt;config_entry&amp;gt;" from the Secret data&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-secrets&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secret_configuration_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Pods are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/"&gt;Pod Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/"&gt;Advanced Pod Configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#podspec-v1-core"&gt;Fields available in Pod  entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#container-v1-core"&gt;Fields available in Pod  entry&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;The Deployment is generally used as the atomic working unit since it will automatically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a pod definition based on the &lt;code&gt;template&lt;/code&gt; entry.&lt;/li&gt;
&lt;li&gt;Create a ReplicaSet on pods selected by the &lt;code&gt;selector&lt;/code&gt; entry, with the value of &lt;code&gt;replicas&lt;/code&gt; as a count of pods that should be running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following file requests 3 instances of an Nginx server running at all times. The file may look a bit heavy, but most of it is the Pod definition copied from above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-web-server-deployment&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webserver&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;selector&amp;gt; should retrieve the Pod defined below, and possibly more&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webserver&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-ws-deployment&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;replicas&amp;gt; asks for 3 pods running in parallel at all time&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="c1"&gt;# The content of &amp;lt;template&amp;gt; is a Pod definition file, without &amp;lt;apiVersion&amp;gt; nor &amp;lt;kind&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-web-server&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webserver&lt;/span&gt;
        &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-ws-deployment&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
              &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
              &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
          &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SOME_CONFIG&lt;/span&gt;
              &lt;span class="c1"&gt;# Create a line "value: &amp;lt;config_entry&amp;gt;" from the ConfigMap data&lt;/span&gt;
              &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-config&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;configuration_key&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SOME_SECRET&lt;/span&gt;
              &lt;span class="c1"&gt;# Create a line "value: &amp;lt;config_entry&amp;gt;" from the Secret data&lt;/span&gt;
              &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-secrets&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secret_configuration_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Deployments are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h3&gt;

&lt;p&gt;A pod might be deleted and recreated at any time. When it occurs the pod's IP address will change, which could result in a loss of connection if you are directly contacting it. To solve this issue, a Service provides a stable contact point to a set of Pods, while remaining agnostic of their state and configuration. Usually, Pods are chosen to be part of a Service through a &lt;code&gt;selector&lt;/code&gt; entry, thus based on its &lt;code&gt;labels&lt;/code&gt;. A Pod is selected if and only if all the labels in the selector are worn by the pod.&lt;/p&gt;

&lt;p&gt;There are three types of services that are acting quite differently, among which you can select using the type entry.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ClusterIP&lt;/strong&gt; service is bound to an internal IP from the cluster, hence only internally reachable. This is the type of service created by default and is suitable for binding different applications inside the same cluster.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;NodePort&lt;/strong&gt; service will bind a port (by default in range 30000 to 32767) on the nodes hosting the selected pods. This enables you to contact the service directly through the node IP. That also means that your service will be as accessible as the virtual or physical machines hosting those pods.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Using NodePort can pose security risks, as it enables a direct connection from outside the cluster.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;LoadBalancer&lt;/strong&gt; service will automatically create a &lt;a href="https://www.nginx.com/resources/glossary/load-balancing/"&gt;load balancer&lt;/a&gt; instance from the cloud service provider on which the cluster is running. This load balancer is created outside the cluster but will automatically be bound to the nodes hosting the selected pods.&lt;/p&gt;

&lt;p&gt;This is an easy way to expose your service but can end up being costly as each service will be managed by a single load balancer.&lt;/p&gt;

&lt;p&gt;If you are setting up your own Ingress as we will do here, you may want to use a &lt;code&gt;ClusterIp&lt;/code&gt; service, as other services are made for specific use cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-service-clusterip&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ClusterIP is the default service &amp;lt;type&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="c1"&gt;# Select all pods declaring a &amp;lt;label&amp;gt; entry "app: webserver"&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webserver&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
      &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="c1"&gt;# &amp;lt;port&amp;gt; is the port to bind on the service side&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="c1"&gt;# &amp;lt;targetPort&amp;gt; is the port to bind on the Pod side&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Services are defined in a namespace but can be contacted from other namespaces.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;In Depth Service Comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"&gt;Create an External Load Balancer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ingress"&gt;
  &lt;/a&gt;
  Ingress
&lt;/h3&gt;

&lt;p&gt;Ingress enables you to publish internal services without necessarily using a load balancer from cloud service providers. You usually need only one ingress per namespace, where you can bind as many routing &lt;code&gt;rules&lt;/code&gt; and &lt;code&gt;backends&lt;/code&gt; as you want. A backend will typically be an internally routed &lt;code&gt;ClusterIP&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Please note that Kubernetes does not handle ingress resources by itself and relies on third-party implementations. As a result, you will have to choose and install an &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/"&gt;Ingress Controller&lt;/a&gt; before using any ingress resource. On the other hand, it makes the ingress resource customizable depending on the needs of your cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-ingress&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Using &amp;lt;host&amp;gt; redirects all request matching the given DNS name to this rule&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*.minikube.internal"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/welcome&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-service-clusterip&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="c1"&gt;# All other requests will be redirected through this rule&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple-web-service-clusterip&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Ingresses are defined in the namespace but may contact services from other namespaces and are publicly accessible outside the cluster.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/"&gt;Available Ingress Controllers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/"&gt;Enable Ingress on Minikube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/"&gt;Nginx Ingress Annotations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#cli-usage"&gt;
  &lt;/a&gt;
  CLI Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-and-manage-resources"&gt;
  &lt;/a&gt;
  Create and manage resources
&lt;/h3&gt;

&lt;p&gt;This section showcases the basic CLI commands to manipulate resources. As said before, while it is possible to manually manage resources, a better practice is to use files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# &amp;lt;kind&amp;gt; is the type of resource to create (e.g. deployment, secret, namespace, quota, ...)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create &amp;lt;kind&amp;gt; &amp;lt;name&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl edit   &amp;lt;kind&amp;gt; &amp;lt;name&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &amp;lt;kind&amp;gt; &amp;lt;name&amp;gt;

&lt;span class="c"&gt;# All those commands can be used through a description file.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create &lt;span class="nt"&gt;-f&lt;/span&gt; &amp;lt;resource&amp;gt;.yaml
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl edit   &lt;span class="nt"&gt;-f&lt;/span&gt; &amp;lt;resource&amp;gt;.yaml
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; &amp;lt;resource&amp;gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To ease resources manipulations through files, you can reduce the interactions to the CLI to the two following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create and update any resource&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply   &lt;span class="nt"&gt;-f&lt;/span&gt; &amp;lt;resource&amp;gt;.yaml
&lt;span class="c"&gt;# Delete any resource&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete  &lt;span class="nt"&gt;-f&lt;/span&gt; &amp;lt;resource&amp;gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/"&gt;Managing Resources&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#monitor-and-debug"&gt;
  &lt;/a&gt;
  Monitor and Debug
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#fetch-resources"&gt;
  &lt;/a&gt;
  Fetch resources
&lt;/h4&gt;

&lt;p&gt;You can see all resources running through the CLI using &lt;code&gt;kubectl get &amp;lt;kind&amp;gt;&lt;/code&gt;. This command is pretty powerful and lets you filter the kind of resources to display or select the resources you want to see.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: if not specified, Kubernetes will work on the &lt;code&gt;default&lt;/code&gt; namespace. You can specify &lt;code&gt;-n &amp;lt;namespace&amp;gt;&lt;/code&gt; to work on a specific namespace or &lt;code&gt;-A&lt;/code&gt; to show every namespace.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Fetch everything&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get all
NAME                                            READY   STATUS    RESTARTS   AGE
pod/my-web-server-deployment-58c4fd887f-5vm2b   1/1     Running   0          128m
pod/my-web-server-deployment-58c4fd887f-gq6lr   1/1     Running   0          128m
pod/my-web-server-deployment-58c4fd887f-gs6qb   1/1     Running   0          128m

NAME                                   TYPE           CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;                      AGE
service/simple-web-service-clusterip   ClusterIP      10.96.96.241     &amp;lt;none&amp;gt;        80/TCP,443/TCP               60m
service/simple-web-service-lb          LoadBalancer   10.108.182.232   &amp;lt;pending&amp;gt;     80:31095/TCP,443:31940/TCP   60m
service/simple-web-service-np          NodePort       10.101.77.203    &amp;lt;none&amp;gt;        80:31899/TCP,443:31522/TCP   60m

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/my-web-server-deployment   3/3     3            3           136m

NAME                                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/my-web-server-deployment-58c4fd887f   3         3         3       128m

&lt;span class="c"&gt;# We can ask for more details&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployment &lt;span class="nt"&gt;-o&lt;/span&gt; wide
NAME                       READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES  SELECTOR
my-web-server-deployment   3/3     3            3           121m   web          nginx   &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;webserver

&lt;span class="c"&gt;# Some resources are not visible using "all" but available&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get configmap
NAME                DATA   AGE
kube-root-ca.crt    1      38d
simple-web-config   3      3h17m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#dig-into-a-particular-resource"&gt;
  &lt;/a&gt;
  Dig into a particular resource
&lt;/h4&gt;

&lt;p&gt;This section will show you how to dig into resources. Most of the required day-to-day operations are doable through the three following commands.&lt;/p&gt;

&lt;p&gt;The first command will give you the resource's complete configuration, using &lt;code&gt;kubectl describe &amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Let's describe the ingress for the sake of example&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl describe ingress/simple-web-ingress
Name:             simple-web-ingress
Namespace:        default
Address:          192.168.64.2
Default backend:  default-http-backend:80 &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;error: endpoints &lt;span class="s2"&gt;"default-http-backend"&lt;/span&gt; not found&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
Rules:
  Host                 Path  Backends
  &lt;span class="nt"&gt;----&lt;/span&gt;                 &lt;span class="nt"&gt;----&lt;/span&gt;  &lt;span class="nt"&gt;--------&lt;/span&gt;
  &lt;span class="k"&gt;*&lt;/span&gt;.minikube.internal
                       /welcome   simple-web-service-clusterip:80 &lt;span class="o"&gt;(&lt;/span&gt;172.17.0.4:80,172.17.0.5:80,172.17.0.6:80 + 1 more...&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;*&lt;/span&gt;
                       /   simple-web-service-clusterip:80 &lt;span class="o"&gt;(&lt;/span&gt;172.17.0.4:80,172.17.0.5:80,172.17.0.6:80 + 1 more...&lt;span class="o"&gt;)&lt;/span&gt;
Annotations:           nginx.ingress.kubernetes.io/rewrite-target: /
Events:
  Type    Reason  Age                 From                      Message
  &lt;span class="nt"&gt;----&lt;/span&gt;    &lt;span class="nt"&gt;------&lt;/span&gt;  &lt;span class="nt"&gt;----&lt;/span&gt;                &lt;span class="nt"&gt;----&lt;/span&gt;                      &lt;span class="nt"&gt;-------&lt;/span&gt;
  Normal  UPDATE  7m6s &lt;span class="o"&gt;(&lt;/span&gt;x6 over 23h&lt;span class="o"&gt;)&lt;/span&gt;  nginx-ingress-controller  Ingress default/simple-web-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another important command is &lt;code&gt;kubectl logs &amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;, as you might expect it shows you the resources' logs if applicable. As the logs are produced by Pods, running such a command on a resource above a Pod will dig through Kubernetes to display the logs of a randomly chosen Pod underneath it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl logs deployments/my-web-server-deployment
Found 3 pods, using pod/my-web-server-deployment-755b499f77-4n5vn
&lt;span class="c"&gt;# [logs]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, it is sometimes useful to connect on a pod, you can do so with the command kubectl &lt;code&gt;exec -it &amp;lt;pod_name&amp;gt; -- /bin/bash&lt;/code&gt;. This will open an interactive shell on the pod, enabling you to interact with its content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# As for logs, when called on any resource enclosing Pods,&lt;/span&gt;
&lt;span class="c"&gt;# Kubernetes will randomly chose one to  execute the action&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; deployment/my-web-server-deployment &lt;span class="nt"&gt;--&lt;/span&gt; /bin/bash
root@my-web-server-deployment-56c4554cf9-qwtm6:/# &lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;span class="c"&gt;# [...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;During this article, we saw the fundamentals behind deploying and publishing stateless services using Kubernetes. But you can do a lot more complex things with Kubernetes. If you want to learn more about it, I can recommend you to look at these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the &lt;a href="https://kubernetes.io/docs/reference/"&gt;Kubernetes reference documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install a sandbox locally with &lt;a href="https://kubernetes.io/fr/docs/setup/learning-environment/minikube/"&gt;Minikube&lt;/a&gt;, and play with it.&lt;/li&gt;
&lt;li&gt;Watch the video &lt;a href="https://youtu.be/X48VuDVv0do"&gt;Kubernetes Tutorial for Beginners - &lt;em&gt;TechWorld with Nana&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Manually bootstrap a Kubernetes cluster: &lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes The Hard Way&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incidentally, there are multiple subjects I could not deeply talk about in this article and that may be of interest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the developer side:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/"&gt;Volumes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/"&gt;Selectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;On the cluster administrator side:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;Access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/"&gt;Secret encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/concepts/policy/resource-quotas/"&gt;Quotas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"&gt;Network Plugins&lt;/a&gt;
(&lt;em&gt;e.g.&lt;/em&gt; &lt;a href="https://github.com/contiv/vpp/blob/master/docs/ARCHITECTURE.md"&gt;VPP&lt;/a&gt; and &lt;a href="https://github.com/weaveworks/weave"&gt;Weaveworks&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, if you are interested in the ecosystem around Kubernetes, you may want to take a look at the following technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.openshift.com/blog/enterprise-kubernetes-with-openshift-part-one"&gt;Openshift&lt;/a&gt;
is wrapping Kubernetes with production friendly features. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;
is a charts manager for Kubernetes helping improve re-usability of configuration files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://argoproj.github.io/argo-cd/"&gt;ArgoCD&lt;/a&gt;
is keeping your Kubernetes Cluster up to date with your configurations from Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#resources-repository"&gt;
  &lt;/a&gt;
  Resources' repository
&lt;/h3&gt;

&lt;p&gt;The resources definitions used in this article are available in the following &lt;a href="https://github.com/aveuiller/frameworks-bootstrap/tree/feat_integrate_kube/Kubernetes"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli-equivalents-docker-and-kubernetes"&gt;
  &lt;/a&gt;
  CLI equivalents - Docker and Kubernetes
&lt;/h3&gt;

&lt;p&gt;Managing containers with Docker and pods with Kubernetes is very similar,&lt;br&gt;
as you can see on the following table describing equivalent operations between both technologies.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Docker&lt;/th&gt;
&lt;th&gt;Kubernetes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Running containers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kubectl get pods&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Configuration details&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker inspect &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kubectl describe &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Show logs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker logs &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kubectl logs &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter container&lt;/td&gt;
&lt;td&gt;&lt;code&gt;docker exec -it &amp;lt;name&amp;gt; /bin/bash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kubectl exec -it &amp;lt;name&amp;gt; -- /bin/bash&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Thanks to Sarra Habchi, Dimitri Delabroye, and Alexis Geffroy for the reviews&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>12+ React Boilerplates &amp; Starter Kits For Developers In 2021</title>
      <author>Nastassia Ovchinnikova</author>
      <pubDate>Tue, 11 May 2021 08:02:37 +0000</pubDate>
      <link>https://dev.to/flatlogic/12-react-boilerplates-starter-kits-for-developers-in-2021-29ai</link>
      <guid>https://dev.to/flatlogic/12-react-boilerplates-starter-kits-for-developers-in-2021-29ai</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-react"&gt;
  &lt;/a&gt;
  Why React?
&lt;/h2&gt;

&lt;p&gt;React boilerplate matters! We’ve decided to dig deeper into ReactJS, because this library has confidently taken its place in front-end development, and among the libraries. React is used by dozens of websites, like BBC, Netflix, Tesla, Instagram, and surely Facebook. Here, btw, several top significant reasons to use React.js for web development. So, prepare your likes and thumbs ups for the essential React.js tools to build your web or mobile app faster. ⚛️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7H5Rn1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/03/Snimok-ekrana-2021-03-20-v-23.46.49-1536x881.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7H5Rn1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/03/Snimok-ekrana-2021-03-20-v-23.46.49-1536x881.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deciding which boilerplate to take on while developing may be challenging enough, cause you need not only to build your app, but to scale and maintain it afterwards as well. Some will say that you don’t need any alternative starter kits, except Create React App, widely used for building single-page applications (SPAs). The same way works for Node CLI and Node, Angular CLI and Angular as well.&lt;/p&gt;

&lt;p&gt;Still you need some cogent analysis to find a way to kickstart your repeated code parts or project structure. Transpile the code, proceed with linting, build the system and test it out faster. Plus, the option of hot loading allows Webpack to patch the code running in the browser without refreshing.&lt;/p&gt;

&lt;p&gt;Setting up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for the production stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-boilerplate"&gt;
  &lt;/a&gt;
  What is a Boilerplate?
&lt;/h2&gt;

&lt;p&gt;Your first reaction may be some surprise, cause it has nothing in common with either boiler 🫖, or plate. 🍽&lt;/p&gt;

&lt;p&gt;Boilerplate  (boilerplate code) is like a part of code that can be reused many times to repeat some pieces of codes again and again. As mentioned in Wiki, boilerplate is a section of code that is used interchangeably to provide this or that function. When using languages that are considered verbose, developers have to code a lot to accomplish only minor functionality.&lt;/p&gt;

&lt;p&gt;Fetch the boilerplate for your project needs by cloning in Git, and refresh code changes with a hot reloading function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-starter-kit"&gt;
  &lt;/a&gt;
  What is a Starter Kit?
&lt;/h2&gt;

&lt;p&gt;A starter kit is a set of pre-existing code that you can launch to automate your repetitive tasks. It has a language, a framework, and a pattern for a specific use case. As a rule, starter kits have representative UX to highlight the integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boilerplate-vs-boilerplate-template"&gt;
  &lt;/a&gt;
  Boilerplate vs. Boilerplate Template
&lt;/h2&gt;

&lt;p&gt;React Boilerplate and React Starter Kit are both open source development tools. Boilerplate will help you reduce developing time by copying the parts of code. A template is a so-called case frame/layout of your options; while a boilerplate provides a piece of writing, actual text and images. Template is a collection of all off-the-shelf parts/features like CSS style sheet, color palette, and other elements needed to set the structure of your site frontend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-react-boilerplate"&gt;
  &lt;/a&gt;
  Best React Boilerplate?
&lt;/h2&gt;

&lt;p&gt;There is no such notion as the best react boilerplate, because developers’ tastes differ.  And each boilerplate is useful to resolve different tasks. This theme is quite the same as asking anyone which language is the best for writing a code. This way Python developers would vote for Python, and Java developers would defend Java. Every cook praises his own broth, you know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criteria-to-evaluate-boilerplates-and-starter-kits"&gt;
  &lt;/a&gt;
  Criteria to Evaluate Boilerplates and Starter Kits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clean code structure &lt;/li&gt;
&lt;li&gt;Code splitting&lt;/li&gt;
&lt;li&gt;Comments presence&lt;/li&gt;
&lt;li&gt;Well-read documentation&lt;/li&gt;
&lt;li&gt;Responsive navigation system&lt;/li&gt;
&lt;li&gt;Server and client code for setup&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Easy testing tools&lt;/li&gt;
&lt;li&gt;Support and maintaining options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-boilerplate-code"&gt;
  &lt;/a&gt;
  Benefits of Using Boilerplate Code
&lt;/h2&gt;

&lt;p&gt;The most significant points in using boilerplates are time saving and a shallow learning curve. You simply reduce time by integrating a code template rather than writing everything from scratch. Plus, thanks to a certain frame scaffolding code can be clearer for the designer in future.&lt;/p&gt;

&lt;p&gt;But every great thing has its downside, so be aware that the dark side of ready-made coding tools may be further code maintenance, and the necessity to find your way around someone else’s code. Boilerplates commands may dump the code of configuration info. This way you’ll have to resolve bug lists manually, clean tons of code and update the dependencies from the original repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-react-boilerplate"&gt;
  &lt;/a&gt;
  When to Use React Boilerplate?
&lt;/h2&gt;

&lt;p&gt;It definitely depends on the scale of your project. Boilerplates are good for lightweight and responsive web apps. If you have long-term, time-consuming sites then it’s better to invest efforts into really deep learning of app architecture, DevOps toolchain, and so on. &lt;/p&gt;

&lt;p&gt;Frankly, there are more than enough examples of popular React boilerplates, e.g. Next.js for server-rendered solutions or NWB. The main thing is to clearly define the goal you need to reach out. For instance, to build web apps with TypeScript, React, Redux, check vortigern.&lt;/p&gt;

&lt;p&gt;We’ve neatly selected our top 12+ of react boilerplates, starter kits, and react native boilerplates for various needs. Keep on reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-react-boilerplates-and-starter-kits-to-test-out"&gt;
  &lt;/a&gt;
  Top React Boilerplates and Starter Kits to Test Out
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-react-app"&gt;
  &lt;/a&gt;
  1. Create React App
&lt;/h3&gt;

&lt;p&gt;Starting to build your single-app application is a way easier with Create React App. Here you’ll face Babel transpiler, and Webpack. Babel makes your code readable for old browsers, while Webpack, is a library used to bundle JavaScript modules for browser usage. Furnished by Facebook, Create React App lets you set up a modern web application by running one command with no configurations.&lt;/p&gt;

&lt;p&gt;Create React App is commonly advised for newbies in React development, because only those who know the React technology in detail will definitely reap the benefit from a range of react-boilerplate libraries.&lt;/p&gt;

&lt;p&gt;And, CRA is a good tool for building small apps, quickly setting up an app. However, these kinds of tools are of limited utility when building an advanced application. CRA requires npm of at least 5.2+ version, and Node 8.10 version. The guideline for quick start with the Create React App tool is placed &lt;a href="https://create-react-app.dev/docs/getting-started/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/create-react-app"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-react-boilerplate"&gt;
  &lt;/a&gt;
  2. React Boilerplate
&lt;/h3&gt;

&lt;p&gt;React Boilerplate is a solid and well-thought out boilerplate in the Javascript UI Libraries with 27.2k stars on GitHub. What’s inside? Redux, Mocha, Redux-Saga, Jest, React Router, PostCSS, reselect, some code generation scripts, the super rich base of components and fonts. And they even support SEO indexing! That is more than enough to concentrate on app development and its high performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/react-boilerplate/react-boilerplate"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-gatsby-static"&gt;
  &lt;/a&gt;
  3. Gatsby Static
&lt;/h3&gt;

&lt;p&gt;Gatsby is a super useful boilerplate for creating static websites or apps on React.js optimized for speed. It’s the perfect open source framework to make, for example, a company’s e-commerce store. It has a gallery of starter kits and provides the fastest outputs pre-rendered HTML and CSS to guarantee the fastest load time. Learn Gatsby from its official guide and a gallery of starter kits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gatsbyjs/gatsby"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-react-starter-kit"&gt;
  &lt;/a&gt;
  4. React Starter Kit
&lt;/h3&gt;

&lt;p&gt;Kriasoft based its isomorphic starter kit on the React library marked with 20.6k stars. React Starter Kit uses modern web development tools such as Node.js, Express, GraphQL, Babel, PostCSS, Webpack, Browsersync. A few words about its customization: The master branch of React Starter Kit doesn’t include a Flux implementation or any other advanced integrations. Regarding its Data API, it is GraphQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kriasoft/react-starter-kit"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-electron-react-boilerplate"&gt;
  &lt;/a&gt;
  5. Electron React Boilerplate
&lt;/h3&gt;

&lt;p&gt;First off, Electron boilerplate has multiple entry points and rightly has an excellent reputation among coders with 17.2k stars on GitHub. The pluses of this boilerplate are the three pillars of hot reloading, incremental typing and high code performance. Secondly, Electron lets you change the app without refreshing. It goes with electron-builder, TypeScript, Babel, webpack, and eslint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-react-redux-universal"&gt;
  &lt;/a&gt;
  6. React Redux Universal
&lt;/h3&gt;

&lt;p&gt;React Redux Universal is a boilerplate with react-router, redux, saga, webpack 3, jest w/ coverage and enzyme. React Redux functionality lets you make actions on both the server-side and the client-side. Redux reduces the boilerplate code and makes hot–reloading possible in the first place. Redux is suitable for multiple UI layers, with a rich ecosystem of addons to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gtg092x/react-redux-universal#readme"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-reactslingshot"&gt;
  &lt;/a&gt;
  7. react-slingshot
&lt;/h3&gt;

&lt;p&gt;One more efficient tool to equip your React app is react-slingshot. Its advantages are the only npm start command to get started through any modern browser. It works with a bunch of common technologies like SASS, ESLint, React, Redux, React Router and others. Make the fast and highly automated production build – through typing npm run build. Available for macOS, Linux, and Window as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/coryhouse/react-slingshot"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-razzle"&gt;
  &lt;/a&gt;
  8. Razzle
&lt;/h3&gt;

&lt;p&gt;Razzle boilerplate is a tool that abstracts all the complex configuration needed for building single-page-application and server-side rendering applications into a single dependency. Razzle comes with the same CSS setup as create-react-app, and works with React, Preact, Reason-React, Vue and Angular. If you want to restart your server, while your app is running, just type rs and press enter in the terminal. Get started with Razzle &lt;a href="https://razzlejs.org/getting-started"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://razzlejs.org/getting-started"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-neutrino"&gt;
  &lt;/a&gt;
  9. Neutrino
&lt;/h3&gt;

&lt;p&gt;Neutrino lets you build js web apps without an initial configuration file. It is commonly used as a helper in building various React and Node.js projects. Neutrino supports testing, linting, and developing js projects based on shared configuration presets and middleware. It works equally well with Jest and Karma for testing, ESLing to fine tuning linting, various CLI tools, and others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/neutrinojs/neutrino"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-ny-times-kyt"&gt;
  &lt;/a&gt;
  10. ny times kyt
&lt;/h3&gt;

&lt;p&gt;Kyt helps to manage the configuration processes on all stages of development. It has enough options to build full-stack or static/client-side apps with React, Express, CSS/Sass Modules, Jest, latest ES, ESLint/Prettier, StyleLint, PostCSS, and inline SVGs. kyt is widely applicable in programming, and can be used as a dependency in any type of project. It’s a good helper for building dynamic web applications in Node.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NYTimes/kyt"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-google-web-starter-kit"&gt;
  &lt;/a&gt;
  11. Google Web Starter Kit
&lt;/h3&gt;

&lt;p&gt;Web Starter Kit is boilerplate by Google with 18k stars on GitHub. Tools for building a great experience across many devices and performance oriented. As well as Create React App, it’s a good stepping stone both for beginners and professionals in coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/google/web-starter-kit"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-react-firebase-starter"&gt;
  &lt;/a&gt;
  12. React Firebase Starter
&lt;/h3&gt;

&lt;p&gt;React Firebase Starter is a react boilerplate for building app foundation with React.js, GraphQL.js, Relay and Material UI library. It  has serverless infrastructure provided by Google Cloud. To firestart it you need to clone the repo, update environment variables in .env and/or .env.local file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kriasoft/react-firebase-starter"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-native-boilerplate"&gt;
  &lt;/a&gt;
  React Native Boilerplate
&lt;/h2&gt;

&lt;p&gt;React Native ecosystem in its turn is an open source framework used more to develop mobile applications for Android, iOS, macOS, tvOS, Web, Windows. Working with RN, you need to install a development environment like Xcode for iOS or Android Studio for Android. All differences you may check in our recent article about the &lt;a href="https://flatlogic.com/blog/react-js-vs-react-native-what-are-the-key-differences-and-advantages/"&gt;key differences and advantages of React and React Native&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-native-starter"&gt;
  &lt;/a&gt;
  React Native Starter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactnativestarter.com/"&gt;React Native Starter&lt;/a&gt; is a fancy starter kit available in bright colors, built with React Native like a project template for mobile application. React Native Starter got modular architecture, tons of inner components like sidebar, navigation, form elements to aid you in coding. Flatlogic provides full support and updates in the premium version of the starter kit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/flatlogic/react-native-starter"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJvKBti6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/03/RNS_Article_blog-Copy-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJvKBti6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/03/RNS_Article_blog-Copy-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Picking your right react boilerplate is important not only while setting up all configurations, but scaling and maintaining the app or website in future.&lt;/p&gt;

&lt;p&gt;Some developers want to make the boilerplate more generic and share them online for others to use. You can make your own boilerplate and share it or discuss it with us on our forum!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-flatlogic"&gt;
  &lt;/a&gt;
  About Flatlogic
&lt;/h1&gt;

&lt;p&gt;At Flatlogic, we help businesses to speed up web development with our beautifully designed web &amp;amp; mobile application templates built with &lt;a href="https://flatlogic.com/templates/react"&gt;React&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/vue"&gt;Vue&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/angular"&gt;Angular&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://flatlogic.com/templates/bootstrap"&gt;Bootstrap&lt;/a&gt;. During the last several years we have successfully delivered more than 100 custom dashboards and data management solutions to various clients starting from innovative startups to established and respected enterprises.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WpVQsS-Bb3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might also like these articles:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/top-24-free-essential-plugins-to-extend-bootstrap-4mn6"&gt;Top 24 Free Essential Plugins To Extend Bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/37-simple-and-useful-table-templates-examples-for-web-developers-i3j"&gt;37 Simple And Useful Table Templates &amp;amp; Examples For Web Developers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/top-13-login-pages-design-examples-57ip"&gt;Top 13+ Login Pages Design Examples&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Have you ever used services like Fiverr?</title>
      <author>Madza</author>
      <pubDate>Tue, 11 May 2021 07:38:48 +0000</pubDate>
      <link>https://dev.to/madza/have-you-ever-used-services-like-fiverr-2gne</link>
      <guid>https://dev.to/madza/have-you-ever-used-services-like-fiverr-2gne</guid>
      <description>&lt;p&gt;Services like &lt;a href="https://fiverr.com"&gt;Fiverr&lt;/a&gt; could be a life server for custom design, logo, illustration, or any other service you lack expertise or time to work on for a couple of bucks you pay someone.&lt;/p&gt;

&lt;p&gt;Have you ever used services like Fiverr to assist you?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>fiverr</category>
    </item>
  </channel>
</rss>
