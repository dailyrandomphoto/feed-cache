<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>RxJS pipe as a React hook</title>
      <author>Kostia Palchyk</author>
      <pubDate>Mon, 26 Apr 2021 17:34:36 +0000</pubDate>
      <link>https://dev.to/kosich/rxjs-pipe-as-a-react-hook-3lne</link>
      <guid>https://dev.to/kosich/rxjs-pipe-as-a-react-hook-3lne</guid>
      <description>&lt;p&gt;Ever tried to use an Rx Observable in React? Then you know what's the problem with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, it subscribes to the &lt;code&gt;timer&lt;/code&gt; with each render. Which happens on each &lt;code&gt;timer&lt;/code&gt; emission. Which leads to a re-render. Which leads to... well, you know, memory leaks and weird behaviour. And on top of that it won't be destroyed with the component unmount.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this short post I want to share with you a non-canonical idea (probably not original one) how to fix that!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; &lt;a href="https://stackblitz.com/edit/react-rx-mystery-timer?file=App.tsx"&gt;online playground with hook pipe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3oriO6BkBa8XhQLqWA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oriO6BkBa8XhQLqWA/giphy.gif" alt="the hook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hook"&gt;
  &lt;/a&gt;
  🪝 The hook
&lt;/h2&gt;

&lt;p&gt;We could devise a custom react hook, that will fix that. Lets use a &lt;code&gt;useEffect&lt;/code&gt; hook, which will subscribe to the source, and push messages to our observer (&lt;code&gt;setTime&lt;/code&gt; in the example above)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;useObservable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useEffect with empty deps will call this only once&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// connect&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt; unsub on unmount&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;setTime&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which looks react-ish... but not rx-ish.&lt;br&gt;
Not nice 😕. We can do better!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So let's explore another way!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rxjs-pipes"&gt;
  &lt;/a&gt;
  🗞️ RxJS pipes
&lt;/h2&gt;

&lt;p&gt;But before we continue, a quick reminder of RxJS pipe operator mechanics:&lt;/p&gt;

&lt;p&gt;Roughly speaking RxJS pipe operator (like, &lt;code&gt;map&lt;/code&gt;) is just a function that takes one Observable and returns a new Observable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when we subscribe to the resulting &lt;code&gt;Observable&amp;lt;B&amp;gt;&lt;/code&gt;, operator subscribes to the source &lt;code&gt;Observable&amp;lt;A&amp;gt;&lt;/code&gt;. And when that source emits a value, operator applies its logic to it (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc) and decides what, when, and how to push to the resulting &lt;code&gt;Observable&amp;lt;B&amp;gt;&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; will push modified values, &lt;code&gt;filter&lt;/code&gt; will push only values that satisfy given condition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Okay, back to hooks&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hook-pipe"&gt;
  &lt;/a&gt;
  🪝🗞️ The hook pipe
&lt;/h2&gt;

&lt;p&gt;We can modify the hook to implement the Rx Operator interface, while still enclosing a &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Let's start with how we'll use it in a component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;useUntilUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's it's implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useUntilUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Observable =&amp;gt; Observable interface&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create a new Subscription&lt;/span&gt;
    &lt;span class="c1"&gt;// we'll use it to handle un-mounts and unsubscriptions&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// this is run only once&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// connect observer to source&lt;/span&gt;
      &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="c1"&gt;// on unmount -- destroy this subscription&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="c1"&gt;// return sub to handle un-subscriptions&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really just 8 lines of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: while being leak-free and working as promised, this might not be the best way to use Observables in React. Tried &lt;a href="https://dev.to/rxjs/fetching-data-in-react-with-rxjs-and-lt-gt-fragment-54h7"&gt;&amp;lt;$&amp;gt; fragment&lt;/a&gt; already?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  🛸💨 Outro
&lt;/h2&gt;

&lt;p&gt;Try our shiny hook pipe (with dependencies!) in this &lt;a href="https://stackblitz.com/edit/react-rx-mystery-timer?file=App.tsx"&gt;online playground&lt;/a&gt; and leave a comment here with your opinion!&lt;/p&gt;

&lt;p&gt;That's it for today! Follow me here and on &lt;a href="https://twitter.com/kddsky"&gt;twitter&lt;/a&gt; for more RxJS, React, and JS posts!&lt;/p&gt;

&lt;p&gt;I hope you had fun! If you enjoyed reading — please, indicate that with ❤️ 🦄 📘 buttons — it helps a lot!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article! Stay reactive and have a nice day 🙂&lt;/p&gt;

&lt;p&gt;Cya! 👋&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#psst-check-out-my-other-rx-react-articles"&gt;
  &lt;/a&gt;
  Psst.. Check out my other Rx / React articles!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/rxjs/fetching-data-in-react-with-rxjs-and-lt-gt-fragment-54h7"&gt;"Fetching Data in React with RxJS and &amp;lt;$&amp;gt; fragment"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/rxjs/turn-a-stream-of-objects-into-an-object-of-streams-2aed"&gt;"Turn a Stream of Objects into an Object of Streams"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/kosich/queries-for-observables-crazy-simple-15h3"&gt;"Queries for Observables: Crazy &amp;amp; Simple!"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/kosich/recks-rxjs-based-framework-23h5"&gt;"Intro to Recks: Rx+JSX experiment"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;header image by &lt;a href="https://unsplash.com/@victor_g?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Victor Garcia&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;, gif taken from &lt;a href="https://giphy.com/gifs/cat-box-hook-3oriO6BkBa8XhQLqWA"&gt;giphy.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;😉&lt;/p&gt;

</description>
      <category>react</category>
      <category>rxjs</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Beginners guide to async-await in Javascript</title>
      <author>Ashok Naik</author>
      <pubDate>Mon, 26 Apr 2021 16:48:08 +0000</pubDate>
      <link>https://dev.to/a_shokn/beginners-guide-to-async-await-in-javascript-17jj</link>
      <guid>https://dev.to/a_shokn/beginners-guide-to-async-await-in-javascript-17jj</guid>
      <description>&lt;p&gt;Async Await is syntactical sugar wrapped around to make the implementation of promises easier, If you don't understand how promises works make sure you check out &lt;a href="https://dev.to/a_shokn/beginners-guide-to-promises-in-javascript-5efp"&gt;this post&lt;/a&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The purpose of async / await is to simplify the syntax necessary to consume promise-based APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's jump into an example that will help us understand Async Await in a better way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newRequest(place) {
    return new Promise((resolve,reject)=&amp;gt;{
    if(place === 'home') {
    resolve('You have reached home');
    } else {
    resolve("You haven't reached home");
    }
  })
}

function makeRequest(response) {
    return new Promise((resolve,reject)=&amp;gt;{
    console.log(response);
    resolve(`Current location:- ${response}`);
  })
}

newRequest('home').then(response =&amp;gt;{
return makeRequest(response);
}).then(makeResponse =&amp;gt; console.log(makeResponse)).catch((err) =&amp;gt; console.log(err));

//Output
//"You have reached home"
//"Current location:- You have reached home"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the &lt;code&gt;newRequest&lt;/code&gt; function returns a promise that takes a parameter place based on which promise is resolved. The &lt;code&gt;makeRequest&lt;/code&gt; function returns a promise which is always resolved.   The two functions are executed in order the second promise waits for the first one.&lt;/p&gt;

&lt;p&gt;The above code can be simplified by with the use of Async/Await&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newRequest(place) {
    return new Promise((resolve,reject)=&amp;gt;{
    if(place === 'home') {
    resolve('You have reached home');
    } else {
    resolve("You haven't reached home");
    }
  })
}

function makeRequest(response) {
    return new Promise((resolve,reject)=&amp;gt;{
    console.log(response);
    resolve(`Current location:- ${response}`);
  })
}

async function checkLocation() {
try {
const  response = await newRequest('home');
const  processed = await makeRequest(response);
console.log(processed);
} catch (err) {
console.log(err);
}
}

checkLocation();

//OUTPUT
// "You have reached home"
// "Current location:- You have reached home"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;checkLocation&lt;/code&gt; is declared using the async keyword. The async keyword tells javascript that the following function is asynchronous. The &lt;code&gt;checkLocation&lt;/code&gt; works exactly the same as the promises returning the same output. As you can see it looks a lot better and readable than the first example.&lt;br&gt;
Error handling is done with the help of a try-catch block.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Async Await is just like promises in a way makes it easier to write promises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you for your time. That's All folks&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Job Search Tips 101</title>
      <author>Matt Curcio</author>
      <pubDate>Mon, 26 Apr 2021 16:47:15 +0000</pubDate>
      <link>https://dev.to/mccurcio/job-search-tips-101-naj</link>
      <guid>https://dev.to/mccurcio/job-search-tips-101-naj</guid>
      <description>&lt;p&gt;I hope these tips help focus the CodeChallenge #cnc2021 job hunters. What would you add/subtract?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Find organizations&lt;/strong&gt; that interest you. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Research organization&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Use: Google, Linkedin, Twitter,&lt;/li&gt;
&lt;li&gt;Learn about its competitors,&lt;/li&gt;
&lt;li&gt;Note recent important news (&lt;em&gt;Good or bad&lt;/em&gt;),&lt;/li&gt;
&lt;li&gt;Prepare company spreadsheet for info (&lt;em&gt;Basic or detailed, up to you&lt;/em&gt;),&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Study Job Description&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;What do you have? &lt;/li&gt;
&lt;li&gt;What don't you have? (&lt;em&gt;Less Important&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write out &lt;em&gt;YOUR&lt;/em&gt; answers for common interview questions&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Tell me a little about yourself,&lt;/li&gt;
&lt;li&gt;What are your biggest strengths &amp;amp; weaknesses?&lt;/li&gt;
&lt;li&gt;Where do you see yourself (&lt;em&gt;In x years, up to you&lt;/em&gt;)?&lt;/li&gt;
&lt;li&gt;Describe your dream job,&lt;/li&gt;
&lt;li&gt;Why did you leave your last position or What have you done during your employment gap?&lt;/li&gt;
&lt;li&gt;Why do you want this job?&lt;/li&gt;
&lt;li&gt;What type of work environment do you prefer?&lt;/li&gt;
&lt;li&gt;How would your co-workers or managers describe you?&lt;/li&gt;
&lt;li&gt;Why are you the best candidate for this role?&lt;/li&gt;
&lt;li&gt;What achievement(s) are you most proud of?&lt;/li&gt;
&lt;li&gt;Tell me about a challenge you’ve faced at work and how you dealt with it?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Practice your answers out loud&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Make it feel natural,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STAR&lt;/strong&gt;: Situation, Task, Action, &amp;amp; Result.

&lt;ul&gt;
&lt;li&gt;Explain the &lt;strong&gt;Situation&lt;/strong&gt;; set the 'stage,'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Task&lt;/strong&gt;; discuss the task set out for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Action&lt;/strong&gt;; explain the specific actions you took to handle the situation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Result&lt;/strong&gt;; describe the outcome you reached through your actions&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Finally&lt;/strong&gt;; tie it back to their position with your final sentence.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>cnc2021</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Earn money using the Web Monetization API</title>
      <author>Beto Muniz</author>
      <pubDate>Mon, 26 Apr 2021 16:03:05 +0000</pubDate>
      <link>https://dev.to/obetomuniz/earn-money-using-the-web-monetization-api-4c9k</link>
      <guid>https://dev.to/obetomuniz/earn-money-using-the-web-monetization-api-4c9k</guid>
      <description>&lt;p&gt;&lt;em&gt;Content inspired after I receive &lt;a href="https://twitter.com/obetomuniz/status/1385026594285236234"&gt;my first payment using Web Monetization API&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  🧑‍🔬  The How
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sign up to &lt;a href="https://wallet.uphold.com/signup"&gt;wallet.uphold.com/signup&lt;/a&gt; and verify yourself&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the Interledger Payment Pointer in the Transact panel&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QvzBv6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pd0mbyoumewzccnd57p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QvzBv6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pd0mbyoumewzccnd57p.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMKMzWrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdsvnqcygexw4burot6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMKMzWrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdsvnqcygexw4burot6e.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And pick a currency target. It could be USD, BTC, etc &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBgVeOzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e01yeoj1wixdflccllg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBgVeOzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e01yeoj1wixdflccllg.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Web Monetization API needs a &lt;a href="https://paymentpointers.org/"&gt;Payment Pointer&lt;/a&gt; to address micropayment for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-the-where"&gt;
  &lt;/a&gt;
  🏗 The Where
&lt;/h2&gt;

&lt;p&gt;You could use your previous created Uphold's Payment Pointer on your website using this declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"monetization"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"$ilp.your.payment/pointer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, dozens of services offer support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.coil.com/docs/monetize/content/twitch"&gt;Twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/devteam/you-can-now-web-monetize-your-dev-posts-but-don-t-get-your-hopes-up-too-quickly-goc"&gt;DEV.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/post/how-to-enable-web-monetization-on-your-hashnode-blog-in-2-steps-ckdu4rspj003tn0s1959c0ruq"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cinnamon.video/"&gt;Cinnamon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.coil.com/docs/monetize/content/wp-overview"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even &lt;a href="https://help.coil.com/docs/monetize/content/youtube-monetize-channel"&gt;YouTube&lt;/a&gt;, when connected in a creator account on &lt;a href="https://coil.com/creator"&gt;Coil&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-monetization-api"&gt;
  &lt;/a&gt;
  💰 The Web Monetization API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGOJnTtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzoxgdhsllxa29qas93x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGOJnTtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzoxgdhsllxa29qas93x.png" alt="Web Monetization API"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://webmonetization.org/"&gt;Web Monetization API is a W3C Standard&lt;/a&gt; that uses a neutral payment protocol called &lt;a href="https://interledger.org/"&gt;Interledger (ILP)&lt;/a&gt; for transferring money for anyone by anyone. &lt;/p&gt;

&lt;p&gt;The proposal help web creators avoid systems that slow down the web and creates annoying UX&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-about-web-monetization-standards"&gt;
  &lt;/a&gt;
  📚 More about Web Monetization Standards
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.coil.com/docs/monetize/content/get-monetized-overview/index.html"&gt;Get Monetized - A Coil's Overview about Web Monetization API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dcBxWV8fu8k"&gt;Videoin 🇧🇷 about Web Monetization API on my YouTube Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;💌 Also, don't miss content like this &lt;a href="https://www.getrevue.co/profile/obetomuniz/"&gt;signing my newsletter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>monetization</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Why Kotlin: A Note From a Java Developer</title>
      <author>Balamurugan Krishnamoorthy (Bala)</author>
      <pubDate>Mon, 26 Apr 2021 16:01:43 +0000</pubDate>
      <link>https://dev.to/krishnam/why-kotlin-a-note-from-java-developer-2n6h</link>
      <guid>https://dev.to/krishnam/why-kotlin-a-note-from-java-developer-2n6h</guid>
      <description>&lt;p&gt;This blog is about sharing my experience and what I love about Kotlin. I worked with two applications that are entirely written in Kotlin in a year. I had exposure to two ways of using Kotlin in our applications: Writing a new application from scratch and migrating the existing legacy Java app to Kotlin.&lt;/p&gt;

&lt;p&gt;Let's start with what we love about Kotlin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-kotlin-and-why-do-we-use-it"&gt;
  &lt;/a&gt;
  Why Kotlin (and why do we use it)?
&lt;/h2&gt;

&lt;p&gt;One of the tangible and essential things is that Kotlin language came from the industry, not academia – It was developed &lt;strong&gt;"to solve programmers' difficulties"&lt;/strong&gt; and operational challenges. We wanted to pay special attention to Kotlin features that Java does not have (at the time of this exercise) to evaluate if it will help the projects. The result is, we could fill an entire book about the things we like about Kotlin. Here is a run-down of highlights.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-change-the-way-we-code-compare-to-java"&gt;
  &lt;/a&gt;
  How does It Change the Way We Code (compare to Java)?
&lt;/h2&gt;

&lt;p&gt;Kotlin is really "Java's best practices" put into a language. It solves problems faced by working programmers today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin &lt;strong&gt;costs nothing to adopt&lt;/strong&gt; in two aspects! 

&lt;ul&gt;
&lt;li&gt;It's Open-Source. &lt;/li&gt;
&lt;li&gt;One-click Java to Kotlin converter tool, and a strong focus on Java binary compatibility.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lean Syntax:&lt;/strong&gt; Kotlin focuses on readable, at the same time, concise syntax, which makes code-reviews/understanding-the-code painless. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Complete Interoperability with Java:&lt;/strong&gt; Kotlin is 100% interoperable with Java, having many similarities in the structuring and functionalities.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ease of interchangeability:&lt;/strong&gt; The shift from Java to Kotlin is smooth and swift. One can have Kotlin and Java both alongside each other in the same project. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved Code Maintainability:&lt;/strong&gt; Being a concise language, Kotlin drastically reduces the boilerplate code required, enhancing productivity and reducing error. Less code makes easy learning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lower Instances of Application Crashes:&lt;/strong&gt; Kotlin is designed on the concept of fail-fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzFQst8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxfl6d78itwjlvxk3ya6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzFQst8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxfl6d78itwjlvxk3ya6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin brings a myriad of language features. It is worth noting that most of the features are meant to bring best practice to the coding (comparable to how frameworks guide developers in the right direction)—listing down the top the fifteen features, which will make a huge difference compared to how we code in Java.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Null Safety: Kotlin as a whole has a much bigger emphasis on overall null safety.
2. Arrays in Kotlin are invariant: Arrays in Kotlin are not built on native types but are instead based on a Java array, which means that an array of a specific type cannot be assigned to an array of its parent type. It is not possible to set Array&amp;lt;Integer&amp;gt; to Array&amp;lt;Any&amp;gt;. 
3. Extension Functions: Ability to extend a class with new functionalities without modifying it
4. No checked exceptions: In Java, exception handling is tedious and controlled by strict rules. Whenever we are dealing with checked exceptions, we can either handle exceptions in try…catch blocks or be declared to be thrown. In this case, the code is repeated. 
5. Data Class: Unlike in Java, where, when creating classes only meant to hold data (models or POJOs to be specific), we are required to write all of the fields, setters, getters as well as a constructor; In Kotlin, we can define all of these things on a single line.
6. Default Arguments: Removes a lot of the need for overloaded methods with the introduction of default arguments
7. Named Arguments: Avoids Client confusion in passing Parameters to Method or Constructor calls. It improves the readability of the code.
8. Delegation: Provides native support for the delegation pattern
9. When Expression: Provides the better version of Switch Statement 
10. Function Literals: Provides the concise version of Function Interfaces
11. Operator Overloading: This allows you to simulate a DSL
12. Immutability: Native support for making things immutable
13. Type Aliases: Improves readability and makes code succinct
14. String Interpolation: Easier way to concatenate a string together without excessive syntax
15. Better Generics &amp;amp; Coroutines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know what you're thinking at this moment; &lt;em&gt;"Wait! this is just a bunch of key distinctive features, and anything new gives something like that. Still, why Kotlin? You can't just sell it by showing a fancy list of features ".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I will tell you this, &lt;em&gt;"There is a way to look beyond just features."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's change the scenery now and go to &lt;strong&gt;defensive programming valley&lt;/strong&gt;, then it will be evident 'Why Kotlin'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defensive-programming"&gt;
  &lt;/a&gt;
  Defensive Programming
&lt;/h2&gt;

&lt;p&gt;Think of defensive programming as analogous to "defensive driving", which would help if the term is not very familiar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzZ0vYkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0uvr08ihi4782y88r5z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzZ0vYkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0uvr08ihi4782y88r5z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you drive defensively, you assume that the other drivers are not careful. You must be cautious yourself: you must give yourself extra room on the road to make emergency manoeuvres. You assume other drivers may ignore red lights and stop signs; therefore, you look both ways and are ready to stop when you approach intersections. You anticipate problem areas up ahead – dense traffic, impaired visibility, and other potential impediments. In any case, you devote a lot of time, energy, and resources to the infrequent and unlikely event that you will encounter a dangerous situation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Okay, I got it"&lt;/em&gt;. &lt;em&gt;"Adding NULL checks and other checks is Defensive programming"&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;"No! Please stop that thought&lt;/em&gt; – we are not giving enough credit to the &lt;strong&gt;art of defensive programming&lt;/strong&gt; if we are thinking that way".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Okay, then, what is defensive programming?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I said, it is an art. what I believe to be the motto of defensive programming is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"If you have to defend, you already had lost the battle."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, adding Null-Checks is Defensive-Coding; instead, coding so that you do not need to check for null is the real art. This comparison is just one example to illustrate defensive programming; there are many – we can have an exclusive blog for visiting that valley later. Let's get back to Kotlin Valley now.&lt;/p&gt;

&lt;p&gt;When we use Kotlin, without the developer being aware, they use many defensive programming styles naturally. It is by design as a default setting; e.g. all classes are final unless stated otherwise, the default behaviour of type is non-nullable…etc…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-journal"&gt;
  &lt;/a&gt;
  Dev Journal
&lt;/h2&gt;

&lt;p&gt;In 2018, We worked on a Greenfield project, which allowed us to take a step back to question popular thinking a few years back.&lt;/p&gt;

&lt;p&gt;When we think of developing an application, Java is one of the top programming languages that come to mind for various reasons, including its robust and secure nature and the independence of its platform. Kotlin is designed to be interoperable with Java, meaning Kotlin can seamlessly co-exist with Java. We can add Kotlin to our existing applications, and we can use Java-based frameworks for application development. With this bi-directional use of Kotlin, we can invoke Java constructs from Kotlin or Kotlin constructs from Java.&lt;/p&gt;

&lt;p&gt;Although Java and Kotlin are both JVM-based languages used for application development, there are several differences between them, as covered in an earlier section. Kotlin has addressed some of the limitations previously associated with Java. The more we learn about the things Kotlin support, our pressing question of why-kotlin turned into why-not-kotlin.&lt;/p&gt;

&lt;p&gt;We had exposure to two ways of using Kotlin in our applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Moving legacy Java written project to Kotlin language&lt;/li&gt;
&lt;li&gt;Project development on Kotlin from scratch
While developing a new application, in general, when time-limit holds the gun to the head, we tend to copy over the setup from an existing application; sometimes, we don't realize that we are reproducing some legacy stuff along with it. For these projects, we tried not to do that. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Is there any impact on the way we test or write the test? "&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"Yes, very positive one. The two applications built in this stack have around 80+ and 90+ as unit test coverage."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Did we notice any significant performance degrade?"&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though we have not tested the performance of the Kotlin in an experimental condition like implementing the application both in Kotlin &amp;amp; Java and bench-marking it, however, we did compare the performance with legacy (now dead) wherever applicable. The performance was at par, and sometimes it was even better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"What is the learning curve (and how did we learn)?"&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many ways you can build new tech skill; most of us followed the below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: 4Hrs Video Training to start the cold engine to enter into the Kotlin Valley &lt;br&gt;
There are a lot of courses available on Pluralsight &amp;amp; Udemy; we started with Pluralsight: kotlin-fundamentals. At that time, when we began learning  Kotlin. Pluralsight course was open for Free. Lucky Us. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Kotlin Koans to get familiar with Kotlin by doing small exercises. Kotlin Documentation is good to look back at any time. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3 &amp;amp; 4:  Then, Code &amp;amp; Write Unit Tests (have a printout of Quick Reference Card while coding) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is the Maintainance overhead post-production ?&lt;/strong&gt;&lt;br&gt;
These two applications are running well in production over the last 3+ years without any technical or maintenance issues related to the stack being Kotlin; thus, we see high stability in these two applications. &lt;/p&gt;

&lt;p&gt;We enjoyed learning something new (in 2018). From a Java developer perspective, the learning curve to Code in Kotlin is close to flat. Once the integration of the stack was ready to provide a skeleton for the project, we managed to gain speed in Kotlin within a week and write more idiomatic code within a couple of weeks. If you find it interesting, learn about best practices and go for it to fit your application nature. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summingup"&gt;
  &lt;/a&gt;
  Summing-up
&lt;/h2&gt;

&lt;p&gt;Kotlin, &lt;a href="https://youtu.be/Ly3Vs1K_74g"&gt;"You Had Me at Hello"&lt;/a&gt; (here, the Hello means "to solve programmers' difficulties"). Overall, it was a positive experience. &lt;/p&gt;

&lt;p&gt;P.S: This is a page from my devjournal 2018. And, I feel this is still relevant. &lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>java</category>
      <category>devjournal</category>
      <category>jvm</category>
    </item>
    <item>
      <title>Visualizing Chaos Theory in Javascript with Codesphere and p5.JS
</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 26 Apr 2021 16:00:18 +0000</pubDate>
      <link>https://dev.to/codesphere/visualizing-chaos-theory-in-javascript-with-codesphere-and-p5-js-2ic2</link>
      <guid>https://dev.to/codesphere/visualizing-chaos-theory-in-javascript-with-codesphere-and-p5-js-2ic2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQ1EznZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lit7d9ypclgzmpm4e603.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQ1EznZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lit7d9ypclgzmpm4e603.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A mathematical topic that has always fascinated me is Chaos Theory. At a foundational level, Chaos Theory states that even the most random of systems have underlying laws and patterns that can create ordered outcomes. In other words, order can be born out of chaos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A fun game that gives a sneak peek into Chaos Theory is what is often known as the Chaos Game. In this article, I will be explaining how the Chaos Game is played and showing you how you can simulate it fairly easily in Javascript with p5.js and Codesphere.&lt;/p&gt;

&lt;p&gt;To get a sneak peek of the project, you can run it in Codesphere, an online development, and deployment tool, here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codesphere.com/#https://github.com/LiorB-D/ChaosGameJS"&gt;https://www.codesphere.com/#https://github.com/LiorB-D/ChaosGameJS&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that you will have to make a free account if you have not used Codesphere before. Once the Codesphere environment is created, you can deploy the app by running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm ci &amp;amp;&amp;amp; node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can find more information on Codesphere here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesphere.com/?utm_source=dev.to&amp;amp;utm_medium=link-website&amp;amp;utm_campaign=blog-chaos-theory"&gt;https://www.codesphere.com&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-chaos-game"&gt;
  &lt;/a&gt;
  The Chaos Game
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWrsojIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t2m3lq4a6qk5os9f6l4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWrsojIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t2m3lq4a6qk5os9f6l4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The chaos game begins by drawing three corners of a triangle, and a point in the center of the triangle. We’ll label our corners A, B, and C.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6P7l9v---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfevnwxs0aitnmyjcaww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6P7l9v---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfevnwxs0aitnmyjcaww.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now pick one of our corners at random. Say we choose A, draw an additional point halfway between the center and A.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiVUWda5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgvsdu2tji9r7z3z2a9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiVUWda5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgvsdu2tji9r7z3z2a9i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now repeat the process again, picking a random corner(C in this case), and drawing a point halfway between C and our most recent point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ubCocxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss2o6o3tivqxj15zddzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ubCocxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss2o6o3tivqxj15zddzk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Chaos Game is interested in what occurs if you repeat this process continually. Will the entire triangle be filled up? Will the points be concentrated around the edges? Since we are picking the corners at random, maybe there will be no pattern at all?&lt;/p&gt;

&lt;p&gt;Well, it turns out that a pattern does emerge: The Sierpinski Triangle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxG3-pyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v366zncj3ou34fmnc23s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxG3-pyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v366zncj3ou34fmnc23s.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even more interesting than this fractal, is the fact that the Sierpinski Triangle occurs in other places in Mathematics, such as Pascal’s Triangle(When you fill in all odd numbers):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oi7iMk6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgx36cm7ch1ft364pgww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oi7iMk6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgx36cm7ch1ft364pgww.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-our-environment"&gt;
  &lt;/a&gt;
  Setting up our Environment
&lt;/h3&gt;

&lt;p&gt;Let’s get started! If you are using Codesphere create an empty project. If you are not, create an empty directory.&lt;br&gt;
Next, initialize npm:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are going to create two files: server.js to run our express server, and a index.html file for our webpage.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch server.js index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, install ExpressJS, a NodeJS framework for creating web servers:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i express&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#serving-our-html-page"&gt;
  &lt;/a&gt;
  Serving our HTML Page
&lt;/h3&gt;

&lt;p&gt;For this project we are going to use Express to serve our html page that will contain our relevant code. To do this, we write the following code in our server.js file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To run our server on port 3000, we can just run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, we haven’t yet put anything in our &lt;code&gt;index.html&lt;/code&gt; file, so we’ll just get a blank screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUPyTXUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwbba11obby555qu1ehf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUPyTXUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwbba11obby555qu1ehf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphing-our-triangle"&gt;
  &lt;/a&gt;
  Graphing Our Triangle
&lt;/h3&gt;

&lt;p&gt;The next step is to start displaying our necessary graphics. In order to plot points, we’ll be using p5.JS, an easy-to-use javascript graphical library.&lt;br&gt;
&lt;a href="https://p5js.org/"&gt;https://p5js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can access p5js with the following extremely long CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js" integrity="sha512-WIklPM6qPCIp6d3fSSr90j+1unQHUOoWDS4sdTiR8gxUTnyZ8S2Mr8e10sKKJ/bhJgpAa/qG068RDkg6fIlNFA==" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note, that we will also be creating a text field for the user to enter the number of iterations that they want to play the game for, which we can also use p5.js to make.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;If we deploy our code, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mdn0hu5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6funwe9k0q27nn8zi16l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mdn0hu5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6funwe9k0q27nn8zi16l.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it! In only around 50 lines of code we can simulate the Chaos Game and generate an amazing fractal!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;Now if you are looking to play around with the Chaos Game some more, I’d encourage some of the following variations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What happens if you change the starting point? What if you start at one of the corners? What if you start outside the triangle?&lt;/li&gt;
&lt;li&gt;What happens if you change the corners of the triangle? What if it is a right triangle?&lt;/li&gt;
&lt;li&gt;Can this game be played in 3D with a pyramid?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Beautiful Chase RGB Glow Effect CSS</title>
      <author>MysticZA</author>
      <pubDate>Mon, 26 Apr 2021 15:36:34 +0000</pubDate>
      <link>https://dev.to/mysticza/beautiful-chase-rgb-glow-effect-css-1h2p</link>
      <guid>https://dev.to/mysticza/beautiful-chase-rgb-glow-effect-css-1h2p</guid>
      <description>&lt;p&gt;As an extension to Nikhil's: &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/amazing-button-hover-with-css-5egi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazing button hover with CSS&lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Apr 15 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
I have created a full 360° "chase" effect using an altered version of the original design.
&lt;h2&gt;
  &lt;a href="#with-text-effect"&gt;
  &lt;/a&gt;
  With text effect:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/MysticZA/embed/qBRvjEX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#without-text-effect-better-visual-accessibility"&gt;
  &lt;/a&gt;
  Without text effect (better visual accessibility):
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/MysticZA/embed/zYNbzrN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please be sure to check out Nikhil's original post.&lt;br&gt;
Comments welcome!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>rgb</category>
    </item>
    <item>
      <title>Best Tool To Design Graphics Instantly</title>
      <author>GoOnlineTools</author>
      <pubDate>Mon, 26 Apr 2021 15:33:21 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-tool-to-design-graphics-instantly-2g3c</link>
      <guid>https://dev.to/goonlinetools/best-tool-to-design-graphics-instantly-2g3c</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Today in this post I will introduce the best graphic designing tools for beginners.&lt;/p&gt;

&lt;p&gt;When I have started designing for Social Media &amp;amp; Website, experts suggest me tools like Coral, Photoshop, etc&lt;/p&gt;

&lt;p&gt;But my suggestion for people who want to start graphic designing &amp;amp; learn everything easily without some expertise then starts Graphic Designing using these online tools -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-canva"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bit.ly/3sN9AaU"&gt;Canva&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kf5ja6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ucom4aoeuh2wmou7d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kf5ja6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ucom4aoeuh2wmou7d.jpg" alt="Canva screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Canva is a graphic design platform, used to create social media graphics, presentations, posters, documents, videos, and other visual content. The app includes templates for users to use. The platform is free to use and offers paid subscriptions like Canva Pro and Canva for Enterprise for additional functionality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Canva offers 30 days of free pro access for new users.&lt;/strong&gt; If you haven't used canva before then &lt;a href="https://bit.ly/3sN9AaU"&gt;click here&lt;/a&gt; to try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-visme"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.ly/3ezabIg"&gt;Visme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpnyUM5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi2t497nho6yzi7iby5u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpnyUM5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi2t497nho6yzi7iby5u.jpg" alt="Visme screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visme is an all-in-one visual content platform that allows everyone, including non-designers, to create beautiful presentations, infographics, reports and social media images in minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-crello"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bit.ly/32OqoUj"&gt;Crello&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbISayXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1q5vzmamjqa6nxovds4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbISayXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1q5vzmamjqa6nxovds4.jpg" alt="Crello screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crello is a video and graphic design tool for everyone – it will help you create visuals for social media in just a few minutes (be it a post, video Story, or an ad), design a business card or a flyer, create marketing collateral for print, social and blogs, as well as create long-form content like presentations and more.&lt;/p&gt;

&lt;p&gt;I recommend Canva because in terms of features and simplicity.&lt;/p&gt;

&lt;p&gt;Which tool you are using now for graphics designing. Let me know in comment.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>How Strapi triggers Nuxt static site generation for S3 bucket</title>
      <author>Liu Yu Zhou</author>
      <pubDate>Mon, 26 Apr 2021 15:10:56 +0000</pubDate>
      <link>https://dev.to/jacobliu/how-strapi-triggers-nuxt-static-site-generation-for-s3-bucket-1fg6</link>
      <guid>https://dev.to/jacobliu/how-strapi-triggers-nuxt-static-site-generation-for-s3-bucket-1fg6</guid>
      <description>&lt;p&gt;I have been working on ecommerce website, we just suppose to build the website as operational.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-choose-strapi-and-nuxt-algolia-for-search-engine"&gt;
  &lt;/a&gt;
  I choose Strapi and Nuxt, Algolia for search engine
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Strapi&lt;/strong&gt; is headless CMS, open-source, provides the large-scale of APIs without hard-coding.&lt;br&gt;
&lt;strong&gt;Nuxt&lt;/strong&gt; is SSR vue.js based framework, useful for pre-rendered pages for ecommerce.&lt;br&gt;
&lt;strong&gt;Algolia&lt;/strong&gt; is client-side search engine, very impressive tool to make high traffic in business.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-infrastructure-i-use"&gt;
  &lt;/a&gt;
  The infrastructure I use
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Source repositories on &lt;em&gt;Github&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Strapi on AWS &lt;em&gt;EC2&lt;/em&gt; instance&lt;/li&gt;
&lt;li&gt;Nuxt on AWS &lt;em&gt;S3&lt;/em&gt; bucket&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-things-i-need"&gt;
  &lt;/a&gt;
  The things I need
&lt;/h2&gt;

&lt;p&gt;The static website should be generated again when &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The developer commit the code updates.&lt;/li&gt;
&lt;li&gt;The author upload own product.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#how-did-i-tweak-the-problems"&gt;
  &lt;/a&gt;
  How did I tweak the problems
&lt;/h2&gt;

&lt;p&gt;I solved all problems with GitHub Actions, it is the great tool for CI/CD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; SSG : The developer commit the code updates.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It involves several steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify when the github action should be trigger&lt;/li&gt;
&lt;li&gt;Configure AWS Credentials&lt;/li&gt;
&lt;li&gt;Create ENV files&lt;/li&gt;
&lt;li&gt;Cache Packages&lt;/li&gt;
&lt;li&gt;Install Packages&lt;/li&gt;
&lt;li&gt;Generate Static Pages&lt;/li&gt;
&lt;li&gt;Deploy website on S3 bucket&lt;/li&gt;
&lt;li&gt;Cloudfront Invalidation&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&amp;gt; SSG: The author upload own product.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the tricky,&lt;/strong&gt; I was stuck on this for couple of days.&lt;br&gt;
There should be something to trigger S3 updates from Strapi,&lt;br&gt;
I had researched the solutions and found that Netlify is the best solution because it provides build hook for CI/CD.&lt;br&gt;
However, I wanted to take the challenge and decided not to use Netlify. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can I achieve the same behavior without Netlify, keep S3 bucket?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Make the custom node app for webhook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After a while, I noticed that Github has REST APIs to control resources. I can dispatches APIs to certain repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.github.com/repos/{ORG_NAME}/{REPO_NAME}/dispatches
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the key.&lt;br&gt;
In this node app, we just set headers to call github APIs.&lt;br&gt;
I named the event as &lt;em&gt;ssg&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const postData = Buffer.from(
  JSON.stringify({
    event_type: "ssg",
  })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;headers: {
    Authorization: "token *****************",
    Accept: "application/vnd.github.everest-preview+json",
    "Content-Type": "application/json",
    "Content-Length": Buffer.byteLength(postData),
    "User-Agent": "nodejs request",
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, upload nodejs app on EC2 instance. Here is the completed code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Configure CI/CD script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure script to listen dispatch events from node app.&lt;br&gt;
Github action listens the nodejs app request and regenerate the static website, deploy updates on S3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CI/CD
on:
  repository_dispatch:
    types: ssg
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Register webhook in Strapi dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Register webhook on EC2 in Strapi dashboard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JcXIPkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfgixyzmizbh2p1d19wq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JcXIPkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfgixyzmizbh2p1d19wq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all, long journey. Thanks for joining me. :)&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>nuxt</category>
      <category>github</category>
      <category>webhook</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Free Jinja Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 26 Apr 2021 15:03:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-free-jinja-template-3b7k</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-free-jinja-template-3b7k</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;&lt;a href="https://appseed.us/jinja-template"&gt;Jinja Template&lt;/a&gt;&lt;/strong&gt; crafted on top of a modern &lt;strong&gt;Bootstrap 5&lt;/strong&gt; design: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. The project might help beginners to code simple presentation websites on top of the existing codebase OR migrate the &lt;code&gt;production-ready&lt;/code&gt; UI to a legacy Python-based project compatible with &lt;strong&gt;Jinja Template Engine&lt;/strong&gt;: &lt;em&gt;Flask&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt;, &lt;em&gt;Bottle&lt;/em&gt; of &lt;em&gt;FastAPI&lt;/em&gt;.  Thanks for reading!&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jinja-soft-ui-dashboard.appseed-srv1.com/"&gt;Soft UI Dashboard Jinja&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/jinja-soft-ui-dashboard"&gt;Soft UI Dashboard Jinja&lt;/a&gt; - Source Code (MIT License)&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/jinja-template"&gt;Jinja Templates&lt;/a&gt; - a curated index&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIxU-JEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nzwr5aqqv948io4iqtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIxU-JEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nzwr5aqqv948io4iqtn.png" alt="Soft UI Dashboard - Jinja Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The design is the latest and most innovative crafted by the Creative-Tim agency. Made of hundred of elements, designed blocks, and fully coded pages, &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; is ready to help you create stunning websites and webapps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Elements&lt;/strong&gt; - Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combining. All components can take variations in colour, that you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liqs65Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybwshf9d3lqfo16faz7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liqs65Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybwshf9d3lqfo16faz7a.png" alt="Soft UI Dashboard - Billing Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; - UI Tables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MpviYrjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlpsd5f1hg1c3gdexdip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MpviYrjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlpsd5f1hg1c3gdexdip.png" alt="Soft UI Dashboard - UI Tables."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; - User Profile Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwTAiG-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k0swso6r8xpitbiucf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwTAiG-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k0swso6r8xpitbiucf8.png" alt="Soft UI Dashboard - User Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To compile the project locally, Python3 and GIT should be installed and accessible via the terminal. Once we have this minimum tool-chain, we need to follow a simple setup as presented in the README file, saved on Github.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step #1 - Clone the sources&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Clone the sources&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/jinja-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;jinja-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2 - Install Dependencies&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install requirements&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3 - Start the App&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, we should see the &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; running in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUZQHCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98ytwg6xxil824gkh9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUZQHCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98ytwg6xxil824gkh9b.png" alt="Soft UI Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More starters styled with &lt;a href="https://appseed.us/ui-kit/soft-ui-design-system"&gt;Soft UI Design System&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/ui-kit/soft-ui-design-system"&gt;Free Admin Dashboards&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>flask</category>
    </item>
    <item>
      <title>5 Ideas to set your portfolio apart</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 26 Apr 2021 15:01:17 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/5-ideas-to-set-your-portfolio-apart-170c</link>
      <guid>https://dev.to/paulasantamaria/5-ideas-to-set-your-portfolio-apart-170c</guid>
      <description>&lt;p&gt;Tired of building TO-DO lists and e-commerce sites? One of these Chrome extension ideas could help you set your portfolio apart! 👩‍💻&lt;/p&gt;

&lt;p&gt;All you need to know to build your first Chrome Extension is the &lt;strong&gt;basics of HTML, JavaScript, and CSS&lt;/strong&gt;! These are a few fun ideas I came up with that can be created using only those technologies.&lt;/p&gt;

&lt;p&gt;If you're having doubts, check out my video &lt;a href="https://www.instagram.com/tv/CLIRDc4gWyz/"&gt;Creating a simple Chrome Extension in 2 minutes&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-dark-mode-for-your-favorite-website"&gt;
  &lt;/a&gt;
  1. Dark mode for your favorite website
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8O5PXWyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pd7BYKa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8O5PXWyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pd7BYKa.png" alt="Dark mode icon - The moon, some clouds and a few stars in the sky"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you regularly use a website that you love but doesn't have dark mode? &lt;/p&gt;

&lt;p&gt;With Chrome extensions, you can create your own CSS stylesheet that overrides some styles in a particular website. This allows you to apply dark mode styles over the website when your extension is enabled.&lt;/p&gt;

&lt;p&gt;To achieve that, you should use &lt;strong&gt;Content Scripts&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Set &lt;code&gt;"run_at": "document_end"&lt;/code&gt;  in the &lt;code&gt;content_scripts&lt;/code&gt; object in the &lt;code&gt;manifest.json&lt;/code&gt; so your styles override the site's.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this project, you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/"&gt;Content Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-weather-app"&gt;
  &lt;/a&gt;
  2. Weather App
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDe4-Hni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7XO2kWk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDe4-Hni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7XO2kWk.png" alt="Weather icon - A cloud, rain and the sun behind it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could create an extension that shows the current weather for a particular location on your browser. &lt;/p&gt;

&lt;p&gt;You'll need to call an API to retrieve the weather info: &lt;a href="https://openweathermap.org/api/one-call-api"&gt;OpenWeatherMap API&lt;/a&gt; is a good option. They have a free plan.&lt;/p&gt;

&lt;p&gt;Get the latest weather updates every few minutes in the background using an alarm from the &lt;code&gt;chrome.alarms&lt;/code&gt; API handled by a Service Worker.&lt;/p&gt;

&lt;p&gt;Store the results using the &lt;code&gt;chrome.storage&lt;/code&gt; API and display them in your extension's Action Popup.&lt;/p&gt;

&lt;p&gt;To call the API, you can use &lt;code&gt;fetch&lt;/code&gt;, and you'll need to add something like the following to your &lt;code&gt;manifest.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"host_permissions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"https://some-weather-api.com/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/apps/app_codelab_alarms/"&gt;&lt;code&gt;chrome.alarms&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/background_pages/"&gt;Service Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-show-todays-calendar"&gt;
  &lt;/a&gt;
  3. Show today's calendar.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9qriOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1N4uIDX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9qriOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1N4uIDX.png" alt="Calendar icon - A calendar with a clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could get easy access to your Calendar events for the day, showing them in your Browser through an Extension. &lt;/p&gt;

&lt;p&gt;As with the previous idea, you'll need to get the data from an external API (Google Calendar's or your favorite calendar API) every few minutes in the background using an alarm from the &lt;code&gt;chrome.alarms&lt;/code&gt; API and a Service Worker. &lt;/p&gt;

&lt;p&gt;You'll also need to store the results of the API request using &lt;code&gt;chrome.storage&lt;/code&gt;. Remember that Service Workers can be unloaded when the extension goes idle, so you can't just store the calendar events in a variable declared in your Service Worker.&lt;/p&gt;

&lt;p&gt;Display the events with their title, time, guests, etc., in your extension's Action Popup.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;chrome.notifications&lt;/code&gt; API to show a message to the user a few minutes before the event.&lt;/p&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/apps/app_codelab_alarms/"&gt;&lt;code&gt;chrome.alarms&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/notifications/"&gt;&lt;code&gt;chrome.notifications&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/background_pages/"&gt;Service Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-daily-coffee"&gt;
  &lt;/a&gt;
  4. Daily coffee
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwR_0DCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IaSq7MB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwR_0DCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IaSq7MB.png" alt="Coffee cup icon - A coffee cup with coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Show the user a random coffee recipe to try every day.&lt;/p&gt;

&lt;p&gt;In this case, you don't need to call an external API (at least at first). You could just store a list of your favorite recipes in a JSON array in your extension and use a &lt;code&gt;Math.random()&lt;/code&gt; to get a random item from the array every day.&lt;/p&gt;

&lt;p&gt;Display the coffee recipe with a nice picture in the Action Popup.&lt;/p&gt;

&lt;p&gt;To make it more robust, you could use &lt;code&gt;chrome.storage&lt;/code&gt; to store the last coffee recipe shown and the date to make sure of two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single coffee recipe is shown every day.&lt;/li&gt;
&lt;li&gt;We don't get the same recipe two days in a row.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-ecommerce-wishlist"&gt;
  &lt;/a&gt;
  5. E-Commerce wishlist
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWSfaRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yTvftWv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWSfaRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yTvftWv.png" alt="Wishlist icon - A page with a list of items and a heart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow users to add products from Amazon, eBay, etc., to their wishlist: When a user finds a product they're interested in, they add it to their wishlist using a keyboard shortcut or from the &lt;strong&gt;Action popup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Action popup also shows the previously added items and allows the user to remove them.&lt;/p&gt;

&lt;p&gt;The user should also be able to navigate to each product page in case they want to buy it. For this, you should use &lt;code&gt;chrome.tabs.create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll need to store links, name, and price for each product using &lt;code&gt;chrome.storage&lt;/code&gt; API. &lt;/p&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/tabs"&gt;&lt;code&gt;chrome.tabs&lt;/code&gt; API&lt;/a&gt; - Particularly the &lt;a href="https://developer.chrome.com/docs/extensions/reference/tabs/#method-create"&gt;&lt;code&gt;create&lt;/code&gt; method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope this post was helpful and inspires you to work on your next project! If you're interested in learning about Chrome extensions, check out &lt;a href="https://dev.to/paulasantamaria/creating-a-simple-chrome-extension-36m"&gt;my series about it&lt;/a&gt; where I create a simple chrome extension and gradually improve it. At the same time, I explore most of the &lt;code&gt;chrome&lt;/code&gt; APIs and concepts required to build the ideas mentioned in this post.&lt;/p&gt;

&lt;p&gt;You can also check out my video &lt;a href="https://www.instagram.com/tv/CLIRDc4gWyz/"&gt;Creating a simple Chrome Extension in 2 minutes&lt;/a&gt; to get a grasp of the process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Icons by Smashicons &amp;amp; Freepik on Flaticon.com&lt;/em&gt;&lt;/p&gt;

</description>
      <category>chromeextension</category>
      <category>javascript</category>
      <category>portfolio</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Powers of AJAX</title>
      <author>ManuTheCoder</author>
      <pubDate>Mon, 26 Apr 2021 14:48:40 +0000</pubDate>
      <link>https://dev.to/manuthecoder/the-powers-of-ajax-3j41</link>
      <guid>https://dev.to/manuthecoder/the-powers-of-ajax-3j41</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ajax is a set of web development techniques using many web &lt;br&gt;
technologies on the client-side to create asynchronous web applications. With Ajax, web applications can send and retrieve data from a server asynchronously without interfering with the display and behaviour of the existing page. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AJAX is very useful for building single page apps. &lt;br&gt;
It's also very powerful because you can submit forms and send requests, without reloading the page!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-ajax"&gt;
  &lt;/a&gt;
  How to use AJAX
&lt;/h3&gt;

&lt;p&gt;AJAX is very simple to use. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just create an index.html file, and insert this code in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. &lt;/li&gt;
&lt;li&gt;Create another file named &lt;code&gt;ajax_is_awesome.php&lt;/code&gt;. Write whatever you want in that file!&lt;/li&gt;
&lt;li&gt;View your website!
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ajax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajax_is_awesome.php&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explained&lt;br&gt;
&lt;strong&gt;&lt;code&gt;var ajax&lt;/code&gt;&lt;/strong&gt; - Creates a new variable for the class &lt;strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/strong&gt; - XMLHttpRequest is an API in the form of an object whose methods transfer data between a web browser and a web server.  (Wikipedia)&lt;br&gt;
&lt;strong&gt;&lt;code&gt;onreadystatechange&lt;/code&gt;&lt;/strong&gt; - When the file has loaded&lt;br&gt;
&lt;strong&gt;&lt;code&gt;this.readyState == 4 &amp;amp;&amp;amp; this.status == 200&lt;/code&gt;&lt;/strong&gt; - If the document's status isn't 404, 500, etc. Must be 200&lt;br&gt;
&lt;strong&gt;&lt;code&gt;ajax.open("GET", "index.php", true);&lt;/code&gt;&lt;/strong&gt; - Opens the ajax file. Using GET this time. &lt;br&gt;
&lt;strong&gt;&lt;code&gt;ajax.send();&lt;/code&gt;&lt;/strong&gt; - Sends the request&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-ajax-in-jquery"&gt;
  &lt;/a&gt;
  How to use AJAX in jQuery
&lt;/h3&gt;

&lt;p&gt;Remember to include the &lt;code&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; line in your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#someform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
           &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;          
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? AJAX is cool! Implement it, and you won't have redirects when submitting forms, or doing very simple things, such as checking for new notifications every few seconds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://manuthecoder.github.io/docjs/docs/"&gt;Example of a single page documentation I made using AJAX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/manuthecoder/docjs"&gt;pls star it on github if you like this!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ajax</category>
      <category>html</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
