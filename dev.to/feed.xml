<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Terraform: State file</title>
      <author>Daniel Huerta</author>
      <pubDate>Mon, 12 Jul 2021 19:41:25 +0000</pubDate>
      <link>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</link>
      <guid>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</guid>
      <description>&lt;p&gt;If you have started using Terraform as your &lt;em&gt;Infrastructure as Code&lt;/em&gt; tool you might wonder how does TF know which resources need to be created, deleted, or modified when you run your code. Well, let me tell you that it is not a magic stuff, the agent behind this is the &lt;strong&gt;state file&lt;/strong&gt; 😉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform-apply"&gt;
  &lt;/a&gt;
  Terraform apply
&lt;/h2&gt;

&lt;p&gt;Every time we deploy our Infrastructure with &lt;em&gt;terraform apply&lt;/em&gt;, a file named &lt;em&gt;terraform.tfstate&lt;/em&gt; is created, it includes all the information about the resources that are currently deployed in the cloud. &lt;/p&gt;

&lt;p&gt;You can navigate on it and you will see a key with the name of &lt;strong&gt;resources&lt;/strong&gt;, it is an array which lists all the elements that were created with the configuration file (after doing &lt;em&gt;terraform apply&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;If you create an EC2 instance in AWS, your tfsate file will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand better how this works, it is important to talk about the &lt;strong&gt;&lt;em&gt;Current and Desired State&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current State
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;terraform.tfstate&lt;/em&gt; file is the responsible to store the current state of the infrastructure, it is to say all the information about the resources that are currently deployed in your Cloud Provider (after the &lt;em&gt;terraform apply&lt;/em&gt; command has been run).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desired-state"&gt;
  &lt;/a&gt;
  Desired State
&lt;/h2&gt;

&lt;p&gt;All the code that is set in the main.tf file corresponds to the desired state, on it you specify what resources you expect to be created in the Cloud, and here is where the magic occurs 😉.&lt;/p&gt;

&lt;p&gt;Terraform is going to &lt;strong&gt;compare&lt;/strong&gt; both states (current and desired one), if there is an existing difference between both, it will make the changes that are necessary so that the current state is equal to the desired state.&lt;br&gt;
TF shows the result of the comparison when we execute the &lt;em&gt;terraform plan&lt;/em&gt; command in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refreshing-the-state"&gt;
  &lt;/a&gt;
  Refreshing the state
&lt;/h2&gt;

&lt;p&gt;But, what if we modify a resource directly in the Cloud Provider interface not using Terraform apply (AWS Console for instance), let's say that we changed the EC2 instance type from t2.micro to t2.large, how is our &lt;strong&gt;local&lt;/strong&gt; &lt;em&gt;terraform.tfstate&lt;/em&gt; be modified to match with those &lt;em&gt;remote&lt;/em&gt; changes? 🤔.&lt;/p&gt;

&lt;p&gt;Well, Terraform has the solution for that. We just need to run the command &lt;strong&gt;terraform refresh&lt;/strong&gt; and all the configuration that is currently running in the cloud provider will be updated in the local &lt;em&gt;terraform.tfstate&lt;/em&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h3&gt;

&lt;p&gt;Now that you understand the &lt;strong&gt;state&lt;/strong&gt; concepts in Terraform, we can start talking about how to manage it in a collaborative workflow, let's talk about the &lt;strong&gt;remote state&lt;/strong&gt; in a different post.&lt;/p&gt;

&lt;p&gt;Thanks for reading, any comments or suggestions are welcome. We are here to help each other 😉💙.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>The Most Productive Customization I've Made to My Computer This Year</title>
      <author>Self Teach me</author>
      <pubDate>Mon, 12 Jul 2021 19:13:13 +0000</pubDate>
      <link>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</link>
      <guid>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A few weeks ago I did it. I converted my &lt;strong&gt;Caps Lock&lt;/strong&gt; key into a "Hyper Key." Meaning, whenever I hit Caps Lock, it's the same as holding down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's be honest, its hard to hold down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;, at the same time. &lt;em&gt;But&lt;/em&gt;, that also means, I didn't have any keyboard shortcuts with that combination. This opened up a whole new world of commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  Quick Note
&lt;/h3&gt;

&lt;p&gt;If you're resistant to "loosing" your Caps Lock, like I was (because I actually use my Caps Lock key), I moved that functionality to my &lt;em&gt;right&lt;/em&gt; shift key. Already, I use my &lt;em&gt;left&lt;/em&gt; shift key exclusively, so I didn't feel like I was "loosing" anything.&lt;/p&gt;

&lt;p&gt;While I was making modifications, I also converted my right command to an extra escape key. I have the 15" Macbook Pro with the touch bar. When I'm working at my desk, I have an external keyboard. But, when I'm working directly on my laptop, I miss the tactile escape key. Plus, I'm running &lt;a href="https://folivora.ai/"&gt;Better Touch Tool&lt;/a&gt; to customize the touch bar, which shifts my escape key over, ruining my muscle memory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" alt="IMG_2850"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-your-hyper-key"&gt;
  &lt;/a&gt;
  How to Set up Your Hyper Key
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://karabiner-elements.pqrs.org/"&gt;Karabiner-Elements&lt;/a&gt; and download their software (it's free) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" alt="CleanShot_2020-09-16_at_20.19.082x"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once it's downloaded, double click on the .dmg to unpack and open it. Then, double click on the .pkg inside and go through the install process&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" alt="package-karabiner-elements"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Complex Modifications&lt;/strong&gt; tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" alt="complex-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Add Rule&lt;/strong&gt; button at the bottom left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" alt="add-rule-button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Import more rules from the Internet (open a web browser)&lt;/strong&gt; button at the top. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" alt="import-rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the button says, this will launch a web browser with a list of modifications you can import. There are plenty plenty of options there, to scroll through and give you inspiration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" alt="web-browser-with-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've found one you like, click on the Import button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" alt="karabiner-elements-options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pop-up will come up asking if you want to &lt;strong&gt;Open Karabiner-Elements.app?&lt;/strong&gt; Click on the "Open" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" alt="open-karabiner-elements-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will launch Karabiner-Elements. It will show you a pop-up explaining the control you're importing. You can click &lt;strong&gt;Import&lt;/strong&gt; to confirm or &lt;strong&gt;Cancel&lt;/strong&gt;. Don't worry, you can always undo. &lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I installed 3 different modifications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The caps lock key simulates hitting the Cmd + Ctrl + Shift + Option key&lt;/li&gt;
&lt;li&gt;The Right Shift key is the "new" caps lock key — Interestingly enough, the light on the "real" caps lock key goes on and off whenever I hit the "new" shift key.&lt;/li&gt;
&lt;li&gt;The Right Command key is a second escape key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" alt="complex-modifications-listed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts-ive-set-up"&gt;
  &lt;/a&gt;
  Shortcuts I've set up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-maestro"&gt;
  &lt;/a&gt;
  Keyboard Maestro
&lt;/h3&gt;

&lt;p&gt;I set up all the keyboard shortcuts through a program called &lt;a href="https://www.keyboardmaestro.com/main/"&gt;Keyboard Maestro&lt;/a&gt;. Unfortunately, this program is not free and costs $36. — but, definitely worth it. The options it provides seem endless.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" alt="keyboard-maestro2x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click through the groups in the left panel, you'll find a bunch of "macros" that you can enable and pair with a keyboard shortcut. Of course, you can also create your own custom commands.&lt;/p&gt;

&lt;p&gt;Most of the commands I've created are designed to jump between my favorite applications. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + B&lt;/code&gt;: Opens Chrome&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + C&lt;/code&gt;: Opens VS Code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + E&lt;/code&gt;: Opens AirMail (my email client of choice)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + F&lt;/code&gt;: Opens Finder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + M&lt;/code&gt;: Opens Messages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + N&lt;/code&gt;: Opens Notion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a few commands for navigating to my favorite directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + P&lt;/code&gt;: jumps to the Projects directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + S&lt;/code&gt;: Opens the Vlog directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of miscellaneous items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;: Searches the Internet. This is great for a quick Google Search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + V&lt;/code&gt;: will paste whatever is in my clipboard without any styling. - You know when you copy something that's been formatted (bold / italics). This strips out all the formatting before pasting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#better-touch-tool"&gt;
  &lt;/a&gt;
  Better Touch Tool
&lt;/h3&gt;

&lt;p&gt;I mentioned earlier, that I have Better Touch Tool installed on my computer, as well. Unfortunately, this program isn't free either. $8.50 will give you updates for 2 years. $20.50 will give you lifetime updates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" alt="better-touch-tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Where this program really shines is extending the functionality your trackpad or customizing your touch bar.&lt;/p&gt;

&lt;p&gt;I set up some keyboard shortcuts here, too, since it has some great options for window management. Here are the commands I setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + D&lt;/code&gt;: Shows the Desktop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + 1&lt;/code&gt;:  Makes the current window 100% tall. I found that when I was plugging / unplugging from my external monitor, windows would resize. This allows me to resize my window quickly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + A&lt;/code&gt;: When I'm editing on my ultra-wide monitor, I have a particular window configuration I like to use. Now, when I hit this keyboard shortcut, my windows automatically rearrange for this workflow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + H&lt;/code&gt;: Hides all window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the next 3 commands together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + J&lt;/code&gt;: Snaps and fills the window to the left third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + K&lt;/code&gt;: Snaps and fills the window the center third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + L&lt;/code&gt;: Snaps and fills the window to the right third of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next 2 commands are similar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Left Arrow&lt;/code&gt;: Moves the current window one space to the left. — This is great if you use Apple Spaces feature. I can quickly move windows from one space to the next with my keyboard.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Right Arrow&lt;/code&gt;: Moves the current window one space to the right.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This all took a little bit of setup, but the ~30 minutes, hour set up has been well worth it and it has made moving around my computer with the keyboard faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-the-comments"&gt;
  &lt;/a&gt;
  In the Comments...
&lt;/h3&gt;

&lt;p&gt;What keyboard shortcuts do you have set up? Any I should add to the mix? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>We are RunX</title>
      <author>Ankur Dahiya</author>
      <pubDate>Mon, 12 Jul 2021 18:41:23 +0000</pubDate>
      <link>https://dev.to/run-x/we-are-runx-2lkn</link>
      <guid>https://dev.to/run-x/we-are-runx-2lkn</guid>
      <description>&lt;p&gt;Over the last 10 years, our team has built and led Devops teams at world-class companies like Lyft, Twitter, Facebook and Flexport. We have always believed that Devops is a force multiplier - a well built infrastructure can empower the engineers and greatly accelerate product delivery. We saw this first hand at Twitter and Flexport - where the velocity of features slowed down to a trickle due to broken and complicated infrastructure. And it was finally revitalized by amazing Devops and infra advances.&lt;/p&gt;

&lt;p&gt;These experiences compelled us to start RunX - our goal is to synthesize years of expertise and package it as a service - to enable the next wave of revolutionary companies. We want every company to have the same infrastructure leverage as Facebook or Twitter. We want every Devops engineer to finally be free of monotonous operational issues and instead focus on solving the problems that are unique to their company. And finally, we want to bring the power of Docker and Kubernetes to every single organization. &lt;/p&gt;

&lt;p&gt;RunX's mission is to supercharge every Devops team and we'd love for you to join us on this journey - &lt;a href="https://runx.dev/"&gt;https://runx.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
      <category>github</category>
      <category>startup</category>
    </item>
    <item>
      <title>What is AssemblyScript?</title>
      <author>Jairus Tanaka</author>
      <pubDate>Mon, 12 Jul 2021 18:34:40 +0000</pubDate>
      <link>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</link>
      <guid>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
  AssemblyScript — a variant of TypeScript that compiles to WebAssembly. Since it is compiled, it outperforms JavaScript in some cases. AS follows the TypeScript syntax as closely as possible and even adds more features to it. AssemblyScript allows us to write fast WebAssembly for the Web and Server without learning another language.&lt;/p&gt;

&lt;p&gt;AssemblyScript is very easy to use. All you need to do is install it via NPM.&lt;/p&gt;

&lt;p&gt;Try it out online: &lt;a href="https://stackblitz.com/edit/node-quzm4z?devtoolsheight=33&amp;amp;file=test.js"&gt;Online editor&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm i assemblyscript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
~ npx asinit &lt;span class="nb"&gt;.&lt;/span&gt;
~ npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did that do? First of all, it installed both the loader and the compiler. Secondly, it made a template project with an add function. Now, we just need to compile it to WebAssembly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm run asbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, if you check out the /build folder, there are the .wasm files that were built. NodeJS and JavaScript both provide a way to run WebAssembly files and AssemblyScript provides its own loader to work with the code. To start our code, we need another file&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wasmModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// This works just like a normal module&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasmModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -- 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should have outputted the number 11.&lt;/p&gt;

&lt;p&gt;JavaScript code for the add function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssemblyScript code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar, right? When we compile it, we can require it just like a normal JavaScript file. Keep in mind that WebAssembly is sandboxed which means it can’t access the system, make HTTP requests, or log to the console. However, AssemblyScript supports both WASI and JS bindings (calling JS from AS).&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, feel free to comment or join the AssemblyScript Discord. Or, check out the website.😉&lt;/p&gt;

&lt;p&gt;P.S: There is a tutorial at &lt;a href="https://jtanaka.gitbook.io/guide/"&gt;https://jtanaka.gitbook.io/guide/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webassembly</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Those “Pesky” Pull Requests are Totally Worth It</title>
      <author>LinearB</author>
      <pubDate>Mon, 12 Jul 2021 18:29:04 +0000</pubDate>
      <link>https://dev.to/linearb_inc/those-pesky-pull-requests-are-totally-worth-it-3mh6</link>
      <guid>https://dev.to/linearb_inc/those-pesky-pull-requests-are-totally-worth-it-3mh6</guid>
      <description>&lt;p&gt;Pretty much everyone does code reviews. They’ve been around a long time. I remember back in my Borland days when the Chief Scientist would come in every morning and review all the code that had been checked into the Subversion(!) repository the previous day and send emails out to folks whose code wasn’t up to snuff. That’s old school.&lt;/p&gt;

&lt;p&gt;Slightly less old school? Saving all the check-ins up until Friday for the Dev Leads and/or Dev Managers to review and approve. Both of these techniques leave a lot to be desired -- the main thing being a complete lack of interaction between the developer, the code, and the reviewer. &lt;/p&gt;

&lt;p&gt;Code Reviews have a number of purposes. Probably the most important one is preserving the quality and integrity of the code in the repository. Even the two old-school ways above do that. &lt;/p&gt;

&lt;p&gt;But almost as important as the learning opportunity that code reviews can provide. If the only feedback a developer gets from a code review is mistakes in formatting or other trivial things like that, then nobody learns and gets better. The old school ways above provide for few opportunities for a developer to increase their skills.&lt;/p&gt;

&lt;p&gt;To provide learning opportunities, code reviews evolved into meetings where everyone looked at the code written that week and commented on it, criticized it, or otherwise ran it through the gauntlet. This did provide a learning opportunity for developers, but it took more time, as it was 100% synchronous and required all code to wait for the next scheduled meeting to be reviewed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2NSmdQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jc19ripztvwvuxyo1wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2NSmdQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jc19ripztvwvuxyo1wn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, almost no one is doing these old-school code reviews anymore. All the cool kids are doing pull requests. (Some folks call them “merge requests.”)  Pull requests have a number of advantages over the previously mentioned methods, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being done completely asynchronously, but in public, for all to see.&lt;/li&gt;
&lt;li&gt;No one needs to wait to review the code -- it can happen almost immediately after a pull request is issued. &lt;/li&gt;
&lt;li&gt;A history of all the comments stays with the code in a repository. This allows a developer to come back to the code a year later and see all the thought that went into writing it.&lt;/li&gt;
&lt;li&gt;Pull Requests can be tracked, monitored, and measured. &lt;a href="https://linearb.io/blog/three-git-pull-request-review-strategies"&gt;A whole lot of good things can come out of that&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-do-code-reviews-at-all"&gt;
  &lt;/a&gt;
  Should you do code reviews at all?
&lt;/h2&gt;

&lt;p&gt;Interestingly, some say no, you shouldn’t.&lt;/p&gt;

&lt;p&gt;Not only is Jessica Kerr a great speaker and a good Twitter follow, but she also has some interesting ideas about code reviews in her article of March 27 entitled "Those pesky pull request reviews." In fact, she doesn’t like pull requests, and argues that you should sidestep them by just working on a given task as a team so that everyone sees everything as the work gets done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9kG4aH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1otpdnt4gt871coe3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9kG4aH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1otpdnt4gt871coe3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She believes that pull requests work great for open source projects where a “team” is really a set of individuals coordinating work together. For true development teams, she believes that if a team all works together on a single task, everyone learns and understands the code, and thus there is no task switching between coding and doing pull requests because the pull requests are unnecessary. &lt;/p&gt;

&lt;p&gt;Jessica’s idea is radical -- basically going beyond Pair Programming and moving into mob programming. Mob programming is the idea of having whole teams work together on projects in serial rather than individually in parallel. Mob programming can eliminate the need for pull requests by causing all of the communication and learning to take place during the coding phase, without any review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-a-fan"&gt;
  &lt;/a&gt;
  Not a Fan
&lt;/h2&gt;

&lt;p&gt;I’m having a hard time agreeing with her idea for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The transaction costs are too high. It seems to me that having four people work on a project together makes for many communication channels, increases the likelihood of interruptions, and reduces the amount of code that will actually get written. It’s sort of a “Too many cooks spoil the broth” notion. &lt;/li&gt;
&lt;li&gt;It doesn’t capture the discussions and history that will remain long after the code is committed. One of the most important and powerful benefits of pull requests is the learning that can take place during and even long after code has been reviewed and deployed. &lt;/li&gt;
&lt;li&gt;Not all projects are conducive to multiple team members working together. Some are small and multiple people working together would be overkill. Some are esoteric and require the focus of one person. Some will match the team and can be worked on together. There’s no one size fits all solution for all projects.&lt;/li&gt;
&lt;li&gt;Finally, not doing pull requests pretty much eliminates all the benefits of metrics systems like LinearB. Tracking the progress of pull requests and code reviews through the pipeline is a critical process for knowing how your team is performing. Without that, you can measure things and if you can’t measure things, you can’t improve.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of a discussion about code reviews, Rob Kraft, one of the Development Leaders in our vibrant Dev Interrupted Discord Server (&lt;a href="https://discord.gg/devinterrupted"&gt;you should join!&lt;/a&gt;) made the following comment that I agree with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QwUvti-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tptuaq56l6uvxzawbu9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QwUvti-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tptuaq56l6uvxzawbu9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that what Jessica needs is a good look at LinearB. &lt;/p&gt;

&lt;p&gt;Let me address some of her more specific objections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;“Let’s face it: nobody wants to review pull requests.”&lt;/strong&gt; Well, I don’t think that is true. We here at LinearB see customers every day that are doing pull requests efficiently and effectively. Sure, pull requests can be hard and nobody wants to do them if you aren’t correctly incenting the team to create pull requests that are easy to review. No one likes a huge pull request. But through monitoring metrics like Pull Request Size, you can encourage your team to create small, easy-to-review pull requests. And voila! People don’t hate pull requests anymore.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;“They’re a social interaction minefield!”&lt;/strong&gt; People complain that code reviews can cause strife on a team. Well, so can conversations during Mob Programming. I’m not sure that I see a distinction, And if doing a code review causes strife, then you have a cultural problem that no development methodology is going to solve. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;“We could blame the people. We could nag them more. We could even automate the nagging!”&lt;/strong&gt; Well, if code reviews are small, concise, and easy to do, “automating the nagging” via our WorkerB product is usually more than enough to get the ball rolling and keep it rolling. Notifications and tracking of any reviews that do happen to languish keep things moving as well. LinearB customers have seen drastic improvements in code pipeline productivity as a result of this so-called “nagging”.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;“Maybe instead of trying to work a bit more together, we could work together.”&lt;/strong&gt; Well sure, but if you do that, checking in code without a process of pull requests and code reviews, well, then you aren’t getting all the benefits listed above, nor those of a metrics tool that can show you what your Cycle Time is doing. And I don’t believe that mob programming will prevent the cultural problems that can arise from code reviews. People will be people whether in a mob programming environment or in an asynchronous code review process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Okay -- so what rubber is hitting the road here?&lt;/p&gt;

&lt;p&gt;If pull requests and code reviews are hard and people don’t want to do them, then you are doing them wrong. So the trick is to make them easy to do.&lt;/p&gt;

&lt;p&gt;We here at LinearB see many, many customers improve their Cycle Time and their overall software development process by using and tracking pull requests. By combining metrics tracking around pull requests with tools like &lt;a href="https://linearb.io/developer-automation/"&gt;WorkerB&lt;/a&gt;, many, many development organizations have seen smaller pull requests, better reviews, shorter Cycle Times, and an overall sense that things are really humming. &lt;/p&gt;

&lt;p&gt;Monitoring things like the size of pull requests, when pull requests are assigned, picked up, and commented on, as well as monitoring the depth of reviews that take place all create an environment of small, discrete, easy to review pull requests. &lt;/p&gt;

&lt;p&gt;And of course, if you want to find out more about what our customers already know, &lt;a href="https://linearb.io/demo/"&gt;you can book a free demo of LinearB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, while her ideas are intriguing and thought-provoking,  I can’t say I agree with Jessica’s argument. There doesn’t seem to be any good reason not to do pull requests with code reviews.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jessica’s blog post &lt;a href="https://jessitron.com/2021/03/27/those-pesky-pull-request-reviews/"&gt;can be read on her Jessitron blog&lt;/a&gt; and you can follow her on Twitter at &lt;a href="https://twitter.com/jessitron"&gt;@jessitron&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>pullrequest</category>
      <category>softwaredevelopment</category>
      <category>codereview</category>
    </item>
    <item>
      <title>My blockchain 🧑‍🚀</title>
      <author>ItsTheGuy</author>
      <pubDate>Mon, 12 Jul 2021 18:02:22 +0000</pubDate>
      <link>https://dev.to/itstheguy/my-blockchain-257c</link>
      <guid>https://dev.to/itstheguy/my-blockchain-257c</guid>
      <description>&lt;p&gt;Hello, what’s going on? Before you start reading more, I have to thank you about reading this post, this is my first one, and this makes me feel nervous 😯&lt;/p&gt;

&lt;p&gt;4 months ago, I was bored in the free times of my free times, so I started reading articles about blockchain, and I found very interesting that concept. After finishing reading all the pages of Wikipedia related to blockchain, I started to feel bored again, so I decided to develop my own blockchain as experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-purpose"&gt;
  &lt;/a&gt;
  My purpose 🚀
&lt;/h2&gt;

&lt;p&gt;I think that Singular (that’s the blockchain’s name) is a really cool project, but aside of that, it has a few purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make me learn more about blockchain technology and decentralized networks (I haven’t still implemented the distributed network because I’m on research of the best one! You can suggest one at the project’s discussions if you want!)&lt;/li&gt;
&lt;li&gt;The second one is to share my ideas, and contribute to the open source archive of the humanity 👽&lt;/li&gt;
&lt;li&gt;The third one is because is really cool 🧑‍💻&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I’m so excited about it, and I hope that Singular could help other people find inspiration.&lt;br&gt;
By the way you could find &lt;a href="https://github.com/ItsTheGuy/Singular"&gt;Singular&lt;/a&gt; in my GitHub profile 🐙&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>9 Neat JavaScript Snippets For Algorithms And More</title>
      <author>Mike Cronin</author>
      <pubDate>Mon, 12 Jul 2021 17:52:20 +0000</pubDate>
      <link>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</link>
      <guid>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</guid>
      <description>&lt;p&gt;Knowing certain JavaScript one liners can save you valuable time while developing or interviewing. Here are some of my favorite “once you know, you know” snippets that I have actually used while coding. Only one of them is a bit code golf-y, and unsurprisingly it uses reduce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-around-a-list"&gt;
  &lt;/a&gt;
  Wrap around a list
&lt;/h2&gt;

&lt;p&gt;Spinning is a neat trick, but so is wrapping. A lot of times in algorithms you will need to wrap around a list. Meaning move a number of spaces, and if you reach the end of the list, go back to the first index. So if a list is 8 values long, but you have to move 10, you would need to land on the second index. You could use a bunch of complicated if statements, OR…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// b&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// c&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="c1"&gt;// etc ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can implement this differently based off steps, but the key thing to understand is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder"&gt;the modulo&lt;/a&gt;. It’s a handy little operator, keep it in mind when looking at “overflow” type problems like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-a-variable-with-its-name"&gt;
  &lt;/a&gt;
  Log a variable with its name
&lt;/h2&gt;

&lt;p&gt;This is such a great trick when debugging. Thanks to &lt;a href="https://alligator.io/js/object-property-shorthand-es6/"&gt;object shorthand notation&lt;/a&gt; we can log out variables with names by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// logs out { someVar: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you put in a bunch of logs (and you totally will when debugging), it can be hard to keep track of which is which with all the asyncs, fetches, and loops flying around. Instead of having to take the time to type multiple args like &lt;code&gt;console.log('some var', someVar)&lt;/code&gt;, toss in some curly brackets and call it a day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optional-properties-in-objects"&gt;
  &lt;/a&gt;
  Optional properties in objects
&lt;/h2&gt;

&lt;p&gt;If you don’t want properties pointing to undefined or null , you might use some if statements to optionally add properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it’s verbose and I’ve always hated it. It may be clear, but it’s clunky. Well, thanks to object spreading, it’s a thing of the past:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;&amp;amp;&amp;amp; logical short circuiting&lt;/a&gt; to dynamically check whether or not to add the property by spreading it. This comes most in handy when you just want to return an object, and don’t want to create a temporary variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sleep-in-javascript"&gt;
  &lt;/a&gt;
  Sleep in JavaScript
&lt;/h2&gt;

&lt;p&gt;A few times I had to deal with a terrible API that was slow and didn’t have a hook to say when it finished. So, we just had to wait a second to make sure it loaded. We also wanted to use promises instead of setTimeout callbacks, so using a sleep function was ideal. We could simply await for a second and then move on. No need for callbacks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s how to &lt;a href="https://levelup.gitconnected.com/how-to-turn-settimeout-and-setinterval-into-promises-6a4977f0ace3?sk=80ad1ba261951e1a6cb422db1e51e6c0"&gt;promisify setInterval&lt;/a&gt; as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swap-variable-values"&gt;
  &lt;/a&gt;
  Swap variable values
&lt;/h2&gt;

&lt;p&gt;Before modern JS, if you wanted to switch the values of two variables, you’d have to introduce a 3rd ‘temp’ value. Now that we have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;array destructuring and assignment&lt;/a&gt;, we can do it in one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// a is 5, b is 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#round-to-nearest-10-100-1000"&gt;
  &lt;/a&gt;
  Round to nearest 10, 100, 1000…
&lt;/h2&gt;

&lt;p&gt;This one is useful in algorithms if you need to rough out numbers to various levels. Basically, what you’re doing is dividing first to move the decimal up. With the “useless” numbers now decimals, you can round them off. To get the number back up to its desired size, you multiply it. The ignored numbers now become zeros. It’s a neat trick for dealing with money or logarithm-like scales where after a certain point, small numbers can be rounded off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1549&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1500&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15590&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 16000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-duplicates-with-set"&gt;
  &lt;/a&gt;
  Remove duplicates with Set
&lt;/h2&gt;

&lt;p&gt;I just wrote about &lt;a href="https://medium.com/geekculture/should-you-use-javascript-maps-and-sets-1660647b55da?sk=e558f84be27e19e91426e03750fd56ef"&gt;Sets&lt;/a&gt;, and apparently this is kind of their only use. If you have an array and you want to remove the duplicates, you can do so with a Set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;span class="c1"&gt;// [ 1, 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t forget to spread the new Set back into a regular array. Note: be careful with massive lists, as this may not be the most performant solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#count-character-instances"&gt;
  &lt;/a&gt;
  Count character instances
&lt;/h2&gt;

&lt;p&gt;If you have an array (or array from a string) and want to know how many times characters appear, there’s a super slick way to do this with reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charTotals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="nx"&gt;charTotals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// { H: 1, i: 1, ' ': 1, t: 1, h: 1, e: 2, r: 1, '!': 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one might not be all that useful, but there are 2 techniques that I want to make sure you know: &lt;a href="https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6/"&gt;dynamic object properties&lt;/a&gt; and implicit &lt;a href="https://mariusschulz.com/blog/returning-object-literals-from-arrow-functions-in-javascript"&gt;returns with an object&lt;/a&gt;. Both of those things are crucial knowledge, and if you don’t &lt;a href="https://levelup.gitconnected.com/javascript-has-a-reduce-method-you-should-use-it-ff4dd29d6c9d?sk=da559dd1a04170eb124f10e2f43cebae"&gt;understand reduce, then read this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#id-makercounter"&gt;
  &lt;/a&gt;
  ID maker/counter
&lt;/h2&gt;

&lt;p&gt;I think I needed to dynamically create non-db temp ids for react components and squished a &lt;a href="https://www.w3schools.com/js/js_function_closures.asp"&gt;classic counter&lt;/a&gt; into one line. Each time the function is called, the counter increases, and no other function can alter its internal state. It uses a &lt;a href="https://itnext.io/a-beginners-guide-to-understanding-javascript-closures-b5eb57fdbeb4?sk=921273adc0bc6e1f2d9dd87310913401"&gt;closure&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;Immediately Invoked Function Expression&lt;/a&gt;, and a default value to keep things tight.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also bonus tip to use default values in function parameters to avoid needing a new line. And you can stop making it an IIFE if you actually want to make the starting number dynamic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 101&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 102&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-word-on-readability"&gt;
  &lt;/a&gt;
  A word on readability
&lt;/h2&gt;

&lt;p&gt;Look, I’m all about &lt;a href="https://itnext.io/tips-for-writing-self-documenting-code-e54a15e9de2?sk=02d1d7a2f1bb798dc0227cb56485e98b"&gt;readable code&lt;/a&gt; and I’ll be the first person to say that some of these snippets aren’t super straightforward. What you get in brevity you lose in readability. Now, personally, I don’t think any of these are too wild, but others might disagree. That’s why you should try to use small, named functions and descriptive variables. These pieces can be the crucial tip to help your code click for others. But, ultimately it comes down to what you and your team like, so feel free to modify or expand anything here. And if you have any clever one liners you love, please show them off in the comments!&lt;/p&gt;

&lt;p&gt;happy coding everyone,&lt;/p&gt;

&lt;p&gt;mike&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Getting Started with Git</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 12 Jul 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-git-524j</link>
      <guid>https://dev.to/cglikpo/getting-started-with-git-524j</guid>
      <description>&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; is an Open Source Distributed Version Control System.&lt;br&gt;
Let me break it down and explain the wording:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Control System: This basically means that &lt;code&gt;Git&lt;/code&gt; is a content tracker. So &lt;code&gt;Git&lt;/code&gt; can be used to store content — it is mostly used to store code due to the other features it provides.&lt;/li&gt;
&lt;li&gt;Version Control System: The code which is stored in &lt;code&gt;Git&lt;/code&gt; keeps changing as more code is added. Also, many developers can add code in parallel. So &lt;code&gt;Version Control System&lt;/code&gt; helps in handling this by maintaining a history of what changes have happened. Also, &lt;code&gt;Git&lt;/code&gt; provides features like branches and merges, which I will be covering later.&lt;/li&gt;
&lt;li&gt;Distributed Version Control System: &lt;code&gt;Git&lt;/code&gt; has a remote repository which is stored in a server and a local repository which is stored in the computer of each developer. This means that the code is not just stored in a central server, but the full copy of the code is present in all the developers’ computers. Git is a &lt;code&gt;Distributed Version Control System&lt;/code&gt; since the code is present in every developer’s computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#installation-of-git"&gt;
  &lt;/a&gt;
  Installation of Git
&lt;/h2&gt;

&lt;p&gt;Installation of Git is straightforward using the installer package available at Git official web site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the installer from &lt;a href="https://git-scm.com/"&gt;Git WebSite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Follow the installer steps, agree the license agreement and click the next button.&lt;/li&gt;
&lt;li&gt;Restart your system/machine&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NB:Mac users can install it with brew: &lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, test Git by printing its version using the following command in Command Prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
# git version 2.31.0.windows.1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-git"&gt;
  &lt;/a&gt;
  Configure Git
&lt;/h2&gt;

&lt;p&gt;Now let &lt;code&gt;Git&lt;/code&gt; know who you are. This is important for version control systems, as each &lt;code&gt;Git&lt;/code&gt; commit uses this information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "James Brown"
git config --global user.email "jamesbrown@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Use &lt;code&gt;global&lt;/code&gt; to set the username and e-mail for every repository on your computer.If you want to set the username/e-mail for just the current repo, you can remove &lt;code&gt;global&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see current global configuration with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-git-folder"&gt;
  &lt;/a&gt;
  Creating Git Folder
&lt;/h2&gt;

&lt;p&gt;Now, let's create a new folder for our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir myproject
cd myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; makes a new directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; changes the current working directory.&lt;/p&gt;

&lt;p&gt;Now that we are in the correct directory. We can start by initializing Git!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you already have a folder/directory you would like to use for Git: Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#initialize-git"&gt;
  &lt;/a&gt;
  Initialize Git
&lt;/h2&gt;

&lt;p&gt;Once you have navigated to the correct folder, you can initialize Git on that folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init 
Initialized empty Git repository in /Users/user/myproject/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just created your first Git Repository!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Git now knows that it should watch the folder you initiated it on.Git creates a hidden folder to keep track of changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git-adding-new-files"&gt;
  &lt;/a&gt;
  Git Adding New Files
&lt;/h2&gt;

&lt;p&gt;You just created your first local Git repo. But it is empty.&lt;/p&gt;

&lt;p&gt;So let's add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.&lt;/p&gt;

&lt;p&gt;For this example, I am going to use a simple HTML file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Getting Started with Git!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first file in my new Git Repo.&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And save it to our new folder as &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's go back to the terminal and list the files in our current working directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; will list the files in the directory. We can see that &lt;code&gt;index.html&lt;/code&gt; is there.&lt;/p&gt;

&lt;p&gt;Then we check the Git &lt;code&gt;status&lt;/code&gt; and see if it is a part of our repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Untracked files:
  (use "git add ..." to include in what will be committed)
    index.html

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Git is &lt;code&gt;aware&lt;/code&gt; of the file, but has not &lt;code&gt;added&lt;/code&gt; it to our repository!&lt;/p&gt;

&lt;p&gt;Files in your Git repository folder can be in one of 2 states:&lt;/p&gt;

&lt;p&gt;Tracked - files that Git knows about and are added to the repository&lt;br&gt;
Untracked - files that are in your working directory, but not added to the repository&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-staging-environment"&gt;
  &lt;/a&gt;
  Git Staging Environment
&lt;/h2&gt;

&lt;p&gt;The ideas of the Staging Environment and the Commit are two of Git's most important features.&lt;/p&gt;

&lt;p&gt;You may be adding, modifying, and deleting files while working. However, you should add the files to a Staging Environment whenever you reach a milestone or complete a section of the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Staged&lt;/code&gt; files are files that are ready to be &lt;code&gt;committed&lt;/code&gt; to the repository you are working on. You will learn more about &lt;code&gt;commit&lt;/code&gt; shortly.&lt;/p&gt;

&lt;p&gt;For now, we are done working with index.html. So we can add it to the Staging Environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file should be &lt;code&gt;Staged&lt;/code&gt;. Let's check the status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached ..." to unstage)
    new file: index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the file has been added to the Staging Environment.We are ready to do our first &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-commit"&gt;
  &lt;/a&gt;
  Git Commit
&lt;/h2&gt;

&lt;p&gt;We are ready to go from &lt;code&gt;stage&lt;/code&gt; to &lt;code&gt;commit&lt;/code&gt; for our repo(folder) now that we have completed our work.&lt;/p&gt;

&lt;p&gt;As we work, adding commits allows us to keep track of our progress and modifications. Each commit is treated as a "save point" by Git. It's a moment in the project where you can go back and fix an issue or make a modification.&lt;/p&gt;

&lt;p&gt;We should always provide a message when we commit.&lt;/p&gt;

&lt;p&gt;By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "My First git commit"
[master (root-commit) c7da65d] My first git commit
 1 file changed, 12 insertions(+)
 create mode 100644 index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; command performs a commit, and the &lt;code&gt;-m "message"&lt;/code&gt; adds a message.&lt;/p&gt;

&lt;p&gt;The Staging Environment has been committed to our repo, with the message:&lt;br&gt;
"My first git commit"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-commit-log"&gt;
  &lt;/a&gt;
  Git Commit Log
&lt;/h2&gt;

&lt;p&gt;To view the history of commits for a repository, you can use the log command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
commit c7da65d981ce205dfadbeedec4e36a5e1625c558 (HEAD -&amp;gt; master)
Author: jamesbrown &amp;lt;jamesbrown@gmail.com&amp;gt;
Date:   Mon Jul 12 17:34:54 2021 -0700

    My first git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ads kill performance and Ux</title>
      <author>Julien Maury</author>
      <pubDate>Mon, 12 Jul 2021 17:40:09 +0000</pubDate>
      <link>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</link>
      <guid>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</guid>
      <description>&lt;p&gt;I've been working with ads like any web/app/web app developer. I've seen how much it can harm performance and User Experience, and I wonder where big companies are on this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Privacy is such a big issue, but let's skip it here. I'm considering only performance and User Experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-said-ads"&gt;
  &lt;/a&gt;
  You said Ads?
&lt;/h2&gt;

&lt;p&gt;By adding some third-party scripts to your website, you allow other brands to use your traffic for advertising in exchange for money.&lt;/p&gt;

&lt;p&gt;It's not uncommon to find ads in various areas: top, side, bottom, interstitial, skin ads, etc.&lt;/p&gt;

&lt;p&gt;It usually consists of clickable images, animated or not. It can also be a video.&lt;/p&gt;

&lt;p&gt;Google is a major actor with worldwide services such as AdSense, Admanager, or Google Tag Manager. They are ultra-dominant in this business.&lt;/p&gt;

&lt;p&gt;I know it's a bit more complex than that, but that should give an overview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buzzkill"&gt;
  &lt;/a&gt;
  Buzzkill
&lt;/h2&gt;

&lt;p&gt;Ads are part of the business. The problem is the current solutions.&lt;/p&gt;

&lt;p&gt;Even if you have a robust architecture, advanced frontend optimizations, static cache, and other performance leverage, ads will probably kill them all, loading tones of external js, unoptimized assets, and sometimes worse.&lt;/p&gt;

&lt;p&gt;It's not uncommon to open a website and get more ads than valuable content. Some websites even hide content if you have &lt;a href="https://adblockplus.org/"&gt;adblock&lt;/a&gt; enabled!&lt;/p&gt;

&lt;p&gt;When you open the network tab in DevTools, you see many external requests and kilobytes of JavaScript. In most cases, it harms the scroll experience, and you lose focus. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wheres-google"&gt;
  &lt;/a&gt;
  Where's Google?
&lt;/h2&gt;

&lt;p&gt;Shockingly, Google does not push better practices for ads, while the same company deeply enforces perf requirements for websites and apps, for example, with its core vitals.&lt;/p&gt;

&lt;p&gt;Using Google Tag Manager has a significant impact on performance. Of course, it may vary from one website to another, depending on the usage. Still, it encourages non-technical people to copy/paste scripts that the website automatically loads, which can quickly turn nasty.&lt;/p&gt;

&lt;p&gt;I sometimes get the impression this business is the &lt;em&gt;Wild West&lt;/em&gt; where everything is permitted, including the worst practices. At the same time, websites and apps must meet ever-stricter criteria to get a decent score in web vitals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope it sounds like a rant cause it is. If big companies want to raise the general quality, that's great, but please don't neglect ads.&lt;/p&gt;

&lt;p&gt;The COVID-19 Pandemic has accelerated the shift to online spending. A significant part of the global economy is on Internet, and while advertising is a thriving business, it's a colossus with feet of clay.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@carlesrgm?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Carles Rabada&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>ux</category>
    </item>
    <item>
      <title>Linear Search in JavaScript | Must-Know Beginner Algorithms</title>
      <author>Danny Adams</author>
      <pubDate>Mon, 12 Jul 2021 17:26:25 +0000</pubDate>
      <link>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</link>
      <guid>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/linear-search-in-javascript"&gt;DoableDanny.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Linear search is a very common searching algorithm; It is implemented under the hood in the JavaScript built-in methods &lt;code&gt;indexOf()&lt;/code&gt;, &lt;code&gt;includes()&lt;/code&gt;, &lt;code&gt;find()&lt;/code&gt;, and &lt;code&gt;findIndex()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also the most straight-forward searching algorithm: it simply loops over each element in an array and stops if that element equals our target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-steps"&gt;
  &lt;/a&gt;
  Linear Search steps
&lt;/h2&gt;

&lt;p&gt;I think that with this algorithm, the gif below explains it all. But here are the steps in words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linear search will accept an array and a target value.&lt;/li&gt;
&lt;li&gt;Start searching from the beginning of the array.&lt;/li&gt;
&lt;li&gt;Check if that value equals the target:

&lt;ul&gt;
&lt;li&gt;If so, stop and return that values index.&lt;/li&gt;
&lt;li&gt;If not, move onto the next element.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat step 3 until all elements are checked. If target not found, return -1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" alt="Linear search steps gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source of the above gif: &lt;a href="https://bournetocode.com/projects/GCSE_Computing_Fundamentals/pages/3-1-3-searc_alg.html"&gt;bournetocode.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if you ever find yourself looking for a specific length of French fry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" alt="Linear searching for a french fry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-in-javascript"&gt;
  &lt;/a&gt;
  Linear Search in JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply loop over each element in the array, and check to see if the current element is equal to the target; if so, we return that elements index. If the target isn’t found, then we simply return -1 at the end of the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Time complexity of Linear Search
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bestcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Best-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target value is at the beginning of the array, the algorithm will always run at constant time, O(1). The algorithm will always only have to perform one comparison, no matter what the size of the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worstcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Worst-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target is the last element in the array, then the algorithm will have to make n comparisons (n being the length of the input array). This means that the &lt;a href="https://www.doabledanny.com/big-o-notation-in-javascript"&gt;Big O notation&lt;/a&gt; of Linear Search is Big O(n) – linear time complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#averagecase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Average-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target element is somewhere in the middle of the array, then the time complexity will be approximately O(n/2), which simplifies to O(n) – linear time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Space complexity of Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear Search has a space complexity of O(1) – constant space. It uses no auxiliary data structures to find the target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-summary-table"&gt;
  &lt;/a&gt;
  Performance summary table
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" alt="time and space complexity of linear search summary table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-linear-search"&gt;
  &lt;/a&gt;
  When to use Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear search is the best we can do when searching in unsorted arrays, such as [2, 3, 1].&lt;/p&gt;

&lt;p&gt;Whilst there are searching algorithms that can perform faster, such as &lt;a href="https://www.doabledanny.com/binary-search-javascript"&gt;Binary Search&lt;/a&gt;, they can only search through sorted arrays.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, subscribe to &lt;a href="https://www.doabledanny.com/newsletter-signup/"&gt;my newsletter&lt;/a&gt;. I write on topics such as algorithms, UI design and freelancing. I’ll email you once per week with my latest article and bonus tips and tricks. I like to dive deeply into topics to give you all the information you need in one place!&lt;/p&gt;

&lt;p&gt;Also, check out and subscribe to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;coding YouTube Channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you want to further your knowledge of algorithms and data structures, check out: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;. It’s the best Udemy course I’ve ever taken 👌.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to send email using SMTP server in django?</title>
      <author>Shubham Singh Kshatriya</author>
      <pubDate>Mon, 12 Jul 2021 17:06:38 +0000</pubDate>
      <link>https://dev.to/shubhamkshatriya25/how-to-send-email-using-smtp-server-in-django-131f</link>
      <guid>https://dev.to/shubhamkshatriya25/how-to-send-email-using-smtp-server-in-django-131f</guid>
      <description>&lt;p&gt;Remember when you we signed-up to an application and received a welcome email or you once forgot your password and got an email with password reset link. This small things adds weight to User Experience.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to send emails to our users using Django framework and SMTP server. Without wasting any minute let’s jump to the interesting part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-gmail-for-django-mail-api"&gt;
  &lt;/a&gt;
  Setting up Gmail for django mail API:
&lt;/h3&gt;

&lt;p&gt;In order to use Google SMTP, you should have a gmail account. Next thing you need is to enable &lt;strong&gt;Allow less secure app feature&lt;/strong&gt; under account security settings. This feature is used for securing your google account from the apps that are less secure to use it in order to prevent hackers from muddle into your account.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw-iGxhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8wyo9wwqz16h25ritzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw-iGxhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8wyo9wwqz16h25ritzy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-settingspy"&gt;
  &lt;/a&gt;
  Configuring settings.py:
&lt;/h3&gt;

&lt;p&gt;In your settings.py file, add the following configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'your gmail account'
EMAIL_HOST_PASSWORD = 'your account’s password'
EMAIL_USE_SSL = False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s understand these terminologies:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_BACKEND:&lt;/strong&gt; &lt;br&gt;
This setting specifies the backend that we will  use for sending an email in Django.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST:&lt;/strong&gt; &lt;br&gt;
This setting is to specify the email service provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_USE_TLS:&lt;/strong&gt; &lt;br&gt;
This setting specifies whether the Email uses a TLS connection or not. It is True for Gmail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_PORT:&lt;/strong&gt; &lt;br&gt;
This is the default setting for Gmail. It is the port used by the SMTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST_USER:&lt;/strong&gt; &lt;br&gt;
The name of the email account which will be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST_PASSWORD:&lt;/strong&gt;&lt;br&gt;
The password of the email account which will be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_USE_SSL:&lt;/strong&gt; False for Gmail.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Your password is visible here so before deploying it encrypt your password or place in a file or server, where only have access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#configuring-viewspy"&gt;
  &lt;/a&gt;
  Configuring views.py:
&lt;/h3&gt;

&lt;p&gt;Django provides a module named &lt;strong&gt;send_mail&lt;/strong&gt;, that we will use to send email to the users. There are many options available for the send_mail but for simplicity we will use only 4 fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subject:&lt;/strong&gt;&lt;br&gt;
It contains the subject of the email&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;message:&lt;/strong&gt; &lt;br&gt;
It contains the body of the email&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;email_from:&lt;/strong&gt; &lt;br&gt;
It is the sender’s mail address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;recipient_list:&lt;/strong&gt; &lt;br&gt;
It is the receiver’s email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.core.mail import send_mail
from django.conf import settings

def mail(request):
    ...
    subject = 'your subject'
    message = 'your message'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['receiver's mail address', ]
    return render(request,'some_page.html')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-urlspy"&gt;
  &lt;/a&gt;
  Configuring urls.py:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('mail', views.mail, name ='mail'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this your code is ready for sending the email to the users. All you need now is to run the server and check whether your methods are functioning properly. &lt;/p&gt;

&lt;p&gt;That’s was it for this article. Thanks for reading.&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/shubhHAM_"&gt;Twitter&lt;/a&gt; for any discussions.&lt;/p&gt;

&lt;p&gt;Adios.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Não corra. Pode doer.</title>
      <author>Júlio Guedes</author>
      <pubDate>Mon, 12 Jul 2021 17:02:58 +0000</pubDate>
      <link>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</link>
      <guid>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</guid>
      <description>&lt;p&gt;Nós temos um grande potencial dentro de cada um de nós, e muitas vezes escolhemos o curso superior tentando atingir o máximo que somos capazes, e também provar que somos. Experimentamos novas áreas, aprendemos coisas novas, nos dispomos como voluntários, pesquisamos, desenvolvemos e analisamos coisas.&lt;/p&gt;

&lt;p&gt;É engraçado perceber que tudo isso acontece naquele minúsculo espaço, entre nós e o computador. Nós lemos, tentamos, assistimos aulas, perguntamos e, acima de tudo, nos esforçamos. Até conseguirmos. Quantas vezes não repetimos esse ciclo num único dia?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" alt="Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Durante a jornada da graduação, enfrentamos problemas, e começamos a buscar liberdades e alívios. Problemas financeiros, com a família, com amigos, de saúde, entre tantos outros. Alguns veem no estudo e no trabalho uma fuga, já que essa realidade não é confrontada no ambiente profissional ou universitário. Urge a necessidade de se formar, como primeiro passo pra libertação. &lt;/p&gt;

&lt;p&gt;Mas para se formar bem, é preciso experiência, afinal, que empresa legal e que pode pagar um salário bacana iria contratar um recém-formado com currículo em branco? Ainda nos primeiros períodos do curso, surge a necessidade de preencher o currículo com monitorias, pesquisas, projetos e estágios. Mesmo que, a princípio, sejam voluntários. Tudo isso sem baixar as notas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" alt="Estudando"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada dia que passa, enxergamos o quanto é difícil. Aos poucos se vai abdicando pequenas coisas: assistir um filme com a família, fazer as refeições no mesmo horário, encontrar com os amigos, conversar com eles sobre coisas além da universidade. Seus hobbies se transformam em estudos, já que você ainda não conseguiu o tão sonhado estágio que vai garantir algumas portas abertas depois. A cada mês ou semestre, novas coisas começam a deixadas de lado: dormir bem, praticar exercícios ou esportes, a relação com seus amigos, e até um relacionamento.&lt;/p&gt;

&lt;p&gt;É claro que nessa jornada você conseguiu muita coisa, afinal, nenhum esforço grande assim passa despercebido pelo mundo, principalmente quando você quer ser notado. Você consegue oportunidades em estágios, projetos ou pesquisas, e é exemplar em cada um deles. Então, começa a se questionar porquê não é notado por aqueles que você queria. E aposta mais coisas nessa busca.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" alt="Computador de noite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é mais um problema trabalhar e estudar à noite, nos finais de semana e feriados. É o que precisa ser feito. A carga é grande demais pra não fazê-lo. E, diminuindo a carga, você sabe que não chegará onde quer.&lt;/p&gt;

&lt;p&gt;Cada vez é um fator a mais, um estresse a mais, que surge de uma oportunidade boa demais pra negar. E aceitamos a vida assim. Por um ou dois anos, vai valer a pena esse sacrifício. É um investimento no futuro.&lt;/p&gt;

&lt;p&gt;As decepções começam a aparecer, suas expectativas de ser notado continuam não se cumprindo a cada dia, e essa carga de trabalho tão pesada se transforma no seu dia. Você acorda e dorme para cumprir o que acha que os outros esperam de você, adiando a esperança de que vai dar certo. Cada vez mais você acumula rejeições nos estágios dos sonhos. Não desiste de lutar. E meses se passam.&lt;/p&gt;

&lt;p&gt;Até que você quebra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" alt="Quebrado"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você está cansado. Olha para o lado e seus amigos, que antes se divertiam tanto juntos, não estão diariamente ao seu lado. Não estão ao seu lado há algum tempo, e você sequer tinha notado. Você não está satisfeito com seu corpo, sua aparência. Pensa em fazer outra coisa pra desestressar, mas o que fazer? Você deixou seus hobbies pra trás há muito tempo.&lt;/p&gt;

&lt;p&gt;Estar no computador começa a causar dor, e aos poucos você começa a abdicar de algumas das obrigações. Mesmo sem ter alcançado nada do que imaginava ser possível. Sair de um projeto, não se inscrever em mais uma monitoria. Surge o medo de se formar e estar desempregado, seu pior pesadelo.&lt;/p&gt;

&lt;p&gt;Mas existe a possibilidade de continuar na universidade, numa pós graduação, e extender esse tempo de se decidir. Com suas notas e seus esforços, deve ser possível. Mas foi pra isso que você lutou tanto? Pra continuar no mesmo lugar que você está? Sabendo que uma vez ouviu que "a pós-graduação é onde ficam aqueles que não conseguem um emprego"?&lt;/p&gt;

&lt;p&gt;Você sabe que isso não é verdade. Mas você correu demais. Esqueceu de aproveitar a graduação. Viver o dia a dia de um projeto, de uma monitoria. Divertir-se com seus amigos, ao invés de tentar agarrar o mundo com seus braços. Esqueceu de cursar uma disciplina e conversar com o professor após a aula, sobre como aquele conteúdo se aplica num problema, mesmo que você não fosse fazê-lo. Sua curiosidade e seu interesse sumiram, pois não havia mais tempo para novas coisas. &lt;/p&gt;

&lt;p&gt;Aos poucos, você foi murchando. E, só agora, percebeu que estava murcho.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" alt="Flor murcha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é possível voltar no tempo e reparar tudo, você sabe muito bem. Mas sempre é possível reconsiderar o que está fazendo agora, ponderar melhor e entender suas prioridades. Saúde, tempo, amigos, rir, sorrir, brincar. Assistir um filme ruim só pra dizer que é ruim mesmo, e então rir com seus amigos por vocês escolhido passar por isso. Se reaproximar daqueles que importam, das coisas que te faziam sorrir.&lt;/p&gt;

&lt;p&gt;A relação com o seu trabalho e seus estudos precisa ser saudável pra dar certo, afinal, você escolheu tudo isso por gostar. Mas sua vida não se resume a um emprego, um título, um trabalho. Escolher esse caminho pode te isolar. Pode doer.&lt;/p&gt;

&lt;p&gt;Pare, pense, reflita.&lt;br&gt;
Sempre.&lt;br&gt;
Para só então saber como continuar.&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>motivation</category>
      <category>career</category>
    </item>
  </channel>
</rss>
