<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>S3 file versioning hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 02 Aug 2021 11:22:17 +0000</pubDate>
      <link>https://dev.to/this-is-learning/s3-file-versioning-hands-on-1fcj</link>
      <guid>https://dev.to/this-is-learning/s3-file-versioning-hands-on-1fcj</guid>
      <description>&lt;p&gt;We studied about S3 file versioning in the last part . In this part we will see how to start file versioning in S3 and what are its advantages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHc_AaPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grkyeflchm2gacnauqqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHc_AaPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grkyeflchm2gacnauqqq.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3M60H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xt3feczffvwmdfhrdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3M60H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xt3feczffvwmdfhrdd.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glv_AXvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro3ia7itbt1uxgapqem8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glv_AXvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro3ia7itbt1uxgapqem8.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2eefohR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jvs4tug8gzqapdm4w7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2eefohR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jvs4tug8gzqapdm4w7y.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_54v0oMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8zr3duw0gop8vu062vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_54v0oMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8zr3duw0gop8vu062vv.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MN2Vlzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqrl2j6tw1m6mfqm8ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MN2Vlzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqrl2j6tw1m6mfqm8ye.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R45KosDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2knew8avbfc853mzdwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R45KosDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2knew8avbfc853mzdwn.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jmECN0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afx3hxdrfdbgg1mfiwp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jmECN0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afx3hxdrfdbgg1mfiwp1.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VS1SY7XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7011ig7zoakhuwjmzl71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VS1SY7XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7011ig7zoakhuwjmzl71.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7sDkMUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kek897wtnfluvnvos15a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7sDkMUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kek897wtnfluvnvos15a.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oBXCV6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mgp4lxf5fy1ussu4hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oBXCV6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mgp4lxf5fy1ussu4hc.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JwAaLGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5v87tc3cso01w52kuq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JwAaLGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5v87tc3cso01w52kuq8.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDiGBCE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5v6fpkhxmgmls522zdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDiGBCE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5v6fpkhxmgmls522zdu.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to your S3 dashboard &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the bucket that we used in last exercise while deploying a static site in S3&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ag5H2aFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nxf27h5chjeqolx3rdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ag5H2aFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nxf27h5chjeqolx3rdp.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to the properties tag. The first setting is bucket versioning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vucTdAFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3ko7netk8cfl94rxfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vucTdAFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3ko7netk8cfl94rxfb.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on edit in bucket versioning&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9cUIfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2w5pqtlfh3vfnzkxaf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9cUIfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2w5pqtlfh3vfnzkxaf6.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select enable and save changes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P97HAfwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycv6b3bc49b8v664omn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P97HAfwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycv6b3bc49b8v664omn.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bucket versioning is enabled now in the bucket&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let us see what it affects and how it can be useful&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the contents of the index.html file and upload it again I've changes the contents to the following.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Test s3&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Ajit Singh&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world new!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Upload the new file again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable show versions from bucket dashboard you will see that you have two versions of the file&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-9sKO2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9scwlbr2c1vwm73rx4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-9sKO2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9scwlbr2c1vwm73rx4x.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now on checking the website link you will see the contents changes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#now-let-us-see-how-to-recover-our-old-file"&gt;
  &lt;/a&gt;
  Now let us see how to recover our old file
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To recover the old file we can select a specific version on the dashboard and delete it then we will recover our old file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let us again go to our website link. we will see that our file is reverted back.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let us now try to delete the last index.html file but turn off show versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will see that this is not an option of permanently delete but a delete&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you delete the object you will see you bucket is empty &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable show versions you will see that it is not actually deleted but S3 adds a delete marker on it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can now recover the object by deleting the delete marker on the object same way we deleted the other version&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Voila we have recover the version&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here we see why bucket versioning is so important in S3 and why this should definitely be enabled for important buckets. We have already created a S3 bucket but how to see logs if retrieval of file is failing. Next time we will study how to enable logging in S3 buckets.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Watch netflix for free for life without an account</title>
      <author>Olga Myler</author>
      <pubDate>Mon, 02 Aug 2021 11:17:52 +0000</pubDate>
      <link>https://dev.to/olgamyler/watch-netflix-for-free-for-life-without-an-account-20pj</link>
      <guid>https://dev.to/olgamyler/watch-netflix-for-free-for-life-without-an-account-20pj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dWOnF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrduacialslq447s7f02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7dWOnF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrduacialslq447s7f02.jpg" alt="Netflix Free Trial"&gt;&lt;/a&gt;&lt;br&gt;
Get a Free Netflix Premium Account or Upgrade your current account for 1 more year for free.&lt;/p&gt;

&lt;p&gt;Recently, netflix service has spread to watch movies and series, but it is paid and requires a bank card or PayPal account, but today I will give you a way to get Netflix Free Trial for 1 year to watch it for free for 1 year without paying anything. I will tell you.&lt;/p&gt;

&lt;p&gt;Free Netflix Accounts for you:&lt;br&gt;
&lt;a href="https://flixnetw.page.link/freeaccounts"&gt;GET NETFLIX PREMIUM FOR FREE&lt;/a&gt; &lt;br&gt;
&lt;a href="https://flixnetw.page.link/freeaccounts"&gt;UPGRADE YOUR CURRENT ACCOUNT FOR 1 MORE YEAR FOR &lt;br&gt;
FREE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for more netflix free accounts read &lt;a href="https://netflixfreetrial.medium.com/netflix-free-trial-is-back-upgrade-you-account-for-free-and-assist-to-all-favourite-shows-c24ad7e711c8"&gt;article source&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>VUE + TSX 💖 IDE | How to enable Intellisense with VUE + TS + JSX</title>
      <author>Eugene</author>
      <pubDate>Mon, 02 Aug 2021 11:09:43 +0000</pubDate>
      <link>https://dev.to/sincovschi/vue-tsx-ide-how-to-enable-intellisense-with-vue-ts-jsx-49nc</link>
      <guid>https://dev.to/sincovschi/vue-tsx-ide-how-to-enable-intellisense-with-vue-ts-jsx-49nc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-solution"&gt;The Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-code"&gt;The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-conclusion"&gt;The Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I choose a lazy person to do a hard job.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Because a lazy person will find an easy way to do it.&lt;/em&gt;&lt;br&gt;
― Bill Gates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the quote above implies, the lazier the person is - the merrier. Therefore, having a good &lt;a href="https://code.visualstudio.com/docs/editor/intellisense"&gt;IntelliSense&lt;/a&gt; enabled, makes your life so much easier and lazier.&lt;/p&gt;

&lt;p&gt;After switching from a strongly typed language to a not typed one, the biggest discomfort, the developer is feeling - is the lack of IntelliSense support in VSCode or other IDE.&lt;/p&gt;

&lt;p&gt;Another issue is the way &lt;a href="https://v3.vuejs.org/api/options-api.html"&gt;Vue with Options API&lt;/a&gt; distorts your understanding of how Javascript works. It's very hard to understand what is happening inside the component. Also, IDE is completely useless when it comes to templates. You start to hate it... but this is what it is to be a developer. So, beer with it (pun intended).&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The Solutions:
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-part-1-install-extensions"&gt;
  &lt;/a&gt;
  Solution part 1: install extensions
&lt;/h3&gt;

&lt;p&gt;
  Vue extensions, click here.
  &lt;h4&gt;
  &lt;a href="#vetur-httpsmarketplacevisualstudiocomitemsitemnameoctrefvetur"&gt;
  &lt;/a&gt;
  Vetur: &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;https://marketplace.visualstudio.com/items?itemName=octref.vetur&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This is an officially promoted extension for VSCode. It is good but does not offer full support. You have to install some additional dependencies. And if the folder structure is not standard - it's nearly useless. You even have to turn on an experimental feature to be able to work with templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;.vscode/settings.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"vetur.experimental.templateInterpolationService"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vue-helper-httpsmarketplacevisualstudiocomitemsitemnameshenjiaolongvuehelper"&gt;
  &lt;/a&gt;
  Vue Helper: &lt;a href="https://marketplace.visualstudio.com/items?itemName=shenjiaolong.vue-helper"&gt;https://marketplace.visualstudio.com/items?itemName=shenjiaolong.vue-helper&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;One of the best extensions - it parses your mess of attributes from inside data, props, or computed. Then makes them available inside the template inside double-quotes. Also with this, you are able to Ctrl + Click on props in the template and jump to them inside the script tag. Saves you the whole time of searching "where the heck is this variable comes from".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vue-peek-httpsmarketplacevisualstudiocomitemsitemnamedariofuzinatovuepeek"&gt;
  &lt;/a&gt;
  Vue Peek: &lt;a href="https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek"&gt;https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In case Vetur is not working properly, add this extension. It gives you the superpower of Ctrl + Clicks directly inside the template. &lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-part-2-add-typescript-and-jsx"&gt;
  &lt;/a&gt;
  Solution part 2: add TypeScript and JSX
&lt;/h3&gt;

&lt;p&gt;About TS, I can say that I'm a developer which stands on the side of the barricade that believes that Typescript is the best thing that could ever happen to Javascript. I was working with TS from the very beginning. So, to enable TS in .vue files its enough to specify it on the script tag like this:&lt;br&gt;
&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For JSX, so far, at this point in the history of humankind, JSX is the only HTML interpreter that works with Javascript and IDE understands it. To use it with Vue, a little trick is needed. And I'm going to explain it in-depth inside comments of code that will be attached in this post.&lt;/p&gt;

&lt;p&gt;It was like an epiphany when I realized that I can work with Vue just like I used to do with React. And also to pack along with all the tools that Vue offers out of the box. Using Vue like this takes the best of the two worlds. It's something that I started to love and enjoy working with.&lt;/p&gt;

&lt;p&gt;So, to put it in a few words. You need to write Vue with a style friendly toward TS. This is either &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Vue with Composition API&lt;/a&gt; or &lt;a href="https://class-component.vuejs.org/"&gt;Vue with Class Style Components&lt;/a&gt;. And to use JSX instead of &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://class-component.vuejs.org/"&gt;Vue with Class Style Components&lt;/a&gt; - This is a very good way to write components if you like Class Style. It has the official support of this style for Vue 2. &lt;strong&gt;BEWARE&lt;/strong&gt; Class style is working out of the box in Vue 3. But its support is officially dropped &lt;a href="https://github.com/vuejs/rfcs/pull/17#issuecomment-494242121"&gt;the reasons can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Vue with Composition API&lt;/a&gt; - This is the future of Vue. Just like with Hooks - React has become a lot better. It's the same functional components composition style. With this style, Vue got very much like React, to a point that is hard to say the difference when writing components. And that all comes along with all the awesome features Vue has. For those who are working with Vue 2, there is this official package &lt;a href="https://github.com/vuejs/composition-api"&gt;Vue 2 Composition API&lt;/a&gt;. This package will also prepare you to migrate to Vue 3 with near to no effort.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code:
&lt;/h2&gt;

&lt;p&gt;Either go through the code via Stackblitz or &lt;a href="https://github.com/sincovschi/vuetsx"&gt;clone git repository&lt;/a&gt; locally and open with favorite IDE. But please take a moment and read the comments inside components to understand it better.&lt;/p&gt;

&lt;p&gt;Note: Because I have created Stackblitz on a node project, it takes a while to install dependencies and to launch project.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/vue-tsx?embed=1&amp;amp;&amp;amp;file=src/App.vue" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-conclusion"&gt;
  &lt;/a&gt;
  The Conclusion:
&lt;/h2&gt;

&lt;p&gt;As developers, we must use our time wisely. And being able to have a framework's documentation at the tip of your cursor - means a lot.&lt;/p&gt;

&lt;p&gt;When you return to a project after a while... to understand what is happening there, like you were working there yesterday - means even more.&lt;/p&gt;

&lt;p&gt;Therefore, we must be very lazy. We must not hoard in mind all the technicalities of a project. We must write them down, via self-explanatory code. And that is easily achieved with Typescript and code friendly with TS. The Intellisense will pick it up naturally and will be your best friend and guide you through the &lt;u title="“We like to think we spend our time power typing, but we actually spend most of our time staring into the abyss.” — Douglas Crockford"&gt;abyss*&lt;/u&gt;.&lt;/p&gt;




&lt;p&gt;May the bugs avoid you,&lt;br&gt;
&lt;a href="https://dev.to/sincovschi"&gt;Eugene&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Critical Tips to Learn Programming Language Fast (quickly &amp; easily)</title>
      <author>Programming with Shahan</author>
      <pubDate>Mon, 02 Aug 2021 11:04:11 +0000</pubDate>
      <link>https://dev.to/codewithshahan/10-critical-tips-to-learn-programming-language-fast-quickly-easily-ej3</link>
      <guid>https://dev.to/codewithshahan/10-critical-tips-to-learn-programming-language-fast-quickly-easily-ej3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-need-to-know"&gt;
  &lt;/a&gt;
  ⁉You Need to Know
&lt;/h2&gt;

&lt;p&gt;One of the common and basic question among the students or someone who wants to learn code is &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysL_Dsi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/origin/f7/f748a43312487000f282968b97aa60fe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysL_Dsi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/origin/f7/f748a43312487000f282968b97aa60fe.gif" alt="question gif from gifer.com"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“How can I learn to code fast and make a career  as a programmer?”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether you are a student, fresher or experienced person trying to switch your job into &lt;strong&gt;&lt;em&gt;programming&lt;/em&gt;&lt;/strong&gt;, you &lt;em&gt;definitely&lt;/em&gt; trying to find &lt;em&gt;tips&lt;/em&gt; &amp;amp; &lt;em&gt;tricks&lt;/em&gt; to learn programming &lt;strong&gt;quickly&lt;/strong&gt; and &lt;strong&gt;effectively&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#programming-in-reality"&gt;
  &lt;/a&gt;
  ⛔Programming in Reality
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qarV7uI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/5eKX.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qarV7uI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/5eKX.gif" alt="exited programmer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Job&lt;/strong&gt; of &lt;strong&gt;programmers&lt;/strong&gt; is one of the &lt;strong&gt;high paid&lt;/strong&gt; job in the  market &amp;amp; one of the &lt;strong&gt;coolest&lt;/strong&gt; job people find to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning&lt;/strong&gt; to code and mastering it can take years for a &lt;strong&gt;&lt;em&gt;beginner&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most people &lt;strong&gt;&lt;em&gt;give up&lt;/em&gt;&lt;/strong&gt; before they &lt;strong&gt;truly&lt;/strong&gt; get started. &lt;/p&gt;

&lt;p&gt;In the beginning, we get very  excited about the concept of learning to &lt;strong&gt;code&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8bBXlXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/Ao.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8bBXlXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/Ao.gif" alt="coding journey"&gt;&lt;/a&gt;&lt;br&gt;
But later in most cases, &lt;em&gt;students&lt;/em&gt; or &lt;em&gt;beginners&lt;/em&gt; give up &lt;strong&gt;&lt;em&gt;quickly&lt;/em&gt;&lt;/strong&gt;. Because they find it &lt;strong&gt;difficult&lt;/strong&gt; to continue. They get stuck, and they face difficulty in finding the &lt;em&gt;solution&lt;/em&gt; for the code.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2cvLdWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giffiles.alphacoders.com/360/36086.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2cvLdWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giffiles.alphacoders.com/360/36086.gif" alt="programmr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dedication"&gt;
  &lt;/a&gt;
  🎯Dedication
&lt;/h2&gt;

&lt;p&gt;Learning to program isn’t an &lt;strong&gt;&lt;em&gt;overnight&lt;/em&gt;&lt;/strong&gt; journey. But, it’s also not as difficult as people think about it.&lt;/p&gt;

&lt;p&gt;All it just requires is &lt;strong&gt;dedication&lt;/strong&gt;, &lt;strong&gt;passion&lt;/strong&gt;,  &lt;strong&gt;interest&lt;/strong&gt;, and definitely &lt;strong&gt;&lt;em&gt;patience&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are so many &lt;strong&gt;online resources&lt;/strong&gt; available to learn to code  &lt;em&gt;easily&lt;/em&gt;, &lt;em&gt;quickly&lt;/em&gt;, and &lt;em&gt;effectively&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, let's talk about👇&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#critical-tips-to-learn-programming-fast"&gt;
  &lt;/a&gt;
  🔟Critical Tips to learn Programming Fast!
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2Nlrimn5B50"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt; by &lt;em&gt;doing&lt;/em&gt;. Always play with the code while &lt;strong&gt;learning&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grasp the &lt;strong&gt;fundamentals&lt;/strong&gt; for &lt;em&gt;long-term&lt;/em&gt; benefits,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Code by hand&lt;/em&gt;&lt;/strong&gt;. It's &lt;em&gt;sharpens&lt;/em&gt; proficiency  and you’ll need it to &lt;strong&gt;get a job&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never Get &lt;em&gt;Tired&lt;/em&gt; of &lt;strong&gt;Practicing&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask for help&lt;/strong&gt;. You’ll need it,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seek out more &lt;strong&gt;online resources&lt;/strong&gt;. There’s a wealth of content,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn From the &lt;strong&gt;Bugs&lt;/strong&gt; or &lt;em&gt;error&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t just read the &lt;strong&gt;sample code&lt;/strong&gt;. &lt;em&gt;Thinker&lt;/em&gt; with it,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take &lt;strong&gt;breaks&lt;/strong&gt; when debugging,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be curious&lt;/strong&gt;. Because, if you are interested in the topic, you will search for additional &lt;em&gt;resources&lt;/em&gt;, like &lt;strong&gt;articles&lt;/strong&gt; or &lt;strong&gt;YouTube&lt;/strong&gt;  videos, to develop your &lt;strong&gt;knowledge&lt;/strong&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#be-confident"&gt;
  &lt;/a&gt;
  🏹Be Confident
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMnACt1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/e0/88/f5/e088f5d03a5c04acf4372c8031d5571e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMnACt1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/e0/88/f5/e088f5d03a5c04acf4372c8031d5571e.gif" alt="confident programmer"&gt;&lt;/a&gt;&lt;br&gt;
Despite these 10 tips, the most important ingredient to learn to &lt;em&gt;program&lt;/em&gt; &lt;strong&gt;faster&lt;/strong&gt; is to remain &lt;strong&gt;confident&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To do so, you should expect to &lt;strong&gt;fail&lt;/strong&gt; &lt;em&gt;repeatedly&lt;/em&gt;, and be patient with your progress.&lt;/p&gt;

&lt;p&gt;Because, becoming an &lt;strong&gt;expert&lt;/strong&gt; at anything requires &lt;strong&gt;hard work&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  📝Conclusion
&lt;/h2&gt;

&lt;p&gt;If a single &lt;em&gt;doubt&lt;/em&gt; ever clouds in your &lt;strong&gt;mind&lt;/strong&gt;, remember, that every &lt;strong&gt;&lt;em&gt;programmer&lt;/em&gt;&lt;/strong&gt; this path before. None of them more &lt;strong&gt;destined to&lt;/strong&gt; become a &lt;em&gt;developer&lt;/em&gt; than &lt;strong&gt;&lt;em&gt;you&lt;/em&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;Whichever path you are currently on, be it college or coding BootCamp, the only barrier to success is your  work ethic and confidence to persevere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendation"&gt;
  &lt;/a&gt;
  🧷Recommendation
&lt;/h2&gt;

&lt;p&gt;If you are interested in &lt;strong&gt;&lt;em&gt;Front-end&lt;/em&gt;&lt;/strong&gt; developments and &lt;em&gt;programming&lt;/em&gt; &lt;strong&gt;tips&lt;/strong&gt; and &lt;strong&gt;tricks&lt;/strong&gt;, feel free to visit my &lt;a href="https://www.youtube.com/channel/UCyQg06zsc9tBtjgpQ_k8wUg/features"&gt;🔗 YouTube Channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/codewithshahan"&gt;🕊&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://www.instagram.com/codewithshahan"&gt;🙄&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-more"&gt;
  &lt;/a&gt;
  🧩Resources to learn more
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.codingdojo.com/blog/7-tips-learn-programming-faster"&gt;coding dojo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://simpleprogrammer.com/critical-programming-tips/"&gt;simple programmer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Object Types in TypeScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 02 Aug 2021 10:26:33 +0000</pubDate>
      <link>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</link>
      <guid>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</guid>
      <description>&lt;p&gt;In JavaScript, objects are among the most popular ways to work with and pass around data. In TypeScript, there is a special type called "object type" created solely for objects. This tutorial will help you understand what object types in TypeScript are and how to work with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-types-in-a-brief"&gt;
  &lt;/a&gt;
  Object types in a brief
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are basically two types of values. The first type are &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt2/"&gt;primitive data types&lt;/a&gt;. These are the eight basic data types, some of which you will work with quite often. These data types include string, number, boolean, null, symbol and so on. Aside to these primitive data types, there is the second type of values.&lt;/p&gt;

&lt;p&gt;This second type of values are objects. In JavaScript, you can quickly distinguish between a primitive data type and an object by looking at the value. If the value itself has any properties, it is an object. Otherwise, it is one of the eight primitive data types. Each of these types has also corresponding type in TypeScript.&lt;/p&gt;

&lt;p&gt;This applies to objects as well. In TypeScript, there is a new type called object type. This type applies to any value that has some properties, at least one. This new type aims to make working with objects, as well as annotating them, easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anonymous-object-types"&gt;
  &lt;/a&gt;
  Anonymous object types
&lt;/h2&gt;

&lt;p&gt;TypeScript allows you to define two types of object types. The first type is anonymous. This is when you define an object for a specific object without using type or an interface. One example of an anonymous object type can be a function parameter. Let's say you have a function which accepts an object as a parameter.&lt;/p&gt;

&lt;p&gt;If you want to define the object type for this object parameter as anonymous you will define it at the definition of the function. You define what properties the object is supposed to have. For each property, you also define what the type of the property value is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a function with anonymous object type:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, you defined the object parameter called the &lt;code&gt;user&lt;/code&gt;. The anonymous object type of this parameter says that the object has two properties: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;. Both properties are of type string and both are required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-object-types"&gt;
  &lt;/a&gt;
  Named object types
&lt;/h2&gt;

&lt;p&gt;The second way to define an object types is by using a type alias or an interface. In this case, you use one of these two to define the shape of the object. When you want to annotate an object with this shape you reference the type alias or interface. TypeScript will use the alias or interface to infer types for all object properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No.1: type alias&lt;/span&gt;
&lt;span class="c1"&gt;// Create a type alias for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No.2: interface&lt;/span&gt;
&lt;span class="c1"&gt;// Create am interface for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use the type alias or interface to annotate user parameter:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure of the object type itself is the same. There are still two properties, of a type string. The difference is that now the object type is defined outside the function or place where it is used, independently if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-and-anonymous-object-type-and-reusability"&gt;
  &lt;/a&gt;
  Named and anonymous object type and re-usability
&lt;/h2&gt;

&lt;p&gt;Named object types have one big benefit that is re-usability of your code. When you define object types as named, you can use them as many times as you want. If you also &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"&gt;export&lt;/a&gt; them, you can also use them anywhere you want. Write once, use anywhere, any time. You can't do this with anonymous types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the type alias for Human object once:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for one function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, age: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'name: Tim, age: 44'&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for another function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samantha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Joe', 'Jack', 'Samantha' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since anonymous object type has no name you can't reference it elsewhere in your code. If you want to re-use the shape it defines, you have to write it again. This is one reason TypeScript developers use named object types more often than anonymous. However, this doesn't mean you should never use anonymous object type.&lt;/p&gt;

&lt;p&gt;A good rule of thumb is to think about the object and what is the likelihood you will use its shape again. If it is likely you will work with its shape, or similar, it might be a good idea to create a type alias or an interface. Then, whenever you will work with that specific shape you will reference the alias or interface.&lt;/p&gt;

&lt;p&gt;This will make it much easier to make changes as you work. You will have to change only one place, the alias or the interface. Once you make the change, it will propagate everywhere you use the alias or the interface. Compare this to searching for all occurrences of that specific shape in your code and updating them.&lt;/p&gt;

&lt;p&gt;This will also help you keep the probability of bugs at the minimum. When you update the alias or interface TypeScript will be able to immediately warn you if you have to change some code so the code reflects the new shape. This will not happen with anonymous object type because there is no single source of truth TypeScript could use.&lt;/p&gt;

&lt;p&gt;On the other hand, if you are not likely to work with that, or similar, shape again, anonymous object type will do the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-type-and-property-modifiers"&gt;
  &lt;/a&gt;
  Object type and property modifiers
&lt;/h2&gt;

&lt;p&gt;When you define an object type, anonymous or named, all properties are required and changeable. TypeScript allows you to change this with the help of property modifiers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-object-properties"&gt;
  &lt;/a&gt;
  Optional object properties
&lt;/h3&gt;

&lt;p&gt;There is a difference between an object that may have some properties and an object that must have some properties. When you create an object type that specifies some properties, TypeScript expects to find these properties in the object you annotated with that object type.&lt;/p&gt;

&lt;p&gt;If you forget to define all these properties in the object, TypeScript will complain. Along with this, TypeScript will also expect to find only those properties you defined. It will not expect any other. It will actually also complain if it finds some additional properties. There are two ways out of this.&lt;/p&gt;

&lt;p&gt;The first way is to create multiple variations of the object type to cover various use cases. This might work for some cases, when you alter the shape of the object. However, creating new variant just to make one property optional is insane. What you can do instead is to tell TypeScript that some property is optional.&lt;/p&gt;

&lt;p&gt;This will also tell TypeScript that the property may not be defined every time. And, if it is indeed not defined it should complain about it. Well, unless you actually try to use the property. You can achieve this, making some property optional, by putting a question mark symbol (&lt;code&gt;?&lt;/code&gt;) right after the property name in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dorris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pelican&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nemo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;// The "species" property is required, but missing.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'species' is missing in type '{ name: string; }' but required in type 'Animal'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-object-properties"&gt;
  &lt;/a&gt;
  Readonly object properties
&lt;/h3&gt;

&lt;p&gt;The second property modifier is &lt;code&gt;readonly&lt;/code&gt;. This modifier helps you specify properties which values should not be change after you initialize them. Note that this modifier works only in TypeScript. If you mark some property as readonly, and later try to change it, TypeScript will complain by throwing an error.&lt;/p&gt;

&lt;p&gt;However, this will not prevent JavaScript from executing that change. For JavaScript, there is no such a thing as a readonly property, at least not now. You can specify a property as a readonly by putting the &lt;code&gt;readonly&lt;/code&gt; keyword just before the property in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "name" readonly&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "email" readonly&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@jack.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234_some_pass_to_test_56789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of property "role" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of readonly property "email" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@yo.ai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-types-and-index-signatures"&gt;
  &lt;/a&gt;
  Object types and index signatures
&lt;/h2&gt;

&lt;p&gt;So far, we've worked with objects in which we knew all properties beforehand. This may not be true every time. You may find yourself in situations where you will know only what type of property and what type of a value to expect. However, you may not know the exact name of the property.&lt;/p&gt;

&lt;p&gt;In TypeScript, this is not a problem thanks to index signatures. With index signatures, you can specify the type of a property you expect along with the type of its value. This gives you a lot of flexibility because as long as both types are correct TypeScript will not complain about anything.&lt;/p&gt;

&lt;p&gt;When you want to use index signature you have to remember to use a slightly different syntax for defining properties. Normally, you would define some property "X", add colon, and then add some type for its value. This tells TypeScript that there is specific property "X" in the object. Thing is, we don't know this "X".&lt;/p&gt;

&lt;p&gt;To overcome this with index signature, you have to wrap the property with square brackets and add some type. This type says what type the property itself will be. Allowed types for index signatures are string and number. The rest is the same. What follows next are colons and some type for the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create another object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of number:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a string.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookshelf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a number.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hackers and Painters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Blitzscaling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings, not numbers.&lt;/span&gt;
  &lt;span class="na"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;two&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TypeScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type '{ one: string; two: string; }' is not assignable to type 'NumberKey'.&lt;/span&gt;
&lt;span class="c1"&gt;// Object literal may only specify known properties, and 'one' does not exist in type 'NumberKey'.&lt;/span&gt;

&lt;span class="c1"&gt;// This will also not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings,&lt;/span&gt;
  &lt;span class="c1"&gt;// but the values are numbers and not strings.&lt;/span&gt;
  &lt;span class="na"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type 'number' is not assignable to type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-index-signatures"&gt;
  &lt;/a&gt;
  Readonly index signatures
&lt;/h3&gt;

&lt;p&gt;Index signatures also allow you to use the &lt;code&gt;readonly&lt;/code&gt; keyword to specify readonly properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature and readonly property:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string and a readonly:&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object with shape of "ReadonlyStringKey":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Suzzy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Abyssinian Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change the value of "name" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change the value of "age" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-introduction-to-object-types-in-typescript"&gt;
  &lt;/a&gt;
  Conclusion: Introduction to Object Types in TypeScript
&lt;/h2&gt;

&lt;p&gt;Objects are fundamental part of JavaScript. TypeScript object types can also make them type safe. Object types can also make it easier to work with objects in general. I hope that this tutorial helped you learn what anonymous and named object types in TypeScript are and how to use property modifiers and index signatures.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Visual Studio Code Keyboard Shortcuts for Windows</title>
      <author>Archit Sharma</author>
      <pubDate>Mon, 02 Aug 2021 10:03:17 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</link>
      <guid>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently. VS Code is Free, built on open source, easy to use code editor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visual Studio Code keyboard shortcuts are helps developers in writing code more efficiently and for boosting their working performance.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#shortcut-keys-are-categorized-in-following-categories-"&gt;
  &lt;/a&gt;
  Shortcut keys are categorized in following categories :-
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;General Shortcuts&lt;/li&gt;
&lt;li&gt;Basic Editing Shortcuts&lt;/li&gt;
&lt;li&gt;Navigation Shortcuts&lt;/li&gt;
&lt;li&gt;Search and replace Shortcuts&lt;/li&gt;
&lt;li&gt;Multi-cursor and selection Shortcuts&lt;/li&gt;
&lt;li&gt;Rich languages editing Shortcuts&lt;/li&gt;
&lt;li&gt;Editor management Shortcuts&lt;/li&gt;
&lt;li&gt;File management Shortcuts&lt;/li&gt;
&lt;li&gt;Debug Shortcuts&lt;/li&gt;
&lt;li&gt;Integrated terminal Shortcuts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Shortcut Key&lt;/code&gt;       -   Description&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-shortcuts"&gt;
  &lt;/a&gt;
  General Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Shift+P, F1&lt;/code&gt;   -   &lt;em&gt;Show Command Palette&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt;        -   &lt;em&gt;Quick Open, Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;      -   &lt;em&gt;New window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+W&lt;/code&gt;      -   &lt;em&gt;Close window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+,&lt;/code&gt;        -   &lt;em&gt;User Settings&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;         -   &lt;em&gt;Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-editing"&gt;
  &lt;/a&gt;
  Basic Editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+X&lt;/code&gt;        -   &lt;em&gt;Cut line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;        -   &lt;em&gt;Copy line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Move line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + ↓ / ↑&lt;/code&gt;  -    &lt;em&gt;Copy line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+K&lt;/code&gt;      -   &lt;em&gt;Delete line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Enter&lt;/code&gt;        -   &lt;em&gt;Insert line below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Enter&lt;/code&gt;   -    &lt;em&gt;Insert line above&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+\&lt;/code&gt;      -   &lt;em&gt;Jump to matching bracket&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+] / [&lt;/code&gt;        -   &lt;em&gt;Indent/outdent line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Home / End&lt;/code&gt;        -   &lt;em&gt;Go to beginning/end of line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home&lt;/code&gt;         -   &lt;em&gt;Go to beginning of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+End&lt;/code&gt;      -   &lt;em&gt;Go to end of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Scroll line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+PgUp / PgDn&lt;/code&gt;    -    &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+[&lt;/code&gt;      -   &lt;em&gt;Fold (collapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+]&lt;/code&gt;      -   &lt;em&gt;Unfold (uncollapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+[&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+]&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+0&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+J&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+C&lt;/code&gt;         -   &lt;em&gt;Add line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+U&lt;/code&gt;         -   &lt;em&gt;Remove line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+/&lt;/code&gt;        -   &lt;em&gt;Toggle line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+A&lt;/code&gt;       -   &lt;em&gt;Toggle block comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Z&lt;/code&gt;                 -   &lt;em&gt;Toggle word wrap&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation-shortcuts"&gt;
  &lt;/a&gt;
  Navigation Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+T&lt;/code&gt; - &lt;em&gt;Show all Symbols&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+G&lt;/code&gt; - &lt;em&gt;Go to Line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt; - &lt;em&gt;Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+O&lt;/code&gt; -   &lt;em&gt;Go to Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+M&lt;/code&gt; -   &lt;em&gt;Show Problems panel&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F8&lt;/code&gt; - &lt;em&gt;Go to the next error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F8&lt;/code&gt; -   &lt;em&gt;Go to previous error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt; - &lt;em&gt;Navigate editor group history&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ← / →&lt;/code&gt; - &lt;em&gt;Go back / forward&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+M&lt;/code&gt; - &lt;em&gt;Toggle Tab moves the focus&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-and-replace"&gt;
  &lt;/a&gt;
  Search and replace
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F&lt;/code&gt; - &lt;em&gt;Find&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+H&lt;/code&gt; - &lt;em&gt;Replace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F3 / Shift+F3&lt;/code&gt;  - &lt;em&gt;Find next/previous&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Enter&lt;/code&gt;  - &lt;em&gt;Select all occurences of Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+D&lt;/code&gt;  - &lt;em&gt;Add selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+D&lt;/code&gt; - &lt;em&gt;Move last selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+C / R / W&lt;/code&gt; - &lt;em&gt;Toggle case-sensitive / regex / whole word&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicursor-and-selection-shortcuts"&gt;
  &lt;/a&gt;
  Multi-cursor and selection Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt+Click&lt;/code&gt; - &lt;em&gt;Insert cursor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Alt+ ↑ / ↓&lt;/code&gt; - &lt;em&gt;Insert cursor above / below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+U&lt;/code&gt; - &lt;em&gt;Undo last cursor operation&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+I&lt;/code&gt; - &lt;em&gt;Insert cursor at end of each line selected&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+L&lt;/code&gt; - &lt;em&gt;Select current line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; - &lt;em&gt;Select all occurrences of current selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+F2&lt;/code&gt;  - &lt;em&gt;Select all occurrences of current word&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+→&lt;/code&gt; - &lt;em&gt;Expand selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+←&lt;/code&gt; - &lt;em&gt;Shrink selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + (drag mouse)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + (arrow key)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + PgUp/PgDn&lt;/code&gt; - &lt;em&gt;Column (box) selection page up/down&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich-languages-editing"&gt;
  &lt;/a&gt;
  Rich languages editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt; - &lt;em&gt;Trigger suggestion&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Space&lt;/code&gt;  - &lt;em&gt;Trigger parameter hints&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+F&lt;/code&gt; - &lt;em&gt;Format document&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+F&lt;/code&gt; - &lt;em&gt;Format selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F12&lt;/code&gt; - &lt;em&gt;Go to Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+F12&lt;/code&gt; - &lt;em&gt;Peek Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F12&lt;/code&gt; - &lt;em&gt;Open Definition to the side&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+.&lt;/code&gt; - &lt;em&gt;Quick Fix&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F12&lt;/code&gt; - &lt;em&gt;Show References&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F2&lt;/code&gt; - &lt;em&gt;Rename Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+X&lt;/code&gt; - &lt;em&gt;Trim trailing whitespace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K M&lt;/code&gt; - &lt;em&gt;Change file language&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editor-management"&gt;
  &lt;/a&gt;
  Editor management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F4, Ctrl+W&lt;/code&gt; - &lt;em&gt;Close editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F&lt;/code&gt; - &lt;em&gt;Close folder&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+\&lt;/code&gt; - &lt;em&gt;Split editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+ 1 / 2 / 3&lt;/code&gt; - &lt;em&gt;Focus into 1st, 2nd or 3rd editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+ ←/→&lt;/code&gt; - &lt;em&gt;Focus into previous/next editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Move editor left/right&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K ← / →&lt;/code&gt; - &lt;em&gt;Move active editor group&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-management"&gt;
  &lt;/a&gt;
  File management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+N - *New File*&lt;br&gt;
&lt;/code&gt;Ctrl+O - &lt;em&gt;Open File...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+S - *Save*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+S  - &lt;em&gt;Save As...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K S - *Save All*&lt;br&gt;
&lt;/code&gt;Ctrl+F4 - &lt;em&gt;Close&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+W - *Close All*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+T - &lt;em&gt;Reopen closed editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K - *Enter Keep preview mode editor open*&lt;br&gt;
&lt;/code&gt;Ctrl+Tab - &lt;em&gt;Open next&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab - *Open previous*&lt;br&gt;
&lt;/code&gt;Ctrl+K P - &lt;em&gt;Copy path of active file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K R - *Reveal active file in Explorer*&lt;br&gt;
&lt;/code&gt;Ctrl+K O - &lt;em&gt;Show active file in new window/instance&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;F9&lt;/code&gt; - &lt;em&gt;Toggle breakpoint&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F5&lt;/code&gt; - &lt;em&gt;Start/Continue&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F5&lt;/code&gt; - &lt;em&gt;Stop&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F11 / Shift+F11&lt;/code&gt; - &lt;em&gt;Step into/out&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F10&lt;/code&gt; - &lt;em&gt;Step over&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+I&lt;/code&gt; - &lt;em&gt;Show hover&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-terminal"&gt;
  &lt;/a&gt;
  Integrated terminal
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+C&lt;/code&gt; - &lt;em&gt;Copy selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+V&lt;/code&gt; - &lt;em&gt;Paste into active terminal&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt; - &lt;em&gt;Scroll up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home / End&lt;/code&gt; - &lt;em&gt;Scroll to top/bottom&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Other operating systems’ keyboard shortcuts and additional&lt;br&gt;
unassigned shortcuts available at &lt;a href="//aka.ms/vscodekeybindings"&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>windows</category>
      <category>programming</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Difference between include, require, include_once and require_once in PHP</title>
      <author>Amine Saissi Hassani</author>
      <pubDate>Mon, 02 Aug 2021 09:33:50 +0000</pubDate>
      <link>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</link>
      <guid>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</guid>
      <description>&lt;p&gt;First of all we should know what is the difference and similarity between include() and require(), include() and require() are used to include other files into a PHP file, and the difference between them are the include() generates a warning when there is an error, but the script will continue execution, otherwise, the require() generates a fatal error, and the script will stop.&lt;/p&gt;

&lt;p&gt;The require_once() statement is similar to require() except require_once() will check if the file has already been included, and if so, it will not require it again, same with include_once().&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reasons Why You Need To Have A Professional Portfolio.</title>
      <author>Lucius Emmanuel Emmaccen</author>
      <pubDate>Mon, 02 Aug 2021 09:33:07 +0000</pubDate>
      <link>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</link>
      <guid>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</guid>
      <description>&lt;p&gt;I have often found people to shy away from the practice of having a professional portfolio. While it might seem negligible in some situations, more often than not, it has proven to be of great importance.&lt;/p&gt;

&lt;p&gt;In this article, we are going to observe and answer a few questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is a portfolio?&lt;/li&gt;
&lt;li&gt;Why do you need one?&lt;/li&gt;
&lt;li&gt;What jobs/industries use portfolios&lt;/li&gt;
&lt;li&gt;What should go into a portfolio&lt;/li&gt;
&lt;li&gt;What should not go into a portfolio&lt;/li&gt;
&lt;li&gt;Should you have a "hard copy" or "online" portfolio&lt;/li&gt;
&lt;li&gt;How do you create one?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-a-portfolio"&gt;
  &lt;/a&gt;
  What is a portfolio?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A portfolio is a collection of records or documentation that provides proof of accomplishments, experience, skills, attributions and work samples. It can be a website, a binder or a physical book, depending on the line of work or profession.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;It might be necessary to note that a &lt;strong&gt;Portfolio&lt;/strong&gt; is quite different from a &lt;strong&gt;Resume&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15187218-Adam-Zonski-Personal-Portfolio-Website?utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share"&gt;Design by Nur Praditya&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" alt="Design by Nur Praditya"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-you-need-one"&gt;
  &lt;/a&gt;
  Why do you need one?
&lt;/h4&gt;

&lt;p&gt;Having a portfolio can improve your recognition in a professional or academic setting. It is an opportunity to illustrate your competencies, presents evidence of your skills and abilities, highlights a comprehensive idea of your best work and can be seen as a brochure for the services you are selling. It allows you to &lt;em&gt;show and not just tell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Portfolios are great for freelancers or independent contractors, business owners or consultants who need to provide work samples to potential clients. The practice of putting together a portfolio: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serves as a reminder of your past accomplishments and acquired skills&lt;/li&gt;
&lt;li&gt;Allows you to showcase your creativity and persona that differentiates you from your competition&lt;/li&gt;
&lt;li&gt;A source of motivation, high self-esteem and confidence&lt;/li&gt;
&lt;li&gt;Gives you credibility&lt;/li&gt;
&lt;li&gt;Makes you a more effective interviewee&lt;/li&gt;
&lt;li&gt;Helps potential clients visualize working with you&lt;/li&gt;
&lt;li&gt;Can help apply for jobs, scholarships, grants and negotiating promotions and raises.&lt;/li&gt;
&lt;li&gt;Can pass for work and learning experience&lt;/li&gt;
&lt;li&gt;Helps you to be seen and discovered (e.g. online portfolio)&lt;/li&gt;
&lt;li&gt;Allows you to market the services you provide and build a reputation and following.&lt;/li&gt;
&lt;li&gt;Demonstrates consistency and compels you to learn/do more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more reasons to consider, but I am sure you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/14909770-Landing-Page-CV-Head-of-Marketing?utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share"&gt;Design by Outcrowd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" alt="Design by Outcrowd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-jobs-industries-use-portfolios"&gt;
  &lt;/a&gt;
  What jobs / industries use portfolios?
&lt;/h4&gt;

&lt;p&gt;Years back, it is common to see more people in the &lt;strong&gt;Visual Profession&lt;/strong&gt; having a portfolio, such as Artists and Creative professionals, photographers, architects, teachers, graphic designers, front-end engineers, painters, etc.&lt;/p&gt;

&lt;p&gt;In the world today, every professional can benefit from having one, even those in the fields &lt;em&gt;not directly&lt;/em&gt; related to visual. e.g. Backend engineers (could create documentation of their involvement in a project, a short video or utilize GitHub etc.), Radio broadcasters/podcasters, Attorneys, judges and politicians, coaches and athletes etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15380331-Modern-Furniture-Website-concept?utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share"&gt;Design by Tomasz Mazurczak&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" alt="Design by Tomasz Mazurczak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;Anything that spotlights your accomplishments and abilities should go in your portfolio. It should capture an idea of who you are and the services you provide.&lt;/p&gt;

&lt;p&gt;Here are some items I would recommend you incorporate in your portfolio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A short and precise summary of who you are.&lt;/li&gt;
&lt;li&gt;Updated resume or CV&lt;/li&gt;
&lt;li&gt;List of skills, tools or technologies you use&lt;/li&gt;
&lt;li&gt;Work experience&lt;/li&gt;
&lt;li&gt;Diplomas (Education), professional certificates and Transcripts (if any)&lt;/li&gt;
&lt;li&gt;Reference letters, awards, testimonials, and LinkedIn recommendations&lt;/li&gt;
&lt;li&gt;Some of your content (if you create content) e.g. Blogs, YouTube videos, Podcasts etc.&lt;/li&gt;
&lt;li&gt;Work samples you have created e.g. Websites, UI/UX designs, project documentation or case studies, video presentations, Artwork (for artists), PowerPoint presentations, Slides etc.&lt;/li&gt;
&lt;li&gt;Lists of accomplishments/awards&lt;/li&gt;
&lt;li&gt;Thank you notes or emails from clients or co-workers (Testimonials) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-should-not-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should not go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;You might get tempted to want a whole Wikipedia of things on your portfolio, but more often than not, it does not increase positive perception. Being super precise and detailed is very important when structuring your portfolio (which is beyond the scope of this article) as it can considerably improve the way you are seen as a professional.&lt;br&gt;
Here are a couple of things I have found to be less useful in a portfolio&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a waterfall of summary in your "About Me" section. A couple of lines of text should pretty much tell the story&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do not put ratings or percentages on your skills&lt;/strong&gt;. I am guilty as I did it in the past. We could argue all day about it, but the truth is, own your skill and do not put a dent in it. Having things like: HTML(50%), CSS(90%), Photoshop(45%) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Here's a screenshot taken from my first portfolio website&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" alt="skills with ratings"&gt;&lt;/a&gt;&lt;br&gt;
Please, remove the ratings. Your 50% rating might be the 100% a company is looking for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overly-complicated, overly-designed layout&lt;/li&gt;
&lt;li&gt;Lack of proper structure and personality&lt;/li&gt;
&lt;li&gt;Do not tell personal stories.&lt;/li&gt;
&lt;li&gt;Do not include your house address (Employers will not perceive you as being security conscious, same for your CV). Your email is just fine.&lt;/li&gt;
&lt;li&gt;Only include things relevant to your field of work/study.&lt;/li&gt;
&lt;li&gt;Use only high-fidelity images (but one that will still load fast in the browser)&lt;/li&gt;
&lt;li&gt;Provide a way to get in touch e.g. A mail, link or a contact form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your get-in-touch section might look something like this if you decided to go with a form field:&lt;br&gt;
&lt;em&gt;Screenshot is taken from my current portfolio&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" alt="portfolio contact section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#should-you-have-a-hard-copy-or-online-portfolio"&gt;
  &lt;/a&gt;
  Should you have a hard copy or online portfolio?
&lt;/h4&gt;

&lt;p&gt;Whether or not you use an online or hard copy portfolio, all depends on your industry and personal preference. Research your industry for what's common and beneficial, then, make a decision. &lt;br&gt;
whichever industry it is, it might still be beneficial to have an online presence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-create-one"&gt;
  &lt;/a&gt;
  How do you create one?
&lt;/h4&gt;

&lt;p&gt;For online portfolios, you can build one for yourself if you are a web developer, have someone build one for you, or use a prebuilt template.&lt;br&gt;
Anyone you decide, be sure to research and make good decisions on what design best suits your field.&lt;/p&gt;

&lt;p&gt;For hard-copy portfolios, you can use a ring binder or leather-bound padfolio. Be sure to organize/tab them into sections.&lt;/p&gt;

&lt;p&gt;Feel free to google &lt;em&gt;“online portfolio websites”  or  “online portfolio builder”&lt;/em&gt;. You can also get design inspiration from hundreds of websites out there if you are building one for yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note: It does not have to be 100% a website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have seen people use several platforms as their portfolio, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/u/0/"&gt;Google slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/"&gt;Google Drive portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A PDF hosted online&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; or &lt;a href="https://www.adobe.com/"&gt;Adobe&lt;/a&gt; Design with a "live link"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other options you could utilize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your &lt;a href="https://www.linkedin.com/"&gt;LinkedIn profile&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/"&gt;GitHub profile&lt;/a&gt; with projects having detailed ReadMe.md describing project specifications, features and your involvement&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt; and, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, research your industry and find what best suits you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#pro-tips"&gt;
  &lt;/a&gt;
  Pro Tips
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Replace practice projects with professional ones as soon as you start having them, e.g. Remove the calculator web app you coded and replace it with your new blog website (even if it is just presentation/static).&lt;/li&gt;
&lt;li&gt;Update the CV on your portfolio as you update them on your PC or mobile&lt;/li&gt;
&lt;li&gt;Do not waste considerable time trying to make it perfect, it never will. You can always make minor updates later in the future.&lt;/li&gt;
&lt;li&gt;Get your portfolio reviewed by a more senior person in your field&lt;/li&gt;
&lt;li&gt;You do not need to have a hundred completed projects before you start a portfolio. Start where you're at, and you'll never regret it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's pretty much it. This article doesn't cover all you need to know and I'd appreciate it if you can drop more &lt;strong&gt;suggestions&lt;/strong&gt;, &lt;strong&gt;Portfolio design Inspiration links&lt;/strong&gt;, &lt;strong&gt;Your thoughts&lt;/strong&gt;, &lt;strong&gt;Your portfolio website link&lt;/strong&gt; to inspire others, and &lt;strong&gt;Comments&lt;/strong&gt; in the discussion box below. You might provide/say something important to other readers. Also, your feedbacks are welcome if this post needs improvement. Do bookmark, like/unicorn this post for reference (and also to support me)&lt;/p&gt;

&lt;p&gt;Keep an eye out. Soon, I will post a step by step process on "How to build a simple online portfolio as a web developer".&lt;/p&gt;

&lt;p&gt;Thanks for reading 😊.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>portfolio</category>
      <category>resume</category>
    </item>
    <item>
      <title>GraphQL Federation Crypto App</title>
      <author>Ania Kubow</author>
      <pubDate>Mon, 02 Aug 2021 09:22:55 +0000</pubDate>
      <link>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</link>
      <guid>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</guid>
      <description>&lt;p&gt;In this video I show you how to use GraphQL Federation by building a Crypto App. I will use React, Apollo GraphQL and a DataStax Astra database.&lt;/p&gt;

&lt;p&gt;0:00 Introduction&lt;br&gt;
1:38 Setting up our Database&lt;br&gt;
3:48 GraphQL API and Playground&lt;br&gt;
7:31 Schema-first approach&lt;br&gt;
14:51 Inserting Coins&lt;br&gt;
18:30 Creating our React App&lt;br&gt;
23:17 Apollo Gateway and Services&lt;br&gt;
51:22 Building out the Frontend&lt;br&gt;
1:14:14 Styling our Project&lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/graphQL-federation-crypto"&gt;https://github.com/kubowania/graphQL-federation-crypto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promos codes in this video:&lt;br&gt;
💻 ANIA200 for $200 free credits from &lt;a href="https://www.datastax.com/"&gt;https://www.datastax.com/&lt;/a&gt;&lt;br&gt;
💻 ANIAKUBOW for 3 months free of Webstorm here: &lt;a href="https://jb.gg/webstorm_ide"&gt;https://jb.gg/webstorm_ide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T722_t-HTFw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;⭐ New to code and none of this is making sense? Watch my '12hr+ YouTube Coding Bootcamp' in which you will learn HTML, CSS and JavaScript Fundamentals completely from scratch. It's on my channel and its 100% free.&lt;/p&gt;

&lt;p&gt;⭐ In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>crypto</category>
      <category>react</category>
    </item>
    <item>
      <title>Why I shifted from C++ to JavaScript.</title>
      <author>Voider</author>
      <pubDate>Mon, 02 Aug 2021 09:17:26 +0000</pubDate>
      <link>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</link>
      <guid>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</guid>
      <description>&lt;p&gt;In this article I will talk about shifting from a compiled language (CPP) to an interpreted language (JS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been coding for almost 3 years now and my native language has been C++ for most of that time, but recently I have been preferring JavaScript and I will cover why in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is better?
&lt;/h2&gt;

&lt;p&gt;Answering this question depends on what do you want to achieve, for example if you want speed then you should definitely choose C++, you can look up tons of comparisons online between the two languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-preferring-js-recently"&gt;
  &lt;/a&gt;
  Why am I preferring JS recently.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I am a very lazy person and I try to use my brain capacity to the very bare minimum, so using a tool that handles my frontend and backend at the same time saves me the hassle of integrating things together if they are of a different language.&lt;/li&gt;
&lt;li&gt;It takes a whole lot less time (and brain capacity) to learn, I didn't even realize how hard C++ was until like a year later, but this will significantly help you as a software engineer.&lt;/li&gt;
&lt;li&gt;You can do so much with so little code, for example let's say you have an array of animals that has a name and species:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var animals = [
  { name: 'Fluffykins', species: 'rabbit' },
  { name: 'Caro',       species: 'dog' },
  { name: 'Hamilton',   species: 'dog' },
  { name: 'Harold',     species: 'fish' },
  { name: 'Ursula',     species: 'cat' },
  { name: 'Jimmy',      species: 'fish' }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you want to copy the names of all the animals to another array, the normal way to do this is by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
var names = []
for (var i = 0; i &amp;lt; animals.length; i++) {
  names.push(animals[i].name)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-87-characters"&gt;
  &lt;/a&gt;
  taking up 87 characters
&lt;/h3&gt;

&lt;p&gt;but thanks to JavaScript's ES6 arrow functions we can do this in literally one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var names = animals.map((x) =&amp;gt; x.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-38-characters"&gt;
  &lt;/a&gt;
  taking up 38 characters
&lt;/h3&gt;

&lt;p&gt;you literally just saved up writing 49 characters for yourself, if you can't see beauty in this I don't know when will you ever do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-word"&gt;
  &lt;/a&gt;
  Last word
&lt;/h2&gt;

&lt;p&gt;Again this is not a comparison at all, I am just stating my personal experience, you should use what's best for what you are working on and what you feel most comfortable with. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Taking Context &amp; Hooks To The Next Level With Component Factories</title>
      <author>Itay Schechner</author>
      <pubDate>Mon, 02 Aug 2021 09:10:54 +0000</pubDate>
      <link>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</link>
      <guid>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</guid>
      <description>&lt;p&gt;Before you slander me in the comments, I just wanted to let you know: &lt;strong&gt;It's my opinion&lt;/strong&gt;. Not all readers will agree with it. I am new to this approach as well, and I wanted to hear your opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Why to use the component factory approach&lt;/li&gt;
&lt;li&gt;Supercharging the context API&lt;/li&gt;
&lt;li&gt;Usage outside of the context API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a typical navigation bar component I wrote for one of my projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 nav px-8 w-screen flex"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"md:px-4 lg:px-6 flex items-center h-16 md:ml-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg md:text-xl text-purple-900 font-bold"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Partydeck
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex flex-grow md:flex-none items-stretch justify-end pl-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedOutLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GameWebsiteLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Join Game
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedInLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There's nothing wrong with this component. In fact, most of you will even like it. However, what about this one:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NavigationBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-theme-700 h-16 nav px-8 shadow-xl w-screen flex flex-row items-center justify-between"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logo&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-6 h-6"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LinkablePartydeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-roboto font-bold text-white text-lg hover:text-theme-300"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Register&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;JoinGameLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-bold font-roboto px-3 py-2 text-theme-700 bg-green rounded hover:bg-green-light ml-2"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both components have the exact same functionality. Yet, when you read the second one, you can actually &lt;strong&gt;understand&lt;/strong&gt; exactly what you're seeing.&lt;/p&gt;

&lt;p&gt;Believe it or not, despite having much more components in my codebase - the overall amount of lines in the navigation source code has decreased dramatically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-factories-to-the-rescue"&gt;
  &lt;/a&gt;
  Component factories to the rescue
&lt;/h2&gt;

&lt;p&gt;How did I do that? Using &lt;strong&gt;component factories&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Component factories are functions that return JSX providers. In those factories, you inject the functionality, but leave the styling to the parent component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#why-do-use-them"&gt;
  &lt;/a&gt;
  Why do use them?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increased code readability&lt;/li&gt;
&lt;li&gt;Ease of refactoring&lt;/li&gt;
&lt;li&gt;Increased Resusability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h3&gt;

&lt;p&gt;The most classic examples I can provide are using the React Context API:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Context Action Factory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I could create a &lt;code&gt;Logout&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation/buttons.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Log Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I used this Logout button in multiple places, and in each one of them it contained different styles.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NavigationBar.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// AuthPopup.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex font-bold w-max space-x-3 items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 text-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Context Conditional Wrapper Factory&lt;/strong&gt;&lt;br&gt;
I find this one extremely useful. &lt;/p&gt;

&lt;p&gt;Suppose you want to conditionally render a fraction of your application to signed in users only. You'd do something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SuperSafeComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or, suppose you have a dialog and a button that opens it. Your dialog would look something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDialogContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In an enterprise application, you might have tens of those. Whereas, the conditional wrapper factory will save you a lot of time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ConditonalWrapperFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// AuthFilters.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dialog.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WhenVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#usage-outside-of-the-context-api"&gt;
  &lt;/a&gt;
  Usage outside of the Context API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Glyph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my project, I have 30 decorative photos, located anywhere around the website. To save myself time and effort, I created this simple factory:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// glyphFactory.tsx&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt; &lt;span class="cm"&gt;/* My favorite feature! */&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// res/glyphs/LightBulbGlyph.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;List Factory&lt;/strong&gt; and &lt;strong&gt;Decorated Pharagraph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are pretty simple ones to understand. In my website, I had plenty of "about-related" static content. I found myself over-creating a list of text, and over-creating a flexbox with a Glyph and a text.&lt;/p&gt;

&lt;p&gt;For that, I created those factories:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ListFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// DecoratedPharagraphFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Glyph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSXProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Glyph&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-full"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I created those in my home page code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home/rules.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CardPick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/CardPick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JudgePick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/JudgePick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Question&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Victory&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Victory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../shared/decoratedPharagraphFactory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JudgePickedRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JudgePick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Each round, a judge is picked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QuestionRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The other players are given a question and and 4 answer cards, and pick the funniest or most clever answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BestMatchRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;CardPick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The judge gets the question and the answers displayed anonymously, and picks the best answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VictoryRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Victory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The player who submitted the answer, wins the round!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I then left it to the home page component to handle he responsive displaying logic and the styling. How Simple Is That?&lt;/p&gt;

&lt;p&gt;Another good usage was in the about page:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;LightBulb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Idea of Partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FeaturesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Playable from distance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inclusive and fair - the game makes the judge or the round judge based on the quality of the answer card rather than the quality of the player who had it.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Binding - it’s impossible to win when you are not 100% focused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Personalized - each one can make their own customized version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connecting - the game makes you get to know the other players better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Always Getting Better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;externalLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/itays123/partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Us&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;When we thought of Partydeck, we wanted a game that is:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Those Guiding Principals will keep guiding us in the next versions.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section space-y-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Developing an application takes time and patience, and the result is
          not always perfect.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            If you have a bug report, a suggestion, a comment or any feedback at
            all regarding this website, we encourage you to contact us via
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GitHubLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"underline"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, or the email link described there.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Thanks a lot, the Partydeck team.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Look how simple is that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Do you have any ideas of using component factories in your next React.js project? Do you think it's a good approach at all? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;View the full source code: (branch &lt;code&gt;1.1.2-redesign&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>webdev</category>
      <category>functional</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to add a Pre-loader in your webpage </title>
      <author>Asmit Malakannawar</author>
      <pubDate>Mon, 02 Aug 2021 09:10:47 +0000</pubDate>
      <link>https://dev.to/asmit2952/how-to-add-a-pre-loader-in-your-webpage-k3a</link>
      <guid>https://dev.to/asmit2952/how-to-add-a-pre-loader-in-your-webpage-k3a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#loaderthrobberspinner"&gt;
  &lt;/a&gt;
  Loader/Throbber/Spinner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6x9yO_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8bllncfu4hhgn0hwnv6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6x9yO_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8bllncfu4hhgn0hwnv6.gif" alt="chrome-capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially, pre-loaders (also known as loaders) are what you see on the screen while the rest of the page's content is still loading. Pre-loaders are often simple or complex animations that are used to keep visitors entertained while server operations finish processing.&lt;/p&gt;

&lt;p&gt;In this tutorial, we have used SVG (Scalable Vector Graphics) for pre-loading animation. It's resolution independent and responsive. Images can be scaled the same way we scale all other elements in responsive web design.&lt;/p&gt;

&lt;p&gt;So, to design the SVG, I have used &lt;a href="https://www.figma.com/files/recent?fuid=999543812784962769"&gt;Figma&lt;/a&gt; which is used for web-based graphics editing and user interface design app.&lt;/p&gt;

&lt;p&gt;After editing and importing your frame as SVG, you now need to animate it. For basic animations, you can either use &lt;a href="https://svgartista.net/"&gt;svgartista&lt;/a&gt; or &lt;a href="https://www.svgator.com/"&gt;svgator&lt;/a&gt;. If you want your own custom animations you can do it by using &lt;code&gt;@keyframes&lt;/code&gt; in &lt;strong&gt;CSS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a Pre-loader Pen, which I created using above methods and used it in my own portfolio website.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Malakannawar/embed/JjNZKvY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, how do we add this on our website?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-these-steps-to-add-a-preloader"&gt;
  &lt;/a&gt;
  Follow these steps to add a pre-loader
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;loader.html&lt;/code&gt; and &lt;code&gt;loader.css&lt;/code&gt; file and copy over the code for both HTML and CSS and then create a wrapper around it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;*svg&lt;/span&gt; &lt;span class="na"&gt;code*&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
     &lt;span class="nc"&gt;.loader-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;whitesmoke&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If done correctly, this is what you should get.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZZsNTmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2546y414uj0ayobc4ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZZsNTmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2546y414uj0ayobc4ho.png" alt="Screenshot (74)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-event"&gt;
  &lt;/a&gt;
  Load Event
&lt;/h3&gt;

&lt;p&gt;The loading Animation is ready. Next we’ll need hide it when the loading is complete. We can do that by listening to window load event which will trigger when all the elements have been completely loaded. Then use jQuery &lt;code&gt;fadeOut&lt;/code&gt; method to hide the loader. &lt;/p&gt;

&lt;p&gt;Make sure you have jQuery included in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to include loading animation page in your other &lt;strong&gt;HTML&lt;/strong&gt; document use a &lt;code&gt;div&lt;/code&gt; tag with &lt;code&gt;id="loading"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;strong&gt;CSS&lt;/strong&gt; file, import &lt;code&gt;loader.css&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url(/assets/css/loader.css)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;strong&gt;JavaScript&lt;/strong&gt; file, you have to call &lt;code&gt;loader.html&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/assets/html/loader.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replaceWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to trigger the loading animation everytime you load a page use this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//wait for page load PLUS two seconds.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeLoader&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.loader-wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fadeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// fadeOut complete. Remove the loading div&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.loader-wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//makes page more lightweight &lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it! Very simple and straightforward😉✌&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
