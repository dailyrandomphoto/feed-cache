<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Static website + Wordpress blog - Hosting on AWS</title>
      <author>Shaharyar Ahmed</author>
      <pubDate>Tue, 18 Jan 2022 22:22:52 +0000</pubDate>
      <link>https://dev.to/shaharyarahmed/static-website-wordpress-blog-hosting-on-aws-pl4</link>
      <guid>https://dev.to/shaharyarahmed/static-website-wordpress-blog-hosting-on-aws-pl4</guid>
      <description>&lt;p&gt;Basic AWS knowledge is required.&lt;/p&gt;




&lt;p&gt;A static website + WordPress blog 🤔&lt;/p&gt;

&lt;p&gt;A very very common scenario where you want to keep your website static or build with Nextjs SSG, or probably with Reactjs. On the other hand, your marketing team wants WordPress to write blogs because it's in their conform zone and they don't want to learn anything new.&lt;/p&gt;

&lt;p&gt;In a startup, where you don't have much time to deal with all these. You might choose one of the three following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build your entire website with WordPress using a theme so your content writers feel at home&lt;/li&gt;
&lt;li&gt;Create static pages for each blog and deploy them with the static site&lt;/li&gt;
&lt;li&gt;Create a custom blogging tool&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But hold on, you have another option. It requires a bit of a hassle though for the first time. But it will make your life much easier on the long run.&lt;/p&gt;

&lt;p&gt;Serve your website statically using Nginx from one server, and run WordPress on another server. Now use AWS load balancer's smart routing to load blogs whenever someone goes to &lt;code&gt;/blog&lt;/code&gt; on your site.&lt;/p&gt;

&lt;p&gt;Feeling overwhelmed? 🤯 Let's break it down and understand it in more detail.&lt;/p&gt;

&lt;p&gt;But first, look at an example&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.teamingway.com"&gt;www.teamingway.com&lt;/a&gt; (Main website is built with Nextjs SSG (static site generation) and statically deployed on an EC2)&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.teamingway.com/blog/"&gt;www.teamingway.com/blog/&lt;/a&gt; (A WordPress site, running on another EC2, routed using AWS load balancer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will set up the same thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-static-website"&gt;
  &lt;/a&gt;
  Deploy static website
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;t2.micro&lt;/code&gt; EC2 instance with the following Nginx config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="c1"&gt;# filename: example.com&lt;/span&gt;
&lt;span class="c1"&gt;# location: /etc/nginx/sites-enabled&lt;/span&gt;

&lt;span class="c1"&gt;# redirect http to https&lt;/span&gt;
&lt;span class="c1"&gt;# redirect example.com to www.example.com&lt;/span&gt;
&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://www.example.com&lt;/span&gt;&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# main block&lt;/span&gt;
&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;www.example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# path to the static website folder&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/srv/www/your-website-folder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt; &lt;span class="s"&gt;index.nginx-debian.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# serve static website files, throw "nginx 404 error" if file not found&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="s"&gt;.html&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Notice, we only handled "HTTP" and not "HTTPS", because we will handle HTTPS at Load Balancer level and attach &lt;code&gt;ssl&lt;/code&gt; certificate there too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restart &lt;code&gt;Nginx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our static website is now up and running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-wordpress-site"&gt;
  &lt;/a&gt;
  Deploy WordPress site
&lt;/h2&gt;

&lt;p&gt;We will not go into the details of creating a WordPress instance on AWS because we're solving a different problem here. We will only explore things that are relevant to our goal.&lt;/p&gt;

&lt;p&gt;To create a WordPress instance, go to &lt;code&gt;Launch Instances&lt;/code&gt; on the main instances page. Search &lt;code&gt;WordPress&lt;/code&gt; and select a &lt;code&gt;Bitnami&lt;/code&gt; WordPress instance (as shown in the image below):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDaTi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slskk4exqpovujazqp2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDaTi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slskk4exqpovujazqp2y.png" alt="AWS create Wordpress instance" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or you can manually set up one, it's all up to you. Once your WordPress instance is up and running, move to the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-redirection-using-aws-load-balancer-and-route-53"&gt;
  &lt;/a&gt;
  Set up redirection using "AWS Load Balancer" and "Route 53"
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-load-balancer"&gt;
  &lt;/a&gt;
  1) Create Load Balancer
&lt;/h3&gt;

&lt;p&gt;On your EC2 dashboard, go to &lt;code&gt;Load Balancers&lt;/code&gt; from the left sidebar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNy1phq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn6rn57yqs81cmbx1zbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNy1phq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn6rn57yqs81cmbx1zbz.png" alt="Select load balancer from sidebar" width="216" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and then create a new load balancer, make sure you select &lt;strong&gt;Application Load Balancer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93VHyruV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vna61b0twz8y8jzi472k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93VHyruV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vna61b0twz8y8jzi472k.png" alt="Create AWS load balancer" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internet-facing&lt;/li&gt;
&lt;li&gt;In the same &lt;code&gt;VPC&lt;/code&gt; as your website and WordPress instance&lt;/li&gt;
&lt;li&gt;In the same &lt;code&gt;Availability zone&lt;/code&gt; as your website and WordPress instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add &lt;code&gt;default listener&lt;/code&gt; as your website instance with port 80 and complete the load balancer creation. We'll change it later anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-set-up-alb-routing"&gt;
  &lt;/a&gt;
  2) Set up ALB routing
&lt;/h3&gt;

&lt;p&gt;Add the first listener for &lt;code&gt;port 80&lt;/code&gt;. Add one rule to permanently redirect to &lt;code&gt;HTTPS 443&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTkfBqgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2brvr2uhrhj3c7p3uodc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTkfBqgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2brvr2uhrhj3c7p3uodc.png" alt="AWS load balancer - http to https redirect" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the second listener for &lt;code&gt;port 443&lt;/code&gt;. Now there will be two rules (See the image below for reference)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; Default action will be to forward all the traffic to our static website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Explanation:&lt;/em&gt; This means all requests coming on &lt;code&gt;example.com&lt;/code&gt; or &lt;code&gt;example.com/anypage&lt;/code&gt; will be forwarded to our static website instance. The instance name is &lt;code&gt;website-static&lt;/code&gt; in the image below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; If the &lt;code&gt;path&lt;/code&gt; matches the pattern &lt;code&gt;/blog*&lt;/code&gt;, forward the request to our &lt;code&gt;WordPress instance&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Explanation:&lt;/em&gt; This means if the request URL contains &lt;code&gt;/blog&lt;/code&gt; in it, the request will now be forwarded to our WordPress instance instead of the static website instance. If a request does not contain &lt;code&gt;/blog&lt;/code&gt;, it will satisfy &lt;code&gt;Rule 1&lt;/code&gt; and will be forwarded to the static website instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lSg5KdlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4du6flxft5t64v6g8h1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSg5KdlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4du6flxft5t64v6g8h1.png" alt="aws-load-balancer-listener-to-https" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You will need to add your SSL certificate to the &lt;strong&gt;AWS Certificate Manager (ACM)&lt;/strong&gt; and attach it to the load balancer. We will not go into its details as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgFiUejg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcicai2yhfy3uo6jx46s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgFiUejg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcicai2yhfy3uo6jx46s.png" alt="Add ssl to AWS load balancer" width="880" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-add-load-balancer-to-route-53"&gt;
  &lt;/a&gt;
  3) Add Load Balancer to Route 53
&lt;/h3&gt;

&lt;p&gt;We have everything ready now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Static website instance&lt;/li&gt;
&lt;li&gt;WordPress site instance&lt;/li&gt;
&lt;li&gt;Load Balancer with https and rules to redirect based on URL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next and final step is to make a DNS entry for our website so we can access it via domain name.&lt;/p&gt;

&lt;p&gt;Go to your AWS Route 53 directory and create a new Route:&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;Record type&lt;/code&gt; = &lt;code&gt;A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Turn on the &lt;code&gt;Alias&lt;/code&gt; toggle in the &lt;code&gt;Route Traffic to&lt;/code&gt; section and select &lt;code&gt;Alias to Application and Classic Load Balancer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgMF7Zaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7912vrpzimw9o636w5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgMF7Zaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7912vrpzimw9o636w5p.png" alt="aws-route-53-entry-for-load-balancer" width="349" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select your zone i.e. &lt;code&gt;us-west-1&lt;/code&gt; and your load balancer will automatically appear, select and create the record.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-sub-path-to-your-wordpress-posts"&gt;
  &lt;/a&gt;
  Add sub path to your wordpress posts
&lt;/h2&gt;

&lt;p&gt;Change your site name and url, add &lt;code&gt;/blog&lt;/code&gt; at the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1drwakXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1x4xeizygv6a7sqzljl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1drwakXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1x4xeizygv6a7sqzljl.png" alt="Change wordpress site name" width="596" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change permanent links by going into &lt;code&gt;Settings &amp;gt; Permalinks&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--962EXHcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1vndbhmxxpeyoukq1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--962EXHcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1vndbhmxxpeyoukq1x.png" alt="Change wordpress permalink" width="577" height="59"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;and that's it 🥳&lt;/p&gt;

&lt;p&gt;Your main website is running on a separate instance which could be static site, reactjs, nextjs or anything you want it to be and when you open &lt;code&gt;/blog&lt;/code&gt; your wordpress site will load.&lt;/p&gt;

&lt;p&gt;That will make your marketing team lives much easier regarding posting blogs, updates and sharing them on social media and other sites with easy SEO via wordpress plugins like &lt;strong&gt;yoast seo&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>wordpress</category>
      <category>nextjs</category>
      <category>devops</category>
    </item>
    <item>
      <title>How a hacker, a hustler, and a designer made RSS feeds cool</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 18 Jan 2022 21:05:29 +0000</pubDate>
      <link>https://dev.to/linearb/how-a-hacker-a-hustler-and-a-designer-made-rss-feeds-cool-1p13</link>
      <guid>https://dev.to/linearb/how-a-hacker-a-hustler-and-a-designer-made-rss-feeds-cool-1p13</guid>
      <description>&lt;p&gt;Building a platform that 100,000 devs use every day is no accident, but it can happen (almost) overnight. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://daily.dev/"&gt;Daily.Dev&lt;/a&gt; is the fastest growing online community for developers to stay updated on the hottest developer news, and their mission is to build the home page that every developer deserves.&lt;/p&gt;

&lt;p&gt;It pulls together and rewards dev-focused content from 400 sources – letting its users vote on which ones they find the most useful, the most interesting or the most entertaining.&lt;/p&gt;

&lt;p&gt;Co-founders Nimrod Kramer and Ido Shamun sit down with me to discuss their mission, the trick to building something that grows itself and why they chose to create a platform that actually makes RSS feeds cool!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/2lgAQ3EbDtd3rb86M50v4u" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building the homepage every dev deserves&lt;/li&gt;
&lt;li&gt;Why RSS feeds are still relevant&lt;/li&gt;
&lt;li&gt;The importance of curating dev-focused content&lt;/li&gt;
&lt;li&gt;How to achieve explosive community growth&lt;/li&gt;
&lt;li&gt;Why Nimrod &amp;amp; Ido are excited about INTERACT&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is inspired by &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Asj0_HA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5o5jcxrgw6ecv2xzavu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Asj0_HA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5o5jcxrgw6ecv2xzavu.png" alt="Our Favorite Podcasts" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>techtalks</category>
      <category>webdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>Pragmatic Functional Programming in JavaScript</title>
      <author>Caleb Weeks</author>
      <pubDate>Tue, 18 Jan 2022 21:03:17 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/pragmatic-functional-programming-in-javascript-2lll</link>
      <guid>https://dev.to/sethcalebweeks/pragmatic-functional-programming-in-javascript-2lll</guid>
      <description>&lt;p&gt;If you have been following along with my recent posts, it is no surprise that I am an avid fan of functional programming. I &lt;a href="https://dev.to/sethcalebweeks/advent-of-code-1-in-javascript-haskell-24in"&gt;attempted to solve the Advent of Code 2021&lt;/a&gt; problems using both Haskell and JavaScript to find an idiomatic functional solution. Unfortunately, I &lt;a href="https://dev.to/sethcalebweeks/lessons-learned-from-aoc-2021-2b3b"&gt;learned along the way&lt;/a&gt; that certain approaches and techniques are not practical in JavaScript. This led me to the conclusion that functional programming has different flavors, and it is important to find the right blend for your language of choice.&lt;/p&gt;

&lt;p&gt;JavaScript is the language I use the most (whether by choice or not), and fortunately it supports functional programming fairly well. I think the bare minimum requirement needed for a language to claim to support functional programming is ergonomic support for higher order functions. (First-class functions are a requirement for higher order functions). What I mean by ergonomic support is that it has to feel natural, not gimmicky. Higher order functions work very well in JavaScript, particularly with ES6 arrow functions. &lt;/p&gt;

&lt;p&gt;The lack of certain features such as static types (in particular algebraic data types), pattern matching, or immutable data structures limits the techniques we can use without sacrificing ergonomics, but fortunately, you can get pretty far without these features.&lt;/p&gt;

&lt;p&gt;I came across two resources recently which have helped me think through pragmatic functional programming in JavaScript. The first is &lt;a href="https://youtu.be/3n17wHe5wEw"&gt;this talk&lt;/a&gt; by Richard Feldman that does a great job of explaining the why of functional programming. The second is &lt;a href="https://github.com/getify/Functional-Light-JS"&gt;this book&lt;/a&gt; by Kyle Simpson which proposes a flavor of functional programming that is practical in JavaScript. There are certain areas where my opinions differ from Kyle's, but this book introduces pragmatic functional programming from first principals. Also check out the &lt;a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/"&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Learning functional programming and figuring out how to use it practically has been a very long journey, and I think many people have felt the same frustrations that I did while learning. Although the functional programming paradigm is gaining momentum, practical resources get drowned out in the noise of both dissenters and people just riding the hype train. This is the start of a series where we will try to make sense of the plethora of information and distill it into actionable conclusions.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Todo List App and a Color Box Maker | Day 13 &amp; 14</title>
      <author>Web.Developer.io</author>
      <pubDate>Tue, 18 Jan 2022 19:45:25 +0000</pubDate>
      <link>https://dev.to/developerioweb/todo-list-app-and-a-color-box-maker-day-13-14-551g</link>
      <guid>https://dev.to/developerioweb/todo-list-app-and-a-color-box-maker-day-13-14-551g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-made-2-react-app"&gt;
  &lt;/a&gt;
  I have made 2 React App
&lt;/h3&gt;

&lt;p&gt;1) &lt;strong&gt;Todo List&lt;/strong&gt;&lt;br&gt;
2) &lt;strong&gt;Color Box Maker&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-do-list"&gt;
  &lt;/a&gt;
  To Do List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7aPbyNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ys7gdyc22psv4l1u5xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7aPbyNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ys7gdyc22psv4l1u5xp.png" alt="To Do list" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;App - this component should render the TodoList component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TodoList - this component should render the NewTodoForm component and should render the list of Todo components. Place your state that contains all of the todos in this component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NewTodoForm - this component should render a form with one text input for the task to be created. When this form is submitted, a new Todo component should be created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Todo- this component should display a div with the task of the todo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-each-todo-component-there-should-also-be-a-button-with-the-text-x-that-when-clicked-removes-the-todo"&gt;
  &lt;/a&gt;
  For each Todo component, there should also be a button with the text “X” that when clicked, removes the todo.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#each-todo-component-should-also-display-a-button-with-the-text-edit-that-when-clicked-displays-a-form-with-the-task-of-the-todo-as-an-input-and-a-button-to-submit-the-form-when-the-form-is-submitted-the-task-of-the-text-should-be-updated-and-the-form-should-be-hidden"&gt;
  &lt;/a&gt;
  Each Todo component should also display a button with the text “edit” that when clicked, displays a form with the task of the todo as an input and a button to submit the form. When the form is submitted, the task of the text should be updated and the form should be hidden.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Todo-list"&gt;https://github.com/Developer-io-web/Todo-list&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorbox-maker"&gt;
  &lt;/a&gt;
  Color-Box Maker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Color-Box-Maker"&gt;https://github.com/Developer-io-web/Color-Box-Maker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;App - this component should render the BoxList component.&lt;/li&gt;
&lt;li&gt;BoxList - Place your state that contains all of the boxes here. This component should render all of the Box components along with the NewBoxForm component&lt;/li&gt;
&lt;li&gt;Box- this component should display a div with a background color, width and height based on the props passed to it.
NewBoxForm - this component should render a form that when submitted, creates a new Box. You should be able to specify the Box’s width, height, and background color. When the form is submitted, clear the input values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-each-box-component-is-displayed-add-a-button-with-the-text-of-of-x-next-to-each-box-when-this-button-is-clicked-remove-that-specific-box-this-will-require-you-to-pass-a-function-down-as-props-the-button-should-not-be-a-seperate-component-it-should-be-included-in-the-box-component"&gt;
  &lt;/a&gt;
  When each Box component is displayed, add a button with the text of of “X” next to each Box. When this button is clicked, remove that specific box. This will require you to pass a function down as props - the button should not be a seperate component, it should be included in the Box component.
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is the Jamstack in 2022?</title>
      <author>Brian Rinaldi</author>
      <pubDate>Tue, 18 Jan 2022 19:26:14 +0000</pubDate>
      <link>https://dev.to/remotesynth/what-is-the-jamstack-in-2022-134</link>
      <guid>https://dev.to/remotesynth/what-is-the-jamstack-in-2022-134</guid>
      <description>&lt;p&gt;2021 was a year of big changes in the Jamstack. &lt;a href="https://remotesynthesis.com/blog/jamstack-in-2021"&gt;A year ago&lt;/a&gt;, we were struggling a bit with how to define Jamstack in a world that included the ability to use SSR in a Jamstack application. At the time, this was unique to Next.js, but today you'll find this supported in Nuxt.js 3, Gatsby 4 and even Eleventy via the Eleventy Serverless plugin. Not just that, but we've now added in multiple other kinds of rendering such that I wrote an extensive article clarifying the &lt;a href="https://bejamas.io/blog/understanding-rendering-in-the-jamstack/"&gt;various types of Jamstack rendering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2021 also included the release of some new tools that gained a great deal of popularity very quickly and introduced a new concept, the &lt;a href="https://jasonformat.com/islands-architecture/"&gt;islands architecture&lt;/a&gt;, to the Jamstack. Both &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;, a completely new SSG, and &lt;a href="https://slinkity.dev/"&gt;Slinkity&lt;/a&gt;, which is built on top of Eleventy, offered the ability to use frameworks like React, but limit JavaScript to only where it is needed.&lt;/p&gt;

&lt;p&gt;So, suffice it to say, Jamstack got more popular but it also arguably got more complicated. We probably came no closer to clarity on what the Jamstack is in 2021. And this has led to some thoughts on how I see Jamstack in 2022.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're into Jamstack, which I'm guessing you are because you are reading this, you'll definitely want to join me (virtually) at &lt;a href="https://thejam.dev"&gt;TheJam.dev&lt;/a&gt; on January 26-27. It's 2 days of amazing speakers all about Jamstack and it's completely FREE!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whered-the-simple-go"&gt;
  &lt;/a&gt;
  Where'd the Simple Go?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;For any technology, the hardest part is not establishing simplicity, but protecting it over time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matt Biilmann, CEO of Netlify&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got into Jamstack development – well really static site development – because it felt like a return to simpler days of developing for the web. Sure, SSGs couldn't handle every kind of site, but that was ok because they handled a lot of types of sites. Plus, they were fun and easy to use for many developers in a way that Wordpress or its alternatives were not.&lt;/p&gt;

&lt;p&gt;Over time, we added more complexity because we liked building with Jamstack and wanted it to be able to build more sites with it – sites that pure static couldn't handle. In one sense, that's been great. Only a few years ago, it was easy to think of types of sites that couldn't be built with Jamstack. That's no longer true.&lt;/p&gt;

&lt;p&gt;But it also has come with some tradeoffs. Getting started with Jamstack was never incredibly easy given that it isn't prescriptive and there are so many options, but once you got past that, the experience used to be much simpler in my opinion. Today, I feel that the learning curve is becoming much steeper. Plus, the result isn't always better than the alternative, with large JavaScript bundles weighing down the apps performance.&lt;/p&gt;

&lt;p&gt;This has led to "competition" (so to speak) appealing to developers on territory that Jamstack used to own. Frameworks like Remix or concepts like &lt;a href="https://cfe.dev/sessions/moar2021-functional-web-apps/"&gt;functional web apps&lt;/a&gt; often specifically target Jamstack for its growing complexity. "Why fight with rendering options and long builds when pure SSR using serverless is easier to build and offers similar performance?" they argue. Plus, we can run on platforms like Netlify and Vercel just the same.&lt;/p&gt;

&lt;p&gt;While it's difficult to admit for someone like me who has been a Jamstack advocate, but I think they have a point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2022-is-about-rediscovering-the-simple"&gt;
  &lt;/a&gt;
  2022 is About Rediscovering the Simple
&lt;/h2&gt;


&lt;blockquote&gt;
&lt;p&gt;One of the quirks of growing older as a developer in my experience is that, while I've learned to appreciate complexity in people a lot more, I've also learned to appreciate complexity in code a lot less.&lt;/p&gt;— Brian Rinaldi (&lt;a class="mentioned-user" href="https://dev.to/remotesynth"&gt;@remotesynth&lt;/a&gt;) &lt;a href="https://twitter.com/remotesynth/status/1482032277005742080?ref_src=twsrc%5Etfw"&gt;January 14, 2022&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;I feel like, if the concept of Jamstack is to continue to be valuable in 2022 as differentiated from just plain web development, it needs to rediscover what made it appealing – it needs to bring back the simplicity. The good news is that I do not believe that means going back to plain old static sites using traditional SSGs.&lt;/p&gt;

&lt;p&gt;This is my list of requirements that I think a modern SSG needs to have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A way to call APIs for data at build time.&lt;/li&gt;
&lt;li&gt;The ability to modularize my code, whether that be components or partials.&lt;/li&gt;
&lt;li&gt;Some tools to make building frontend interactivity easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To me, everything else is a bit superfluous and adds complexity. Is the ability to build and deploy an edge function within my sites application code cool? Heck, yes. Is it a necessary feature in a Jamstack site builder? No.&lt;/p&gt;

&lt;p&gt;It's worth remembering what all this added rendering complexity is actually doing for us and that's just handling the compiling and deployment of our application API. SSR in a Jamstack framework is just deploying parts of your code to serverless functions for you. I could actually already accomplish this to a large degree without the framework depending on the platform that I am deploying my application to. For instance, both Netlify and Cloudflare (and I am sure others) will deploy serverless functions for your API for you automatically if they are placed in a specific folder.&lt;/p&gt;

&lt;p&gt;I think we're already seeing some movement in this direction. For example, both Astro and 11ty seem to be geared towards specifically accomplishing the core requirements without the extras (I'm curious if Astro sticks to that given &lt;a href="https://astro.build/blog/the-astro-technology-company/"&gt;recent announcements&lt;/a&gt; or moves more in the direction of Next.js). The growing popularity of both tools seems to indicate to me that this has some value and resonance.&lt;/p&gt;

&lt;p&gt;But both tools also emphasize something that can make Jamstack &lt;em&gt;better&lt;/em&gt; than other methods in the way we always claimed it was better but &lt;a href="https://almanac.httparchive.org/en/2021/jamstack#performance-score"&gt;didn't always live up to&lt;/a&gt;. That's because both aim to deliver less JavaScript, meaning that the site they deliver should perform better than a framework-heavy alternative both because most of the content is prerendered and because they don't inlude all the extra baggage of a JavaScript framework whenever it isn't necessary. I'm hopeful that it is a path other tools pursue as well.&lt;/p&gt;

&lt;p&gt;The original goal of Jamstack was to deliver a better experience to end users (faster and more secure) while offering a better experience to developers (easy to build and maintain). Go &lt;a href="http://web.archive.org/web/20160603092304/http://jamstack.org/"&gt;check out the original manifesto&lt;/a&gt;. Tons of new (and undeniably cool) advances in cloud computing and application development have seemingly led us down a path towards ever increasing complexity.&lt;/p&gt;

&lt;p&gt;All of this complexity added value but complexity also came at a cost. I'm not advocating removing features, and, to be honest, I am still thinking through how this problem can be solved. But I think it can start refocusing on the core tenets of what Jamstack means – it doesn't have to be the solution to every problem but instead a solution that solve a set of particular problems, better. Maybe Jamstack needs to be more opinionated about the experience of building a Jamstack site and about the result. In my view, 2022 could be about rediscovering the simplicity of Jamstack's developer experience and the differentiation of its output or Jamstack could simply blend into web development, not really offering a clear alternative to non-Jamstack options. I personally think the concept still has a ton of value.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>ES6: JavaScript for...of statement</title>
      <author>Naftali Murgor</author>
      <pubDate>Tue, 18 Jan 2022 19:24:39 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/es6-javascript-forof-statement-2caa</link>
      <guid>https://dev.to/naftalimurgor/es6-javascript-forof-statement-2caa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This tutorial will learn about &lt;code&gt;for-of&lt;/code&gt; introduced in  &lt;code&gt;ES6&lt;/code&gt; version of JavaScript.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; statement is used for iterating over arrays, maps or sets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looping-over-an-array"&gt;
  &lt;/a&gt;
  Looping over an array
&lt;/h2&gt;

&lt;p&gt;Example in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// looping through&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with fruit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-string"&gt;
  &lt;/a&gt;
  Looping over a string
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt; can also be used to loop over contents of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Happy new year!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// H a p p y n e w y e a r !&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-set"&gt;
  &lt;/a&gt;
  Looping over a Set
&lt;/h2&gt;

&lt;p&gt;A set is a collection of unique values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a, b, c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-map"&gt;
  &lt;/a&gt;
  Looping over a map
&lt;/h2&gt;

&lt;p&gt;A map is key-value pair, where key can be of any type. In JavaScript it's common to use object literals as maps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael Myers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// made up&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// or a cleaner way:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael Myers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt; introduces a cleaner way of looping over arrays, sets, strings and maps.&lt;/p&gt;




&lt;p&gt;Read more about 👉 &lt;a href="https://dev.toe"&gt;Map objects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Unofficial guide to Slack literacy: communication in a remote-first world</title>
      <author>Alyss 💜</author>
      <pubDate>Tue, 18 Jan 2022 19:19:40 +0000</pubDate>
      <link>https://dev.to/preciselyalyss/unofficial-guide-to-slack-literacy-navigating-communication-in-a-remote-first-world-dbd</link>
      <guid>https://dev.to/preciselyalyss/unofficial-guide-to-slack-literacy-navigating-communication-in-a-remote-first-world-dbd</guid>
      <description>&lt;p&gt;Before landing my first job in tech, I’d already been well acquainted with IRC, ventrilo, and message boards. With a career came Campfire (Basecamp) and then Slack launched in August 2013. Slack, for the purposes of this post, is used as a proxy for asynchronous chat platforms/tooling. Such software has become ubiquitous to the daily toil for knowledge workers and expands into professional, personal, and hobby communities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-rules-of-etiquette"&gt;
  &lt;/a&gt;
  Basic rules of etiquette
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Unless you’ve formally discussed the use of &lt;code&gt;@channel&lt;/code&gt; or &lt;code&gt;@here&lt;/code&gt; on your team and there’s a shared understanding of when to use it, err on the side of never using it. I’ve personally found this notification used more frequently among sales teams or within groups where most users do not have a desktop app installed and access through a browser instead.&lt;/li&gt;
&lt;li&gt;When sending a direct or private message, send a single message with your request. (e.g. Hello! Can you share any updates on the Apollo project?) There are individuals who may prefer an opening salutation or some kind of friendly watercooler banter but the point of async communication is you don’t have to sit around waiting to have a conversation to get a question answered. If you’re working across time zones, you can also consider &lt;a href="https://slack.com/help/articles/1500012915082-Schedule-messages-to-send-later"&gt;scheduling a message&lt;/a&gt; to send.&lt;/li&gt;
&lt;li&gt;Set your own boundaries. Slack has a &lt;a href="https://slack.com/help/articles/214908388-Pause-notifications-with-Do-Not-Disturb"&gt;notification schedule feature&lt;/a&gt; and Do Not Disturb (when you may want to focus or go on vacation).
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjPz98HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is92ct9u3h2zjg7kvvqr.png" alt="notification schedule in slack profile settings" width="556" height="266"&gt;
&lt;/li&gt;
&lt;li&gt;Finally: Set a profile photo, pronouns, and name pronunciation*.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*Enterprise slack plans have more configurable profile fields, like name pronunciation. This may not be available in your slack experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermediate-skills"&gt;
  &lt;/a&gt;
  Intermediate skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mentions"&gt;
  &lt;/a&gt;
  Mentions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If an individual isn’t in the channel or private message, using their tag or handle will not notify them. For a channel in slack, a message will appear asking if you’d like to invite or notify them (or do nothing).&lt;/li&gt;
&lt;li&gt;@ mentions can be disruptive. If you’d like to mention a person without notifying them, placing their name or handle in backtick/code blocks (e.g. &lt;code&gt;@preciselyalyss&lt;/code&gt;). You can do this when you aren’t sure if they are in a channel but still want to reduce noise/distractions.&lt;/li&gt;
&lt;li&gt;If you are interacting via a private message, you don’t need to tag/@ mention participants. They will be notified by default. In a private group DM, you can further configure your notification settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#channels"&gt;
  &lt;/a&gt;
  Channels
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Read descriptions and pinned messages for a channel if you aren’t sure how to interact. Rules of engagement may be documented or the best way to engage with a particular team. &lt;/li&gt;
&lt;li&gt;Organize slack channels with the sections feature&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reactji-emoji"&gt;
  &lt;/a&gt;
  Reactji + Emoji
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reactji are highly cultural. We have over 10k custom slack emoji at GitHub. Sometimes these gain more traction, like Atlassian popularized chompy when HipChat shipped with the character in the default emoji set. Chompy was used when posting that lunch was available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bC1lhmOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eg2tgu7p1ab9wdwr4rx3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bC1lhmOy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eg2tgu7p1ab9wdwr4rx3.gif" alt="cartoon character chewing" width="480" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most platforms allow you to configure a default skin tone of the core emoji set. Please think about this. Even leaving the default to yellow should be a deliberate choice, in my opinion. More reading &lt;a href="https://firstmonday.org/ojs/index.php/fm/article/view/10060/8048"&gt;here&lt;/a&gt; and &lt;a href="https://arxiv.org/pdf/2105.05887.pdf"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#threads"&gt;
  &lt;/a&gt;
  Threads
&lt;/h3&gt;

&lt;p&gt;There are no universally agreed rules that I’ve observed on Threads yet. They are still fairly new feature to several platforms. It can help with multi-threaded conversations but does change the notification location or reduce visibility in some cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced"&gt;
  &lt;/a&gt;
  Advanced
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#writing-styles"&gt;
  &lt;/a&gt;
  Writing styles
&lt;/h3&gt;

&lt;p&gt;Chat is a highly informal medium and written communication can be fraught with opportunities to miscommunicate and misunderstand. It is possible to reduce the risks but never fully mitigate them. If you're unsure of the tone something was written in, ask.&lt;/p&gt;

&lt;p&gt;Some rules I follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there’s a context-loaded word, like DevOps, I try to define what usage I’m intending when discussing in chat.&lt;/li&gt;
&lt;li&gt;Incorporating &lt;a href="https://fourminutebooks.com/nonviolent-communication-summary/"&gt;non-violent communication&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Explicit requests vs implied. “Can you do x?” instead of “X needs to get done”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider cultural-specific communication&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do I have teammates that wouldn’t understand this reference?&lt;/li&gt;
&lt;li&gt;Is this a necessary reference if it does exclude people who don’t understand and should I explain it?&lt;/li&gt;
&lt;li&gt;Is there potentially ambiguous or inflammatory meaning? (e.g. Gifs or images referencing Winnie the Pooh when speaking with China-based colleagues could have an unintended impact)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re interested in further improving your remote-first skills, &lt;a href="https://yougotthis.io/talks/"&gt;You Got This&lt;/a&gt; is a community event series with even more educational content to dive into.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Multiple GitHub accounts on one laptop</title>
      <author>Simon Osipov</author>
      <pubDate>Tue, 18 Jan 2022 18:49:51 +0000</pubDate>
      <link>https://dev.to/osipovsimon/multiple-github-accounts-on-one-laptop-2dmg</link>
      <guid>https://dev.to/osipovsimon/multiple-github-accounts-on-one-laptop-2dmg</guid>
      <description>&lt;p&gt;Imagine the next situation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have only one laptop&lt;/li&gt;
&lt;li&gt;You have your personal GitHub account&lt;/li&gt;
&lt;li&gt;Your employer stores code on GitHub as well&lt;/li&gt;
&lt;li&gt;You need to commit your personal code to your personal repositories but also work code to the employer`s repositories.&lt;/li&gt;
&lt;li&gt;You can`t do this from your personal account but do not want to create an additional one (with corporate email)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What to do in this situation? There is a way, how you can configure your laptop to commit to work repositories with work credentials, and to personal one with your personal one.&lt;/p&gt;

&lt;p&gt;This solution is based on 2 aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;correcting SSH config&lt;/li&gt;
&lt;li&gt;git URL re-writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main advantage of this approach is that it doesn't require any additional work to get it right. You will not need to change remote URLs or remember to clone things differently. The second part ( the URL rewriting) will take care of it.&lt;/p&gt;

&lt;p&gt;First of all, let's correct our .ssh config. Assuming you have 2 ssh keys, your personal (&lt;code&gt;github_personal&lt;/code&gt;) and your work (&lt;code&gt;github_work&lt;/code&gt;). How to create ssh keys you can read in the &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;GitHub docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/github_personal

# Work GitHub
Host github-work
  HostName github.com
  User git
  IdentityFile ~/.ssh/github_work

Host *
  AddKeysToAgent yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both this configs have same user and domain, but we will take care about it later. Next - global git config.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we need to add our default name and email (the one we used in ssh creation for our personal account)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
    name = My Name
    email = personal@personal.email

[includeIf "gitdir:~/path/work_dir/"]
    path = ~/path/work_dir/.gitconfig

[url "github-work:work-github-org-name/"]
    insteadOf = git@github.com:work-github-org-name/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here? First, set our default name and email. Second, we point to use local &lt;code&gt;.gitconfig&lt;/code&gt; file for all repositories located by mask &lt;code&gt;~/path/work_dir/&lt;/code&gt;. And the last, replace &lt;code&gt;github.com&lt;/code&gt; (default account for Github) with the profile we set under &lt;code&gt;github-work&lt;/code&gt; in &lt;code&gt;.ssh/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last part is modification of local &lt;code&gt;.gitconfig&lt;/code&gt; for all our working repositories:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/path/work_dir/.gitconfig&lt;/code&gt;&lt;br&gt;
It is easy - just replace your email with your corporate one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
    email = work@work.email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all! As long as you keep all your work repos under &lt;code&gt;~/path/work_dir/&lt;/code&gt; and personal stuff elsewhere, git will use the correct SSH key when doing pulls/clones/pushes to the server, and it will also attach the correct email address to all of your commits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to check?&lt;/strong&gt; Clone repository via SSH, cd to that folder and  execute &lt;code&gt;git config --get user.email&lt;/code&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>bash</category>
    </item>
    <item>
      <title>Top AutoHotkey scripts to use Windows like a pro</title>
      <author>Gourav</author>
      <pubDate>Tue, 18 Jan 2022 18:48:35 +0000</pubDate>
      <link>https://dev.to/gorvgoyl/top-autohotkey-scripts-to-use-windows-like-a-pro-3mm4</link>
      <guid>https://dev.to/gorvgoyl/top-autohotkey-scripts-to-use-windows-like-a-pro-3mm4</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on my &lt;a href="https://gourav.io/blog/autohotkey-scripts-windows"&gt;Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-autohotkey"&gt;
  &lt;/a&gt;
  What's AutoHotkey
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.autohotkey.com"&gt;AHK&lt;/a&gt; is an &lt;a href="https://github.com/Lexikos/AutoHotkey_L"&gt;open-source&lt;/a&gt; scripting software for Windows that is used to automate repetitive tasks, remap keys, build small utility tools, etc. You create scripts that would do the tasks for you. It's an extremely lightweight app (~ 2MB RAM) and works on old and newer versions of windows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbdiugL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/autohotkey_ram-ZEZOMYPE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbdiugL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/autohotkey_ram-ZEZOMYPE.png" alt="" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-set-up-and-run"&gt;
  &lt;/a&gt;
  How to set up and run
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download and install main program (one-time step) &lt;a href="https://www.autohotkey.com/"&gt;https://www.autohotkey.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download a &lt;a href="#useful-scripts"&gt;script (&lt;code&gt;.ahk&lt;/code&gt;)&lt;/a&gt; or copy-paste script content in a text file and then rename it with &lt;code&gt;.ahk&lt;/code&gt; extension, e.g., &lt;code&gt;my-script.ahk&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To run the script: Right-click -&amp;gt; &lt;code&gt;Run script&lt;/code&gt;.
You can also run scripts by double-click or do right-click -&amp;gt;&lt;code&gt;Open with&lt;/code&gt; -&amp;gt; &lt;code&gt;AutoHotkey&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Bonus: you can right-click and &lt;code&gt;Compile script&lt;/code&gt; to make it a standalone &lt;code&gt;.exe&lt;/code&gt; program that would run without installing AutoHotkey software on a computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#autorun-script-at-startup"&gt;
  &lt;/a&gt;
  Autorun script at startup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open startup folder: open &lt;code&gt;Run&lt;/code&gt; window by &lt;code&gt;Win+R&lt;/code&gt; and then write &lt;code&gt;shell:startup&lt;/code&gt; and enter.&lt;/li&gt;
&lt;li&gt;It'll open explorer at something like this path: &lt;code&gt;C:\Users\{username}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy a script (&lt;code&gt;*.ahk&lt;/code&gt;) -&amp;gt; go to that &lt;code&gt;Startup&lt;/code&gt; folder -&amp;gt; right-click and select &lt;code&gt;Paste shortcut&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-scripts"&gt;
  &lt;/a&gt;
  Useful Scripts
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see all scripts here: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows"&gt;https://github.com/GorvGoyl/Autohotkey-Scripts-Windows&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#look-up-selected-text"&gt;
  &lt;/a&gt;
  Look up selected text
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/look_up.ahk"&gt;look_up.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;alt+g&lt;/code&gt; to open selected text in the browser and do a google search or visit the site (if it's url). It's one of the most frequent scripts I use on a regular basis. Especially to quickly google some error from the terminal when programming. Works everywhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assign a different shortcut:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To assign a different shortcut, replace &lt;code&gt;!g&lt;/code&gt; (here &lt;code&gt;!&lt;/code&gt; means &lt;code&gt;Alt&lt;/code&gt; so &lt;code&gt;!g&lt;/code&gt; = &lt;code&gt;Alt+G&lt;/code&gt;) in the script with your desired &lt;a href="https://www.autohotkey.com/docs/Hotkeys.htm#Symbols"&gt;key combo&lt;/a&gt; and run again. All running scripts can be found in the Windows tray menu.&lt;/p&gt;

&lt;p&gt;To use a different browser instead of Microsoft Edge, Add its path instead of &lt;code&gt;C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe&lt;/code&gt; in the script.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-win-key-as-mouse-leftclick"&gt;
  &lt;/a&gt;
  Use Win key as mouse left-click
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/mouseless.ahk"&gt;mouseless.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This little script has been a game-changer for me. I don't like to carry a mouse around, and my HP laptop touchpad isn't much responsive, so I needed a better alternative to performing left-click. I realized I don't use the left &lt;code&gt;Win&lt;/code&gt; key as much, so I modified its action to do left-click instead (using left-thumb). Once you get the hang of it, I assure you you'll do clicks with godspeed.&lt;/p&gt;

&lt;p&gt;I still needed the &lt;code&gt;Win&lt;/code&gt; key, so I replaced the rarely used &lt;code&gt;right Ctrl&lt;/code&gt; key as &lt;code&gt;Win&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;To sum-up:&lt;br&gt;&lt;br&gt;
Win → Mouse Left-click&lt;br&gt;&lt;br&gt;
Right-Ctrl → Win&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-notification-on-low-battery-or-when-fully-charged"&gt;
  &lt;/a&gt;
  Show notification on low battery or when fully charged
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/battery_alert.ahk"&gt;battery_alert.ahk&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keeping your laptop constantly plugged in shortens the battery life!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the battery is below 30% and the charger is not plugged in, it'll show a silent notification on the bottom-right corner to plug in the charger. Notification will pop up every few minutes until you take action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pj_Vs-3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/battery_alert_low-WUVTAXSK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pj_Vs-3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/battery_alert_low-WUVTAXSK.png" alt="" width="565" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, if the laptop is charged and the charger is still plugged in, it'll show a silent notification on the bottom-right corner to remove the charger. Notification will pop up every few minutes until you take action.&lt;/p&gt;

&lt;p&gt;![&lt;a href="https://gourav.io/img/blog/autohotkey-scripts-windows/battery_alert_charged-2PTA3EUI.png"&gt;https://gourav.io/img/blog/autohotkey-scripts-windows/battery_alert_charged-2PTA3EUI.png&lt;/a&gt;]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-popup-to-transform-text"&gt;
  &lt;/a&gt;
  Show popup to transform text
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/ctrl_caps_as_case_change.ahk"&gt;ctrl_caps_as_case_change.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ctrl+capslock&lt;/code&gt; to invoke a handy transform text menu on selected text e.g., convert text to UPPERCASE/lowercase/Title Case etc. Press &lt;code&gt;esc&lt;/code&gt; to close the menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3wxMkSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/transform_text_menu-4XYAPFYU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3wxMkSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/transform_text_menu-4XYAPFYU.png" alt="" width="644" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-windows-switcher-with-capslock-key"&gt;
  &lt;/a&gt;
  Show Windows switcher with capslock key
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/caps_as_window_switcher.ahk"&gt;caps_as_window_switcher.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't use &lt;code&gt;capslock&lt;/code&gt; key much, you could replace it to show Windows switcher (e.g., Alt + Tab) instead. You'd still be able to turn on/off capslock with &lt;code&gt;shift+capslock&lt;/code&gt; combo.&lt;/p&gt;

&lt;p&gt;To sum-up:&lt;br&gt;&lt;br&gt;
Capslock → Alt+Tab&lt;br&gt;&lt;br&gt;
Shift+Capslock → Capslock&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-new-text-file-here"&gt;
  &lt;/a&gt;
  Create new text file here
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/create_file_here.ahk"&gt;create_file_here.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows has a shortcut (&lt;code&gt;ctrl+shft+n&lt;/code&gt;) to create an empty folder at the current location but not for creating a new file. So, I made a script to do exactly that. Use &lt;code&gt;ctrl+shift+m&lt;/code&gt; to create an empty text file (NewFile.txt) at the current folder location in file explorer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-powershell-here"&gt;
  &lt;/a&gt;
  Open PowerShell here
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/open_shell_here.ahk"&gt;open_shell_here.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ctrl+shift+p&lt;/code&gt; to open PowerShell with the current folder path in file explorer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline-calculator"&gt;
  &lt;/a&gt;
  In-line calculator
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/in-line-calculator/in-line%20calculator.ahk"&gt;in-line calculator.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Activate the calculator by &lt;code&gt;=&lt;/code&gt; then write your equation and finally type &lt;code&gt;=&lt;/code&gt; again to get the calculation result. Works everywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2EP2VAd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/in_line_calculator-FMSVB6T7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2EP2VAd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/in_line_calculator-FMSVB6T7.gif" alt="" width="399" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;#&lt;/code&gt; key at the end instead of &lt;code&gt;=&lt;/code&gt; to keep the equation and the result (output: &lt;code&gt;7*5+5 = 40&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;See more info in &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/in-line-calculator/readme.md"&gt;README file&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drag-window-without-activating-it"&gt;
  &lt;/a&gt;
  Drag window without activating it
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/move-inactive-window-alt-leftclick/MoveInactiveWin.ahk"&gt;MoveInactiveWin.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hold &lt;code&gt;alt+right-click&lt;/code&gt; to move a window without activating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uk8-PI2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/MoveInactiveWinScreen-G52KOQFK.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uk8-PI2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gourav.io/img/blog/autohotkey-scripts-windows/MoveInactiveWinScreen-G52KOQFK.gif" alt="" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-zoom-when-raw-ctrlscroll-endraw-in-the-browser"&gt;
  &lt;/a&gt;
  Disable zoom when &lt;code&gt;ctrl+scroll&lt;/code&gt; in the browser
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/disable_scroll_zoom_edge.ahk"&gt;disable_scroll_zoom_edge.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Disable zoom when doing ctrl+scroll in Edge browser. To use different application, replace &lt;code&gt;Microsoft Edge&lt;/code&gt; with other application title in the ahk script.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-corner"&gt;
  &lt;/a&gt;
  Hot corner
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/left_edge_as_window_switcher.ahk"&gt;left_edge_as_window_switcher.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trigger &lt;code&gt;Alt+Tab&lt;/code&gt; (Window switcher) when the mouse is on the left edge of the screen. Keep the mouse there to tab through the other windows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pin-window-at-the-top"&gt;
  &lt;/a&gt;
  Pin window at the top
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/pin_window.ahk"&gt;pin_window.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ctrl+alt+p&lt;/code&gt; to pin/unpin current window at top. Super handy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#win-key-to-show-taskbar"&gt;
  &lt;/a&gt;
  Win key to show taskbar
&lt;/h3&gt;

&lt;p&gt;script: &lt;a href="https://github.com/GorvGoyl/Autohotkey-Scripts-Windows/blob/master/win_key_to_show_taskbar.ahk"&gt;win_key_to_show_taskbar.ahk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It shows the taskbar only when the &lt;code&gt;Win&lt;/code&gt; key is pressed; otherwise, it stays hidden.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👋 Comment below which script did you like the most :)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thanks for reading. Connect with me on &lt;a href="https://twitter.com/GorvGoyl"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>7 tips for freelance software developers</title>
      <author>Naftali Murgor</author>
      <pubDate>Tue, 18 Jan 2022 18:42:54 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/7-tips-for-freelance-software-developers-4ol3</link>
      <guid>https://dev.to/naftalimurgor/7-tips-for-freelance-software-developers-4ol3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"What happens to us and what we do are as a result of a series of complex interconnected events that happened in our lives in the past." ~ anonymous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Freelancing is fun. You don’t have a boss, you can take breaks if you need. You can go for a hike in the middle of a hot Tuesday evening.&lt;/p&gt;

&lt;p&gt;I started as a freelance web developer in late 2018 and here are things I'd consider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-proper-pricing-model"&gt;
  &lt;/a&gt;
  1. Proper pricing model
&lt;/h3&gt;

&lt;p&gt;As a freelance developer, you get to decide how much your service/product costs depending on your set pricing model.&lt;br&gt;
I started out freelancing on Upwork, then the Fiverr platform before finally looking for clients locally.&lt;/p&gt;

&lt;p&gt;There’s is a common myth that while starting you could do work for free to get testimonials. I’d say approaching a potential client with an offer to do/sell a service for free raises eyebrows.&lt;br&gt;
Offering something at a cheaper rate is worse in the long run.&lt;/p&gt;

&lt;p&gt;My biggest mistake was the poor pricing of services. It hits you when you do more work for less pay and kills so much morale.&lt;/p&gt;

&lt;p&gt;Develop a good pricing model. Have you ever thought and wondered: “One common characteristic of poor quality commodities, electronics, computers is that they are very cheap.” Cheap implies poor quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-treating-freelancing-as-a-9-5-job"&gt;
  &lt;/a&gt;
  3. Treating freelancing as a 9 - 5 job
&lt;/h3&gt;

&lt;p&gt;I’ve worked a 9 - 5 job as Math/Computer teacher before pursuing web development and I’d say treating freelancing like a 9 - 5 job may be great but it leads to a “need-to-be-always-productive” mood.&lt;/p&gt;

&lt;p&gt;Breaks are good, short meaningful breaks are rewarding in the long run.&lt;br&gt;
It’s okay to be “unproductive” sometimes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-learning-to-say-yes"&gt;
  &lt;/a&gt;
  4. Learning to say “yes”
&lt;/h3&gt;

&lt;p&gt;Most developers striking out freelancers I think often get trapped in situations where they are to choose between saying “no” and end up saying “yes”.&lt;/p&gt;

&lt;p&gt;Here’s what happened to me in 2019: I received an offer to work on a website and the offer went like this:&lt;/p&gt;

&lt;p&gt;Client: Hey, we are launching our campaign this Saturday. I already bought a template to make the work easy for you. It should be ready in 72 hours or less as we have a tight deadline and the donation website should be live during the launch.&lt;/p&gt;

&lt;p&gt;My initial thought was to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accept the work and find another freelancer to do it.&lt;/li&gt;
&lt;li&gt;Politely decline due to tight deadline&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can guess what I did. (Read below)&lt;/p&gt;

&lt;p&gt;Learn to say “yes” and do what you have to do and “No” when you can’t help your client. Doing so reduces the time and money wasted for both you and your client.&lt;/p&gt;

&lt;p&gt;I took on the project and 6 hours later after analyzing the project I received another technical description for the project. Part of the description: “We shall be launching….Preferred technology: ASP.NET and MS Server” I haven't done any .NET my entire life, oh God.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-taking-regular-breaks"&gt;
  &lt;/a&gt;
  5. Taking regular breaks
&lt;/h3&gt;

&lt;p&gt;There’s always an innate desire to be productive 24 x 7. Taking breaks rejuvenates the body and the brain too. Take a week off, hours, or days whichever suits your schedule.&lt;/p&gt;

&lt;p&gt;Working long hours does not imply more work gets done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-time-management"&gt;
  &lt;/a&gt;
  6. Time management
&lt;/h3&gt;

&lt;p&gt;Managing time should be crucial. Meet deadlines whenever possible. I’d spend a lot of time on trivial things that drained energy so when the time to do the actual work came, I was already exhausted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-enough-sleep"&gt;
  &lt;/a&gt;
  7. Enough sleep
&lt;/h3&gt;

&lt;p&gt;Enough sleep is good. staying up until 3.00 am makes one feel productive but have you ever gone back to what you worked on up to 3.00 am 3 years ago or in the past. It’s terrible even though it sort of worked out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-proper-diet"&gt;
  &lt;/a&gt;
  8 . Proper Diet
&lt;/h3&gt;

&lt;p&gt;Skipping breakfast to get to work on a project might seem “efficient” but try resisting the urge and see how productive you can be after taking a “solid” breakfast. The same applies to other meals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-exercise"&gt;
  &lt;/a&gt;
  9. Exercise
&lt;/h3&gt;

&lt;p&gt;Take walks, hit the gym do other work that kicks up blood flow in the body. Exercise is crucial and good for our health.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-managing-finances"&gt;
  &lt;/a&gt;
  10. Managing finances.
&lt;/h3&gt;

&lt;p&gt;This portion is not about financial advice but here’s my one-liner about managing finances: “Money is a scarce resource we can’t afford to waste.” I’d make money and the rest was spend, spend, spend.&lt;/p&gt;

&lt;p&gt;Organize your finances, grocery money, etc. Keep some for medical emergencies and save up for a rainy day.&lt;/p&gt;




&lt;p&gt;Freelancing is essentially living within your means, resilience, and modesty.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learnig and Revising Js , Day 1</title>
      <author>PUSHAN VERMA </author>
      <pubDate>Tue, 18 Jan 2022 18:29:25 +0000</pubDate>
      <link>https://dev.to/pushanverma/learnig-and-revising-js-day-1-22kc</link>
      <guid>https://dev.to/pushanverma/learnig-and-revising-js-day-1-22kc</guid>
      <description>&lt;p&gt;Hi guys , just sharing what i have learnt , may be you will find all these informative, &lt;/p&gt;

&lt;p&gt;These are some basic concepts of javascript , I will be sharing everything that i'll be doing here , Like if you like the content , See a have a good day !!&lt;/p&gt;

&lt;p&gt;//👉 Objects is known to as "hashmap in java" and in "python it is called as dictionary"&lt;/p&gt;

&lt;p&gt;// object is a group of key , value pair&lt;/p&gt;

&lt;p&gt;//key: value --&amp;gt; propert&lt;br&gt;
//key: function --&amp;gt; method&lt;/p&gt;

&lt;p&gt;// key can be string/integr and same ways value also&lt;/p&gt;

&lt;p&gt;let cap={&lt;br&gt;
    name:"Steve",&lt;br&gt;
    lastName:"Rogers",&lt;br&gt;
    address:{&lt;br&gt;
        city:"Manhattan",&lt;br&gt;
        state:"New York"&lt;br&gt;
    },&lt;br&gt;
    age:35,&lt;br&gt;
    isAvenger:true,&lt;br&gt;
    movies:["First Avenger","Winter Soldier","Civil War"],&lt;br&gt;
    sayHi: function() &lt;br&gt;
    {&lt;br&gt;
    console.log("Cap says HI ");&lt;br&gt;
    }&lt;br&gt;
};&lt;br&gt;
//📌get (getting keys)&lt;br&gt;
// console.log(cap.name);&lt;br&gt;
// console.log(cap.age);&lt;br&gt;
// console.log(cap.movies[1]);&lt;br&gt;
// cap.sayHi();&lt;/p&gt;

&lt;p&gt;//📌set /update &lt;br&gt;
// console.log("cap",cap);&lt;br&gt;
// cap.age =36;&lt;br&gt;
// cap.isAvenger=false;&lt;br&gt;
// cap.friends=["Tony","Bruce","Peter"];&lt;br&gt;
// console.log("---------------------------------------");&lt;/p&gt;

&lt;p&gt;//📌delete&lt;br&gt;
// delete cap.address;&lt;br&gt;
// console.log("cap",cap);&lt;/p&gt;

&lt;p&gt;//👉diffrence between .(dot) &amp;amp; &lt;a href="https://dev.tosquare%20bracket"&gt;&lt;/a&gt;  --&amp;gt;(cap.age and cap[propkey] ,where propkey="age")&lt;br&gt;
// (cap.age gives values direcet , but cap[propkey] gives values through varibale )&lt;br&gt;
let propkey="age"&lt;br&gt;
console.log(cap[propkey]);&lt;br&gt;
console.log(cap["age"]);&lt;/p&gt;

&lt;p&gt;//📌for in loop&lt;br&gt;
for(let key in cap)&lt;br&gt;
{&lt;br&gt;
    console.log(key," : ",cap[key]);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;//👉 it basically internally makes its as cap["name"],cap["lastname"],cap["address"] everytime and gives the answer,&lt;br&gt;
// its just the other way of writing ,nothing else&lt;/p&gt;

&lt;p&gt;// 📌if we want to print a key , i.e not present in object , then we get undefined  for that &lt;/p&gt;

&lt;p&gt;console.log(cap.xyz);&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get a clean git history with a rebase workflow</title>
      <author>Simon</author>
      <pubDate>Tue, 18 Jan 2022 18:27:06 +0000</pubDate>
      <link>https://dev.to/simondosda/get-a-clean-git-history-with-a-rebase-workflow-4pnd</link>
      <guid>https://dev.to/simondosda/get-a-clean-git-history-with-a-rebase-workflow-4pnd</guid>
      <description>&lt;p&gt;When I started using git, I had little concern about my commit history. &lt;br&gt;
I only used git as a backup tool for my work without trying to have consistent and readable commits.&lt;/p&gt;

&lt;p&gt;That's a common pitfall with git. I have often worked in teams where we would integrate all our commit iterations into our main branch, with commit messages as descriptive as &lt;code&gt;wip&lt;/code&gt;, ending with a &lt;strong&gt;hardly useful history&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Doing so strongly limits the benefits of using git. &lt;br&gt;
When we choose to enforce having a clean, readable history, composed of well-defined atomic commits on a single linear branch, the advantages of doing so greatly overcome the little extra time we spend to ensure everything we integrate to our main branch is clean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can now &lt;strong&gt;easily read the history&lt;/strong&gt; and understand what changes were made&lt;/li&gt;
&lt;li&gt;if there are some changes we don't understand, we can read all the &lt;strong&gt;relevant associated changes in the same commit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;if we have a problem with a deployment, we can &lt;strong&gt;easily revert the last commit&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I will introduce the main rules to maintain a clean git history and show you how I personally apply them in my day-to-day development.&lt;/p&gt;

&lt;p&gt;There is no right way to use git, so don't take anything as an absolute truth but rather as an inspiration to create your own workflow.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rules-for-a-clean-history"&gt;
  &lt;/a&gt;
  Rules for a clean history
&lt;/h2&gt;

&lt;p&gt;There are only three rules to enforce a clean git history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a commit should be atomic: it should contain &lt;strong&gt;all and only&lt;/strong&gt; the changes required for a feature or a fix&lt;/li&gt;
&lt;li&gt;a commit should have a &lt;strong&gt;clear, descriptive message&lt;/strong&gt;. I also use &lt;a href="https://www.conventionalcommits.org"&gt;conventional commits&lt;/a&gt; format, which can be helpful when working on a versioned project&lt;/li&gt;
&lt;li&gt;a commit should be directly integrated to long-running branches, using the &lt;code&gt;rebase&lt;/code&gt; functionality of git, to &lt;strong&gt;avoid merge commits&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last one can seem surprising, as it is easy to use git without even knowing the &lt;code&gt;rebase&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;rebase&lt;/code&gt; does is that it "moves" your commits on top of the branch you are rebasing on.&lt;/p&gt;

&lt;p&gt;The main drawback of using &lt;code&gt;rebase&lt;/code&gt; is that it rewrites your branch history. Therefore it won't be consistent with your remote repository, and you will need to force push on it.&lt;/p&gt;

&lt;p&gt;But it will allow you to have a linear commit history, whereas the &lt;code&gt;merge&lt;/code&gt; command will create a new commit for each merge with the changes from the merged branch, resulting in a less readable history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXrd5YEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vci71gklxc0m78u0bg2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXrd5YEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vci71gklxc0m78u0bg2y.png" alt="git merge vs git rebase" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This workflow works well, no matter if you are &lt;strong&gt;alone on a personal project or working in a big team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But if you can always deal with your mess alone, these rules will be helpful if they are enforced in a team.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#before-we-start-a-word-on-git-aliases"&gt;
  &lt;/a&gt;
  Before we start, a word on git aliases
&lt;/h2&gt;

&lt;p&gt;I use several times a day the commands shown in this article. &lt;br&gt;
To be more efficient, I have set up aliases for most of them. &lt;br&gt;
In the below examples, I will use the full command and show you as a comment the version using my aliases.&lt;/p&gt;

&lt;p&gt;If you want to know more about them, you can go to my article explaining my &lt;a href="https://simondosda.github.io/posts/2021-04-13-git-aliases.html"&gt;git aliases for an efficient workflow&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#starting-a-new-development"&gt;
  &lt;/a&gt;
  Starting a new development
&lt;/h2&gt;

&lt;p&gt;I usually start by creating a new branch from the latest main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main  &lt;span class="c"&gt;# git co main&lt;/span&gt;
git pull
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; my-branch  &lt;span class="c"&gt;# git nb my-branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NB: there are two main ways to create a new branch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git branch my-branch&lt;/code&gt; will create a new branch but stay on the current one, which is useful when you want to save your current branch before altering it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b my-branch&lt;/code&gt; is a checkout command with the &lt;code&gt;-b&lt;/code&gt; option that will create the new branch before checking out on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, we just created a new branch similar to the main one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5IcFJq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4n1ofuf0507vey4ts31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5IcFJq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4n1ofuf0507vey4ts31.png" alt="git workflow create branch" width="870" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-issue"&gt;
  &lt;/a&gt;
  Working on the issue
&lt;/h2&gt;

&lt;p&gt;I then start working and will usually create several commits, depending on the complexity of the development. This allows going back if I take a wrong direction, or change my mind at one point. I still usually try to break things into commits that make sense.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'feat: step 1'&lt;/span&gt;  &lt;span class="c"&gt;# git c 'feat: step 1'&lt;/span&gt;
git git push &lt;span class="nt"&gt;--set-upstream&lt;/span&gt; origin/my-branch  &lt;span class="c"&gt;# git p&lt;/span&gt;
...
git commit &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'feat: stept 7'&lt;/span&gt;  &lt;span class="c"&gt;# git c 'feat: stept 7'&lt;/span&gt;
git push  &lt;span class="c"&gt;# git p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cn92cYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og7gqh52syz6hyscm3d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cn92cYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og7gqh52syz6hyscm3d2.png" alt="git workflow create commits" width="870" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But at the end of the feature development, I will rewrite my history to have only one clean commit; or several if it is more appropriate (for instance, if I also fixed something while working on a feature).&lt;/p&gt;

&lt;p&gt;To do so, I usually use an interactive &lt;code&gt;rebase&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase &lt;span class="nt"&gt;-i&lt;/span&gt; HEAD~7  &lt;span class="c"&gt;# git ri 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way interactive &lt;code&gt;rebase&lt;/code&gt; works is that it displays the list of commits, with the action you can do on it. &lt;br&gt;
The main ones I use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pick&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt;: the default, keep the commit as it is&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reword&lt;/code&gt; or &lt;code&gt;r&lt;/code&gt;: allows you to rewrite the commit message in a next step&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt;: integrate the commit with the previous one, you will be asked to edit the message&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fixup&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt;: integrate the commit with the previous one while keeping its message&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drop&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt;: remove the commit. You can also get the same result by removing the entire line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keJVk5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2ud5upje6n6aarav98b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keJVk5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2ud5upje6n6aarav98b.png" alt="git workflow squash" width="870" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the history has been rewritten, I need to force push to the remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--force&lt;/span&gt;  &lt;span class="c"&gt;# git fp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rebasing-your-branch"&gt;
  &lt;/a&gt;
  Rebasing your branch
&lt;/h2&gt;

&lt;p&gt;Before pushing my changes for a review, I will usually rebase on the main branch so that my branch is up to date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch &amp;amp; git rebase origin/main  &lt;span class="c"&gt;# git rom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is needed only if new changes were integrated into the main branch. &lt;br&gt;
If any conflicts were created, this is when you will be asked to solve them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OppBPIc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2apw9hb8tr8brkb4mfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OppBPIc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2apw9hb8tr8brkb4mfa.png" alt="git workflow rebase" width="870" height="643"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reviewing-the-changes-before-integration"&gt;
  &lt;/a&gt;
  Reviewing the changes before integration
&lt;/h2&gt;

&lt;p&gt;I then open a merge/pull request in gitlab/github, and almost always find corrections to make.&lt;/p&gt;

&lt;p&gt;If the changes I want to make are important, I will create new commits, but for small corrections I usually integrate them directly to the current commit by amending it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &amp;amp; git push &lt;span class="nt"&gt;--force&lt;/span&gt;  &lt;span class="c"&gt;# git afp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When everything seems clean, I will ask for a review and will usually integrate the changes requested in a new commit so that the reviewer can quickly check them.&lt;/p&gt;

&lt;p&gt;Eventually, before integrating this new feature to the main branch, I will regroup the commits into one again as done previously, and rebase on the main branch if necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB: For this workflow to be effective, you need to enforce rebase merging in gitlab/github.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;Finally, Once merged, I will delete my branch on the server (this is configured to be done automatically after merging) and on my local repository, so that these repositories stay clean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-D&lt;/span&gt; my-branch  &lt;span class="c"&gt;# git del my-branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have automated the setup of all my projects &lt;a href="https://simondosda.github.io/posts/2021-05-03-tmux.html"&gt;thanks to tmuxp&lt;/a&gt;, and I always start by updating the repository and displaying its status. &lt;br&gt;
That allows me to quickly see what branches I am currently working on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git branch &lt;span class="nt"&gt;-vv&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status  &lt;span class="c"&gt;# git state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;These are the rules and the workflow I try to follow on all my projects.&lt;/p&gt;

&lt;p&gt;I admit it requires some effort, but the time you spend making sure that your git history is clean and readable will save you a lot of time when you will need to understand why and how some changes were made.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>tooling</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
