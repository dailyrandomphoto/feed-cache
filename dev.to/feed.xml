<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tech Talks: "A Day in the Life of a Ruby Object" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Thu, 15 Apr 2021 19:57:20 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/tech-talks-a-day-in-the-life-of-a-ruby-object-railsconf-2021-1f9j</link>
      <guid>https://dev.to/sylwiavargas/tech-talks-a-day-in-the-life-of-a-ruby-object-railsconf-2021-1f9j</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk:&lt;/strong&gt; 'A Day in the Life of a Ruby Object' by &lt;a href="https://twitter.com/JemmaIssroff"&gt;Jemma Issroff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: In this talk, we‚Äôll walk through the lifespan of a Ruby object from birth to the grave: from .new to having its slot reallocated. We‚Äôll discuss object creation, the Ruby object space, and an overview of garbage collection.&lt;/p&gt;

&lt;p&gt;‚ú® If you can't watch the talk, see Jemmas blogs in the &lt;a href="#read-more"&gt;read more section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;: Jemma is a great teacher who has made this talk beginner-friendly by explaining key concepts and providing great visuals. She's funny and smart, which makes the talk not overwhelming. This is what I'm all for: dense tech talks, especially by women technologists. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminology"&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object"&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental-garbage-collection-tri-color-mark-and-sweep-algorithm"&gt;Incremental Garbage Collection: Tri-Color Mark and Sweep Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generational-garbage-collection"&gt;Generational Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compaction"&gt;Compaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;great opening anecdote: Jemma created 40,000,000,000 objects (which would be 40GB) on a computer that had only 16GB free space and the task was completed with no problem thanks to the gift of üéÅ garbage collection üéÅ

&lt;ul&gt;
&lt;li&gt;this was possible because we didn't ask Ruby to remember these objects (we were not referring to them) so Ruby followed a full object lifecycle&lt;/li&gt;
&lt;li&gt;we could see that the objects were created and then bulldozed by running &lt;code&gt;GC.stat(:count)&lt;/code&gt; (GC -&amp;gt; Garbage Collector)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operating System Heap&lt;/strong&gt;: most of a machine's memory, which includes Ruby Heap&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ruby Heap&lt;/strong&gt;: place in the machine's memory where our Ruby objects live and die

&lt;ul&gt;
&lt;li&gt;it sometimes references Operating System Heap, it can sometimes change its size&lt;/li&gt;
&lt;li&gt;it's made of memory objects called pages (when the Ruby Heap is asking for more space, it asks in increments of pages)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Page&lt;/strong&gt;: a unit in Ruby Heap

&lt;ul&gt;
&lt;li&gt;each page has a header with some info and about 409 slots (each slot is 40 byte in size), which is exactly where we store the objects&lt;/li&gt;
&lt;li&gt;some slots have rvalues, which are Ruby's internal representations of an object&lt;/li&gt;
&lt;li&gt;in some cases, the value of an object is too long for the rvalue to hold and in that case, the rvalue will point to an external memory address in the Operating&lt;/li&gt;
&lt;li&gt;in some cases rvalues contain pointers to other rvalues&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root RVALUE&lt;/strong&gt;: values that the program will always know about that are vital to the running of the program&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#&amp;lt;Object:0x00007fd1c69b8058&amp;gt;&lt;/code&gt; - the sequence of characters after "Object:" stands for the memory address; we can't access this object because we are not saving it to a variable so it's cleaned up&lt;/li&gt;
&lt;li&gt;sometimes the size of the Ruby Heap is not representing the memory consumption of your program because of the external pointers (the boundary in case of strings is 23 and 24 characters); where the object is stored influences the processing time&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#incremental-garbage-collection-tricolor-mark-and-sweep-algorithm"&gt;
  &lt;/a&gt;
  Incremental Garbage Collection: Tri-Color Mark and Sweep Algorithm
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;a really cool algo that Ruby uses in GC to determine which rvalues can have their slots reallocated (meaning, they are not important to the running of our program) &amp;lt;- &lt;em&gt;Jemma's presentation visualizes this process in a wonderful way and maybe these next  points won't be of much help without the visual&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;it's tri-color (white, black, grey) and not bi-color because of "stop the world"

&lt;ul&gt;
&lt;li&gt;Ruby pauses the execution of our programs to do garbage collection and it could get lengthy in bigger programs&lt;/li&gt;
&lt;li&gt;the grey allows us to stop the garbage collection (not to look at some rvalues) to allow our programs to run&lt;/li&gt;
&lt;li&gt;so, Ruby really uses "incremental Garbage Collection", which are just short intervals of GC when it picks up where we left off&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#generational-garbage-collection"&gt;
  &lt;/a&gt;
  Generational Garbage Collection
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;weak generational hypothesis"&lt;/strong&gt;: "Most objects die young" ü™¶&lt;/li&gt;
&lt;li&gt;we can manually trigger Garbage Collection by &lt;code&gt;GC.start&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;it takes an optional parameter of &lt;code&gt;full_mark: false&lt;/code&gt;, which determines if it's going to look for every object and in this case, it will only look at the young objects &amp;lt;- "Minor Garbage Collection"&lt;/li&gt;
&lt;li&gt;to look for all the objects, &lt;code&gt;full_mark: true&lt;/code&gt;  &amp;lt;- "Major Garbage Collection"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Major GC runs when the Minor GC hasn't freed up enough space&lt;/li&gt;
&lt;li&gt;If you want to see all the jobs that GC has done, you can run &lt;code&gt;GC.stat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#compaction"&gt;
  &lt;/a&gt;
  Compaction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rvlues are fragmented, they are not batched up together but instead spread across pages&lt;/li&gt;
&lt;li&gt;an algorithm pulls them all together into one page to take up less space&lt;/li&gt;
&lt;li&gt;because of that, the memory address may change, as visible below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt; &lt;span class="n"&gt;obj_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Object:0x00007fd1c69b8058&amp;gt; &lt;/span&gt;

&lt;span class="n"&gt;obj_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Object:0x00007fd1c69c9060&amp;gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1_000_000_000.times {Object.new}&lt;/code&gt; -&amp;gt; 40GB, because one object in Ruby is &lt;code&gt;40 bytes&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jemma.dev/blog/gc-internal"&gt;Ruby Garbage Collection Deep Dive: GC::INTERNAL_CONSTANTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jemma.dev/blog/gc-generational"&gt;Ruby Garbage Collection Deep Dive: Generational Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Automate Customer Rewards using Python, Postgresql and Africas Talking </title>
      <author>Zoo Codes</author>
      <pubDate>Thu, 15 Apr 2021 19:45:59 +0000</pubDate>
      <link>https://dev.to/ken_mwaura1/automate-customer-rewards-using-python-postgresql-and-africas-talking-9dj</link>
      <guid>https://dev.to/ken_mwaura1/automate-customer-rewards-using-python-postgresql-and-africas-talking-9dj</guid>
      <description>&lt;p&gt;A while back me, and a friend (shout out to Nyambura for this awesome idea) were talking about customer reward programs and promotions. The discussion was mostly about how currently organizations tend to do things manually, yet  most already tend to have some sort of digital system in place with a database backend storing all their records.&lt;/p&gt;

&lt;p&gt;In this article we will be part of the marketing team of our fictional chain of &lt;em&gt;ZOO&lt;/em&gt; supermarkets. We are tasked with running a customer rewards program to celebrate our 1st year anniversary. Specifically we take on the challenge of awarding airtime to our customers who will shop above a certain amount during the anniversary period.&lt;/p&gt;

&lt;p&gt;There are a few proprietary options including outsourcing this task to a 3rd-Party provider. However, at &lt;em&gt;ZOO&lt;/em&gt; we consider ourselves a 'digital-first' franchise thus we decide to develop an in-house solution. The assumption is we have a POS system with a Postgresql database backend. We decide to use Python as our language of choice and the awesome &lt;a href="https://africastalking.com/airtime"&gt;AfricasTalking airtime api &lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-prepared"&gt;
  &lt;/a&gt;
  Getting Prepared
&lt;/h2&gt;

&lt;p&gt;To follow along this post and code the same features. You're going to need a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python and pip (I am currently using 3.9.2) Any version above 3.5 should work.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;a href="https://account.africastalking.com/auth/register/"&gt;Africas Talking account&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Api Key and username from your account. Create an app and take note of the api key.

&lt;ul&gt;
&lt;li&gt;Additionally, you will need to request them to enable airtime access for your account.
Email their airtime team for further clarification&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you've got the above sorted :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new directory and change into it.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
           &lt;span class="nb"&gt;mkdir &lt;/span&gt;customer-rewards 
           &lt;span class="nb"&gt;cd &lt;/span&gt;customer-rewards

&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Create a new virtual environment for the project or activate the previous one.&lt;/li&gt;
&lt;li&gt;Using python package manager(pip), install: africastalking python sdk, python-dotenv library,
sqlachemy, psycopg2 and sqlachemy-utils libraries.&lt;/li&gt;
&lt;li&gt;Save the installed libraries in a requirements.txt file
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;
       &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
       &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
       &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;africastalking&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt; &lt;span class="n"&gt;sqlachemy&lt;/span&gt; &lt;span class="n"&gt;sqlachemy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;  
       &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned above we are using Postgresql as our database of choice hence we need a library to interface with the database, psycopg2 is a good option although there are&lt;br&gt;
  others. Although not necessary we'll be making use of   &lt;a href="https://www.sqlalchemy.org/"&gt;SqlAlchemy&lt;/a&gt; as our Object Relation Mapper(ORM). This allows us to use python objects (classes, functions) to make transactions instead of raw SQL.&lt;br&gt;
    - Install Postgresql database to simulate a backend with customer details. Depending on which platform you code on, you could do it natively on your system. Personally I am using &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt; as it is easy to manage containers and prevents my system from being cluttered. This &lt;a href="https://blog.crunchydata.com/blog/easy-postgresql-12-and-pgadmin-4-setup-with-docker"&gt;article&lt;/a&gt; is an awesome resource on how to get Postgresql and pgadmin4  installed as containers.&lt;/p&gt;

&lt;p&gt;Alternatively, check the finished code on &lt;a href="https://github.com/KenMwaura1/customer-rewards"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#config-for-days"&gt;
  &lt;/a&gt;
  Config For Days
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X17mnhd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bftri0sice8dbczm2ls1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X17mnhd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bftri0sice8dbczm2ls1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As per our current assumption we have a database of customer data and in production that should definitely be the case with backups in place. However, for this showcase we'll create a sample database and tables. This will make it easier to explain the flow of the program.&lt;/p&gt;

&lt;p&gt;This step is entirely optional, You could just as easily create a db manually using a database client like &lt;a href="https://dbeaver.io/"&gt;dbeaver&lt;/a&gt;. However, using code is the optimal route. Let's create a &lt;code&gt;.env&lt;/code&gt; file to hold all of our environment variables that we dont want to expose to everyone. Enter the following changing the placeholders with the proper credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env 
postgres_db=enter your database here
postgres_host=localhost
postgres_port=5432
postgres_user=enter postgres_user
postgres_password=enter postgres_user password
at_username=enter your at_username
at_api_key=enter your api_key
phone_number=07xxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll create a &lt;code&gt;config.py&lt;/code&gt; file to hold all of our configurations. Inside our config file, lets go ahead and import all of our required libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#config.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;imports the create_engine function to connect with the database as well as Metadata object.&lt;/li&gt;
&lt;li&gt;We then import the declarative_base factory function that constructs a base class for declarative class definitions.&lt;/li&gt;
&lt;li&gt;We proceed to import the sessionmaker class that is normally used to create a top level Session configuration which can then be used throughout an application without the need to repeat the configurational arguments.&lt;/li&gt;
&lt;li&gt;We import the os lib to enable access to environment variables.&lt;/li&gt;
&lt;li&gt;We also import the load_dotenv function to load values from our &lt;code&gt;.env&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# config.py 
&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgres_db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgres_host'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgres_port'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgres_user'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgres_password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above utilizes the load_dotenv function to get values from our &lt;code&gt;.env&lt;/code&gt; file. We proceed to create variables to hold our specific environment values.&lt;/p&gt;

&lt;p&gt;We now go into Database specific configuration. The code below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates an instance of the create_engine function passing required parameters in relation to the db.&lt;/li&gt;
&lt;li&gt;We also create instances of MetaData, declarative_base and Session functions for use across our program.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config.py
&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"postgresql+psycopg2://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoflush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more-customers-more-data"&gt;
  &lt;/a&gt;
  More Customers More Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Giqbz5tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccrwuyn83c46cixptm6r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Giqbz5tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccrwuyn83c46cixptm6r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new python script named &lt;code&gt;database_insert.py&lt;/code&gt; this will hold all the code for inserting data for our customers and sales transactions.&lt;br&gt;
Here we will define how our data will be stored inside our database, this will also serve a good primer on using sqlachemy for CRUD (Create Read Update Delete) operations.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;database_insert.py&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# database_insert.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unicode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code imports all of our required libraries and the pre-defined configuration&lt;br&gt;
from &lt;code&gt;config.py&lt;/code&gt; for use when accessing our database.&lt;/p&gt;

&lt;p&gt;We'll now proceed to define our classes for how data will be stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# database_insert.py
&lt;/span&gt;
&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'07XXXXXXXX'&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'customers'&lt;/span&gt;
    &lt;span class="n"&gt;customer_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer_first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer_last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_phonenumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;country_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_phonenumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;country_code&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sales_transaction'&lt;/span&gt;
    &lt;span class="n"&gt;transaction_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customers.customer_id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;transaction_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;transaction_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'EAT'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we create two classes: Customers and Sales_Transaction both of which inherit from the Base class from sqlachemy. This enables us easily map our models to our tables. In case you want more information, the &lt;a href="https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#orm-declarative-mapping"&gt;documentation&lt;/a&gt;&lt;br&gt;
provides great deep dive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# database_insert.py 
&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'KE'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer_first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'babygirl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;customer_last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'nyambura'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_phonenumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e164&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer_first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'zoo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;customer_last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'mwaura'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;_phonenumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e164&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;transaction_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction_price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;transaction_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"We have a problem Houston: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet makes use of the Base class to create all of our tables as specified in our classes. We proceed to create a &lt;code&gt;temp&lt;/code&gt; variable to hold our unformatted phone number. We make use of the PhoneNumber function from the &lt;code&gt;sqlachemy_utils&lt;/code&gt; library to set the correct type of our phone_number. We then add variables to insert test data into the database. The data provided for test purposes, use your own as required. We created a Foreign Key field in our Sales_Transaction table inorder to have a relationship between our Customers table and Sales table. Each transaction should have a customer id to easily identify which customer made which transaction.&lt;/p&gt;

&lt;p&gt;The Database should resemble the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Iu2_GV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg3gxecgbdfn09zyawfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Iu2_GV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg3gxecgbdfn09zyawfb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-search-begins"&gt;
  &lt;/a&gt;
  The Search Begins!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3ZRPjT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg92qd1ji3sanfvhfoh1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3ZRPjT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg92qd1ji3sanfvhfoh1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this section we will write queries against our database for customers who we will&lt;br&gt;
subsequently reward. Most of the time you would have to do this in native SQL code,&lt;br&gt;
however, we have an ORM in place thus we will write python code inorder to query our&lt;br&gt;
database.&lt;/p&gt;

&lt;p&gt;Inside our working folder, create a python file named &lt;code&gt;customer_search.py&lt;/code&gt;. This file&lt;br&gt;
just as the name implies will be used to query our customer data. Our original task was to reward customers during our anniversary period who have shopped above a certain amount. We'll set our shopping period to 12th March 2021 to 19th March 2021 and shopping amount to equal to and above kes 2500.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# customer_search.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;database_insert&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerQuery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer_query&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;start_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transaction_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
        &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customer_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transaction_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transaction_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;start_dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sales_Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transaction_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end_dt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e164&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;customer_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;customer_data&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomerQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our code block above we import date from datetime library, We also get the session&lt;br&gt;
fom our config file. We also get the Customers and Sales_Transaction classes from the&lt;br&gt;
&lt;code&gt;database_insert.py&lt;/code&gt;. We create a CustomerQuery class, define a &lt;code&gt;customer_query&lt;/code&gt; function to hold all of our queries. We define a start (&lt;code&gt;start_dt&lt;/code&gt;) and end(&lt;code&gt;end_dt&lt;/code&gt;) date variables inorder to specify the period in between(the anniversary period).&lt;/p&gt;

&lt;p&gt;We then create a query(&lt;code&gt;sq&lt;/code&gt;) on our session. We query the Sales_Transaction class and Customers class, we then create an empty customer_data list that we append our query results. Since we converted our phone_number to PhoneNumber class, we can easily get in e.164 format as required by africastalking by calling the &lt;code&gt;.e164&lt;/code&gt; method.  We then return our &lt;code&gt;customer_data&lt;/code&gt; list containing all of our required data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#everyone-gets-a-reward"&gt;
  &lt;/a&gt;
  Everyone gets a Reward!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U9uYWP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2flf2p1cv8k4y0jbd6g6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U9uYWP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2flf2p1cv8k4y0jbd6g6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we get to rewarding our esteemed shoppers! Create a file &lt;code&gt;customer_rewards.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside the file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# customer_rewards.py 
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;africastalking&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;customer_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CustomerQuery&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# get the environment values from the .env file
&lt;/span&gt;&lt;span class="n"&gt;at_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'at_username'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;at_api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'at_api_key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;at_username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;at_api_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;airtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Airtime&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_application_data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer_rewards&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Set The 3-Letter ISO currency code and the amount
&lt;/span&gt;    &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"250"&lt;/span&gt;
    &lt;span class="n"&gt;currency_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"KES"&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;CustomerQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_query&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currency_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;currency_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Encountered an error while sending airtime. More error details below&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;customer_rewards&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the block above, we import the africas talking python library as well load_dotenv function to get our africas talking credentials. We proceed to assign variables to our api key and username, we then initialize the africas talking client by passing our values as arguments. We then assign the airtime class to a variable, and the account as well. We fetch our current account balance using &lt;code&gt;account.fetch_application_data()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We define a customer_rewards function, inside the function we set an amount, currency code variables. These will hold our airtime amount and three-digit ISO code required by africas talking.  Read further in the [documentation (&lt;a href="https://developers.africastalking.com/docs/airtime/overview"&gt;https://developers.africastalking.com/docs/airtime/overview&lt;/a&gt;). We loop through the customer data and get each number to be rewarded. We then insert a try-catch block we then attempt to send airtime to each customer using the &lt;code&gt;airtime.send&lt;/code&gt; function. We then call our &lt;code&gt;customer_rewards()&lt;/code&gt; function.  If all went well, your customers should receive their  airtime. Voila! We have successfully developed an automated method to effeciently and quickly  reward our loyal customers. There is of course room for improvement:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adding logging to keep track of customers awarded.&lt;/li&gt;
&lt;li&gt;Connecting to a frontend application to visualize the total amount of airtime sent.
Alternatively crafting an API around the rewards program.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But this was more of a demo project to illustrate the viability of the idea.&lt;br&gt;
One feature I found to be amazing was, the Africas Talking airtime api would return an error whenever I sent airtime to the same number more than once in a span of 5 minutes.&lt;br&gt;
This would be life-saver when you have numerous customers to reward, it would prevent double or triple rewards without any additional code on our end.&lt;/p&gt;

&lt;p&gt;If you have any question or comments. Let me know in the comments, or on &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;Twitter&lt;/a&gt;.&lt;br&gt;
Happy Coding.&lt;/p&gt;

&lt;p&gt;Ps: Massive shoutout to &lt;a href="https://twitter.com/AnthonyLimo"&gt;Anthony Limo&lt;/a&gt;, Anne from Africas talking airtime and by extension the airtime team. The onboarding and KYC process was quick and painless.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>postgres</category>
      <category>africastalking</category>
    </item>
    <item>
      <title>Rails link to React (No API). Yes that's possible!</title>
      <author>Eric Chapman</author>
      <pubDate>Thu, 15 Apr 2021 19:07:28 +0000</pubDate>
      <link>https://dev.to/ericchapman/rails-link-to-react-no-api-yes-that-s-possible-5726</link>
      <guid>https://dev.to/ericchapman/rails-link-to-react-no-api-yes-that-s-possible-5726</guid>
      <description>&lt;h1&gt;Rails link to React (No API) Yes that's possible&lt;/h1&gt;

&lt;p&gt;Everyone will agree that Rails and React combo are a powerful duo! But we all know that building and linking a backend and a frontend take time and resource. Not anymore...&lt;/p&gt;

&lt;p&gt;Discover Inertia.js: Inertia is not another javascript framework. Inertia is glue code that easily bring React and Rails together like they was one! &lt;/p&gt;

&lt;p&gt;Once setup completed, using inertia is very simple, easy and intuitive.&lt;/p&gt;

&lt;p&gt;Imagine be able to render a React component from Rails with a classic render:&lt;/p&gt;

&lt;p&gt;The routing is still manage by Rails (Yeah!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s1"&gt;'home#show'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rails home controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="c1"&gt;# Rails will render a React Component with props!&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React Hello component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5k1ddPRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9344sv9et6j1vrgrmyby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5k1ddPRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9344sv9et6j1vrgrmyby.png" alt="react-rails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course we could had send something more complex than a string. It is also easy to return database data. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Event/Show'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:start_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Ok you got my attention. So what exactly is Inertia?&lt;/h2&gt;

&lt;p&gt;With Inertia you build apps just like you've always done with your server-side web Rails framework. You use Rails existing functionality for routing, controllers, middleware, authentication, authorization, data fetching, and more.&lt;/p&gt;

&lt;p&gt;The only thing that's different is your view layer. Instead of using server-side rendering (eg. ERB templates), the views are JavaScript page components. This allows you to build your entire front-end using React, Vue or Svelte.&lt;/p&gt;

&lt;p&gt;Inertia also have option for server side rendering, forms helper, modal helper, validation helper and more.&lt;/p&gt;

&lt;h2&gt;How can I install and try Inertia?&lt;/h2&gt;

&lt;p&gt;Create a new rails app with React pre-configure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new demo --webpack=react
cd demo
npm install @inertiajs/inertia @inertiajs/inertia-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add into Gemfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'inertia_rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install GEM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add to 'app/javascript/packs/application.js'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/inertia-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;
    &lt;span class="nx"&gt;initialPage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="nx"&gt;resolveComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./Pages/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nx"&gt;el&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a React component:&lt;br&gt;
app/javascript/packs/Pages/hello.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create your route:&lt;br&gt;
config/routes.rb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s1"&gt;'home#show'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create home controler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g controller home
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your rails app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;What's next&lt;/h2&gt;

&lt;p&gt;For complete detail info about Inertia visit there web site at: &lt;a href="https://inertiajs.com/"&gt;https://inertiajs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inertia.js position himself to be a serious and powerful alternative to api. Of course usage in a real big project need to be tested and like everything else, I guess, some limitations will rise. For now the first impression is more than good and the team behind Inertia.js is professional and seem here for the long run.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for this Inertia.js introduction. If you want me to do more inertia post let me know and let me know what you would like me to test?&lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me!: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Algumas Vantagens para aprender React</title>
      <author>Paulo Freitas </author>
      <pubDate>Thu, 15 Apr 2021 18:42:53 +0000</pubDate>
      <link>https://dev.to/paulofreitas_py/algumas-vantagens-para-aprender-react-3fk6</link>
      <guid>https://dev.to/paulofreitas_py/algumas-vantagens-para-aprender-react-3fk6</guid>
      <description>&lt;p&gt;React √© uma biblioteca JavaScript criada pelo Facebook e √© a biblioteca JavaScript mais famosa e usada. Outras bibliotecas s√£o angular.js e vue.js. Deixe-nos ver as raz√µes pelas quais voc√™ deve aprender.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;O React √© f√°cil de usar. &lt;br&gt;
React √© a biblioteca JavaScript mais usada porque √© f√°cil de usar e amig√°vel para iniciantes. Os aplicativos da Web s√£o constru√≠dos com mais rapidez e sem muito estresse com o React.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trabalhos de alta remunera√ß√£o.&lt;br&gt;
Como um desenvolvedor React , voc√™ ser√° classificado como alto e receber√° um sal√°rio alto. Nos Estados Unidos, o sal√°rio m√©dio de um desenvolvedor React √© 120 mil por ano. E voc√™ tamb√©m n√£o precisa se preocupar em conseguir um emprego porque √© muito procurado. Principais empresas como Facebook, Netflix, Facebook, Instagram, Whats App, Microsoft, Yahoo, Netflix, PayPal, Imdb, Uber, Wix, Atlassian, CloudFalare, Slack, Dropbox, Salesforce, Airbnb, Reddit, BBC e at√© Hashnode usa react. A maioria das empresas est√° procurando desenvolvedores de rea√ß√£o.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React √© Reutiliz√°vel &lt;br&gt;
O React economiza tempo e dinheiro porque √© baseado em componentes. E os componentes podem ser divididos e reutilizados.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aplicativos m√≥veis e VR React n√£o s√£o usados apenas para construir sites, mas tamb√©m para construir aplicativos m√≥veis e VR (realidade virtual). Voc√™ pode trabalhar como desenvolvedor Web, desenvolvedor de aplicativos m√≥veis ou at√© mesmo um especialista em RV.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Outros exemplos r√°pidpos:&lt;/p&gt;

&lt;p&gt;1 React √© compat√≠vel com SEO &lt;br&gt;
2 React √© est√°vel &lt;br&gt;
3 React √© r√°pido&lt;/p&gt;

&lt;p&gt;Comece a Aprender React hoje !!!!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>developer</category>
    </item>
    <item>
      <title>System Architecture for Edaqa's Room</title>
      <author>edA‚Äëqa mort‚Äëora‚Äëy</author>
      <pubDate>Thu, 15 Apr 2021 18:34:58 +0000</pubDate>
      <link>https://dev.to/mortoray/system-architecture-for-edaqa-s-room-5655</link>
      <guid>https://dev.to/mortoray/system-architecture-for-edaqa-s-room-5655</guid>
      <description>&lt;p&gt;I tried explaining to a friend how &lt;a href="https://edaqa.link/EdaqasRoom"&gt;my games&lt;/a&gt; were setup, but it became confusing quickly. Drawing all the component boxes, I‚Äôm surprised to see how complex it has become. I think it‚Äôs a decent example of modern system architecture, and will go through the setup here. This is for a multiplayer game, so I‚Äôll point out how this might differ from a more typical web application.&lt;/p&gt;

&lt;p&gt;I could reasonably call this architecture the platform on which my game runs. A higher-level of code runs on top of, but is intimately tied, to this platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xVFp-Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qfv0dqo689en1j93a4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xVFp-Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qfv0dqo689en1j93a4e.png" alt="Architecture diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#client"&gt;
  &lt;/a&gt;
  Client
&lt;/h1&gt;

&lt;p&gt;I like to start at &lt;a href="https://mortoray.com/2019/02/05/the-user/"&gt;the user‚Äôs view&lt;/a&gt; on the system, as it keeps me grounded in the system's purpose. Mostly the user interacts via the website, but I also send email confirmation on purchase. The starting point to the game could be via the immediate web link, or the link in the email.&lt;/p&gt;

&lt;p&gt;I was tempted to split the client into a game and website proper, as they are fairly distinct aspects of the system. But the discussion of the website‚Äôs logical structure is better left for another article.&lt;/p&gt;

&lt;p&gt;Note the two lines from the browser to the HTTP server. One is normal HTTP traffic, and the other is for WebSocket. Though they go through the same machines, they are handled differently. I‚Äôll provide more detail later, but the way I handle WebSocket is specific to a multiplayer game ‚Äî a need for a fast response motivates the design.&lt;/p&gt;

&lt;p&gt;In terms of fault tolerance, it‚Äôs the client which is most likely to fail. From browser incompatibility to crashes, and slow or lost connections, the client is an endless pool of problems. The servers are virtually faultless by comparison. As this is an interactive multiplayer game, it‚Äôs vital to handle common client problems correctly.  The higher level code handles most of the faults, which this architecture supporting it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-processing-services"&gt;
  &lt;/a&gt;
  Cloud Processing Services
&lt;/h1&gt;

&lt;p&gt;The three red boxes contain the abstract aspects of the cloud service. These services are mainly configurations and I have no insight into their internal structure. They contain only transient data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Content Delivery Network (CDN):&lt;/strong&gt; The CDN serves all the static assets of the website and the game. Most of these resources use the web server as the origin, as it gives me the cleanest control over versions. The CDN provides faster loading to the client and reduces load on the host machines. I could do an entire article on the challenges of getting this working. (Service: AWS CloudFront)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Frontend:&lt;/strong&gt; This takes care of the incoming connections, as well as SSL handling. It provides, when needed, a slow rollout to upgrading the hosts. It‚Äôs a security barrier between the public world and my private hosts. Thankfully, it routes both normal HTTP and Websocket traffic. (Service: AWS Elastic Load Balancer) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Email Sender:&lt;/strong&gt; Sends purchase confirmation emails to the user. I mentioned the client layer is fault prone, and email is no exception. You absolutely want a third-party service handling the challenging requirements of modern email. (Service: AWS Simple Email Service)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#host"&gt;
  &lt;/a&gt;
  Host
&lt;/h1&gt;

&lt;p&gt;My host contains several microservices, which I‚Äôm grouping into a large block. With Python as the main server language, I was forced into the microservice architecture. Separate processes is the only way I can get stability and parallel processing of these services.&lt;/p&gt;

&lt;p&gt;These are all launched as systemd services on an AWS Linux image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web Server:&lt;/strong&gt; Handles all web requests, including static files, templates, game launchers, and APIs. These requests are stateless. (Service: Python Code with Eventlet and Flask)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game Server:&lt;/strong&gt; Implements the game message queues, which are shared message rooms per game ‚Äî think of it like a chat server with channels. This is stateful per game. It handles client connections and transmits messages but does not understand the logical game state. For fault tolerance, it was vital that misbehaving clients don‚Äôt interfere with other games. (Python Code with Asyncio and Websockets)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message Service:&lt;/strong&gt; Migrates game messages from the live database to the long-term database store. This happens regularly to minimize the memory use of the live database, allowing more games to live on one host. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Confirm Service:&lt;/strong&gt; Sends emails when somebody purchases a game. I avoid doing any external processing in the web server itself, instead having it post a job that is handled by this service. This keeps the web server responsive and stable. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stats Service:&lt;/strong&gt; This is a relatively fresh addition, needed for my &lt;a href="https://edaqa.link/EdaqasAffiliates"&gt;affiliate program&lt;/a&gt;. I previously calculated game stats offline for analysis, but am working on features to present those at the end of the game. There is a bit of ping-pong with the web server to get this working. This is external, as it has slow DB queries and slow processing. It operates sequentially, as I do not want multiple stats running in parallel. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Live Database:&lt;/strong&gt; Contains game state for all games on this host. The game uses a sequenced message queue. For a synchronized visual response between players, it is vital this service is fast. Therefore I use a local Redis store to keep live messages, with the message service moving them offline. (Service: Redis)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message Queue:&lt;/strong&gt; Provides the message queue for these services to talk to each other. This is per-host because a few of the services need access to the Live Data for a game. The Confirm service does not need live data, and I could orchestrate the stats service to not need it either. However, having an additional shared message queue is unnecessary overhead.  (Service: Redis)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The diagram creates siblings of the Live Database and Message Queue boxes, since the same process implements both. This is another point where the needs of the game dictate this local Redis server. Most web apps can probably use an off host queue and an external DB service. When you look at my alternate design later, you‚Äôll see I‚Äôd be happy to have this part even faster.&lt;/p&gt;

&lt;p&gt;I estimate a host can handle at least 100 concurrent games, around 400 users, and I dream about the day when I need many hosts. I can also add region specific hosts, providing faster turnaround for groups playing in other countries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websocket"&gt;
  &lt;/a&gt;
  WebSocket
&lt;/h2&gt;

&lt;p&gt;The diagram shows two different connections between the client and the HTTP Frontend, which continue to the backend.&lt;/p&gt;

&lt;p&gt;The black HTTP connection is stateless, and it doesn‚Äôt matter which host it ends up at. Ultimately, when my dreams of high load come to fruition, I‚Äôd separate this, putting it on a different host pool, or potentially recreate it as lambda functions.&lt;/p&gt;

&lt;p&gt;The orange WebSocket connection is stateful and must always arrive at the same machine. This is sticky per game; all players of the same game must reach the same machine.  This must be done as a single host to minimize turnaround time. Shared, non-local queues, lambda functions, and DBs, all introduce too much of a response lag. This is particular to a multiplayer game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternate-game-server-design"&gt;
  &lt;/a&gt;
  Alternate Game Server Design
&lt;/h2&gt;

&lt;p&gt;Again, I‚Äôm kind of forced into the above architecture because of Python. Should I ever need more performance, or wish to reduce hardware needs, I‚Äôd reimplement this, likely choosing C++, though any compiled static language with good threading and async IO would work.&lt;/p&gt;

&lt;p&gt;A new single server would be a single application replacing these services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;game server:&lt;/strong&gt; Depending on the language and framework, this socket handling code could look very different. Much of the speed improvement though would come simply from better data parsing and encoding.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;message service:&lt;/strong&gt; I‚Äôd gain more control over when this runs and have an easier time reloading messages for clients&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stats service:&lt;/strong&gt; I would make this a lot simpler since it wouldn‚Äôt need as much cross-process coordination to work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;live database:&lt;/strong&gt; Simple in memory collections replace the Redis DB, providing faster turnaround, but complicating persistence and fault management.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;message queue:&lt;/strong&gt; The remaining job messages would migrate to a shared queue, like SQS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This alternate architecture is simpler, at least to me, and I estimate it could easily handle 100x as many games on a single host. Or rather, it‚Äôd let me handle as many games as now, but with several much smaller hosts. That would improve fault tolerance.&lt;/p&gt;

&lt;p&gt;Added coding time keeps this on the long-term backlog. Unless some here-to-unknown feature appears where I need this, it‚Äôll be cheaper to keep the microservices model and spin up more hosts as required.&lt;/p&gt;

&lt;p&gt;An intermediate solution is to code strictly the websocket channels in another language, since it‚Äôs the most inefficient part. Though I recently reprogrammed this part, still in Python, to be &lt;a href="https://mortoray.com/2020/12/06/high-throughput-game-message-server-with-python-websockets/"&gt;massively more efficient&lt;/a&gt;. New rewrites are on the long-term backlog.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h1&gt;

&lt;p&gt;The storage boxes contain all the long-term data for my game. There are no game assets here; I store them on the host where I upload each game. This provides the easiest way to manage game versions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Media Store:&lt;/strong&gt; Holds large static assets which aren‚Äôt part of the game proper, such as trailers and marketing materials. I synchronize this on-demand with a local work computer. (Service: AWS S3)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Log Store:&lt;/strong&gt; Collects and stores the logs from the HTTP Frontend. I analyze these offline regularly. (Service: AWS S3)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database:&lt;/strong&gt; This is the heart of my business data, storing purchase information and persisting long-term game state. (Service: Mongo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#whats-missing"&gt;
  &lt;/a&gt;
  What‚Äôs Missing
&lt;/h1&gt;

&lt;p&gt;I‚Äôve left several components out of the diagram to focus on the core experience. I‚Äôll describe them briefly here.&lt;/p&gt;

&lt;p&gt;I don‚Äôt show monitoring, partially because it‚Äôs incomplete, but also because it‚Äôs merely a line from every box to a monitoring agent. The structure doesn‚Äôt change for monitoring, but it‚Äôs part of the live environment.&lt;/p&gt;

&lt;p&gt;I‚Äôve left DNS out of the diagram for simplicity. I use multiple endpoints for the client, the web server and the CDN, as well as for email, which adds up to many DNS entries. In AWS one has Route 53, but the individual services can thankfully configure, and maintain most of their entries automatically.&lt;/p&gt;

&lt;p&gt;I have many offline scripts that access the database and the log store. This includes accounting scripts which calculate cross-currency payments and affiliate payouts ‚Äî world sales with tax are a nightmare! I also do analysis of game records to help me design future games.&lt;/p&gt;

&lt;p&gt;There‚Äôs an additional system used to manage the mailing list. As the sign-up form is part of the website, and people can follow links from the emails to the website, it is a legitimate part of the architecture.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#layers-upon-layers"&gt;
  &lt;/a&gt;
  Layers upon layers
&lt;/h1&gt;

&lt;p&gt;I‚Äôm tempted to call this the hardware architecture, but with cloud services, everything is logical. It‚Äôs a definite layer in my system. Can I call it the ‚Äú&lt;a href="https://en.wikipedia.org/wiki/DevOps"&gt;DevOps&lt;/a&gt; Layer‚Äù?&lt;/p&gt;

&lt;p&gt;The website on top of this is fairly standard, but the game is not. I will come back and do some articles about how &lt;a href="https://edaqa.link/EdaqasRoom3"&gt;the game&lt;/a&gt; functions. I can also show how the system architecture and game architecture work together.&lt;/p&gt;

&lt;p&gt;Other than a few game specific parts, the architecture is fairly standard for an internet application. I believe this is a good approach to what I needed.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
      <category>gamedev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to name Rails Concerns? </title>
      <author>Manuel Ortega</author>
      <pubDate>Thu, 15 Apr 2021 18:28:57 +0000</pubDate>
      <link>https://dev.to/mainstreet/how-to-name-rails-concerns-3m86</link>
      <guid>https://dev.to/mainstreet/how-to-name-rails-concerns-3m86</guid>
      <description>&lt;p&gt;&lt;a href="https://api.rubyonrails.org/v6.1.3/classes/ActiveSupport/Concern.html"&gt;Rails concerns&lt;/a&gt; are a handy technique to organize code / logic within your classes. But how do we name these Rails Concerns?&lt;/p&gt;

&lt;p&gt;We usually follow these two conventions:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#able-suffix"&gt;
  &lt;/a&gt;
  &lt;strong&gt;able&lt;/strong&gt; suffix
&lt;/h3&gt;

&lt;p&gt;We suffix Concerns with &lt;code&gt;able&lt;/code&gt; when the object we are including the concern to is able to act or behave as the concern describes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Avatarable&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Concern above tells us that the class we include this concern to is able to act / behave as we would expect from an avatar.&lt;/p&gt;

&lt;p&gt;We also follow this convention when we can execute the action that the concern describes to the object we are including the concern to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Subscribable&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we are making clear we are able to subscribe to objects from the class we include this &lt;code&gt;Subscribable&lt;/code&gt; Concern to.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#has-prefix"&gt;
  &lt;/a&gt;
  &lt;strong&gt;has&lt;/strong&gt; prefix
&lt;/h3&gt;

&lt;p&gt;We prefix our Concerns with &lt;code&gt;has&lt;/code&gt; when the logic we are trying to group within our Concern is not describing a behavior but a &lt;code&gt;has&lt;/code&gt; relation between the class where we will include the Concern to and a second entity. In the following scenario we may have a &lt;code&gt;User&lt;/code&gt; entity that has mentions within a blogging platform. At some point we may come up with a Concern that groups all the logic tied to a user having mentions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;HasMentions&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case none of the conventions described above makes sense within a specific scenario we don't follow them and goes with whatever better describes what the concern groups together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you name your Rails Concerns? What conventions do you follow?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Awesome 35+ SVG Resources For Your Next Web Project üí•</title>
      <author>Kiran Raj R</author>
      <pubDate>Thu, 15 Apr 2021 18:26:45 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15</link>
      <guid>https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15</guid>
      <description>&lt;p&gt;I am not going to write about each sites, just go through and explore. Each of these site will give you something for your future projects. If you have any other resources please feel free to comment. Happy Coding&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons üí•
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.iconshock.com/svg-icons/"&gt;Iconshock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/icons"&gt;Icon8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flaticon.com/"&gt;Flaticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freepik.com"&gt;Freepik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.iconninja.com/"&gt;Icon Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.svgrepo.com/"&gt;SVGrepo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#shape-generators"&gt;
  &lt;/a&gt;
  Shape Generators üí•
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.blobmaker.app/"&gt;Blob Maker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getwaves.io/"&gt;Wave Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svgwave.in/"&gt;Wave Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://squircley.app/"&gt;Squircley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softr.io/tools/svg-shape-generator"&gt;SVG Shape Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blobs.app/"&gt;Blobs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  Illustrations üí•
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manypixels.co/gallery?ref=lapaninja"&gt;Manypixels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freeillustrations.xyz/"&gt;Free Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sleekbundle.com/product/pulse-illustration-kit/"&gt;Pulse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucid.pixsellz.io/"&gt;Lucid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ui8.net/"&gt;Ui8&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#svg-backgrounds"&gt;
  &lt;/a&gt;
  SVG Backgrounds üí•
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.svgbackgrounds.com/"&gt;SVG Backgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.heropatterns.com/"&gt;Hero Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philiprogers.com/svgpatterns/"&gt;Philiprogers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thepatternlibrary.com/"&gt;The Pattern Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kennethcachia.com/plain-pattern/"&gt;Plain Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patternico.com/"&gt;Patternico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://products.ls.graphics/paaatterns/preview.html"&gt;Paaatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolbackgrounds.io/"&gt;Cool Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://btmills.github.io/geopattern/"&gt;Btmills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bgjar.com/"&gt;Bgjar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.svgeez.com/"&gt;Svgeez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patternpad.com/editor.html"&gt;Patternpad&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="http://samherbert.net/svg-loaders/"&gt;SVG Loaders&lt;/a&gt; üí•&lt;/p&gt;

&lt;p&gt;If there is any mistakes or broken link, let me know, I will update. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Code Innovation Series 2021 and Goodies :)</title>
      <author>omar</author>
      <pubDate>Thu, 15 Apr 2021 18:18:49 +0000</pubDate>
      <link>https://dev.to/omar1024/code-innovation-series-2021-and-goodies-1gi1</link>
      <guid>https://dev.to/omar1024/code-innovation-series-2021-and-goodies-1gi1</guid>
      <description>&lt;h4&gt;
  &lt;a href="#winning-code-innovation-series"&gt;
  &lt;/a&gt;
  Winning &lt;a href="http://www.incubateind.com/cis"&gt;Code Innovation series&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;So where do we begin with....&lt;/p&gt;

&lt;p&gt;It all began with our college &lt;em&gt;CSEA&lt;/em&gt; collaborated with &lt;a href="https://www.incubateind.com"&gt;incubateind&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was an hackathon..&lt;br&gt;
Submission criteria was simple and straight. Fork a github repo and submit your project there. Since it was powered by &lt;a href="http://github.com"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Themes of hackathon were &lt;strong&gt;health/Medical , Education/Learning and Fintech&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since only two days were provided for the hackathon and with no team, I obviously chose fintech because I had past experience with it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My idea was simple too. Predict the stocks of a company and tell company when to sell or buy stocks based on their previous stock data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;okay okay ! I won't go deep into the details of the project. But I can vaguely tell you about how I got second runner up prize!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I used moving averages and exponential moving averages concept in my project to predict when to buy or sell stocks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tools and Languages used were Jupyter Notebook and Python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stock Data is taken from yfinance which is available as pip package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So After coding and all is done, I forked the github repo and submitted the project. Only 5 projects were selected for jury round.&lt;/p&gt;

&lt;p&gt;Here is the link to all those &lt;a href="https://github.com/NIT-C/CISHack-NITCalicut/pulls"&gt;5-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coming to jury round, I made a presentation using google slides. Again I tried to keep it simple too. I included explanation about the algorithm used, room for development etc&lt;/p&gt;

&lt;p&gt;And at last 3 teams were selected and I was third runner-up. The other two teams' themes were Education/Learning.  &lt;/p&gt;

&lt;p&gt;All the three teams were provided with Github goodies and Free tickets to github workshops too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#trickstips-i-learnt-in-hackathon-"&gt;
  &lt;/a&gt;
  Tricks/tips I learn't in hackathon :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Do something that you are good at&lt;/li&gt;
&lt;li&gt;Teams are good but If you think you can do it alone go for it, because it will save a lot of time&lt;/li&gt;
&lt;li&gt;Keep your code simple and stupid&lt;/li&gt;
&lt;li&gt;Be confident and cool&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>incubateind</category>
    </item>
    <item>
      <title>Getting Started with Aerospike Enterprise Edition On Docker Desktop</title>
      <author>Mark Prince</author>
      <pubDate>Thu, 15 Apr 2021 17:41:58 +0000</pubDate>
      <link>https://dev.to/aerospike/getting-started-with-aerospike-enterprise-edition-on-docker-desktop-14i0</link>
      <guid>https://dev.to/aerospike/getting-started-with-aerospike-enterprise-edition-on-docker-desktop-14i0</guid>
      <description>&lt;p&gt;What‚Äôs the fastest way to start using &lt;a href="https://www.aerospike.com/products/database-platform/"&gt;Aerospike Database Enterprise Edition&lt;/a&gt;? The title gives it away: spin up a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container! Let‚Äôs get you from zero to running your own Aerospike Enterprise Edition instance in &amp;lt;10 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-a-free-enterprise-edition-license"&gt;
  &lt;/a&gt;
  Get a Free Enterprise Edition License
&lt;/h2&gt;

&lt;p&gt;Click the &lt;a href="https://www.aerospike.com/lp/try-now/"&gt;Try Now&lt;/a&gt; button in the upper-right corner of &lt;a href="https://www.aerospike.com/"&gt;aerospike.com&lt;/a&gt;, enter your contact information and select the Enterprise Edition option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDgDCqkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/try_now.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img width="115" height="47" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDgDCqkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/try_now.png%3Fraw%3Dtrue"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#download-the-evaluation-license-file"&gt;
  &lt;/a&gt;
  Download the Evaluation License File
&lt;/h2&gt;

&lt;p&gt;Check your email and click to download the evaluation license file. The downloaded file is named &lt;em&gt;evaluation-features.conf&lt;/em&gt;. This is your license to run a fully loaded single node of Aerospike Enterprise Edition (EE). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSjy1H22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/as_ee_welcome.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSjy1H22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/as_ee_welcome.png%3Fraw%3Dtrue" alt="Welcome to the Aerospike Family"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-volume-to-share-with-the-docker-container"&gt;
  &lt;/a&gt;
  Create a Volume to Share with the Docker Container
&lt;/h2&gt;

&lt;p&gt;Open your Terminal or Windows Linux Subsystem prompt. Use &lt;code&gt;mkdir&lt;/code&gt; (or &lt;code&gt;sudo mkdir&lt;/code&gt;, if necessary)  to create a new directory. I created the directory named EE_eval_file in my home directory. Use &lt;code&gt;cp&lt;/code&gt; or &lt;code&gt;sudo cp&lt;/code&gt; to copy the &lt;em&gt;evaluation-features.conf&lt;/em&gt; into the new directory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: A best practice is to create &lt;code&gt;/opt/aerospike/etc&lt;/code&gt;, because this mirrors the standard location for the &lt;em&gt;evaluation-features.conf&lt;/em&gt; file on an Aerospike server. To create that directory, use the command &lt;code&gt;sudo mkdir -p /opt/aerospike/etc&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#install-docker-desktop-amp-share-the-evaluation-features-directory"&gt;
  &lt;/a&gt;
  Install Docker Desktop &amp;amp; Share the Evaluation Features Directory
&lt;/h2&gt;

&lt;p&gt;Download and install &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Docker Desktop, go to Preferences ‚Üí Resources ‚Üí File Sharing. Click &lt;code&gt;+&lt;/code&gt; and browse to the directory you created in the previous step to hold your &lt;em&gt;evaluation-features.conf&lt;/em&gt; file. (Hold Command + Shift when you click to show hidden directories.) To apply the change, click Apply &amp;amp; Restart. Now your EE container will be able to access your evaluation license.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXzMzgig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_file_share.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXzMzgig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_file_share.png%3Fraw%3Dtrue" alt="Docker Preferences Showing New Share"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can close Docker Desktop. You will do the rest from the command line.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pull-and-spin-up-an-enterprise-edition-container"&gt;
  &lt;/a&gt;
  Pull and Spin Up an Enterprise Edition Container
&lt;/h2&gt;

&lt;p&gt;Pull the EE image from the Docker Hub registry using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull aerospike/aerospike-server-enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aerospike maintains a set of images and Docker does the grunt work of downloading and verifying the EE image. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySwDOX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_ee.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySwDOX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_ee.png%3Fraw%3Dtrue" alt="Screencap of Docker Pull EE"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Now, you‚Äôre ready to spin up your EE container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker run -tid --name aerospike -p 3000:3000 -p 3001:3001 -p 3002:3002 -v &amp;lt;DIRECTORY&amp;gt;:/aerospike/etc/ -e "FEATURE_KEY_FILE=/aerospike/etc/evaluation-features.conf" -e "NAMESPACE=aerospike-demo" aerospike/aerospike-server-enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the text &lt;code&gt;&amp;lt;DIRECTORY&amp;gt;&lt;/code&gt; with the absolute path to the directory containing your &lt;em&gt;evaluation-features.conf&lt;/em&gt; file. If using Windows Linux Subsystem, make sure to use your Windows backslashes and drive designations. &lt;/p&gt;

&lt;p&gt;Here‚Äôs the &lt;a href="https://docs.docker.com/engine/reference/commandline/run/"&gt;docker run reference&lt;/a&gt;, and the &lt;a href="https://github.com/aerospike/aerospike-server-enterprise.docker"&gt;repo and README.md for the EE dockerfile&lt;/a&gt; so you can tailor the command to better suit your evaluation.&lt;/p&gt;

&lt;p&gt;After you type in your password for the sudo, Docker returns the container ID.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGSb8vsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_run_ee.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGSb8vsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_run_ee.png%3Fraw%3Dtrue" alt="Screencap of Docker Run EE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, your EE container should be running. Verify with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_fczlxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_ps.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_fczlxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_ps.png%3Fraw%3Dtrue" alt="Screencap of Docker PS"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-i-have-ee-running-now-what"&gt;
  &lt;/a&gt;
  Okay, I have EE running, now what?
&lt;/h2&gt;

&lt;p&gt;It‚Äôs play time! :) Let‚Äôs add a record and read it using the aerospike-tools Docker Container. First, grab the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull aerospike/aerospike-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZdEg9Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_tools.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZdEg9Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_tools.png%3Fraw%3Dtrue" alt="Screencap of Docker Pull Tools"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Next, spin up a new container running &lt;a href="https://www.aerospike.com/docs/tools/aql/index.html"&gt;AQL&lt;/a&gt;, the Aerospike command-line data browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it aerospike/aerospike-tools aql -h  $(docker inspect -f '{{.NetworkSettings.IPAddress }}' aerospike)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since AQL is running in a different container from the instance of EE, the above command uses &lt;a href="https://docs.docker.com/engine/reference/commandline/inspect/"&gt;docker inspect&lt;/a&gt; to find the IP address of your EE container, and passes it to AQL using the &lt;a href="https://www.aerospike.com/docs/tools/aql/aql-help.html"&gt;-h option&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, you can type interactive commands into AQL in your Terminal or WLS prompt. Insert a record into Aerospike EE using the following &lt;a href="https://www.aerospike.com/docs/architecture/data-model.html"&gt;data model&lt;/a&gt;:&lt;br&gt;
Namespace ‚Äì &lt;em&gt;aerospike-demo&lt;/em&gt; (set in the first docker run command) &lt;br&gt;
Set name ‚Äì &lt;em&gt;foo&lt;/em&gt; &lt;br&gt;
Bin name ‚Äì &lt;em&gt;bar&lt;/em&gt;&lt;br&gt;
Primary key ‚Äì &lt;em&gt;123&lt;/em&gt;&lt;br&gt;
String data ‚Äì &lt;em&gt;‚Äòw00t!‚Äô&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into aerospike-demo.foo (PK, bar) values (123, 'w00t!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and view all data in the namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from aerospike-demo.foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2X8t9yD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/aql_w00t.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2X8t9yD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/aql_w00t.png%3Fraw%3Dtrue" alt="Screencap of Insert and Select"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps...
&lt;/h2&gt;

&lt;p&gt;Now that Aerospike Enterprise Edition is running, you can download and install an &lt;a href="https://www.aerospike.com/download/client/"&gt;Aerospike client&lt;/a&gt;, and then REALLY put your Aerospike EE to work. &lt;/p&gt;

&lt;p&gt;Do you want to learn more about using Aerospike Database? Check out our &lt;a href="https://www.developer.aerospike.com/"&gt;Developer Hub&lt;/a&gt;. There‚Äôs a wealth of resources available there to jump-start your Aerospike education! I‚Äôm excited for you. If you have any questions, feel free to post on the &lt;a href="https://discuss.aerospike.com/"&gt;Forums&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy efficient management of data at scale!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://unsplash.com/photos/7iatBuqFvY0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Yaoqi&lt;/a&gt; for the match.&lt;/p&gt;

</description>
      <category>aerospike</category>
      <category>database</category>
      <category>datascience</category>
      <category>nosql</category>
    </item>
    <item>
      <title>My most frequent React errors and how you fix them</title>
      <author>Kieran Roberts üëã</author>
      <pubDate>Thu, 15 Apr 2021 17:29:36 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/my-most-frequent-react-errors-and-how-you-fix-them-3epp</link>
      <guid>https://dev.to/kieran6roberts/my-most-frequent-react-errors-and-how-you-fix-them-3epp</guid>
      <description>&lt;p&gt;When using the popular JavaScript library &lt;strong&gt;React&lt;/strong&gt; there are some errors/problems that seem to pop up time and time again. They can be easily avoided in most situations and I would like to share them with you so you can spend less time debugging and more time writing code.&lt;/p&gt;

&lt;p&gt;So let's not waste any time and take a look at our problems and how we can solve them üëè.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Forgetting to add keys with a list of elements&lt;/li&gt;
&lt;li&gt;Not returning a list correctly&lt;/li&gt;
&lt;li&gt;Not cleaning up certain &lt;code&gt;useEffect&lt;/code&gt; side-effects&lt;/li&gt;
&lt;li&gt;Not wrapping adjacent JSX elements&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-forgetting-to-add-keys-with-a-list-of-elements"&gt;
  &lt;/a&gt;
  1) Forgetting to add keys with a list of elements
&lt;/h2&gt;

&lt;p&gt;In React we often find ourselves with lists of data that we want to map into elements or components. This is often done using the &lt;code&gt;Array.prototype.map&lt;/code&gt; function to pass data from each index of the array to the element or component through props.&lt;/p&gt;

&lt;p&gt;When we do this without adding a &lt;code&gt;key&lt;/code&gt; prop React will complain that each element is missing a &lt;code&gt;key&lt;/code&gt;. Essentially it is just a special attribute to which we pass a string. It should be a unique string which will distinguish it from its siblings that we are also mapping.&lt;/p&gt;

&lt;p&gt;React says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;Let's map some data before adding keys to our elements to see the problem in action. Here we will have a simple component that deconstructs &lt;code&gt;foods&lt;/code&gt; from the prop object. &lt;code&gt;foods&lt;/code&gt; is just an array of objects and it looks like this üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1GhQvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616319710734/6rUdcew2_.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1GhQvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616319710734/6rUdcew2_.jpeg" alt="Our example data set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and our component üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED6HjWVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097340131/FXRGm0Ja8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED6HjWVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097340131/FXRGm0Ja8.jpeg" alt="mapped elements without key prop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and finally the warning from React üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u884G_H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097229831/VhLrfT86h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u884G_H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097229831/VhLrfT86h.jpeg" alt="missing key warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;To fix this all we have to do is pass a unique key to the element we are returning. Often the data we are mapping comes from a fetch request and usually includes an id. Fortunately we have and &lt;code&gt;id&lt;/code&gt; property we can use from our set of data. Let's add our &lt;code&gt;key&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DlVIKOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616320768295/os2fTkk5n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DlVIKOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616320768295/os2fTkk5n.jpeg" alt="After adding our key prop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we didn't have a unique id we would need to have an alternative solution. Often people use the index of the array as the &lt;code&gt;key&lt;/code&gt; but this is not recommended for any set of data where positions in the list  may change. It can negatively affect the state of the component. See here for more information &lt;a href="https://reactjs.org/docs/reconciliation.html#recursing-on-children"&gt;Reactjs - Reconciliation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead we could create our key by combining the &lt;code&gt;name&lt;/code&gt; property with the current date/time using the JavaScript &lt;code&gt;Date&lt;/code&gt; object. You could also use a package like &lt;a href="https://www.npmjs.com/package/nanoid"&gt;nanoid&lt;/a&gt; that generates unique string id's for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-not-returning-a-list-correctly"&gt;
  &lt;/a&gt;
  2) Not returning a list correctly
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To return or not to return&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In React as we have already seen we are often iterating over some data . Perhaps we are filtering a data set down to a specific sub-set or mapping to the DOM. Whatever it is there are a few pitfalls we need to watch out for when it comes to returning our data otherwise we might be left scratching our heads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;A frustrating example can be seen when we map a data set to some elements or components. We expect to see the or elements on screen with the data we map into them. However we see nothing.&lt;/p&gt;

&lt;p&gt;No error, no warning no data ü§®. In this situation it is likely that you're not returning your result correctly.&lt;/p&gt;

&lt;p&gt;For our example we will be mapping our array of foods to some elements so we can show it to the user. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJHc8sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091546766/lvvPV1DEv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJHc8sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091546766/lvvPV1DEv.jpeg" alt="Correct return demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead our data will appear to be missing üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrbDA1Nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091661813/ixeEBjbHO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrbDA1Nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091661813/ixeEBjbHO.jpeg" alt="Incorrect return demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me show you some examples where we won't see the output that we were expecting. We are passing our array to our component and destructuring it from the prop object the same as before.&lt;/p&gt;

&lt;p&gt;Can you spot the problem below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13eYTBhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322199327/hc-IGwpvu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13eYTBhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322199327/hc-IGwpvu.jpeg" alt="Example of not returning correclty"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Correct! Here we are not returning anything either implicitly or explicitly using the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Let's take a look at another  üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCvXLHkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322293046/tFRUeU4F9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCvXLHkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322293046/tFRUeU4F9.jpeg" alt="Second example of not returning correctly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time we include the &lt;code&gt;return&lt;/code&gt; keyword but what we are actually doing here is returning &lt;code&gt;undefined&lt;/code&gt;. The code below the return statement never gets read.&lt;/p&gt;

&lt;p&gt;There are other examples you might run into but let's take a look at the different solutions we can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Let's start with the explicit returns. If we move our &lt;code&gt;article&lt;/code&gt; element in line with the return statement all is well. &lt;/p&gt;

&lt;p&gt;See below üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUWIPmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322563273/b5DhsigYN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUWIPmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322563273/b5DhsigYN.jpeg" alt="Example of correct explicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could also wrap the return elements with parenthesis like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hR0wtrDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322655801/uSlQpxqxJ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hR0wtrDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322655801/uSlQpxqxJ.jpeg" alt="Example of correct explicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to return the result implicitly which means we can forget the &lt;code&gt;return&lt;/code&gt; statement and the function body curly braces. Check it out üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Adx8GgLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322842007/nwRlqVGQN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Adx8GgLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322842007/nwRlqVGQN.jpeg" alt="Example of correct implicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or inline like this üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNvyYPGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322878711/54EU5aA4P.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNvyYPGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322878711/54EU5aA4P.jpeg" alt="Example of correct implicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The choice is up to you as long as you are aware of the possible pitfalls you encounter. If the data appears to be missing make sure you check your map function carefully and make sure you are actually returning correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-not-cleaning-up-certain-raw-useeffect-endraw-sideeffects"&gt;
  &lt;/a&gt;
  3) Not cleaning up certain &lt;code&gt;useEffect&lt;/code&gt; side-effects
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook allows us to perform side-effects inside functional components. Certain side-effects that we perform in this hook require cleanup. This means that when the component unmounts we can run a special function. Sometimes this is necessary otherwise we might see an error warning us of memory leaks in our apps.&lt;/p&gt;

&lt;p&gt;Consider a &lt;code&gt;useEffect&lt;/code&gt; that performs some kind of asynchronous api call before setting some component state to the response. If the response is slow and the component unmounts before we receive a response then we might be trying to update the state of a component that is not mounted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;Let's take a look at two different situations where we might add some cleanup to our &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first is a situation is where we have an asynchronous fetch request inside our &lt;code&gt;useEffect&lt;/code&gt; hook. The user of the application navigates to a different page before we receive the response from the fetch call. This is our component before we add a cleanup function to the&lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hX36OEbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616093842029/q9hZoLWhz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hX36OEbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616093842029/q9hZoLWhz.jpeg" alt="React useEffect before cleanup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are fetching some data after the component mounts and then using the result to set the components state. Finally we map the state to the DOM. Relatively straight forward üëç.&lt;/p&gt;

&lt;p&gt;The second situation is where we add some &lt;code&gt;eventListeners&lt;/code&gt; to some DOM elements. If the component unmounts we are going to want to remove these listeners.&lt;/p&gt;

&lt;p&gt;Check it out before we clean it up üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDc49Psc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148044886/8QpSp5s1C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDc49Psc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148044886/8QpSp5s1C.jpeg" alt="Before adding our cleanup function to useEffect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic inside our &lt;code&gt;useEffect&lt;/code&gt; is irrelevant for this simple example. All that matters is that we are adding an event listener and that will need to be cleaned up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;We begin by adding a cleanup function to our &lt;code&gt;useEffect&lt;/code&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyKlNVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094306440/CsabPIn7C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyKlNVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094306440/CsabPIn7C.jpeg" alt="useEffect cleanup function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is simply a function that we add to the bottom of our &lt;code&gt;useEffect&lt;/code&gt; hook where we add our cleanup logic.&lt;/p&gt;

&lt;p&gt;Now to cleanup our fetch request we can use the DOM api &lt;code&gt;AbortController&lt;/code&gt; which is available in JavaScript. It allows us to abort web requests which we will use to abort out of the fetch request whenever the component unmounts. Let's see it in action üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fepf-K5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094823496/Bj_AASqiD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fepf-K5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094823496/Bj_AASqiD.jpeg" alt="React useEffect fetch cleanup function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First we create a controller by using the constructor with &lt;code&gt;new AbortController()&lt;/code&gt; and then we pass its property signal to the fetch request. This association of controller signal to the request allows us to abort the request by calling &lt;code&gt;abort()&lt;/code&gt; inside the cleanup function.&lt;/p&gt;

&lt;p&gt;Now we are ensuring that we don't have any requests coming back to a component that is not mounted.&lt;/p&gt;

&lt;p&gt;The cleanup function for our &lt;code&gt;eventListener&lt;/code&gt; example is simple which you might have already guessed. All we need to do is remove any listeners we create using &lt;code&gt;removeEventListener&lt;/code&gt; in our cleanup function. Let's see it in action üëá.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEhOYtjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616095810890/1r2ISzE03.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEhOYtjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616095810890/1r2ISzE03.jpeg" alt="React useEffect listener cleanup example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now like me you won't forget to clean up your effects üòâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-wrapping-adjacent-jsx-elements"&gt;
  &lt;/a&gt;
  4) Not wrapping adjacent JSX elements
&lt;/h2&gt;

&lt;p&gt;This one is simple to debug but I though I would include it because I sometimes forget to do it until React starts shouting at me üòÖ. &lt;/p&gt;

&lt;p&gt;Adjacent JSX elements must be wrapped with an enclosing tag. There are a few different ways we can do this based on our requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;If we want the wrapper to be part of the DOM for structural purposes then go with some semantic element where possible (&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; etc.). I usually wouldn't recommend wrapping elements with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; although it is fine if you want the wrapper for styling purposes.&lt;/p&gt;

&lt;p&gt;Often we do not want the wrapper to part of the DOM because it serves no purpose there. We would only be adding markup only to shut React up. &lt;/p&gt;

&lt;p&gt;Let's see the problem in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tm6r-Oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148632836/OIPeZEhWo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tm6r-Oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148632836/OIPeZEhWo.jpeg" alt="Example component not wrapping adjacent JSX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the error it throws üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysipratn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616324446263/8d7lh2I4s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysipratn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616324446263/8d7lh2I4s.jpeg" alt="Adjacent JSX error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is likely that your code editor gave you a warning about this before the error pops up which is great.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Fortunately React provides us with a solution. We can use &lt;code&gt;React.Fragment&lt;/code&gt; to wrap our adjacent JSX if we do not require the wrapper to be part of the DOM. Let's say this is the case for the following example.  &lt;/p&gt;

&lt;p&gt;First let's use &lt;code&gt;React.Fragment&lt;/code&gt; before we see how we can simplify it further.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZHMSMhcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151255932/oiUWsfKSg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZHMSMhcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151255932/oiUWsfKSg.jpeg" alt="Wrapping adjacent JSX with React.Fragment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we don't need any attributes or keys for our fragment we can shorten &lt;code&gt;React.Fragment&lt;/code&gt; to this &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; empty tag. Have a look below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9bCpxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151408216/ZujqMuMMe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9bCpxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151408216/ZujqMuMMe.jpeg" alt="Wrapping adjacent JSX with React.Fragment shortened syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally if we are mapping some data to JSX as we have previously seen then we need to add keys to our wrapping element. If all we have is adjacent JSX then we can wrap our elements with &lt;code&gt;React.Fragment&lt;/code&gt; and add a unique key to the fragment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk_eiifG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616152071199/3FGAy87WV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk_eiifG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616152071199/3FGAy87WV.jpeg" alt="Wrapping our mapped adjacent JSX with React.fragment and a unique key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for getting this far! I hope you learned something from the article and now we can both make sure we avoid these problems in our future code.&lt;/p&gt;

&lt;p&gt;If you enjoyed it feel free to drop a üëç on the article. It inspires me to continue improving and make more awesome content.&lt;/p&gt;

&lt;p&gt;If you would like to connect with me then come an say hi &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt; as I am always active in communicating with other devs over on Twitter.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Managing View State With Combine</title>
      <author>Omar üëæ</author>
      <pubDate>Thu, 15 Apr 2021 17:25:06 +0000</pubDate>
      <link>https://dev.to/obscured_pixels/managing-view-state-with-combine-p8k</link>
      <guid>https://dev.to/obscured_pixels/managing-view-state-with-combine-p8k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#data-flow"&gt;
  &lt;/a&gt;
  Data Flow
&lt;/h3&gt;

&lt;p&gt;SwiftUI's built in state management system does a great a job in providing an out of the box data flow solution that alleviates a lot of the pain points associated with manually updating UI based on state changes. &lt;/p&gt;

&lt;p&gt;As your codebase grows and you find yourself leaning towards incorporating common architectural patterns, you'll likely come across the need to separate some state specific logic into a view model. Swift's Combine framework provides some great property wrappers to ease this transition via &lt;code&gt;@PublishSubject&lt;/code&gt; and &lt;code&gt;@ObservedObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some great articles that go into depth about these topics. I highly suggest you check them out if you aren't yet familiar with these concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://swiftwithmajid.com/2020/02/05/building-viewmodels-with-combine-framework/"&gt;Building ViewModels with Combine framework - Majid Jabrayilov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raywenderlich.com/4161005-mvvm-with-combine-tutorial-for-ios"&gt;MVVM with Combine Tutorial for iOS - Rui Peres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.donnywals.com/using-custom-publishers-to-drive-swiftui-views/"&gt;Using custom publishers to drive SwiftUI views - Donny Wals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continuing where the articles left off, I've put together a &lt;code&gt;TodoListView&lt;/code&gt; that observes and reacts to a &lt;code&gt;ViewState&lt;/code&gt; published by its &lt;code&gt;ViewModel&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct TodoListView: View {
    @ObservedObject
    private var viewModel = ViewModel()
    var body: some View {
        content(viewModel.viewState)
            .onAppear {
                viewModel.loadTodos()
            }
    }

    @ViewBuilder
    private func content(_ state: ViewState) -&amp;gt; some View {
        switch state {
        case .loading:
            ProgressView()
        case .error:
            Text("Oops something went wrong")
                .padding()
        case .content(let todos):
            List {
                ForEach(todos) { todo in
                    Text(todo.title)
                }
            }
        }
    }
}

extension TodoListView {
    enum ViewState {
        case loading
        case content(todos: [Todo])
        case error
    }

    class ViewModel: ObservableObject {
        @Published
        var viewState: ViewState = .loading
        private let todoRepository = TodoRepistory()
        private var cancellables = Set&amp;lt;AnyCancellable&amp;gt;()

        func loadTodos() {
            self.viewState = .loading
            todoRepository.getTodos()
                .sink { [weak self] completion in
                    switch completion {
                    case .failure:
                        self?.viewState = .error
                    case .finished:
                        ()
                    }
                } receiveValue: { [weak self] todos in
                    self?.viewState = .content(todos: todos)
                }
                .store(in: &amp;amp;cancellables)
        }

        // ....
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This setup already has some great benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;code&gt;View&lt;/code&gt; is free of any state management logic. This allows us to unit test and even share that logic between other views&lt;/li&gt;
&lt;li&gt;By conforming to the &lt;code&gt;ObservableObject&lt;/code&gt; protocol and leveraging the &lt;code&gt;@Published&lt;/code&gt; property wrapper, we've managed to make that separation easily consumable by our View. It works very similar to reacting off a &lt;code&gt;@State&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;We've got a nice repeatable pattern that we can apply to future views that require complex logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we can definitely call it a day and move on, you might find yourself wondering what other patterns can we apply here that further adhere to the reactive mantra&lt;/p&gt;

&lt;p&gt;I want to highlight that what I'm about to showcase is pretty much a Combine + SwiftUI remix of Jake Wharton's outstanding talk &lt;a href="https://www.youtube.com/watch?v=0IKHxjkgop4"&gt;Managing State with RxJava&lt;/a&gt;. It's about an hour but I can't emphasize enough how amazing his presentation is and how much it inspired me to apply reactive programming to more than just networking and repository logic. It's in Java but thanks to the language's verbosity it's possible to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#room-for-improvement"&gt;
  &lt;/a&gt;
  Room for improvement
&lt;/h3&gt;

&lt;p&gt;Looking at the current state of our view model there are a few things that seem unnatural:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func loadTodos() {
    self.viewState = .loading
    todoRepository.getTodos()
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] todos in
            self?.viewState = .content(todos: todos)
        }
        .store(in: &amp;amp;cancellables)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting state outside of the stream seems misplaced and requires one to remember to revert the loading state during success and failure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ..
func addTodo(title: String) {
    todoRepository.addTodo(title: title)
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] todo in
            if case .content(var todos) = self?.viewState {
                todos.append(todo)
                self?.viewState = .content(todos: todos)
            }
        }
        .store(in: &amp;amp;cancellables)
}

func removeTodo(id: String) {
    todoRepository.removeTodo(id: id)
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] _ in
            if case .content(var todos) = self?.viewState {
                todos.removeAll(where: { $0.id == id})
                self?.viewState = .content(todos: todos)
            }
        }
        .store(in: &amp;amp;cancellables)
}
// ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our view model grows in functionality, you'll notice our code will quickly get heavy with boilerplate subscription code. While we could clean this up and utilize the&lt;code&gt;assign(to:)&lt;/code&gt; operator, they'd still be another peculiar characteristic of our state management; the lack of a centralized view state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1zhcD17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389298930/jy1pvpzuS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1zhcD17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389298930/jy1pvpzuS.png" alt="untitled@2x.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redux/Flux's unidirectional data flow pattern solves a lot of the complexities of having state mutated throughout various areas in the codebase, yet here we are updating our view state throughout various areas of our view model.  &lt;/p&gt;

&lt;p&gt;How can we adjust our state management approach to alleviate these concerns?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs-actions-and-viewstate"&gt;
  &lt;/a&gt;
  Inputs, Actions and ViewState
&lt;/h3&gt;

&lt;p&gt;Looking at our &lt;code&gt;TodoListView&lt;/code&gt; from a behavioral point of view, we can quickly identify some common cause and effect patterns. When a user loads the view, they'd request a list of Todos. When a user adds a Todo, the list will update with the newly added list etc. We could summarize that a user triggered input is causing our app or view model to respond and react to it, resulting in an updated view state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxoW4LiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389802248/3wTfvQzOV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxoW4LiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389802248/3wTfvQzOV.png" alt="untitled@2x (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sort of pattern is reactive in nature. Inputs can be happening in more than one place at a time and processing those inputs might require async operations. Reactive frameworks like Combine were made for these sort of circumstances and come with some handy operators that can help us gel this pattern into a consumable reactive state.&lt;/p&gt;

&lt;p&gt;Let's see what an implementation that incorporates those operators might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extension TodoListView {
    enum ViewState {
        case loading
        case content(todos: [Todo])
        case error
    }

    enum Input {
        case stateRequested
        case todoAdded(title: String)
        case todoRemoved(id: String)
    }

    enum Action {
        case setState(ViewState)
        case addTodo(todo: Todo)
        case removeTodo(id: String)
    }

    class ViewModel: ObservableObject {
        @Published
        var viewState: ViewState = .loading
        private let todoRepository = TodoRepistory()
        private let inputSubject = PassthroughSubject&amp;lt;Input, Never&amp;gt;()
        private var cancellables = Set&amp;lt;AnyCancellable&amp;gt;()

        init() {
            inputSubject
                .flatMap { [todoRepository] input -&amp;gt; AnyPublisher&amp;lt;Action, Never&amp;gt; in
                    switch input {
                    case .stateRequested:
                        return todoRepository.getTodos()
                            .map { todos -&amp;gt; Action in
                                .setState(.content(todos: todos))
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    case .todoAdded(let title):
                        return todoRepository.addTodo(title: title)
                            .map { todo -&amp;gt; Action in
                                .addTodo(todo: todo)
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    case .todoRemoved(let id):
                        return todoRepository.removeTodo(id: id)
                            .map { _ -&amp;gt; Action in
                                .removeTodo(id: id)
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    }
                }
                .scan(viewState) { (currentState, action) -&amp;gt; ViewState in
                    switch action {
                    case .setState(let state):
                        return state
                    case .addTodo(let todo):
                        if case .content(var todos) = currentState {
                            todos.append(todo)
                            return .content(todos: todos)
                        }
                        return currentState
                    case .removeTodo(let id):
                        if case .content(var todos) = currentState {
                            todos.removeAll(where: { $0.id == id })
                            return .content(todos: todos)
                        }
                        return currentState
                    }
                }
                .receive(on: DispatchQueue.main)
                .assign(to: &amp;amp;$viewState)
        }

        func send(_ input: Input) {
            inputSubject.send(input)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are quite a few things going on here, so let's walk through them step by step.&lt;/p&gt;

&lt;p&gt;We first create an entity to describe possible inputs that can occur to our view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    enum Input {
        case stateRequested
        case todoAdded(title: String)
        case todoRemoved(id: String)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These inputs can end up affecting our view state. Let's call these effects actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    enum Action {
        case setState(ViewState)
        case addTodo(todo: Todo)
        case removeTodo(id: String)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to process these inputs in a reactive stream, we create a &lt;code&gt;PassthroughSubject&lt;/code&gt;, which is a subject that broadcasts elements downstream. This works well for our use case as we would like to channel inputs downstream to be processed into possible actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private let inputSubject = PassthroughSubject&amp;lt;Input, Never&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we init our view model, we subscribe to these emissions and process them via the &lt;code&gt;flatMap&lt;/code&gt; operator. Each input is processed differently. This is why representing our inputs as an enum helps us make sure we account for every possible variation and will remind us in the future to account for newly added inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inputSubject
    .flatMap { [todoRepository] input -&amp;gt; AnyPublisher&amp;lt;Action, Never&amp;gt; in
        switch input {
        case .stateRequested:
            return todoRepository.getTodos()
                .map { todos -&amp;gt; Action in
                    .setState(.content(todos: todos))
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        case .todoAdded(let title):
            return todoRepository.addTodo(title: title)
                .map { todo -&amp;gt; Action in
                    .addTodo(todo: todo)
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        case .todoRemoved(let id):
            return todoRepository.removeTodo(id: id)
                .map { _ -&amp;gt; Action in
                    .removeTodo(id: id)
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take note that we are transforming our stream here into a publisher of &lt;code&gt;&amp;lt;Action, Never&amp;gt;&lt;/code&gt;. This means that regardless of the input, the outcome of this step should result in one or many &lt;code&gt;Action&lt;/code&gt;s. The &lt;code&gt;Never&lt;/code&gt; lets the compiler know that we don't intend this subscription to ever error out. In theory it shouldn't. Any error that might occur in processing should be handled and accounted for(i.e displaying an error state in the view). &lt;/p&gt;

&lt;p&gt;This is where the &lt;code&gt;replaceError(with:)&lt;/code&gt;operator comes in to save the day. We can easily transform unexpected errors into a relevant action that will get applied to our view state. It's pretty neat and It always forces us to account for unhappy paths when putting together the view model logic.&lt;/p&gt;

&lt;p&gt;The final piece to the puzzle is the &lt;code&gt;scan&lt;/code&gt; operator. Each action can have an effect on our view state. Via the scan operator, we can process each action as there are emitted by publishers upstream and produce a new view state that we then assign to our &lt;code&gt;@Published&lt;/code&gt; view state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scan(viewState) { (currentState, action) -&amp;gt; ViewState in
    switch action {
    case .setState(let state):
        return state
    case .addTodo(let todo):
        if case .content(var todos) = currentState {
            todos.append(todo)
            return .content(todos: todos)
        }
        return currentState
    case .removeTodo(let id):
        if case .content(var todos) = currentState {
            todos.removeAll(where: { $0.id == id })
            return .content(todos: todos)
        }
        return currentState
    }
}
.assign(to: &amp;amp;$viewState)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are familiar with reducers, the above should look familiar. Instead of reducing multiple actions into one state, we are processing each action and producing a new state.&lt;/p&gt;

&lt;p&gt;As for our &lt;code&gt;TodoListView&lt;/code&gt;, the only change would be in how our view channels inputs to our view model via the &lt;code&gt;send(_ input: Input)&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ...
content(viewModel.viewState)
    .onAppear {
        viewModel.send(.stateRequested)
    }
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it. A view state management setup thats a bit more reactive, maybe too reactive. &lt;/p&gt;

&lt;p&gt;Some benefits to this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updates to view state are centralized in one area of the view model. This allows to leverage operators like &lt;code&gt;.receive(on:)&lt;/code&gt; and &lt;code&gt;removeDuplicates()&lt;/code&gt; to insure updates are on the main thread and avoid unnecessary view rebuilding&lt;/li&gt;
&lt;li&gt;As we add more inputs and actions, the compiler will complain until you account for them.&lt;/li&gt;
&lt;li&gt;The pattern forces you to account for both the happy and not so happy paths.&lt;/li&gt;
&lt;li&gt;And more that i'll explain in my next post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's quite a bit of stuff going on with this approach. I was super confused when I was first introduced to these concepts. If you find yourself scratching your head, I highly recommend you give the video by Jake a look, as he does a great job in explaining the concept in a lot more detail.&lt;/p&gt;

&lt;p&gt;I hope you found this article useful. This is my first attempt at blogging, so any feedback  and suggestions would be super useful. Follow me on &lt;a href="https://twitter.com/obscured_pixels"&gt;Twitter&lt;/a&gt; for future updates and articles.&lt;/p&gt;

&lt;p&gt;In my next post, I'll go over some of the extra benefits of this pattern, namely side effects and how they fit well for related tasks such as event tracking. I'll also share some tips on how to make this approach a lot less boilerplate&lt;/p&gt;

&lt;p&gt;stay tuned.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
    </item>
    <item>
      <title>¬øQu√© es Back-End y Front-End? </title>
      <author>Arturo Gamboa</author>
      <pubDate>Thu, 15 Apr 2021 17:22:21 +0000</pubDate>
      <link>https://dev.to/theriusblackers/que-es-back-end-y-front-end-52g2</link>
      <guid>https://dev.to/theriusblackers/que-es-back-end-y-front-end-52g2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bienvenida"&gt;
  &lt;/a&gt;
  Bienvenida
&lt;/h1&gt;

&lt;p&gt;¬°Hi devs! ¬øc√≥mo est√°n? Hoy les quiero dar un peque√±o bosquejo, sobre Back-end y Front-end, a menudo me topo con gente que no sabe la diferencia  o si acaso la existencia de los t√©rminos; cuando empec√© en este hermoso mundo de los desarrolladores, tambi√©n me vi algo perdido, busqu√© durante algo de tiempo sin respuestas claras, ahora, casi un a√±o desde que empec√© estoy claro del asunto, y quiero ayudar a otros; as√≠ que, ¬°vamos all√°!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#definici%C3%B3n"&gt;
  &lt;/a&gt;
  definici√≥n
&lt;/h1&gt;

&lt;p&gt;Estos dos t√©rminos,Back-End y Front-End, son en realidad categor√≠as, separan grandes cantidades de: Lenguajes, Pre-procesadores,DB (Base de Datos en Espa√±ol), pero, ¬øen realidad qu√© son, o qu√© significan estos t√©rminos? &lt;strong&gt;Frontend es la parte de un sitio web que interact√∫a con los usuarios, por eso decimos que est√° del lado del cliente. Backend es la parte que se conecta con la base de datos y el servidor que utiliza dicho sitio web, por eso decimos que el backend corre del lado del servidor.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#el-problema"&gt;
  &lt;/a&gt;
  El problema
&lt;/h2&gt;

&lt;p&gt;Esa fue la explicaci√≥n de Google, muchas veces buscamos t√©rminos y lenguajes de programaci√≥n all√≠ para hacernos una idea, pero, en mi opini√≥n, un principiante no va a entender con exactitud esa explicaci√≥n; un principiante no sabe qu√© es un servidor, mucho menos una base de datos, as√≠ que cuando lea esa explicaci√≥n quedara igual o peor que cuando la busc√≥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mi-explicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Mi explicaci√≥n
&lt;/h2&gt;

&lt;p&gt;La verdad, simplificar esos t√©rminos no es ni dif√≠cil ni f√°cil; solo requiere de una explicaci√≥n clara y precisa... Veras, si sabes Ingl√©s, te dar√°s cuenta que esos dos t√©rminos son de lo m√†s descriptivos, &lt;strong&gt;Back en Ingl√©s es la parte de atr√°s.&lt;/strong&gt; Y &lt;strong&gt;Front es frente, de lo que va adelante&lt;/strong&gt; entonces, podemos decir que Back-end es la parte de atr√°s de la p√°gina web, &lt;em&gt;es lo que no ve el Cliente (cliente se denomina la persona que visita tu p√°gina web)&lt;/em&gt; Front-end es &lt;strong&gt;Todo lo que ve el cliente.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMO8Ubp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuasexikbvh4pu1xkyec.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMO8Ubp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuasexikbvh4pu1xkyec.jpg" alt="Image of edteam.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esa es una buena demostraci√≥n gr√°fica de lo que es Back-end y Front-end,eso es totalmente cierto (la psicolog√≠a de la imagen), el Front-end es la parte de arriba, lo que hace manifiesto que existe algo, lo que se ve, si un iceberg no estuviese sobre el nivel del mar, ¬øacaso ver√≠amos uno? De ninguna manera, el Front-end es vital. Ahora, el iceberg no se sostiene de la parte de arriba (por eso mismo, porque est√† arriba), se sostiene de la parte de abajo, del Back-end; el Back-end es lo que "hace la magia" por as√≠ decirlo, el Back-end, de todas las cosas que hace, tambi√©n se encarga de guardar tus datos, gestionarlos y borrarlos, cuando en una p√°gina tienes una cuenta, y luego cierras sesi√≥n y luego vuelves a abrir sesi√≥n, ese es un ejemplo claro de Back-end, la base de datos manda la informaci√≥n guardada y la refleja en pantalla, el Back-end, en conlusi√≤n, es lo que mantiene viva la p√°gina web.&lt;/p&gt;

&lt;p&gt;Tambi√©n hay un problema, cuando estabas leyendo lo que dice la foto, creo que como yo la primera vez que la vi, solo entend√≠ uno o dos lenguajes de programaci√≥n, es casi 100% probable que al empezar, no supieras qu√© son cada cosa, y no puedas decir, mira esto es para esto y as√≠; pero eso no significa nada malo, de hecho significa que necesitas aprender mas, no tiene nada que ver que seas malo o bueno para que entiendas cada cosa que hay en la foto, solo significa algo, que estas en el buen camino, ¬°aprender es tu mejor herramienta! A ti que estas empezando, te animo a que sigas aprendiendo, y sobre todo, divierte en el camino y consigue amigos.&lt;/p&gt;

&lt;p&gt;Si tienes alguna duda, d√©jamela en los comentarios, con gusto la responder√© en cuando pueda, gracias por leer,esto es todo, hasta la pr√≥xima, ¬°Addio Devs!.  &lt;/p&gt;

</description>
      <category>backend</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
