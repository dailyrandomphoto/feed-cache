<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Scoping</title>
      <author>Dylan Oh</author>
      <pubDate>Wed, 29 Dec 2021 15:25:24 +0000</pubDate>
      <link>https://dev.to/ohdylan/javascript-scoping-3adl</link>
      <guid>https://dev.to/ohdylan/javascript-scoping-3adl</guid>
      <description>&lt;p&gt;According to MDN's definition, "scope" in JavaScript is the current context of execution. What does that actually mean? Scope defines the variables and values that are within your current accessibility, and it can also be referred to the environment of variables. Let's jump right into an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Dylan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a function called hello(), and we define a variable called "phrase" WITHIN the function. If we are trying to access the variable "phrase" from the outside of function, we are going to get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught ReferenceError: phrase is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is easy to understand right? From the global scope perspective, we do not know what is a "phrase". &lt;/p&gt;

&lt;p&gt;However, if we define a global variable, and try to use it inside the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dylan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;Dylan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here we know that, scopes follow hierarchy, where children layer can access the variables of parent, but not the other way round.&lt;/p&gt;

&lt;p&gt;In our last article (&lt;a href="https://dev.to/ohdylan/javascript-single-threaded-but-non-blocking-198e"&gt;JavaScript, Single Threaded but Non-Blocking&lt;/a&gt;), we mentioned that JavaScript engine has call stack of function execution contexts. A global variable environment is also introduced when global execution context is created. If we define a global variable now, this variable will be added under the global object (window object for browser).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-yrOxRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2nfns5cwlvgsa58zdic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-yrOxRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2nfns5cwlvgsa58zdic.png" alt="Image description" width="480" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each execution context will have a local variable environment, which is known as local scope. If we try to access a variable in our current execution context, it will start looking for this variable within the local scope. If the variable is not found, it will go up to the parent scope to look for it. This is known as the scope chain. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the code is trying to look for the variable &lt;em&gt;a&lt;/em&gt;, since it is used in func2. After it has failed to find it within func2 scope, it will go up to func1 and found it (a = 20). Therefore, the results of console log is 20.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Scope chain of execution contexts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN62kn__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6yonsn7wamla0oj36la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN62kn__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6yonsn7wamla0oj36la.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if we change our code to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is printing out 10 this time. Why is it so? We have to bring in another term called lexical scope, which is the scope that we determine where the function is defined, not called. In the first example, the func2 was defined within func1 and therefore, it will reach out to func1 to look for the variable that is not within its current scope. However in the second example, the func 2 was defined within the global scope (which is same level as func1), therefore it will look up to global scope for the missing variable. &lt;/p&gt;

&lt;p&gt;Hope this gives you a brief idea on how the JavaScript scoping works. In our future articles, I shall also bring in concepts like hoisting, closure, block scope and etc to give you a clearer picture (should have done in this article but was too busy, pardon me).&lt;/p&gt;

&lt;p&gt;Do follow me for more future articles on web design, programming and self-improvement 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>11 Html Tags You Must Know</title>
      <author>Codeflix</author>
      <pubDate>Wed, 29 Dec 2021 15:24:33 +0000</pubDate>
      <link>https://dev.to/codeflix/11-html-tags-you-must-know-58gc</link>
      <guid>https://dev.to/codeflix/11-html-tags-you-must-know-58gc</guid>
      <description>&lt;p&gt;Hello, Readers, sorry I was busy in some work so it got late. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's Get Started
&lt;/h2&gt;

&lt;p&gt;HTML attributes allow you to perform a lot more complex tasks directly on your HTML files. Here are some of the most useful ones to know!&lt;/p&gt;

&lt;p&gt;HTML is the building block of the web. Knowing some less-known, but useful parts of this markup language can make your life a lot easier. HTML attributes provide several features that can help you to get the most out of HTML. It defines additional characteristics or properties of an HTML element.&lt;/p&gt;

&lt;p&gt;In this article, you'll learn about 11 HTML attributes that you probably haven’t heard of yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-multiple"&gt;
  &lt;/a&gt;
  1. Multiple
&lt;/h2&gt;

&lt;p&gt;This attribute allows users to enter multiple values. You can use the multiple attribute with  tags and  tags. This boolean attribute is valid only for email or file input types.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-multiple-attribute-with-tag"&gt;
  &lt;/a&gt;
  Using multiple Attribute With  Tag
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="language"&amp;gt;Select languages:&amp;lt;/label&amp;gt;
&amp;lt;select name="language" id="language" multiple&amp;gt;
&amp;lt;option value="C++"&amp;gt;C++&amp;lt;/option&amp;gt;
&amp;lt;option value="Python"&amp;gt;Python&amp;lt;/option&amp;gt;
&amp;lt;option value="JavaScript"&amp;gt;JavaScript&amp;lt;/option&amp;gt;
&amp;lt;option value="Java"&amp;gt;Java&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-multiple-attribute-for-file-input"&gt;
  &lt;/a&gt;
  Using multiple Attribute for File Input
&lt;/h4&gt;

&lt;p&gt;By using the multiple attribute for file input, you can select multiple files (by holding the Shift or Ctrl keys).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" multiple&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-multiple-attribute-for-email-input"&gt;
  &lt;/a&gt;
  Using multiple Attribute for Email Input
&lt;/h4&gt;

&lt;p&gt;By using the multiple attribute for email input, you can enter a list of comma-separated email addresses. All the white spaces will be removed from each address in the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="email" multiple&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2contenteditable"&gt;
  &lt;/a&gt;
  2.Contenteditable
&lt;/h2&gt;

&lt;p&gt;You can make the HTML content editable on a web page using the contenteditable attribute. This is a global attribute, i.e, it's common to all HTML elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p contenteditable="true"&amp;gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna
aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3spellcheck"&gt;
  &lt;/a&gt;
  3.Spellcheck
&lt;/h2&gt;

&lt;p&gt;The spellcheck attribute specifies whether the element may be checked for spelling errors or not. You can spellcheck text in the  elements, text in the editable elements, or text in the input elements(except passwords).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p contenteditable="true" spellcheck="true"&amp;gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna
aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4dowmload"&gt;
  &lt;/a&gt;
  4.Dowmload
&lt;/h2&gt;

&lt;p&gt;You can download a resource using the download attribute. The download attribute tells the browser to download the specified URL instead of navigating to it. You can use the download attribute with &lt;a&gt; tag and  tag.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: The download attribute only works with same-origin URLs. It follows the rules of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;same-origin&lt;/a&gt; policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="xyz.png" download="myImage"&amp;gt;Download&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5accept"&gt;
  &lt;/a&gt;
  5.Accept
&lt;/h2&gt;

&lt;p&gt;The accept attribute of the  tag specifies the type of files a user can upload. You can specify a comma-separated list of one or more file types as its value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#accepting-an-audio-file"&gt;
  &lt;/a&gt;
  Accepting an Audio File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" id="audioFile" accept="audio/*"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accepting-a-video-file"&gt;
  &lt;/a&gt;
  Accepting a video file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" id="videoFile" accept="video/*"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accepting-an-image-file"&gt;
  &lt;/a&gt;
  Accepting an Image File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;input type="file" id="imageFile" accept="image/*"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accepting-a-microsoft-word-file"&gt;
  &lt;/a&gt;
  Accepting a Microsoft Word File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" id="docpicker"
accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accepting-png-or-jpeg-files"&gt;
  &lt;/a&gt;
  Accepting PNG or JPEG Files
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" id="imageFile" accept=".png, .jpg, .jpeg"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accepting-a-pdf-file"&gt;
  &lt;/a&gt;
  Accepting a PDF File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="file" id="pdfFile" accept&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-translate"&gt;
  &lt;/a&gt;
  6. translate
&lt;/h2&gt;

&lt;p&gt;The translate attribute tells the browser that the element should be translated or not when the page is localized. It can have 2 values: "yes" or "no".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p translate="no"&amp;gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna
aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-poster"&gt;
  &lt;/a&gt;
  7. poster
&lt;/h2&gt;

&lt;p&gt;The poster attribute is used to show an image while the video is downloading or until the user plays the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don't specify anything, nothing is displayed until the first frame is available. When the first frame is available, it's shown as the poster frame.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;video controls
src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"
poster="posterImage.png"&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-inputmode"&gt;
  &lt;/a&gt;
  8. inputmode
&lt;/h2&gt;

&lt;p&gt;The inputmode attribute indicates the browser which keyboard to display when a user has selected any input or textarea element. This attribute accepts various values:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#none"&gt;
  &lt;/a&gt;
  None
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="none" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#numeric"&gt;
  &lt;/a&gt;
  Numeric
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="numeric" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#tel"&gt;
  &lt;/a&gt;
  Tel
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="tel" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#decimal"&gt;
  &lt;/a&gt;
  Decimal
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="decimal" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#email"&gt;
  &lt;/a&gt;
  Email
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="email" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  URL
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="url" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" inputmode="search&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-pattern"&gt;
  &lt;/a&gt;
  9. pattern
&lt;/h2&gt;

&lt;p&gt;The pattern attribute of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element allows you to specify a regular expression for which the element's value will be validated against. You can use the pattern attribute with several input types like text, date, search, URL, tel, email, and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form&amp;gt;
&amp;lt;input name="username" id="username" pattern="[A-Za-z0-9]+"&amp;gt; 
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-autocomplete"&gt;
  &lt;/a&gt;
  10. autocomplete
&lt;/h2&gt;

&lt;p&gt;The autocomplete attribute specifies whether the browser should automatically complete the input based on user inputs or not. You can use the autocomplete attribute with several input types like text, search, URL, tel, email, password, date pickers, range, and color. You can use this attribute with the  elements or &lt;/p&gt; elements.&lt;br&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form&amp;gt;
&amp;lt;input name="username" id="username" pattern="[A-Za-z0-9]+"&amp;gt; 
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;
  &lt;a href="#11-autofocus"&gt;
  &lt;/a&gt;
  11. autofocus
&lt;/h2&gt;

&lt;p&gt;The autofocus attribute is a boolean attribute indicating that an element should be focused on page load. You can use this attribute with , , , , or  elements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-autofocus-attribute-with-input-element"&gt;
  &lt;/a&gt;
  Using autofocus Attribute With input Element
&lt;/h4&gt;



&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" autofocus&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h4&gt;
  &lt;a href="#using-autofocus-attribute-with-select-element"&gt;
  &lt;/a&gt;
  Using autofocus Attribute With select Element
&lt;/h4&gt;



&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;select name="languages" id="languages"&amp;gt;
&amp;lt;option value="C++"&amp;gt;
C++
&amp;lt;/option&amp;gt;
&amp;lt;option value="Python"&amp;gt;
Python
&amp;lt;/option&amp;gt;
&amp;lt;option value="JavaScript"&amp;gt;
JavaScript
&amp;lt;/option&amp;gt;
&amp;lt;option value="Java"&amp;gt;
Java
&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
Using autofocus Attribute With textarea Element
&amp;lt;textarea autofocus&amp;gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna
aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat.
&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  THE END
&lt;/h1&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>From zero to one. How to Deploy your MongoDB, Node, Strapi, NextJS app to Microsoft Azure.</title>
      <author>liliya-dev</author>
      <pubDate>Wed, 29 Dec 2021 15:18:26 +0000</pubDate>
      <link>https://dev.to/halolab/from-zero-to-one-how-to-deploy-your-mongodb-node-strapi-nextjs-app-to-microsoft-azure-4c7g</link>
      <guid>https://dev.to/halolab/from-zero-to-one-how-to-deploy-your-mongodb-node-strapi-nextjs-app-to-microsoft-azure-4c7g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#part-1-introduction-and-creating-all-required-for-migration-resources"&gt;
  &lt;/a&gt;
  Part 1. Introduction and creating all required for migration resources.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hi to everyone! This article will be helpful if you have little or no knowledge of cloud technologies.&lt;br&gt;
There are three main cloud providers: Google Cloud, AWS and Azure. Let’s imagine that your task is to move the application to Azure.&lt;br&gt;
Before continuing, note that the best way to familiarize with basic Azure cloud features, to gain a foundational knowledge of cloud services, and the way those services are provided with Microsoft Azure is to learn and pass &lt;strong&gt;&lt;em&gt;Exam AZ-900: Microsoft Azure Fundamentals&lt;/em&gt;&lt;/strong&gt;. The exam is for candidates who are just beginning to work with cloud-based solutions and services or are new to Azure. Azure Fundamentals can be used to prepare for other Azure role-based or specialty certifications, but it is not a prerequisite for any of them. All Microsoft Azure learning has two options: online, which is always free, and instructor-led, which is paid. Passing the exam and getting the certification is always paid. The price depends on the country. One more tip: learn it before migration because learning during the process is a bad idea. There is much to say about passing Microsoft exams, but I suggest we move on to the next step and explore the project structure. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project structure and reasons for migration to Azure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, let’s do a deep dive into the project structure before moving on.&lt;/p&gt;

&lt;p&gt;Front-end: NEXT.js app, hosted on Vercel.&lt;br&gt;
Back end: Strapi CMS + custom node scripts, hosted on Heroku&lt;br&gt;
DB: Mongo db hosted on Mongo Atlas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The common problems with current providers include:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;  No simple ways to spread application to multiply regions and elastically scale the capacity based on demand.&lt;/li&gt;
&lt;li&gt;  No static inbound and outbound IP addresses (only via proxy), which I needed to secure back-end and DB connections.&lt;/li&gt;
&lt;li&gt;  No obvious ways to give separate accesses to resources, based on roles.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;First steps to start to work with Azure, regardless wich computing services you choose to host applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly go to &lt;a href="https://azure.microsoft.com/"&gt;Microsoft Azure Portal&lt;/a&gt; and create the account. After you complete the registration, you will have a single tenant ID associated with your account, which will not change unless you ask Microsoft to delete your account. &lt;strong&gt;&lt;em&gt;Tenant&lt;/em&gt;&lt;/strong&gt; is associated with a single identity (person, company, or organization) and can own one or several &lt;strong&gt;&lt;em&gt;subscriptions&lt;/em&gt;&lt;/strong&gt;. At this step you will only have one subscription. An Azure subscription is a logical container used to provision resources in Azure. It holds the details of all your resources like virtual machines (VMs), databases, and more. When you create an Azure resource like a VM, you identify the subscription it belongs to. A subscription is linked to a payment setup and each subscription will result in a separate bill and can use different payment methods. Resources from one subscription are isolated from resources in other subscriptions.&lt;br&gt;
  During the registration in Azure you may choose to get 200$ dollars on balance of the default subscription that you can spend on Azure services. It is a very useful option for beginners in cloud technologies to test different options.&lt;br&gt;
  Now you are signed in, have a tenant and one subscription inside it. The next step is to decide which Azure services to use for your apps hosting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose the appropriate Azure services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Azure offers three main cloud computing platform services: SaaS (Software as a Service), IaaS (Infrastructure as a Service), PaaS (Platform as a Service). The main differences and maintaining levels are displayed on the diagram below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lK9FLSCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhcnvgel49ek6t0rrfhx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK9FLSCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhcnvgel49ek6t0rrfhx.jpeg" alt="Image description" width="625" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t want to be responsible for the operating system, data, runtime and middleware, but still need to manage and configure the application, the PaaS cloud computing service is a good choice. &lt;br&gt;
  So, PaaS — it is where Azure provider hosts the hardware and software on its own infrastructure and delivers this platform to the user as an integrated solution, solution stack, or service through an internet connection, while the developer is allowed to develop, run, and manage his own apps without having to build and maintain the infrastructure or platform usually associated with the process. &lt;br&gt;
When we have decided which cloud computing service to use, let's proceed to the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating required resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create the App Service Plan and the Resource Group. &lt;br&gt;
An &lt;strong&gt;&lt;em&gt;App Service Plan&lt;/em&gt;&lt;/strong&gt;, in two words, at a very high level is just the container in which your web applications run. It is used to determine the resources available to your application (or applications) and their boundary. Comparing this to an on premises environment, the app service environment is one server or servers on which your application is deployed. The app service plan defines what configuration of hardware your app runs on and how many servers you have. &lt;br&gt;
You can deploy multiple web applications inside the same App Service Plan. You do not need a separate web app plan for each web app.&lt;br&gt;
When you create an App Service plan in a certain region (for example, Western Europe), a set of compute resources is created for that plan in that region. Whatever apps you put into this App Service plan run on these compute resources as defined by your App Service plan.&lt;br&gt;
A &lt;strong&gt;&lt;em&gt;resource group&lt;/em&gt;&lt;/strong&gt; is a logical container into which Azure resources like web apps, databases, and storage accounts are deployed and managed. The Resource Group can include all the resources for the solution, or only those resources that you want to manage as a group. You decide how to allocate resources to resource groups based on what makes the most sense for your organization. Generally, add resources that share the same lifecycle to the same resource group so you can easily deploy, update, and delete them as a group.&lt;br&gt;
Steps to create App Service Plan with Resource Group simultaneously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type App Service Plan in the search bar, select it from the dropdown and click &lt;em&gt;+Create new.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yoxXV-B_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxwoizxozmxxqhzstntf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yoxXV-B_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxwoizxozmxxqhzstntf.jpg" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you need to configure it. As you don’t have the Resource Group yet, press create new, enter its name, and it will be created with the App Service Plan and placed inside it. Some other tips: &lt;/li&gt;
&lt;li&gt;Enter the App Service Plan name that will clearly describe group of resources inside it (for example, name of the project or of the group of projects)
select the region (the better option is to choose the closest region to your customers' location because it will affect the latency)&lt;/li&gt;
&lt;li&gt;Select operating system to run your apps, in this case Linux was selected &lt;/li&gt;
&lt;li&gt;Select the pricing tier. You can choose from dev/test or production plans. But in case you want to configure automatic deployment from GitHub, choose the P1V2 or higher pricing tier. The application plans less than P1V2 have a list of limitations. The next features are not available:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a) &lt;em&gt;Auto-scale feature&lt;/em&gt;. Autoscale is a built-in feature of Cloud Services, Mobile Services, Virtual Machine Scale Sets, and Websites that helps applications perform their best when demand changes.&lt;br&gt;
b)   &lt;em&gt;Daily backups.&lt;/em&gt; Here, probably, nothing to explain.&lt;br&gt;
c)   &lt;em&gt;Traffic manager&lt;/em&gt; improves performance and availability by routing traffic between multiple instances of your app.&lt;br&gt;
d)   &lt;em&gt;Staging slots&lt;/em&gt;. Useful for testing and deployments before swapping them into production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to create a high volume of resources in the future, use tags. Azure tags are name-value pairs that are used to organize resources in Azure Portal. You can apply tags for individual resources or tag the resource group that they are part of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7USz2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5stgnl1wrkeey82rmaru.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7USz2Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5stgnl1wrkeey82rmaru.jpg" alt="Image description" width="880" height="770"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press Review and create. It can take up to 10 minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App Service Plan and the Resource Group are ready to place resources inside. That’s why we can proceed to the next steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating instances for applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As PaaS was selected, we should search among its services. The appropriate service is App Service. It enables you to build and host web apps, mobile back ends, and RESTful APIs in the programming language of your choice without managing infrastructure. It offers auto-scaling and high availability, supports both Windows and Linux, and enables automated deployments from GitHub, Azure DevOps, or any Git repo.&lt;br&gt;
To create the App Service find this category in the search bar and press +Create. You will be redirected to this service configuration page. You need to select from the dropdown the subscription on the resource group, where it needs to be located. Put the name of the application (for example &lt;br&gt;
my-project-back-end-development). In the Publish tab select Code option if you are going to just put the code of your project instead of the ready Docker container. It will make Azure create the Docker container for you itself and run your application inside it. Select Node from the dropdown of runtime stack. The application region and operating system will be chosen automatically, according to your App Service Plan settings. Press next and in the Monitoring section I fully recommend you to switch on Application Insights. It allows you to automatically monitor your application. It will automatically detect performance anomalies and includes powerful analytics tools to diagnose issues and to understand how users actually use your app. It's designed to help you continuously improve performance and usability. It works for apps on various platforms, including .NET, Node.js, Java, and Python hosted on-premises, hybrid, or any public cloud. It integrates with your DevOps process and has connection points to various development tools. All other settings, at this moment, let's keep by default. Click create and review, check if all settings are correct, and confirm. It can take up to 5-10 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76NSz2oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca7ddcye3khplbificzr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76NSz2oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca7ddcye3khplbificzr.jpg" alt="Image description" width="880" height="921"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The instance for hosting the back-end is ready, and you can reproduce previous steps to create a separate App Service instance for the front-end application. Once it is ready we go to the next part.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating instances for database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned, MongoDB is used in the project. Azure has an opportunity to place MongoDB using the Azure Cosmos DB's API for MongoDB. It has some limitations. With the full list of supported operators and limitations or exceptions you can familiarize by the &lt;a href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb/feature-support-40"&gt;link&lt;/a&gt;; To create DB go to Azure Cosmos DB Resource and click on Create Azure Cosmos DB account. On the next screen select Azure Cosmos DB API for MongoDB. &lt;br&gt;
The instance for hosting the back-end is ready, and you As on previous steps, select subscription and resource group, enter the database name. Select the location closest to the rest of your resources and customers to decrease the requests time. Select the Mongo version.&lt;br&gt;
Choosing the capacity mode of the instance is an important step to save your money. You need to know the differences between these two options. Provisioned has throughput at a constant rate, regardless of whether operations are being performed on our Cosmos DB account. Serverless Mode — we only use throughput when operations are performed on our Cosmos DB resources. Each of these options has pros and cons and if you want to know more, follow the &lt;a href="https://docs.microsoft.com/en-us/azure/cosmos-db/throughput-serverless"&gt;link&lt;/a&gt;. But in two words, serverless — pay only when using, provisioned — reserve capacity for the instance and pay for it all the time. I need to highlight that it is cheaper to use serverless mode for non-highly loaded projects.&lt;br&gt;
Press the create button and wait until it is ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZcFl02G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9eomsscm3dyzhowqjt4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZcFl02G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9eomsscm3dyzhowqjt4.jpg" alt="Image description" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s check what we have at the moment. You can find all the created instances in your resource group on Azure Portal. Each of the application instances are already available with the Microsoft example page by the url, which you can find in the app essentials section. Cosmos db account is ready for moving your database into it.&lt;br&gt;
Now all resources are ready to deploy your applications and database. The next part of the article is going to be about the migration processes and how to connect all instances. Make sure you read both parts of the article and then proceed to work because we will talk about database migration in the next steps.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>mongodb</category>
      <category>strapi</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Listen to the Season 7 Finale of DevDiscuss!</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 29 Dec 2021 15:17:32 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-season-7-finale-of-devdiscuss-461d</link>
      <guid>https://dev.to/devteam/listen-to-the-season-7-finale-of-devdiscuss-461d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-season-finale-of-devdiscuss-is-here-already-in-s7e8-were-talking-about-the-everimportant-topic-of-cybersecurity-what-needs-to-happen-to-advance-the-field-and-how-you-can-dive-in"&gt;
  &lt;/a&gt;
  The season finale of DevDiscuss is here already! In S7E8, we're talking about the ever-important topic of cybersecurity, what needs to happen to advance the field, and how you can dive in.
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E8 - How Cybersecurity Needs To Evolve and How To Get Into It&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it"&gt;
      &lt;img id="episode-profile-image" alt="S7:E8 - How Cybersecurity Needs To Evolve and How To Get Into It" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher — DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#host"&gt;
  &lt;/a&gt;
  Host:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;&lt;/strong&gt; — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guest"&gt;
  &lt;/a&gt;
  Guest:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://twitter.com/@AlyssaM_InfoSec"&gt;Alyssa Miller&lt;/a&gt;&lt;/strong&gt; — Business Information Security Officer @ S&amp;amp;P Global Ratings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e8-how-cybersecurity-needs-to-evolve-and-how-to-get-into-it/id1513053883?i=1000546403855"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/6kGkqWaUVF4sMRJoMMiVKc"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzU3?sa=X&amp;amp;ved=0CAQQkfYCahcKEwi4zaTepYn1AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s7e8-how-cybersecurity-needs-3rEFg5sv4eC/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=168717622"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devdiscuss_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devdiscuss/episodes/241"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt; for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-tuning-in-for-season-7-of-devdiscuss-we-cant-wait-to-bring-you-all-new-episodes-in-the-new-year"&gt;
  &lt;/a&gt;
  Thanks for tuning in for season 7 of DevDiscuss. We can't wait to bring you all new episodes in the new year!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4Ep8xAM0H5aSDixi/giphy-downsized-large.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4Ep8xAM0H5aSDixi/giphy-downsized-large.gif" alt="Speakers" width="384" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Welcome Thread - v157</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 29 Dec 2021 15:06:10 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v157-o3g</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v157-o3g</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0FF56cexcW2JAXCJj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0FF56cexcW2JAXCJj/giphy.gif" alt="Fluffy white dog saying hi" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Find bottlenecks in Node.js apps with Clinic Flame</title>
      <author>Michele Pangrazzi</author>
      <pubDate>Wed, 29 Dec 2021 15:05:50 +0000</pubDate>
      <link>https://dev.to/mpangrazzi/find-bottlenecks-in-nodejs-apps-with-clinic-flame-3i0h</link>
      <guid>https://dev.to/mpangrazzi/find-bottlenecks-in-nodejs-apps-with-clinic-flame-3i0h</guid>
      <description>&lt;p&gt;In 2018 I had the chance to attend a workshop hosted by some great devs from NearForm along a JS conference. &lt;/p&gt;

&lt;p&gt;They showed how to find bottlenecks on Node.js applications using &lt;a href="https://www.brendangregg.com/flamegraphs.html"&gt;Flamegraphs&lt;/a&gt; using a very nice profiler they built called &lt;a href="https://clinicjs.org/"&gt;Clinic JS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Too bad, I lost the notes about that workshop, but I remembered the tool name. So I've downloaded it and used it successfully to find an actual bottleneck while working on a side project of mine.&lt;/p&gt;

&lt;p&gt;Here's briefly how it works through a super simple example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-app-a-slow-rest-api-service-or-similar"&gt;
  &lt;/a&gt;
  Example app: a slow REST API service (or similar)
&lt;/h2&gt;

&lt;p&gt;Let's fire up a very basic HTTP service using the plain node &lt;code&gt;http&lt;/code&gt; module, which basically is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simulating a slow query returning a random number (&lt;code&gt;dbQuery&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;computing with the result it computes the Fibonacci series (&lt;code&gt;fib&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;returning the Fibonacci value in plain text
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;dbQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;util.js&lt;/code&gt; module looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// ugh!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dbQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dbQuery&lt;/code&gt; function is (intentionally) calling &lt;code&gt;sleep&lt;/code&gt; before generating a random value to simulate slow I/O. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fib&lt;/code&gt; is a (potentially) CPU-heavy task which will block the main Node.js main event loop, especially with big &lt;code&gt;n&lt;/code&gt; values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-performance-testing-using-raw-curl-endraw-and-raw-time-endraw-"&gt;
  &lt;/a&gt;
  Basic performance testing using &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you simply fire up the service using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;curl &lt;span class="s1"&gt;'http://localhost:3000'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to test the response time, you'll find out that it's quite slow (average is around &lt;strong&gt;3-5s&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;One can easily &lt;em&gt;guess&lt;/em&gt; that both &lt;code&gt;dbQuery&lt;/code&gt; and &lt;code&gt;fib&lt;/code&gt; functions may be the cause of the slowness, and then confirm wisely using logging. &lt;/p&gt;

&lt;p&gt;Anyway, let's try to see how Clinic flame could help us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-clinic-flame"&gt;
  &lt;/a&gt;
  Using Clinic Flame
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://clinicjs.org/flame/"&gt;Clinic Flame&lt;/a&gt; is one of the Clinic tools which is very handy in this case.&lt;/p&gt;

&lt;p&gt;So let's run the web service through it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clinic flame &lt;span class="nt"&gt;--&lt;/span&gt; node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do the same HTTP calls we did above using &lt;code&gt;curl&lt;/code&gt;, one or two times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s1"&gt;'http://localhost:3000'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When done, simply hit &lt;code&gt;ctrl+c&lt;/code&gt; and Clinic Flame will automatically generate a report and show it to you on a browser page.&lt;/p&gt;

&lt;p&gt;Let's look at the report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_gvEBah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3yp5w3yloecjufh2of1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_gvEBah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3yp5w3yloecjufh2of1.png" alt="report" width="880" height="691"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing I did was to uncheck &lt;code&gt;Depedencies&lt;/code&gt;, &lt;code&gt;WebAssembly&lt;/code&gt;, &lt;code&gt;Node JS&lt;/code&gt; and &lt;code&gt;V8&lt;/code&gt; checkboxes from the bottom bar since I mainly want to see only how my module code is being called.&lt;/p&gt;

&lt;p&gt;About the report, we have to look if there are &lt;strong&gt;wide bars with a bright colour&lt;/strong&gt;. It basically means that the function is "hot": &lt;strong&gt;lot of time&lt;/strong&gt; has being spent at the top of the stack while calling a specific function.&lt;/p&gt;

&lt;p&gt;Here's one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2PpTFUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfx2x73enpv4sqef7ecd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2PpTFUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfx2x73enpv4sqef7ecd.png" alt="dbQuery" width="295" height="84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and it's related to the &lt;code&gt;dbQuery().then(fib).then( // ...&lt;/code&gt; code block.&lt;/p&gt;

&lt;p&gt;Note also that we have lots of calls to &lt;code&gt;fib&lt;/code&gt; (which is ok for a recursive function) but with darker bar colours:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IFqf11I4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo8s80w2qqq9gs00rnbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IFqf11I4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo8s80w2qqq9gs00rnbr.png" alt="fib" width="202" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that &lt;code&gt;dbQuery&lt;/code&gt; took more time at the top of the stack than &lt;code&gt;fib&lt;/code&gt; function. Probably we &lt;code&gt;sleep&lt;/code&gt; more than the time needed to compute &lt;code&gt;fib&lt;/code&gt; with the random value.&lt;/p&gt;

&lt;p&gt;What if it happens the opposite (i.e. less or no sleep time for &lt;code&gt;dbQuery&lt;/code&gt; and a larger &lt;code&gt;n&lt;/code&gt; for &lt;code&gt;fib&lt;/code&gt;)?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l26Z5nFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl8y3awy6cazd7pptbtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l26Z5nFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl8y3awy6cazd7pptbtl.png" alt="2nd report" width="880" height="685"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time basically all the bars are related to the &lt;code&gt;fib&lt;/code&gt; function and they're super wide: it means that &lt;strong&gt;all the recursive calls to &lt;code&gt;fib&lt;/code&gt; took a lot of time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note also that if you check &lt;code&gt;Node JS&lt;/code&gt; or &lt;code&gt;V8&lt;/code&gt; bars, they're super thin in comparison with &lt;code&gt;fib&lt;/code&gt; ones. This means than internal Node.js routines took a very short time compared to &lt;code&gt;fib&lt;/code&gt; calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-it-could-be-useful"&gt;
  &lt;/a&gt;
  Why it could be useful?
&lt;/h2&gt;

&lt;p&gt;If you have trouble to understanding bottlenecks in your Node.js-based web service, especially if the "blocking" issue comes from one of your &lt;code&gt;node_modules&lt;/code&gt; deps, where putting random &lt;code&gt;console.log&lt;/code&gt; calls to debug is both not easy and time consuming.&lt;/p&gt;

&lt;p&gt;Moreover, if your blocking issue is appearing only on heavy load, you can easily test it using the very nice &lt;code&gt;--autocannon&lt;/code&gt; CLI param (see it with &lt;code&gt;clinic flame --help&lt;/code&gt;) where you can specificy &lt;a href="https://github.com/mcollina/autocannon"&gt;autocannon&lt;/a&gt; options to generate some HTTP load on your web service.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>debug</category>
    </item>
    <item>
      <title>What does 2022 have in store for cybersecurity and cloud security specialists?</title>
      <author>CAST AI</author>
      <pubDate>Wed, 29 Dec 2021 14:51:54 +0000</pubDate>
      <link>https://dev.to/castai/what-does-2022-have-in-store-for-cybersecurity-and-cloud-security-specialists-4ppi</link>
      <guid>https://dev.to/castai/what-does-2022-have-in-store-for-cybersecurity-and-cloud-security-specialists-4ppi</guid>
      <description>&lt;p&gt;Cloud adoption and industry transformation are accelerating as the world looks for efficiency. Let’s face it, 2022 promises to be another busy year for cybersecurity and cloud security specialists. &lt;/p&gt;

&lt;p&gt;According to the 2021 &lt;a href="https://www.isc2.org//-/media/ISC2/Research/2021/ISC2-Cybersecurity-Workforce-Study-2021.ashx"&gt;ISC Cybersecurity Workforce Study&lt;/a&gt;, &lt;strong&gt;we are still short 2.7 million cybersecurity professionals&lt;/strong&gt; globally. There aren’t enough people to keep up with the rising threat, so we need to deploy automation heavily to tackle it. &lt;/p&gt;

&lt;p&gt;This is compounded by the stark reality that attackers only have to be right once to pull off a successful cyberattack, while defenders have to do so 100% of the time.&lt;/p&gt;

&lt;p&gt;In this post, I want to highlight the &lt;strong&gt;three particular threat vectors&lt;/strong&gt; that, in my opinion, have the potential for large-scale and global impact in 2022:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#nationstateactorsandcriticalinfrastructure"&gt;Nation-state actors and critical infrastructure&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#securityrisksofmovinggovernmentworkloadstothecloud"&gt;Security risks of moving government workloads to the cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#growingadoptioofcontainersandcloudnative"&gt;Growing adoption of containers and cloud-native technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#securitychallengeswithmulticloud"&gt;Security challenges with multi-cloud organizations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#thecurseofabundance"&gt;The curse of abundance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#morecloudsmorechallenges"&gt;More clouds, more challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#governmentsalsogetonthemulticloudbandwagon"&gt;Governments also get on the multi-cloud bandwagon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id="nationstateactorsandcriticalinfrastructure"&gt;Nation-state actors and critical infrastructure&lt;/h2&gt;

&lt;p&gt;Tensions between Russia and Ukraine are compounding with a &lt;a href="https://edition.cnn.com/2021/12/17/politics/russia-troops-ukraine-border-biden/index.html"&gt;troop buildup&lt;/a&gt; at their common border. As NATO gets involved, Russia is being pressured from all sides, yet it is unlikely to back down. However, as we have seen recently, acts of aggression don’t start with bullets being fired and bombs being dropped. &lt;/p&gt;

&lt;p&gt;Cyber attacks are the first line of aggression, and Russia has not been shy in this regard. In his book &lt;a href="https://www.amazon.com/Sandworm-Cyberwar-Kremlins-Dangerous-Hackers/dp/0385544405"&gt;&lt;em&gt;Sandworm&lt;/em&gt;&lt;/a&gt;, Andy Greenberg details the large-scale investment Russia has been making into state-sponsored cyberattack capabilities. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As tensions escalate, the most interesting targets for 2022 will be critical infrastructures such as electricity, fuel pipelines, telecommunications, and broadband. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Similar tensions have been taking place between China and the US in relation to Taiwan. There will probably be activity in this region in 2022 because Taiwan’s chip production capabilities are strategic for the American tech sector. &lt;/p&gt;

&lt;p&gt;As the US scrambles to create production capacity elsewhere, Taiwan will remain its important defense point in the short and medium terms. Similar to the Russian case, initial strikes will likely come on the cyber front. China has very capable cybersecurity threat actors, both internally and in cooperation with North Korea.&lt;/p&gt;

&lt;h2 id="securityrisksofmovinggovernmentworkloadstothecloud"&gt;Security risks of moving government workloads to the cloud&lt;/h2&gt;

&lt;p&gt;Complexity increases as government organizations are moving to the cloud. For example, we have seen a big push from cloud providers such as AWS, Azure, GCP, Oracle, and IBM to lure governments into their versions of secure data centers. &lt;/p&gt;

&lt;p&gt;We have even seen ‘air gap’ offerings targeted at top secret organizations that provide for fully disconnected regions that operate independently from Internet connectivity. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The movement of workloads from private underground facilities to cloud provider-operated data centers can potentially introduce significant efficiencies but also security risks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a vulnerable transition point that attackers will certainly exploit.&lt;/p&gt;

&lt;h2 id="growingadoptioofcontainersandcloudnative"&gt;Growing adoption of containers and cloud-native technologies&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://cast.ai/"&gt;CAST AI&lt;/a&gt;, we are super bullish on adopting containers and cloud-native technologies such as Kubernetes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, the security profile for containers is significantly different than for Virtual Machines. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In VMs, there is a Hypervisor that sits between customers and workloads providing solid isolation. The isolation model for containers is much weaker and comes with its own threat vectors and challenges. Organizations have to understand these differences and prepare appropriately to safely unlock the benefits of lightweight containerization. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In fact, AWS was so concerned about this difference in isolation that they created &lt;a href="https://firecracker-microvm.github.io/"&gt;Firecracker microVM&lt;/a&gt;. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Specifically, with Function-as-a-Service (aka ‘Lambda’), a customer may be running their function workload right beside a competitor or bad actor on the same infrastructure. We don’t believe Firecracker has been rolled out ubiquitously across all AWS services, but the concern is real.&lt;/p&gt;

&lt;p&gt;Just a few years ago vulnerabilities such as &lt;a href="https://www.techrepublic.com/article/spectre-and-meltdown-explained-a-comprehensive-guide-for-professionals/"&gt;Spectre and Meltdown&lt;/a&gt; were reported, and the world rushed to close the gaps. These were precisely the types of hardware processor flaws that allow computer &lt;em&gt;processes &lt;/em&gt;to steal information from their neighbors. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Containers, which are essentially processes, are particularly vulnerable due to their lower isolation levels. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So will we see another Spectre and Meltdown in 2022?&lt;/p&gt;

&lt;p&gt;This is yet to be seen, but one thing is certain. As an industry, we need to pay close attention to container security. That’s why at CAST AI we plan to increase our engagement in helping customers secure their containerized workloads and Kubernetes environments.&lt;/p&gt;

&lt;h2 id="securitychallengeswithmulticloud"&gt;Security challenges with multi-cloud organizations&lt;/h2&gt;

&lt;p&gt;Most organizations are moving to a state where they work with &lt;a href="https://cast.ai/blog/how-to-spin-a-multi-cloud-application-with-cast-ai/"&gt;multiple cloud vendors&lt;/a&gt;. Customers don’t want to put all of their eggs into a single cloud basket, nor should they. &lt;/p&gt;

&lt;p&gt;We have seen recent outages at AWS and Google Cloud that brought down major consumer-facing services for hours. Customers using the cloud for IT infrastructure must diversify their usage of cloud vendors.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On the flip side of that movement comes the challenge of securing vastly different environments. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As an industry, we recently went through the turmoil of migrating security from on-prem to cloud. Vendors such as AWS, Azure, Oracle, and GCP now provide proprietary security solutions that deal with their specific cloud nuances. &lt;/p&gt;

&lt;h3 id="thecurseofabundance"&gt;The curse of abundance&lt;/h3&gt;

&lt;p&gt;Just looking at the list of AWS security services, many of which overlap, is enough to make your head spin: AWS Identity &amp;amp; Access Management (IAM), Amazon Cognito, AWS Resource Access Manager, AWS Security Hub, Amazon GuardDuty, Amazon Inspector, AWS Config, AWS CloudTrail, AWS IoT Device Defender, AWS Web Application Firewall, AWS HSM, Key Management Service... &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The list goes on for dozens of services related to securing your environment. Just trying to configure these services to get your AWS posture secure is extremely difficult. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ask the security team at Capital One. In July of 2019, &lt;a href="https://www.washingtonpost.com/national-security/capital-one-fined-2019-hack/2020/08/06/90c2c836-d7f3-11ea-aff6-220dd3a14741_story.html"&gt;the bank leaked the personal information of over 100 million customers&lt;/a&gt;. The root cause was a security misconfiguration tied to the Web Application Firewall and S3 object store. &lt;/p&gt;

&lt;p&gt;The configuration issue was so complex that it took weeks for industry experts to unravel the entire scenario. Adding insult to injury, Capital One had to pay an $80 million fine to US bank regulators. &lt;/p&gt;

&lt;h3 id="morecloudsmorechallenges"&gt;More clouds, more challenges&lt;/h3&gt;

&lt;p&gt;Now imagine a team responsible for multiple cloud environments. &lt;/p&gt;

&lt;p&gt;Not only do they have to navigate the dozens of AWS services available, but also become experts in Azure Security Center or Google Cloud security services. The complexity of the task grows exponentially as cloud vendors are introduced. &lt;/p&gt;

&lt;p&gt;Organizations have to turn to third-party vendors to implement a category of solutions called CASB – cloud access security broker – to detect multi-cloud configuration drift and best practices.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As organizations move to multiple cloud providers, the multi-cloud misconfiguration may become the next source of cloud vulnerabilities and attack surfaces.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="governmentsalsogetonthemulticloudbandwagon"&gt;Governments also get on the multi-cloud bandwagon&lt;/h3&gt;

&lt;p&gt;Interestingly, governments are also moving to leverage multiple cloud vendors. &lt;/p&gt;

&lt;p&gt;The US government recently canceled project JEDI and replaced it with &lt;a href="https://www.defense.gov/News/News-Stories/Article/Article/2684754/dod-aims-for-new-enterprise-wide-cloud-by-2022/"&gt;Joint Warfighter Cloud Capability&lt;/a&gt;, which is touted as a multibillion-dollar procurement project spanning several vendors.&lt;/p&gt;

&lt;p&gt;As governments move to adopt multiple clouds, what are the prospects for nation-state actors and the exploitation of these new attack vectors? This brings us back full circle to the first category of vulnerabilities we identified, that is, critical infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Will 2022 be a benign year for cyberattacks, or will these new attack surfaces become an acute threat? The future will show, but organizations should not wait and prepare for all eventualities.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>devops</category>
      <category>kubernetes</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Smart Contract in Ethereum</title>
      <author>Rutik Bhoyar</author>
      <pubDate>Wed, 29 Dec 2021 14:48:09 +0000</pubDate>
      <link>https://dev.to/rutikab12/smart-contract-in-ethereum-4ioh</link>
      <guid>https://dev.to/rutikab12/smart-contract-in-ethereum-4ioh</guid>
      <description>&lt;p&gt;Now-a-days Web3.0 is trending and there are lot of stuffs also in talks like blockchain, NFT, Ethereum, Solidity, etc. etc..&lt;/p&gt;

&lt;p&gt;As many of us would know about the blockchain, let's just see it's definition &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blockchain is a continuously growing list of records or blocks you can say, which are completely decentralized with distributed databases and immutable ledger meaning continuous blocks linked to each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JE5F9wf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c3ainb7jvble52ezsug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JE5F9wf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c3ainb7jvble52ezsug.jpg" alt="Blockchain" width="697" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now let's move towards our topic &lt;strong&gt;Smart Contract&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's take an example for this. Suppose there is company which helps various NGO's to collect the funds for their campaigns. Various NGO's files pledged amount to their site and rest of the work is done by that company, which can also be called as "crowd-funding".&lt;/p&gt;

&lt;p&gt;If the amount contributed by various people is equal to or greater than the pledged amount the NGO's will get the amount by deducting the some commission by the platform provider company.&lt;/p&gt;

&lt;p&gt;Else if the money funded is not equal to the pledged amount, the money will be returned to the people.&lt;/p&gt;

&lt;p&gt;Similarly, the smart contract's work. See the formal definition of &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contract"&gt;
  &lt;/a&gt;
  "Smart Contract"...
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"smart contract" is simply a program that runs on the Ethereum blockchain. It's a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Smart contracts&lt;/strong&gt; are a type of Ethereum account. This means they have a balance and they can send transactions over the network. However they're not controlled by a user, instead they are deployed to the network and run as programmed. User accounts can then interact with a smart contract by submitting transactions that execute a function defined on the smart contract.&lt;/p&gt;

&lt;p&gt;In simple language, it is a certain set of rules written with the help of scripting language like &lt;strong&gt;Solidity in Ethereum&lt;/strong&gt; , which can be considered as &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-the-smart-contract-will-be-present-in-blockchain"&gt;
  &lt;/a&gt;
  Where the smart contract will be present in blockchain?
&lt;/h2&gt;

&lt;p&gt;So when there will be a Peer-to-Peer network of blockchain where all the nodes are interconnected to each other i.e. ledger. Each node will contain a separate blockchain. So where does the smart contract will be present?.&lt;/p&gt;

&lt;p&gt;It will be present alongside with the blockchain of node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQCkdVaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxx4kustmknot477mo87.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQCkdVaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxx4kustmknot477mo87.jpg" alt="Peer-to-Peer Network" width="508" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realworld-smart-contract-in-use"&gt;
  &lt;/a&gt;
  Real-World Smart Contract in use....
&lt;/h2&gt;

&lt;p&gt;So when the Jack Dorsey's first tweet was sold to &lt;strong&gt;Person A&lt;/strong&gt; as &lt;strong&gt;NFT&lt;/strong&gt;(Non-fungible Token) ,all the transaction was noted in smart contract and money was transferred to the original owner.&lt;br&gt;
Now when that &lt;strong&gt;Person A&lt;/strong&gt; will sell that tweet to &lt;strong&gt;Person B&lt;/strong&gt; all the transaction will be noted and maintained by the "Smart Contract" and the royalty amount will be sent to the Jack Dorsey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVgtw7Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae33j1u6co680gsj7qnw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVgtw7Hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae33j1u6co680gsj7qnw.jpg" alt="Smart Contract in Jack Dorsey's tweet" width="820" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Smart contracts can define rules, like a regular contract, and automatically enforce them via the code. Smart contracts cannot be deleted by default, and interactions with them are irreversible.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to build UI elements using CSS pseudo elements</title>
      <author>Ashutosh</author>
      <pubDate>Wed, 29 Dec 2021 14:25:47 +0000</pubDate>
      <link>https://dev.to/ashu96/how-to-build-ui-elements-using-css-pseudo-elements-p15</link>
      <guid>https://dev.to/ashu96/how-to-build-ui-elements-using-css-pseudo-elements-p15</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;These days there are a lot of designs that intuitively display information. Instead of plain old one-to-one mapping of fields in a database, we're moving towards a more human-friendly and easy-to-understand UI element. For example, icons, loaders, badges, and progress indicators.&lt;/p&gt;

&lt;p&gt;Being front-end developers, it's our responsibility to bring such UI to life using code(or magic 🪄).&lt;/p&gt;

&lt;p&gt;An example of such a UI element is a simple status indicator that shows how many steps have been completed in a multi-step process. Because of its visual nature, it conveys this information in an instant look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mwLzpGft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96cm644mjgzcepuawaa1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mwLzpGft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96cm644mjgzcepuawaa1.png" alt="Image of multi-step status indicator UI" width="736" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem arises when we use a bunch of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s to build such UI. It gets complicated, unreadable, and hard to maintain very quickly.&lt;br&gt;
In this article, we will see how we can build such UI using CSS pseudo-elements and minimising the need for &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s (or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tools-used"&gt;
  &lt;/a&gt;
  Tools Used
&lt;/h2&gt;

&lt;p&gt;I'm using &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; for making the UI element dynamic so that we can easily change the status of a step from &lt;em&gt;pending&lt;/em&gt; to &lt;em&gt;complete&lt;/em&gt;.&lt;br&gt;
Also using the &lt;a href="https://emotion.sh/"&gt;emotion&lt;/a&gt; library for writing css styles with JavaScript because it's efficient and fun! We can achieve the same result using CSS (SCSS, SASS).&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://codesandbox.io/s/ui-elements-using-css-pseudo-elements-7ygv1?file=/src/Circle.js"&gt;CodeSandbox&lt;/a&gt; link to the final output. Let's get started.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-ui"&gt;
  &lt;/a&gt;
  Building the UI
&lt;/h2&gt;

&lt;p&gt;We will build this UI component in a few steps. That way, it is easier to follow and recall a step later. So without further ado, let's go!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-step"&gt;
  &lt;/a&gt;
  First Step
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@emotion/styled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;checkmarkImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path-to-file/file-name.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
/* We're using CSS variables here. */
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;First, we import &lt;code&gt;styled&lt;/code&gt; from the &lt;code&gt;emotion&lt;/code&gt; library and an image that we will use in a moment.&lt;/li&gt;
&lt;li&gt;Then, we create a styled component named &lt;code&gt;Circle&lt;/code&gt; and add a few CSS rules that make it a nice circle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's decode this cryptic looking line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literals&lt;/a&gt; syntax to dynamically assign the value of &lt;code&gt;background-color&lt;/code&gt; based on the &lt;code&gt;active&lt;/code&gt; prop which will be passed by the parent component.&lt;/p&gt;

&lt;p&gt;At this point, if we wrap a couple of this components in a box, we will have a few nice circles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKmLt_2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pzc7iju3xgfbp90jbva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKmLt_2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pzc7iju3xgfbp90jbva.png" alt="Few nice circles" width="604" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-dots-"&gt;
  &lt;/a&gt;
  Connect the Dots :)
&lt;/h3&gt;

&lt;p&gt;Let's go ahead and connect the dots(pun intended) by creating the link between these circles.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;::after&lt;/code&gt; pseudo-element for this as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    width: var(--linkWidth);
    height: var(--linkHeight);
    border-radius: 100px;

    position: absolute;
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, make a rectangle with rounded borders to give it a pill-like shape using &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;border-radius&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, align it centrally relative to the circle using &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We use &lt;code&gt;calc&lt;/code&gt; function to figure out values for &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties based on the dimension of the &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; so that changing scale won't affect the alignment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that change in place our UI look as follow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pghrtDQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z64h8u1zstd8leohn2u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pghrtDQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z64h8u1zstd8leohn2u8.png" alt="circles with link between them" width="540" height="130"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#remove-extras"&gt;
  &lt;/a&gt;
  Remove Extras
&lt;/h3&gt;

&lt;p&gt;Nice job! But, there is also a line at the end of the last circle that we don't need. So, let's remove it real quick with the following change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    position: absolute;
    width: var(--linkWidth);
    height: var(--linkHeight);
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border-radius: 100px;
  }

  /* We don't want to show the link after the last element. */

  &amp;amp;:last-child {
    &amp;amp;::after {
      display: none;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that looks better:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbtCjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp8ipflp4qeo85el2yd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbtCjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp8ipflp4qeo85el2yd4.png" alt="circles without extra line" width="480" height="130"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-step"&gt;
  &lt;/a&gt;
  Final Step
&lt;/h3&gt;

&lt;p&gt;The last missing piece in this UI is the checkmark icon which renders when the step is active.&lt;br&gt;
We use &lt;code&gt;::before&lt;/code&gt; pseudo-element to create it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  --primaryColor: #00ccb0;
  --secondaryColor: #e1e1e1;
  --scale: 2;
  --size: calc(16px * var(--scale));

  --linkWidth: calc(10px * var(--scale));
  --linkHeight: calc(2px * var(--scale));

  --checkmarkWidth: calc(9px * var(--scale));
  --checkmarkHeight: calc(7px * var(--scale));

  border-radius: 50%;
  position: relative;
  width: var(--size);
  height: var(--size);
  box-sizing: border-box;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  margin-right: var(--size);

  /* Center svg (checkmark in this case). */
  &amp;amp;::before {
    content: "";
    display: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
    position: absolute;
    top: calc((var(--size) - var(--checkmarkHeight)) / 2);
    left: calc((var(--size) - var(--checkmarkWidth)) / 2);
    width: var(--checkmarkWidth);
    height: var(--checkmarkHeight);
    background-image: url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;checkmarkImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;);
  }

  /* Make a pill shaped element that will act as link between two circles. */
  &amp;amp;::after {
    content: "";
    position: absolute;
    width: var(--linkWidth);
    height: var(--linkHeight);
    left: calc(var(--size) + ((var(--size) - var(--linkWidth)) / 2));
    top: calc((var(--size) - var(--linkHeight)) / 2);
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--primaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--secondaryColor)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
    border-radius: 100px;
  }

  /* We don't want to show the link after the last element. */

  &amp;amp;:last-child {
    &amp;amp;::after {
      display: none;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Nice and clean:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyG5wUqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwgl0wodl6tr9paf2k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyG5wUqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwgl0wodl6tr9paf2k9.png" alt="Final UI element" width="480" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can build many UI elements using the this approach. And,&lt;br&gt;
that way, we eliminate the need for extra HTML elements such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you find this article interesting and had fun reading it because I for sure had fun writing it. &lt;br&gt;
If you find it helpful, please give it a like and share it with someone who might benefit for it. &lt;/p&gt;

&lt;p&gt;My name is Ashutosh, and apart from working as a Full-stack engineer, I love to share my learnings with the community.&lt;br&gt;
You can connect with me on &lt;a href="https://www.linkedin.com/in/iamashutoshbhardwaj/"&gt;LinkedIn&lt;/a&gt; or follow me on &lt;a href="https://twitter.com/BhardwajAshu96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Data Engineering and Secure Coding with a Vulnerability Database</title>
      <author>sagu94271</author>
      <pubDate>Wed, 29 Dec 2021 14:23:59 +0000</pubDate>
      <link>https://dev.to/sagu94271/data-engineering-and-secure-coding-with-a-vulnerability-database-2aa7</link>
      <guid>https://dev.to/sagu94271/data-engineering-and-secure-coding-with-a-vulnerability-database-2aa7</guid>
      <description>&lt;p&gt;We are living in the world of data and AI. Enterprise organizations worldwide are trying to gather as much data as possible to create a data abstraction layer, which business users and data analysts can easily access to extract value and insights from data. Although it seems to be a very straightforward solution to collect data and gather insights from it, enterprise organizations have to build and implement various data governance pillars to ensure data is collected efficiently, and is securely and easily accessible to end users.&lt;/p&gt;

&lt;p&gt;There are various tools available in the market for code security, like the WhiteSource Vulnerability Database, Sonarqube, GitHub, GitLab, etc. Let’s delve into building a data engineering application with end-to-end implementation using Python and the WhiteSource Vulnerability Database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#secure-data-engineering-with-python"&gt;
  &lt;/a&gt;
  Secure Data Engineering with Python
&lt;/h2&gt;

&lt;p&gt;Most enterprise organizations use Python to build data solutions. Thus, it’s important to scan all Python vulnerabilities using open source and free databases to secure the code with automated checks about any potential vulnerabilities.&lt;/p&gt;

&lt;p&gt;Data engineering teams in enterprise organizations and small-scale companies can perform the following activities to make data available and easily accessible for downstream users to perform business analytics:&lt;/p&gt;

&lt;p&gt;Build automated and generic data pipelines to gather raw data in a data lake or data lake house platform.&lt;br&gt;
Build ETL/ELT pipelines to pre-process, clean, transform, and load data to the destination store.&lt;br&gt;
Machine learning engineers can use this data to build machine learning models.&lt;br&gt;
Business analysts and data analysts can use this data to create interactive visual reports.&lt;/p&gt;

&lt;p&gt;The day-to-day life of a data engineer includes processing data from different data sources in the form of batch processing and streaming. Data engineers focus more on building data pipelines ETL or ELT to create robust, reliable and efficient data processing mechanisms to make the data easily available for the business users to get more insights from the data.&lt;/p&gt;

&lt;p&gt;Most public cloud providers like AWS and Azure work easily with Python bases, serverless computing, and microservices. Business data comes from a variety of sources like relational or non-relational databases, flat files, spreadsheets, and external systems like APIs. With the help of the Pandas dataframe, we can read a variety of files as it supports various column-oriented formats. &lt;/p&gt;

&lt;p&gt;Once your application development is ready with Python/Spark code, you can build or integrate utility in Python to scan your code against the WhiteSource Vulnerability Database to check for potential security issues. The open source database allows us to use web scraping facilities, which we can integrate into our Python code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-vulnerability-database"&gt;
  &lt;/a&gt;
  Using the Vulnerability Database
&lt;/h2&gt;

&lt;p&gt;The WhiteSource Vulnerability Database is a free, open source vulnerability database. It is also the largest database. It can be used for securing your application with code scanning.  The database stores information in the following formats. You can find the full list of vulnerabilities available in the database online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAfPIjkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82py30mct2q3j378j38k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAfPIjkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82py30mct2q3j378j38k.PNG" alt="Image description" width="561" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It scans for more than 200 programming languages. Additionally, the WhiteSource database also provides the following additional information to make developers’ lives easier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CWE Type&lt;/li&gt;
&lt;li&gt;Recommended fix&lt;/li&gt;
&lt;li&gt;Support from the community&lt;/li&gt;
&lt;li&gt;Exposure level&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s look at the trend of open source vulnerabilities per year from 2009 to 2020.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvWqCXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwi59urmqerq6ormj5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnvWqCXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwi59urmqerq6ormj5.PNG" alt="Image description" width="552" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.whitesourcesoftware.com/vulnerability-database/about-us/"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering the sharp increase in open source vulnerabilities, it is important to incorporate tools to improve code security before deploying the code and using them in higher environments.&lt;/p&gt;

&lt;p&gt;If you want to explore the WhiteSource Vulnerability Database, you can simply go to the website and use the search functionalities. If you want to add a new vulnerability to their database, click on the link to add the new vulnerability. Once you provide information, it will be added to the database. Thus, with a combination of Python code with the database, we can proactively scan any Python source code and detect code vulnerabilities.&lt;/p&gt;

&lt;p&gt;Although this approach works well, it becomes cumbersome to incorporate into day-to-day Agile work. It is better to create an automated mechanism using a CI pipeline to continuously scan the source code against the database. &lt;/p&gt;

&lt;p&gt;We can create a CI pipeline in Azure DevOps that executes every time during the code commit to the Azure DevOps Repos. This way, we can securely scan our Python source code against the WhiteSource Vulnerability Database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, we have understood the WhiteSource Vulnerability Database and how it stores information about vulnerabilities for more than 200 programming languages. We have also discussed using a WhiteSource Vulnerability Database with Python for data engineering applications and using it to create secure Python applications. In the end, we also explored using Azure DevOps to automate scanning with CI pipelines. &lt;/p&gt;

</description>
      <category>datascience</category>
      <category>whitesource</category>
      <category>vulnerabilities</category>
      <category>python</category>
    </item>
    <item>
      <title>tsParticles 1.38.0 Released</title>
      <author>Matteo Bruni</author>
      <pubDate>Wed, 29 Dec 2021 14:20:54 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1380-released-61a</link>
      <guid>https://dev.to/matteobruni/tsparticles-1380-released-61a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1380-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.38.0 Changelog
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Removed the custom canvas class (&lt;code&gt;tsparticles-canvas-el&lt;/code&gt;), replacing it with a data attribute. This will break some CSS, but I'd prefer breaking it for focusing more on options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;style&lt;/code&gt; options, they are applied directly to the &lt;code&gt;canvas&lt;/code&gt;, it's the same &lt;code&gt;.style&lt;/code&gt; object of the standard JavaScript HTMLElement class (docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#RiotJS"&gt;RiotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#SolidJS"&gt;SolidJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Web-Components"&gt;Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the
instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the
links you need, and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>3 Reasons Ruby on Rails Is the Best Way to Start Learning Web Development in 2022</title>
      <author>Cezar Halmagean</author>
      <pubDate>Wed, 29 Dec 2021 13:58:23 +0000</pubDate>
      <link>https://dev.to/chalmagean/3-reasons-ruby-on-rails-is-the-best-way-to-start-learning-web-development-in-2022-31mh</link>
      <guid>https://dev.to/chalmagean/3-reasons-ruby-on-rails-is-the-best-way-to-start-learning-web-development-in-2022-31mh</guid>
      <description>&lt;p&gt;With so many new languages popping up everywhere, it's hard to decide which one to pick up or if Ruby on Rails is still a good choice in 2022.&lt;/p&gt;

&lt;p&gt;So if you're just starting out with learning how to code, or web development, or if you're leaning towards Ruby on Rails but you're not sure if it's a good choice, I hope this quick video will give you some answers.&lt;/p&gt;

&lt;p&gt;My name is Cezar and I've been using Ruby since 2008 to build all sorts of web applications, from simple apps to full-blown multi-million dollar ones.&lt;/p&gt;

&lt;p&gt;And today, I'm going to share with you 3 reasons why I think Ruby on Rails is still your best bet in 2022.&lt;/p&gt;

&lt;p&gt;Here's the Youtube version if you want to watch it instead.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GUP129t2Sl4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-1-ruby-is-easy-to-learn"&gt;
  &lt;/a&gt;
  Reason #1: Ruby Is Easy to Learn
&lt;/h2&gt;

&lt;p&gt;When you're getting started, there are so many unfamiliar concepts thrown at you that your biggest problem will be remembering them all. Not to mention understanding what each one means. So learning a language that has fewer of those is preferred.&lt;/p&gt;

&lt;p&gt;But that doesn't mean Ruby is less powerful. It's just that it was designed with the developer's experience in mind.&lt;/p&gt;

&lt;p&gt;You have to realize that the big factors at play here are confidence and consistency. If you can stick around and keep learning long enough, you're guaranteed to win.&lt;/p&gt;

&lt;p&gt;So what Ruby gives you, and in my opinion it does it better than other languages, is small wins very quickly, fewer unfamiliar concepts, and syntax that looks a lot like english.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-2-helps-you-learn-best-practices"&gt;
  &lt;/a&gt;
  Reason #2: Helps You Learn Best Practices
&lt;/h2&gt;

&lt;p&gt;The second reason to learn Ruby on Rails is it holds your hand as you go through the process of figuring out how web development works.&lt;/p&gt;

&lt;p&gt;Namely it's a collection of best practices, and a lot industry conventions that are baked in for you to use from day one.&lt;/p&gt;

&lt;p&gt;With web development you can do the same thing in so many different ways, but Rails forces you to one tried and tested way that works best as a starting point. &lt;/p&gt;

&lt;p&gt;That means you'll be able to build perfectly good web applications even if you don't understand how everything fits together. You can figure that out later.&lt;/p&gt;

&lt;p&gt;That's how I learned Ruby. I started building web applications with Rails by copying what others have done, and then I slowly figured out how things work behind the scenes.&lt;/p&gt;

&lt;p&gt;Now this might not be the best way to learn programming, but it worked for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-3-plenty-of-jobs"&gt;
  &lt;/a&gt;
  Reason #3: Plenty of Jobs
&lt;/h2&gt;

&lt;p&gt;This one is probably important to you if you're watching this video.&lt;/p&gt;

&lt;p&gt;But rest assured that you'll find a lot of jobs for both Ruby and Rails. And once you get good at building web applications, most of those skills are transferable to other similar languages, like Python, or Javascript.&lt;/p&gt;

&lt;p&gt;So I wouldn't worry too much about this aspect because what's really important here is for you to get productive as quickly as possible. And both Ruby &amp;amp; Rails will help you do just that.&lt;/p&gt;

&lt;p&gt;I hope this helped.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
