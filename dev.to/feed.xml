<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating you First repository on Github using git</title>
      <author>pulkit</author>
      <pubDate>Mon, 03 Jan 2022 09:37:28 +0000</pubDate>
      <link>https://dev.to/pulkitrajpal/creating-you-first-repository-on-github-using-git-3blg</link>
      <guid>https://dev.to/pulkitrajpal/creating-you-first-repository-on-github-using-git-3blg</guid>
      <description></description>
      <category>github</category>
      <category>git</category>
      <category>computerscience</category>
      <category>java</category>
    </item>
    <item>
      <title>String Slicing in Python Explained </title>
      <author>Bala Priya C</author>
      <pubDate>Mon, 03 Jan 2022 09:35:33 +0000</pubDate>
      <link>https://dev.to/balapriya/string-slicing-in-python-explained-5edg</link>
      <guid>https://dev.to/balapriya/string-slicing-in-python-explained-5edg</guid>
      <description>&lt;p&gt;String slicing lets you slice into Python strings, and work with their &lt;code&gt;slices&lt;/code&gt;, or &lt;code&gt;substrings&lt;/code&gt;—instead of the whole string.&lt;/p&gt;

&lt;p&gt;As strings in Python are &lt;em&gt;immutable&lt;/em&gt;, you cannot change them in place. In this tutorial, you'll learn to slice Python strings and work with substrings.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#python-string-slicing-syntax"&gt;
  &lt;/a&gt;
  Python String Slicing Syntax
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above line of code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Returns a slice of the string &lt;code&gt;&amp;lt;str&amp;gt;&lt;/code&gt;—starting at index &lt;code&gt;start&lt;/code&gt;, extending up to &lt;code&gt;stop-1&lt;/code&gt; in steps of &lt;code&gt;step&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;start&lt;/code&gt; index is &lt;em&gt;optional&lt;/em&gt;: the slice starts from the beginning of the string by &lt;em&gt;default&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;stop&lt;/code&gt; index is also &lt;em&gt;optional&lt;/em&gt;: the slice extends up to the end of the string by &lt;em&gt;default&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;step&lt;/code&gt; value is optional too. The default value of step is &lt;code&gt;1&lt;/code&gt; and includes all characters in the string.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#python-string-slicing-example"&gt;
  &lt;/a&gt;
  Python String Slicing Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;▶ Let's use &lt;code&gt;enumerate()&lt;/code&gt; and examine the characters at each index in the string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"At index &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: letter &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="n"&gt;At&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you've used the &lt;code&gt;enumerate()&lt;/code&gt; function in conjunction with the &lt;code&gt;for&lt;/code&gt; loop. This lets you loop through iterables, and access items along with their indices simultaneously—without having to the &lt;code&gt;range()&lt;/code&gt; function to get the indices.&lt;/p&gt;

&lt;p&gt;▶ Let's now use string slicing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# With `start` and `stop` indices
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: ython
&lt;/span&gt;
&lt;span class="c1"&gt;# Without `stop` index
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: ython3
&lt;/span&gt;
&lt;span class="c1"&gt;# Without `start` index
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: Pytho
&lt;/span&gt;
&lt;span class="c1"&gt;# With `step = 2`, slice includes every second character
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: Pto3
&lt;/span&gt;
&lt;span class="c1"&gt;# Without `start`, `stop` and `step`: slice is entire string
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[::])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: Python3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#python-string-slicing-with-negative-step"&gt;
  &lt;/a&gt;
  Python String Slicing with Negative Step
&lt;/h2&gt;

&lt;p&gt;When you set &lt;code&gt;step&lt;/code&gt; to a negative value, you can get slices starting from the end of the string—reverse substrings.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;step = -1&lt;/code&gt; you get a slice starting from the end of the string, and including every character.&lt;/p&gt;

&lt;p&gt;This can be super handy when you'd like to &lt;em&gt;reverse&lt;/em&gt; a string, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_str&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Output: 3nohtyP
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To sum up, &lt;code&gt;&amp;lt;str&amp;gt;[start:stop:step]&lt;/code&gt; is the syntax to obtain string slices or substrings in Python.&lt;/p&gt;

&lt;p&gt;Now that you've learned how to slice strings, it's time to put your skills to practice, maybe? Happy learning and coding!&lt;/p&gt;




&lt;p&gt;Cover image: Photo by Tamanna Rumee on Unsplash&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Turning My 2021 Hashnode Tech Awards into NFTS - A walkthrough of how I did it</title>
      <author>Unclebigbay</author>
      <pubDate>Mon, 03 Jan 2022 09:05:42 +0000</pubDate>
      <link>https://dev.to/unclebigbay/turning-my-2021-hashnode-tech-awards-into-nfts-a-walkthrough-of-how-i-did-it-4p6</link>
      <guid>https://dev.to/unclebigbay/turning-my-2021-hashnode-tech-awards-into-nfts-a-walkthrough-of-how-i-did-it-4p6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t1hDwLRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640341418722/vRDb0elqB.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1hDwLRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640341418722/vRDb0elqB.gif" alt="Merry Christmas from unclebigbay" width="880" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, After reading  &lt;a href="https://web3.hashnode.com/how-to-mint-an-nft-a-step-by-step-guide-to-creating-your-first-nft?utm_campaign=The%20Oversimplified%20Newsletter&amp;amp;utm_medium=email&amp;amp;utm_source=Revue%20newsletter"&gt;How To Mint an NFT - A Step-by-Step Guide To Creating Your First NFT&lt;/a&gt; by @&lt;a href="https://dev.to@heyOnuoha"&gt;Favor Onuoha&lt;/a&gt;, I decided to Mint my  &lt;a href="https://unclebigbay.com/badges"&gt;Hashnode award badges&lt;/a&gt; as my first NFT and I will be showing you how I did it.&lt;/p&gt;

&lt;p&gt;I don't know if that's actually a good idea, but who cares, that's what I feel like minting.&lt;/p&gt;

&lt;p&gt;Minting simply means to create something new on the blockchain, so in this article, you will experience how I created my first ever NFT on the blockchain.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;I will be making use of &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt; and &lt;a href="https://opensea.io/"&gt;opensea&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-metamask"&gt;
  &lt;/a&gt;
  What is Metamask
&lt;/h3&gt;

&lt;p&gt;balance/authentication/authorization&lt;/p&gt;

&lt;p&gt;In case you are hearing about MetaMask for the first time, MetaMask is basically a cryptocurrency wallet holder that allows you to interact with your Ethereum blockchain wallet account and can be used to connect to other blockchain applications.&lt;/p&gt;

&lt;p&gt;Meta mask is available for iOS/Android devices and browser extensions, click &lt;a href="https://metamask.io/download.html"&gt;here&lt;/a&gt; to get yours up and running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep your security phrase and password safe like your life depends on it, there's no reset phrase (password) like web2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-opensea"&gt;
  &lt;/a&gt;
  What is OpenSea
&lt;/h3&gt;

&lt;p&gt;OpenSea is an online marketplace for non-fungible tokens (NFTs). It was founded by  &lt;a href="https://www.google.com/search?q=Devin+Finzer&amp;amp;rlz=1C1ASVC_enNG928NG928&amp;amp;oq=Devin+Finzer&amp;amp;aqs=chrome..69i57.354j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Devin Finzer&lt;/a&gt;  and  &lt;a href="https://www.google.com/search?q=Alex+Atallah&amp;amp;rlz=1C1ASVC_enNG928NG928&amp;amp;oq=Alex+Atallah&amp;amp;aqs=chrome..69i57.290j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Alex Atallah&lt;/a&gt; in New York on December 20, 2017.&lt;/p&gt;

&lt;p&gt;OpenSea has been around for a very long time, thanks to the Web3 and NFTs popularity explosion, we get to know about it now.&lt;/p&gt;

&lt;p&gt;It is where buying and selling of NFTs take place, this is the Alibaba of web3, you can upload your images, music, documents, and any other thing you wish to mint on the blockchain.&lt;/p&gt;

&lt;p&gt;Super happy to be minting my badges there, maybe someone will actually buy them, but I am not selling 🤪&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#setting-up-opensea-account"&gt;
  &lt;/a&gt;
  Setting up OpenSea Account
&lt;/h1&gt;

&lt;p&gt;I head to &lt;a href="https://opensea.io/"&gt;opensea.io&lt;/a&gt; and click on the create button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWo6fAXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640253617844/5FEYBlA1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWo6fAXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640253617844/5FEYBlA1n.png" alt="image.png" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several wallet options to connect with, but MetaMask is the most popular and that's what I already installed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W1LN446K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254036738/7jYRYm__4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1LN446K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254036738/7jYRYm__4.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The MetaMask browser extension pops up immediately after selecting the MetaMask provider option.&lt;/p&gt;

&lt;p&gt;Click on the Next button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrBmcGW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254375322/VrC-ChBzku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrBmcGW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254375322/VrC-ChBzku.png" alt="image.png" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can be authenticated on the OpenSea marketplace, hit the connect button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BcjwK3Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254441051/rYwXcUG51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BcjwK3Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254441051/rYwXcUG51.png" alt="image.png" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you will see the sign button instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mP5s-AE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254859780/poWwyKasq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mP5s-AE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254859780/poWwyKasq.png" alt="image.png" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it, I'm in, we're in the OpenSea market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz29lOz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255279419/Hf7q0Fduou.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz29lOz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255279419/Hf7q0Fduou.gif" alt="giphy.gif" width="480" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my OpenSea dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cCaZMXnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254524908/kgXNUvQyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cCaZMXnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640254524908/kgXNUvQyW.png" alt="image.png" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I'm &lt;strong&gt;unclebigbay&lt;/strong&gt; and not unnamed, it makes sense because my blockchain wallet doesn't carry a &lt;strong&gt;username&lt;/strong&gt; in my profile object for OpenSea to retrieve from, web3 only cares about my wallet address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uBwhC4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255656410/2njVH8ge5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uBwhC4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255656410/2njVH8ge5.gif" alt="2718b1a856037aa99a1a552efcacd05c.498x280x55.gif" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hover on the user profile avatar on the navbar and select the setting link to update your profile on OpenSea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QE4BhEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255777075/jLgDNZRAi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QE4BhEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255777075/jLgDNZRAi.png" alt="image.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in your profile details and hit the save button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ez1dNpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255911529/AncFKBu0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ez1dNpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255911529/AncFKBu0d.png" alt="image.png" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Profile updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5-YSdqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255985988/lSHOXIHEh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5-YSdqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640255985988/lSHOXIHEh.png" alt="image.png" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#minting-my-badges"&gt;
  &lt;/a&gt;
  Minting My Badges
&lt;/h1&gt;

&lt;p&gt;The business of the day, which is to mint my hashnode badges, you can check out the awards on  &lt;a href="https://cutt.ly/RUadSgr"&gt;LinkedIn&lt;/a&gt; if you haven't seen them yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-nft"&gt;
  &lt;/a&gt;
  Create NFT
&lt;/h3&gt;

&lt;p&gt;Click on the create navigation link on the navbar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15m5x_q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256748928/Gx5V1D39L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15m5x_q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256748928/Gx5V1D39L.png" alt="image.png" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nft-profile"&gt;
  &lt;/a&gt;
  NFT profile
&lt;/h3&gt;

&lt;p&gt;The two required detail of the new NFT you want to mint is the document you want to upload, check the supported document first, and the name of the NFT.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBcwAcGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256469772/ElHNIRhAr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBcwAcGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256469772/ElHNIRhAr.png" alt="image.png" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_x0EVGa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257519438/ULAfTMocl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_x0EVGa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257519438/ULAfTMocl.png" alt="image.png" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be providing an external link to redirect to &lt;a href="https://unclebigbay.com/badges"&gt;my hashnode badge page&lt;/a&gt; and a short description of the awards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61kSZKyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256598667/OUx4vSaMD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61kSZKyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640256598667/OUx4vSaMD.png" alt="image.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zo3RhzgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257592469/ZL68CZEMWr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zo3RhzgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257592469/ZL68CZEMWr.png" alt="image.png" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be skipping the rest of the forms since I won't be selling my award badges 🤪.&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;create&lt;/strong&gt; button to submit the NFT.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#done-and-dusted"&gt;
  &lt;/a&gt;
  Done and Dusted
&lt;/h1&gt;

&lt;p&gt;Congratulations to me and you, we just successfully minted my very own first NFT together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVkuzNMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257725748/xy4pb_6bE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVkuzNMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640257725748/xy4pb_6bE.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view my Hashnode award NFT badges &lt;a href="https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/106310183318563491576001418187544893345913273967622843574122850322892848103425/"&gt;HERE&lt;/a&gt; on OpenSea Marketplace.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h1&gt;

&lt;p&gt;Minting your awards, documents, or any asset that you own as demonstrated in this walkthrough article guarantees ownership of a unique digital asset. You can mint-supported digital assets such as JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLTF, with a max size of 100 MB on OpenSea.&lt;/p&gt;

&lt;p&gt;Sounds cool, right? You can go ahead and mint yours using the step-by-step guide in this article.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I will be minting one of my articles very soon.&lt;/p&gt;




&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned something new from this article, I will like to connect with you.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;See you in the next article. Bye Bye 🙋‍♂️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" alt="image.png" width="432" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>nfts</category>
    </item>
    <item>
      <title>8 Sourcegraph Search Query Features You Should Know About</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Mon, 03 Jan 2022 09:01:51 +0000</pubDate>
      <link>https://dev.to/sourcegraph/8-sourcegraph-search-query-features-you-should-know-about-1gmc</link>
      <guid>https://dev.to/sourcegraph/8-sourcegraph-search-query-features-you-should-know-about-1gmc</guid>
      <description>&lt;p&gt;&lt;a href="https://sourcegraph.com"&gt;Sourcegraph&lt;/a&gt; is a search tool that enables developers to search, explore and better understand all of their public and private code. It supercharges developer productivity and automates large-scale code changes. &lt;/p&gt;

&lt;p&gt;In this article, I’ll explore some Sourcegraph search gems with you. &lt;/p&gt;

&lt;p&gt;Here are 8 Sourcegraph search features you should know about!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-literal-expression-search"&gt;
  &lt;/a&gt;
  1. Literal Expression Search
&lt;/h2&gt;

&lt;p&gt;By default, all search queries on Sourcegraph are treated as literal patterns. If you know the exact string you’re looking for in the codebase, then all you need to do is paste it in the query box and search.&lt;/p&gt;

&lt;p&gt;Sourcegraph interprets this search pattern literally (as the name defines it) to simplify searching for words or punctuation in your codebase.&lt;/p&gt;

&lt;p&gt;With literal search, you can find function calls, error messages, comments, notes etc. For instance, if you want to search for how to use the &lt;em&gt;browser navigator clipboard API&lt;/em&gt;, you can simply use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;navigator.clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+navigator.clipboard&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+navigator.clipboard&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GovEm2gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198704/navigator-clipboard.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GovEm2gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198704/navigator-clipboard.gif" alt="Navigator Clipboard search" width="800" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more info, check out a &lt;a href="https://learn.sourcegraph.com/how-to-search-code-with-sourcegraph-using-literal-patterns"&gt;detailed article about literal expression search on Sourcegraph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-regular-expression-search"&gt;
  &lt;/a&gt;
  2. Regular Expression Search
&lt;/h2&gt;

&lt;p&gt;Sourcegraph’s query language is very powerful. One of its strengths is in the regular expression search it provides.&lt;/p&gt;

&lt;p&gt;On the search box, you need to enable the regular expression mode by clicking on the &lt;code&gt;*&lt;/code&gt; sign on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZBLjO0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641196727/unnamed_2_zfgnmo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZBLjO0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641196727/unnamed_2_zfgnmo.gif" alt="Enable regular expression" width="512" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the regex mode is enabled, you can start using regular expressions for advanced search patterns. You can also add &lt;code&gt;patterntype:regexp&lt;/code&gt; to your queries and this will automatically enable regex mode.  &lt;/p&gt;

&lt;p&gt;Let's see a few different use cases of regex search as examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Find how the filesync &lt;code&gt;readFile&lt;/code&gt; and &lt;code&gt;writeFile&lt;/code&gt; methods are used in several projects.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs\.(read|write)File patterntype:regexp 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+fs%5C.%28read%7Cwrite%29File&amp;amp;patternType=regexp"&gt;https://sourcegraph.com/search?q=context:global+fs%5C.%28read%7Cwrite%29File&amp;amp;patternType=regexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ng4S9y94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641200216/read-write-file-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ng4S9y94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641200216/read-write-file-search.gif" alt="Read write file search" width="800" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Find real-life use cases for &lt;code&gt;Promise.all&lt;/code&gt;, &lt;code&gt;Promise.any&lt;/code&gt;, &lt;code&gt;Promise.race&lt;/code&gt;, and &lt;code&gt;Promise.allSettled&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise.(any|race|allSettled) lang:JavaScript patterntype:regexp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+Promise.%28any%7Crace%7CallSettled%29+lang:JavaScript&amp;amp;patternType=regexp"&gt;https://sourcegraph.com/search?q=context:global+Promise.%28any%7Crace%7CallSettled%29+lang:JavaScript&amp;amp;patternType=regexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1eZ61eCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199017/promise-js-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1eZ61eCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199017/promise-js-search.gif" alt="Promise search" width="800" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out a &lt;a href="https://learn.sourcegraph.com/how-to-search-with-sourcegraph-using-regular-expression-patterns"&gt;detailed article about the regular expression search on Sourcegraph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-structural-search"&gt;
  &lt;/a&gt;
  3. Structural Search
&lt;/h2&gt;

&lt;p&gt;Structural search gives you wings as a developer. With structural search, you can copy-paste blocks of code into the Sourcegraph search box, and accurate results will be returned.&lt;/p&gt;

&lt;p&gt;First, enable the structural search mode by clicking on the &lt;code&gt;[ ]&lt;/code&gt; sign on the right:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXemRtjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199976/enable-structural-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXemRtjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199976/enable-structural-search.gif" alt="Enable Structural search" width="800" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can go ahead and perform a structural search like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"exclude": [...] lang:json file:tsconfig.json patterntype:structural
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+%22exclude%22:+%5B...%5D+lang:json+file:tsconfig.json&amp;amp;patternType=structural"&gt;https://sourcegraph.com/search?q=context:global+%22exclude%22:+%5B...%5D+lang:json+file:tsconfig.json&amp;amp;patternType=structural&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGVCiJPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199948/exclude-structural-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGVCiJPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199948/exclude-structural-search.gif" alt="Structural search" width="800" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more, check out a &lt;a href="https://learn.sourcegraph.com/how-to-search-with-sourcegraph-using-structural-patterns"&gt;detailed article about structural search on Sourcegraph&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-diff-search"&gt;
  &lt;/a&gt;
  4. Diff Search
&lt;/h2&gt;

&lt;p&gt;Diff search allows you to search for code in file diffs. It makes it easy for a developer to search for code that used to exist and compare it with code that presently exists.&lt;/p&gt;

&lt;p&gt;For example, the following search…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;repo:^github\.com/sourcegraph/sourcegraph$ type:diff matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+type:diff+matrix&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+type:diff+matrix&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aj9RikQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199855/diff-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aj9RikQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199855/diff-search.gif" alt="Diff search" width="800" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-commit-search"&gt;
  &lt;/a&gt;
  5. Commit Search
&lt;/h2&gt;

&lt;p&gt;Commit search allows you to search for specific strings used in commit messages across your codebase.&lt;/p&gt;

&lt;p&gt;Let’s search over commit messages like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulMkNUR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199769/commit-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulMkNUR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199769/commit-search.gif" alt="Commit search" width="800" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-search-contexts"&gt;
  &lt;/a&gt;
  6. Search Contexts
&lt;/h2&gt;

&lt;p&gt;Search contexts are a set of repositories at specific revisions that search queries on Sourcegraph will target. &lt;/p&gt;

&lt;p&gt;In other words, search contexts enable you to narrow, group and search only the code repositories you care about.&lt;/p&gt;

&lt;p&gt;By default, Sourcegraph uses a global search context (namely, &lt;strong&gt;context:global&lt;/strong&gt;) for all search queries, when no search context is specified by the actor (me, you, or a programmable robot) performing the search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhfSK1xZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198531/search-contexts-chakra.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhfSK1xZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198531/search-contexts-chakra.gif" alt="Search contexts" width="800" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more, check out a &lt;a href="https://dev.to/sourcegraph/how-to-use-search-contexts-on-sourcegraph-138n"&gt;detailed article about creating, and using search contexts on Sourcegraph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-symbol-search"&gt;
  &lt;/a&gt;
  7. Symbol Search
&lt;/h2&gt;

&lt;p&gt;Symbol search comes in handy when you want to directly search for function, class, variable and const definitions in your code search.&lt;/p&gt;

&lt;p&gt;With Sourcegraph, you can use the “type:symbol” filter in your search query like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;repo:^github\.com/sourcegraph/sourcegraph$ type:symbol Vector
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The search query returns the symbol you searched for. All the symbols in that particular repository or file are grouped and shown on the left-hand side.&lt;/p&gt;

&lt;p&gt;The grouped symbol list is searchable as shown in the gif below. You can search for whatever symbol you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sourcegraph has Symbol support for 75+  languages&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4Ixq3tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198656/symbol-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4Ixq3tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641198656/symbol-search.gif" alt="Symbol search" width="800" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-branch-amp-tag-search"&gt;
  &lt;/a&gt;
  8. Branch &amp;amp; Tag Search
&lt;/h2&gt;

&lt;p&gt;Sourcegraph makes it possible to search for code in all of your branches and tags. Yes, all your branches, not only the main branch!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#branch-search"&gt;
  &lt;/a&gt;
  Branch Search
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use Case:&lt;/strong&gt; Search the “add-panel-zoekt-cap” branch of the &lt;a href="https://github.com/sourcegraph/sourcegraph"&gt;sourcegraph/sourcegraph repo&lt;/a&gt; for webhook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+rev:*refs/heads/add-panel-zoekt-cap+webhook&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+rev:*refs/heads/add-panel-zoekt-cap+webhook&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72eqD_58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199027/tag-webhook-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72eqD_58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199027/tag-webhook-search.gif" alt="Tag search for webhook" width="800" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tag-search"&gt;
  &lt;/a&gt;
  Tag Search
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use Case:&lt;/strong&gt; Search the “v3.32.0-rc.2” tag of the &lt;a href="https://github.com/sourcegraph/sourcegraph"&gt;https://github.com/sourcegraph/sourcegraph repo&lt;/a&gt; for batch changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+rev:*refs/tags/v3.32.0-rc.2+batch+changes&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+rev:*refs/tags/v3.32.0-rc.2+batch+changes&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xg7qQd5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199042/tags-batch-changes-search.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xg7qQd5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1641199042/tags-batch-changes-search.gif" alt="Tag search" width="800" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The benefits of code search are innumerable. The faster you can find code, the higher the development velocity for you and your teammates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt; is not the only option to add, explore private code and use search contexts. Sourcegraph can be installed in different ways to give you advanced search features for your private code. &lt;/p&gt;

&lt;p&gt;You can run &lt;a href="https://docs.sourcegraph.com/admin/install#self-hosted"&gt;Sourcegraph locally&lt;/a&gt; or opt-in for us to set up a &lt;a href="https://docs.sourcegraph.com/admin/install/managed"&gt;managed Sourcegraph instance&lt;/a&gt; for your team. You'll be able to use a self-hosted Sourcegraph instance for free (up to 10 users).&lt;/p&gt;




&lt;p&gt;Have suggestions or questions? Leave a comment, or join our &lt;a href="https://about.sourcegraph.com/community/?utm_medium=social&amp;amp;utm_source=devto&amp;amp;utm_campaign=slacklaunch"&gt;Community Slack Space&lt;/a&gt; where our team will be happy to answer any questions you may have about Sourcegraph.&lt;/p&gt;

</description>
      <category>codesearch</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to build a blockchain from scratch in Rust</title>
      <author>Enoch Chejieh</author>
      <pubDate>Mon, 03 Jan 2022 08:59:25 +0000</pubDate>
      <link>https://dev.to/ecj222/how-to-build-a-blockchain-from-scratch-in-rust-46</link>
      <guid>https://dev.to/ecj222/how-to-build-a-blockchain-from-scratch-in-rust-46</guid>
      <description>&lt;p&gt;2021 was a huge year for cryptocurrencies, NFT's, and decentralized applications (DAPPs), and 2022 will be even bigger. Blockchain is the underlying technology behind all these technologies.&lt;/p&gt;

&lt;p&gt;Blockchain technology has the potential to change nearly every aspect of our lives from the Finance industry, Travel &amp;amp; mobility, Infrastructures, Healthcare, Public sector, Retail, Agriculture &amp;amp; mining, Education, Communication, Entertainment, and more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every smart person that I admire in the world, and those I semi-fear, is focused on this concept of crypto for a reason. They understand that this is the driving force of the fourth industrial revolution: steam engine, electricity, then the microchip — blockchain and crypto is the fourth. &lt;br&gt;
— Brock Pierce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfGEgQbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvm40wp4py0kvpecxrxu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfGEgQbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvm40wp4py0kvpecxrxu.jpg" alt="Blockchain" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-blockchain"&gt;
  &lt;/a&gt;
  What is a blockchain?
&lt;/h3&gt;

&lt;p&gt;A blockchain is a decentralized ledger of transactions across a peer-to-peer network, you can also think of a blockchain like a decentralized database that is immutable. A blockchain can be broken down fundamentally into several components e.g Node, Transaction, Block, Chain and The consensus protocol (proof of work, proof of stake, proof of history).&lt;/p&gt;

&lt;p&gt;If you are anything like me, you learn by building. Now the reason I’m writing this article is to give you a basic overview of how blockchains work by building a blockchain with Rust.&lt;/p&gt;

&lt;p&gt;Sounds good? Let’s get to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Let us start by creating a new Rust project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo +nightly new blockchain
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change to the directory you just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd blockchain
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s add the necessary packages we need to build a blockchain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[dependencies]
chrono = "0.4"
serde = { version = "1.0.106", features = ["derive"] }
serde_json = "1.0"
sha2 = "0.10.0"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create folder called models, that’s where you will keep most of your blockchain logic. In that folder create two (2) files called &lt;code&gt;blockchain.rs&lt;/code&gt; and &lt;code&gt;block.rs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Import the following packages in both of the files and save them:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blockchain.rs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use chrono::prelude::*;
// Internal module
use super::block::Block;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;block.rs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use super::blockchain::Blockchain;
use chrono::prelude::*;
use sha2::{Sha256, Digest};
use serde::{Deserialize, Serialize};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you noticed we imported use &lt;code&gt;super::block::Block;&lt;/code&gt; in our &lt;code&gt;blockchain.rs&lt;/code&gt; file, we are just importing the struct located in our &lt;code&gt;block.rs&lt;/code&gt; file here, don’t worry I will explain that a bit later.&lt;/p&gt;

&lt;p&gt;After we have imported the necessary packages let’s create a type in our &lt;code&gt;blockchain.rs&lt;/code&gt; file called &lt;code&gt;Blocks&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Blocks = Vec&amp;lt;Block&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s create a &lt;code&gt;Blockchain&lt;/code&gt; type in &lt;code&gt;blockchain.rs&lt;/code&gt; and an empty implementation for our &lt;code&gt;Blockchain&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// `Blockchain` A struct that represents the blockchain.
#[derive(Debug)]
pub struct Blockchain {
  // The first block to be added to the chain.
  pub genesis_block: Block,
  // The storage for blocks.
  pub chain: Blocks,
  // Minimum amount of work required to validate a block.
  pub difficulty: usize
}
impl Blockchain {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s create a &lt;code&gt;Block&lt;/code&gt; type in &lt;code&gt;block.rs&lt;/code&gt; and an empty implementation for our &lt;code&gt;Block&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// `Block`, A struct that represents a block in a Blockchain.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Block {
   // The index in which the current block is stored.
   pub index: u64,
   // The time the current block is created.
   pub timestamp: u64,

   // The block's proof of work.
   pub proof_of_work: u64,
   // The previous block hash.
   pub previous_hash: String,
   // The current block hash.
   pub hash: String
}
impl Block {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-genesis-block"&gt;
  &lt;/a&gt;
  Creating the genesis block:
&lt;/h3&gt;

&lt;p&gt;The genesis block is the first block created in a blockchain. Let’s create a function that creates a genesis block for our blockchain and returns a new instance of the &lt;code&gt;Blockchain&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Add the following code in our &lt;code&gt;Blockchain&lt;/code&gt; implementation in &lt;code&gt;blockchain.rs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;impl Blockchain {
   pub fn new(difficulty: usize) -&amp;gt; Self {
     // First block in the chain.
     let mut genesis_block = Block {
        index: 0,
        timestamp: Utc::now().timestamp_millis() as u64,
        proof_of_work: u64::default(),
        previous_hash: String::default(),
        hash: String::default()
     };
     // Create chain starting from the genesis chain.
     let mut chain = Vec::new();
     chain.push(genesis_block.clone());
     // Create a blockchain Instance.
     let blockchain = Blockchain {
        genesis_block,
        chain,
        difficulty
     };
     blockchain
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created our &lt;code&gt;genesis_block&lt;/code&gt; instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added the &lt;code&gt;genesis_block&lt;/code&gt; we created to the chain in our &lt;code&gt;Blockchain&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Returned an instance of the &lt;code&gt;Blockchain&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;genesis_block&lt;/code&gt; instance we created, notice how we set our previous_hash key to an empty string value (&lt;code&gt;String::default()&lt;/code&gt;) that’s because there would be no previous block since the genesis block is the first block in the blockchain.&lt;/p&gt;

&lt;p&gt;Also notice we made the hash of our &lt;code&gt;genesis_block&lt;/code&gt; to be an empty string (“”) that’s because we haven’t calculated the hash value for our genesis block yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-the-hash-of-a-block"&gt;
  &lt;/a&gt;
  Generating the hash of a block
&lt;/h3&gt;

&lt;p&gt;A hash is generated with the help of cryptography and current information present in the block.&lt;/p&gt;

&lt;p&gt;Let’s create a function in our block implementation in the &lt;code&gt;block.rs&lt;/code&gt; file we created called &lt;code&gt;calculate_hash()&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Calculate block hash.
pub fn calculate_hash(&amp;amp;self) -&amp;gt; String {
  let mut block_data = self.clone();
  block_data.hash = String::default();
  let serialized_block_data = serde_json::to_string(&amp;amp;block_data).unwrap();
  // Calculate and return SHA-256 hash value.
  let mut hasher = Sha256::new();
  hasher.update(serialized_block_data);
  let result = hasher.finalize();
  format!("{:x}", result)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Converted the block’s data to JSON format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hashed the block’s data with the SHA256 algorithm.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Returned the hashing result in base16.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-block"&gt;
  &lt;/a&gt;
  Creating a new block
&lt;/h3&gt;

&lt;p&gt;Great!, we have implemented functionalities for creating our genesis block and calculating the block hashes of our blocks.&lt;/p&gt;

&lt;p&gt;Now let’s add the functionality for adding new blocks to the blockchain, in our blockchain.rs file add this function to the &lt;code&gt;Blockchain&lt;/code&gt; type implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pub fn add_block(&amp;amp;mut self, nonce: String) {
  let new_block = Block::new(
    self.chain.len() as u64,
    nonce,
    self.chain[&amp;amp;self.chain.len() - 1].previous_hash.clone()
  );
  new_block.mine(self.clone());
  self.chain.push(new_block.clone());
  println!("New block added to chain -&amp;gt; {:?}", new_block);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created an &lt;code&gt;add_block&lt;/code&gt; function that takes in an argument called &amp;amp;mut self (instance of the &lt;code&gt;Blockchain&lt;/code&gt; type).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created our instance of the &lt;code&gt;Block&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mined a block hash using the &lt;code&gt;Block&lt;/code&gt; type’s mine function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added the new block to the chain of blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, in our &lt;code&gt;block.rs&lt;/code&gt; file add the following code in the &lt;code&gt;Block&lt;/code&gt; type implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Create a new block. The hash will be calculated and set automatically.
pub fn new (
 index: u64,
 previous_hash: String,
) -&amp;gt; Self {
   // Current block to be created.
   let mut block = Block {
      index: 0,
      timestamp: Utc::now().timestamp_millis() as u64,
      proof_of_work: u64::default(),
      previous_hash: String::default(),
      hash: String::default(),
   };
   block
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created a function called &lt;code&gt;new()&lt;/code&gt; that takes in three arguments index and previous_hash.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created our instance of the &lt;code&gt;Block&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generated a block hash for our block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Returned an instance of the &lt;code&gt;Block&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mining-new-block"&gt;
  &lt;/a&gt;
  Mining new block
&lt;/h3&gt;

&lt;p&gt;We have successfully implemented functionality for creating a new block.&lt;/p&gt;

&lt;p&gt;Let's implement functionality for mining new blocks. The process of mining new blocks involves generating a SHA256 hash that starts with a desired number of 0s which would be the mining difficulty miners have to solve to mine a new block.&lt;/p&gt;

&lt;p&gt;Let's create a function in our &lt;code&gt;block.rs&lt;/code&gt; file inside our &lt;code&gt;Block&lt;/code&gt; type implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Mine block hash.
pub fn mine (&amp;amp;mut self, blockchain: Blockchain) {
  loop {
    if !self.hash.starts_with(&amp;amp;"0".repeat(blockchain.difficulty)) {
      self.proof_of_work += 1;
      self.hash = self.generate_block_hash();
    } else {
       break
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great job, we are done with implementing our blockchain, now let’s test it out.&lt;/p&gt;

&lt;p&gt;Let’s create a file called &lt;code&gt;mod.rs&lt;/code&gt; in our models folder and save the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pub mod block;
pub mod blockchain;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we are doing here is making the files we created earlier &lt;code&gt;blockchain.rs&lt;/code&gt; and &lt;code&gt;block.rs&lt;/code&gt; publicly accessible in our main.rs file.&lt;/p&gt;

&lt;p&gt;Now let’s paste the following code in our &lt;code&gt;main.rs&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mod models;
fn main() {
   let difficulty = 1;
   let mut blockchain = models::blockchain::Blockchain::new(difficulty);
   models::blockchain::Blockchain::add_block(&amp;amp;mut blockchain);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to initiate a transaction run &lt;code&gt;cargo +nightly run&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this tutorial you’ve learned how to create a simple blockchain from scratch with Rust.&lt;/p&gt;

&lt;p&gt;I hope you’ve enjoyed reading this article, you can get the full source code of this Rust blockchain &lt;a href="https://github.com/ECJ222/Rust-blockchain"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any comments, please feel free to drop them below.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>blockchain</category>
      <category>web3</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create React App - Mind Map. Part 7 of 10: Chart</title>
      <author>101samovar</author>
      <pubDate>Mon, 03 Jan 2022 08:33:50 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-chart-1cbf</link>
      <guid>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-chart-1cbf</guid>
      <description>&lt;p&gt;The Chart is the most interesting part of the MindMap App.&lt;br&gt;
Let’s create a separate component for the chart.&lt;br&gt;
A functional component.&lt;br&gt;
And the chart.module.css file for the styling.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/6xU9vmADJkI"&gt;https://youtu.be/6xU9vmADJkI&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A11y tips: what is ARIA and when to use it</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 03 Jan 2022 08:03:20 +0000</pubDate>
      <link>https://dev.to/carlosespada/a11y-tips-what-is-aria-and-when-to-use-it-2ncd</link>
      <guid>https://dev.to/carlosespada/a11y-tips-what-is-aria-and-when-to-use-it-2ncd</guid>
      <description>&lt;p&gt;ARIA stands for &lt;a href="https://www.w3.org/TR/using-aria/"&gt;Accessible Rich Internet Applications&lt;/a&gt;, and consists of a &lt;strong&gt;set of attributes and values ​​that are added to HTML tags to offer extra information to assistive technologies&lt;/strong&gt; and thus improve their experience. It is about communicating what happens on a page, what it means and how you can interact with it.&lt;/p&gt;

&lt;p&gt;And when might it be necessary to use ARIA? Only in these cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the feature is available in HTML but it is not implemented, or it is implemented but &lt;a href="https://www.html5accessibility.com/"&gt;accessibility support&lt;/a&gt; is not.&lt;/li&gt;
&lt;li&gt;If the feature is not currently available in HTML.&lt;/li&gt;
&lt;li&gt;If the visual design constraints rule out the use of a particular native element, because the element cannot be styled as required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, &lt;strong&gt;ARIA should never be used to fix meaningless or incorrect HTML or to rewrite behaviors&lt;/strong&gt; that already come natively in the browser using less suitable ones with added ARIA roles.&lt;/p&gt;

&lt;p&gt;A very common example might be trying to emulate a button using a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with ARIA attributes. &lt;strong&gt;Don't do it&lt;/strong&gt;. Use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, it will always be the best option no matter how hard you try to imitate it.&lt;/p&gt;

&lt;p&gt;Remember: the &lt;a href="https://www.w3.org/TR/using-aria/#rule1"&gt;first rule of ARIA&lt;/a&gt; is &lt;strong&gt;"Don't use ARIA"&lt;/strong&gt;. The less it is used, the better. Try to solve your problems first using what very capable people have thought before, working on our technologies for years.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>tips</category>
      <category>html</category>
    </item>
    <item>
      <title>React Component Testing</title>
      <author>Dylan Oh</author>
      <pubDate>Mon, 03 Jan 2022 08:02:43 +0000</pubDate>
      <link>https://dev.to/ohdylan/react-component-testing-54ie</link>
      <guid>https://dev.to/ohdylan/react-component-testing-54ie</guid>
      <description>&lt;p&gt;In our last article, we have introduced the usage of Jest to test our JavaScript code &lt;a href="https://dev.to/ohdylan/start-testing-your-javascript-codes-with-jest-2gfm"&gt;Start Testing Your JavaScript Code with Jest&lt;/a&gt;. We are going to further extend the topic to introduce how do we use React Testing Library and Jest to test our React components.&lt;/p&gt;

&lt;p&gt;React Testing Library and Jest are provided out-of-the-box support with &lt;code&gt;create-react-app&lt;/code&gt; and we do not need to install them separately. React Testing Library (RTL) is built on top of the DOM testing library, as in the tests will work with the actual DOM. This allows the tests to simulate the ways that users will interact with DOM, as closer as possible. It is super easy to use, provides an array of assertion methods (extended from Jest), user-events simulation and etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create-react-app&lt;/code&gt; uses Jest as its test runner. Jest will look for the test files name with the following naming conventions (according to official site):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files with .js suffix in __tests__ folders.&lt;/li&gt;
&lt;li&gt;Files with .test.js suffix.&lt;/li&gt;
&lt;li&gt;Files with .spec.js suffix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we are going to explore how render our components to be tested, finding the right element in the component, and performing snapshot testing. Let's get started with creating a new &lt;code&gt;create-react-app&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app testing-react-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the creation, change directory into the app that you created and open the directory in your desired code editor.&lt;/p&gt;

&lt;p&gt;You should already see an &lt;em&gt;App.test.js&lt;/em&gt; in the &lt;em&gt;src&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may remove this file, or leave it. I will remove it for this demonstration and therefore you will not see it being included in the test suites.&lt;/p&gt;

&lt;p&gt;What I will normally do next is that I will create a &lt;em&gt;components&lt;/em&gt; folder and include the files (such as css and test files) that belong to this component inside this folder. After created &lt;em&gt;components&lt;/em&gt; folder, create two more folders called &lt;em&gt;SubscribeForm&lt;/em&gt; and &lt;em&gt;PokeSearch&lt;/em&gt;. These are the two components that we want to write some tests on today.&lt;/p&gt;

&lt;p&gt;Let's create our first simple component in SubscribeForm folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;SubscribeForm.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./SubscribeForm.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDisabled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsDisabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Our&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;agree&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;disagree&lt;/span&gt; &lt;span class="nx"&gt;whatever&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;terms&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;conditions&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple component, where we have an input field for email address, and a button to hit "subscribe". The button is first disabled and prevent clicking before any text is entered to the input field. This button seems to be one of the perfect test cases that we can create. &lt;/p&gt;

&lt;p&gt;Button is disabled before text input&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yYea06O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6in3pzfg9inj9ad9ppzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yYea06O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6in3pzfg9inj9ad9ppzm.png" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Button is enabled after text input&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hkRP1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aph4hh50lb2vrjpzpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hkRP1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aph4hh50lb2vrjpzpn.png" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Followed by this, we are going to create another component called PokeSearch (I am not a Pokemon fan, but Poke API is good for demonstration). As another simple enough example, we have a component that has a useEffect hook to fetch information from an API, and display it (Pokemon name) to the screen. Before the result is fetched, we display a "...Loading..." text to users. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;PokeSearch.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPokemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/bulbasaur`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setPokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's jump into testing these two components. For our first component, SubscribeForm component, we create a new file called &lt;em&gt;SubscribeForm.test.js&lt;/em&gt;. We followed the naming convention, so that it could be recognized by our test runner. In order to create tests, we will need &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt; from &lt;em&gt;testing-library/react&lt;/em&gt; and the user events from &lt;em&gt;testing-library/user-event&lt;/em&gt;. Besides, remember to import the component that we want to test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SubscribeForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can first create a test to ensure that our button is disabled when the page first loaded, since there is no input in the email address field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button is disabled before typing anything in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the last article, we know that we will give a name to our test, and provide a callback function, which includes the assertions. &lt;/p&gt;

&lt;p&gt;First, we use render method to render the component to be tested in a container which is appended to document.body (on a side note, Jest 26 and before is using jsdom as default environment). After rendering out the component, we need to have a way to find the right element (which is the button) to test. We can use query methods from RTL to do so. The elements in DOM can be found by their accessibility roles and names (more on this later), or by text, or by test id that we give to the elements. There is a priority given by official statements. They recommend to query by role or text (where everyone is accessible), by semantic HTML (alt text such as img, area, etc), and by test id (user cannot see or hear this, therefore if you could not make sense of using any of previous methods, use this).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-testid=&lt;/span&gt;&lt;span class="s"&gt;"test-element"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information about the priority here: &lt;br&gt;
&lt;a href="https://testing-library.com/docs/queries/about#priority"&gt;About Queries of React Testing Library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do this to find out the accessible roles within your component: You can just write &lt;code&gt;screen.getByRole("")&lt;/code&gt; in the test for that component, it will fail but give you the accessibility information and the name of those elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Here&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;accessible&lt;/span&gt; &lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subscribe To Our Newsletter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;textbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;checkbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I agree to disagree whatever the terms and conditions are.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here we know that we have different accessibility roles such as button, textbox, checkbox and heading. In order to target our subscribe button, we need to target role "button". After targeting the role, we want specifically the button with the accessible name "Subscribe", as stated in the accessibility information provided ('Name "Subscribe"'). This value of "Name" can be derived from visible or invisible property of an element, the text in the button is one of them. In order to search for its name, we usually put insensitive case for regex on the name, into the second object argument of getByRole (&lt;code&gt;{name: /subscribe/i}&lt;/code&gt;). After getting that button, we want to check if this button is disabled (it should be disabled). &lt;/p&gt;

&lt;p&gt;Then we have the second test. In this test, we simulate the user event to type something in the text box, and make the button enabled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button becomes enabled when we start typing in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/email/i&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the same step to render the SubscribeForm to the document, and use user event of "type", to type some text on the element that we want, in this case, it is the textbox that we can select by accessible role and name (refer back to the accessibility information that we took just now). The second argument of &lt;code&gt;userEvent.type()&lt;/code&gt; is the text that you want to input. After the text has been typed, we can now expect the button to be enabled.&lt;/p&gt;

&lt;p&gt;Finally, we are doing a snapshot testing for our React componenet. We need to use react-test-renderer to render a pure JavaScript object (does not depend on DOM) for the snapshot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-test-renderer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing and importing, we can use the renderer to create SubscribeForm component in JavaScript Object. Finally, we use a toMatchSnapshot() function from Jest, to kickstart the snapshot testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this test for the first time, it will create a new  folder (automatically after you run the test), called &lt;em&gt;__snapshots__&lt;/em&gt; within your directory, in this case is the SubscribeForm folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;2.519&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMlMZnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2lzeq6cif2pzwkja1x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMlMZnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2lzeq6cif2pzwkja1x1.png" alt="Image description" width="239" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a snap document in it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;SubscribeForm.test.js.snap&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Jest Snapshot v1, https://goo.gl/fbAQLP&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Test to match snapshot of component 1`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
&amp;lt;div
  className="container"
&amp;gt;
  &amp;lt;h1&amp;gt;
    Subscribe To Our Newsletter
  &amp;lt;/h1&amp;gt;
  &amp;lt;form
    className="form"
  &amp;gt;
    &amp;lt;label
      htmlFor="email"
    &amp;gt;
      Email Address
    &amp;lt;/label&amp;gt;
    &amp;lt;input
      id="email"
      name="email"
      onChange={[Function]}
      placeholder="Email Address"
      type="email"
      value=""
    /&amp;gt;
    &amp;lt;input
      id="agreement_checkbox"
      name="agreement_checkbox"
      type="checkbox"
    /&amp;gt;
    &amp;lt;label
      htmlFor="agreement_checkbox"
    &amp;gt;
      I agree to disagree whatever the terms and conditions are.
    &amp;lt;/label&amp;gt;
    &amp;lt;button
      className="button"
      disabled={true}
      name="subscribe-button"
      type="submit"
    &amp;gt;
      Subscribe
    &amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the test suite take note of your previous snapshot of the component. If you run the test again, it will take another snapshot of the compoenent, and compare to the one in &lt;em&gt;__snapshots__&lt;/em&gt; folder. If they are different, the test is going to fail. This is useful to make sure that our UI components did not get changed unexpectedly. Let's try to make a change to our SubscribeForm component and run the test again. We are going to change "Subscribe to Our Newsletter" to "Subscribe to Their Newsletter".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Subscribe To Their Newsletter&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we run the test again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;FAIL&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Test to match snapshot of component 1`&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Snapshot&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Received&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="p"&gt;@@&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;@@&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Our&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt;     &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Their&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;

      &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt;                               &lt;span class="o"&gt;^&lt;/span&gt;
      &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;anonymous&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Inspect&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;press&lt;/span&gt; &lt;span class="s2"&gt;`u`&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;3.817&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and the test failed. If this is an intended change, we can update our snapshot to the latest by pressing "u". By doing that, the snap file in our &lt;em&gt;__snapshots__&lt;/em&gt; folder will get updated, all the tests are re-run and they pass this time. This is pretty similar to what we used (Enzyme library) last time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;2.504&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore, this is the complete script to test our SubscribeForm component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-test-renderer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SubscribeForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button is disabled before typing anything in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button becomes enabled when we start typing in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/email/i&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note to mention: There is a clean up process (&lt;code&gt;afterEach(cleanup)&lt;/code&gt;) done to prevent memory leak automatically by Jest (injected globally) after each test.&lt;/p&gt;

&lt;p&gt;Finally, we would also like to test our component asynchronously (PokeSearch).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;waitForElementToBeRemoved&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PokeSearch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading is shown until the Pokemon is fetched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitForElementToBeRemoved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we can test if the "...Loading..." text is rendered correctly to the screen. We need to query on the correct element that contains "...Loading...", and use assertion method to check if it is in the DOM. Then we can use an asynchronous function provided by RTL to be resolved by the loading text element to disappear after the result is fetched. Besides, it is also recommended by official site to use &lt;code&gt;queryBy...&lt;/code&gt; to query for the element to disappear from DOM.&lt;/p&gt;

&lt;p&gt;After testing the Loading text, we can then test the case after fetched. In this test case, we do not want to test with the real API (we are just ensuring that our component is working fine), there we can just mock the fetch function. We fix the returned data by the fetch function when the promise is resolved. After that, we will render the PokeSearch, and the fetch call is made to fetch our fake data. After the data is back, we will try to use &lt;code&gt;findBy...&lt;/code&gt; (use &lt;code&gt;findBy...&lt;/code&gt; for asynchronous case) to find for the element that has text "bulbasaur", and check if the element is in the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Pokemon name is displayed correctly after it has been fetched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Mock the browser fetch function&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this gives you an insight on how do get started on testing React components.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement 😊&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic Instagram Clone</title>
      <author>Mert Kadir</author>
      <pubDate>Mon, 03 Jan 2022 07:30:32 +0000</pubDate>
      <link>https://dev.to/9mertkadirr/basic-instagram-clone-19e6</link>
      <guid>https://dev.to/9mertkadirr/basic-instagram-clone-19e6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lhagi__4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0k5kirzgw22tqol1hfc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lhagi__4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0k5kirzgw22tqol1hfc.PNG" alt="Image description" width="386" height="680"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YFWhAzZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19t1p9cx8l0nvq8tjn1i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YFWhAzZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19t1p9cx8l0nvq8tjn1i.PNG" alt="Image description" width="393" height="700"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjVXWgGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czelo2mjfdu5udbd39r8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjVXWgGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czelo2mjfdu5udbd39r8.PNG" alt="Image description" width="382" height="683"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In its simplest form, Instagram has infrastructure. It has no design and details, has the features to create users, create posts, select photos, annotate and log out,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mertkadirarslan/BasicInstagramClone"&gt;Project Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mertkadirarslan.com.tr"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>mobile</category>
      <category>github</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Fiber Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:20:12 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-fiber-version-4la0</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-fiber-version-4la0</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt; framework and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure a Fiber application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Fiber is an &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; inspired HTTP web framework written in Golang with performance and zero memory allocation support. Fiber is built on top of &lt;a href="https://github.com/valyala/fasthttp"&gt;Fasthttp&lt;/a&gt;, an HTTP engine written in Golang.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this &lt;a href="https://github.com/Mr-Malomz/fiber-mongo-api"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir fiber-mongo-api &amp;amp;&amp;amp; cd fiber-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a  &lt;code&gt;fiber-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init fiber-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/gofiber/fiber/v2 go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/gofiber/fiber/v2&lt;/code&gt; is a framework for building web application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;

&lt;p&gt;After installing the required dependencies, we might get &lt;code&gt;github.com/klauspost/compress is not in your go.mod filego mod tidy&lt;/code&gt; error in &lt;code&gt;go.mod&lt;/code&gt; file. To fix this, we need to manually install the required package with&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/klauspost/compress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize a Fiber application using the &lt;code&gt;New&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Get&lt;/code&gt; function to route to &lt;code&gt;/&lt;/code&gt; path and an handler function that returns a JSON of &lt;code&gt;Hello from Fiber &amp;amp; mongoDB&lt;/code&gt;. &lt;code&gt;fiber.Map&lt;/code&gt; is a shortcut for &lt;code&gt;map[string]interface{}&lt;/code&gt;, useful for JSON returns.&lt;/li&gt;
&lt;li&gt;Set the application to listen on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kRNk88H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640616832121_Screenshot%2B2021-12-27%2Bat%2B15.39.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kRNk88H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640616832121_Screenshot%2B2021-12-27%2Bat%2B15.39.28.png" alt="Testing the app" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldI5sqIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640618264604_Screenshot%2B2021-12-27%2Bat%2B16.17.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldI5sqIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640618264604_Screenshot%2B2021-12-27%2Bat%2B16.17.26.png" alt="Updated project folder structure" width="536" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oPdbnQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640646363920_Screenshot%2B2021-12-28%2Bat%2B00.05.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oPdbnQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640646363920_Screenshot%2B2021-12-28%2Bat%2B00.05.44.png" alt="Updated folder structure with .env file" width="536" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type,  a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XapHbJmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640678631468_Screenshot%2B2021-12-28%2Bat%2B00.18.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XapHbJmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640678631468_Screenshot%2B2021-12-28%2Bat%2B00.18.21.png" alt="terminal output" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure a Fiber application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>fiber</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Echo Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:19:19 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-echo-version-2gdg</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-echo-version-2gdg</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt; framework and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure an Echo application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Echo is a Golang-based HTTP web framework with high performance and extensibility. It supports optimized routing, middlewares, templating, data binding and rendering.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this repository.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir echo-mongo-api &amp;amp;&amp;amp; cd echo-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates an  &lt;code&gt;echo-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init echo-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/labstack/echo/v4 go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/labstack/echo/v4&lt;/code&gt; is a framework for building web application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize an Echo application using the &lt;code&gt;New&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Get&lt;/code&gt; function to route to &lt;code&gt;/&lt;/code&gt; path and an handler function that returns a JSON of &lt;code&gt;Hello from Echo &amp;amp; mongoDB&lt;/code&gt;. &lt;code&gt;echo.Map&lt;/code&gt; is a shortcut for &lt;code&gt;map[string]interface{}&lt;/code&gt;, useful for JSON returns.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Start&lt;/code&gt; function to run the application on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cahN6G2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705723363_Screenshot%2B2021-12-28%2Bat%2B16.35.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cahN6G2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705723363_Screenshot%2B2021-12-28%2Bat%2B16.35.05.png" alt="Testing the app" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmwWHJna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705978931_Screenshot%2B2021-12-28%2Bat%2B16.37.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmwWHJna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705978931_Screenshot%2B2021-12-28%2Bat%2B16.37.13.png" alt="Updated project folder structure" width="540" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7D0z3uHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640706662816_Screenshot%2B2021-12-28%2Bat%2B16.50.46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7D0z3uHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640706662816_Screenshot%2B2021-12-28%2Bat%2B16.50.46.png" alt="Updated folder structure with .env file" width="540" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
  

&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type,  a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpweAjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640726048122_Screenshot%2B2021-12-28%2Bat%2B17.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpweAjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640726048122_Screenshot%2B2021-12-28%2Bat%2B17.03.40.png" alt="terminal output" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure an Echo application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>echo</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Gorilla/Mux Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:18:24 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gorillamux-version-57fh</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gorillamux-version-57fh</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/gorilla/mux"&gt;Mux&lt;/a&gt; package and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure a Mux application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Gorilla/Mux, popularly known as &lt;strong&gt;Mux&lt;/strong&gt;, is a powerful HTTP router and URL matcher for building Go web servers.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this &lt;a href="https://github.com/Mr-Malomz/mux-mongo-api"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir mux-mongo-api &amp;amp;&amp;amp; cd mux-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a  &lt;code&gt;mux-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init mux-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/gorilla/mux go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/gorilla/mux&lt;/code&gt; is a package for building web servers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize a Mux router using the &lt;code&gt;NewRouter&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;HandleFunc&lt;/code&gt; function that uses &lt;code&gt;net/http&lt;/code&gt; package as parameters to route to &lt;code&gt;/&lt;/code&gt; path and a handler function that sets the header type to a &lt;strong&gt;JSON&lt;/strong&gt; and returns a JSON of &lt;code&gt;Hello from Mux &amp;amp; mongoDB&lt;/code&gt; using the &lt;code&gt;encoding/json&lt;/code&gt; package. We also attached the HTTP method to this function &lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;http.ListenAndServe&lt;/code&gt; function to run the application on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ccutaY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640683931465_Screenshot%2B2021-12-28%2Bat%2B10.15.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ccutaY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640683931465_Screenshot%2B2021-12-28%2Bat%2B10.15.17.png" alt="Testing the app" width="880" height="712"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-W77t-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640684172740_Screenshot%2B2021-12-28%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-W77t-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640684172740_Screenshot%2B2021-12-28%2Bat%2B10.35.59.png" alt="Updated project folder structure" width="536" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5coi5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640685273552_Screenshot%2B2021-12-28%2Bat%2B10.54.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5coi5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640685273552_Screenshot%2B2021-12-28%2Bat%2B10.54.15.png" alt="Updated folder structure with .env file" width="536" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns a &lt;code&gt;net/http&lt;/code&gt; handler. Inside the returned handler, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w.WriteHeader&lt;/code&gt; function is used for setting the API status code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;json.NewDecoder&lt;/code&gt; ‘s &lt;code&gt;Decode&lt;/code&gt; and &lt;code&gt;Encode&lt;/code&gt; methods are used to convert  &lt;strong&gt;JSON&lt;/strong&gt; into a &lt;strong&gt;Go&lt;/strong&gt; value and vice-versa.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns a &lt;code&gt;net/http&lt;/code&gt; handler. Inside the returned handler, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type, a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully  deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QS5uM2Az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640698765987_Screenshot%2B2021-12-28%2Bat%2B10.58.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QS5uM2Az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640698765987_Screenshot%2B2021-12-28%2Bat%2B10.58.17.png" alt="terminal output" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure a Gin-gonic application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gorilla/mux"&gt;Gorilla/Mux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>mux</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
  </channel>
</rss>
