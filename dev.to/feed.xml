<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a Personal Access Token - Azure DevOps</title>
      <author>Davide Benvegn√π</author>
      <pubDate>Wed, 07 Apr 2021 07:55:21 +0000</pubDate>
      <link>https://dev.to/n3wt0n/how-to-create-a-personal-access-token-azure-devops-2fm7</link>
      <guid>https://dev.to/n3wt0n/how-to-create-a-personal-access-token-azure-devops-2fm7</guid>
      <description>&lt;p&gt;Today I'm going to show you exactly what to do to create a &lt;strong&gt;Personal Access Token in Azure DevOps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After the &lt;a href="https://dev.to/n3wt0n/how-to-create-a-personal-access-token-pg7"&gt;article&lt;/a&gt; and the &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;video&lt;/a&gt; of a couple of weeks ago about the creation of Personal Access Tokens in GitHub, today I have for you a step by step guide on how to &lt;strong&gt;create a PAT in Azure DevOps&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As we have seen in the other article and video I've mentioned before, Personal access tokens (PATs) are an alternative to using passwords for authentication when using APIs or the command line, or if we want to integrate with any 3rd party system.&lt;/p&gt;

&lt;p&gt;Let's see how we can create a PAT in Azure DevOps&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video" class="anchor"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;To see how to &lt;strong&gt;create a PAT&lt;/strong&gt; on your Azure DevOps, and how to properly scope it, I've created a video in which I explain &lt;strong&gt;step by step&lt;/strong&gt; what you need to do.&lt;/p&gt;

&lt;p&gt;Here you have it, enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o1rrrVKzc-o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/o1rrrVKzc-o"&gt;Link to the video: https://youtu.be/o1rrrVKzc-o&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;As you have seen, creating a PAT in Azure DevOps is slightly faster than doing it in GitHub, but the process is anyway very similar.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any question about PATs in Azure DevOps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o1rrrVKzc-o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>devops</category>
      <category>pat</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Consuming the DEV API with Next and React Query!</title>
      <author>Devin Ford</author>
      <pubDate>Wed, 07 Apr 2021 07:54:46 +0000</pubDate>
      <link>https://dev.to/devindford/consuming-the-dev-api-with-next-and-react-query-3000</link>
      <guid>https://dev.to/devindford/consuming-the-dev-api-with-next-and-react-query-3000</guid>
      <description>&lt;p&gt;I've been looking for a reason to try out React Query and Tailwind for a while, but nothing really stuck out as a good way to try them in a fun way. That was until I discovered that DEV had a consumable &lt;a href="https://docs.forem.com/api/"&gt;API&lt;/a&gt;, and inspiration struck! I wanted to use their "rising" parameter to display the recent articles on the rise from DEV!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This is not a full tutorial, more of an overview. Let me know in the comments if you want a full breakdown of how I set this project up&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#things-i-wanted-to-accomplish" class="anchor"&gt;
  &lt;/a&gt;
  Things I wanted to accomplish:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Spin up a Next app with TypeScript&lt;/li&gt;
&lt;li&gt;Try Tailwind for the first time&lt;/li&gt;
&lt;li&gt;Try React Query for the first time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup:
&lt;/h3&gt;

&lt;p&gt;I began with your standard next app using:&lt;br&gt;
&lt;code&gt;npx create-next-app or yarn create next-app&lt;/code&gt; depending on which you prefer. Once I had my base next app, I installed all the following dependencies I was going to use in the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "dependencies": {
    "next": "10.0.9",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-loading": "^2.0.3",
    "react-query": "^3.13.0",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@types/next": "^9.0.0",
    "@types/node": "^14.14.36",
    "@types/react": "^17.0.3",
    "@types/uuid": "^8.3.0",
    "autoprefixer": "^10.2.5",
    "postcss": "^8.2.8",
    "postcss-flexbugs-fixes": "^5.0.2",
    "postcss-preset-env": "^6.7.0",
    "react-ga": "^3.3.0",
    "tailwindcss": "^2.0.4",
    "typescript": "^4.2.3"
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that all the pesky install stuff was out of the way, I created my tsconfig.json file and converted all the &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; files to &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; to utilize TypeScript. Next makes this process seamless.&lt;/p&gt;

&lt;p&gt;I followed the documentation from &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; to get everything up and running for that.&lt;/p&gt;

&lt;p&gt;React Query has great documentation but got a little hairy for me at some points. The base setup is fairly straight forward, don't forget if you're going to use the &lt;code&gt;useQuery()&lt;/code&gt; hook, amateur tip üòÇ: don't forget to add the option &lt;code&gt;{staleTime: Infinity,}&lt;/code&gt; to the end of the function to avoid a re-render every time the page becomes focused or a link is clicked.&lt;/p&gt;

&lt;p&gt;I was off to the races, I was pulling in data from the DEV API using &lt;code&gt;https://dev.to/api/articles?state=rising&amp;amp;per_page=30&lt;/code&gt; to get 30 rising articles, and now I needed a way to display them.&lt;/p&gt;




&lt;p&gt;Now it was time to set up some components and render out cards that included some of the information being returned from the API. I pulled the following information from the API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Name&lt;/li&gt;
&lt;li&gt;Social Image for the article&lt;/li&gt;
&lt;li&gt;The article URL and Title&lt;/li&gt;
&lt;li&gt;Twitter username and URL&lt;/li&gt;
&lt;li&gt;GitHub username and URL&lt;/li&gt;
&lt;li&gt;Users profile picture&lt;/li&gt;
&lt;li&gt;Tag list for each article&lt;/li&gt;
&lt;li&gt;Comment and Reaction counts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we had all that information, we needed to map over the returned array of articles and put that information into a consumable card. I displayed the social image with the article title (as a link to said article) under it. Then followed those with the author's user name, their profile image, and links if they had them. Then we wrapped it up with the article's tags, and lastly, the comment and reaction count, as you can see below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvsZ6wjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ahgarf14j0drw8bm2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvsZ6wjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ahgarf14j0drw8bm2w.png" alt="Article card with the mapped information displayed in order"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I then deep dove into the docs for tailwind and started styling the cards and the rest of the site. I found it super intuitive to pass something like &lt;code&gt;className='rounded-full w-12'&lt;/code&gt; to the profile images to make an easy round avatar. The entire site has no actual CSS written. Everything was formatted using className and tailwind classes. It took a little getting used to, but once I got the hang of it, tailwind cut down a lot of time. Plus, making changes on the fly is super useful. Be sure to pass &lt;code&gt;purge: ["./pages/**/*.{js,ts,jsx,tsx}", "./components/**/*.{js,ts,jsx,tsx}"],&lt;/code&gt; pointing to your directories of course. This will remove any repeated or unnecessary CSS classNames that have been passed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#add-on-features" class="anchor"&gt;
  &lt;/a&gt;
  Add on features:
&lt;/h3&gt;

&lt;p&gt;Over the course of the next week, after getting the initial app up and running, I began to add some features. First was article sorting, and you can now sort articles in ascending and descending order based on the number of reactions to an article.&lt;/p&gt;

&lt;p&gt;Next, I added the ability to search articles by tag names. You can type any tag name, and the app will automatically filter the articles that match that tag and return them as you change your input. As a challenge to myself, I think I will in the future set up a multi-select dropdown that allows you to filter for multiple tags at once.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;I had a lot of fun getting this up and running. It was a great way to learn. DEV's documentation on their API was awesome, as was the documentation for all the technologies used to build dev.to rising! I have plans to add more and more features as time goes on. I will be using this site as my sandbox to try different things. &lt;/p&gt;

&lt;p&gt;If you'd like to check out the site, it is live here: &lt;a href="https://devtorising.com"&gt;dev.to Rising&lt;/a&gt; and you can view the source code here on &lt;a href="https://github.com/devindford/devto_rising"&gt;GitHub&lt;/a&gt;. Feel free to raise any issues or put anything you'd like to see added to the site! I appreciate you all checking out the site, and I hope you enjoy a fun, easy way to find rising articles from the DEV community!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>discuss</category>
    </item>
    <item>
      <title>The pain points of C# source generators</title>
      <author>James Turner</author>
      <pubDate>Wed, 07 Apr 2021 07:37:38 +0000</pubDate>
      <link>https://dev.to/turnerj/the-pain-points-of-c-source-generators-lb0</link>
      <guid>https://dev.to/turnerj/the-pain-points-of-c-source-generators-lb0</guid>
      <description>&lt;p&gt;I've recently completed my first foray into writing a &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;C# source generator&lt;/a&gt; for &lt;a href="https://github.com/RehanSaeed/Schema.NET"&gt;Schema.NET&lt;/a&gt;. There is a lot to like about source generators however there are a few things I wish I understood more before diving into it.&lt;/p&gt;

&lt;p&gt;For those that are unaware, source generators are a new feature added to C# whereby one can analyse existing source code and generate new source code all from C# itself. One area where this is of interest is serialization - being able to generate an ideal serializer at compile time prevents the need of using reflection at runtime.&lt;/p&gt;

&lt;p&gt;In Schema.NET, we had hundreds of classes and interfaces that mapped to &lt;a href="https://schema.org"&gt;Schema.org&lt;/a&gt; types. While we had our own tool to generate these, the generated files sat in our Git repository creating a lot of noise when trying to change our tooling behaviour. Source generators would allow us to remove these files and have them exist only as part of the compiled binary. The move to source generators was also a good time to refactor the generating logic itself, making it easier to add new features later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-point-1-debugging-source-generators" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 1: Debugging Source Generators
&lt;/h2&gt;

&lt;p&gt;Honestly I expected the debugging process to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put a breakpoint in the source generator code&lt;/li&gt;
&lt;li&gt;Press the "Debug" button in Visual Studio&lt;/li&gt;
&lt;li&gt;Code stops at the breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, it isn't that simple. The source generator runs during compilation however the debugging experience starts after meaning our break point would never be hit. After some research, it seems there are two different methods suggested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoke-the-debugger-from-the-source-generator" class="anchor"&gt;
  &lt;/a&gt;
  Invoke the debugger from the source generator
&lt;/h3&gt;

&lt;p&gt;Found this solution from &lt;a href="https://nicksnettravels.builttoroam.com/debug-code-gen/"&gt;Nick's .NET Travels&lt;/a&gt;. Inside our source generator, likely in the "Initialize" method, we can invoke the debugger to attach to the current process with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#if DEBUG
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;Debugger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAttached&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Debugger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here is using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives"&gt;preprocessor directive&lt;/a&gt; &lt;code&gt;#if&lt;/code&gt; to conditionally include this code if the build configuration is "Debug". When we are in the "Debug" configuration, we check if the debugger is already attached and if not, attach it via &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debugger.launch?view=netstandard-2.0"&gt;&lt;code&gt;Debugger.Launch()&lt;/code&gt;&lt;/a&gt;. After the debugger launches, it comes up with a prompt about where to debug it (I chose a new instance of Visual Studio). From here, the code will be paused on the &lt;code&gt;Debugger.Launch()&lt;/code&gt; line and this new instance of Visual Studio will listen for any breakpoints you may add.&lt;/p&gt;

&lt;p&gt;I probably spent a good few hours using this method and while it works, it is not a great experience. For starters, the prompt I mention, it was appearing multiple times during a debugging session. I'm not sure if the issue related to different target frameworks building simultaneously or maybe some timeout logic being handled by the build process. Additionally I had Visual Studio crash a few times in either instance of Visual Studio I had open.&lt;/p&gt;

&lt;p&gt;Don't take my word for it, &lt;a href="https://github.com/dotnet/roslyn/discussions/50123"&gt;others have had&lt;/a&gt; similar &lt;a href="https://github.com/dotnet/roslyn/discussions/50606"&gt;difficulties&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-the-source-generator-manually" class="anchor"&gt;
  &lt;/a&gt;
  Run the source generator manually
&lt;/h3&gt;

&lt;p&gt;A source generator itself is effectively like any other class - we can instantiate and call the initialization methods ourselves.&lt;br&gt;
There is a &lt;a href="https://github.com/dotnet/roslyn/blob/9dad013b7a3fabeb1b4f36e260ed9c6e3344548e/docs/features/source-generators.cookbook.md"&gt;detailed document in the Roslyn repo&lt;/a&gt; that covers all sorts of things with regards to source generators. One of the sections specifically covers &lt;a href="https://github.com/dotnet/roslyn/blob/9dad013b7a3fabeb1b4f36e260ed9c6e3344548e/docs/features/source-generators.cookbook.md#unit-testing-of-generators"&gt;testing source generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a modified version of their example that shows the general gist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Compilation&lt;/span&gt; &lt;span class="n"&gt;inputCompilation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;CreateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"
namespace MyCode
{
    public class Program
    {
        public static void Main(string[] args)
        {
        }
    }
}
"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;CustomGenerator&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CustomGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Create the driver that will control the generation, passing in our generator&lt;/span&gt;
&lt;span class="n"&gt;GeneratorDriver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CSharpGeneratorDriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Run the generation pass&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RunGeneratorsAndUpdateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputCompilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outputCompilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;diagnostics&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Compilation&lt;/span&gt; &lt;span class="nf"&gt;CreateCompilation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;CSharpCompilation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"compilation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ParseText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MetadataReference&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Binder&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetTypeInfo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CSharpCompilationOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OutputKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsoleApplication&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically this creates a compilation that the source generator can run against. This method can be quite verbose as, depending on your source generator itself, you may require a lot of boilerplate source code for your generator to work upon.&lt;/p&gt;

&lt;p&gt;In my case with Schema.NET, I'm generating hundreds of classes based on some JSON so I have minimal boilerplate. I could have gone this route however I decided on a more direct approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SchemaSourceGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GeneratorInitializationContext&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GeneratorExecutionContext&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My generator didn't care about any existing syntax tree - its job was to just pump out new classes and interfaces.&lt;br&gt;
This method does have a bit of a fatal flaw in that calling most (any?) of the methods on &lt;code&gt;GeneratorInitializationContext&lt;/code&gt; or &lt;code&gt;GeneratorExecutionContext&lt;/code&gt; may fail. These types are not instantiated with their different properties correctly configured which is something that more verbose way above did. For my &lt;code&gt;SchemaSourceGenerator&lt;/code&gt;, I needed to comment out &lt;code&gt;context.AddSource(sourceName, sourceText)&lt;/code&gt; so it wouldn't throw an exception.&lt;/p&gt;

&lt;p&gt;My recommendation is for anyone working on a source generator, either have a separate console application to debug your source generator or create a special unit test. Do it properly though and have the more verbose compilation code as shown in the earlier example so you don't need to modify your source generator to run it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pain-point-2-no-asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 2: No Async/Await
&lt;/h2&gt;

&lt;p&gt;The methods exposed by source generators (&lt;code&gt;Initialize&lt;/code&gt; and &lt;code&gt;Execute&lt;/code&gt;) do not return tasks so you can't invoke async APIs.&lt;br&gt;
According to the Roslyn team &lt;a href="https://github.com/dotnet/roslyn/issues/44045"&gt;this is by design&lt;/a&gt; as the IO for reading/writing files is handled by the compiler.&lt;/p&gt;

&lt;p&gt;For Schema.NET, we do a HTTP request to get the JSON we need to build. There are reasons this isn't a good idea but this is what we do and it works well for us. The &lt;code&gt;HttpClient&lt;/code&gt; has only had async APIs for a long while and while &lt;a href="https://github.com/dotnet/runtime/issues/32125"&gt;that is changing&lt;/a&gt;, source generators must target .NET Standard 2.0 so we can't leverage that change.&lt;/p&gt;

&lt;p&gt;My first iteration of getting the source generator to work was effectively wrapping my code in a &lt;code&gt;Task.Run()&lt;/code&gt; call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;SchemaObjects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;schemaService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetObjectsAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;GetAwaiter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This admittedly did work but I really didn't like it - it felt like such a kludge solution. There is a lot of information available about when and where you should be using &lt;code&gt;Task.Run()&lt;/code&gt; - Stephen Cleary has a &lt;a href="https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html"&gt;good blog post&lt;/a&gt; or &lt;a href="https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html"&gt;two&lt;/a&gt; about it.&lt;br&gt;
While a source generator is likely a new special case where &lt;em&gt;it depends&lt;/em&gt;, I still decided to change it. I ended up with calling &lt;code&gt;.GetAwaiter().GetResult()&lt;/code&gt; directly on the method of mine that was async instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GeneratorInitializationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;SchemaObjects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schemaService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetObjectsAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetAwaiter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll be honest - I don't know if this is technically &lt;em&gt;better&lt;/em&gt; in this scenario but I know it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-point-3-transient-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Pain Point 3: Transient Dependencies
&lt;/h2&gt;

&lt;p&gt;An issue with dependencies was something I wasn't expecting at all when I started with my source generator - why should it be?&lt;br&gt;
Every other library and application I've written in C# in the last few years follows a fairly predictable pattern of using a &lt;code&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; to define which package and version. The basics of including a package reference like that for source generators is still the same, it is just all the other bits it now also requires.&lt;/p&gt;

&lt;p&gt;For Schema.NET, our source generator was parsing JSON so we needed a serializer. We were previously using &lt;code&gt;Newtonsoft.Json&lt;/code&gt; for our tool however in this refactor, we were also moving to using &lt;code&gt;System.Text.Json&lt;/code&gt; for the parsing of the initial schema data from Schema.org. This dependency needs to only exist for the generator, not the library the generator is creating classes etc for. Normally you can just specify &lt;code&gt;PrivateAssets="all"&lt;/code&gt; on the package reference and that's it but for source generators, you need to specify a few more things:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Json)\lib\netstandard2.0\System.Text.Json.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too bad right? Well, what if I told you that you needed to do this for all dependencies. By that I mean &lt;em&gt;every dependency in the dependency tree&lt;/em&gt; which for us was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft.Bcl.AsyncInterfaces, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Buffers, 4.5.1&lt;/li&gt;
&lt;li&gt;System.Memory, 4.5.4

&lt;ul&gt;
&lt;li&gt;System.Numerics.Vectors, 4.4.0&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;System.Numerics.Vectors, 4.5.0&lt;/li&gt;
&lt;li&gt;System.Runtime.CompilerServices.Unsafe, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Text.Encodings.Web, 5.0.0&lt;/li&gt;
&lt;li&gt;System.Threading.Tasks.Extensions, 4.5.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our example would look more like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.Bcl.AsyncInterfaces"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Runtime.CompilerServices.Unsafe"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Threading.Tasks.Extensions"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.4"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Encodings.Web"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Buffers"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.1"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Memory"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.5.4"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Numerics.Vectors"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.4.0"&lt;/span&gt; &lt;span class="na"&gt;GeneratePathProperty=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Json)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGMicrosoft_Bcl_AsyncInterfaces)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Runtime_CompilerServices_Unsafe)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Threading_Tasks_Extensions)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Buffers)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Memory)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Numerics_Vectors)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"$(PKGSystem_Text_Encodings_Web)\lib\netstandard2.0\*.dll"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any of these dependencies pick up any new dependencies themselves, they need to be included too - this can happen with patch version changes like between &lt;code&gt;System.Text.Encodings.Web&lt;/code&gt; going from &lt;a href="https://www.nuget.org/packages/System.Text.Encodings.Web/5.0.0"&gt;5.0.0&lt;/a&gt; to &lt;a href="https://www.nuget.org/packages/System.Text.Encodings.Web/5.0.1"&gt;5.0.1&lt;/a&gt; where it picked up a few new dependencies.&lt;/p&gt;

&lt;p&gt;Currently for Schema.NET, I'm only specifying &lt;code&gt;System.Text.Json&lt;/code&gt; and &lt;code&gt;System.Text.Encodings.Web&lt;/code&gt; directly which allows our builds to work on our CI but Visual Studio complains during the build.&lt;br&gt;
I &lt;a href="https://github.com/dotnet/roslyn/issues/52017"&gt;raised an issue with the Roslyn team&lt;/a&gt; about this extra weird behaviour though it seems to amount for a difference between builds triggered by .NET Framework (Visual Studio and MSBuild) and .NET Core (&lt;code&gt;dotnet build&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My biggest gripe here though is: &lt;em&gt;Why doesn't the compiler just do this for us?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The compiler knows all our dependencies so with some sort of flag to indicate that this is a source generator, the compiler should do all this work for us. The burden to make sure we keep track of all transient dependencies when any dependency gets an update is something I don't want to do.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#potential-transient-dependency-workaround" class="anchor"&gt;
  &lt;/a&gt;
  Potential Transient Dependency Workaround
&lt;/h3&gt;

&lt;p&gt;While not a perfect solution, if you are like me and really don't like specifying every package reference in the dependency tree like that, you can automate it somewhat with a custom MSBuild target.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"System.Text.Json"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt; &lt;span class="na"&gt;PrivateAssets=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;GetTargetPathDependsOn&amp;gt;&lt;/span&gt;$(GetTargetPathDependsOn);GetDependencyTargetPaths&lt;span class="nt"&gt;&amp;lt;/GetTargetPathDependsOn&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"GetDependencyTargetPaths"&lt;/span&gt; &lt;span class="na"&gt;AfterTargets=&lt;/span&gt;&lt;span class="s"&gt;"ResolvePackageDependenciesForBuild"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetPathWithTargetPlatformMoniker&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"@(ResolvedCompileFileDefinitions)"&lt;/span&gt; &lt;span class="na"&gt;IncludeRuntimeDependency=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This "works" in the sense that &lt;code&gt;ResolveCompileFileDefinitions&lt;/code&gt; does contain a list of our transient dependencies so everything that needs to be passed in is passed in. The problem with this solution is that &lt;code&gt;ResolveCompileFileDefinitions&lt;/code&gt; contains &lt;em&gt;more&lt;/em&gt; than the specific dependencies we are wanting and could have undesired behaviour.&lt;/p&gt;

&lt;p&gt;Ideally I'd like &lt;em&gt;something like this&lt;/em&gt; to be an automatic target for source generator projects but perfected to target only private dependencies so they are bundled correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-was-migrating-to-source-generators-worth-it" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: Was migrating to source generators worth it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Switching to source generators, combined with my refactor, added 700 lines of code while &lt;strong&gt;removing 69,203 lines of code&lt;/strong&gt;. &lt;a href="https://github.com/RehanSaeed/Schema.NET/pull/252"&gt;My pull request&lt;/a&gt; affected 765 files, the vast majority being generated classes and interfaces that no longer need to sit in the repository.&lt;/p&gt;

&lt;p&gt;The refactor of our generation code also sets us up nicely for the future where we can support pending Schema.org types (&lt;a href="https://github.com/RehanSaeed/Schema.NET/issues/203"&gt;something that has been requested by a few people&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While these pain points are annoying, source generators are a great feature that I hope getting tool updates to improve the developer experience.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to set up a Base Fragment Class with ViewBinding and ViewModel on Android</title>
      <author>Enya Emmanuel</author>
      <pubDate>Wed, 07 Apr 2021 07:32:54 +0000</pubDate>
      <link>https://dev.to/enyason/how-to-set-up-a-base-fragment-class-with-viewbinding-and-viewmodel-on-android-57g1</link>
      <guid>https://dev.to/enyason/how-to-set-up-a-base-fragment-class-with-viewbinding-and-viewmodel-on-android-57g1</guid>
      <description>&lt;p&gt;Hey guys! This is my first article on dev.to, and I am super excited about writing again after a long while. Quickly, let's get into the subject at hand.&lt;/p&gt;

&lt;p&gt;Building native android apps requires you have a fair knowledge of object oriented programming. This forms the basis for this article because we will leverage on the concepts of  Inheritance to set up a base class. In addition to this, you‚Äôll learn about generics, with practical examples.&lt;/p&gt;

&lt;p&gt;One may be curious as to why we would want to add another layer of inheritance to our fragment class? This question is usually common with beginner programmers yet to realize the benefits of inheritance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-inheritance-in-object-oriented-programming-oop" class="anchor"&gt;
  &lt;/a&gt;
  What is Inheritance in Object Oriented Programming (OOP)?
&lt;/h3&gt;

&lt;p&gt;Inheritance is a feature in-which a class inherits all the features of another class. The class from which the features are inherited is known as the base class, super class or parent class and the class that inherits the features is known as derived class, subclass or child class.&lt;/p&gt;

&lt;p&gt;E.g. If Class D extends A, it is inheriting the features of A.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-generics" class="anchor"&gt;
  &lt;/a&gt;
  What are Generics?
&lt;/h3&gt;

&lt;p&gt;Generics are simply parameterized types. The idea is to allow type (Integer, String, ‚Ä¶ etc, and user-defined types) to be a parameter to methods, classes, and interfaces. Using Generics, it is possible to create classes that work with different data types.&lt;/p&gt;

&lt;p&gt;Enough theory, let's get started on  creating a base fragment class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  STEP 1:
&lt;/h3&gt;

&lt;p&gt;Create a class BaseFragment that extends a Fragment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseFragment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;VBinding&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewBinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BaseViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;useSharedViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;VBinding&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;VBinding&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;disposableContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CompositeDisposable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt;
        &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;observeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;observeView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;observeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useSharedViewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;requireActivity&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Disposable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addToContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disposableContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onDestroyView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disposableContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onDestroyView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;abstract class BaseFragment&amp;lt;VBinding : ViewBinding, ViewModel : BaseViewModel&amp;gt; : Fragment()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basically what we've done here is create a &lt;code&gt;BaseFragment&lt;/code&gt; which accepts two types, that is a ViewBinding and a ViewModel. With this class, we move common logic and set up to one place, thereby reducing duplicate codes (biolerplates).&lt;/p&gt;

&lt;p&gt;The viewModel class and the ViewBinding object specified as fields in the base class will be provided by the subclass when &lt;code&gt;getViewModelClass()&lt;/code&gt; and &lt;code&gt;getViewBinding()&lt;/code&gt; are invoked, respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open fun setUpViews() {}&lt;/code&gt; and &lt;code&gt;open fun observeData() {}&lt;/code&gt; are methods with a default empty implementation. This makes it optional for its sub classes to override. The sub classes are not forced to override these methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  STEP 2:
&lt;/h3&gt;

&lt;p&gt;With the base class set up, we'll use it by creating another fragment class that extends BaseFragment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;
&lt;span class="nd"&gt;@AndroidEntryPoint&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserListFragment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BaseFragment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FragmentUserListBinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;UserViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;useSharedViewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewModelClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getViewBinding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FragmentUserListBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setUpViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// set up recycler view and bind data to UI&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the code block above, we have been able to achieve a simple and readable fragment class, using the concepts of inheritance and generics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-summary" class="anchor"&gt;
  &lt;/a&gt;
  In summary,
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Using a base fragment helps you avoid code and pattern repetition.&lt;/li&gt;
&lt;li&gt;You achieve a clean and readable code with the concepts discussed in this article.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is it for this article. Please share your thoughts on this subject.&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>programming</category>
    </item>
    <item>
      <title>Testing React Query</title>
      <author>Dominik D</author>
      <pubDate>Wed, 07 Apr 2021 07:06:28 +0000</pubDate>
      <link>https://dev.to/tkdodo/testing-react-query-14cb</link>
      <guid>https://dev.to/tkdodo/testing-react-query-14cb</guid>
      <description>&lt;p&gt;Questions around the testing topic come up quite often together with React Query, so I'll try to answer some of them here. I think one reason for that is that testing "smart" components (also called &lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;container components&lt;/a&gt;) is not the easiest thing to do. With the rise of hooks, this split has been largely deprecated. It is now encouraged to consume hooks directly where you need them rather than doing a mostly arbitrary split and drill props down.&lt;/p&gt;

&lt;p&gt;I think this is generally a very good improvement for colocation and code readability, but we now have more components that consume dependencies outside of "just props".&lt;/p&gt;

&lt;p&gt;They might &lt;em&gt;useContext&lt;/em&gt;. They might &lt;em&gt;useSelector&lt;/em&gt;. Or they might &lt;em&gt;useQuery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Those components are technically no longer pure, because calling them in different environments leads to different results. When testing them, you need to carefully setup those surrounding environments to get things working.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mocking-network-requests" class="anchor"&gt;
  &lt;/a&gt;
  Mocking network requests
&lt;/h1&gt;

&lt;p&gt;Since React Query is an async server state management library, your components will likely make requests to a backend. When testing, this backend is not available to actually deliver data, and even if, you likely don't want to make your tests dependent on that.&lt;/p&gt;

&lt;p&gt;There are tons of articles out there on how to mock data with jest. You can mock your api client if you have one. You can mock fetch or axios directly. I can only second what Kent C. Dodds has written in his article &lt;a href="https://kentcdodds.com/blog/stop-mocking-fetch"&gt;Stop mocking fetch&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Use &lt;a href="https://mswjs.io/"&gt;mock service worker&lt;/a&gt; by &lt;a href="https://twitter.com/ApiMocking"&gt;@ApiMocking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be your single source of truth when it comes to mocking your apis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  works in node for testing&lt;/li&gt;
&lt;li&gt;  supports REST and GraphQL&lt;/li&gt;
&lt;li&gt;  has a &lt;a href="https://storybook.js.org/addons/msw-storybook-addon"&gt;storybook addon&lt;/a&gt; so you can write stories for your components that &lt;em&gt;useQuery&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  works in the browser for development purposes, and you'll still see the requests going out in the browser devtools&lt;/li&gt;
&lt;li&gt;  works with cypress, similar to fixtures&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;With our network layer being taken care of, we can start talking about React Query specific things to keep an eye on:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#queryclientprovider" class="anchor"&gt;
  &lt;/a&gt;
  QueryClientProvider
&lt;/h1&gt;

&lt;p&gt;Whenever you use React Query, you need a QueryClientProvider and give it a queryClient - a vessel which holds the &lt;em&gt;QueryCache&lt;/em&gt;. The cache will in turn hold the data of your queries.&lt;/p&gt;

&lt;p&gt;I prefer to give each test its own QueryClientProvider and create a &lt;em&gt;new QueryClient&lt;/em&gt; for each test. That way, tests are completely isolated from each other. A different approach might be to clear the cache after each test, but I like to keep shared state between tests as minimal as possible. Otherwise, you might get unexpected and flaky results if you run your tests in parallel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-custom-hooks" class="anchor"&gt;
  &lt;/a&gt;
  For custom hooks
&lt;/h2&gt;

&lt;p&gt;If you are testing custom hooks, I'm quite certain you're using &lt;a href="https://react-hooks-testing-library.com/"&gt;react-hooks-testing-library&lt;/a&gt;. It's the easiest thing there is to test hooks. With that library, we can wrap our hook in a &lt;a href="https://react-hooks-testing-library.com/reference/api#wrapper"&gt;wrapper&lt;/a&gt;, which is a React component to wrap the test component in when rendering. I think this is the perfect place to create the QueryClient, because it will be executed once per test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚úÖ creates a new QueryClient for each test&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-components" class="anchor"&gt;
  &lt;/a&gt;
  For components
&lt;/h2&gt;

&lt;p&gt;If you want to test a Component that uses a &lt;em&gt;useQuery&lt;/em&gt; hook, you also need to wrap that Component in QueryClientProvider. A small wrapper around &lt;em&gt;render&lt;/em&gt; from &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;react-testing-library&lt;/a&gt; seems like a good choice. Have a look at how React Query does it &lt;a href="https://github.com/tannerlinsley/react-query/blob/ead2e5dd5237f3d004b66316b5f36af718286d2d/src/react/tests/utils.tsx#L6-L17"&gt;internally for their tests&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#turn-off-retries" class="anchor"&gt;
  &lt;/a&gt;
  Turn off retries
&lt;/h1&gt;

&lt;p&gt;It's one of the most common "gotchas" with React Query and testing: The library defaults to three retries with exponential backoff, which means that your tests are likely to timeout if you want to test an erroneous query. The easiest way to turn retries off is, again, via the &lt;em&gt;QueryClientProvider&lt;/em&gt;. Let's extend the above example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// ‚úÖ turns retries off&lt;/span&gt;
                &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will set the defaults for all queries in the component tree to "no retries". It is important to know that this will only work if your actual &lt;em&gt;useQuery&lt;/em&gt; has no explicit retries set. If you have a query that wants 5 retries, this will still take precedence, because defaults are only taken as a fallback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setquerydefaults" class="anchor"&gt;
  &lt;/a&gt;
  setQueryDefaults
&lt;/h2&gt;

&lt;p&gt;The best advice I can give you for this problem is: Don't set these options on &lt;em&gt;useQuery&lt;/em&gt; directly. Try to use and override the defaults as much as possible, and if you really need to change something for specific queries, use &lt;a href="https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults"&gt;queryClient.setQueryDefaults&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So for example, instead of setting retry on &lt;em&gt;useQuery&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// üö® you cannot override this setting for tests!&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// ‚úÖ only todos will retry 5 times&lt;/span&gt;
&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setQueryDefaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, all queries will retry two times, only &lt;em&gt;todos&lt;/em&gt; will retry five times, and I still have the option to turn it off for all queries in my tests üôå.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactqueryconfigprovider" class="anchor"&gt;
  &lt;/a&gt;
  ReactQueryConfigProvider
&lt;/h2&gt;

&lt;p&gt;Of course, this only works for known query keys. Sometimes, you really want to set some configs on a subset of your component tree. In v2, React Query had a &lt;a href="https://react-query-v2.tanstack.com/docs/api#reactqueryconfigprovider"&gt;ReactQueryConfigProvider&lt;/a&gt; for that exact use-case. You can achieve the same thing in v3 with a couple of lines of codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryConfigProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;queryCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getQueryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="na"&gt;muationCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMutationCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see this in action in this &lt;a href="https://codesandbox.io/s/react-query-config-provider-v3-lt00f"&gt;codesandbox example&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#always-await-the-query" class="anchor"&gt;
  &lt;/a&gt;
  Always await the query
&lt;/h1&gt;

&lt;p&gt;Since React Query is async by nature, when running the hook, you won't immediately get a result. It usually will be in loading state and without data to check. The &lt;a href="https://react-hooks-testing-library.com/reference/api#async-utilities"&gt;async utilities&lt;/a&gt; from react-hooks-testing-library offer a lot of ways to solve this problem. For the simplest case, we can just wait until the query has transitioned to success state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my first test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// ‚úÖ wait until the query has transitioned to success state&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeDefined&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#silence-the-error-console" class="anchor"&gt;
  &lt;/a&gt;
  Silence the error console
&lt;/h1&gt;

&lt;p&gt;Per default, React Query prints errors to the console. I think this is quite disturbing during testing, because you'll see üî¥ in the console even though all tests are üü¢. React Query allows overwriting that default behaviour by &lt;a href="https://react-query.tanstack.com/reference/setLogger"&gt;setting a logger&lt;/a&gt;, so that's what I'm usually doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLogger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;setLogger&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚úÖ no more errors on the console&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;I've setup a quick repository where all of this comes nicely together: mock-service-worker, react-testing-library and the mentioned wrapper. It contains four tests - basic failure and success tests for custom hooks and components. Have a look here: &lt;a href="https://github.com/TkDodo/testing-react-query"&gt;https://github.com/TkDodo/testing-react-query&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ‚¨áÔ∏è&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Go Project Management Strategy </title>
      <author>Javad Rajabzade</author>
      <pubDate>Wed, 07 Apr 2021 06:59:31 +0000</pubDate>
      <link>https://dev.to/ja7ad/go-project-management-strategy-kec</link>
      <guid>https://dev.to/ja7ad/go-project-management-strategy-kec</guid>
      <description>&lt;h1&gt;
  &lt;a href="#project-creator" class="anchor"&gt;
  &lt;/a&gt;
  Project Creator
&lt;/h1&gt;

&lt;p&gt;create project and management with go modules&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intitial-your-project" class="anchor"&gt;
  &lt;/a&gt;
  Intitial your project
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;go to &lt;strong&gt;GOPATH&lt;/strong&gt; in local &lt;code&gt;cd $GOPATH&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if not having &lt;strong&gt;src,bin,pkg&lt;/strong&gt; folder , create they &lt;code&gt;mkdir -p {src,bin,pkg}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;go to &lt;strong&gt;src&lt;/strong&gt; folder &lt;code&gt;cd src&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create repository your project in github&lt;/li&gt;
&lt;li&gt;create folder &lt;code&gt;mkdir -p github.com/username&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;change &lt;strong&gt;username&lt;/strong&gt; to your username&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;go to folder &lt;strong&gt;github.com/username&lt;/strong&gt; via &lt;code&gt;cd github.com/username&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;clone project from github &lt;code&gt;git clone https://github.com/username/project.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;go to &lt;strong&gt;project&lt;/strong&gt; folder &lt;code&gt;cd project&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;initial go module in project &lt;code&gt;go mod init github.com/username/project&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;now you work with your project and you can add modules via &lt;code&gt;go get ...&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#type-project-structures" class="anchor"&gt;
  &lt;/a&gt;
  Type project structures
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Flat Structures
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ file1.go
‚îú‚îÄ‚îÄ file2.go
‚îú‚îÄ‚îÄ file3.go
‚îú‚îÄ‚îÄ main.go
‚îú‚îÄ‚îÄ LICENSE
‚îî‚îÄ‚îÄ README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Standard Structures
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ _example &lt;span class="c"&gt;# this is dir for your examples&lt;/span&gt;
‚îÇ   ‚îú‚îÄ‚îÄ sample1
‚îÇ       ‚îú‚îÄ‚îÄ sample1.go
‚îÇ       ‚îî‚îÄ‚îÄ sample1_test.go
‚îÇ   ‚îî‚îÄ‚îÄ sample2
‚îÇ       ‚îú‚îÄ‚îÄ sample2.go
‚îÇ       ‚îî‚îÄ‚îÄ sample2_test.go
‚îú‚îÄ‚îÄ dir1
‚îÇ   ‚îú‚îÄ‚îÄ file1.go
‚îÇ   ‚îî‚îÄ‚îÄ file1_test.go
‚îú‚îÄ‚îÄ dir2
‚îÇ   ‚îú‚îÄ‚îÄ file2.go
‚îÇ   ‚îî‚îÄ‚îÄ file2_test.go
‚îú‚îÄ‚îÄ dir3
‚îÇ   ‚îú‚îÄ‚îÄ file3.go
‚îÇ   ‚îú‚îÄ‚îÄ file3_test.go
‚îÇ   ‚îú‚îÄ‚îÄ file4.go
‚îÇ   ‚îú‚îÄ‚îÄ file4_test.go
‚îÇ   ‚îî‚îÄ‚îÄ file5.go
‚îú‚îÄ‚îÄ dir4
‚îÇ   ‚îú‚îÄ‚îÄ samplefolder
‚îÇ       ‚îú‚îÄ‚îÄ file6.go
‚îÇ       ‚îî‚îÄ‚îÄ file6_test.go
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ go.mod
‚îú‚îÄ‚îÄ go.sum
‚îú‚îÄ‚îÄ main.go or project.go &lt;span class="c"&gt;# project.go for pkg project&lt;/span&gt;
‚îî‚îÄ‚îÄ README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;MVC Pattern Structures
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ _example &lt;span class="c"&gt;# this is dir for your examples&lt;/span&gt;
‚îÇ   ‚îú‚îÄ‚îÄ sample1
‚îÇ       ‚îú‚îÄ‚îÄ sample1.go
‚îÇ       ‚îî‚îÄ‚îÄ sample1_test.go
‚îÇ   ‚îî‚îÄ‚îÄ sample2
‚îÇ       ‚îú‚îÄ‚îÄ sample2.go
‚îÇ       ‚îî‚îÄ‚îÄ sample2_test.go
‚îú‚îÄ‚îÄ module
‚îÇ   ‚îú‚îÄ‚îÄ file1.go
‚îÇ   ‚îú‚îÄ‚îÄ file1_test.go
‚îÇ   ‚îî‚îÄ‚îÄ samplefolder
‚îÇ       ‚îú‚îÄ‚îÄ file6.go
‚îÇ       ‚îî‚îÄ‚îÄ file6_test.go
‚îú‚îÄ‚îÄ view
‚îÇ   ‚îú‚îÄ‚îÄ file2.go
‚îÇ   ‚îî‚îÄ‚îÄ file2_test.go
‚îú‚îÄ‚îÄ controller
‚îÇ   ‚îú‚îÄ‚îÄ file3.go
‚îÇ   ‚îú‚îÄ‚îÄ file3_test.go
‚îÇ   ‚îú‚îÄ‚îÄ file4.go
‚îÇ   ‚îú‚îÄ‚îÄ file4_test.go
‚îÇ   ‚îî‚îÄ‚îÄ file5.go
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ go.mod
‚îú‚îÄ‚îÄ go.sum
‚îú‚îÄ‚îÄ main.go
‚îî‚îÄ‚îÄ README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#project-contributer" class="anchor"&gt;
  &lt;/a&gt;
  Project Contributer
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Fork &lt;strong&gt;target&lt;/strong&gt; project to your repository&lt;/li&gt;
&lt;li&gt;Go to your &lt;strong&gt;$GOPATH&lt;/strong&gt; via &lt;code&gt;cd $GOPATH&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If your not having &lt;strong&gt;bin,pkg,src&lt;/strong&gt; folder creating using &lt;code&gt;mkdir -p {src,bin,pkg}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;target&lt;/strong&gt; module original path &lt;code&gt;mkdir -p src/github.com/target&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;change &lt;strong&gt;target&lt;/strong&gt; to username project creator or organization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;target&lt;/strong&gt; path &lt;code&gt;cd src/github.com/target&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Clone Forked Project in current path &lt;code&gt;git clone https://github.com/your_username/project.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;project&lt;/strong&gt; folder &lt;code&gt;cd project&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Getting required packages via &lt;code&gt;go get ./...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add remote &lt;code&gt;git remote add upstream https://github.com/target/project.git&lt;/code&gt; to update your fork repo.&lt;/li&gt;
&lt;li&gt;Working on Project and send yours &lt;strong&gt;PR&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Before start coding every times do

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git fetch upstream&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge upstream/main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git merge upstream/branch1&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git merge upstream/branch2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;If any file changed via &lt;strong&gt;merge&lt;/strong&gt;, push on your forked branch via &lt;code&gt;git push origin main&lt;/code&gt; or &lt;code&gt;git push origin branch1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Must have Themes and Extensions for every Developers - Visual studio code setup</title>
      <author>lary mak</author>
      <pubDate>Wed, 07 Apr 2021 06:55:00 +0000</pubDate>
      <link>https://dev.to/larymak/must-have-themes-and-extensions-for-every-developers-visual-studio-code-setup-2igi</link>
      <guid>https://dev.to/larymak/must-have-themes-and-extensions-for-every-developers-visual-studio-code-setup-2igi</guid>
      <description>&lt;p&gt;Personally I have been using Visual studio Code since back in 2018, and it has turned out to be one of my all time favorite code editor. The main reason why I like VS code is the ability to customize it to fit your needs, You are able to set it to look the way you will like it by adding your favorite themes, extensions, and even able to share code and even able to do a team work using VS code. As a developer what else would you ask for? &lt;br&gt;
In this article I decided to share some of the most used themes and extensions by developers out there:  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Let's Get Started:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#themes" class="anchor"&gt;
  &lt;/a&gt;
  Themes
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;In every bit of honest writing in the world, there is a base theme.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Themes not only changes the setup look but also enhances the user experience and productivity, they also let you give a completely unique look and feel to your editor and setting the right one will get you started to greater productivity. &lt;br&gt;
Most developers prefer Dark themes, Do you?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt 2 Theme&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Bardleware.sandstorm"&gt;Sandstorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Shades of Purple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl"&gt;Night Owl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Dracula Official&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#extensions" class="anchor"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h4&gt;

&lt;p&gt;This are what lets you add languages, debuggers and different tools to your setup to support your development work flow.&lt;br&gt;
Here ae some of the most useful extensions for developers: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOvYRti3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68lo6nfjl0om2cvrqpy9.PNG" alt="Alt Text"&gt;
It is an extension that enables real time collaboration between developers. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVV4uctv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndjvengvsw4m5l71bfwh.PNG" alt="Alt Text"&gt;
This extension is used for launching a development local server with a live reload feature for static and dynamic pages. This saves times for previewing the changes made to your source code by just making the changes in the VS code and saving the file, this will automatically refresh the browser and reflect the changes you have made in it, instead of us manually refreshing the browser page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=robertz.code-snapshot"&gt;Code Snapshot&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kartTri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbmpacv7hjx8qbkupvx1.PNG" alt="Alt Text"&gt;
Ever seen those beautiful code screenshot and ever wonder how they did it? Well this is the extension they use give it a try and change you code screenshot look.
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto rename Tag&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMmDzsTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48xdqxhoxocmrf5zv42w.PNG" alt="Alt Text"&gt;
Automatically rename paired HTML/XML tag, same as Visual Studio IDE does.
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qT9psQ41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wywts8iblq9gwog8oqrj.PNG" alt="Alt Text"&gt; 
It is a basic spell checker that works well with camelCase code. The goal of this spell checker is to help catch common spelling errors while keeping the number of false positives low.
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code Runner&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RG-wfxUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f1znvudp2064u53irxc.gif" alt="Alt Text"&gt; 
It allows you to run code file for multiple languages. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLHGPq9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6dmhifnjl0chd4zaugm.PNG" alt="Alt Text"&gt; 
With over 7 million downloads, It gives you an option to customize file icons, folder icons to beautifully designed material icons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoA_GUMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1ky5gmc5e9iycplwupy.PNG" alt="Alt Text"&gt; 
It will help you create more human friendly comments in your code. With this you are able to categorize annotations into: 

&lt;ul&gt;
&lt;li&gt;Alerts&lt;/li&gt;
&lt;li&gt;Queries&lt;/li&gt;
&lt;li&gt;TODOs&lt;/li&gt;
&lt;li&gt;Highlights&lt;/li&gt;
&lt;li&gt;Commented out code can also be styled to make it clear the code shouldn't be there&lt;/li&gt;
&lt;li&gt;Any other comment styles you'd like can be specified in the settings &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced"&gt;Markdown Preview&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cxh-3mk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gba1plt1qunwrxrxalzv.PNG" alt="Alt Text"&gt; 
This extensions enabled you look how your output will be once you have written it in markdown. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5INUfcFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcclko2uekrgqhiqrmhp.PNG" alt="Alt Text"&gt;
This is one of the best extensions for JavaScript and React/Redux code snippets. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf"&gt;VScode-pdf&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyPeHtmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w035fze5xb363lh22uy1.gif" alt="Alt Text"&gt;
It allows you to check and open your pdf right there in your VS Code.
&lt;h4&gt;
  &lt;a href="#fonts" class="anchor"&gt;
  &lt;/a&gt;
  Fonts&lt;br&gt;
&lt;/h4&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rubjo.github.io/victor-mono/"&gt;Victor mono&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NVy9tc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52z3ou7uvssr96npn41b.PNG" alt="Alt Text"&gt;
Victor Mono is an open-source monospaced font with optional semi-connected cursive italics and programming symbol ligatures. 
The typeface is slender, crisp and narrow, with a large x-height and clear punctuation, making it legible and ideal for code. It comes in seven weights and Roman, Italic and Oblique styles. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://larsenwork.com/monoid/"&gt;Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://design.ubuntu.com/font/"&gt;Ubuntu Mono&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uG6tzRGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efi5fmkszfafdz2j66qd.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com/specimen/Roboto+Mono"&gt;Roboto&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codeman38/PressStart2P"&gt;Press Star 2P&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueq-o4iF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hplhrplzl0j7jdqmxoga.PNG" alt="Alt Text"&gt; 
&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I hope you‚Äôre eager to use these most amazing VS Code Extensions, themes and font to improve your productivity.&lt;br&gt;
The above listed ones are by far the most preferred, they were selected by comparing the number of downloads, which most have over 2 million downloads, this means most developer use them on daily basis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If You have read this far I really appreciate, Help me to grow my community:&lt;/p&gt;

&lt;p&gt;Also check out my other article on: &lt;br&gt;
&lt;a href="https://dev.to/larymak/7-best-visual-studio-code-extensions-every-web-developer-should-have-2m1c"&gt;7 Best Visual Studio Code Extensions Every Web Developer Should Have.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>My Visual Studio Code Setup</title>
      <author>Rithik Samanthula</author>
      <pubDate>Wed, 07 Apr 2021 06:51:37 +0000</pubDate>
      <link>https://dev.to/code2rithik/my-visual-studio-code-setup-483k</link>
      <guid>https://dev.to/code2rithik/my-visual-studio-code-setup-483k</guid>
      <description>&lt;p&gt;A lot of people have been asking me, what extensions and themes do you use in Visual Studio Code?&lt;/p&gt;

&lt;p&gt;Here is my response to that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-theme-the-best-theme" class="anchor"&gt;
  &lt;/a&gt;
  My Theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I really love using this theme because it looks radiant and makes me go into the mood of coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOSwKag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgpoxy8ioy8ygle86v8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOSwKag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgpoxy8ioy8ygle86v8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-font-fira-code" class="anchor"&gt;
  &lt;/a&gt;
  My Font: &lt;a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions"&gt;Fira Code&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I really love using Fira Code because it looks really cool and is very easy to install: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gOVrH51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/242uetyr5drvfvyhtq6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gOVrH51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/242uetyr5drvfvyhtq6d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-favorite-extensions" class="anchor"&gt;
  &lt;/a&gt;
  My Favorite Extensions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-tabnine" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;TabNine&lt;/a&gt;: &lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7dFbHev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tabnine.com/images/meta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7dFbHev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tabnine.com/images/meta.png" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TabNine is very helpful for JavaScript coding as it speeds up my coding process. This is a must install extension for any JS Coder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-discord-rich-presence" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=LeonardSSH.vscord"&gt;Discord Rich Presence&lt;/a&gt;: &lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Before installing the extension:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oBQKGj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g28qjwwyum64wcctuc0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oBQKGj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g28qjwwyum64wcctuc0d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing the extension:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LLUxcoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6txliilhsdqk1ltz6ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LLUxcoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6txliilhsdqk1ltz6ll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I really like the Discord RPC That it adds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-auto-close-tag" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Auto Close Tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Automatically add a closing tag when you type in the closing bracket of the opening tag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yc3WV0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-close-tag/raw/master/images/close-tag.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yc3WV0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-close-tag/raw/master/images/close-tag.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-auto-rename-tag" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When you rename one HTML/XML tag, automatically rename the paired HTML/XML tag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-live-server" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A Quick Development Live Server with live browser reload.&lt;br&gt;
Start or Stop server by a single click from status bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjJq-5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ritwickdey.github.io/vscode-live-server/images/Screenshot/vscode-live-server-animated-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJjJq-5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ritwickdey.github.io/vscode-live-server/images/Screenshot/vscode-live-server-animated-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-live-share" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Visual Studio Live Share enables you to collaboratively edit and debug with others in real time, regardless what programming languages you're using or app types you're building. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCgSmKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2066/1%2A73SgvYrtOG9UupYb2ODejA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCgSmKt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/2066/1%2A73SgvYrtOG9UupYb2ODejA.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-gitignore-generator" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=piotrpalarz.vscode-gitignore-generator"&gt;.gitignore Generator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you don't have .gitignore file already you'll be prompted right away with the list of all available tools, frameworks etc. to choose from. You can select or deselect the item with Space or by clicking the checkbox. Fuzzy-search is also available to speed things up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8F_Wz2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8F_Wz2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-babel-javascript" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel"&gt;Babel JavaScript&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This project supports:&lt;/p&gt;

&lt;p&gt;ES201x JavaScript&lt;/p&gt;

&lt;p&gt;React (including JSX)&lt;/p&gt;

&lt;p&gt;FlowType&lt;/p&gt;

&lt;p&gt;Support for GraphQL code highlighting within template strings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btFreguI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mgmcdermott/vscode-language-babel/master/images/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btFreguI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mgmcdermott/vscode-language-babel/master/images/screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are all of my favorite extensions and themes.&lt;/p&gt;

&lt;p&gt;Thank You for reading this blog and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall" class="anchor"&gt;
  &lt;/a&gt;
  Keep Coding Y'All üë®üèª‚Äçüíª
&lt;/h1&gt;

</description>
      <category>vscode</category>
      <category>theme</category>
      <category>codeeditor</category>
      <category>extensions</category>
    </item>
    <item>
      <title>Easy way to create API documentation in Laravel</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 07 Apr 2021 06:41:44 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/easy-way-to-create-api-documentation-in-laravel-im7</link>
      <guid>https://dev.to/dailydevtips1/easy-way-to-create-api-documentation-in-laravel-im7</guid>
      <description>&lt;p&gt;For today's article, I want to illustrate how easy it is to create API documentation in Laravel.&lt;br&gt;
We just created our first API, and know the importance of having good documentation.&lt;/p&gt;

&lt;p&gt;The goal for today is to have a primary documentation endpoint, we won't add all the details, but I'll show you how to get started with it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-scribe-for-laravel" class="anchor"&gt;
  &lt;/a&gt;
  Installing Scribe for Laravel
&lt;/h2&gt;

&lt;p&gt;First of all, we need to install Scribe, the documentation generator we will use for Laravel 8.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; knuckleswtf/scribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we need to publish the vendor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan vendor:publish &lt;span class="nt"&gt;--provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Knuckles&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;cribe&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;cribeServiceProvider"&lt;/span&gt; &lt;span class="nt"&gt;--tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;scribe-config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a config file for Scribe that we can potentially use.&lt;/p&gt;

&lt;p&gt;Next up is basically the step to generate our initial documentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan scribe:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now be able to visit our documentation on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;localhost:port/docs/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3b7dAhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452610859/65FAMrbf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3b7dAhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452610859/65FAMrbf0.png" alt="Laravel generated API doc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-our-documentation-better" class="anchor"&gt;
  &lt;/a&gt;
  Making our documentation better
&lt;/h2&gt;

&lt;p&gt;For now, we didn't add much information. We can use the PHP Doc annotation to add information for each file.&lt;/p&gt;

&lt;p&gt;Let's open up the &lt;code&gt;AuthenticationController.php&lt;/code&gt; and check how we can make it better.&lt;/p&gt;

&lt;p&gt;First of all, above our class annotation, we can add a general piece of information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * @group Authentication
 *
 * API endpoints for managing authentication
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Functions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will group all functions inside this file, as well as add a short description about it.&lt;/p&gt;

&lt;p&gt;Now for the login function, we can add the following doc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * Log in the user.
 *
 * @bodyParam   email    string  required    The email of the  user.      Example: testuser@example.com
 * @bodyParam   password    string  required    The password of the  user.   Example: secret
 *
 * @response {
 *  "access_token": "eyJ0eXA...",
 *  "token_type": "Bearer",
 * }
 */&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's quite the piece. First, we name the function and state what parameters it's expecting and what the return looks like.&lt;/p&gt;

&lt;p&gt;If we now generate our API doc, we should see the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iVGalhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452887501/rcHDjWGr-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iVGalhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617452887501/rcHDjWGr-.png" alt="PHP doc in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool right! It shows exactly what's needed and what response a user can expect.&lt;/p&gt;

&lt;p&gt;If you are interested in making your documentation optimal, check out Scribe's documentation on PHP doc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scribe.readthedocs.io/en/latest/documenting/index.html"&gt;Read the scribe documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>api</category>
    </item>
    <item>
      <title>[19] Top 10 Must-Have Web Dev Tools ‚Äì April 2021</title>
      <author>MV</author>
      <pubDate>Wed, 07 Apr 2021 05:49:59 +0000</pubDate>
      <link>https://dev.to/villivald/19-top-10-must-have-web-dev-tools-april-2021-1dii</link>
      <guid>https://dev.to/villivald/19-top-10-must-have-web-dev-tools-april-2021-1dii</guid>
      <description>&lt;p&gt;It is time to continue my new blog post series - Top 10 Best Web Dev Tools, which I &lt;a href="https://create-react-app.com/18-top-10-web-dev-tools-03-2021/"&gt;started&lt;/a&gt; almost one month ago. Every month I will try to pick the most intriguing and handy tools that I believe are must-haves for every web developer.&lt;/p&gt;

&lt;h2&gt;1). Daily Dev&lt;/h2&gt;

&lt;p&gt;The best coding news aggregator I have seen so far (yes, including &lt;a href="https://create-react-app.com/15-best-developer-resources-in-2020/"&gt;Hacker News&lt;/a&gt;). Available both as a &lt;a href="https://app.daily.dev/"&gt;web app&lt;/a&gt; and &lt;a href="https://r.daily.dev/chrome"&gt;extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JbO_-koL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.30.36-1024x535.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JbO_-koL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.30.36-1024x535.png" alt="daily dev" class="wp-image-426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://daily.dev/"&gt;https://daily.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;2). HTTP Cats&lt;/h2&gt;

&lt;p&gt;A hilarious API that you can use in your website to show funny error messages. For those who are not in the team cat, there is also a &lt;a href="https://httpstatusdogs.com/"&gt;dog version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFOdmB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.27.26-1024x597.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwFOdmB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.27.26-1024x597.png" alt="http cats" class="wp-image-427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://http.cat/"&gt;https://http.cat/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;3). Ray.so&lt;/h2&gt;

&lt;p&gt;A super cool tool that helps you create some good-looking content for your blog or social media. I will definitely use it the future posts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x65ajrur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.28.20-1024x517.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x65ajrur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.28.20-1024x517.png" alt="ray.so" class="wp-image-428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ray.so/"&gt;https://ray.so/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;4). JSitor&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://create-react-app.com/18-top-10-web-dev-tools-03-2021/"&gt;Last month&lt;/a&gt; I mentioned Stackblitz, which is a great online code editor for web apps. This time I would like to present a tool with a bit narrower application, which is nevertheless very useful when working with JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp76GaOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.29.28-1024x541.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp76GaOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.29.28-1024x541.png" alt="jsitor" class="wp-image-429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsitor.com/"&gt;https://jsitor.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;5). Can  I use...&lt;/h2&gt;

&lt;p&gt;I suppose there must be at least one pick from captain obvious every month. This time it is a widely known resource - Can I use...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EhSUzIGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.30.23-1024x502.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EhSUzIGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.30.23-1024x502.png" alt="can i use" class="wp-image-430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://caniuse.com/"&gt;https://caniuse.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;6). VIM Adventures&lt;/h2&gt;

&lt;p&gt;In fact, this is not a tool but an online environment that allows you to learn VIM in a game-like manner. As for this topic, I may as well recommend the &lt;a href="https://frontendmasters.com/workshops/vim-fundamentals/"&gt;Vim Fundamentals&lt;/a&gt; course by Frontend Masters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8FdFwJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.29.00-1024x519.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8FdFwJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.29.00-1024x519.png" alt="vim adventures" class="wp-image-431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vim-adventures.com/"&gt;https://vim-adventures.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;7). 30 seconds of code&lt;/h2&gt;

&lt;p&gt;An extensive collection of code snippets for all occasions and all skill levels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNLwvCw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.20.02-1024x595.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNLwvCw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.20.02-1024x595.png" alt="30 seconds of code" class="wp-image-432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.30secondsofcode.org/"&gt;https://www.30secondsofcode.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;8). Cool Backgrounds&lt;/h2&gt;

&lt;p&gt;A curated selection of cool backgrounds that you can add to blogs and websites. It also provides a broad scope for modification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DxJG4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.26.57-1024x541.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DxJG4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.26.57-1024x541.png" alt="cool backgrounds" class="wp-image-433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coolbackgrounds.io/"&gt;https://coolbackgrounds.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;9). Grid Cheatsheet&lt;/h2&gt;

&lt;p&gt;It is another useful cheat sheet, presented in visual and easy to interpret form. From the authors of &lt;a href="https://create-react-app.com/18-top-10-web-dev-tools-03-2021/"&gt;Flex cheatsheet&lt;/a&gt; (pick number 10). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CNsphBdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.31.41-1024x542.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CNsphBdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/Screenshot-2021-04-06-at-16.31.41-1024x542.png" alt="grid cheatsheet" class="wp-image-434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yoksel.github.io/grid-cheatsheet/"&gt;https://yoksel.github.io/grid-cheatsheet/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;10). uiGradients&lt;/h2&gt;

&lt;p&gt;A handpicked collection of beautiful color gradients for all kinds of designers and developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsvN5jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/IMG_0180-1024x598.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsvN5jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://create-react-app.com/wp-content/uploads/2021/04/IMG_0180-1024x598.jpg" alt="ui gradients" class="wp-image-435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uigradients.com/#Lizard"&gt;https://uigradients.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S. Please feel free to complete the list by replying to this post. Which web dev tools do you like best?&lt;/p&gt;






&lt;p&gt;&lt;a href="https://create-react-app.com/top-10-web-dev-tools-04-2021/"&gt;Original post @ create-react-app.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Site &lt;a href="https://villivald.com/"&gt;https://villivald.com/&lt;/a&gt;&lt;br&gt;
GitHub &lt;a href="https://github.com/villivald"&gt;https://github.com/villivald&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 5 Node.js/Express Tutorials For Beginners And Advanced Programmers</title>
      <author>The Code Lounge</author>
      <pubDate>Wed, 07 Apr 2021 05:48:44 +0000</pubDate>
      <link>https://dev.to/codeloungedev/top-5-node-js-express-tutorials-for-beginners-and-advanced-programmers-4iaa</link>
      <guid>https://dev.to/codeloungedev/top-5-node-js-express-tutorials-for-beginners-and-advanced-programmers-4iaa</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally posted on the codelounge.dev blog =&amp;gt; &lt;a href="https://codelounge.dev/top-5-nodejsexpress-tutorials-for-beginners-and-advanced-programmers"&gt;Top 5 Node.js/Express Tutorials For Beginners And Advanced Programmers&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;I am mainly building the back-end of my applications using Node.js and Express. As a result, I have done a lot of courses in this area. Thus, in this article, I want to present to you my favorite courses to learn Node.js and Express. &lt;/p&gt;

&lt;p&gt;They have varying difficulty, some being easier than others. Also, each course has its particularities. For instance, some teach you sessions; some do not. Therefore, they complement each other, even though there is an overlap between them.&lt;/p&gt;

&lt;p&gt;Though, remember that nothing helps you more than building projects yourself. Follow the courses, and then put to use what you learned! Also, it's important to note that the courses are in no particular order. Without further ado, let's jump in.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#mozilla-mdn-nodejsexpress-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Mozilla MDN Node.js/Express Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8r56fEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606461183793/4U8REP3Az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8r56fEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606461183793/4U8REP3Az.png" alt="Screenshot 2020-11-27 at 09.12.38.png"&gt;&lt;/a&gt;&lt;br&gt;
Mozilla MDN is an excellent website with many tutorials, including a tutorial on Node.js and Express. In the tutorial, you learn the concepts by building an online library. The application allows users to add books, authors, and genres. It also shows what the books are written by each author, and to what genre they belong to.&lt;/p&gt;

&lt;p&gt;But the question is - what do you learn in this tutorial? You learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About Node and Express. What they are, how they work, and what their benefits are.&lt;/li&gt;
&lt;li&gt;How to set-up a Node (Express) development environment.&lt;/li&gt;
&lt;li&gt;To perform CRUD operations.&lt;/li&gt;
&lt;li&gt;How to create relationships between data. (e.g. Authors and Books)&lt;/li&gt;
&lt;li&gt;The MVC pattern - controllers, views, models, routes.&lt;/li&gt;
&lt;li&gt;How to use MongoDB and Mongoose with Node.js and Express.&lt;/li&gt;
&lt;li&gt;To create a front-end for your application using Pug.&lt;/li&gt;
&lt;li&gt;How to deploy your application to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not be fooled by the simplistic look of the application because the tutorial is not a design/front-end tutorial. The tutorial provides a lot of invaluable information on building a back-end application ready to deploy to production.&lt;/p&gt;

&lt;p&gt;The verdict? I highly recommend the tutorial, and you can check it on the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs"&gt;MDN's website&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#freecodecamp-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  FreecodeCamp Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIR7GWdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606463147274/jffvtiYF6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIR7GWdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606463147274/jffvtiYF6.png" alt="FreeCodeCamp_logo.png"&gt;&lt;/a&gt;&lt;br&gt;
Another excellent tutorial on Node and Express is the tutorial from &lt;a href="https://www.freecodecamp.org/learn"&gt;FreecodeCamp&lt;/a&gt;. Similar to Mozilla MDN, the tutorial takes you from no knowledge on the subject to advanced concepts like authentication. Besides that, you are going to build multiple applications, not just one. Thus, there are lots of opportunities to practice what you learn.&lt;/p&gt;

&lt;p&gt;Without further ado, let's see some of the things you learn by following FreecodeCamp's curriculum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Node and Express.&lt;/li&gt;
&lt;li&gt;Learn how to serve HTML files and static assets (images, CSS, JavaScript, and others).&lt;/li&gt;
&lt;li&gt;Implement Middlewares.&lt;/li&gt;
&lt;li&gt;Learn about Query/Route Parameters.&lt;/li&gt;
&lt;li&gt;Get and parse data from POST requests.&lt;/li&gt;
&lt;li&gt;Use MongoDB and Mongoose to store data in a database and manipulate it.&lt;/li&gt;
&lt;li&gt;Set up authentication and authorization with Passport.&lt;/li&gt;
&lt;li&gt;Implement CRUD operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I extracted the most important topics, but the curriculum covers a lot more. Freecodecamp is a great way to get up and running with Node.js and Express. You would need to complete the material with other resources for advanced concepts and best practices, though.&lt;/p&gt;

&lt;p&gt;To conclude, Freecodecamp is one of the best resources because you do not have to set up your environment. That means you can focus just on coding and not other things. Besides that, the information is valuable, and you can learn a lot of stuff for free.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-complete-nodejs-developer-by-andrew-mead" class="anchor"&gt;
  &lt;/a&gt;
  The Complete Node.js Developer by Andrew Mead
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaKexogj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465393281/E0fYnWul3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaKexogj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465393281/E0fYnWul3.png" alt="Screenshot 2020-11-27 at 10.22.48.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is one of the best to introduce you to the world of Node.js and Express. During this course, you build four web applications. Each application has a purpose, and it teaches you a handful of concepts. Thus, you learn a lot by building those four projects.&lt;/p&gt;

&lt;p&gt;Some of the concepts you learn in this course are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning about Node.js Package Manager - NPM.&lt;/li&gt;
&lt;li&gt;Designing a REST API.&lt;/li&gt;
&lt;li&gt;Version Control with Git.&lt;/li&gt;
&lt;li&gt;Uploading files and images.&lt;/li&gt;
&lt;li&gt;Sending emails.&lt;/li&gt;
&lt;li&gt;You also learn about ES6 and ES7.&lt;/li&gt;
&lt;li&gt;How to authenticate users with JWT - JSON Web Token.&lt;/li&gt;
&lt;li&gt;Testing with Jest.&lt;/li&gt;
&lt;li&gt;Debugging with VS Code and Google Chrome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, I highlighted the most important concepts you learn in the course. However, there are more concepts you learn. The course well-thought and you can use it to start with Node.js and Express or to fill gaps you have in your knowledge. The reason this course stands out is that the instructor goes into great detail about each concept. The explanations are not rushed, which makes it easier to follow along and learn better.&lt;/p&gt;

&lt;p&gt;Do I recommend the course? Yes; I did the course twice, and I cannot recommend it enough. The course is suitable whether you are a beginner or an intermediate developer.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#learn-node-by-wes-bos" class="anchor"&gt;
  &lt;/a&gt;
  Learn Node by Wes Bos
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fimjEKu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465082130/Dg9MpAz-t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fimjEKu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606465082130/Dg9MpAz-t.png" alt="Screenshot 2020-11-27 at 10.17.34.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From all the Node.js courses, the best-looking application you are going to build is in Wes Bos's course. The design of the application is catchy, beautiful and professional. &lt;/p&gt;

&lt;p&gt;However, I want to mention I had troubles following the course in the beginning when I had no Node.js knowledge. I had to postpone it and follow another course to learn the basics. The course feels advanced, and there are other courses more suited for complete beginners. Though, keep in mind that this is my experience, and it might not be right for you.&lt;/p&gt;

&lt;p&gt;Now let's see what this course covers, and you learn by following it. You learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement CRUD operations.&lt;/li&gt;
&lt;li&gt;Implement REST API points.&lt;/li&gt;
&lt;li&gt;Use the MVC pattern for your application.&lt;/li&gt;
&lt;li&gt;Add routing and pagination.&lt;/li&gt;
&lt;li&gt;Implement file uploading.&lt;/li&gt;
&lt;li&gt;Set up a templating engine like Pug.&lt;/li&gt;
&lt;li&gt;Deploy to production, on various providers.&lt;/li&gt;
&lt;li&gt;Send emails to users.&lt;/li&gt;
&lt;li&gt;Storing data in a MongoDB database, and manipulating that data.&lt;/li&gt;
&lt;li&gt;Implement authentication and authorization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with the other courses, these are just some of the topics. The course covers a lot more topics, which you can find &lt;a href="https://learnnode.com/"&gt;learnnode.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do I recommend the course? Yes. It's a great course where you learn a ton of concepts by building a real-world application. The only blocker might be that it's a paid course. Otherwise, it's an all-around great course.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#nodejs-the-complete-guide-by-maximilian-schwarzm%C3%BCller" class="anchor"&gt;
  &lt;/a&gt;
  NodeJS - The Complete Guide by Maximilian Schwarzm√ºller
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5H0o_VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606491200402/rqLbiFi6Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5H0o_VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1606491200402/rqLbiFi6Z.png" alt="Screenshot 2020-11-27 at 17.31.44.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Node.js course is a little bit different in the sense that it covers more topics than just Node.js and Express. Even though the focus is on these two technologies, you learn others too. For instance, it teaches TypeScript and Deno, which is a bonus. You get more than you paid for.&lt;/p&gt;

&lt;p&gt;Besides the usual Node.js and Express concepts you learn, which are taught in the other courses too, you also learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vanilla JavaScript and ES6 concepts.&lt;/li&gt;
&lt;li&gt;To use SQL with Node.js and Express.&lt;/li&gt;
&lt;li&gt;Advanced authentication and testing.&lt;/li&gt;
&lt;li&gt;What GraphQL is and how to use it.&lt;/li&gt;
&lt;li&gt;How to add Stripe payments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, these are not the only subjects. However, these are the concepts that differentiate the course from other courses. You get all the regular information about Node.js and Express, plus these other concepts and technologies.&lt;/p&gt;

&lt;p&gt;The verdict? The course is worth its money. It goes well-beyond Node.js and Express, and it teaches you other cool and useful concepts and technologies. You can check the course &lt;a href="https://www.udemy.com/course/nodejs-the-complete-guide/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are the top five Node.js/Express courses I recommend. They can take you from no knowledge to an advanced level. Of course, I have to mention that these are not the only ones. Also, they are the top five based on my experience.&lt;/p&gt;

&lt;p&gt;I recommend all courses from this article because you cannot go wrong with any of them. However, if you have more suggestions, feel free to leave them in the comments. I would like to see more good courses.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Setting up Blazor with Tailwindcss</title>
      <author>Tim Myers</author>
      <pubDate>Wed, 07 Apr 2021 05:05:58 +0000</pubDate>
      <link>https://dev.to/denvercoder/setting-up-blazor-with-tailwindcss-35gi</link>
      <guid>https://dev.to/denvercoder/setting-up-blazor-with-tailwindcss-35gi</guid>
      <description>&lt;p&gt;So, you decided that you want to try Blazor... Then you decided that you want to try Blazor with Tailwind. This mix of tech is what I like to call WindBlazor.&lt;/p&gt;

&lt;p&gt;One of the first things you need to do is get all this junk setup. It's not that hard, I was able to do it in about an hour the first time.&lt;/p&gt;

&lt;p&gt;Then I created a repo with the resulting files and made a Github Template out of them. So yes, it took an hour but that was just the one time. Each time I start a new project from now on all I have to do is clone my repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/denvercoder/windblazor.git"&gt;https://github.com/denvercoder/windblazor.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now Chris Sainty already wrote a really good post on how to integrate Tailwind into Blazor. You can find it here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrissainty.com/integrating-tailwind-css-with-blazor-using-gulp-part-1/"&gt;https://chrissainty.com/integrating-tailwind-css-with-blazor-using-gulp-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chris' article is great but in my opinion he left out a few steps to &lt;strong&gt;really&lt;/strong&gt; get you squared away.&lt;/p&gt;

&lt;p&gt;First of all he doesn't talk about getting a watch to work.&lt;/p&gt;

&lt;p&gt;You can run &lt;code&gt;dotnet watch run&lt;/code&gt; from the &lt;strong&gt;server&lt;/strong&gt; project but that only watches server files. If you want it to watch frontend files you have to add a few things.&lt;/p&gt;

&lt;p&gt;You'll want to look in your &lt;code&gt;Server.csproj&lt;/code&gt; file and create an new &lt;code&gt;ItemGroup&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Watch Include="..\Client\**\*.razor" /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I got the above tidbit from Patrick God.&lt;/p&gt;

&lt;p&gt;Now what that will do is the server project will now watch Server files but it will also watch any razor files. When you add:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class="text-red-500 p6"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and then save the file, &lt;code&gt;dotnet watch run&lt;/code&gt; will recompile the app and then refresh your browser so you can see the result.&lt;/p&gt;

&lt;p&gt;Thanks for reading and that's all folx.&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>tailwindcss</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
