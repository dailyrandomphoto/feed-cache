<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!</title>
      <author>Gourav Khunger</author>
      <pubDate>Tue, 31 Aug 2021 10:29:10 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/introducing-jekyllex-the-easiest-way-to-manage-a-jekyll-blog-from-an-android-device-1f84</link>
      <guid>https://dev.to/gouravkhunger/introducing-jekyllex-the-easiest-way-to-manage-a-jekyll-blog-from-an-android-device-1f84</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is a copy-pasta from &lt;a href="https://genicsblog.com"&gt;my blog&lt;/a&gt;. Consider &lt;a href="https://genicsblog.com/introducing-jekyllex-android-app"&gt;reading the article there&lt;/a&gt; for a better experience and save time by listening to the audio version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello, awesome people! &lt;/p&gt;

&lt;p&gt;Today I present to you my latest project - &lt;a href="https://jekyllex.xyz"&gt;JekyllEx&lt;/a&gt;, which I have been working on for the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;Hashnode Auth0 August Hackathon&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detailed-background"&gt;
  &lt;/a&gt;
  🎊 Detailed Background
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: I built JekyllEx because Jekyll(a static site generator) has a lot of potentials, but the learning curve for a non-tech-savvy person was high. &lt;/p&gt;

&lt;p&gt;To bridge the gap, I am presenting JekyllEx which can intuitively manage a Jekyll blog's posts with a much simpler UI and effective editor- using which you don't need to mess with code and commits for any article you write!&lt;/p&gt;




&lt;p&gt;A few months ago, I got to learn about &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, which is a static site generator. In short:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx, or another web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This caught my attention in the first go as I am a blogging freak who has been &lt;a href="https://genicsblog.com/introductory-first-post"&gt;testing different blogging solutions for a few years now&lt;/a&gt; 😆.&lt;/p&gt;

&lt;p&gt;I used Jekyll in many places, testing things locally and then finally making &lt;a href="https://samdisha.me"&gt;my sister's blog&lt;/a&gt; with it, and helped someone(can't mention) to make a &lt;a href="https://60wordsofwisdom.xyz"&gt;small blog&lt;/a&gt; for him.&lt;/p&gt;

&lt;p&gt;It was just the fact that after initial setup, all we need to do for a new post is write markdown and let Jekyll do the further work... And, since it builds a static site, we can host it for free on Github Pages!&lt;/p&gt;

&lt;p&gt;This seems a good deal for someone, who doesn't want to pay much amount for hosting and themes (if we consider WordPress and alternatives), and just want a minimal site for the content they want to put up.&lt;/p&gt;

&lt;p&gt;So, I went on to make the blog for my sister. But here comes the tricky part. Jekyll is actually hard for non-techy people. For, at least they must understand basic coding principles and some web dev to be able to understand what goes on in their Jekyll theme and posts.&lt;/p&gt;

&lt;p&gt;This was the birth of &lt;strong&gt;JekyllEx&lt;/strong&gt;, a solution to a problem that isn't solved because Jekyll hasn't that vast of a community for it to have such solutions. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Jekyll is used by 0.1% of all the websites&lt;/strong&gt; whose content management system we know. This is 0.1% of all websites.&lt;/p&gt;

&lt;p&gt;~ &lt;a href="https://w3techs.com/technologies/details/cm-jekyll"&gt;w3techs.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had the idea of making a blog manager app for Jekyll, partly because I hadn't coded in a while because of my studies, and partly because my sister would eat my head if there's any single typo in her blog post because I was the one who managed it 😆. I had to edit, preview, test, and commit for such small things which seemed tedious.&lt;/p&gt;

&lt;p&gt;I was just procrastinating making this cool project, but as soon as I heard about Auth0, and how easily they let integrating login functionality in an app, I was pretty sure I would be using it. And coincidently, Hashnode partnered with Auth0 to organize the august hackathon challenge and that provided the motivation to work on the project!&lt;/p&gt;

&lt;p&gt;JekyllEx wouldn't be made such a short amount of time if Hashnode hadn't partnered with Auth0 to present this hackathon. That's because JekyllEx depends on Github API, and integration with GitHub is in turn provided by Auth0. JekyllEx, at its core, uses the GitHub API to manage jekyll repositories.&lt;/p&gt;

&lt;p&gt;To put things in a better structure, these were the points that lead me to make JekyllEx:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My sister personally needed an intuitive manager app for her Jekyll blog, using which she can do things from her phone itself.&lt;/li&gt;
&lt;li&gt;I wanted to get my hands dirty on some project as I hadn't coded for a while&lt;/li&gt;
&lt;li&gt;I also wanted to do something for this blog, as it had been inactive for some months because I couldn't get the time to post anything 😅&lt;/li&gt;
&lt;li&gt;Hashnode's august hackathon in partnership with Auth0 provided the zeal required to start a new project!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#introducing-jekyllex"&gt;
  &lt;/a&gt;
  🚀 Introducing JekyllEx
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WMbhD5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630347657127/VGBAZJ7zN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WMbhD5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630347657127/VGBAZJ7zN.png" alt="round_logo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JekyllEx is the new way to write articles for a Jekyll blog. It is an android app using which you can create/edit/delete posts for the blog hosted at Github Pages.&lt;/p&gt;

&lt;p&gt;Download and install the &lt;a href="https://github.com/jekyllex/jekyllex-android/releases/latest"&gt;latest release&lt;/a&gt; of the app to start relishing the power of blogging from your mobile!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#some-handy-links"&gt;
  &lt;/a&gt;
  🔗 Some Handy Links:
&lt;/h3&gt;

&lt;p&gt;Before the App tour, let me give you the links to different resources that revolve around JekyllEx and will be referred to, later in the post.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#github-repsitories"&gt;
  &lt;/a&gt;
  GitHub Repsitories
&lt;/h4&gt;

&lt;p&gt;Go smash a star on all of 'em 😆. If not all, do star the app's repository 😀&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Organisation: &lt;a href="https://github.com/jekyllex"&gt;https://github.com/jekyllex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;JekyllEx Android App: &lt;a href="https://github.com/jekyllex/jekyllex-android"&gt;https://github.com/jekyllex/jekyllex-android&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Proxy API: &lt;a href="https://github.com/jekyllex/jekyllex-api"&gt;https://github.com/jekyllex/jekyllex-api&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Demo blog: &lt;a href="https://github.com/gouravkhunger/demo-jekyll-blog"&gt;https://github.com/gouravkhunger/demo-jekyll-blog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://jekyllex.xyz"&gt;https://jekyllex.xyz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Documentation: &lt;a href="https://docs.jekyllex.xyz"&gt;https://docs.jekyllex.xyz&lt;/a&gt; (under construction)&lt;/li&gt;
&lt;li&gt;API: &lt;a href="https://api.jekyllex.xyz"&gt;https://api.jekyllex.xyz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Demo blog used for testing Jekyll app: &lt;a href="https://demo.jekyllex.xyz"&gt;https://demo.jekyllex.xyz&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#app-tour"&gt;
  &lt;/a&gt;
  🔎 App Tour
&lt;/h2&gt;

&lt;p&gt;This section showcases the UI of the JekyllEx app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;This is the auth page where the user must connect his GitHub account with JekyllEx to authorize the App to manage the blog repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7r0ZHyQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630351766117/Q5GSw4BdA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7r0ZHyQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630351766117/Q5GSw4BdA.png" alt="jekyllex-auth-page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;The home page of the app lists all your repositories on the home page, so you can choose the repository that has the Jekyll blog in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNBi1ldl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630351781213/6x7woWiw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNBi1ldl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630351781213/6x7woWiw8.png" alt="jekyllex-home-page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#posts-page"&gt;
  &lt;/a&gt;
  Posts Page
&lt;/h3&gt;

&lt;p&gt;Clicking on any repository on the Home Page takes you to the Posts page. If the selected repository is a Jekyll blog, then the posts of the blog will be loaded, else an error will be shown that the repository isn't a Jekyll project.&lt;/p&gt;

&lt;p&gt;Implementing the logic of loading posts from the &lt;code&gt;_posts&lt;/code&gt; folder in the repository was a bit tricky, it took me around 1-2 hours to come up with a solution. More on this later in the post!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2PKCo7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355745666/OuiVtnSgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2PKCo7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355745666/OuiVtnSgk.png" alt="jekyllex-posts-page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-post"&gt;
  &lt;/a&gt;
  New Post
&lt;/h3&gt;

&lt;p&gt;From the posts page, you can create a new post by pressing the icon on the top right representing "New Post".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VFrmdmiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355869755/bv7Unn3vJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VFrmdmiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355869755/bv7Unn3vJ.png" alt="jekyllex-new-post.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-editor"&gt;
  &lt;/a&gt;
  The Editor
&lt;/h3&gt;

&lt;p&gt;This is the core page of the app where a user can edit and preview the markdown post being rendered live, and also set post metadata. Meta Data in a Jekyll post is a collection of some variables that define specifics about a post like its &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;Summary&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;These fields are then used by the installed Jekyll theme to present the posts in the rendered HTML accordingly...&lt;/p&gt;

&lt;p&gt;The Editor has two tabs- the &lt;strong&gt;EDIT FILE&lt;/strong&gt; tab and the &lt;strong&gt;PREVIEW CHANGES&lt;/strong&gt; tab. As the text is entered in the editing pane, it gets auto rendered on the preview pane live.&lt;/p&gt;

&lt;p&gt;Another feature of the editor is synchronized scrolling, that is, as soon as one scrolls down in the editing pane, the preview pane scrolls by the same unit so that the editor and the preview show pretty much the same thing and provide a seamless experience of editing.&lt;/p&gt;

&lt;p&gt;This is really helpful if the post file is large and the sections that are to be edited are far away, in such scenarios, synchronized scrolling helps a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2ykgmJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355928541/fYHl0Gzkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2ykgmJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355928541/fYHl0Gzkr.png" alt="jekyllex-editing-page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profile-page"&gt;
  &lt;/a&gt;
  Profile Page
&lt;/h3&gt;

&lt;p&gt;The app has a cool profile page that shows user information that it receives from the GitHub API. Once the data is fetched, it is cached and saved to a local room database. But the user can force refresh the profile from the menu too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dmbzoii8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355109995/TcAVSCdzsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dmbzoii8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630355109995/TcAVSCdzsQ.png" alt="jekyllex-profile-page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-other-sections"&gt;
  &lt;/a&gt;
  Some other sections
&lt;/h3&gt;

&lt;p&gt;These are some of the things that were left in the above images, so included aside:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BI_Iag72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630356234366/bxtpJ84ko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BI_Iag72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630356234366/bxtpJ84ko.png" alt="jekyllex-other.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-technical-details"&gt;
  &lt;/a&gt;
  🛠 Technical Details
&lt;/h2&gt;

&lt;p&gt;The codebase of the app is based on the MVVM pattern. Here's a list of tools/libraries/components JekyllEx uses:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#platform"&gt;
  &lt;/a&gt;
  Platform
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#languages-used"&gt;
  &lt;/a&gt;
  Languages Used
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Android Architecture Components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; : For user authentication&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/square/retrofit"&gt;Retrofit&lt;/a&gt; : For network requests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.android.com/training/data-storage/room"&gt;Room&lt;/a&gt; : For local database and caching user profile&lt;/li&gt;
&lt;li&gt;Kotlin extensions and Coroutines for Room&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/noties/Markwon"&gt;Markwon&lt;/a&gt; : Markdown rendering&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/javiersantos/AppUpdater"&gt;App Updater&lt;/a&gt; : To check for updates from GitHub Releases&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bumptech/glide"&gt;Glide&lt;/a&gt; : For image loading.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; : For push notifications, analytics and crashlytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#mad-score"&gt;
  &lt;/a&gt;
  M.A.D. Score
&lt;/h4&gt;

&lt;p&gt;JekyllEx has a &lt;a href="https://goo.gle/MADscore"&gt;M.A.D.&lt;/a&gt; score of MAD legend, the Greatest Of All Time of Android development.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://madscorecard.withgoogle.com/scorecards/878880162/"&gt;score card&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_aAzWTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630400803535/RMu_MMtyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_aAzWTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630400803535/RMu_MMtyW.png" alt="jekyllex-mad-score-summary.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;Language: &lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JekyllEx uses a proxy API to securely retrieve user information from Auth0 Management API &lt;a href="https://auth0.com/docs/connections/calling-an-external-idp-api#from-the-frontend"&gt;as recommended in the Auth0 docs&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The API is built using express and is hosted on Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  🛡️ License
&lt;/h3&gt;

&lt;p&gt;This project is &lt;a href="https://github.com/jekyllex/jekyllex-android/blob/main/LICENSE"&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt; licensed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#development-journey"&gt;
  &lt;/a&gt;
  👨🏻‍💻 Development Journey
&lt;/h2&gt;

&lt;p&gt;Developing JekyllEx was a lot of fun because it involved learning new things!&lt;/p&gt;

&lt;p&gt;I completed most of the UI in 3 days, then took some time to figure out the Proxy API thing. It was completely new for me so I had to struggle a bit for 2 days to understand how Express APIs work.&lt;/p&gt;

&lt;p&gt;Then I made the different features by integrating GitHub API. Authorization was effortlessly handled by Auth0! I used the Retrofit library to do all the networking stuff like API calls, handling responses, etc.&lt;/p&gt;

&lt;p&gt;I quickly made a &lt;a href="https://demo.jekyllex.xyz"&gt;demo blog&lt;/a&gt; with a minimal theme and tested features of JekyllEx once it was done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  😎 Challenges
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#making-the-proxy-api"&gt;
  &lt;/a&gt;
  Making the Proxy API
&lt;/h3&gt;

&lt;p&gt;The biggest challenge I faced during development was building the proxy API, which was needed to securely retrieve user credentials.&lt;/p&gt;

&lt;p&gt;I had to look through a lot of articles to understand how Node.js works and how would I get my API to work.&lt;/p&gt;

&lt;p&gt;With considerable theoretical help from @&lt;a href="https://dev.to@SamJakob"&gt;SamJakob&lt;/a&gt;, I got clarity and could proceed to start developing the API.&lt;/p&gt;

&lt;p&gt;To get user profiles from Auth0 Management API, we first get an access token that can be used to retrieve the profile.&lt;/p&gt;

&lt;p&gt;I use this snippet to refresh the Auth0 access token periodically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function to renew Auth0 Management API access token&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// time after which token must be refreshed, It will be updated later&lt;/span&gt;
  &lt;span class="nx"&gt;refreshAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// required parameter to pass to Auth0 Management API OAuth&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client_secret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;audience&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH0_AUDIENCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grant_type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRANT_TYPE&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// axios request to get the access token&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/oauth/token`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Overwrite Axios' automatically set Content-Type&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get the access token&lt;/span&gt;
    &lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// token must refresh every 10 minutes before the expiration time&lt;/span&gt;
    &lt;span class="nx"&gt;refreshAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires_in&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// refresh the token&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refreshAfter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// execute the function for the first time&lt;/span&gt;
&lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This refreshes the Auth0 Management API access token 10 minutes before it expires. This token can be used to query the API to get details of a specific user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-files-from-the-raw-posts-endraw-folder"&gt;
  &lt;/a&gt;
  Getting files from the &lt;code&gt;_posts&lt;/code&gt; folder
&lt;/h3&gt;

&lt;p&gt;It feels good to give yourself a pat on the shoulders when you do something good, and that also boosts your motivation to strive and do better than ever. I felt this when making the logic for retrieving all the files under the &lt;code&gt;_post&lt;/code&gt; folder(Jekyll blogs need a &lt;code&gt;_post&lt;/code&gt; folder with &lt;code&gt;md&lt;/code&gt; files) &lt;/p&gt;

&lt;p&gt;When we query for items at a particular path in a repository, the GitHub API returns a list of items present there. &lt;/p&gt;

&lt;p&gt;So it seems simple that the files will be there in the &lt;code&gt;_posts&lt;/code&gt; folder and we can query the content present there from the API and show the posts to the user.&lt;/p&gt;

&lt;p&gt;But this is not the case. The thing is, Jekyll looks for markdown files in the _posts folder on nested folders too. That means if someone has a file at the following path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_posts/android/2021-08-29-introduction-to-android.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that will also be considered a valid post, even though it is in the &lt;code&gt;android&lt;/code&gt; subdirectory. So to solve this problem, we could query the GitHub API recursively, as we get the path of a folder when it is returned from the API.&lt;/p&gt;

&lt;p&gt;Here's a snippet of how I am achieving this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function to get the content of the repository at a specific path inside it.&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getContentFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;shouldPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RepoContentItemModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;postsArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrayListOf&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RepoContentItemModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getRepoContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isSuccessful&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;postsArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="s"&gt;"dir"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nextLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getContentFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;postsArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextLevel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shouldPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postsArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;hasPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;postsArray&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code does is, it takes some parameters such as &lt;code&gt;repoName&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; to query for the content at the path in the provided repository. The &lt;code&gt;shouldPost&lt;/code&gt; variable dictates whether all the folders have been checked or not. Once all the folders have been queried, then it returns the array of posts, else it keeps on querying for folders sequentially- one level at a time.&lt;/p&gt;

&lt;p&gt;Notice &lt;code&gt;runBlocking&lt;/code&gt;, it is used to carry out the tasks defined in the block, on the main thread, because if the folders are queried from the coroutines(that carry out code asynchronously), then there can be errors when the posts are returned by GitHub API, consider this case:&lt;/p&gt;

&lt;p&gt;There are two folders- both are queried from separate threads, the problem here is, suppose the API didn't return content for the first folder but returned content for the second folder faster than the first one, now since there are only 2 folders, the function would return the posts array as all folders have been marked as queried...&lt;/p&gt;

&lt;p&gt;And if by chance the API returns content for the second folder, this could lead to a crash, as the posts folder has already been returned. Also, if not a crash, this could lead to missing posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronizing-editor-with-the-preview-tab"&gt;
  &lt;/a&gt;
  Synchronizing Editor With the Preview Tab
&lt;/h3&gt;

&lt;p&gt;The idea of synchronizing came to me when I once edited a markdown file in visual studio code, there was a markdown plugin that actually scrolled the preview by the same distance as the editing screen would.&lt;/p&gt;

&lt;p&gt;So I thought of implementing it in JekyllEx too, as that would be a really handy feature.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MutableLiveData&lt;/code&gt;, when used in a &lt;code&gt;ViewModel&lt;/code&gt; easily, allows emitting data that can be observed from Activities/Fragments. I used it to store the scroll distance as soon as the user scrolls inside the Editing tab, and it was observed by the Preview Fragment and was configured to set the scroll of the preview the same.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-editorviewmodelkt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;EditorViewModel.kt&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;

&lt;span class="c1"&gt;// Observable live data variables.&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scrollDist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// other variables&lt;/span&gt;

&lt;span class="c1"&gt;// Function to set the Scroll View scroll distance.&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setScrollDist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newDist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;scrollDist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newDist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-editingfragmentkt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;EditingFragment.kt&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;

&lt;span class="c1"&gt;// Synchronize scroll distance with the preview tab.&lt;/span&gt;
&lt;span class="n"&gt;editorBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;editorScrollView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnScrollChangeListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scrollY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setScrollDist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrollY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-previewfragmentkt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;PreviewFragment.kt&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;

&lt;span class="c1"&gt;// Observe the scroll dist of the editor area and scroll to that distance.&lt;/span&gt;
&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scrollDist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewLifecycleOwner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;previewBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previewScrollView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;smoothScrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same logic was used for text, as soon as text would be edited, it will be observed by the Preview Fragment and set the rendered markdown.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  🔥 Roadmap
&lt;/h2&gt;

&lt;p&gt;JekyllEx solves the major problem of managing posts. But there exists another problem, one can manage their blog from JekyllEx, but how could they make the Jekyll blog in the first place?&lt;/p&gt;

&lt;p&gt;Well, this is a major feature and it could bring a great change in how Jekyll Blogs are made, transforming from the traditional coding style, migrating to mobile devices. Then everyone could relish the power of Jekyll. Still, in the end, Jekyll remains only for those who don't wish to have big features on their site and want to keep their hosting bills low, but still want the flexibility to be able to change every single bit of their blog.&lt;/p&gt;

&lt;p&gt;On a side note: For those who want to have an awesome newsletter, custom CSS and complete ownership of their blog for free, and still don't want to mess up with code, Hashnode is a really great fit for them! &lt;a href="https://hashnode.com/@gouravkhunger/joinme"&gt;Go sign up now&lt;/a&gt; and start blogging in minutes.&lt;/p&gt;

&lt;p&gt;Here's a list of features I am planning to add to JekyllEx in the future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add functionality to make a blog using open-source Jekyll Themes directly from the app.&lt;/li&gt;
&lt;li&gt;Add feature to edit pages too.&lt;/li&gt;
&lt;li&gt;Add the "Continue where you left off" feature.&lt;/li&gt;
&lt;li&gt;Improve the Meta Data editor to a more intuitive chip-based editor rather than a text box.&lt;/li&gt;
&lt;li&gt;Allow editing &lt;code&gt;config.yml&lt;/code&gt; file from the App.&lt;/li&gt;
&lt;li&gt;Save deleted posts to local DB to act as a restore point if deleted in error.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If possible&lt;/strong&gt;, make a section to share your article with other JekyllEx users, like a community sort of thing.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#real-usage"&gt;
  &lt;/a&gt;
  💡 Real Usage
&lt;/h2&gt;

&lt;p&gt;JekyllEx is already being used to manage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://samdisha.me"&gt;The personal blog of my sister&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://60wordsofwisdom.xyz"&gt;60 w.o.w blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use JekyllEx and want to get some backlinks and referral, you can get listed here by comment your experience with using JekyllEx and providing a link to your blog!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  😊 Final Words
&lt;/h2&gt;

&lt;p&gt;On an ending note, I would say making JekyllEx for this hackathon was extremely fun. I couldn't have put myself to learn more new things if I would have procrastinated more. I also made really good new friends on the hashnode server.&lt;/p&gt;

&lt;p&gt;I would really appreciate it if you could take a moment and comment on your views on my project! Also, react to the post to spread some love :)&lt;/p&gt;

&lt;p&gt;All kinds of feedbacks are welcome 😄&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  🌏 Connect with me!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hashnode: &lt;a href="https://hashnode.com/@gouravkhunger"&gt;&lt;code&gt;@gourav_khunger&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;StackOverflow: &lt;a href="https://stackoverflow.com/users/9819031"&gt;&lt;code&gt;Gourav&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/gourav_khunger"&gt;&lt;code&gt;@gourav_khunger&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram: &lt;a href="https://instagram.com/"&gt;&lt;code&gt;@_gourav.khunger_&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Youtube: &lt;a href="https://www.youtube.com/channel/UCkv-J_D8jK2N02nBcyM92mQ"&gt;&lt;code&gt;Gourav Khunger&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Discord: &lt;code&gt;gourav#2215&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>jekyll</category>
      <category>blogging</category>
      <category>auth0</category>
      <category>android</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency </title>
      <author>Tips and Tricks</author>
      <pubDate>Tue, 31 Aug 2021 10:03:52 +0000</pubDate>
      <link>https://dev.to/csshacker/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-4of9</link>
      <guid>https://dev.to/csshacker/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-4of9</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>8 Javascript Tips  That You Should Know</title>
      <author>Abdullah Furkan Özbek</author>
      <pubDate>Tue, 31 Aug 2021 10:02:56 +0000</pubDate>
      <link>https://dev.to/afozbek/8-javascript-tips-that-you-should-know-3l29</link>
      <guid>https://dev.to/afozbek/8-javascript-tips-that-you-should-know-3l29</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-numberltgtstring"&gt;
  &lt;/a&gt;
  1. Number&amp;lt;&amp;gt;String
&lt;/h2&gt;

&lt;p&gt;For converting numbers and strings with each other, we can use following methods;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Number &amp;gt; String&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// String &amp;gt; Number&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// New Way&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// number to string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// string to number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-swap-using-destructuring"&gt;
  &lt;/a&gt;
  2. Swap using destructuring
&lt;/h2&gt;

&lt;p&gt;The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.&lt;/p&gt;

&lt;p&gt;We can also use that to swap values fast, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// result -&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// result -&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-remove-duplicates-from-an-array"&gt;
  &lt;/a&gt;
  3. Remove duplicates from an Array
&lt;/h2&gt;

&lt;p&gt;If we have an array of values and we try to filter unique values we can follow this trick;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayWithUniqueItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c1"&gt;// ["1", 2, 3, "abc", 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-shorten-the-array-using-length"&gt;
  &lt;/a&gt;
  4. Shorten the array using length
&lt;/h2&gt;

&lt;p&gt;Array has length property which tells how many items inside that list.&lt;/p&gt;

&lt;p&gt;If we change the length property the remaining items will be gone forever;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="c1"&gt;// Result: [0, 1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-combine-objects-using-spread"&gt;
  &lt;/a&gt;
  5. Combine objects using ...spread
&lt;/h2&gt;

&lt;p&gt;Let’s say you want to combine multiple objects into one object containing them all. The spread operator ( … ) is a great way to achieve this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Combine them using the spread operator            &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objCombined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Result: {'a': 1, 'b': 2, 'c': 3, 'd': 4}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-windowlocation-object"&gt;
  &lt;/a&gt;
  6. window.location object
&lt;/h2&gt;

&lt;p&gt;JavaScript can access the current URL using the window.location object. &lt;br&gt;
And it has all kinds of useful property which we can use;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript can access the current URL in parts. For this URL:&lt;/span&gt;
&lt;span class="s2"&gt;`https://furkanozbek.com/example/index.html?s=article`&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;`https:`&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;`furkanozbek.com`&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;`/example/index.html`&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;`?s=article`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-dynamice-object-properties"&gt;
  &lt;/a&gt;
  7. Dynamice Object Properties
&lt;/h2&gt;

&lt;p&gt;ES6 brought us computed property names that allow property keys of object literals to use expressions. &lt;/p&gt;

&lt;p&gt;By surrounding the key with brackets [], we can use variables as property keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {fruit: "kiwi"}&lt;/span&gt;

&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;   &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;

&lt;span class="c1"&gt;// Or&lt;/span&gt;
&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-map-substitute"&gt;
  &lt;/a&gt;
  8. map() Substitute
&lt;/h2&gt;

&lt;p&gt;We can also use Array.from() method as the same way map function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mac&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bruno&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jucas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Furr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dogsNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns [“Rio”, “Mac”, “Bruno”, “Jucas”, “Furr”, “Blu”]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://modernweb.com/45-javascript-tips-tricks-practices/"&gt;45 Useful JavaScript Tips, Tricks And Best Practices | Modern Web&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/toktoktwan/5-must-know-javascript-tips-tricks-3pm7"&gt;5 Must-know Javascript Tips &amp;amp; Tricks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/worldindev/8-javascript-tips-tricks-that-no-one-teaches-24g1"&gt;8 JavaScript Tips &amp;amp; Tricks That No One Teaches 🚀&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Web Designer Roadmap 2021</title>
      <author>Tips and Tricks</author>
      <pubDate>Tue, 31 Aug 2021 10:00:15 +0000</pubDate>
      <link>https://dev.to/csshacker/web-designer-roadmap-2021-4i8a</link>
      <guid>https://dev.to/csshacker/web-designer-roadmap-2021-4i8a</guid>
      <description>&lt;h2 id="what-is-a-web-designer"&gt;What is a Web Designer?&lt;/h2&gt;
&lt;p&gt;Are you both creative and technically inclined? You may want to consider a career as a web designer!&lt;/p&gt;
&lt;p&gt;Web designers build or redesign websites. They understand what it takes to make a website functional and easy to use, but also understand what is needed to make it aesthetically appealing to the user.&lt;/p&gt;
&lt;p&gt;Web design is a rapidly growing industry, as digital media has become part of everyone's lives and people rely on the web for their communications, information, shopping, social life, and more.&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/web-designers-roadmap-2021/&amp;amp;ved=2ahUKEwjqlebL7qryAhUF7HMBHVCiCxQQFnoECBoQAQ&amp;amp;usg=AOvVaw2Oo-ikwNXhEKOFAMaulAH4"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;









</description>
    </item>
    <item>
      <title>AWS Batch</title>
      <author>Ajit Singh</author>
      <pubDate>Tue, 31 Aug 2021 09:57:00 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-batch-ai5</link>
      <guid>https://dev.to/this-is-learning/aws-batch-ai5</guid>
      <description>&lt;p&gt;AWS Batch enables developers, scientists, and engineers to easily and efficiently run hundreds of thousands of batch computing jobs on AWS. AWS Batch dynamically provisions the optimal quantity and type of compute resources (e.g., CPU or memory optimized instances) based on the volume and specific resource requirements of the batch jobs submitted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-batch-job"&gt;
  &lt;/a&gt;
  what is a batch job?
&lt;/h2&gt;

&lt;p&gt;A batch job is a job with a start and end to it as opposed to a continuous job that runs 24X7&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-batch-features"&gt;
  &lt;/a&gt;
  AWS batch features
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Batch processing service at any scale.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provision the right amount of EC2 instances or Spot instances for processing the batch job based on the volume and the requirements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You submit or schedule batch jobs and AWS manages the rest&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There run as Docker images.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Pulling data form somewhere at night&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backups at midnight&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Financial data processing each day&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Best CSS Shorthand properties </title>
      <author>Tips and Tricks</author>
      <pubDate>Tue, 31 Aug 2021 09:56:43 +0000</pubDate>
      <link>https://dev.to/csshacker/best-css-shorthand-properties-381p</link>
      <guid>https://dev.to/csshacker/best-css-shorthand-properties-381p</guid>
      <description>&lt;h1&gt;Shorthand properties&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Shorthand properties&lt;/em&gt;&lt;/strong&gt; are CSS properties that let you set the values of multiple other CSS properties simultaneously. Using a shorthand property, you can write more concise (and often more readable) style sheets, saving time and energy.&lt;/p&gt;
&lt;p&gt;The CSS specification defines shorthand properties to group the definition of common properties acting on the same theme. For instance, the CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt; property is a shorthand property that's able to define the values of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color"&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image"&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat"&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position"&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;. Similarly, the most common font-related properties can be defined using the shorthand &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font"&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt;, and the different margins around a box can be defined using &lt;span&gt; the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin"&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;shorthand.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/best-css-shorthand-properties/&amp;amp;ved=2ahUKEwjIoPCc99DyAhU7-nMBHUxQDrYQFnoECEAQAQ&amp;amp;usg=AOvVaw23jKjWtvmnvAtDmQi7vhZp&amp;amp;cshid=1630058051965"&gt;CSS Shorthand properties for Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Trending Javascript Projects for Frontend Developer on GitHub</title>
      <author>Tips and Tricks</author>
      <pubDate>Tue, 31 Aug 2021 09:54:26 +0000</pubDate>
      <link>https://dev.to/csshacker/trending-javascript-projects-for-frontend-developer-on-github-33c8</link>
      <guid>https://dev.to/csshacker/trending-javascript-projects-for-frontend-developer-on-github-33c8</guid>
      <description>&lt;p&gt;The best way to learn a new programming language is to build projects.&lt;/p&gt;
&lt;p&gt;I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.&lt;/p&gt;
&lt;p&gt;My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.&lt;/p&gt;
&lt;p&gt;That will test if you have really learned the concepts or not.&lt;/p&gt;
&lt;p&gt;You can click on any of the projects listed below to jump to that section of the article.&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/&amp;amp;ved=2ahUKEwikjqzp_tryAhW9ppUCHbDuBT8QtwJ6BAgkEAE&amp;amp;sqi=2&amp;amp;usg=AOvVaw16eIeKYPB8xzH6B1hMi2E6"&gt;Trending Javascript Projects for Frontend Developer on GitHub&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Intro to asynchrounous javascript: Promises - Async/await</title>
      <author>Hssan Bouzlima</author>
      <pubDate>Tue, 31 Aug 2021 09:53:36 +0000</pubDate>
      <link>https://dev.to/hssanbzlm/intro-to-asynchrounous-javascript-promises-async-await-2ii4</link>
      <guid>https://dev.to/hssanbzlm/intro-to-asynchrounous-javascript-promises-async-await-2ii4</guid>
      <description>&lt;p&gt;In javascript, the code is executed line by line while JS keeps track of the function being called with a call stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM:&lt;/strong&gt; 😡 &lt;/p&gt;

&lt;p&gt;As we mention, JS is single threaded, which means it can execute one commande at a time.&lt;/p&gt;

&lt;p&gt;So, with that being said, if a line of code takes time to be executed, all the rest of code won't execute till this line finish. Which is the case for external api call.&lt;/p&gt;

&lt;p&gt;Then, we want a way to run our code especially long tasks without blocking further code execution. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION:&lt;/strong&gt; 😃&lt;/p&gt;

&lt;p&gt;We execute long running task in background without blocking the rest of code until we get back a result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises:
&lt;/h3&gt;

&lt;p&gt;From MDN: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Promises are simply javascript objects returned the moment we execute asynchrounous task.  &lt;/p&gt;

&lt;p&gt;This object holds mainly three properties: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;onFulfilled:&lt;/em&gt;&lt;/strong&gt; It contains the function to be executed in case of returned data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;onRejected:&lt;/em&gt;&lt;/strong&gt; It contains the function to be executed in case of error &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;value:&lt;/em&gt;&lt;/strong&gt; Contains data returned by the asynchrounous task, that will be automatically in either onnFulfilled or onRejected function parameter. &lt;/p&gt;

&lt;p&gt;onFulfilled/onRejected functions get notified when data or error returned, then one of them get added to the microtask queue waiting till call stack become empty and the global execution finishes running to be able to run. &lt;/p&gt;

&lt;p&gt;OnFulfilled function is passed to the promise through &lt;em&gt;.then()&lt;/em&gt;, onRejected is passed through &lt;em&gt;.catch()&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;we note that &lt;em&gt;.then()&lt;/em&gt; can hold both of them :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;.then(onFulfill,onReject)&lt;/em&gt;   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-your-promise"&gt;
  &lt;/a&gt;
  CREATE YOUR PROMISE:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createdPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YAY!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FAIL!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;  

&lt;span class="nx"&gt;createdPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;//YAY!&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a promise through Promise constructor to wrap a function and make it returns a promise. This function has two callbacks functions: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;resolve:&lt;/em&gt;&lt;/strong&gt; executed when what we were doing succeed &lt;br&gt;
&lt;strong&gt;&lt;em&gt;reject:&lt;/em&gt;&lt;/strong&gt; when it fails &lt;/p&gt;

&lt;p&gt;You can simulate asynchronous execution above by adding settimout function.  &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#promise-execution"&gt;
  &lt;/a&gt;
  PROMISE EXECUTION:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runningFor300MiliSeconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runningFor200MiliSeconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;runningFor300MiliSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;futureData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;api-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// for 20 ms&lt;/span&gt;
&lt;span class="nx"&gt;futureData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;runningFor200Miliseconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here in the call stack we have &lt;em&gt;runningFor300MiliSeconds&lt;/em&gt; function running from &lt;em&gt;0 ms&lt;/em&gt; to &lt;em&gt;300 ms&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;From &lt;em&gt;301 ms&lt;/em&gt; fetch function is called and returns a promise object (futureData). &lt;/p&gt;

&lt;p&gt;From &lt;em&gt;302 ms&lt;/em&gt; &lt;em&gt;runningFor200MiliSeconds&lt;/em&gt; function is added to the &lt;em&gt;call stack&lt;/em&gt; and executed till &lt;em&gt;502 ms&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Meanwhile, in &lt;em&gt;321 ms&lt;/em&gt; futureData value is returned and &lt;em&gt;onFulfilled&lt;/em&gt; function is added to the &lt;em&gt;microtask queue&lt;/em&gt; waiting for the &lt;em&gt;call stack&lt;/em&gt; to become empty.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;502 ms&lt;/em&gt; &lt;em&gt;runningFor200MiliSeconds&lt;/em&gt; finished running, the call stack is empty then, &lt;em&gt;onFulfilled&lt;/em&gt; function get added to the &lt;em&gt;call stack&lt;/em&gt; and executed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  Async/Await:
&lt;/h3&gt;

&lt;p&gt;Async/await tries to simplify promises way of handling returned result, through elimating .then/.catch blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;futureData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;api-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;futureData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="c1"&gt;// this code is similar to&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;futureData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;api-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;futureData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#asynchrounous-javascript-"&gt;
  &lt;/a&gt;
  Asynchrounous Javascript :
&lt;/h3&gt;

&lt;p&gt;Promises and async/await changed the way js works from single threaded blocking execution to non-blocking execution with the help of event loop and microtask queue. &lt;/p&gt;

&lt;p&gt;Hope this quick article make it easier for you to dig deeper in asynchronous javascript concepts and methods. 👏&lt;/p&gt;

&lt;p&gt;✌️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hssanbzlm"&gt;Hssan Bouzlima Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/hssanbouzlima/"&gt;Hssan Bouzlima Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Developer Roadmap 2021</title>
      <author>Tips and Tricks</author>
      <pubDate>Tue, 31 Aug 2021 09:51:10 +0000</pubDate>
      <link>https://dev.to/csshacker/web-developer-roadmap-2021-39dg</link>
      <guid>https://dev.to/csshacker/web-developer-roadmap-2021-39dg</guid>
      <description>&lt;p&gt;&lt;br&gt;A web developer looking at some code on his computer screenHow to Become a Web Developer in 2Technology plays a huge role in our daily lives, from the simplest of apps to the most groundbreaking inventions. Every website or piece of software that we encounter has been built by a web developer—but what exactly is web development, and what do they do—all of this will be answered in this guide to how to become a web developer.&lt;br&gt;To the outside eye, it can seem like a complicated, confusing and somewhat inaccessible field. So, to shed some light on this fascinating industry, we’ve put together the ultimate introduction to web development and what it takes to become a fully-fledged web developer.&lt;br&gt;In this guide, we’ll go through the basics of web development in detail, and show you the essential skills and tools you’ll need to break into the industry. If you decide web development is for you, the next step is to start learning those essential skills, which you can do in this free, online short course designed for beginners.&lt;br&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/backend-web-developer-roadmap/&amp;amp;ved=2ahUKEwjOmpvK2NLyAhVJ7HMBHdogAs0QFnoECAwQAQ&amp;amp;usg=AOvVaw0wwwwOEMbJgRlh0aWNwnCj"&gt;Backend Developer Roadmap &lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Frontend Developer Roadmap &lt;/a&gt; &lt;/b&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Web Developer Roadmap 2021&lt;/a&gt; &lt;/b&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/web-designers-roadmap-2021/"&gt;Web Designer Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Sending Email in Laravel App Using Gmail Account</title>
      <author>Akeem Amusat</author>
      <pubDate>Tue, 31 Aug 2021 09:41:57 +0000</pubDate>
      <link>https://dev.to/aoamusat/sending-email-in-laravel-app-using-gmail-account-iaj</link>
      <guid>https://dev.to/aoamusat/sending-email-in-laravel-app-using-gmail-account-iaj</guid>
      <description>&lt;p&gt;Laravel framework made sending email very easy for developers using the &lt;code&gt;Mailable&lt;/code&gt; class. I will be using an existing Laravel 8 application. You can also follow the tutorial using other Laravel versions (6 or 7). Follow the steps below to configure your Laravel app for sending mail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-one-generate-app-password-on-google-account"&gt;
  &lt;/a&gt;
  Step one: generate app password on Google account
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://support.google.com/accounts/bin/answer/185833?hl=en"&gt;App password&lt;/a&gt; is required by your application to access Gmail account via SMTP or other protocol. To create the app password:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login into your &lt;a href="https://myaccount.google.com/"&gt;Google account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on the security tab
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XoynMLri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb4xxhzz9uzce3xdy8qd.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Enable 2FA&lt;/li&gt;
&lt;li&gt;Click on App passwords
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TTCkvxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lboltsr90evupctlx9pg.png" alt="image"&gt;
Select &lt;strong&gt;Mail&lt;/strong&gt; in the app select dropdown. For device, select others and give it the name you want.&lt;/li&gt;
&lt;li&gt;Click on generate
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NIyHlTvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj1jpqdluo86fpywnh5c.png" alt="image"&gt;
Copy the generated app password. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-two-update-your-application-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Step two: update your application &lt;code&gt;.env&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MAIL_DRIVER=smtp
MAIL_FROM_ADDRESS=user@gmail.com
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=user@gmail.com
MAIL_PASSWORD=App Password
MAIL_ENCRYPTION=tls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-three-send-the-email-using-the-laravel-builtin-raw-mail-endraw-facade"&gt;
  &lt;/a&gt;
  Step three: send the email using the Laravel built-in &lt;code&gt;Mail&lt;/code&gt; facade.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Routing\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Mail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/sendmail'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;Mail&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hi user, a new login into your account from the IP Address: '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MAIL_FROM_ADDRESS'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MAIL_FROM_NAME'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user@domain.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'User Name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about sending mail, adding attachments, sending mail using Laravel blade templates: visit the &lt;a href="https://laravel.com/docs/8.x/mail"&gt;Laravel Mail&lt;/a&gt; documentation for more details.&lt;br&gt;
Follow me for more of my articles, you can leave comments, suggestions, and reactions. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>Exploring Dart Collection Types : Part 1 — Lists
</title>
      <author>Motabar Javaid</author>
      <pubDate>Tue, 31 Aug 2021 09:08:41 +0000</pubDate>
      <link>https://dev.to/iizmotabar/exploring-dart-collection-types-part-1-lists-3ocj</link>
      <guid>https://dev.to/iizmotabar/exploring-dart-collection-types-part-1-lists-3ocj</guid>
      <description>&lt;p&gt;Collections in any programming language are fundamentals.It allows us to store, retrieve data in the form of a collection per say. Just like in any other programming lanaguage, Dart provides us with built-in Collection types including Lists, Set, Map and Queue and more.&lt;/p&gt;

&lt;p&gt;All the collection types are available with &lt;a href="https://api.dart.dev/stable/2.13.4/dart-collection/dart-collection-library.html"&gt;dart:collection&lt;/a&gt; package. One thing that is common between these collection types is that all of them implements an Iterable. An Iterable is just another object capable of returning its element in iterations or in easy words, one-by-one.&lt;/p&gt;

&lt;p&gt;We’ll go through each of the Collection one by one. Let’s start off with the probably the most common amongst all, The List Collection Type.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List:
&lt;/h1&gt;

&lt;p&gt;List, also known as an Array in some languages is simply is an ordered collection of objects which has a length. The list can be iterated through indices, starting off with the zero index and ending at length-1. To define a list in Dart, we enclose its elements with square brackets []. Let’s see that in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Apple'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Banana'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Strawberry'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pineapple'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;//We can also have a list having elements of different types.&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfDifferentTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Bag'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Mouse'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt; &lt;span class="o"&gt;];&lt;/span&gt; 

  &lt;span class="c1"&gt;//To print the list as a whole, we can do: &lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfFruits&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//Returns the whole list of fruits&lt;/span&gt;

  &lt;span class="c1"&gt;//Lets say we want to print some specific element from the list. For that, we can make use of the index as such:&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfDifferentTypes&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//Returns 'Bag'as its the first element in the list.&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want our List to be of specific types, we can restrict the element types using the angle brackets&amp;lt;&amp;gt; as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The list will only contain the elements of Integer type.&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfIntegers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// The list is restricted to only elements of boolean type.&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfBooleans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// We can also have a list of elements having different types by setting &lt;/span&gt;
  &lt;span class="c1"&gt;// its type to dynamic as such&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfDynamicElements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"String"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//We can still use the indices to get a specific element from the list&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfIntegers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;//Returns '5' .&lt;/span&gt;

 &lt;span class="c1"&gt;//To get last element from the list we can use the length method,&lt;/span&gt;
 &lt;span class="c1"&gt;// and then subtract 1 from it as follows:&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfDynamicElements&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;listOfDynamicElements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; 

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s get to the interesting part, We can not only create lists and iterate through them to get the element we want but we can also perform operations on it. Dart Lists offers a bunch of functions. Let’s go through them one by one:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reversed"&gt;
  &lt;/a&gt;
  reversed():
&lt;/h1&gt;

&lt;p&gt;Let’s start things off with the reverse() method. I remember, when I started learning Programming with an OG language like C, how complex it was just to reverse a list or an Array as I should say. Dart makes the process so much easier with its reverse() method. You just call it on a List and it returns a reversed version back to you. That simple. Let’s have a look at the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;//Declaring a list of integers&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfIntegers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//Reversing the list and storing it in a variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;reversedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfIntegers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reversed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//Let's print the reversed String&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reversedList&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//returns [9,8,7,6,5,4,3,2,1]&lt;/span&gt;



&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#shuffle"&gt;
  &lt;/a&gt;
  shuffle():
&lt;/h1&gt;

&lt;p&gt;The shuffle method like the name tells, shuffles a given list. The method takes an optional parameter where you can define how you want to shuffle the list. Bear in mind, since the Shuffle method does not returns anything, It manipulates the original List on which it is being called on. Let’s see the shuffle() method in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;//Declaring a list of integers&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Maisie'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Barack'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Bob'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

 &lt;span class="c1"&gt;//Shuffles the listOfNames List&lt;/span&gt;
  &lt;span class="n"&gt;listOfNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shuffle&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfNames&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// prints a new shuffled list everytime it is called &lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#sublist"&gt;
  &lt;/a&gt;
  subList():
&lt;/h1&gt;

&lt;p&gt;The subList() method returns a new list SubList from the List of elements on which it is called on. The subList() method takes in two parameters: start and end. The sublist contains elements starting from start (inclusive) and ends at ending index with that index being exclusive. Let’s dive into the code to see its magic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;footballClubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"FC Barcelona"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Real Madrid'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bayern Munich"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PSG"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Manchester City"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Juventus"&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//Returns the elements between from 0 index(inclding 0 index) to 3 (excluding element at index 3)&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;footballClubs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sublist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;//Returns ["FC Barcelona", "Real Madrid", "Bayern Munich"]&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#asmap"&gt;
  &lt;/a&gt;
  asMap():
&lt;/h1&gt;

&lt;p&gt;asMap() returns the Map(A key-value pair representation of data) - representation of the given String. In that Map, the indices serve as the keys and the values are the corresponding elements of the List. We can further call the getter methods on asMap().keys if we just want to get the keys or asMap().values if we want to only get the values. Let’s have a look at the method in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 

  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;footballClubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"FC Barcelona"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Real Madrid'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Bayern Munich"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PSG"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Manchester City"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Juventus"&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//If we want the whole map to be printed, we just call the asMap() function&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;footballClubs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asMap&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//prints the whole Map as: {0: FC Barcelona, 1: Real Madrid, 2: Bayern Munich, 3: PSG, 4: Manchester City, 5: Juventus}&lt;/span&gt;

  &lt;span class="c1"&gt;//To get just the keys or just the values,we call the corresponding getter as:&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;footballClubs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asMap&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns just the keys as: (0, 1, 2, 3, 4, 5)&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;footballClubs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asMap&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns just the values as:  (FC Barcelona, Real Madrid, Bayern Munich, PSG, Manchester City, Juventus)&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#fold"&gt;
  &lt;/a&gt;
  fold():
&lt;/h1&gt;

&lt;p&gt;The return value of fold() function is a single value. The value is determined by the function which is being performed with the fold() function. For instance, It can be used to get a sum of elements in a list as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Resultant value is: &lt;/span&gt;&lt;span class="si"&gt;${result}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns 17&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fold takes two parameters, the initialValue and a function. In this example, we iterate through the list with 5 being the initialValue and add up list elements into the initialValue so that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the first iteration, the element at Index 0 is 2, so 5+2 = 7 which now the new value of i.&lt;/li&gt;
&lt;li&gt;In the second iteration i+j, 7+4 = 11 =i;&lt;/li&gt;
&lt;li&gt;In the third of i+j, 11+6= 17 and there is no more element left in the list so the function evaluatation completes and it returns 17.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#isempty-amp-isnotempty"&gt;
  &lt;/a&gt;
  isEmpty() &amp;amp; isNotEmpty():
&lt;/h1&gt;

&lt;p&gt;isEmpty() and isNotEmpty() are two very important functions on Dart Lists which as their name suggests checks if a List is Empty or if a List is not empty respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isEmpty(): It returns true is the list is empty and false otherwise.&lt;/li&gt;
&lt;li&gt;isNotEmpty(): In case of isNotEmpty(), the situation is other way round, where is returns true in case of list having some elements and false otherwise.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[];&lt;/span&gt;

 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;anEmptyList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

 &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'A lie!'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'A nobel man indeed.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//prints 'A lie!' &lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anEmptyList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;//prints 'Am I a joke to you?'&lt;/span&gt;
 &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Am I a joke to you?'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;
 &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I see a man of virtue'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add"&gt;
  &lt;/a&gt;
  add():
&lt;/h1&gt;

&lt;p&gt;add() is the method that is used to add elements into the list. It takes in the element as a parameter and adds it up into the list on which it is called on as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[];&lt;/span&gt;

  &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//adds 1 to the empty listOfNumber List&lt;/span&gt;
  &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//adds 2 so the list becomes [1,2]&lt;/span&gt;
  &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//adds 3 so the list becomes [1,2,3]&lt;/span&gt;
  &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//adds 4, list becomes [1,2,3,4]&lt;/span&gt;
  &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//list is now [1,2,3,4,5]&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//prints [1,2,3,4,5]&lt;/span&gt;


&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
dart&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce():
&lt;/h1&gt;

&lt;p&gt;reduce() method works pretty much the same as the fold method. The only difference between the two is that fold() method has an initial value while the reduce method does not. Let’s see that in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// We call reduce on the listOfNumbers list and call fold, which multiplies &lt;/span&gt;
  &lt;span class="c1"&gt;// the elements within the list one by one and return a single value &lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;)=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// returns 120 as (1*2)*(2*3)*(6*4)*(24*5) = 120&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#any"&gt;
  &lt;/a&gt;
  any():
&lt;/h1&gt;

&lt;p&gt;any() is the method that takes in a function as a parameter and based on that function returns a boolean in the form or a true or a false. Let’s suppose we want to check if the list contain any negative number. We can use any() in that case as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//Checking if there is any negative number in the list at any index&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;any&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNegative&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// prints false as there is no negative number in the list&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every():
&lt;/h1&gt;

&lt;p&gt;every() works pretty much the same as any. The only difference is that any evaulates to a boolean value if even a element satisfies the condition but in case of every(), every element in the list has to satisfy the condition. Let’s see that in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
 &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//Checking if every element of the list is an even number&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;every&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEven&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnValue&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// prints false as there are odd numbers in the list aswell.&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#getrange"&gt;
  &lt;/a&gt;
  getRange():
&lt;/h1&gt;

&lt;p&gt;As the name suggests, the getRange method returns elements from the list which lie in the specific range. The range function takes in two parameters: start and end where start is inclusive and end is exclusive. Since the range function returns an iterable, we call toList() to typeCast the Iterable to a List as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Red'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Green'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Blue'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Yellow'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Violet'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Indigo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// getRange will only get the elements from index 1(including element at that index) to index 4 (while excluding element at index 4)&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// prints a list of [Green, Blue, Yellow]&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#replacerange"&gt;
  &lt;/a&gt;
  replaceRange():
&lt;/h1&gt;

&lt;p&gt;Need help updating an element within a specific range? The replaceRange() method got you covered. The method takes in 3 parameters, 2 of which are just like getRange() where its the start and end point of range while the third being the value that is to be replaced in the place of the desired element.The element that lies between the two ranges gets replaced. If there is no element withtin the two ranges, the element at start gets replaced. Let’s see that in an example as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Red'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Green'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Blue'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Yellow'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Violet'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Indigo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;//replace the element between range(3,4) with purple, and that is Yellow in this case so, yellow is replaced with Purple&lt;/span&gt;
  &lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replaceRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,[&lt;/span&gt;&lt;span class="s"&gt;'Purple'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt; 
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//prints [Red, Green, Blue, Purple, Orange, Violet, Indigo, Black]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#firstwhere"&gt;
  &lt;/a&gt;
  firstWhere():
&lt;/h1&gt;

&lt;p&gt;firstWhere() is the method that takes in a function as a paramater and returns the first element where the condition is satisfied as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Red'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Green'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Blue'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Yellow'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Violet'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Indigo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// returns the first element where the pattern matches for 'ang' and the list contains Orange that matches the pattern&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstWhere&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ang'&lt;/span&gt;&lt;span class="o"&gt;),),);&lt;/span&gt; &lt;span class="c1"&gt;//prints Orange as it satifies the condition&lt;/span&gt;


&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#first-amp-last"&gt;
  &lt;/a&gt;
  first() &amp;amp; last():
&lt;/h1&gt;

&lt;p&gt;Like the name speaks for itself, the first() method is used to get the first element from the list and the last() method returns the last element from the list. Let’s see that in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;listOfColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Red'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Green'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Blue'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Yellow'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Violet'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Indigo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;//Returns the first element from the list&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//returns 'Red'&lt;/span&gt;

  &lt;span class="c1"&gt;//returns the last element from the list&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfColors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 'Black'&lt;/span&gt;


&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for now Folks! Thanks for reading this article ❤️ Will soon be posting the next parts. Stay tuned!&lt;/p&gt;

&lt;p&gt;Feel free to post any queries or corrections you think are required ✔&lt;br&gt;
Do leave a feedback so I can improve on my content. Thankyou! 😃&lt;br&gt;
If you’re interested, here are some of my other here on &lt;a href="https://dev.to/iizmotabar/the-beauty-of-dart-string-methods-1nje"&gt;Dart String Methods&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>android</category>
      <category>programming</category>
    </item>
    <item>
      <title>Stats for all stories
❌10 LIES that COMPANIES tell about CYBERSECURITY</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 31 Aug 2021 08:59:49 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/stats-for-all-stories-10-lies-that-companies-tell-about-cybersecurity-nd1</link>
      <guid>https://dev.to/dotnetsafer/stats-for-all-stories-10-lies-that-companies-tell-about-cybersecurity-nd1</guid>
      <description>&lt;p&gt;How many times have we heard:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Our employees know about cibersecurity” 😎&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or better yet…&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“We are a small company, they will not hack us” 🤓&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tell me &lt;strong&gt;HOW MANY TIMES??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other question I ask myself is:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-many-companies-go-bankrupt-after-a-cyber-attack-wasnt-it-that-they-had-everything-under-control"&gt;
  &lt;/a&gt;
  Why do many companies go bankrupt after a cyber attack? Wasn’t it that they had “everything under control”? 🤔
&lt;/h2&gt;

&lt;p&gt;These are one of the few &lt;strong&gt;lies&lt;/strong&gt; that companies tell about cybersecurity. These lies are great for self-delusion and great for cybercriminals.&lt;/p&gt;

&lt;p&gt;Cyber attacks are nothing new and with the arrival of the pandemic they have increased a lot. The reason for this is simple: &lt;strong&gt;Businesses have gone the digitization path with outdated security measures.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another reason is that although it has been more than a year and a half since the beginning of the pandemic, many employees prefer to continue telecommuting while the company continues to invest the same &lt;strong&gt;OR LESS&lt;/strong&gt; in its cybersecurity plan despite being an easier target for an attacker.&lt;/p&gt;

&lt;p&gt;The severity is so great that according to data from Sophos, one of the world’s leading cybersecurity companies and collected by the startup NUUBB, specialized in cloud services for companies, shows the &lt;strong&gt;top 10 reasons why companies do not invest in cybersecurity.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-are-a-small-company-i-dont-think-we-are-the-target-of-a-hacker"&gt;
  &lt;/a&gt;
  We are a small company, I don’t think we are the target of a Hacker🤓
&lt;/h2&gt;

&lt;p&gt;This is the &lt;strong&gt;first lie&lt;/strong&gt; that companies tell to deceive themselves. Most of the organizations that have been victims of cyberattacks are precisely because they believe that they are not “attractive” to an attacker. The reality is that &lt;strong&gt;ANY&lt;/strong&gt; company (both large and small) with which it has a minimum of digital presence, is already a &lt;strong&gt;good target&lt;/strong&gt; for a cybercriminal.&lt;/p&gt;

&lt;p&gt;Another reason is that most small business &lt;strong&gt;cyberattacks are not carried out by professional hackers&lt;/strong&gt;, but by “opportunists” looking for easy prey, such as small companies that have a low cybersecurity investment believing that &lt;strong&gt;they are not attractive to a cybercriminal.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-dont-need-advanced-security-technologies-installed-everywhere"&gt;
  &lt;/a&gt;
  We don’t need advanced security technologies installed everywhere 🤓
&lt;/h2&gt;

&lt;p&gt;Many IT teams still believe that security software is more than enough to stop attacks and they don’t need security for their servers. The reality is that the list of attack techniques that try to avoid detection by IT security teams is growing. Some of the clearest examples are &lt;strong&gt;social engineering, memory injected malware, compressed malicious code&lt;/strong&gt; or &lt;strong&gt;“fileless” malware attacks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another bad habit is to leave the servers unprotected. The reality of this is that &lt;strong&gt;servers are the main target&lt;/strong&gt; of cyber attackers, since it would simply be enough for them to steal access credentials with social engineering. And this doesn’t just apply to Windows, in fact, cybercriminals often install backdoors on Linux machines to use as safe havens and maintain access to a target’s network.&lt;/p&gt;

&lt;p&gt;For all these reasons, &lt;strong&gt;cloud experts&lt;/strong&gt; continue to insist that, even having security policies, an antivirus, a firewall and a 24/7 operations center … the probability that a cyber attacker will find a way to hack the system, &lt;strong&gt;is high.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-have-very-good-security-policies"&gt;
  &lt;/a&gt;
  We have very good security policies🤓
&lt;/h2&gt;

&lt;p&gt;Clearly a company &lt;strong&gt;must have&lt;/strong&gt; security and user policies. But they must be reviewed and updated every time changes are made or new devices connected to the network are added. The best way to verify these policies, experts say, is to test them using control sessions, pentesting tests, and tests of disaster recovery plans.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#servers-can-be-protected-by-changing-the-service-ports-and-with-double-authentication"&gt;
  &lt;/a&gt;
  Servers can be protected by changing the service ports and with double authentication 🤓
&lt;/h2&gt;

&lt;p&gt;Yes, we know that the &lt;strong&gt;RDP&lt;/strong&gt; default port is &lt;strong&gt;3389&lt;/strong&gt;, that the &lt;strong&gt;SSH&lt;/strong&gt; port is &lt;strong&gt;22&lt;/strong&gt; and that the &lt;strong&gt;SMB&lt;/strong&gt; port is &lt;strong&gt;445&lt;/strong&gt;. At first glance, changing that default port seems like a VERY good way to prevent attackers from finding open ports, But reality is not like that.&lt;/p&gt;

&lt;p&gt;Computer or network scans will identify any open services, regardless of port. Let’s see an example 👇&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;strong&gt;nmap&lt;/strong&gt; tool to scan a computer on our network to see what it returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nmap &lt;span class="nt"&gt;-sS&lt;/span&gt; 192.168.1.200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wo3wnvxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/690/1%2A72Kff823KOWJemxgtxuEEg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wo3wnvxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/690/1%2A72Kff823KOWJemxgtxuEEg.jpeg" alt="nmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that in 40 seconds, &lt;strong&gt;nmap&lt;/strong&gt; has scanned the entire range of ports, returning only the open ones.&lt;/p&gt;

&lt;p&gt;This change the default ports, it is only a waste of time since the level of protection it offers is null.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-block-ips-from-russia-china-and-north-korea-that-seem-dangerous"&gt;
  &lt;/a&gt;
  We block IPs from Russia, China and North Korea that seem dangerous 🤓
&lt;/h2&gt;

&lt;p&gt;Have you heard of &lt;strong&gt;Proxy&lt;/strong&gt; or &lt;strong&gt;VPN?&lt;/strong&gt; Their main function is to avoid the direct connection of the user with the server, that is, they allow to &lt;strong&gt;hide the user’s IP&lt;/strong&gt; so that the server to which they are connecting cannot know it.&lt;/p&gt;

&lt;p&gt;This would allow an attacker from Russia (for example) to connect to a VPN by obtaining an IP address from another country, so blocking would no longer do any good.&lt;/p&gt;

&lt;p&gt;Besides, &lt;strong&gt;blocking IPs from some countries is unlikely to cause any harm&lt;/strong&gt;, but it could give a false sense of security. Cybercriminals can be found anywhere in the world, with access points that include the US, the Netherlands, and the rest of Europe.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-have-updated-backups-in-case-of-ransomware"&gt;
  &lt;/a&gt;
  We have updated backups in case of Ransomware 🤓
&lt;/h2&gt;

&lt;p&gt;It is clear that backups are very important for the company and above all update them on a daily basis. The problem comes when in most companies, those backup copies are connected to the network. With that they are vulnerable to any Ransomware that can erase or encrypt them. In this case, from &lt;strong&gt;Dotnetsafer&lt;/strong&gt; we always recommend following the &lt;strong&gt;3:2:1 SYSTEM&lt;/strong&gt; 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; copies of everything&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;2&lt;/strong&gt; different systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of which &lt;strong&gt;1&lt;/strong&gt; is always disconnected from the network&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#our-workers-know-about-security"&gt;
  &lt;/a&gt;
  Our workers know about security🤓
&lt;/h2&gt;

&lt;p&gt;According to the State of Ransomware 2021, &lt;strong&gt;22% of organizations&lt;/strong&gt; believe they will be affected by ransomware in the next 12 months because it is difficult to prevent end users from compromising security.&lt;/p&gt;

&lt;p&gt;The easiest techniques are &lt;strong&gt;phishing emails and social engineering&lt;/strong&gt;. Many times these messages are handwritten and addressed to the right person.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Will a worker really know how to detect that message among the thousands that can reach him per month? 🤔&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#we-have-recovery-systems-in-case-of-ransomware"&gt;
  &lt;/a&gt;
  We have recovery systems in case of Ransomware 🤓
&lt;/h2&gt;

&lt;p&gt;Attackers today &lt;strong&gt;make far fewer mistakes&lt;/strong&gt; and the encryption process has improved, so relying on experts to find a loophole that can undo the damage is extremely rare. Automatic backups such as Windows Volume Shadow Copies are also removed by most modern ransomware and &lt;strong&gt;overwrite the original data stored on the disk&lt;/strong&gt;, making recovery impossible beyond ransom payment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-can-pay-the-ransom-of-a-ransomware"&gt;
  &lt;/a&gt;
  We can pay the ransom of a Ransomware 🤓
&lt;/h2&gt;

&lt;p&gt;Other data emerging from the 2021 ransomware state, a ransom-paying organization recovers on average around 65% of its data. A meager 8% recovered all their data and 29% recovered less than half. Therefore, paying the ransom, even when it seems like the easiest option and is covered by the cyber insurance policy, is not an easy solution to recover. Similarly, restoring data is only part of the recovery process. In most cases, ransomware &lt;strong&gt;completely disables&lt;/strong&gt; computers, and software and systems must be rebuilt from scratch before data can be restored.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-we-survive-a-ransomware-we-will-be-fine"&gt;
  &lt;/a&gt;
  If we survive a Ransomware we will be fine 🤓
&lt;/h2&gt;

&lt;p&gt;Ransomware is just the point where criminals want the company to know that they are there and what they have done. Adversaries have likely been on a network for days, before &lt;strong&gt;launching ransomware, exploring, disabling or deleting backups, finding machines&lt;/strong&gt; with high-value data or applications to target for encryption, &lt;strong&gt;deleting information&lt;/strong&gt;, and &lt;strong&gt;installing payloads&lt;/strong&gt;. additional tools such as rear doors. Maintaining a presence on the victim’s networks allows attackers to launch a second attack if they choose.&lt;/p&gt;




&lt;p&gt;In the words of &lt;strong&gt;Nicolas Blasyk&lt;/strong&gt;, CEO of &lt;strong&gt;NUUBB&lt;/strong&gt;, “it is very important to be clear that we live with cybercriminals, becoming more present and stronger after the pandemic, taking advantage of those security gaps that SMEs have suffered due to the forced acceleration of digitization. At NuuBB We believe it is essential to raise the awareness of employees about the types of attacks they may suffer, since some of them we can avoid ourselves, such as phishing, malicious emails that most of the time we do not realize, we click on the link and we fall into the trap. One of the best solutions to prevent these attacks that we always recommend is the outsourced Backup service with data recovery “.&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
      <category>dotnet</category>
      <category>ransomware</category>
    </item>
  </channel>
</rss>
