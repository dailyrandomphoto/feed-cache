<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Controlled vs Uncontrolled Components</title>
      <author>Katelyn</author>
      <pubDate>Tue, 23 Nov 2021 23:49:22 +0000</pubDate>
      <link>https://dev.to/katelynjewel/controlled-vs-uncontrolled-components-44e0</link>
      <guid>https://dev.to/katelynjewel/controlled-vs-uncontrolled-components-44e0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-controlled-and-uncontrolled-components-in-react"&gt;
  &lt;/a&gt;
  What is the difference between controlled and uncontrolled components in react?
&lt;/h2&gt;

&lt;p&gt;To put simply, controlled components have their data being handled with a react component whereas an uncontrolled component's data is being handled with the DOM itself. Let's dig into this answer a bit more though starting at the basics and including a few visual examples. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-controlled-and-uncontrolled-components"&gt;
  &lt;/a&gt;
  What are controlled and uncontrolled components?
&lt;/h3&gt;

&lt;p&gt;Form elements are rendered with HTML within React components where data is being accessed and manipulate. &lt;em&gt;When we are discussing uncontrolled and controlled components these are terms that are specifically discussing the way in which the form created is handling and accessing that said data.&lt;/em&gt; The data handling can be done a few different ways but is commonly seen using typed elements like, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; or selected elements such as: &lt;code&gt;&amp;lt;checkbox&amp;gt;, &amp;lt;select&amp;gt;, &amp;lt;radiobutton&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzSwhnMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xp30fh9v4sjfj1kv45w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzSwhnMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xp30fh9v4sjfj1kv45w.png" alt="Visual chart with differences between controlled and uncontrolled components" width="745" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controlled-components"&gt;
  &lt;/a&gt;
  Controlled Components
&lt;/h3&gt;

&lt;p&gt;As we stated earlier controlled components handle their updated data using use state. This would look like setting the value for the input form element to &lt;code&gt;this.state.value&lt;/code&gt; or to a use state. When setting these element's value to use state, we have wrapped up the control for both the rendering of the form as well as future input of the form into the same React component. Another way to think of is is that the React state will always act as "the source of truth". As users interact with the form, handleChange will run on every keystroke or interaction - which then updates the React state. &lt;/p&gt;

&lt;p&gt;The React documentation acknowledges that writing out controlled components can feel banal since you do need to create an event handler for each way the data can change while also containing that in the React component use state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5y8UeyGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2sxyth0k3icozju567j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5y8UeyGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2sxyth0k3icozju567j.jpeg" alt="controlled vs uncontrolled forms" width="460" height="710"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uncontrolled-components"&gt;
  &lt;/a&gt;
  Uncontrolled Components
&lt;/h3&gt;

&lt;p&gt;A helpful tidbit to remember about uncontrolled components is that the part of the reason it's uncontrolled is because the value is set by the user and not by the program. With this in mind the input: &lt;code&gt;&amp;lt;input type="file" /&amp;gt;&lt;/code&gt; will always be uncontrolled without the value being set. This will render the for element's, where the form element's data is handled by the DOM. In this way it functions similarly to traditional HTML code. &lt;/p&gt;

&lt;p&gt;Due to uncontrolled components keeping their "source of truth" in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tdJTigw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et4eofywmwcdzb1k0d5o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tdJTigw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et4eofywmwcdzb1k0d5o.jpeg" alt="controll vs uncontroll" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWptUHTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj5gv0ed3xiylid1yblr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWptUHTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj5gv0ed3xiylid1yblr.png" alt="kyle's version" width="836" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary difference between a controlled component vs an uncontrolled component is related to how they handle their value. Uncontrolled components pass down the value through props. In contrast, controlled components use state to handle the value internally. For most use cases, controlled components are the best option in code. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>forms</category>
    </item>
    <item>
      <title>Build an Image Classification API Using Django Rest Framework.</title>
      <author>paulsaul621</author>
      <pubDate>Tue, 23 Nov 2021 23:43:26 +0000</pubDate>
      <link>https://dev.to/paulwababu/build-an-image-classification-api-using-django-rest-framework-4ned</link>
      <guid>https://dev.to/paulwababu/build-an-image-classification-api-using-django-rest-framework-4ned</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview:
&lt;/h1&gt;

&lt;p&gt;Machine Learning (ML) and data science applications are in high demand. When ML algorithms offer information before it is known, the benefits for business are significant. Integrating machine learning algorithms for inference into production systems is a technological barrier hence the need for deploying ML models as API'S. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this short article, we implement AI based models to detect COVID-19 in Chest X-rays and CT Scans using four Deep Learning Algorithms: VGG16, ResNet50, InceptionV3 and Xception. Note, we shall focus mainly on implementing the api and not the model creation. &lt;/p&gt;

&lt;p&gt;To test my live endpoint, send a POST request to the following URL with an x-ray image appended to the body of the request. You will get the following sample output if request was successful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://alienx.tech/api/v1/xray # for the x-ray images
https://alienx.tech/api/v1/ct # for CT scans
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "status": "success",
    "data": {
        "asset_id": "3e978ba830fb266978af20f2bf816f5e",
        "public_id": "vacpxfywfohgfprwhrso",
        "version": 1637699139,
        "version_id": "c9017c7d3b28ce797edefec0b0d72796",
        "signature": "e9c632b832e773cbbcb8906f93aba1d9e859d4bf",
        "width": 1205,
        "height": 1395,
        "format": "png",
        "resource_type": "image",
        "created_at": "2021-11-23T20:25:39Z",
        "tags": [],
        "bytes": 1325222,
        "type": "upload",
        "etag": "86005d3c34202b10949db5569570cd16",
        "placeholder": false,
        "url": "http://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
        "secure_url": "https://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
        "original_filename": "covid-19-pneumonia-22",
        "api_key": "138196782467569"
    },
    "url": "http://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
    "xception_chest_pred": "100.00% COVID",
    "inception_chest_pred": "100.00% COVID",
    "vgg_chest_pred": "100.00% COVID",
    "resnet_chest_pred": "100.00% COVID"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ml-model-building"&gt;
  &lt;/a&gt;
  ML Model Building
&lt;/h2&gt;

&lt;p&gt;The dataset for the project was gathered from two open source Github repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chest X-ray images (1000 images) were obtained from: &lt;a href="https://github.com/ieee8023/covid-chestxray-dataset"&gt;https://github.com/ieee8023/covid-chestxray-dataset&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CT Scan images (750 images) were obtained from: &lt;a href="https://github.com/UCSD-AI4H/COVID-CT/tree/master/Data-split"&gt;https://github.com/UCSD-AI4H/COVID-CT/tree/master/Data-split&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Four algorithms: VGG16, ResNet50, InceptionV3 and Xception were trained separately on Chest X-rays and CT Scans, giving us a total of 8 deep learning models. 80% of the images were used for training the models and the remaining 20% for testing the accuracy of the models.&lt;/p&gt;

&lt;p&gt;The code for training the 8 models is available on my github &lt;a href="https://github.com/paulwababu/Django-Covid-19-Detector-API"&gt;repository&lt;/a&gt;. The model for the project can be found on the following google &lt;a href="https://drive.google.com/file/d/1dA-rdmDmCGa3xxW5KpfLJdo7M54lPcQq/view"&gt;drive&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-the-model-into-an-restful-api"&gt;
  &lt;/a&gt;
  Turning the Model into an RESTFUL API
&lt;/h2&gt;

&lt;p&gt;Following Python best practices, we will create a virtual environment for our project, and install the required packages.&lt;/p&gt;

&lt;p&gt;First, create the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir djangoapp
$ cd djangoapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create a virtual environment and install the required packages.&lt;/p&gt;

&lt;p&gt;For macOS and Unix systems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ source myenv/bin/activate
(myenv) $ pip install django requests djangorestframework tensorflow cloudinary opencv-python

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ myenv\Scripts\activate
(myenv) $ pip install django requests djangorestframework tensorflow cloudinary opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-your-django-application"&gt;
  &lt;/a&gt;
  Setting Up Your Django Application
&lt;/h2&gt;

&lt;p&gt;First, navigate to the directory djangoapp we created and establish a Django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ django-admin startproject mainapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will auto-generate some files for your project skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mainapp/
    manage.py
    mainapp/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, navigate to the directory you just created (make sure you are in the same directory as manage.py) and create your app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py startapp monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the mainapp/settings.py file, look for the following line and add the app we just created above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',#new line
    'monitor', #new line
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you are in the monitor directory then create a new directory called templates and a new file called urls.py. Your directory structure of monitor application should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
    templates/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure your mainapp/urls.py file, add our monitor app URL to include the URLs we shall create next on the monitor app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    #path('admin/', admin.site.urls),
    path('', include('monitor.urls')),#monitor app url
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, on the monitor/urls.py file, add our website there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from .views import *

urlpatterns = [
    path('api/upload/xray', UploadView.as_view(), name = 'prediction'),
    path('api/upload/ct', CTUploadView.as_view(), name = 'ct_prediction'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create another directory to store our machine learning model. I’ll also add the dataset to the project for those who want to achieve the whole dataset. (It is not compulsory to create a data folder.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv)$ mkdir ml
(venv)$ mkdir ml/models
(venv)$ mkdir ml/data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to tell Django where our machine learning model is located and also add our cloudinary configuration there. Add these lines to settings.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import cloudinary

cloudinary.config( 
  cloud_name = "prometheusapi", 
  api_key = "GETYOURAPIKEY", 
  api_secret = "GETYOURAPIKEY" 
)

MODELS = os.path.join(BASE_DIR, 'ml/models')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-keras-model-through-appspy"&gt;
  &lt;/a&gt;
  Load Keras Model through apps.py
&lt;/h2&gt;

&lt;p&gt;Load your machine learning models in apps.py so that when the application starts, the trained model is loaded only once. Otherwise, the trained model is loaded each time an endpoint is called, and then the response time will be slower. &lt;/p&gt;

&lt;p&gt;Let’s update apps.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
from django.apps import AppConfig
from django.conf import settings
from tensorflow.keras.models import load_model
from tensorflow import keras


class ResNetModelConfig(AppConfig):
    name = 'resnetAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "resnet_chest.h5")
    model = keras.models.load_model(MODEL_FILE)

class ResNetCTModelConfig(AppConfig):
    name = 'resnetCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "resnet_ct.h5")
    model = keras.models.load_model(MODEL_FILE)

class VGGModelConfig(AppConfig):
    name = 'vggAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "vgg_chest.h5")
    model = keras.models.load_model(MODEL_FILE)

class VGGCTModelConfig(AppConfig):
    name = 'vggCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "vgg_ct.h5")
    model = keras.models.load_model(MODEL_FILE)    

class InceptionModelConfig(AppConfig):
    name = 'inceptionv3_chestAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "inceptionv3_chest.h5")    
    model = keras.models.load_model(MODEL_FILE)

class InceptionCTModelConfig(AppConfig):
    name = 'inceptionv3_chestCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "inception_ct.h5")    
    model = keras.models.load_model(MODEL_FILE)    

class ExceptionModelConfig(AppConfig):
    name = 'xception_chestAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "xception_chest.h5")    
    model = keras.models.load_model(MODEL_FILE)

class ExceptionCTModelConfig(AppConfig):
    name = 'xception_chestCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "xception_ct.h5")    
    model = keras.models.load_model(MODEL_FILE)    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-viewspy"&gt;
  &lt;/a&gt;
  Edit views.py
&lt;/h2&gt;

&lt;p&gt;The last step is to update views.py. The views will be mainly responsible for two tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process incoming POST requests.&lt;/li&gt;
&lt;li&gt;Make a prediction with the incoming data and give the result as a Response.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import urllib
from django.shortcuts import render
import numpy as np
from .apps import *
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, JSONParser
import cloudinary.uploader
import matplotlib.pyplot as plt
import cv2

# Create your views here.
class UploadView(APIView):
    parser_classes = (
        MultiPartParser,
        JSONParser,
    )

    @staticmethod
    def post(request):
        file = request.data.get('picture')
        upload_data = cloudinary.uploader.upload(file)
        #print(upload_data)
        img = upload_data['url']


        #load models
        resnet_chest = ResNetModelConfig.model
        vgg_chest = VGGModelConfig.model
        inception_chest = InceptionModelConfig.model
        xception_chest = ExceptionModelConfig.model

        req = urllib.request.urlopen(img)
        arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
        image = cv2.imdecode(arr, -1) # 'Load it as it is'
        #image = cv2.imread('upload_chest.jpg') # read file 
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # arrange format as per keras
        image = cv2.resize(image,(224,224))
        image = np.array(image) / 255
        image = np.expand_dims(image, axis=0)

        resnet_pred = resnet_chest.predict(image)
        probability = resnet_pred[0]
        #print("Resnet Predictions:")
        if probability[0] &amp;gt; 0.5:
            resnet_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            resnet_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(resnet_chest_pred)

        vgg_pred = vgg_chest.predict(image)
        probability = vgg_pred[0]
        #print("VGG Predictions:")
        if probability[0] &amp;gt; 0.5:
            vgg_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            vgg_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(vgg_chest_pred)

        inception_pred = inception_chest.predict(image)
        probability = inception_pred[0]
        #print("Inception Predictions:")
        if probability[0] &amp;gt; 0.5:
            inception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            inception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(inception_chest_pred)

        xception_pred = xception_chest.predict(image)
        probability = xception_pred[0]
        #print("Xception Predictions:")
        if probability[0] &amp;gt; 0.5:
            xception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            xception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(xception_chest_pred)
        return Response({
            'status': 'success',
            'data': upload_data,
            'url':img,
            'xception_chest_pred':xception_chest_pred,
            'inception_chest_pred':inception_chest_pred,
            'vgg_chest_pred':vgg_chest_pred,
            'resnet_chest_pred':resnet_chest_pred,
        }, status=201)


class CTUploadView(APIView):
    parser_classes = (
        MultiPartParser,
        JSONParser,
    )

    @staticmethod
    def post(request):
        file = request.data.get('picture')
        upload_data = cloudinary.uploader.upload(file)
        #print(upload_data)
        img = upload_data['url']


        #load models
        resnet_chest = ResNetCTModelConfig.model
        vgg_chest = VGGCTModelConfig.model
        inception_chest = InceptionCTModelConfig.model
        xception_chest = ExceptionCTModelConfig.model

        req = urllib.request.urlopen(img)
        arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
        image = cv2.imdecode(arr, -1) # 'Load it as it is'
        #image = cv2.imread('upload_chest.jpg') # read file 
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # arrange format as per keras
        image = cv2.resize(image,(224,224))
        image = np.array(image) / 255
        image = np.expand_dims(image, axis=0)

        resnet_pred = resnet_chest.predict(image)
        probability = resnet_pred[0]
        #print("Resnet Predictions:")
        if probability[0] &amp;gt; 0.5:
            resnet_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            resnet_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(resnet_chest_pred)

        vgg_pred = vgg_chest.predict(image)
        probability = vgg_pred[0]
        #print("VGG Predictions:")
        if probability[0] &amp;gt; 0.5:
            vgg_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            vgg_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(vgg_chest_pred)

        inception_pred = inception_chest.predict(image)
        probability = inception_pred[0]
        #print("Inception Predictions:")
        if probability[0] &amp;gt; 0.5:
            inception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            inception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(inception_chest_pred)

        xception_pred = xception_chest.predict(image)
        probability = xception_pred[0]
        #print("Xception Predictions:")
        if probability[0] &amp;gt; 0.5:
            xception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            xception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(xception_chest_pred)
        return Response({
            'status': 'success',
            'data': upload_data,
            'url':img,
            'xceptionCT_chest_pred':xception_chest_pred,
            'inceptionCT_chest_pred':inception_chest_pred,
            'vggCT_chest_pred':vgg_chest_pred,
            'resnetCT_chest_pred':resnet_chest_pred,
        }, status=201)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-api"&gt;
  &lt;/a&gt;
  Testing our API
&lt;/h2&gt;

&lt;p&gt;Create the necessary migrations then run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py makemigrations
(myenv) $ python manage.py migrate
(myenv) $ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fire up Postman and make a POST request with an image appended to the body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YvOpOfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637710271371/fsrLdJHEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YvOpOfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637710271371/fsrLdJHEA.png" alt="polo.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-staying-tuned"&gt;
  &lt;/a&gt;
  Thanks for staying tuned!
&lt;/h3&gt;

</description>
      <category>machinelearning</category>
      <category>api</category>
      <category>django</category>
      <category>ai</category>
    </item>
    <item>
      <title>A Guide to Stacks and Stages on AWS</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 23 Nov 2021 22:25:53 +0000</pubDate>
      <link>https://dev.to/tinystacks/a-guide-to-stacks-and-stages-on-aws-44fh</link>
      <guid>https://dev.to/tinystacks/a-guide-to-stacks-and-stages-on-aws-44fh</guid>
      <description>&lt;p&gt;Article by Jay Allen&lt;/p&gt;

&lt;p&gt;Learning AWS is complicated enough. But learning AWS is made more challenging when you're also still grappling with some of the major concepts of DevOps software deployments. In this article, I discuss two key concepts: stacks and stages. I also address how you can manage stacks and stages in AWS, along with other factors you need to consider when managing them in practice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks"&gt;
  &lt;/a&gt;
  Stacks
&lt;/h2&gt;

&lt;p&gt;In simplest terms, a &lt;strong&gt;stack&lt;/strong&gt; is a unit of application deployment. Using stacks, developers can organize all of the resources required by an application or an application component as a single unit. This enables devs to deploy, tear down, and re-deploy their applications at will. &lt;/p&gt;

&lt;p&gt;Stacks can be stood up manually. However, it's better on cloud platforms to program the creation of your stack - e.g., using a scripting language such as Python. The ability to script stack deployments is known as Infrastructure as Code and is a hallmark of cloud computing platforms. Scripting your application deployments and bundling them into stacks reaps multiple benefits: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once your stack code is fully debugged, you can deploy your application repeatably and reliably. Scripting stack deployments eliminates the errors that inevitably occur in manual deployments. &lt;/li&gt;
&lt;li&gt;You can tear down stacks that aren't being used with a single script or command. This saves your team and company money. &lt;/li&gt;
&lt;li&gt;You can parameterize stacks to deploy different resources or use different configuration values. This lets you deploy multiple versions of your application. (Remember this - it'll be important soon!) &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stages"&gt;
  &lt;/a&gt;
  Stages
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;stage&lt;/strong&gt;, by contrast, is a deployment of your application for a particular purpose. With stages, you can deploy your application multiple times to vet its functionality with an increasingly larger number of users. Typical stages can include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev for developer coding and experimentation (only available to your dev team)&lt;/li&gt;
&lt;li&gt;Test for running unit tests (available to dev, test, and internal stakeholders)&lt;/li&gt;
&lt;li&gt;Stage for user acceptance testing (available to external alpha/beta testers) &lt;/li&gt;
&lt;li&gt;Prod for your publicly facing application (available to all customers) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stages are part of  &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;CI/CD pipelines, which I've discussed in detail before&lt;/a&gt;. By constructing your application as a pipeline, you can "flow" app changes from one stage to the next as you test them in each environment. This lets you vet changes multiple times in limited, controlled environments before releasing them to your users. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-and-stages-better-together"&gt;
  &lt;/a&gt;
  Stacks and Stages: Better Together
&lt;/h2&gt;

&lt;p&gt;Stacks and stages are a powerful one-two combination. With a properly parameterized stack, you can create whatever stages your application needs. Because you create each stage using the same source code, each stage's stack will contain the same resources and perform the same way as every other stage. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-on-aws"&gt;
  &lt;/a&gt;
  Stacks on AWS
&lt;/h2&gt;

&lt;p&gt;AWS fully embraces Infrastructure as Code. Nearly anything you can accomplish manually with the AWS Management Console can also be created programmatically. &lt;/p&gt;

&lt;p&gt;On AWS, you have several options for creating stacks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cloudformation"&gt;
  &lt;/a&gt;
  AWS CloudFormation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt;  is the official "AWS way" of creating stacks. Using CloudFormation, you can write templates using either JSON or YAML that specify which AWS resources your stack contains. &lt;/p&gt;

&lt;p&gt;CloudFormation isn't an imperative programming language like Python. Instead, it uses a declarative format for creating resources. This simplifies creating your infrastructure, as you don't need to be an expert in a particular programming language to stand up resources. Many CloudFormation templates can be constructed by making small tweaks to publicly available templates. ( &lt;a href="https://aws.amazon.com/cloudformation/resources/templates/"&gt;AWS itself hosts many such sample templates and snippets&lt;/a&gt; .)&lt;/p&gt;

&lt;p&gt;A key feature of CloudFormation is its support for parameters. Rather than hard-code values, you can declare them as parameters and supply them at run time when you create the stack in AWS. For example, the template snippet below (taken from  &lt;a href="https://s3.us-west-2.amazonaws.com/cloudformation-templates-us-west-2/EC2InstanceWithSecurityGroupSample.template"&gt;AWS's sample template for deploying Amazon EC2 instances&lt;/a&gt;) defines the parameters &lt;strong&gt;KeyPair&lt;/strong&gt;, &lt;strong&gt;InstanceType&lt;/strong&gt;, and &lt;strong&gt;SSHLocation&lt;/strong&gt;. By parameterizing these values, the same template can be used multiple times to create different EC2 instances of different sizes, in different networks, and with different security credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-6wGHKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637595094509/dlsM-KV5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-6wGHKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637595094509/dlsM-KV5d.png" alt="image.png" width="654" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The great thing about CloudFormation templates is that they make stacks both easy to turn on and easy to turn off. Deleting an instance of a CloudFormation template automatically cleans up the entire stack and deactivates all of its resources. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-favorite-programming-language"&gt;
  &lt;/a&gt;
  Your Favorite Programming Language
&lt;/h3&gt;

&lt;p&gt;Not everyone wants to learn a new declarative language to create stacks. And some stacks might require the fine-grained control that an  &lt;a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin"&gt;imperative programming language&lt;/a&gt; offers. &lt;/p&gt;

&lt;p&gt;Fortunately,  &lt;a href="https://aws.amazon.com/tools/"&gt;AWS also produces software development kits (SDKs)&lt;/a&gt; for a variety of languages. Developers can use Python Go, Node.js, .NET, and a variety of other languages to automate the creation and deletion of their stack. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is Better?
&lt;/h3&gt;

&lt;p&gt;CloudFormation's major advantage is simplicity. Particularly, CloudFormation makes deleting stacks a breeze. By contrast, with a programming language, you need to program the deletion of every resource. &lt;/p&gt;

&lt;p&gt;However, using a programming language for stack management offers much greater control than CloudFormation. For example, let's say that a resource fails to create. This can happen sometimes, not because you did anything wrong, but due to an underlying error in AWS, or a lack of available resources in your target region. &lt;/p&gt;

&lt;p&gt;Using CloudFormation, a failed resource will result in the stack stopping and everything you've created rolling back. Using a programming language, however, you could detect the failure and handle it more gracefully. For example, you may decide to retry the operation multiple times &lt;a href="https://aws.amazon.com/builders-library/timeouts-retries-and-backoff-with-jitter/"&gt;using incremental backoff&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Your choice between CloudFormation and programming language may also be affected by feature parity. In the past, some AWS teams have released features with SDK support but no initial CloudFormation support. &lt;/p&gt;

&lt;p&gt;Many of these issues with CloudFormation can be addressed using a hybrid CloudFormation/code approach.  &lt;a href="https://www.alexdebrie.com/posts/cloudformation-custom-resources/"&gt;Using CloudFormation custom resources&lt;/a&gt;, you can run code in AWS Lambda that orchestrates the creation of both AWS and non-AWS resources. You can also perform other programming-related tasks that might be required for your stack, such as database migration. &lt;/p&gt;

&lt;p&gt;In the end, both approaches work fine. My personal recommendation would be to use AWS CloudFormation in conjunction with custom resources when needed. CloudFormation is well-supported and can easily be leveraged by other AWS features (as we will see shortly). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stages-on-aws"&gt;
  &lt;/a&gt;
  Stages on AWS
&lt;/h2&gt;

&lt;p&gt;The easiest way to manage stages on AWS is by using  &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;CodePipeline performs two major services. First, it orchestrates multiple AWS services to automate every critical part of your application deployment process. Using CodePipeline, you can ingest code from your code repository (such as GitHub), compile it using AWS CodeBuild, and deploy your application's resources using (you guessed it) AWS CloudFormation. &lt;/p&gt;

&lt;p&gt;Second (and most important for today's discussion), CodePipeline supports defining separate stages for your application. When you create a CodePipeline, you create stages that handle importing your source code from source control and building the code. From there, you can add additional deployment stages for dev, test, stage, prod, etc. &lt;/p&gt;

&lt;p&gt;In the screenshot below, you can see a minimal deployment pipeline. The third step after the CodeBuild project is a dev stage, intended for developer vetting of new changes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9MHQVVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637599555799/ftVSkJfMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9MHQVVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637599555799/ftVSkJfMY.png" alt="image.png" width="543" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could easily add a new stage to our pipeline by clicking &lt;strong&gt;Edit&lt;/strong&gt; and then clicking the &lt;strong&gt;Add Stage&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W79QYF0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637600416975/g3kGGs5RT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W79QYF0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637600416975/g3kGGs5RT.png" alt="image.png" width="724" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you add a stage, you can add one or more &lt;strong&gt;action groups&lt;/strong&gt;. Action groups support a large number of AWS services, including AWS CloudFormation. For our test group, for example, we could add two action groups: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A manual approval. This would stop changes from the dev branch from flowing to test automatically until someone approved the change in the AWS Management Console (e.g., after performing a code review). &lt;/li&gt;
&lt;li&gt;An AWS CloudFormation template to deploy our infrastructure stack for the test stage. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using a CloudFormation script with CodePipeline,  &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html"&gt;you can specify a configuration file&lt;/a&gt; that passes in the parameters the CloudFormation script needs to build that stage properly. This might be as simple as prefixing created resources with the name "test" instead of "dev", or as complicated as specifying a data set to load into your database for testing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-stacks-and-stages-in-practice"&gt;
  &lt;/a&gt;
  Managing Stacks and Stages in Practice
&lt;/h2&gt;

&lt;p&gt;In theory, stacks and stages are pretty simple concepts. In practice, however, it takes a lot of work and fine-tuning to get your CI/CD pipeline to the point where you can deploy your application reliably across multiple stages. Your team also needs to make some up-front decisions about how it's going to manage its source code and work product. &lt;/p&gt;

&lt;p&gt;Below are just a few factors to consider when devising your approach to stacks and stages on AWS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-branching"&gt;
  &lt;/a&gt;
  Source Code Branching
&lt;/h3&gt;

&lt;p&gt;A key up-front decision with stacks and stages is how your team will flow changes from development into production. A big part of this decision is how you manage branches in source control. &lt;/p&gt;

&lt;p&gt;There are multiple possible branching patterns. On his Web site,  &lt;a href="https://martinfowler.com/articles/branching-patterns.html"&gt;programming patterns guru Martin Fowler has documented the key strategies&lt;/a&gt; in excruciating detail. On their Web site,  &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops"&gt;Microsoft offers a simpler, more prescriptive approach&lt;/a&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define &lt;strong&gt;feature branches&lt;/strong&gt; that represent a single feature per branch. &lt;/li&gt;
&lt;li&gt;Use pull requests in source control to merge feature branches into your main branch for deployment. &lt;/li&gt;
&lt;li&gt;Keep your main branch clean and up to date. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is, of course, only one way to do things. The important thing is that your branching strategy is clean, simple, and easy to manage. Complex branching strategies that require multiple merges and resolution of merging conflicts end up becoming a nightmare for development teams and slow down deployment velocity. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unit-of-deployment"&gt;
  &lt;/a&gt;
  Unit of Deployment
&lt;/h3&gt;

&lt;p&gt;Another fundamental consideration is the unit of deployment - i.e., how much of your application do you deploy at a time? &lt;/p&gt;

&lt;p&gt;Many legacy applications deploy an application's entire stack with every deployment. This so-called &lt;strong&gt;monolithic&lt;/strong&gt; architecture is easy to implement. However, it lacks flexibility and tends to result in hard-to-maintain systems. &lt;/p&gt;

&lt;p&gt;The popular alternative to monoliths is &lt;strong&gt;microservices&lt;/strong&gt;. In a microservices architecture, you break your application into a set of loosely-coupled services that your application calls. You can get incredible deployment flexibility with microservices, as you can bundle each service as its own stack. However,  &lt;a href="https://blog.tinystacks.com/service-discovery-with-aws-cloud-map"&gt;managing versions and service discovery&lt;/a&gt; in a complex Web of microservices can be daunting. &lt;/p&gt;

&lt;p&gt;You can also take an in-between approach. Some teams divide their apps up into so-called "macroservices" or "miniservices" - logical groupings of services and apps that can each be deployed as a single unit. Such deployments avoid the downsides of monolithic deployment while also steering clear of the complexity of microservices. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-management"&gt;
  &lt;/a&gt;
  Data Management
&lt;/h3&gt;

&lt;p&gt;Next, there's how you'll manage data. At a minimum, your team needs to consider how to handle: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading data into a dev/test/staging system for testing purposes. &lt;/li&gt;
&lt;li&gt;Managing schema changes to your data store (e.g., adding new tables/fields to relational database tables with a new release). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some development frameworks, such as Django, use an Object Data Model (ODM) or Object Relational Model (ORM) that automates database migrations. In these cases, your application simply needs a way to trigger a migration using the relevant scripts. The AWS Database Blog has some detailed tips for &lt;a href="https://aws.amazon.com/blogs/database/building-a-cross-account-continuous-delivery-pipeline-for-database-migrations/"&gt;incorporating database migrations into a pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-secrets"&gt;
  &lt;/a&gt;
  Managing Secrets
&lt;/h3&gt;

&lt;p&gt;While automation is great, it introduces a devilish problem: managing secrets. Your application can access most AWS services using an AWS Identity and Access Management (IAM) role. However, it will likely also need to connect to other resources - databases, source control systems, dependent services - that require some sort of authentication information, such as access and secret keys. &lt;/p&gt;

&lt;p&gt;It can't be said clearly enough:  &lt;a href="https://blog.gitguardian.com/secrets-credentials-api-git/"&gt;storing secrets in source code is a huge no-no&lt;/a&gt;. And storing them in plain text somewhere (like an Amazon S3 bucket) isn't any better. &lt;/p&gt;

&lt;p&gt;Fortunately, AWS created the  &lt;a href="https://aws.amazon.com/secrets-manager/"&gt;AWS Secrets Manager&lt;/a&gt; for just this purpose. Using Secrets Manager, you can authorize your application via IAM to read sensitive key/value pairs over a secure connection. You can even use CloudFormation to store secrets for resources such as databases into Secrets Manager as part of building a stack. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Stacks and stages are cornerstone concepts of DevOps deployments. Once you can deploy your application as a single unit or collection of units, you can spin up any environment you need at any time. The payoff? Faster deployments and more reliable applications - and, as a consequence, happy customers! &lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is Slate.js, and will it replace Quill and Draft.js?</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 23 Nov 2021 22:09:23 +0000</pubDate>
      <link>https://dev.to/logrocket/what-is-slatejs-and-will-it-replace-quill-and-draftjs-1fdp</link>
      <guid>https://dev.to/logrocket/what-is-slatejs-and-will-it-replace-quill-and-draftjs-1fdp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ekekenteodionyenfe/"&gt;Ekekenta Odionyenfe&lt;/a&gt;✏️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ianstormtaylor/slate"&gt;Slate&lt;/a&gt;&lt;a href="https://github.com/ianstormtaylor/slate"&gt;.js&lt;/a&gt; is a highly customizable platform for creating rich-text editors, also known as WYSIWYG editors. It enables you to create powerful, intuitive editors similar to those you’ve probably used in Medium, Dropbox Paper, or Google Docs. These are quickly becoming standard features for many web apps, and tools like Slate make them easier to implement, ensuring your program won’t get bogged down in complexity.&lt;/p&gt;

&lt;p&gt;Although Slate is still in beta at the time of writing, it’s natural to ask whether it has the potential to replace more &lt;a href="https://blog.logrocket.com/build-a-wysiwyg-text-editor-using-quill/"&gt;mature platforms like Quill&lt;/a&gt; and &lt;a href="https://blog.logrocket.com/building-rich-text-editors-in-react-using-draft-js-and-react-draft-wysiwyg/"&gt;Draft.js&lt;/a&gt;. The short answer is that it's far too early to tell, but here are a few facts to support why it could.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-slatejs"&gt;
  &lt;/a&gt;
  What's new in Slate.js?
&lt;/h2&gt;

&lt;p&gt;Building a rich-text editor for your React application has not been easy. As applications grow in size, a more productive and support-rich tool is necessary. With frameworks like Quill, developers must go through substantial hacks to fix performance issues. But Slate.js was designed to make things easier with the following features:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstclass-plugins"&gt;
  &lt;/a&gt;
  First-class plugins
&lt;/h3&gt;

&lt;p&gt;Other React-based rich-text editors like Quill and Draft offer plugins that provide users with additional capabilities. Slate, on the other hand, recognizes plugins as first-class entities; the basic editing functionality is even designed as a distinct plugin. That means you can completely alter the editing experience, allowing you to develop complex editors like Medium or Dropbox without having to contend with the library's standard assumptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallel-to-the-dom"&gt;
  &lt;/a&gt;
  Parallel to the DOM
&lt;/h3&gt;

&lt;p&gt;The DOM serves as the foundation for Slate's data model. The document is a hierarchical tree that employs selects and ranges and exposes all of the usual event handlers. This implies that sophisticated features such as tables and nested block quotations are possible. Slate can perform pretty much whatever you can do in the DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-document-model"&gt;
  &lt;/a&gt;
  Nested document model
&lt;/h3&gt;

&lt;p&gt;Slate's document model, like the DOM itself, is a layered, recursive tree. Depending on your use case, you can incorporate complicated components like tables and nested block quotations, as we noted above, or you can keep things simple by merely employing a single level of hierarchy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stateless-views-and-immutable-data"&gt;
  &lt;/a&gt;
  Stateless views and immutable data
&lt;/h3&gt;

&lt;p&gt;The Slate editor is stateless, utilizing immutable data structures via React and Immutable.js, making it much easier to reason about code and write plugins. For comparison’s sake, Quill handles its own changes, for example, and does not allow users to prevent edits. Quill cannot prevent the change, but it will override the content anytime the value varies from the existing state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schemaless-core"&gt;
  &lt;/a&gt;
  Schema-less core
&lt;/h3&gt;

&lt;p&gt;Slate's core logic makes no assumptions about the structure of the data you'll be changing, so there are no assumptions baked into the library that will catch you off guard when you need to move beyond the most basic use cases. This can cause serious performance issues when working with Quill and Draft.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-core-boundaries"&gt;
  &lt;/a&gt;
  Clear core boundaries
&lt;/h3&gt;

&lt;p&gt;With a plugin-first design and a schema-less core, the line between "core" and "custom" is much more apparent, which means the core experience doesn't become bogged down in edge cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intuitive-changes"&gt;
  &lt;/a&gt;
  Intuitive changes
&lt;/h3&gt;

&lt;p&gt;Slate texts are edited with "changes," which are meant to be high-level and straightforward to create and understand, allowing custom functionality to be as expressive as possible. This dramatically improves your ability to reason about your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collaborationready-data-model"&gt;
  &lt;/a&gt;
  Collaboration-ready data model
&lt;/h3&gt;

&lt;p&gt;Slate's data format is intended to allow collaborative editing to be built on top, so developers don't have to rethink everything if you decide to make your editor collaborative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slatejs-in-action"&gt;
  &lt;/a&gt;
  Slate.js in action
&lt;/h2&gt;

&lt;p&gt;Now let’s see Slate in action by building a simple rich-text editor. To get started, we need to create a new React project; we’ll use Create React App for that. Run the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;npx create-react-app rich-text-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make a cup of coffee while the necessary packages are installed. When the installation is complete, install the three required packages for our Slate implementation with the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save&lt;/span&gt; slate slate-react slate-history
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, start the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the &lt;code&gt;App.js&lt;/code&gt; component and import our installed packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEditor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Editable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a new &lt;code&gt;Editor&lt;/code&gt; object. We will use the &lt;code&gt;useEditor&lt;/code&gt; hook to make our editor stable across renders. Then, we’ll create a state to handle the input in our editor with a paragraph and some dummy text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEditor&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am a Slate rich editor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s keep track of our Slate editor, its plugins, its value, its selection, and all changes made to the editor by rendering the Slate context provider. Then, render the &lt;code&gt;&amp;lt;Editable&amp;gt;&lt;/code&gt; component inside our React context.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Editable&amp;gt;&lt;/code&gt; component behaves similarly to the &lt;code&gt;contentEditable&lt;/code&gt; component in React. It will render an editable rich-text document for the nearest &lt;code&gt;editor&lt;/code&gt; context whenever it is rendered. Modify the render method with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Slate&lt;/span&gt;
      &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Editable&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Slate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have your text editor, test out the application on &lt;code&gt;localhost:3000&lt;/code&gt; in your favorite browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-slatejs"&gt;
  &lt;/a&gt;
  Why Slate.js?
&lt;/h2&gt;

&lt;p&gt;Slate was created to address the challenges developers might encounter when building large-scale applications with Quill and Draft.js. It was designed to transform the document's creation by making adjustments, which is necessary for developing advanced behaviors. That has often proved overly complicated with Quill or Draft.&lt;/p&gt;

&lt;p&gt;Quill, no doubt, is a drop-in editor; you can get started without changing anything. If you get beyond the most basic use cases, however, you may encounter certain performance issues, which have become &lt;a href="https://github.com/quilljs/quill/issues/2197"&gt;a recognized&lt;/a&gt; &lt;a href="https://github.com/quilljs/quill/issues/2197"&gt;defect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Slate, on the other hand, was designed to facilitate actual productivity by providing you the flexibility to do whatever you choose. Slate offers sophisticated integrations with Markdown, Google Docs, and Medium out of the box to enable for seamless collaboration with teammates.&lt;/p&gt;

&lt;p&gt;It allows you to perform complex operations like adding tables, and inserting images and bulleted lists into those tables. Slate.js makes serialization to HTML, Markdown, and other formats possible. Simple tasks like converting a document to HTML or Markdown is made a lot easier with less boilerplate code.&lt;/p&gt;

&lt;p&gt;With all that said, it’s definitely worth giving Slate.js a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#will-slate-replace-quill-and-draftjs"&gt;
  &lt;/a&gt;
  Will Slate replace Quill and Draft.js?
&lt;/h2&gt;

&lt;p&gt;To be honest, this may not be the case. Slate.js is still in beta, which means the stable version is still yet to be released. Your app might crash, or some features might not work properly.&lt;/p&gt;

&lt;p&gt;Again, despite their imperfections, Quill and Draft.js have been in production for a long time now. And as much as we might wish otherwise, there is no such thing as perfection when it comes to programming languages. On top of that, it’s not easy for an org to change its system to something entirely new within a short period.&lt;/p&gt;

&lt;p&gt;Ultimately, Slate has not been rigorously used for production-grade applications, and it hasn’t been proven to handle those ambiguous tasks that expose Quill and Draft as inefficient.&lt;/p&gt;

&lt;p&gt;Maybe in a year or so, we'll start hearing from companies and developers about their experience with Slate — how they've overcome the known flaws in Quill and Draft. Perhaps the community behind it will modify it to the point where it's a truly viable solution. Will it replace Quill and Draft? We can't tell for now.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#are-you-adding-new-js-libraries-to-improve-performance-or-build-new-features-what-if-theyre-doing-the-opposite"&gt;
  &lt;/a&gt;
  Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?
&lt;/h2&gt;

&lt;p&gt;There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYla9PmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;Build confidently — &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to interpret machine learning models with SHAP values</title>
      <author>Mage</author>
      <pubDate>Tue, 23 Nov 2021 21:44:23 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-interpret-machine-learning-models-with-shap-values-54jf</link>
      <guid>https://dev.to/mage_ai/how-to-interpret-machine-learning-models-with-shap-values-54jf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;What are SHAP values?&lt;/li&gt;
&lt;li&gt;Walkthrough example&lt;/li&gt;
&lt;li&gt;How does Mage explain models?&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Machine learning models are usually seen as a “black box.” It takes some features as input and produces some predictions as output. The common questions after model training are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do different features affect the prediction results?&lt;/li&gt;
&lt;li&gt;What are the top features that influence the prediction results?&lt;/li&gt;
&lt;li&gt;The model performance metrics look great, but should I trust the results?&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuSkzTR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nakwk4vxzgj23o9kdqq5.gif" alt="Image description" width="410" height="170"&gt;&lt;em&gt;Whatever you say Prince Ali (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Thus, model explainability plays an important role in the machine learning world. Model insights are useful for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;Informing feature engineering&lt;/li&gt;
&lt;li&gt;Directing future data collection&lt;/li&gt;
&lt;li&gt;Informing human decision-making&lt;/li&gt;
&lt;li&gt;Building trust&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWHDi1IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tnzmo0aiz414986okf2.gif" alt="Image description" width="382" height="347"&gt;&lt;em&gt;Model insights doing its part! (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We talked about the metrics used for model evaluation in a previous article “&lt;a href="https://m.mage.ai/the-definitive-guide-to-accuracy-precision-and-recall-for-product-developers-71e4887d0da7"&gt;The definitive guide to Accuracy, Precision, and Recall for product developers.&lt;/a&gt;” Those metrics help you understand the overall performance of a model. However, we need more insights into how different features impact the model’s prediction.&lt;/p&gt;

&lt;p&gt;There are multiple techniques to explain the models. In this article, we’ll introduce SHAP values, which is one of the most popular model explanation techniques. We’ll also walk through an example to show how to use SHAP values to get insights.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-shap-values"&gt;
  &lt;/a&gt;
  What are SHAP values?
&lt;/h2&gt;

&lt;p&gt;SHAP stands for “SHapley Additive exPlanations.” &lt;a href="https://en.wikipedia.org/wiki/Shapley_value"&gt;Shapley values&lt;/a&gt; are a widely used approach from cooperative game theory. The essence of Shapley value is to measure the contributions to the final outcome from each player separately among the coalition, while preserving the sum of contributions being equal to the final outcome.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nf8YXV1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u62df7y4ecc2cs212x6.gif" alt="Image description" width="480" height="270"&gt;&lt;em&gt;Oh SHAP! (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;When using SHAP values in model explanation, we can measure the input features’ contribution to individual predictions. We won’t be covering the complex formulas to calculate SHAP values in this article, but we’ll show how to use the &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python library to easily calculate SHAP values.&lt;/p&gt;

&lt;p&gt;There are some other techniques used to explain models like &lt;a href="https://scikit-learn.org/stable/modules/permutation_importance.html"&gt;permutation importance&lt;/a&gt; and &lt;a href="https://scikit-learn.org/stable/modules/partial_dependence.html"&gt;partial dependence plots&lt;/a&gt;. Here are some benefits of using SHAP values over other techniques:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Global interpretability: SHAP values not only show feature importance but also show whether the feature has a positive or negative impact on predictions.&lt;/li&gt;
&lt;li&gt;Local interpretability: We can calculate SHAP values for each individual prediction and know how the features contribute to that single prediction. Other techniques only show aggregated results over the whole dataset.&lt;/li&gt;
&lt;li&gt;SHAP values can be used to explain a large variety of models including &lt;a href="https://en.wikipedia.org/wiki/Linear_model"&gt;linear models&lt;/a&gt; (e.g. &lt;a href="https://en.wikipedia.org/wiki/Linear_regression"&gt;linear regression&lt;/a&gt;), &lt;a href="https://sdcastillo.github.io/PA-R-Study-Manual/tree-based-models.html"&gt;tree-based models&lt;/a&gt; (e.g. &lt;a href="https://en.wikipedia.org/wiki/XGBoost"&gt;XGBoost&lt;/a&gt;) and &lt;a href="https://en.wikipedia.org/wiki/Neural_network"&gt;neural networks&lt;/a&gt;, while other techniques can only be used to explain limited model types.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#walkthrough-example"&gt;
  &lt;/a&gt;
  Walkthrough example
&lt;/h2&gt;

&lt;p&gt;We’ll walk through an example to explain how SHAP values work in practice. If you’ve followed Mage’s blog articles, you might’ve already read “&lt;a href="https://m.mage.ai/how-to-get-started-with-ai-ml-8630fecfd776"&gt;Build your first machine learning model&lt;/a&gt;.” We’ll use the same dataset &lt;a href="https://app.box.com/s/zrpzj8zw35zbs8njcij40gy45gcgwsyl"&gt;titanic_survival&lt;/a&gt; to demonstrate how SHAP values work.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RaVc89Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0nae8qf81w7pbdde0gk.gif" alt="Image description" width="410" height="172"&gt;&lt;em&gt;The SHAP has sailed (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We use XGBoost to train the model to predict survival. “Sex”, “Pclass”, “Fare”, and “Age” features are used in the model training. “Survived” is the label feature with values 0 and 1.&lt;/p&gt;

&lt;p&gt;We use this &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python library to calculate SHAP values and plot charts. We select TreeExplainer here since XGBoost is a tree-based model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import shap
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;shap_values&lt;/code&gt; is a 2D array. Each row belongs to a single prediction made by the model. Each column represents a feature used in the model. Each SHAP value represents how much this feature contributes to the output of this row’s prediction.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7OgdGHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dsg9mtlq3czbhvs7epz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7OgdGHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dsg9mtlq3czbhvs7epz.png" alt="Image description" width="477" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Positive SHAP value means positive impact on prediction, leading the model to predict 1(e.g. Passenger survived the Titanic). Negative SHAP value means negative impact, leading the model to predict 0 (e.g. passenger didn’t survive the Titanic).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#feature-importance"&gt;
  &lt;/a&gt;
  Feature importance
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;strong&gt;summary_plot&lt;/strong&gt; method with plot_type “bar” to plot the feature importance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.summary_plot(shap_values, X, plot_type='bar')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MkEETpZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96ki40y9eqihiyulj2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkEETpZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96ki40y9eqihiyulj2w.png" alt="Image description" width="574" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The features are ordered by how much they influenced the model’s prediction. The x-axis stands for the average of the absolute SHAP value of each feature. For this example, “Sex” is the most important feature, followed by “Pclass”, “Fare”, and “Age”.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DD2_CK6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmegnbfkey7lm7l3t92v.gif" alt="Image description" width="410" height="246"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#directionality-impact"&gt;
  &lt;/a&gt;
  Directionality impact
&lt;/h3&gt;

&lt;p&gt;With the same &lt;strong&gt;summary_plot&lt;/strong&gt; method, we can plot dot charts to visualize the directionality impact of the features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.summary_plot(shap_values, X)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxpH02z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgqh3jvm3a29q4kgmla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxpH02z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgqh3jvm3a29q4kgmla.png" alt="Image description" width="574" height="195"&gt;&lt;/a&gt;&lt;br&gt;
In this chart, the x-axis stands for SHAP value, and the y-axis has all the features. Each point on the chart is one SHAP value for a prediction and feature. Red color means higher value of a feature. Blue means lower value of a feature. We can get the general sense of features’ directionality impact based on the distribution of the red and blue dots.&lt;/p&gt;

&lt;p&gt;In the chart above, we can conclude the following insights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Higher value of “Sex” (male) leads to lower chance of survive.  * Lower value of “Sex” (female) leads to higher chance of survival.&lt;/li&gt;
&lt;li&gt;Higher value of “Pclass” leads to lower chance to survive as well. 
Lower value of “Pclass” leads to higher chance of survival.&lt;/li&gt;
&lt;li&gt;Lower value of “Fare” leads to lower chance to survive.&lt;/li&gt;
&lt;li&gt;Higher value of “Age” leads to lower chance to survive.&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYNUznVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae4ul7l03xtm3folasal.png" alt="Image description" width="574" height="298"&gt;&lt;em&gt;Well, you get the point (Source: Titanic)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;By comparing these insights with general understanding of the problem, we can trust that the model is intuitive and making the right decisions. For example, the model will more likely predict survival if the passenger had a Sex of female. This is intuitive because women and children were put on lifeboats before men were allowed.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzbGh3hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbsxfpvvec6rriv9hiud.gif" alt="Image description" width="410" height="178"&gt;&lt;em&gt;When it sinks in (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#individual-predictions"&gt;
  &lt;/a&gt;
  Individual predictions
&lt;/h3&gt;

&lt;p&gt;Besides seeing the overall trend of feature impact, we can call the &lt;strong&gt;force_plot&lt;/strong&gt; method to visualize how features contribute to individual predictions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.force_plot(
    explainer.expected_value,
    shap_values[idx, :],
    X.iloc[idx, :],
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JRP7wry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz6vhl6plkxvtbfp3ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JRP7wry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz6vhl6plkxvtbfp3ag.png" alt="Image description" width="574" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, feature “Fare” and “Sex” have a positive impact on the prediction, while “Pclass” and “Age” have a negative impact on the prediction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-mage-explain-models"&gt;
  &lt;/a&gt;
  How does Mage explain models?
&lt;/h2&gt;

&lt;p&gt;After the model is trained, Mage provides an Analyzer page to show the model performance and insights. In addition to model performance metrics (precision, recall, accuracy, etc), we leverage SHAP values to show features that have the most impact on model output and how those features impact the model output.&lt;/p&gt;

&lt;p&gt;“Top Influencers” chart is similar to the summary bar chart from the &lt;code&gt;shap&lt;/code&gt; library. We calculate the average of the absolute SHAP values for each feature and use it to show which features were the most important when making a prediction.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vy3aTc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4f2s4xlkvre0fy00jvc.png" alt="Image description" width="574" height="296"&gt;&lt;em&gt;Mage Analyzer page: top features&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We also translate SHAP values to this “Directionality” chart to show how features impact the output in a more intuitive way. Green plus icon means higher feature value and red minus icon means lower feature value. Horizontally, the right side means positive impact on the prediction and the left side means negative impact. We also summarize all the insights into text to make it easier to understand.&lt;/p&gt;

&lt;p&gt;For the Titanic example, we can easily see when sex is female, pclass is smaller, fare is higher, or younger age, there is a higher chance to survive. These insights align with our understanding of what actually happened during the Titanic incident in real life.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBCFx3eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61cfnpp6t2phore84ojk.png" alt="Image description" width="574" height="545"&gt;&lt;em&gt;Mage Analyzer page: SHAP values&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Model explainability is an important topic in machine learning. SHAP values help you understand the model at row and feature level. The &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python package is a useful library to calculate SHAP values, visualize the feature importance, and directionality impact using multiple charts.&lt;/p&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmvkiiCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpe611ir1oom877ubuyq.png" alt="Image description" width="508" height="349"&gt;&lt;em&gt;(Source: Titanic)&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Original paper for SHAP: &lt;a href="https://arxiv.org/pdf/1705.07874.pdf"&gt;https://arxiv.org/pdf/1705.07874.pdf&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Documentation for 'shap' library : &lt;a href="https://shap.readthedocs.io/en/latest/index.html"&gt;https://shap.readthedocs.io/en/latest/index.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>modelexplantion</category>
      <category>shapvalues</category>
      <category>modeling</category>
    </item>
    <item>
      <title>HACKTOBERFEST 2021 dev.to badge</title>
      <author>Natizyskunk</author>
      <pubDate>Tue, 23 Nov 2021 21:41:58 +0000</pubDate>
      <link>https://dev.to/natizyskunk/hacktoberfest-2021-devto-badge-33ej</link>
      <guid>https://dev.to/natizyskunk/hacktoberfest-2021-devto-badge-33ej</guid>
      <description>&lt;p&gt;Yeah!!! I'm happy to say that I just received my Hacktoberfest 2021 dev.to badge ! 🙌&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vw7rE3TO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--cm4PWdMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_375/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/131/hacktoberfest-2021-badge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vw7rE3TO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--cm4PWdMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_375/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/131/hacktoberfest-2021-badge.png" alt="Hacktoberfest 2021 badge" width="375" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you next year !🚀&lt;/p&gt;

&lt;p&gt;Thanks to #&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;HacktoberFest&lt;/a&gt;, #&lt;a href="https://digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; &amp;amp; #&lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;You can find my work on &lt;a href="https://github.com/Natizyskunk/"&gt;Gitlab&lt;/a&gt; and &lt;a href="https://github.com/Natizyskunk/"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Sacred Steps to Achieving Good Documentation</title>
      <author>homemmakako</author>
      <pubDate>Tue, 23 Nov 2021 21:16:43 +0000</pubDate>
      <link>https://dev.to/homemmakako/the-sacred-steps-to-achieving-good-documentation-1hc0</link>
      <guid>https://dev.to/homemmakako/the-sacred-steps-to-achieving-good-documentation-1hc0</guid>
      <description>&lt;p&gt;So, you've spent hours, weeks, or even months on a project you believe in, and you are damn proud of it. It is capable of solving problems every developer faces, the test coverage is about 110%, and the code itself is just shy of a work of art. But then, as you push your last commit, you remember that, lurking in the shadows of your IDE, was a holdup most developers underestimate: documentation.&lt;/p&gt;

&lt;p&gt;Ok, maybe it is not as scary as I make it sound, but still &lt;strong&gt;something you should respect&lt;/strong&gt;, after all, every programmer has, at some point in their life, come across a poorly documented library or package, spent a few minutes of guesswork trying to make it work, maybe even tried reading a bit of the source code, just to finally give up on using it. Turns out, most of the time, an undocumented application is a barely usable application. Be it an API, a smartphone or a car, nobody wants to learn how to assemble an engine in order to drive back home.&lt;/p&gt;

&lt;p&gt;That being said, the importance of documenting your application is no breaking news. What might be surprising, however, is how difficult and time consuming the process of creating such documentation can be. While writing the documentation on my open-source software &lt;a href="https://mapikit.github.io/meta-system-docs/"&gt;Meta-System&lt;/a&gt;, I came across a few difficulties that I would like to share, so that maybe you can avoid them yourself. But where do you start?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picking-the-right-tools"&gt;
  &lt;/a&gt;
  Picking the Right Tools
&lt;/h2&gt;

&lt;p&gt;The first big challenge you might face is which platform to use for your docs. Some simple projects just use the github wiki as a way to serve the documentation, which works well for simpler things, but the reality is that, for medium to large projects, such tools are far from being enough, so you'll probably have to resort to some other options such as &lt;a href="https://apiary.io"&gt;Apiary&lt;/a&gt;, &lt;a href="https://readthedocs.org"&gt;Read the Docs&lt;/a&gt; or even a combination of tools, such as &lt;a href="https://pages.github.com"&gt;Github Pages&lt;/a&gt; and &lt;a href="https://docusaurus.io"&gt;Docussaurus&lt;/a&gt;, which was what we used for Meta-System.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-which-one-should-you-choose"&gt;
  &lt;/a&gt;
  But Which One Should You Choose?
&lt;/h3&gt;

&lt;p&gt;Of course, &lt;strong&gt;the correct tool, as usual, depends on the requirements of your project&lt;/strong&gt;. For an API, Apiary might be your best choice, if you want a more generalized documentation you Read the Docs might give you a quick and free way to have your documentation up and running, however if you really want a lot more control over styling and such, docussaurus can really help. There is also a last option which is quite rare though: just make a static website from the ground up. You can use &lt;a href="//reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, or really anything you want to build a documentation site. It's a lot more work than any of the previous options, but if you truly believe you need to control every single aspect  of your documentation it is still a possibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-final-advice"&gt;
  &lt;/a&gt;
  A Final Advice
&lt;/h3&gt;

&lt;p&gt;In the end it is very much a decision about how much you want/need to customize your docs. The more "pre-made" it is, the easier it will be to start writing your docs. The more "customizable" it is, the more you'll need to do in order to get everything up and running. To summarize, my final advice would be: &lt;strong&gt;choose the tool that fits your necessities without being a production barrier.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After all is set, you can start typing away! Though, that might be as much fun as you expect...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-a-great-netflix-series"&gt;
  &lt;/a&gt;
  Not a Great Netflix Series
&lt;/h2&gt;

&lt;p&gt;You might be a gamer, or maybe a tv shows aficionado, or you just love the musical expression of Bach; either way, there is something you find deeply entertaining, that could have you enjoying it for hours unnoticed; &lt;strong&gt;writing documentation certainly is not one of those things.&lt;/strong&gt; To put it simply, &lt;strong&gt;writing a documentation can be quite boring.&lt;/strong&gt; Not only is it a very repetitive task, but it is often quite time consuming and, although there is no way around that specifically, there are ways to make it less disheartening.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-workflow"&gt;
  &lt;/a&gt;
  Organize Your Workflow
&lt;/h3&gt;

&lt;p&gt;The first thing I found out truly helped me was organization:  &lt;strong&gt;separate all the docs you'll be writing into related groups&lt;/strong&gt;, not only does this make it easier to manage the files involved, but you can also keep your train of thought: instead of constantly jumping between the multiple subjects your documentation approaches, you can focus on one at a time, making it easier to write the individual entries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettify-it"&gt;
  &lt;/a&gt;
  Prettify It
&lt;/h3&gt;

&lt;p&gt;You should also try making your docs section more interesting: add tables, text formatting, syntax highlighting, maybe even a few images. There is a good chance that &lt;strong&gt;if writing your documentation is boring, so will be the reading.&lt;/strong&gt; However, there is no need to overdo it as well, after all we are trying to write a technical documentation, just make sure it is not a long text wall.&lt;/p&gt;

&lt;p&gt;If you follow all that, you'll have an infallible documentation, though you might still stumble across a very special type of &lt;a href="https://whatis.techtarget.com/definition/PEBCAK-problem-exists-between-chair-and-keyboard"&gt;PEBCAK&lt;/a&gt;, one I usually call...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-teachers-paradox"&gt;
  &lt;/a&gt;
  The Teacher's Paradox
&lt;/h2&gt;

&lt;p&gt;In my opinion writing docs is quite akin to teaching, and therefore it also holds a similar problem: whenever you are trying to teach someone, you will need to know two things: the topic you are about to teach and what the student doesn't know, and the last one is quite a challenge. After all, &lt;strong&gt;how do you know what you don't know?&lt;/strong&gt;... Now, let's not get too Socratic about it; the point is: it's difficult to put yourself in the place of someone who does not know about the topic since you already do, and that makes the process of teaching (or documenting in this case) slightly troublesome. In order to minimize such problems, I'd recommend keeping a few things in mind:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-cant-know-what-they-dont"&gt;
  &lt;/a&gt;
  You Can't Know What They Don't
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Do not expect the reader to have any previous knowledge.&lt;/strong&gt; There is no way to know if your user got to a section following your docs topics, if they are coming from one of your tutorials or from an external link. Therefore you can't be certain they already know something they should. The best way to solve this is to simply &lt;a href="https://mapikit.github.io/meta-system-docs/docs/api-docs/architecture/extending-functionality"&gt;&lt;strong&gt;make sure to provide every link possible&lt;/strong&gt;&lt;/a&gt;. If there is an inhouse term you use to specify something, make sure to link to a section explaining it whenever it appears. A concept required for further understanding of the docs? Link it. A program or lib required for your software to work? Link it. &lt;strong&gt;There is no way to know what your reader doesn't, but there is a way to make sure they are not lost when that inevitably happens.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-more-generalist-the-better"&gt;
  &lt;/a&gt;
  The More Generalist the Better
&lt;/h3&gt;

&lt;p&gt;Always try to &lt;strong&gt;provide multiple approaches for learning about your software.&lt;/strong&gt; Some people will be more pleased to see a text describing the intrinsics of the code or how it is expected to work; others just want a few quick examples to understand the basics of what to expect from a certain situation. Whether you are one or the other, &lt;strong&gt;make sure to provide both a good text as well as good examples&lt;/strong&gt;. Examples are always a nice way to solve misunderstandings that might have arised in the text, while plain text is really the only good way to explain something in a completely generic way.&lt;/p&gt;

&lt;p&gt;After all that you probably have a full documentation page that contains all your software info in an intelligible way, without being too overwhelming or boring. Maybe you achieved all that without using some of the techniques mentioned here. So tell us, what was your experience writing your documentation? Which tools did you use that you regret and which ones saved your life and sanity?&lt;/p&gt;

</description>
      <category>writing</category>
      <category>opensource</category>
      <category>discuss</category>
      <category>documentation</category>
    </item>
    <item>
      <title>JS Features - Why JS will be the future? :)</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 21:03:35 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/js-features-why-js-will-be-the-future--53j3</link>
      <guid>https://dev.to/whitehatdevv/js-features-why-js-will-be-the-future--53j3</guid>
      <description>&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;, I am sure you have been heart about it, it one of the most commented programming language, for instance, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JS looks really easy to learn. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All this staff is the main reason why JS acceptance is growing exponentially, I should say you, &lt;em&gt;you must learn JS 🤩&lt;/em&gt;, however, why?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JS is really easy to learn: Yes 😏, easier than other programming language, normally, you will be able to learn it in one or two weeks, his sintaxis looks petty sugar, it's such &lt;strong&gt;jam&lt;/strong&gt; 😜&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clbWTQV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517300143/IKJfXRL2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clbWTQV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517300143/IKJfXRL2o.png" alt="Javascript syntax.png" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computeDNILetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// separamos las partes del dni&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dniParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// comprobarmos el valor&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;99999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//obtenemos el indice de la letra&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theoricalLetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// obtenermos la letra&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;letrasDNI&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theoricalLetter&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//comprobamos las letras&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DNI y letra correctos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error, su letra no es correcta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;El dni introducido no es correcto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am sure you have not understood anything, but do not worry, only you have to focus in JS sugar sintaxis 🧐.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can use JS to interact with DOM. &lt;strong&gt;Yes&lt;/strong&gt;, you will be able to create HTML structures from JS and create listeners to act for different user actions, like click on a button. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycoj6XOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517311455/sF1B6ArTR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycoj6XOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517311455/sF1B6ArTR.png" alt="Js DOM.png" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//crear evento&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Estamos cambiando el evento&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//TODO: REFACTORIZAR&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, Javascript allows you to work from a server or client side, as I explained you in &lt;strong&gt;past posts&lt;/strong&gt;, it makes JS really versatile, you only need to learn one programming language to be a &lt;em&gt;Full Stack web developer&lt;/em&gt;, yes *&lt;em&gt;you should start learning JS right now. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's not all, it also is compatible with all &lt;strong&gt;CMS&lt;/strong&gt; such &lt;em&gt;Wordpress, Prestashop, Magento, Shopify&lt;/em&gt;, you can use JS wherever you want, only you will have to apply different programming paradigms to accomplish the different goals you can have. I recommend you start learning JS after reading this Post, the time does not stop and you do not know JS yet 😤.&lt;/p&gt;

&lt;p&gt;I am thinking to start a JS course for everyone who want to learn JS without any &lt;strong&gt;programming experience&lt;/strong&gt;, we need to create a group of five people to start coding and learning right now 🥰. I will open 5 seats in my JS school, if you are interested in being one of these people who will code with JS like seniors please leave a comment in this post, I will reach you out with more details about it. &lt;/p&gt;

&lt;p&gt;I hope you have been &lt;strong&gt;enjoyed&lt;/strong&gt; reading this post 😜. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 23 Nov 2021 21:01:38 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3nkk</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3nkk</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-the-forest-for-the-abstract-syntax-trees"&gt;
  &lt;/a&gt;
  Seeing the forest for the (Abstract Syntax) Trees
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aruna"&gt;@aruna&lt;/a&gt;
 helps us get beyond a cursory understanding of Abstract Syntax Trees (AST) in this post&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aruna" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2Uujvez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6Ln-mF0r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744146/9920abb3-d96c-4003-918f-382230018c7d.jpg" alt="aruna"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Abstract Syntax Trees: They're Actually Used Everywhere -- But What Are They?&lt;/h2&gt;
      &lt;h3&gt;aruna-x ・ Nov 17 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-benefits-and-risks-of-contract-development"&gt;
  &lt;/a&gt;
  The benefits and risks of contract development
&lt;/h2&gt;

&lt;p&gt;If you're interested in working as a contract developer &lt;a class="mentioned-user" href="https://dev.to/hrishio"&gt;@hrishio&lt;/a&gt;
 has made a pretty strong case for it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hrishio/why-should-you-become-a-contractor-the-3-big-benefits-of-contracting-11o9" class="video-image"&gt;
    &lt;span class="video-timestamp"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl4ssD2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/video-camera-9a2eda0979fd9ce3933037481ee8828557b6c7f5533e1de458b8c2648a60b097.svg" alt="video camera" width="491" height="491"&gt;
      37:07&lt;/span&gt;
  &lt;/a&gt;
  &lt;a href="/hrishio" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-s0Ws01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Dyni76k3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/27240/06c84b8c-a38d-4f6f-a2ff-64d8ab1345b7.jpg" alt="hrishio"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hrishio/why-should-you-become-a-contractor-the-3-big-benefits-of-contracting-11o9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why should you become a contractor? - The 3 big benefits of contracting&lt;/h2&gt;
      &lt;h3&gt;Hrishi Mittal ・ Nov 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#worklifebalance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#freelancing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#resume&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#shedding-some-light-on-developer-relations-engineering"&gt;
  &lt;/a&gt;
  Shedding some light on developer relations engineering
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/josefine"&gt;@josefine&lt;/a&gt;
 asked the questions we've all had about DevRel in this interview. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s2engineers" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQ0yEJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jcJ1yWF7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2029/7ed5faf1-5170-46b9-8906-316c8ffabffe.png" alt="SinnerSchrader Engineers" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieDxR7-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0vXjIZbl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346852/7f60ac10-beec-4ac9-804c-ce508de15d09.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s2engineers/what-does-a-developer-relations-engineer-do-4pep" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What does a Developer Relations Engineer do?&lt;/h2&gt;
      &lt;h3&gt;Josefine Schfr for SinnerSchrader Engineers ・ Nov 17 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developerrelation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codeiscolorful&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#rebuilding-a-blog"&gt;
  &lt;/a&gt;
  Rebuilding a blog
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/abbeyperini"&gt;@abbeyperini&lt;/a&gt;
 is back with a new installment of their series about accessibility auditing their portfolio site. In this post, they explore their blog page. Don't miss the final installment, coming up soon!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abbeyperini" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuobrI1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iDg9T8Gp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/564890/f7a591dc-af18-49d4-af2f-62898415ea67.jpeg" alt="abbeyperini"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abbeyperini/blog-page-accessibility-deep-dive-1hbl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Blog Page Accessibility Deep Dive&lt;/h2&gt;
      &lt;h3&gt;Abbey Perini ・ Nov 20 ・ 22 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-most-welcome-brain-massage"&gt;
  &lt;/a&gt;
  A most welcome brain massage
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/mustapha"&gt;@mustapha&lt;/a&gt;
 created a stunningly relaxing animation that I guarantee you won't regret taking a peek at. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/mesmerizing-animation-using-only-css-rotations-229l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Mesmerizing animation using only CSS rotations 🧘‍♀️&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Nov 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#kickstart-your-next-personal-project"&gt;
  &lt;/a&gt;
  Kickstart your next personal project
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/unclebigbay"&gt;@unclebigbay&lt;/a&gt;
 walks us through setting up a Node.js backend project, connecting it to a database, writing your backend CRUD logic, and testing it using Hoppscotch. This thorough tutorial will help you kickstart your personal project &lt;em&gt;and&lt;/em&gt; apply it in any backend project.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unclebigbay" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4spKPsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5t_SGSho--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/381721/2f2a6766-6596-4883-9d5f-6df92f2e0182.jpg" alt="unclebigbay"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating your First CRUD Restful API with Node.JS and Hoppscotch&lt;/h2&gt;
      &lt;h3&gt;Unclebigbay ・ Nov 20 ・ 16 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#backend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#express&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-not-alone-and-you-are-loved"&gt;
  &lt;/a&gt;
  "You are not alone, and you are loved"
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"We are not alone, not in the greatest chaos, nor in the most thorough systems of order we could imagine. Alone we will fail, but together we can achieve so much more, and that's a lesson I wish I had learned much earlier in my life."&lt;/em&gt;&lt;br&gt;
-&lt;a class="mentioned-user" href="https://dev.to/baweaver"&gt;@baweaver&lt;/a&gt;
 ❤️ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/baweaver" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNigK_I7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rrim98LT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129384/bc4c54aa-bacc-4804-8de6-edc3ff7a173b.png" alt="baweaver"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/baweaver/tales-of-the-autistic-developer-order-and-chaos-2o0p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Tales of the Autistic Developer – Order and Chaos&lt;/h2&gt;
      &lt;h3&gt;Brandon Weaver ・ Nov 19 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#autism&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#adhd&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Html And The Mystery Of The Skeletons</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 21:01:02 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html-and-the-mystery-of-the-skeletons-1ef8</link>
      <guid>https://dev.to/whitehatdevv/html-and-the-mystery-of-the-skeletons-1ef8</guid>
      <description>&lt;p&gt;Ready? Round 2! ❤️&lt;/p&gt;

&lt;p&gt;Hi! Remember when in the previous post I told you what HTML was, what it looked like and what the attributes were? well, it's time to start playing with it. So grab paper and pencil and let's get started! &lt;/p&gt;

&lt;p&gt;Ok, we know that the tags look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; ....... some content .....&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we must take into account the following points&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is not the same &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;H1&amp;gt;&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Tags are generally always lowercase. &lt;/li&gt;
&lt;li&gt;We must close the tags so that they always work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#but-how-do-you-compose-them-to-create-an-html-document"&gt;
  &lt;/a&gt;
  But how do you compose them to create an HTML document?
&lt;/h1&gt;

&lt;p&gt;Well this is the basic structure :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
         &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;    
                  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
                        &lt;span class="c"&gt;&amp;lt;!-- All the content here --&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmyO0Jnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637066189926/SHr7gG2g_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmyO0Jnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637066189926/SHr7gG2g_.png" alt="htmlSimpleStructure.png" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if at the beginning you don't understand too, it's normal, later I will explain you how each tag works.&lt;br&gt;
Trying to compare HTML basic structure with a body, with head, body and limbs, and HTML works as if they were the bones, in which the rest of the document, photos, videos, etc.. is supported.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#everything-that-appears-in-the-body-section-what-will-be-displayed-on-the-page-are"&gt;
  &lt;/a&gt;
  Everything that appears in the body section what will be displayed on the page are.
&lt;/h2&gt;

&lt;p&gt;Well, and as they say: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will not learn how to code keeping you ass in your sofa 😃.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I advise you to use this playground to practice what you have just learnt today&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/"&gt;Code pen &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the section that says HTML you are going to paste the code that I proposed you in basic structure, and inside where it says body you are going to write the following tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, you are creating a HTML code like any good programmer who respects himself! 😉&lt;/p&gt;

&lt;p&gt;But I do not want you to stay with the desire for more so I pass a series of tags and their functionalities for you to play a while and go testing little by little.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; =&amp;gt; Create a title

&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src =&lt;/span&gt;&lt;span class="s"&gt;" URL "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; =&amp;gt; Insert an image in the document.  

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; =&amp;gt; Insert a paragraph in the document

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; =&amp;gt; create a list of points 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt; =&amp;gt; you fill that list with this tag
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well I leave you with the task:&lt;/p&gt;

&lt;p&gt;Create a document which you put a picture of a puppy and a description in, also, you should try to include a few items inside a list.&lt;/p&gt;

&lt;p&gt;In the next post we will learn how to improve this so stay tuned! &lt;br&gt;
Well friends!! That's all for the moment, you have for a while, and remember: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do what you love every day and try to be the best version of you! &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML5  and the myth of the markups language</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 20:57:48 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html5-and-the-myth-of-the-markups-language-4cfk</link>
      <guid>https://dev.to/whitehatdevv/html5-and-the-myth-of-the-markups-language-4cfk</guid>
      <description>&lt;p&gt;Have you ever googled something, no matter what it is, a recipe, a meme or even a school assignment, and prayed that the answer would show up on a web page? I have too, and that's why on more than one occasion I've wondered how it worked that got me out of troubles.&lt;br&gt;
And that's the reason for this course, to explain from the basics to the most advanced HTML and how websites are organized, how to give them color with CSS3 and life with JavaScript.&lt;/p&gt;

&lt;p&gt;Okay! to start with this:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-html-and-what-does-it-do-you-can-ask-me-or-not"&gt;
  &lt;/a&gt;
  WHAT IS HTML and WHAT DOES IT DO? (you can ask me or not...)
&lt;/h2&gt;

&lt;p&gt;HTML stands for (hypertext markup language) that although many call it "programming language" should insist to stop considering it as such, because it is something even more magical is a "markup language" because it organizes how a document will be, what elements compose it, in short it is like making a Word document for the Internet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-look-like"&gt;
  &lt;/a&gt;
  WHAT DOES IT LOOK LIKE?
&lt;/h2&gt;

&lt;p&gt;As I have said so far, HTML is a markup language and not a scripting language, but what does this mean? It means that it is enclosed between tags (angle brackets), so it would look like this a :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;content&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However this is not always the case, there are tags that do not need the enclosing tag, for example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's not all... we can... add... ATTRIBUTES! YES! just as you read ATTRIBUTES! but what are they? they are like "upgrades" of the tags that allow them to get superpowers to improve their capabilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tag&lt;/span&gt; &lt;span class="na"&gt;attribute=&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;content&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems interesting, doesn't it? Well, don't worry, in the next posts I'll be telling you a little more so you won't be left wanting. See you in the next one ! and remember to do what you love every day.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Improving your communication skills as a software developer</title>
      <author>Tanaka Mutakwa</author>
      <pubDate>Tue, 23 Nov 2021 20:43:42 +0000</pubDate>
      <link>https://dev.to/tanakamutakwa/improving-your-communication-skills-as-a-software-developer-3hh0</link>
      <guid>https://dev.to/tanakamutakwa/improving-your-communication-skills-as-a-software-developer-3hh0</guid>
      <description>&lt;p&gt;Communication with other people is an important part of a software developer’s career. As a software developer, you will often communicate with other developers on your team, non-technical people on your team, stakeholders, and users of your software.&lt;/p&gt;

&lt;p&gt;Having good communication skills will help you work well with your team and others through communicating your messages across effectively.&lt;/p&gt;

&lt;p&gt;Software development is a technical field and developing your technical skills often takes priority over other skills. However, it can be argued that communication skills are equally as important as technical skills. Failures in software teams result more often from communication issues than from technical problems.&lt;/p&gt;

&lt;p&gt;Software developers are often expected to naturally have good communication skills. However, this is not the case in reality. Most software developers have poor or underdeveloped communication skills. Similar to technical skills, you have to work on improving your communication skills. Both written and spoken communication skills are important to develop.&lt;/p&gt;

&lt;p&gt;In this article you will learn different approaches you can use to improve your communication skills as a software developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-to-listen"&gt;
  &lt;/a&gt;
  Learn to listen
&lt;/h2&gt;

&lt;p&gt;Listening is the most important skill to develop if you want to become a good communicator. This is because great communication happens when all parties reach a point of mutual understanding.&lt;/p&gt;

&lt;p&gt;In a highly technical job such as software development, reaching a mutual understanding is even more important. Differences in understanding of an implementation can lead to errors and bugs, extended project timelines, and disappointment from unmet expectations.&lt;/p&gt;

&lt;p&gt;As human beings we often rush to express our thoughts and opinions without allowing the person we are communicating with to finish speaking. We stop listening the moment we think of an opposing point or what is we believe is a better idea. This leads to bad communication habits.&lt;/p&gt;

&lt;p&gt;To improve your communication, you must learn to not interrupt others when they speak to you. Listen carefully to what the other person is saying. Give them time to say everything they want to say before you add to the conversation. When you are ready to add your own thoughts to the conversation, one thoughtful technique is to quickly rephrase what the other person just said so it is clear that you have understood what they are communicating.&lt;/p&gt;

&lt;p&gt;Your body language also plays an important role when you are listening to someone else speaking to you. Being engaged in the conversation shows you are interested in what the other person has to say and is also a sign of respect. Have a comfortable amount of eye contact, stand/sit with a good posture, focus on the conversation (don’t look elsewhere or use your phone).&lt;/p&gt;

&lt;p&gt;Listening is fundamental to good communication and should be the first skill you work on improving as a software developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#present-your-work-to-others"&gt;
  &lt;/a&gt;
  Present your work to others
&lt;/h2&gt;

&lt;p&gt;As a software developer it is important to be good at communicating about your work and ideas with others. This is how good collaboration starts. You have to be able to express yourself clearly when talking about what you built, why you built it, and how you built it.&lt;/p&gt;

&lt;p&gt;You have to be able to determine how to communicate appropriately depending on context. Most of the time you will be communicating with other developers and you can communicate in a very technical way. Other times you will be communicating with a non-technical audience and you will need to communicate in a way people understand what you are saying without using technical jargon.&lt;/p&gt;

&lt;p&gt;One of the best ways to practice improving spoken communication is through presenting your work to others. Present your work to your team and other people. Volunteer to be the presenter at team demos, code reviews, stand-ups, and any other opportunities that are available in your workplace.&lt;/p&gt;

&lt;p&gt;Always ask for feedback from a few people after you have presented your work.  &lt;a href="https://thenewdeveloper.substack.com/p/feedback"&gt;Use the feedback&lt;/a&gt;  to help you improve your future presentations. Over time you will become better at expressing your ideas and talking about your work. It will also become less stressful when you have to present your work to others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speak-at-meetups-and-conferences"&gt;
  &lt;/a&gt;
  Speak at meetups and conferences
&lt;/h2&gt;

&lt;p&gt;Public speaking can be a nerve wrecking experience for software developers. One of the best ways to improve your public speaking skills is by committing to speak at a software meetup or conference.&lt;/p&gt;

&lt;p&gt;Identify some meetups of conferences in your area and apply to speak about a topic you are passionate about. Once you are selected as a speaker for a meetup or conference you will have to practice so you can deliver a great talk. This is where all the learning happens.&lt;/p&gt;

&lt;p&gt;You will need to develop skills such as making good eye contact with the audience, speaking at a volume everyone can hear you, using good body language and posture, and speaking with clarity. All these skills that are useful for delivering a great talk will improve your general communication skills as a side-effect.&lt;/p&gt;

&lt;p&gt;If you constantly practice public speaking you will improve your spoken communication skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-documentation"&gt;
  &lt;/a&gt;
  Write documentation
&lt;/h2&gt;

&lt;p&gt;Writing some documentation will provide you with an excellent and free written communication exercise. As a software developer working in a team there will be many opportunities to write some required documentation.&lt;/p&gt;

&lt;p&gt;Examples of documentation written by software developers includes, deploy notes, code review notes, user instructions, API documentation, incident reports, product / project proposals and many others. All these documents need to be written with clear communication for their audience.&lt;/p&gt;

&lt;p&gt;To improve your written communication skills, volunteer to write some documentation when the opportunities present themselves. Always  &lt;a href="https://thenewdeveloper.substack.com/p/feedback"&gt;ask for feedback&lt;/a&gt;  from the audience of the documentation that you write. This will help you improve any future documents that your write.&lt;/p&gt;

&lt;p&gt;The documentation that you write can be technical or non-technical. Both are important aspects of day-to-day software developer communication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-a-blog"&gt;
  &lt;/a&gt;
  Start a blog
&lt;/h2&gt;

&lt;p&gt;Starting your own blog is also another great way to practice and improve your written communication skills. Having your own blog will give you a public audience and you will need to learn how to write your blog posts so they communicate topics in a simple way with clarity.&lt;/p&gt;

&lt;p&gt;On your blog you can write about any topics that you are passionate about. This will help with your motivation for starting a blog and publishing blog posts consistently. Remember writing consistently is the best form of practice and over time your writing skills will improve.&lt;/p&gt;

&lt;p&gt;If you keep comments from the audience open on your blog you will also be able to receive feedback from your audience. Use the feedback to improve future posts and improve how you communicate back-and-forth with the audience.&lt;/p&gt;

&lt;p&gt;Over time you will become more confident about how you express your thoughts publicly which is a skill all software developers require as they work in teams over their careers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-new-developer"&gt;
  &lt;/a&gt;
  The New Developer
&lt;/h2&gt;

&lt;p&gt;This article was originally published on  &lt;a href="https://thenewdeveloper.substack.com/"&gt;The New Developer&lt;/a&gt;. Head over there if you like this post and want to read others like it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;As a software developer, being able to communicate in a clear and concise way is fundamental to having a successful career. Software developers rarely work in isolation. There are other parties involved, other developers, stakeholders, users and many others.&lt;/p&gt;

&lt;p&gt;Technical skills development is often given priority by software developers, however, improving communication skills is also very important. In this article you learned about different approaches you can use to improve your communication skills as a software developer.&lt;/p&gt;

&lt;p&gt;I am interested to hear what other approaches you are using to improve your communication skills? Let me know in the comments.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
  </channel>
</rss>
