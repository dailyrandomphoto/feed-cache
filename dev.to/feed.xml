<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Advantages of Learning Web Development💡</title>
      <author>Ujjwal (UG THE SEP)</author>
      <pubDate>Thu, 23 Sep 2021 18:20:48 +0000</pubDate>
      <link>https://dev.to/ug/advantages-of-learning-web-development-467p</link>
      <guid>https://dev.to/ug/advantages-of-learning-web-development-467p</guid>
      <description>&lt;p&gt;So the first question which comes before learning Web development for beginners it that &lt;strong&gt;Why should I learn Web development&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will know about advantages of learning Web Development in 2021&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TgMEGoZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbsfskyk9smg7zj08jzz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgMEGoZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbsfskyk9smg7zj08jzz.jpeg" alt="Creativity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-to-light-up-your-creativity"&gt;
  &lt;/a&gt;
  1. To Light up your creativity💡
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Website Development let your mind &lt;strong&gt;free&lt;/strong&gt; to think and apply whatever you want. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can merge color and form any design&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create an illusion using &lt;strong&gt;div&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can present your own animation and it is the most important thing that we open our mind to think out of the box.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: It will help you to enhance your presentation skill. You can express your thought by creating Websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-to-enhance-your-designing-skills"&gt;
  &lt;/a&gt;
  2. To Enhance Your Designing Skills🎨
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfYM4snM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yfb0dme60sa4l0qipsn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfYM4snM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yfb0dme60sa4l0qipsn.png" alt="Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designing is a part of creating your website or presenting your website in front of your customers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap is a nice framework to create design. Designing also affects your mind to think out of the box.&lt;/li&gt;
&lt;li&gt;Best design is that which have proper spacing, navigation, alignment, proper use of color and font, clarity and topography. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: It will take you to become a good designer but consistency is the key to success always play with color font to understand their chemistry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-to-enhance-problem-solving-ability"&gt;
  &lt;/a&gt;
  3. To Enhance Problem solving ability💎
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rihUR0Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kn6ddszhccmoohlfokz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rihUR0Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kn6ddszhccmoohlfokz.jpg" alt="Problem-Solving Ability"&gt;&lt;/a&gt;&lt;br&gt;
You may face many minor bugs while creating Websites which were not noticed by you and create a major problem in future&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Also think that what can be the disadvantage of using any particular tag&lt;/li&gt;
&lt;li&gt;If something is not working properly then check whether you didn't miss any tag to close&lt;/li&gt;
&lt;li&gt;The most useful is dry run your code&lt;/li&gt;
&lt;li&gt;Cross-Browser testing&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The major problem is to keep secure your websites from hacker or viruses. Always upgrade your security&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#4-high-chance-to-get-job"&gt;
  &lt;/a&gt;
  4. High chance to get Job🤑
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9itjVRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60zh2ceqpl49qaqz4yqo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9itjVRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60zh2ceqpl49qaqz4yqo.jpg" alt="Money"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a Full-Stack Developer there is high chance to get job because there is a large demand in market for Full-Stack Developer. So you can apply for it if you are a Full-Stack Developer. &lt;br&gt;
There is a 20% growth in demand for Full-stack developer compared to the last couple of years with approximately 12,996 open positions for this role in the US alone.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can even start freelancing &lt;/li&gt;
&lt;li&gt;You can create website for your neighbourhood as if they have a shop&lt;/li&gt;
&lt;li&gt;You have a wonder life&lt;/li&gt;
&lt;li&gt;No issue of capital&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Add on some more advantages in the comment section👇&lt;/p&gt;

&lt;p&gt;Start Learning Web Development for free &lt;br&gt;
&lt;a href="https://www.coursera.org/courses?query=web%20development"&gt;Coursera free Web development course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me for more such blogs😊&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__648350"&gt;
  
    .ltag__user__id__648350 .follow-action-button {
      background-color: #fad20a !important;
      color: #fb9660 !important;
      border-color: #fad20a !important;
    }
  
    &lt;a href="/ug" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/ug"&gt;Ujjwal (UG THE SEP)&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/ug"&gt;I am a desktop developer from India currently learning python. Exploring the world of programming&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#readmore"&gt;
  &lt;/a&gt;
  Readmore
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ug/top-5-website-to-learn-web-development-2k4h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 Websites to Learn Web Development &lt;/h2&gt;
      &lt;h3&gt;Ujjwal (UG THE SEP) ・ Sep 3 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ug" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6JMttXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hoYHdU6J--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/648350/1f25f109-0b5a-4248-8308-8950d68f9638.jpeg" alt="ug"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ug/top-5-ide-for-web-development-4df8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 IDE for Web Development🤩&lt;/h2&gt;
      &lt;h3&gt;Ujjwal (UG THE SEP) ・ Sep 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>11 Best No-Code and Low-Code Back-Ends for 2021
</title>
      <author>Aman Mittal</author>
      <pubDate>Thu, 23 Sep 2021 18:10:16 +0000</pubDate>
      <link>https://dev.to/amanhimself/11-best-no-code-and-low-code-back-ends-for-2021-4i7</link>
      <guid>https://dev.to/amanhimself/11-best-no-code-and-low-code-back-ends-for-2021-4i7</guid>
      <description>&lt;p&gt;No-code and Low-code development platforms let people worldwide build their businesses and applications to serve them without writing code. According &lt;a href="https://go.forrester.com/blogs/predictions-2020-software-development/"&gt;Forrester&lt;/a&gt;, the no-code/low-code category will grow to $21.2 billion by 2021.&lt;/p&gt;

&lt;p&gt;Before these platforms, building an application for a business would require hiring experienced software developers. But that's not the case anymore. Today, many no-code/low-code platforms make it possible for independent creators, artists, and entrepreneurs alike to build applications on their own.&lt;/p&gt;

&lt;p&gt;Even though there seems to be a paradigm shift from writing code to using visual development tools, the fundamental concepts of having a back-end and front-end remain the same. To build an application for your business, you will require a way to connect your back-end and front-end. A communication channel called Application Programming Interface (API) is used to request information from one computer system to another. When developing an application, you typically call APIs back and forth between a back-end and a front-end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draftbit.com/"&gt;Draftbit&lt;/a&gt; is a visual development platform to build native mobile applications. It is back-end agnostic. Mobile apps built with Draftbit can be connected to virtually any back-end-as-a-service (BaaS) platform via REST API. Our vast user base uses different back-end services to connect their applications with a database. This allowed us to look at the most popular back-ends being integrated inside Draftbit. For example, Xano, Supabase, Firestore, Airtable, and more that aim to provide a better user experience overall. We are also &lt;a href="https://draftbit.com/experts"&gt;app development experts&lt;/a&gt; and can guide you towards the right back-end and what to look for.&lt;/p&gt;

&lt;p&gt;This article aims to highlight some of the best no-code/low-code back-end platforms for you to use in 2021. We highlight their unique features, if the tool offers scalability, and if it is flexible enough or not. Lastly, for each tool, there is a sneak peek into their pricing plans. Many of the back-end tools listed below provide an API gateway to connect the front-end from a hosted back-end offered by the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#airtable"&gt;
  &lt;/a&gt;
  Airtable
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wyi23YtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2xv7oufh9vs4xv9uox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wyi23YtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2xv7oufh9vs4xv9uox.png" alt="Airtable logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Beginners who want a visual, flexible back-end and are just getting started with understanding APIs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt; is an enhanced version of Google Sheets or a typical spreadsheet. However, it offers more than that. Simple to get started, it has rich API support. It allows creating a spreadsheet-based database without the hassle of writing code. In addition, it is a fast and flexible way to organize data tables (known as &lt;em&gt;Bases&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;It contains features such as computed fields. They are special field types where Airtable handles the computation of values. Automating repetitive tasks saves a ton of time and reduces the margin of error. Building automated workflows in an Airtable base is done by using a custom action to trigger an event. Eventually, the action integrates inside an Airtable Base.&lt;/p&gt;

&lt;p&gt;Airtable also generates a REST API for each base. A front-end development tool can consume the API directly. Various operations are performed using different endpoints generated by Airtable. Operations such as reading, writing, updating, sorting and filtering data, and more, are all available.&lt;/p&gt;

&lt;p&gt;While Airtable might not be a traditional back-end, it gives both teams and individuals the freedom to organize tasks. In addition, it offers 50+ built-in applications to easily integrate with a wide array of other apps like G Suite, Outlook, Sendgrid, Slack, Jira, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: unlimited bases with each base limited to 1200 records and 2 GB of attachments per base.&lt;/li&gt;
&lt;li&gt;Plus: costs $12 per month with 5000 records per base, snapshot history, and 5 GB of attachments per base.&lt;/li&gt;
&lt;li&gt;Pro: costs $24 per month with unlimited apps, 50000 records per base, and 20 GB of attachments per base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#supabase"&gt;
  &lt;/a&gt;
  Supabase
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcGOG_PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmm7jkj8z3z28nz6z6sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcGOG_PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmm7jkj8z3z28nz6z6sg.png" alt="Supabase logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Experts who are building production-grade applications, are familiar with SQL queries, value open-source, and want a scalable solution from the start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is an open-source Firebase alternative back-end. It provides a dedicated database based on Postgres. It supports importing existing databases as well. Besides, there is built-in support for making authenticated API requests with integrated JWT authentication. This allows you to control what your app users can access. It exposes a WebSocket endpoint that enables any front-end apps to communicate in real-time. The advantage of using a relational database is that it helps you be consistent all the time. &lt;/p&gt;

&lt;p&gt;Relational or SQL databases are table-based databases. They have pre-defined schema and use Structured Query Language (&lt;em&gt;SQL&lt;/em&gt;) for defining and manipulating data. Non-relational or NoSQL databases have dynamic schema. They store data in the form of a collection or multiple collections of documents.&lt;/p&gt;

&lt;p&gt;When using Supabase, you will spend most of the time inside its Graphical User Interface (&lt;em&gt;GUI&lt;/em&gt;). It also provides an SQL editor, which you can use to write custom SQL queries to manipulate data inside a table.&lt;/p&gt;

&lt;p&gt;One of the most likable features is that it provides a ready-to-use REST API as soon as a database is created. It is front-end agnostic and can be used with any front-end tool building application. It gives you the choice of either self-hosting a Supabase or using their cloud service to host one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: $0 per month with unlimited API requests, real-time functionality, and database space up to 500 MB.&lt;/li&gt;
&lt;li&gt;Pro: $25 per month unlimited API requests, real-time functionality, database space up to 8 GB, supports automatic backup and log retention for up to 7 days.&lt;/li&gt;
&lt;li&gt;Pay as you go: Starts at $25 per month plus the usage of services like database space, storage, and transfer limits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#firebase-firestore"&gt;
  &lt;/a&gt;
  Firebase Firestore
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtX4zxXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhnm15u5zck2mi858k2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtX4zxXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhnm15u5zck2mi858k2j.png" alt="Cloud Firestore logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Intermediates who are looking to build fast, want to delegate security and user management to the backend service, and can cope with some learning curve.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs/firestore"&gt;Firebase Firestore&lt;/a&gt; is a database service from Google. It has a colossal community even though Firestore came out of beta only two years back. It is a managed database designed to embrace serverless application development. With an Opinionated set of features, it provides and is based on NoSQL.&lt;/p&gt;

&lt;p&gt;The NoSQL paradigm lets you store data in the form of collections and documents. Each document contains fields. Every field has its unique data type. The advantage of such a database type is that it helps you move fast when building applications.&lt;/p&gt;

&lt;p&gt;Firestore has its own built-in security system. It helps you to define rules to allow app users to access data based on their authenticated state. It supports traditional sign providers using email/password. Social providers such as Google, Facebook, Apple, Twitter, and more.&lt;/p&gt;

&lt;p&gt;Integrating Firebase with a front-end development platform is a bit opinionated. It usually means that a no-code or a low-code platform has to provide an out-of-the-box integration for Firebase to use within their platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spark Plan(free): 1 GiB total stored data in Firestore&lt;/li&gt;
&lt;li&gt;Blaze plan (pay as you go): 1 GiB total plus $0.108 per more GiB stored data in Firestore&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#xano"&gt;
  &lt;/a&gt;
  Xano
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBVNRCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu33u3e0btqa1brn41cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBVNRCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu33u3e0btqa1brn41cl.png" alt="Xano logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Low-Coders who want to move fast, and need a scalable database with a built-in API gateway.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.xano.com/"&gt;Xano&lt;/a&gt; is a scalable back-end that is front-end agnostic. It provides a hosted and flexible database based on Postgres. It supports the REST API paradigm to consume data to a front-end tool. It automatically generates ready-to-use REST API endpoints for each data table based on the schema created. Each endpoint generated by Xano can be customized using its No code API Builder.&lt;/p&gt;

&lt;p&gt;Getting started with Xano is easy. There aren't many configurations required once you log in. It abstracts the back-end away to a large extent. However, the abstraction doesn't cost the performance and the power of a database. Another feature included with Xano is that it supports authenticated API requests. It also provides the ability to create custom functions to query databases without writing a line of code. The flexibility and scalability of such a platform make it one of the most simple back-end to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: limited to one workspace with 1000 total records and a rate-limited API.&lt;/li&gt;
&lt;li&gt;Launch: costs $67 per month, includes five workspaces with 100,000 total records per workspace, and no rate limitation on the API.&lt;/li&gt;
&lt;li&gt;Scale: costs $225 per month, includes 10 workspaces, storage with 1,000,000 total records.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bubble-cms"&gt;
  &lt;/a&gt;
  Bubble CMS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_i4DSxOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn3s199k62z7f6ovxyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_i4DSxOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn3s199k62z7f6ovxyr.png" alt="Bubble CMS logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for No-Coders who already have their web application built and database hosted with Bubble.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bubble.io/"&gt;Bubble&lt;/a&gt; is a hosted web application “all in one” builder that gives complete design freedom to its users with no-code. It allows you to create web application layouts without having any knowledge of CSS or HTML. Traditional web apps require you to manage the code and set up a deployment process to a web server. The platform manages the deployment process and web hosting for you.&lt;/p&gt;

&lt;p&gt;Despite Bubble being an all-in-one tool, their powerful Bubble CMS is also easy to connect to any other front-end development tool. Thus, you can consume the same data tables created inside the Bubble CMS to connect it with any other front-end tool, for example, to develop native applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: no access to API&lt;/li&gt;
&lt;li&gt;Personal: costs $29 per month with access to API&lt;/li&gt;
&lt;li&gt;Professional: costs $129 per month&lt;/li&gt;
&lt;li&gt;Production: costs $529 per month&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backendless"&gt;
  &lt;/a&gt;
  Backendless
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8feiFSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z32s28jc1uk873uu8zql.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8feiFSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z32s28jc1uk873uu8zql.jpeg" alt="Backendless logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Low-coders looking for a solution to host their database in the cloud and looking for integrated services such as file storage.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; is a cloud back-end platform to create apps without writing any server-side code. It provides programmable services that supply standard server functions. In addition, it supports authenticated user management, authenticated API requests, relational data, push notifications, publish/subscribe messaging, geolocation, video/audio recording, live streaming on the server, file service, and more.&lt;/p&gt;

&lt;p&gt;Backendless makes these services available through the implementation of REST API. It provides access to a REST API that can be used with any front-end tool. Apart from its REST API support, it also supports native SDKs for iOS, Android, JavaScript applications, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Springboard: costs $0 per month with unlimited API calls per month&lt;/li&gt;
&lt;li&gt;Cloud9: costs $35 per month with 10,000,000 API calls per month&lt;/li&gt;
&lt;li&gt;Free: costs $149 per month with 40,000,00 API calls per month&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contentful"&gt;
  &lt;/a&gt;
  Contentful
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmwEBOe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25bm9rjrxgh4scmea7uo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmwEBOe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25bm9rjrxgh4scmea7uo.png" alt="Contentful logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Intermediates who are looking for a Content Management platform that provides an API gateway to create media-intensive applications.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.contentful.com/"&gt;Contentful&lt;/a&gt; is an API-first content management platform to create, manage and publish content to any digital channel. It is a modern Content Management System (CMS) where a content model is created independently from any presentation layer. It organizes content into spaces that allow you to group all the related resources for a project together, including content entries, media assets, and settings for localizing content into different languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Community: costs $0 with full-featured headless CMS&lt;/li&gt;
&lt;li&gt;Team: costs US$489 per month, ideal for a team working on or more digital products&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hasura"&gt;
  &lt;/a&gt;
  Hasura
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dycgdf9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn3eet4giwd694uze3z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dycgdf9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn3eet4giwd694uze3z2.png" alt="Hasura logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Experts who are looking for a fast GraphQL based solution and want backward compatibility with REST.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt; is an instant real-time GraphQL APIs engine. It makes your data instantly accessible through a GraphQL API or a REST API. This helps you to focus on the build and ship applications much faster.&lt;/p&gt;

&lt;p&gt;Hasura connects to a database using a Postgres connection. It can scale horizontally and hold state for caching queries. Authentication based on JSON Web Tokens (JWT) is available to add permission or a role-based system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: costs $0 and includes 1 GB data pass-through&lt;/li&gt;
&lt;li&gt;Standard: costs $99 per month and includes 20 GB data pass-through&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fauna"&gt;
  &lt;/a&gt;
  Fauna
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6rRF3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuieb0rnjdnyff081znx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6rRF3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuieb0rnjdnyff081znx.jpeg" alt="Fauna logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Experts who can deal with a little bit of learning curve and are looking for a transactional, serverless database.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fauna.com/"&gt;Fauna&lt;/a&gt; is a database as a service that works well with serverless applications. It is not a traditional database. It has its own query language called FQL. It provides flexible data modeling and supports ACID transactions that eliminate data anomalies.&lt;/p&gt;

&lt;p&gt;While Fauna is more of a complete database solution, usually to generate an API, you will have to use a tool like &lt;a href="https://nocodeapi.com/"&gt;NoCodeApi.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Individual: costs $25 per month&lt;/li&gt;
&lt;li&gt;Team: $150 per month&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#directual"&gt;
  &lt;/a&gt;
  Directual
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ns2vOwuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlhx2381gszq4ywnlk3s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ns2vOwuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlhx2381gszq4ywnlk3s.jpeg" alt="Directual logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Low-coders who are looking for a scalable NoSQL database that supports advance API configurations such as authentication.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.directual.com/"&gt;Directual&lt;/a&gt; provides a cloud-hosted scalable NoSQL database. It provides tools to configure a database with the support of data structures and object fields. It also supports the vast majority of data types such as string, number, file, and more.&lt;/p&gt;

&lt;p&gt;It has an in-built web page builder interface and is free to connect to any other low-code or no-code tool. In addition, you can create web or mobile interfaces using its RESTful API feature using any front-end platform.&lt;/p&gt;

&lt;p&gt;It offers an API builder that supports configuring advanced API settings to make authenticated API requests, user management, and event processing without setting up the infrastructure. It also includes filtering, validation, sorting, and custom query params processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: includes one developer seat with 3k operations.&lt;/li&gt;
&lt;li&gt;Startup: costs $39 per month with three developer seats and 30k operations.&lt;/li&gt;
&lt;li&gt;Pro: costs $129 per month with five developer seats and 500k operations.&lt;/li&gt;
&lt;li&gt;Business: costs $439 per month with 10 develop seats and 2M operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#back4app"&gt;
  &lt;/a&gt;
  Back4App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWuVJwE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fypj99bvna4u98rsf1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWuVJwE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fypj99bvna4u98rsf1s.png" alt="Back4App logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best for Experts who want an advanced solution that supports authentication, file storage, supports REST, and GraphQL, and who value open-source.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.back4app.com/"&gt;Back4App&lt;/a&gt; is an open-source low-code platform to develop modern applications. It supports creating a spreadsheet-like database. It includes data storage, RESTful and GraphQL APIs, file storage, authentication, and push notifications.&lt;/p&gt;

&lt;p&gt;It offers a solution to integrate GDPR compliance into your application. It also offers two hosting options. You can either choose shared if you are looking for a cost-effective solution or dedicated to scaling and large applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back4app has the most &lt;a href="https://www.back4app.com/parse-pricing"&gt;vibrant and vast pricing options&lt;/a&gt; than any other back-end platform on this list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free: up to 10k requests per month&lt;/li&gt;
&lt;li&gt;Solo: starts at $5 for 50k requests per month&lt;/li&gt;
&lt;li&gt;Basic: starts at $25 for 500k requests per month&lt;/li&gt;
&lt;li&gt;Standard: starts at $50 for 2M requests per month&lt;/li&gt;
&lt;li&gt;Silver: starts at $200 with unlimited requests per month&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Given the demand for no-code and low-code applications in recent times, it is not a surprise that there are various options for creating the back-end for your application.&lt;/p&gt;

&lt;p&gt;Depending on your requirements, any one of these tools will help you kickstart low-code app development. However, each back-end platform described in this list has its advantages and limitations. Therefore, it is crucial to consider which suits your needs the best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;If you are interested in learning more about No-code/Low-code development or building native mobile apps visually, check out the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Draftbit on Twitter — &lt;a href="https://twitter.com/draftbit"&gt;@draftbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.draftbit.com/docs/rest-api-integrations"&gt;Guides on using above mentioned back-ends with Draftbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Me on Twitter — &lt;a href="https://twitter.com/amanhimself"&gt;@amanhimself&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you need help or have questions, visit the &lt;a href="https://community.draftbit.com/"&gt;Draftbit Community&lt;/a&gt; forums.&lt;/p&gt;

</description>
      <category>lowcode</category>
      <category>mobile</category>
      <category>serverless</category>
      <category>api</category>
    </item>
    <item>
      <title>What is Hacktoberfest? Best opensource program for beginners!</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Thu, 23 Sep 2021 18:04:20 +0000</pubDate>
      <link>https://dev.to/rishabh062/what-is-hacktoberfest-best-opensource-program-for-beginners-32ff</link>
      <guid>https://dev.to/rishabh062/what-is-hacktoberfest-best-opensource-program-for-beginners-32ff</guid>
      <description>&lt;p&gt;&lt;em&gt;"Hacktoberfest is a month-long celebration of open source software." - DigitalOcean&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open source is changing the world – one contribution at a time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this very wonderful lines , let's start our blog on this very interesting opensource journey.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-hacktoberfest-2021-"&gt;
  &lt;/a&gt;
  What is hacktoberfest 2021 ?
&lt;/h4&gt;

&lt;p&gt;This event is hosted by &lt;em&gt;Digitalocean&lt;/em&gt; from around 8 years , hacktoberfest encourages participants for contributing to various opensource project by creating at least 4 valid pull requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best part about it:&lt;/strong&gt; All backgrounds and skills levels are encouraged to complete the challenge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To sum up everything in simple terms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to create 4 valid pull request (with given conditions) in a month of october so that you can get swags(&lt;strong&gt;T-shirt and cool stickers&lt;/strong&gt;) delivered to your home.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-are-a-beginners-then-this-event-is-best-for-you-to-get-into-opensource"&gt;
  &lt;/a&gt;
  If you are a beginners, then this event is best for you to get into opensource.
&lt;/h3&gt;

&lt;p&gt;Follow me here for more updates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/rishabh-dwivedi-28737b1a0"&gt;Linkedln&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/Rishabh07147212"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>watercooler</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Simple Logo Creator Bot</title>
      <author>Lucifer25x</author>
      <pubDate>Thu, 23 Sep 2021 17:45:24 +0000</pubDate>
      <link>https://dev.to/lucifer25x/simple-logo-creator-bot-3989</link>
      <guid>https://dev.to/lucifer25x/simple-logo-creator-bot-3989</guid>
      <description>&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  Github repo:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Lucifer25x/simple-logo-bot"&gt;https://github.com/Lucifer25x/simple-logo-bot&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bot-commands"&gt;
  &lt;/a&gt;
  Bot commands:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/get {name} - Sends logo with name&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#used-dependencies"&gt;
  &lt;/a&gt;
  Used Dependencies:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;telegraf&lt;/li&gt;
&lt;li&gt;nodemon&lt;/li&gt;
&lt;li&gt;dotenv&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pillow&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-your-own-logo-creator-bot"&gt;
  &lt;/a&gt;
  Create your own Logo Creator bot:
&lt;/h2&gt;

&lt;p&gt;Clone repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/Lucifer25x/simple-logo-bot.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create .env file and type your bot token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN=your_bot_token
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install npm dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install Pillow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Three instructors that helped me learn web development</title>
      <author>Darshan Damre</author>
      <pubDate>Thu, 23 Sep 2021 17:20:36 +0000</pubDate>
      <link>https://dev.to/darshandamre/three-instructors-that-helped-me-learn-web-development-47dj</link>
      <guid>https://dev.to/darshandamre/three-instructors-that-helped-me-learn-web-development-47dj</guid>
      <description>&lt;p&gt;I decided to learn web development earlier this year. I knew some HTML, had no idea about CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;I started learning javascript by following Hitesh Choudhary's JavaScript playlist on YouTube. I love the way Hitesh teaches, simplifying all the jargon that programmers use so that anyone can understand. I still go back to those videos to revise some key concepts. What I love about his videos is that he also teaches to go through the documentation. Every programmer knows the importance of reading documentation and difficulties while reading it. Thanks to Hitesh for making me understand the importance of reading documentation in my initial days of learning. As a result, I don't hate going through the docs.&lt;/p&gt;

&lt;p&gt;You can check out his free &lt;a href="https://youtube.com/playlist?list=PLRAV69dS1uWSxUIk5o3vQY2-_VKsOpXLD"&gt;JavaScript course on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it was time to learn CSS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynNDnoNb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpf0j90s6898h1fvjqy9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynNDnoNb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpf0j90s6898h1fvjqy9.jpg" alt="css-is-awesome"&gt;&lt;/a&gt;&lt;br&gt;
I started learning CSS through online videos and then realized that I didn't understand anything. Later, I came across Kevin Powell's YouTube channel and took his free CSS flexbox course - &lt;a href="https://courses.kevinpowell.co/conquering-responsive-layouts"&gt;Conquering Responsive Layouts&lt;/a&gt;. I'm so glad I took that course. It made writing CSS so simple and made me understand flexbox. I love the way this course was structured. It is a 21-day course and also includes challenges which makes the course very much interactive. When you sign up for the course, you do not get access to all the course content. Some videos and challenges get unlocked every day. It helps in being consistent and practicing some CSS every day. I remember flexbox used to make me so nervous, and now it is so easy to work with. I am currently learning CSS grid through his YouTube videos.&lt;/p&gt;

&lt;p&gt;Making projects is one of the most important parts of learning programming. This is where Tanay Pratap helped me make projects, and the community he has built on his discord server helped me whenever I got stuck in the projects. Now, having some skills in web development, I also help absolute beginners solve their errors on his discord server.&lt;/p&gt;

&lt;p&gt;You can check out &lt;a href="https://www.youtube.com/c/TanayPratap"&gt;Tanay Pratap's YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Serverless básico</title>
      <author>Lucas Ferreira</author>
      <pubDate>Thu, 23 Sep 2021 16:59:24 +0000</pubDate>
      <link>https://dev.to/biglucas/serverless-basico-51m7</link>
      <guid>https://dev.to/biglucas/serverless-basico-51m7</guid>
      <description>&lt;p&gt;Serverless é uma arquitetura baseada em funções como um serviço (FaaS - &lt;em&gt;Function as a Service&lt;/em&gt;), o principal objetivo é que o desenvolvedor se preocupe apenas com o código da função (lógica do negócio) e a responsabilidade pela configuração do ambiente/máquina que vai rodar o código fique por conta do provedor de cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#caracter%C3%ADsticas"&gt;
  &lt;/a&gt;
  Características
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Ambiente sem estado para rodar o código&lt;/strong&gt;, cada evento que aciona a função &lt;strong&gt;PODE&lt;/strong&gt; ser processado em um ambiente completamente novo, isso limita por exemplo a utilização do sistema de arquivos do ambiente onde o código está rodando e um novo processamento está desacoplado dos processamentos anteriores.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tempo de execução limitado&lt;/strong&gt;, o processamento deve ocorrer dentro de um período de tempo, se a execução não estiver completa o ambiente onde o código está rodando simplesmente morre.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Orientado a eventos&lt;/strong&gt;, cada função de uma aplicação serverless tem um ou mais gatilhos que acionam a execução do código.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#c%C3%B3digo-b%C3%A1sico-com-o-framework-serverless"&gt;
  &lt;/a&gt;
  Código básico com o framework Serverless
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;memorySize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt;
  &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./UserHandler.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;users&lt;/span&gt;
          &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// UserHandler.js&lt;/span&gt;
&lt;span class="c1"&gt;// aws sample&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com o comando abaixo é possível realizar a implantação da função no provedor de cloud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx serverless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando uma requisição chegar na rota registrada no API Gateway um novo evento será disparado e este evento pode ser processado por uma função nova (&lt;em&gt;cold&lt;/em&gt;) ou por uma função ativa (&lt;em&gt;warm&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyPphy6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj4vtqmoohx8k2bbn7fa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyPphy6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj4vtqmoohx8k2bbn7fa.png" alt="serverless_article"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#diferen%C3%A7as-entre-serverless-e-uma-arquitetura-cloud-com-cont%C3%AAineres"&gt;
  &lt;/a&gt;
  Diferenças entre serverless e uma arquitetura cloud com contêineres
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Uma grande diferença é que o serverless te força a quebrar suas operações e definir muito bem qual a responsabilidade da função. Isso é imposto basicamente pelo tempo limite de execução e pelos valores maiores cobrados para execuções com tempo maior ou com consumo de memória maior.&lt;/li&gt;
&lt;li&gt;As funções serverless ficam desativadas quando não existem eventos para processar, diferentemente de um contêiner rodando uma aplicação que fica 100% do tempo rodando mesmo sem requisições.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#principais-ferramentas"&gt;
  &lt;/a&gt;
  Principais ferramentas
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Serverless framework.&lt;/li&gt;
&lt;li&gt;AWS Lambda.&lt;/li&gt;
&lt;li&gt;Azure Functions.&lt;/li&gt;
&lt;li&gt;Google Cloud Functions.&lt;/li&gt;
&lt;li&gt;Infraestrutura como código.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  Referencias
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.redhat.com/pt-br/topics/cloud-native-apps/what-is-serverless"&gt;Artigo da Red Hat sobre Serverless&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/serverless-architectures-lambda/serverless-architectures-lambda.pdf#welcome"&gt;Artigo da AWS sobre Lambda&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html"&gt;Exemplo de código com AWS Lambda&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/pt-br/azure/developer/javascript/how-to/develop-serverless-apps"&gt;Exemplo de código com Azure Functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloud.google.com/functions/docs/quickstart-nodejs"&gt;Exemplo de código com Google Cloud Functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/node/"&gt;Exemplo "hello world" com o Framework Serverless&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rodolfobm/serverless-boilerplate"&gt;Modelo de projeto com o framework Serverless&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.serverless.com/blog/serverless-faas-vs-containers/"&gt;Serverless (FaaS) vs. Contêineres&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>serverless</category>
      <category>faas</category>
      <category>node</category>
      <category>ptbr</category>
    </item>
    <item>
      <title>next.js: i18n with static sites</title>
      <author>martin krause</author>
      <pubDate>Thu, 23 Sep 2021 16:54:54 +0000</pubDate>
      <link>https://dev.to/martinkr/next-js-i18n-with-static-sites-2644</link>
      <guid>https://dev.to/martinkr/next-js-i18n-with-static-sites-2644</guid>
      <description>&lt;p&gt;Recently I had a client who wanted a fast single-page-application (SPA) with an outstanding lighthouse score and multiple languages hosted on a cheap shared hosting solution only accessible by FTP ... and of course they wanted it to be build with &lt;code&gt;react.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;From the initial requirements and the following discussion we decided to have a local build step which would generate static files and transfer them to the web server.&lt;/p&gt;

&lt;p&gt;Given their limited expertise and the specific requirements I was suggesting a static-site-generator  with a custom headless setup for their content. The client was happy with the proposed architecture. I was looking into the possibility of using &lt;code&gt;next.js&lt;/code&gt; and the two major requirements: a static page served by apache and internationalization (i18n).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#true-static-files"&gt;
  &lt;/a&gt;
  True static files
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Next.js&lt;/code&gt; provides a true out-of-the-box static sites generator. The &lt;code&gt;next export&lt;/code&gt; command generates a set of fully optimized static HTML files. This export can thus be served without any dependencies by any web-server. No need to run &lt;code&gt;node.js&lt;/code&gt; etc - a regular nginx or apache installation is completely sufficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internationalization-i18n"&gt;
  &lt;/a&gt;
  internationalization (i18n)
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Next.js&lt;/code&gt; also provides an amazing out-of-the-box support for internationalized (i18n) routing and a decent ecosystem for i18n-solutions&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The i18n routing support is currently meant to complement existing i18n library solutions like react-intl, react-i18next, lingui, rosetta, next-intl and others by streamlining the routes and locale parsing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds nice and being a fan of &lt;code&gt;react-i18next&lt;/code&gt; I looked into &lt;code&gt;next-i18next&lt;/code&gt; and was quite happy to see that they support Static Generation (SSG).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To complement this, next-i18next (....) fully supporting SSG/SSR, multiple namespaces, codesplitting, etc.&lt;br&gt;
Production ready: next-i18next supports passing translations and configuration options into pages as props with SSG/SSR support.&lt;br&gt;
&lt;a href="https://github.com/isaachinman/next-i18next/"&gt;https://github.com/isaachinman/next-i18next/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Upon closer inspection, I figured: they're only supporting Static Generation (SSG) with &lt;code&gt;next start&lt;/code&gt; not &lt;code&gt;next export&lt;/code&gt;. (About the differences, read my article &lt;a href="https://dev.to/martinkr/the-two-and-a-half-one-flavors-of-next-js-s-pre-rendering-44o"&gt;The two and a half + one flavors of next.js's pre-rendering&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;next start&lt;/code&gt; spins up the &lt;code&gt;next.js&lt;/code&gt; web-server and requires &lt;code&gt;node.js&lt;/code&gt; - which was a problem for the hosting solutions. &lt;/p&gt;

&lt;p&gt;I needed an export which would run on a basic nginx. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From the next.js documentation:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Internationalized Routing does not integrate with next export as next export does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use next export are fully supported.&lt;br&gt;
&lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing#how-does-this-work-with-static-generation"&gt;https://nextjs.org/docs/advanced-features/i18n-routing#how-does-this-work-with-static-generation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-custom-i18n-solution-for-true-ssg-support"&gt;
  &lt;/a&gt;
  Creating a custom i18n solution for true SSG support
&lt;/h2&gt;

&lt;p&gt;Well, we're just going to create our own custom i18n solution&lt;/p&gt;

&lt;p&gt;Let's collect the requirements:&lt;/p&gt;

&lt;p&gt;The custom solution must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have full support for &lt;code&gt;next export&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The custom solution should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;load the translations files from a folder with minimal configuration&lt;/li&gt;
&lt;li&gt;provide a hook with the same interface as &lt;code&gt;react-i18next&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;provide a stateful-hook for the current language&lt;/li&gt;
&lt;li&gt;set / retrieve the selected language to / from the GET-parameters&lt;/li&gt;
&lt;li&gt;fallback to the default language if no GET-parameter is present&lt;/li&gt;
&lt;li&gt;set the GET-parameter on internal links and preserve existing GET-parameters &lt;/li&gt;
&lt;li&gt;provide a sample component for selecting the language&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-nextexporti18n-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;next-export-i18n&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let me introduce the &lt;a href="https://next-export-i18n-example.vercel.app"&gt;final static solution&lt;/a&gt; and feel free to take a look at the &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;source code&lt;/a&gt; which meets all the requirements.&lt;/p&gt;

&lt;p&gt;So, if you need an i18n solution which has full support for &lt;code&gt;next export&lt;/code&gt; and minimal configuration effort use the &lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;next-export-i18n npm-module&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Example implementation: &lt;a href="https://next-export-i18n-example.vercel.app"&gt;https://next-export-i18n-example.vercel.app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the npm-module: &lt;a href="https://github.com/martinkr/next-export-i18n"&gt;https://github.com/martinkr/next-export-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the example: &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;https://github.com/martinkr/next-export-i18n-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope you enjoyed the post. If you buy me a coffee I can stay awake and write another one ;)&lt;br&gt;
Have fun and if you &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Futuristic Infinite Scrolling in React and JavaScript</title>
      <author>Dhairya Nadapara</author>
      <pubDate>Thu, 23 Sep 2021 16:51:01 +0000</pubDate>
      <link>https://dev.to/dhairyanadapara/infinite-scrolling-react-45pg</link>
      <guid>https://dev.to/dhairyanadapara/infinite-scrolling-react-45pg</guid>
      <description>&lt;p&gt;There are multiple use cases in the modern UX when we are required to use infinite scrolling. Previously, devs are using the height of the viewport and element to find out the intersection of the element is in the viewport. The main issue in the same is that the function that calculations will be executed on the main queue so it makes your app a bit slow and it was bit unreliable. A few days ago I came across the Intersection Observer API. Which can be used in the following applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Lazy-loading of images or other content as a page is scrolled.&lt;/li&gt;
&lt;li&gt;  Implementing "infinite scrolling" websites, where more and more content is loaded and rendered as you scroll so that the user doesn't have to flip through pages.&lt;/li&gt;
&lt;li&gt;  Reporting of visibility of advertisements to calculate ad revenues.&lt;/li&gt;
&lt;li&gt;  Deciding whether or not to perform tasks or animation processes based on whether or not the user will see the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.&lt;/p&gt;

&lt;p&gt;Source code is available at &lt;a href="https://github.com/dhairyanadapara/infinite-scoller-example"&gt;https://github.com/dhairyanadapara/infinite-scoller-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo link: &lt;a href="https://dhairyanadapara.github.io/infinite-scoller-example/"&gt;https://dhairyanadapara.github.io/infinite-scoller-example/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with the solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; 40px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleIntersect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;options&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;handleIntersect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersectionRatio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersectionRatio&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                        &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;infinite-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cards-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://i.redd.it/b3esnz5ra34y.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_title title-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;))}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nx"&gt;Loading&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have used the react class component so it will be easy to understand. You can use functional components also.&lt;/p&gt;

&lt;p&gt;Let's start with understanding the observer initialization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;createObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; 40px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleIntersect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;IntersectionObserver&lt;/code&gt; takes 2 arguments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;options&lt;/strong&gt;&lt;br&gt;
options are the configuration for Intersection Observer. It has 3 properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;root:&lt;/strong&gt;
The element which you want to use as the viewport. If you want to use the browser's viewport pass &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;rootMargin :&lt;/strong&gt;
Offset is added to the target rectangle while calculating intersections&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;threshold:&lt;/strong&gt;
A list of thresholds, sorted in increasing numeric order. The callback will be called when &lt;code&gt;intersectionRatio&lt;/code&gt; passes the threshold&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;&lt;br&gt;
callback has 2 argument:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;entries&lt;/strong&gt;
list of IntersectionObserverEntry, which describes the intersection between target and root element&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;observer&lt;/strong&gt;
IntersectionObserver object same we have created in createObserver&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here we are observing the loading element which will be at bottom of the card list. In our case, we have only 1 target element in the observer so we will get only 1 object in entries. If you have multiple target elements targets to the same observers you will get more entries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleIntersect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersectionRatio&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;]),&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IntersectionObserverEntry object have multiple attributes like &lt;code&gt;boundingClientRect&lt;/code&gt;,&lt;code&gt;intersectionRatio&lt;/code&gt;,&lt;code&gt;intersectionRect&lt;/code&gt;,&lt;code&gt;isIntersecting&lt;/code&gt;,&lt;code&gt;rootBounds&lt;/code&gt;,&lt;code&gt;target&lt;/code&gt;,&lt;br&gt;
&lt;code&gt;time&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main attributes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;intersectionRatio:&lt;/strong&gt; returns the percentage of intersectionRect to the boundingClientRect&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;isIntersecting:&lt;/strong&gt; return if target and root are intersecting or not.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;target:&lt;/strong&gt; this is an important attribute when we have multiple targets attached to the same observer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above function we have iterated over the entries and checked if the intersection ratio is more than 0 is not means the target element has an intersection with root or viewport is happened or not. As you can see we are observing the element with id &lt;code&gt;loading&lt;/code&gt; which is placed at bottom of the card-list element. So what will happen when we scroll down and reach the loading element it intersection will happen and the state will be updated accordingly.&lt;/p&gt;

&lt;p&gt;In this case, we are not doing any API calls so data is getting updated quickly. In case of fetch request, it would be better to use the &lt;code&gt;rootMargin&lt;/code&gt;. You can also update the threshold based on requirements.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>intersection</category>
      <category>infinite</category>
    </item>
    <item>
      <title>Writing a Visual Studio Code Completion Provider</title>
      <author>Kevin Lin</author>
      <pubDate>Thu, 23 Sep 2021 16:43:43 +0000</pubDate>
      <link>https://dev.to/dendron/writing-a-visual-studio-code-completion-provider-198f</link>
      <guid>https://dev.to/dendron/writing-a-visual-studio-code-completion-provider-198f</guid>
      <description>&lt;p&gt;Visual Studio Code (VSCode) provides many powerful features for extension developers. Autocomplete, warnings, tasks, and many more features are included out-of-the-box and are available for extension developers to take advantage of. However, figuring out how you can take advantage of these features as an extension developer can require digging through API documentation to learn the exact behavior. Using the API incorrectly can lead to issues that are hard to debug, as I learned working on the block autocomplete feature for Dendron.&lt;/p&gt;

&lt;p&gt;This post is an overview of VSCode autocomplete —also called intellisense— feature from the viewpoint of an extension developer. I especially want to highlight a few pitfalls: VSCode provides defaults for many of the options around autocomplete, but the behavior of these defaults can be confusing if you don't know what they are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entry-point"&gt;
  &lt;/a&gt;
  Entry point
&lt;/h3&gt;

&lt;p&gt;Your entry point into adding an autocomplete feature is &lt;code&gt;languages.registerCompletionItemProvider&lt;/code&gt;. This allows you to attach a function that will generate the options when requested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerCompletionItemProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provideCompletionItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;provideBlockCompletionItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is how Dendron attaches the completion provider for blocks. This part is straightforward, although note the symbols at the end. These are the symbols that when written will trigger your completion provider automatically. While you can define multiple symbols, each symbol has to be a single character. If An overview &amp;amp; tutorial of writing VSCode completion providers (intellisense) as an extension developer&lt;/p&gt;

&lt;p&gt;Next, let's take a look at the completion function. Here is the function signature for Dendron:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;provideBlockCompletionItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TextDocument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;CancellationToken&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CompletionItem&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;document&lt;/code&gt; and &lt;code&gt;position&lt;/code&gt; are straightforward. &lt;code&gt;token&lt;/code&gt; is used to cancel completions, for example if the user hits cancel while waiting for the completions. Key thing about the token is to remember that javascript is single-threaded: the token won't suddenly get cancelled in the middle of your function. The only point where it can become cancelled is if you &lt;code&gt;await&lt;/code&gt; for something and yield the execution. This means you don't have to check if the token is cancelled everywhere in your code, just check after any &lt;code&gt;await&lt;/code&gt;ed operation that might take a significant amount of time. Checking the token is easy, &lt;code&gt;if (token?.isCancellationRequested) return;&lt;/code&gt; is enough.&lt;/p&gt;

&lt;p&gt;The more important thing here is how the function gets called. One way the function will get called is if the user types one of the trigger symbols you registered. Another way is if the user hits the key for "Trigger Suggest" (&lt;code&gt;Ctrl+Space&lt;/code&gt; by default), &lt;em&gt;all&lt;/em&gt; registered completion providers for this language will run. Crucially, this means your completion provider may be activated at any point in the document, with or without your trigger key.&lt;br&gt;
It's up to your implementation to check if the current &lt;code&gt;position&lt;/code&gt; is somewhere that this completion is appropriate for, and &lt;code&gt;return;&lt;/code&gt; if not. Let's look at a simplified version of how Dendron handles this for the autocomplete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RegExpMatchArray&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// There may be multiple links within this line&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LINK_WITH_BLOCK_REGEX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;entireLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// If the current position is within this link, then we are trying to complete it&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entireLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The gist of it is that we get the text for the current line, and check if the current position is inside a link with a block that we can complete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-completionitem-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;CompletionItem&lt;/code&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A key part of the completion item is the label. The label is not only displayed for the completion items, but it's also used as a default for many of the options in a &lt;code&gt;CompletionItem&lt;/code&gt;. The text that gets inserted when the user selects something, deciding the order in which these items are displayed, and how these options are narrowed when the user types are all based on the label by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KL8cyRWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qu2LPJR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KL8cyRWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qu2LPJR.png" alt='A screen shot displaying several completion items. "journal.2021.06" is written within brackets, which is also highlighted in all completion items.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-range-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;range&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The range is the most confusing part of the &lt;code&gt;CompletionItem&lt;/code&gt; in my opinion. The range determines 2 things: where the selected item will be inserted, and also what counts as "stuff that the user typed to narrow the items".&lt;/p&gt;

&lt;p&gt;For the first use of range, whatever range you provide will be replaced with the &lt;code&gt;insertText&lt;/code&gt; (or missing that, &lt;code&gt;label&lt;/code&gt;) of the completion item. If you have nothing to replace, the range can have &lt;code&gt;start === end&lt;/code&gt; in which case the text is just inserted at that point.&lt;/p&gt;

&lt;p&gt;The second use of range makes things a bit more tricky. Because the range determines what counts as "stuff the user typed", you have to be careful about what you include in the range. For example, Dendron's autocomplete allows users to type &lt;code&gt;[[^&lt;/code&gt; to get all blocks within a text as autocomplete options.&lt;/p&gt;

&lt;p&gt;The problem? The user needs to type &lt;code&gt;^&lt;/code&gt; to activate the completion, but &lt;code&gt;^&lt;/code&gt; is not part of any completion item, and also &lt;code&gt;^&lt;/code&gt; needs to be removed once an item is selected because the text is supposed to look like &lt;code&gt;[[#^something]]&lt;/code&gt; after the completion. &lt;/p&gt;

&lt;p&gt;While it would be convenient to just set the range to anything within the brackets, this will result in all completion items being narrowed out because &lt;code&gt;^&lt;/code&gt; will also count as "stuff the user typed to narrow the items".&lt;/p&gt;

&lt;p&gt;Something important to bring up here is the default for &lt;code&gt;range&lt;/code&gt;. If you look&lt;br&gt;
into the docs, you'll see that the default is the "range of the current word",&lt;br&gt;
effectively the output of &lt;code&gt;TextDocument.getWordRangeAtPosition&lt;/code&gt; function.&lt;br&gt;
&lt;code&gt;getWordRangeAtPosition&lt;/code&gt; allows you to set a custom regex to select what&lt;br&gt;
"current word" means, so this might sound like a good way to calculate the&lt;br&gt;
range. While this would work in some cases, I found that&lt;br&gt;
&lt;code&gt;getWordRangeAtPosition&lt;/code&gt; is extremely inefficient if your regex is more complex&lt;br&gt;
than &lt;code&gt;[...]+&lt;/code&gt;. Especially using lookaheads or lookbehinds causes VSCode to&lt;br&gt;
completely hang. I'd recommend avoiding this function unless the default mostly&lt;br&gt;
works for you.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-sorttext-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;sortText&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This field is used to determine in what order the completion items are &lt;em&gt;initially&lt;/em&gt; ordered. Initially is important here, as VSCode may move the items around once the user starts typing if it decides some items match the text better.&lt;/p&gt;

&lt;p&gt;The annoying part about &lt;code&gt;sortText&lt;/code&gt;: it simply sorts the items using basic string sorting. Issue here being that if you have a loop to generate your completion items, you can't just use the index to sort the items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// These won't sort right, because "11" &amp;lt; "9" in string sort&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sortText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fix is to pad your &lt;code&gt;sortText&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sortText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not a perfect fix of course, but it's unlikely that you'll have over 99999 completion items.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-inserttext-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;insertText&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This is the text to be inserted when the user selects a completion. By default&lt;br&gt;
it's set to the label, but you'll want to set this if you are using the label to&lt;br&gt;
display something more informative to the user. For example, when completing&lt;br&gt;
blocks, Dendron uses the label to display the actual line the user is selecting.&lt;br&gt;
But the text we need to insert into the wikilink is not the same as the line&lt;br&gt;
itself, so we set this to get it to link to the right place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;insertText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;AnchorUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anchor2string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-additionaltextedits-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;additionalTextEdits&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;insertText&lt;/code&gt; replaces the part of the text that is selected by the &lt;code&gt;range&lt;/code&gt;. This&lt;br&gt;
is actually quite limiting: As I mentioned before, &lt;code&gt;range&lt;/code&gt; not only selects the&lt;br&gt;
what will be replaced but also what VSCode considers "typed by the user to&lt;br&gt;
narrow options". What if you want something to be replaced along with what the&lt;br&gt;
user typed, but you don't want it to be used in narrowing?&lt;/p&gt;

&lt;p&gt;For example, when autocompleting for blocks in Dendron the user might type&lt;br&gt;
&lt;code&gt;[[^some-header&lt;/code&gt;, but the resulting link will look like&lt;br&gt;
&lt;code&gt;[[#some-header-text-here]]&lt;/code&gt;. We need to remove &lt;code&gt;^&lt;/code&gt; along with whatever the user&lt;br&gt;
typed, but if we set the &lt;code&gt;range&lt;/code&gt; to include it then the narrowing would be&lt;br&gt;
thrown off because it would look for options where the label includes &lt;code&gt;^&lt;/code&gt;.&lt;br&gt;
To get around this, we use the &lt;code&gt;additionalTextEdits&lt;/code&gt; to automatically remove the&lt;br&gt;
&lt;code&gt;^&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;Another use for &lt;code&gt;additionalTextEdits&lt;/code&gt; is to insert text somewhere completely&lt;br&gt;
different in the document. Think of auto-imports for some languages, where you&lt;br&gt;
type something and the language automatically adds &lt;code&gt;import ...&lt;/code&gt;. Or in Dendron,&lt;br&gt;
if the user selects a block that doesn't already have a block anchor when&lt;br&gt;
completing blocks, we need to insert a block anchor there. &lt;code&gt;additionalTextEdits&lt;/code&gt;&lt;br&gt;
have no limits to where they can put the text, as long as it's within the same&lt;br&gt;
document. In any case, let's see what this code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;edits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TextEdit&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;edits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;anchor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;genUUIDInsecure&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blockPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VSCodeUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;point2VSCodePosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;edits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blockPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blockPosition&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="s2"&gt;` &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;AnchorUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anchor2string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first part adds a text edit to remove the &lt;code&gt;^&lt;/code&gt; part the user typed by&lt;br&gt;
calculating the range from a regex match, then replacing it with &lt;code&gt;""&lt;/code&gt;. The&lt;br&gt;
second part adds the &lt;code&gt;^...&lt;/code&gt; part to a block by calculating the range from the&lt;br&gt;
parsed document.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Autocomplete is a ubiquitous feature in text editing today, both for writing&lt;br&gt;
natural languages and coding. It is an incredibly easy-to-use yet powerful&lt;br&gt;
feature for your users, and it enables unmatched user experiences when done&lt;br&gt;
right. But when done wrong, it can cause a disconnect and confusion around your&lt;br&gt;
product. At Dendron, we strive for the former and hope that the learnings from&lt;br&gt;
our experience will help you do the same.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>typescript</category>
      <category>tooling</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>When everything is urgent, nothing is. What is Alarm Fatigue and how to deal with it.</title>
      <author>Davide de Paolis</author>
      <pubDate>Thu, 23 Sep 2021 16:26:31 +0000</pubDate>
      <link>https://dev.to/dvddpl/when-everything-is-urgent-nothing-is-what-is-alarm-fatigue-and-how-to-deal-with-it-1321</link>
      <guid>https://dev.to/dvddpl/when-everything-is-urgent-nothing-is-what-is-alarm-fatigue-and-how-to-deal-with-it-1321</guid>
      <description>&lt;p&gt;You join a new team, you are added to their mailing list and alerts slack channel. &lt;br&gt;
The next day, you happen to be the first logging in:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;15 Notifications&lt;/strong&gt;, a couple of applications in production are throwing an error!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3oz8xt2cQDAetun0B2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oz8xt2cQDAetun0B2/giphy.gif" alt="panic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are not so accustomed to the codebase and the infrastructure, you try to follow the breadcrumbs, navigating the repo, searching in AWS Cloudwatch or filtering logs in Kibana, without getting much sense out of all that. &lt;br&gt;
And most of all, &lt;strong&gt;you have no idea, what to do!&lt;/strong&gt;:&lt;br&gt;
Should you restart the server? Should you clear some cache? Should you inform someone?&lt;/p&gt;

&lt;p&gt;One hour later or longer, a colleague comes in and you explain the issue, with some &lt;strong&gt;apprehension and frustration&lt;/strong&gt; because you were not able to identify and fix the problem.&lt;/p&gt;

&lt;p&gt;Then, he says, shrugging his shoulders : &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oh.. don't waste time looking at that. It's an error, but it's normal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt; normal?!? &lt;strong&gt;Why&lt;/strong&gt; &lt;em&gt;normal&lt;/em&gt;?!?&lt;br&gt;&lt;br&gt;
We received an Alert on our Slack channel warning about a critical production error and you are telling me I should not care because this is &lt;em&gt;normal&lt;/em&gt; and it is not a worrying sign?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, it's not a problem unless it does happen TOO frequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ah ok. and what does &lt;strong&gt;too&lt;/strong&gt; frequently mean:  50 errors in a hour, in a day, or maybe 20% of the endpoint invocations or 100%?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Really, don't worry, I checked here and there the logs, and nothing suspicious is going on, as I said, everything is fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KTDGs9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/u9e7fk2rL5njy/giphy.gif%3Fcid%3Decf05e47pt7lh9todihdeybxpxxaafv8dgqihs8w2zcy904u%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KTDGs9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/u9e7fk2rL5njy/giphy.gif%3Fcid%3Decf05e47pt7lh9todihdeybxpxxaafv8dgqihs8w2zcy904u%26rid%3Dgiphy.gif%26ct%3Dg" alt="Ok, if you say so"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-panic-to-desensitization"&gt;
  &lt;/a&gt;
  From panic to desensitization
&lt;/h2&gt;

&lt;p&gt;Did this ever happen to you?&lt;br&gt;
Unfortunately this is pretty common ( and unfortunately, this happens also in regards to &lt;strong&gt;unit tests or build processes&lt;/strong&gt; - you are new to a project try to run it and see plenty of errors in the terminal, ask your colleagues worrying there is something wrong in your code or setup, and everybody roll their eyes, telling you to &lt;em&gt;just ignore them and go on&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;This might not be officially what some call &lt;strong&gt;Alarm ( also Alert) Fatigue&lt;/strong&gt;, where developers on call duty have to wake up every night because of problems to the live apps.&lt;br&gt;
But even without considering lack of sleep, extra hours and burnout, I find very worrying when team members have to &lt;strong&gt;waste time and energy on notifications and alarms which are not relevant&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Is is worrying because, like when flaky tests or CI pipelines fail too often, &lt;strong&gt;at some point none cares anymore if they are failing&lt;/strong&gt;. And then people don't trust CI and Tests anymore, and either we stop writing tests or we still do lots of things manually. &lt;/p&gt;

&lt;p&gt;When there are too many alarms, and most of them are just to notify that something "could" be wrong or broken, at some point, &lt;strong&gt;we stop being alarmed by that slack notification or email&lt;/strong&gt; and nobody will rush to the dashboard and logs to see what happened.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Until something bad happens and nobody reacts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUmxqV69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td21q4tjfsymy3gv5c2z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUmxqV69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td21q4tjfsymy3gv5c2z.jpeg" alt="Everything is fine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alarm-fatigue-why-does-it-happen"&gt;
  &lt;/a&gt;
  Alarm Fatigue. Why does it happen?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Error handling, Logging, tracing, metrics, alarms&lt;/strong&gt;: often all those are overlooked when you are rushing into implementing and delivering your application.&lt;/p&gt;

&lt;p&gt;We focus so much into implementing the features that we leave error handling as a last step.  We had more and more error catches as we find them, as they occur, during testing or even when already in production.  And since often we cannot know if we found them all, we end up with very broad and sensible alarms which systems that are trigger on every occasion.&lt;br&gt;
This is not so bad &lt;em&gt;per se&lt;/em&gt;, but the team needs to take extra effort and commitment to properly manage the situation as soon as possible ( but again, when an error happens in production, everyone rushes into bugfxing, then the emergency is over and... &lt;em&gt;"we will think about alarms next time, let's get back at our sprint!&lt;/em&gt;")&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-alerting-fatigue"&gt;
  &lt;/a&gt;
  Preventing Alerting fatigue
&lt;/h2&gt;

&lt;p&gt;Finding the right balance between letting a critical error slip through and getting flooded by alarms is not as simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prioritize"&gt;
  &lt;/a&gt;
  Prioritize
&lt;/h3&gt;

&lt;p&gt;First we need to decide what is an error ( as an exception in our code or related to business logic) and how we want to handle it. Then we need to prioritize.&lt;br&gt;
&lt;strong&gt;What is critical?&lt;/strong&gt; what is an error that requires monitoring and eventually action? what is just a warning? what can we just log and review every now and then?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnhKo4ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyknl1uvmr11f6ddqncd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnhKo4ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyknl1uvmr11f6ddqncd.jpeg" alt="Prioritize Alarms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Dashboards.html"&gt;dashboard&lt;/a&gt; that allows a quick overview of the health of your application, plus any stat that could be interesting from business perspective.  Invocations, Duration, Soft errors ( those errors from a business logic perspective, but are not crashes or exceptions from your code) etc&lt;/li&gt;
&lt;li&gt;Set up alarms for those metrics that require immediate intervention,  &lt;strong&gt;human&lt;/strong&gt; intervention. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-thresholds-and-anomaly-detection"&gt;
  &lt;/a&gt;
  Use Thresholds and anomaly detection
&lt;/h3&gt;

&lt;p&gt;Most of our projects are based on AWS and mostly serverless.&lt;br&gt;
This is great for us because all services have already lots of Metrics and it is relatively simple to add Alarms ( as well as creating Custom Metrics).&lt;br&gt;
You can use &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html"&gt;static thresholds&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html"&gt;anomaly detection&lt;/a&gt; if the absolute numbers could be misleading -  especially if our application has very different usages in different times of the day.  (A static threshold of 5 errors in the last 30 minutes could be never met during the midday high traffic, but could trigger call duty over night - if requests are very low, but all failing.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notify-responsibly"&gt;
  &lt;/a&gt;
  Notify responsibly
&lt;/h3&gt;

&lt;p&gt;If you are using slack for notify alerts and alarms, try to &lt;a href="https://dev.to/dvddpl/you-have-only-limited-time-and-attention-eliminate-the-noise-4f0b"&gt;reduce the noise&lt;/a&gt;.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use different channels for different projects - so that different team members can silence the notification of the apps they are not "taking care of". &lt;/li&gt;
&lt;li&gt;use different colors/levels of notification so that even if you receive 20 alerts you can immediately &lt;strong&gt;spot that red critical one&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using emails a nice trick we also used was to use Email Filters.&lt;br&gt;
Gmail for example has an interesting feature:  &lt;strong&gt;everything you add to your email address after a + is basically not considered as part of the email address but can be used in your filters&lt;/strong&gt;, for example    &lt;a href="mailto:myteam-alerts+critical@gmail.com"&gt;myteam-alerts+critical@gmail.com&lt;/a&gt;. or &lt;a href="mailto:myteam-alerts+justkeepaneyeonit@gmail.com"&gt;myteam-alerts+justkeepaneyeonit@gmail.com&lt;/a&gt;. therefore you can create gmail filters based on that email recipient and aggregate and filter out different types of notifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-ownership"&gt;
  &lt;/a&gt;
  Define ownership
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Who and when and how often&lt;/strong&gt; has to look at errors?&lt;br&gt;
Does a service require call-duty? &lt;br&gt;
If something can wait, who will check alarms and errors, first thing in the morning?&lt;br&gt;
You can have all the dashboard you like,  you can pile up notifications and email, but none of this is of any help if anyone is actively checking them and taking care of it.&lt;/p&gt;

&lt;p&gt;Before the pandemics, when we were working in the office we had a huge screen that was showing all our dashboards so if something was &lt;strong&gt;RED&lt;/strong&gt;, literally anyone could notice, and &lt;em&gt;shout it out&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sQdN9D5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/HB03yGK1u1aYo/giphy.gif%3Fcid%3Decf05e47phtjk0sn1v5bu503j7j9j2t835rtcgrchwrwodax%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sQdN9D5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/HB03yGK1u1aYo/giphy.gif%3Fcid%3Decf05e47phtjk0sn1v5bu503j7j9j2t835rtcgrchwrwodax%26rid%3Dgiphy.gif%26ct%3Dg" alt="everybody panic"&gt;&lt;/a&gt; &lt;br&gt;
Being alone at home, everyone sees the Exclamation mark or the number on Slack or Emails,  but busy as we always are, we try to not get distracted and we lie to ourselves:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should we have a look at them?  Naaa, I am pretty sure someone else is having a look.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So.. who should keep an eye on those alarms?  Who should investigate and react if something is going on?&lt;br&gt;
Try to be clear about that and be fair, or you will end up with some &lt;strong&gt;problems going unnoticed&lt;/strong&gt;, some very dedicated &lt;strong&gt;team members end up with burnout&lt;/strong&gt; because they have to work on their tasks but also spend time on the alarms (not counted in estimates and planning), or you might have 2 ( or more ) people wasting time on the same alarm and doing the same investigation. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-action"&gt;
  &lt;/a&gt;
  Define Action
&lt;/h3&gt;

&lt;p&gt;Create runbooks.&lt;br&gt;
What is a runbook.  It is a detailed list of the steps that need to be taken whenever an error occur or an alarm is triggered. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is that error? (explanation and hints of possible causes)&lt;/li&gt;
&lt;li&gt;Where does it come from? (links to logs, dashboards and repo)&lt;/li&gt;
&lt;li&gt;Where should I start investigating? (links to documentation or areas of code/configuration known to be problematic)&lt;/li&gt;
&lt;li&gt;What can I do to fix it? &lt;/li&gt;
&lt;li&gt;What should I do to mitigate the problem, if I am not able to fix it? &lt;/li&gt;
&lt;li&gt;Who should I contact to escalate the problem or if I realise that it is not in my domain ( maybe a microservice from another department started crashing and our app can't function without it).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having such a list is of great help because it standardise the approach to the problems,  it avoids having "experts" in the team who are the only ones able to investigate and fix issues, and frees every team member from the stress of not clearly knowing what to do when something bad happens ( and we are alone in the office, or at home).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don't overlook/underestimate error handling, metrics and monitoring.  Allocate time for that.&lt;/li&gt;
&lt;li&gt;Define priorities and responsibilities&lt;/li&gt;
&lt;li&gt;Plan ahead&lt;/li&gt;
&lt;li&gt;Don't let errors go unnoticed &lt;/li&gt;
&lt;li&gt;Stay calm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you usually tackle Alerts and Errors in production?&lt;br&gt;
What tools do you use? Do you have any tips to share? &lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@usmanyousaf?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Usman Yousaf&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/tiredness?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>learning</category>
      <category>development</category>
      <category>codequality</category>
    </item>
    <item>
      <title>3d Image Slider using HTML &amp; CSS</title>
      <author>Shantanu Jana</author>
      <pubDate>Thu, 23 Sep 2021 16:24:21 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/3d-image-slider-using-html-css-328b</link>
      <guid>https://dev.to/shantanu_jana/3d-image-slider-using-html-css-328b</guid>
      <description>&lt;p&gt;In this article, you will learn how to create 3d Image Slider using only HTML and CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/09/3d-image-slider-with-carousel-using.html"&gt;3d Image Slider&lt;/a&gt; is a modern image gallery that helps to organize many images beautifully. It enhances the beauty of the website as well as enhances user satisfaction a lot.&lt;/p&gt;

&lt;p&gt;If you have knowledge of basic HTML and CSS then you can easily create a 3D Carousel slider by watching this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fghty/embed/JjJZreX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Below I have shared the complete tutorial for creating this 3D image slider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-web-page"&gt;
  &lt;/a&gt;
  Step 1: Design the web page
&lt;/h3&gt;

&lt;p&gt;I designed the webpage using the CSS code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkvepjpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ptEqJQv94mY/YUj9USEq70I/AAAAAAAABpU/VXLOaeywLSgOkPKYSZF8cGlSK0y3DDrPgCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525286%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkvepjpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ptEqJQv94mY/YUj9USEq70I/AAAAAAAABpU/VXLOaeywLSgOkPKYSZF8cGlSK0y3DDrPgCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525286%252529.jpg" alt="Design the web page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-the-basic-structure"&gt;
  &lt;/a&gt;
  Step 2: Create the basic structure
&lt;/h3&gt;

&lt;p&gt;Now I have created a basic structure of the image slider. Slide height: 32vw and &lt;code&gt;width 50%&lt;/code&gt;. I used &lt;code&gt;transform-style: preserve-3d&lt;/code&gt; to make it 3d.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#slider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve-3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-a-carousel-in-the-slider"&gt;
  &lt;/a&gt;
  Step 3: Create a carousel in the slider
&lt;/h3&gt;

&lt;p&gt;Now I have created five radio buttons for five images. As I said before, there is a carousel to change the images. I am using the radio button to make those carousels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"s1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"s2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"s3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"s4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"slider"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"s5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;108%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-83px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3wvLPf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TWx4gZqcQAg/YUj9f5DJAQI/AAAAAAAABpY/4KASF8woC_0rCebjlQVfJU8LIAETEfxrACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3wvLPf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TWx4gZqcQAg/YUj9f5DJAQI/AAAAAAAABpY/4KASF8woC_0rCebjlQVfJU8LIAETEfxrACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529.jpg" alt="Create a carousel in the slider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-add-images-to-3d-image-slider"&gt;
  &lt;/a&gt;
  Step 4: Add images to 3d Image Slider
&lt;/h3&gt;

&lt;p&gt;Now I just added the images to the slider. If you notice, you will understand that I have used an id in every image here. This will serve as the identity of the for and id images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"s1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"s2"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img2.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"s3"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img3.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"s4"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img4.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"s5"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img5.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#slider&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#slider&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;400ms&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kVEYD084--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-lG3WfmuOhko/YUj9mqkvOaI/AAAAAAAABpg/OYdGj94Rf7AyB5hi6XJ0xEYuMEU3YYeGACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525281%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVEYD084--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-lG3WfmuOhko/YUj9mqkvOaI/AAAAAAAABpg/OYdGj94Rf7AyB5hi6XJ0xEYuMEU3YYeGACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525281%252529.jpg" alt="Add images to 3d Image Slider "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-convert-slider-to-3d-using-css"&gt;
  &lt;/a&gt;
  Step 5: Convert slider to 3D using CSS
&lt;/h3&gt;

&lt;p&gt;I have implemented the image change using the following CSS code and arranged the images in 3d format.&lt;/p&gt;

&lt;p&gt;For center image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#s1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="nf"&gt;#s2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#s3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;#s4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#s5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For next image 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#s1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="nf"&gt;#s2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#s3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;#s4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#s5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-100px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J5h4mdX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-66cgKet-_mo/YUj-Ee7xJKI/AAAAAAAABps/qIXtYr6j5TEJXScJQ2sh04X0FZPkJDJjACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525282%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J5h4mdX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-66cgKet-_mo/YUj-Ee7xJKI/AAAAAAAABps/qIXtYr6j5TEJXScJQ2sh04X0FZPkJDJjACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525282%252529.jpg" alt="For next image 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For next image 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#s1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="nf"&gt;#s2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#s3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;#s4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#s5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-250px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRF30GoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-COejgu94iUw/YUj-MpNjzkI/AAAAAAAABpw/0YWCnq7RgQkiZetmma_krkQdjJFpyXMxQCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525283%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRF30GoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-COejgu94iUw/YUj-MpNjzkI/AAAAAAAABpw/0YWCnq7RgQkiZetmma_krkQdjJFpyXMxQCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525283%252529.jpg" alt="For next image 2"&gt;&lt;/a&gt;&lt;br&gt;
For prev image 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#s1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="nf"&gt;#s2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#s3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;#s4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#s5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-100px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqMen-QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Z6JHdbVB-Xs/YUj-wbPWeoI/AAAAAAAABp4/0owYlX9fz2EAFdAz76H7lI_hHmp39PE3wCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525284%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqMen-QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Z6JHdbVB-Xs/YUj-wbPWeoI/AAAAAAAABp4/0owYlX9fz2EAFdAz76H7lI_hHmp39PE3wCLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525284%252529.jpg" alt="For prev image 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Prev image 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#s1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="nf"&gt;#s2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;#s3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;#s4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#s5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;#slide3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-250px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---22EaHYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-BJHV8qXdN3c/YUj-4R3nHXI/AAAAAAAABp8/BOu9BhbIvRESo-B9NTlAr6ZB30svPhmeACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525285%252529.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---22EaHYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-BJHV8qXdN3c/YUj-4R3nHXI/AAAAAAAABp8/BOu9BhbIvRESo-B9NTlAr6ZB30svPhmeACLcBGAsYHQ/s16000/Screenshot%252B%252528664%252529%252B%2525285%252529.jpg" alt="For Prev image 2"&gt;&lt;/a&gt;&lt;br&gt;
Hope you have the tutorial above, you know how I made this 3d Image Slider with Carousel. If there is any difficulty then you can definitely let me know by commenting.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing Partytown 🎉: Run Third-Party Scripts From a Web Worker</title>
      <author>Adam Bradley</author>
      <pubDate>Thu, 23 Sep 2021 15:59:13 +0000</pubDate>
      <link>https://dev.to/adamdbradley/introducing-partytown-run-third-party-scripts-from-a-web-worker-2cnp</link>
      <guid>https://dev.to/adamdbradley/introducing-partytown-run-third-party-scripts-from-a-web-worker-2cnp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A fun location for your third-party scripts to hang out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performance is always top of mind for any website or web app. It’s of no surprise that a page that loads instantly, has no scroll jank, and responds immediately to any interaction, will provide an all around better user-experience. &lt;/p&gt;

&lt;p&gt;Even with a fast and highly tuned site following all of the best practices, it's all too common for your performance wins to be erased the moment third-party scripts are added. By third-party scripts we mean code that is embedded within your site, but not directly under your control. A few examples include: analytics, ad pixels, A/B testing, trackers, etc.&lt;/p&gt;

&lt;p&gt;When it comes to improving site performance, resources often explain and document tangible improvements with what you can do to &lt;em&gt;your&lt;/em&gt; code, but for the most part our hands are tied when it comes to improving &lt;em&gt;third-party&lt;/em&gt; code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thirdparty-script-performance-issues"&gt;
  &lt;/a&gt;
  Third-Party Script Performance Issues
&lt;/h2&gt;

&lt;p&gt;The elephant in the room is that third-party scripts are often to blame for eating up a large chunk of the main thread’s precious resources. There’s a few tricks to reduce their upfront damaging effects, like waiting until after the page load to run these scripts. &lt;/p&gt;

&lt;p&gt;But regardless, they’re still running hundreds of kilobytes (and commonly, even a few megabytes) of Javascript on your user’s main thread! And end-users’ mobile devices have less resources than the machines developers are building the sites on! This can drastically affect &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse scores&lt;/a&gt;, &lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt;, &lt;a href="https://developers.google.com/search/docs/advanced/experience/page-experience"&gt;search rankings&lt;/a&gt;, and even increase bounce rates and reduce user-engagement due to poor user experience.&lt;/p&gt;

&lt;p&gt;All of this has surfaced as we’ve been building out &lt;a href="https://dev.to/mhevery/series/13467"&gt;Qwik&lt;/a&gt; for &lt;a href="https://www.builder.io/"&gt;Builder.io&lt;/a&gt;. The tldr is that we can make interactive sites load immediately with only HTML and CSS, and only pull in the Javascript you need on-demand. But either way, even with the fastest of the fastest frameworks (or no framework at all), third-party scripts continue to drain site performance. So we got to thinking...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-thirdparty-scripts-within-a-web-worker"&gt;
  &lt;/a&gt;
  Running Third-Party Scripts Within a Web Worker
&lt;/h2&gt;

&lt;p&gt;Partytown's philosophy is that the main thread should be dedicated to your code, and any scripts that are not required to be in the &lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path"&gt;critical path&lt;/a&gt; should be relocated to a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;web worker&lt;/a&gt;. Into a sandboxed location, kinda like...a little town for third-party scripts. Some sort of a...Partytown, if you will…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web workers&lt;/a&gt; have been a practical solution that can off-load resource intensive tasks off of the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Main_thread"&gt;main thread&lt;/a&gt; for many years now. The challenge, however, is that workers do not have direct access to main thread APIs, such as &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, or &lt;code&gt;localStorage&lt;/code&gt;. A messaging system can be created between the two worlds, but because &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"&gt;postMessage&lt;/a&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Asynchronous"&gt;asynchronous&lt;/a&gt;, DOM operations that third-party scripts are packed full of simply won’t succeed with a traditional messaging system.&lt;/p&gt;

&lt;p&gt;For example, here’s a snippet of code found in &lt;a href="https://support.google.com/tagmanager/answer/6102821?hl=en"&gt;Google Tag Manager&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s nothing special about this code, actually it’s pretty darn common. But, notice how it has to be synchronous, and there’s three blocking getters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get &lt;code&gt;document&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get &lt;code&gt;body&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get &lt;code&gt;clientWidth&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we’re unable to refactor this code to use promises or callbacks instead, then an asynchronous messaging system wouldn’t allow this to “just work.” And I want to emphasize, “unable to refactor this code.” &lt;/p&gt;

&lt;p&gt;The same third-party scripts that are being executed by billions of devices, even as you are reading these lines, cannot just be “refactored.” In a perfect world, I’d message Google and say, “Hey, you know that analytics code that gazillions of dollars are dependent on? Please refactor it entirely. Thank you.” Next, I’d have to DM every single service in the world to refactor their code too. Wish me luck, but results may vary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-me-to-partytown"&gt;
  &lt;/a&gt;
  Take Me To Partytown
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@builder.io/partytown"&gt;Partytown&lt;/a&gt; is a lazy loaded &lt;code&gt;6kb&lt;/code&gt; library that helps relocate resource intensive scripts into a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;web worker&lt;/a&gt; and off of the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Main_thread"&gt;main thread&lt;/a&gt;. Its goal is to help speed up sites by dedicating the main thread to your code, and offloading third-party scripts to a web worker.&lt;/p&gt;

&lt;p&gt;But, the most important piece it brings to the table is allowing the web worker to &lt;em&gt;synchronously&lt;/em&gt; read from the main thread. If code running within the web worker can call blocking DOM APIs with synchronous return values, then that means we can run, unaltered, third-party scripts in a worker. The third-party code happily executes as intended, but within a different thread as to not take resources away from &lt;em&gt;your&lt;/em&gt; code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sandboxing-and-isolation"&gt;
  &lt;/a&gt;
  Sandboxing and Isolation
&lt;/h2&gt;

&lt;p&gt;Third-party scripts are often a black-box with large amounts of Javascript. What's buried within the obfuscated code is difficult to tell. It's minified for good reason, but regardless it becomes very difficult to understand what third-party scripts are executing on &lt;em&gt;your&lt;/em&gt; site and &lt;em&gt;your&lt;/em&gt; users’ devices, and on the same thread/context as your app's code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@builder.io/partytown"&gt;Partytown&lt;/a&gt;, on the other hand, is able to sandbox and isolate third-party scripts within a web worker and allow, or deny, access to main thread APIs. This includes cookies, localStorage, userAgent, etc. Because the code &lt;em&gt;must&lt;/em&gt; go through Partytown’s proxy in order to access the main thread, Partytown also has the ability to log every read and write, and even restrict access to certain DOM APIs. &lt;/p&gt;

&lt;p&gt;Essentially, Partytown lets you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Isolate third-party scripts within a sandbox.&lt;/li&gt;
&lt;li&gt;Configure which browser APIs specific scripts can and cannot execute.&lt;/li&gt;
&lt;li&gt;Option to log API calls and arguments in order to give better insight as to what the scripts are doing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could be useful for many different use-cases, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blocking access to &lt;code&gt;document.cookie&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Providing a standard &lt;code&gt;navigator.userAgent&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Not allowing scripts to write to &lt;code&gt;localStorage&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Turning &lt;code&gt;document.write()&lt;/code&gt; into a &lt;code&gt;noop&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Block scripts from requesting other scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#current-status-and-whats-next"&gt;
  &lt;/a&gt;
  Current Status and What’s Next
&lt;/h2&gt;

&lt;p&gt;Partytown is still in alpha, it is highly experimental and not ready for production. However, we’ve been actively testing it out on a few pages within our production site on Builder.io, and so far so good. Data is being collected as expected and our analytics look unaffected. Our goal is to collect the data now, so that it can be presented in future posts.&lt;/p&gt;

&lt;p&gt;In the next post, I’ll be focusing on how the synchronous communication channel works and some of its trade-offs. &lt;/p&gt;

&lt;p&gt;Additionally, we’ll show how you can start testing Partytown within a React or &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; project, or really any website or web app. Here's a quick example of how Partytown can be used within a Next.js document, but much more to come in follow up posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Partytown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GoogleTagManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@builder.io/partytown/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GoogleTagManager&lt;/span&gt; &lt;span class="na"&gt;containerId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GTM-XXXXX&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Partytown&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’d like to learn more, or even help test, please come party with us on our &lt;a href="https://discord.gg/hbuEtxdEZ3"&gt;Discord channel&lt;/a&gt;, or ping me at &lt;a href="https://twitter.com/adamdbradley"&gt;@adamdbradley&lt;/a&gt;. I’d love to ensure Partytown can work with your service or use-case, so please don’t hesitate to start a chat.&lt;/p&gt;

&lt;p&gt;I’d also like to thank some awesome people we’ve been lucky enough to bounce ideas off of, and help validate if this could work IRL: &lt;a href="https://twitter.com/addyosmani"&gt;Addy Osmani&lt;/a&gt;, &lt;a href="https://twitter.com/igrigorik"&gt;Ilya Grigorik&lt;/a&gt;, &lt;a href="https://twitter.com/kristoferbaxter"&gt;Kristofer Baxter&lt;/a&gt;, &lt;a href="https://twitter.com/shubhie"&gt;Shubhie Panicker&lt;/a&gt;, &lt;a href="https://twitter.com/zachleat"&gt;Zach Leatherman&lt;/a&gt;, &lt;a href="https://twitter.com/mhevery"&gt;Misko Hevery&lt;/a&gt;, &lt;a href="https://twitter.com/Steve8708"&gt;Steve Sewell&lt;/a&gt; and the entire &lt;a href="https://twitter.com/builderio"&gt;Builder.io team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Party on, Wayne!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Builderio/partytown"&gt;Partytown Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/hbuEtxdEZ3"&gt;Discord channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mhevery/series/13467"&gt;Qwik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>webperf</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
