<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Salada de frutas dos modelos de dados</title>
      <author>Willian Frantz</author>
      <pubDate>Tue, 11 May 2021 21:46:46 +0000</pubDate>
      <link>https://dev.to/wlsf/salada-de-frutas-dos-modelos-de-dados-2in7</link>
      <guid>https://dev.to/wlsf/salada-de-frutas-dos-modelos-de-dados-2in7</guid>
      <description>&lt;p&gt;Voc√™ sabia que existem diversos modelos de dados al√©m do padr√£o relacional (ex PostgreSQL) e o baseado em documentos (ex MongoDB)?&lt;/p&gt;

&lt;p&gt;Acredito que esse detalhe passe despercebido por muitas pessoas desenvolvedoras, n√£o que isso seja um problema. Na maioria dos casos √© poss√≠vel atender a sua necessidade com Postgres, e as vezes utilizaremos modelos diferentes de forma impl√≠cita, como em uma ferramenta de Cache.&lt;/p&gt;

&lt;p&gt;Portanto, gostaria de enfatizar que estou escrevendo este texto apenas para saciar a curiosidade de voc√™s, e meu pr√≥prio interesse por modelos de dados. üòÖ &lt;/p&gt;

&lt;p&gt;Vamos come√ßar dissecando alguns dos diferentes modelos existentes? Na nossa lista temos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;armazenamento por chave-valor&lt;/li&gt;
&lt;li&gt;armazenamento em triplas&lt;/li&gt;
&lt;li&gt;armazenamento em documentos&lt;/li&gt;
&lt;li&gt;armazenamento relacional&lt;/li&gt;
&lt;li&gt;armazenamento em grafos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#modelo-chavevalor"&gt;
  &lt;/a&gt;
  Modelo Chave-Valor
&lt;/h2&gt;

&lt;p&gt;Um dos modelos mais simples de armazenamento de dados, ele utiliza apenas &lt;code&gt;chave=valor&lt;/code&gt;, √© um dado altamente desacoplado e sem conex√µes, n√£o possui relacionamentos. &lt;/p&gt;

&lt;p&gt;Se f√¥ssemos representar esse modelo com um Map em Elixir seria algo mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;
  &lt;span class="ss"&gt;key:&lt;/span&gt; &lt;span class="s2"&gt;"value"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;
  &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;age:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O que representaria uma estrutura map in-memory, semelhante a um JSON.&lt;/p&gt;

&lt;p&gt;Este modelo √© amplamente utilizado em ferramentas de &lt;em&gt;Cache&lt;/em&gt; hoje em dia, como por exemplo: &lt;strong&gt;Redis&lt;/strong&gt; e &lt;strong&gt;Memcached&lt;/strong&gt;. Digamos que voc√™ possui um dado que √© usado com frequ√™ncia pela sua aplica√ß√£o, e esse dado n√£o costuma sofrer altera√ß√£o. Nesses cen√°rios espec√≠ficos n√≥s aplicamos um &lt;em&gt;cache&lt;/em&gt; para garantir que esse dado fique armazenado de forma simples e r√°pida de buscar, assim evitamos chamadas desnecess√°rias ao banco de dados &lt;em&gt;(round trips)&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modelo-de-triplas"&gt;
  &lt;/a&gt;
  Modelo de triplas
&lt;/h1&gt;

&lt;p&gt;Tamb√©m √© um modelo extremamente simples. Possui uma forma homog√™nea de armazenar o dado, onde todas entradas s√£o estruturas da seguinte forma: &lt;code&gt;(sujeito, predicado, objeto)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Podemos ter uma entrada que represente a nossa idade, nosso nome, etc. &lt;br&gt;
Por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(john_doe, idade, 30)
(john_doe, nome, "John Doe")
(john_doe, gosta, "macarronada")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No final das contas, a ideia por tr√°s desse esquema √© que possamos representar uma senten√ßa, como por exemplo &lt;em&gt;"John Doe tem 30"&lt;/em&gt; ou &lt;em&gt;"John Doe gosta de ma√ß√£s"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O pr√≥prio triple store ou tamb√©m conhecido como RDF, utiliza queries sem√¢nticas atrav√©s do &lt;strong&gt;SPARQL&lt;/strong&gt; &lt;em&gt;(Protocol and RDF Query Language)&lt;/em&gt; para conseguir manipular ou buscar suas triplas.&lt;/p&gt;

&lt;p&gt;Normalmente uma Query de busca se baseia no predicado, ex com &lt;strong&gt;SPARQL&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT ?person :nome "John Doe"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui buscamos a pessoa cujo nome √© John Doe. √â poss√≠vel ter relacionamentos neste modelo, por√©m, sempre seguindo o padr√£o proposto de sujeito-predicado-objeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curiosidade:&lt;/strong&gt; Este esquema √© muito utilizado em uma linguagem de programa√ß√£o declarativa, que tamb√©m serve como linguagem de &lt;em&gt;Query&lt;/em&gt; chamada &lt;strong&gt;Datalog&lt;/strong&gt;, ele cria entradas com um padr√£o bem semelhante, seguindo o formato: &lt;code&gt;predicado(sujeito, objeto)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;idade(john_doe, 30)
nome(john_doe, "John Doe")
gosta(john_doe, "ma√ß√£s")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E inclusive, o &lt;strong&gt;Datomic&lt;/strong&gt; √© uma implementa√ß√£o do Datalog. O Datomic, para quem n√£o conhece, √© um banco de dados distribu√≠do, ACID, que √© muito utilizado com o Clojure na JVM. (Inclusive √© o banco que o Nubank usa!)&lt;/p&gt;

&lt;p&gt;O modelo de triplas ou RDF, tamb√©m √© mencionado em artigos sobre Semantic Web, que prega a transforma√ß√£o da Internet num lugar onde a camada sem√¢ntica seja mais acess√≠vel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-de-documentos"&gt;
  &lt;/a&gt;
  Modelo de Documentos
&lt;/h2&gt;

&lt;p&gt;Aqui j√° percebemos uma forma mais rebuscada de armazenar o nosso dado; normalmente os bancos baseados em documentos trabalham com collections e documents (que s√£o objetos JSON-like).&lt;/p&gt;

&lt;p&gt;Esse padr√£o de armazenamento √© muito conhecido por se assemelhar a um objeto JSON.&lt;br&gt;
Exemplo de um objeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "notebook",
  "qty": 50,
  "rating": [ { "score": 8 }, { "score": 9 } ],
  "size": { "height": 11, "width": 8.5, "unit": "in" },
  "status": "A",
  "tags": [ "college-ruled", "perforated"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(ex retirado da documenta√ß√£o do pr√≥prio MongoDB)&lt;/p&gt;

&lt;p&gt;A partir daqui j√° come√ßamos a enxergar dados que se conectam, que se relacionam diretamente. Como podemos ver no exemplo acima: temos um notebook com 50 unidades em estoque, onde as avalia√ß√µes impostas a ele foram nota 8 e nota 9, fora demais detalhes sobre tamanho, status, tags, etc.&lt;/p&gt;

&lt;p&gt;√â interessante frisar aqui, que apesar desses dados se relacionarem, estamos falando de um documento (muito semelhante a uma estrutura JSON), portanto, este documento √© salvo exatamente desta forma, com todas as rela√ß√µes e conex√µes no mesmo objeto, √© como se estiv√©ssemos compactando um JSON numa String. Pelo dado ser salvo todo junto, √© muito mais simples buscar esse dado do banco, tendo em vista que ele s√≥ precisa carregar o que foi salvo no documento. Por√©m por outro lado, por mais que voc√™ s√≥ deseje acessar uma pequena parte do documento (ex dados como &lt;code&gt;name&lt;/code&gt; e &lt;code&gt;qty&lt;/code&gt;), todo o documento precisa ser carregado da mesma forma.&lt;/p&gt;

&lt;p&gt;Um banco muito utilizado atualmente que implementa este formato de modelo baseado em documentos √© o MongoDB!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-relacional"&gt;
  &lt;/a&gt;
  Modelo Relacional
&lt;/h2&gt;

&lt;p&gt;Se no modelo anterior falamos um pouco sobre relacionamentos entre dados, agora vamos entrar com for√ßa nesse assunto. O modelo relacional √© conhecido por nos permitir mapear o mundo usando esquemas e rela√ß√µes.&lt;/p&gt;

&lt;p&gt;Nele n√£o falamos mais apenas sobre chave=valor, muito menos sobre documentos. Nele utilizamos os termos banco, esquema, tabela, relacionamentos, e por a√≠ vai...&lt;/p&gt;

&lt;p&gt;Digamos que estamos mapeando estruturas para o site do nosso restaurante, ter√≠amos algo semelhante a:&lt;/p&gt;

&lt;p&gt;Tabela &lt;strong&gt;Menu&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;hour&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Almo√ßo&lt;/td&gt;
&lt;td&gt;11h~13h&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Janta&lt;/td&gt;
&lt;td&gt;18h~22h&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sobremesa&lt;/td&gt;
&lt;td&gt;all-day&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Tabela &lt;strong&gt;Prato&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;menu_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Strognoff&lt;/td&gt;
&lt;td&gt;R$49&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sopa&lt;/td&gt;
&lt;td&gt;R$35&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sorvete&lt;/td&gt;
&lt;td&gt;R$12&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Mousse&lt;/td&gt;
&lt;td&gt;R$20&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Olha que interessante, acabamos de ilustrar 2 tabelas que ser√£o utilizadas para representar os dados do nosso restaurante, nele teremos menus que ser√£o divididos entre [Almo√ßo: 1, Janta: 2, Sobremesa: 3], e definimos tamb√©m 3 pratos diferentes para cada um dos menus, sendo eles [Strognoff: Almo√ßo, Sopa: Janta, Sorvete: Sobremesa]&lt;/p&gt;

&lt;p&gt;Apesar desses dados estarem separados por tabelas, eles est√£o relacionados pelo menu_id, o que chamamos de foreign key em bancos relacionais. Com isso, conseguimos afirmar que um prato pertence a um Menu, e um Menu pode possuir diversos pratos diferentes! Isso simboliza um relacionamento 1..n de menus para pratos.&lt;/p&gt;

&lt;p&gt;E conseguimos validar/testar esses relacionamentos atrav√©s de um join feito por uma linguagem de Query chamada SQL (Structured Query Language).&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM menus m
INNER JOIN pratos p ON p.menu_id=m.id
WHERE m.name = 'Almo√ßo'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Traduzindo o resultado disso para um objeto JSON, teremos algo mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  'name': 'Almo√ßo',
  'hour': '11h~13h',
  'status': 'on',
  'pratos': [
    {
      'name': 'Strognoff',
      'price': 'R$49'
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;√â, meus amigos, a coisa t√° ficando mais abstrata e complexa comparada ao primeiro modelo discutido aqui, n√£o √© mesmo? Mas imaginem a infinidade de coisas que podemos modelar utilizando um banco relacional...&lt;/p&gt;

&lt;p&gt;Ele nos d√° um universo de op√ß√µes, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mapear os nossos dados utilizando diferentes tipos (entre valores inteiros, string, at√© estruturas JSON)&lt;/li&gt;
&lt;li&gt;buscar esses dados de forma fragmentada (somente alguns dados de uma tabela)&lt;/li&gt;
&lt;li&gt;buscar dados de 2 ou mais tabelas que se relacionam, atrav√©s de joins&lt;/li&gt;
&lt;li&gt;criar indexes para os dados que mais se relacionam, isso faz com que o banco consiga encontrar aqueles dados de forma mais f√°cil, isso pode melhorar a performance de nossas buscas (dependendo do tamanho do seu banco)&lt;/li&gt;
&lt;li&gt;criar views ou views materializadas, que s√£o bem semelhantes a uma tabela, por√©m com dados modelados de uma forma mais madura para que a aplica√ß√£o final possa utilizar isso em funcionalidades espec√≠ficas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Al√©m disso, bancos de dados relacionais s√£o muito conhecidos por serem ACID.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At√¥mico - Garante que cada transa√ß√£o √© tratada como uma unidade separada, e que ou roda tudo com sucesso, ou n√£o roda nada e nenhuma altera√ß√£o √© aplicada ao estado do banco.&lt;/li&gt;
&lt;li&gt;Consistente - Garante que o banco de dados n√£o ser√° corrompido de forma alguma. Sem falhas, seguindo as regras, constraints, cascades e triggers definidos. Mantendo sempre um estado consistente.&lt;/li&gt;
&lt;li&gt;Isolado - A ideia de grandes bancos relacionais √© garantir que as execu√ß√µes possam rodar de forma concorrente ao m√°ximo poss√≠vel, ter um ambiente isolado ajuda no controle de concorr√™ncia, pois estamos sempre garantindo que o estado do banco estar√° da mesma forma que ele estaria se as execu√ß√µes estivessem sendo feitas de forma sequencial.&lt;/li&gt;
&lt;li&gt;Durabilidade - Garante que seus dados estar√£o salvos independente de uma falha na aplica√ß√£o, queda de energia ou qualquer outra coisa que possa afetar o processo do banco.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um bom exemplo de um banco de dados relacional que √© muito utilizado atualmente √© o Postgres!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-de-grafos"&gt;
  &lt;/a&gt;
  Modelo de Grafos
&lt;/h2&gt;

&lt;p&gt;U√©, grafos? Sim, aqueles grafos que voc√™ provavelmente viu na faculdade! Bolinha e tracinho pra todo lado, onde as bolinhas representam os n√≥s e os tracinhos as arestas que conectam os n√≥s.&lt;/p&gt;

&lt;p&gt;Mas o que isso tem a ver com modelo de dados? Bom, isso significa um modelo de dados altamente conectado, que se relacionam m√∫ltiplas vezes.&lt;/p&gt;

&lt;p&gt;Neste modelo podemos ter n√≥s com propriedades espec√≠ficas, como por exemplo, digamos que o n√≥ representa uma pessoa, o mesmo n√≥ pode ter as seguintes propriedades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nome
idade
altura
peso
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E esse n√≥ pode se relacionar com outro n√≥, atrav√©s de uma aresta, que indica um relacionamento.&lt;/p&gt;

&lt;p&gt;Por sua vez, relacionamentos podem ser indicados de duas maneiras, sendo elas: [sa√≠da: outgoing, entrada: incoming]. E esse mesmo relacionamento pode possuir uma propriedade que esclarece qual o prop√≥sito do relacionamento.&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nl2016u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eho9zy8sdkrlqj5zs86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nl2016u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eho9zy8sdkrlqj5zs86.png" alt="Screen Shot 2021-05-11 at 17.15.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse cen√°rio, temos um n√≥ que representa um usu√°rio chamado John Doe, ele se relaciona com outro n√≥ que representa um pa√≠s chamado Canad√°, e o prop√≥sito do relacionamento √© indicar que John Doe mora/reside no Canad√°.&lt;/p&gt;

&lt;p&gt;Representando isso usando Cypher (Query Language do Neo4j):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(u:User {name: 'John Doe'}),
(c:Country {name: 'Canad√°'}),
(u)-[:LIVES_IN]-&amp;gt;(c)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voc√™ n√£o precisa necessariamente possuir um esquema pr√©-definido para poder criar n√≥s e relacionamentos, eles podem ser criados com as propriedades e prop√≥sitos que melhor satisfazer a sua necessidade.&lt;/p&gt;

&lt;p&gt;Um bom exemplo de banco de dados atual que utiliza esse modelo √© o Neo4j.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h1&gt;

&lt;p&gt;O que podemos deduzir ap√≥s olhar esses modelos? Claramente eles possuem uma certa afinidade, j√° que todos modelam dados para serem armazenados. Por√©m, eles s√£o extremamente diferentes na modelagem, abordagens de relacionamentos, armazenamento, etc. E isso impacta diretamente no prop√≥sito deles.&lt;/p&gt;

&lt;p&gt;Pode ser que um dia voc√™ esbarre na necessidade de utilizar um banco key-value como Cache para a sua aplica√ß√£o, um banco de documentos como uma estrat√©gia de armazenar dados fragmentados que se relacionam mas que n√£o possuem conex√µes externas. Ou at√© mesmo um banco de grafos para conseguir modelar a sua solu√ß√£o, tendo em vista que seus dados possuem muitos relacionamentos many-to-many.&lt;/p&gt;

&lt;p&gt;Se voc√™ se interessou por esse texto e ainda n√£o leu o livro &lt;em&gt;Design Data-Intensive Applications&lt;/em&gt; do &lt;strong&gt;Martin Kleppmann&lt;/strong&gt;, eu super recomendo que voc√™ v√° atr√°s dessa leitura! Inclusive, no livro, ele plota uma linha muito interessante entre dados que n√£o se relacionam at√© dados que possuem muitas conex√µes.&lt;/p&gt;

&lt;p&gt;Ref:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sdwfmyQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwx47cq1trbgpddceiwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sdwfmyQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwx47cq1trbgpddceiwz.png" alt="Screen Shot 2021-05-11 at 17.28.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voc√™ tem alguma sugest√£o, complemento ou cr√≠tica? Gostaria de saber mais sobre, deixa nos coment√°rios pra eu poder ler üíú&lt;/p&gt;

</description>
      <category>database</category>
      <category>elixir</category>
    </item>
    <item>
      <title>Nav in Native</title>
      <author>Sebastian Spiegel</author>
      <pubDate>Tue, 11 May 2021 21:21:46 +0000</pubDate>
      <link>https://dev.to/sebastianspiegel/nav-in-native-47nm</link>
      <guid>https://dev.to/sebastianspiegel/nav-in-native-47nm</guid>
      <description>&lt;p&gt;This week I have been building my first React Native application. I started off with just changing the  and styles, making sure I understood how ‚Äòflex‚Äô works and the different core components. To do this I made several component files and took turns returning them as I played with them. But in a real mobile app, which I intended to build, there is navigation, just like in a web app. &lt;/p&gt;

&lt;p&gt;So clearly, this wasn‚Äôt going to cut it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;Welcome /&amp;gt;
    // &amp;lt;Index /&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you already have an app and want to incorporate React Native, it‚Äôs recommending to use the react-native-navigation library &lt;a href="https://wix.github.io/react-native-navigation/docs/basic-navigation"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many libraries to install to use React Navigation. I‚Äôm using expo, so I installed using the following, but you can check out the &lt;a href="https://reactnavigation.org/docs/getting-started"&gt;documentation&lt;/a&gt; if you have a different setup for your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @react-navigation/native
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
npm install @react-navigation/stack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are familiar with vanilla React (which you really should be first), then the setup for navigation looks very similar to routes, just different words! The setup should happen at the top level of your app (usually App.js). You start off importing these two libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of your App function, you then need to have a way to call upon the createStackNavigator function, using this line: &lt;code&gt;const Stack = createStackNavigator();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs the setup! Now you have everything you need to use to wrap up the screens that you want to render. So now my App.js is looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
   &amp;lt;NavigationContainer&amp;gt;
     &amp;lt;Stack.Navigator&amp;gt;
       &amp;lt;Stack.Screen name="Welcome" component={Welcome}/&amp;gt;
     &amp;lt;/Stack.Navigator&amp;gt;
   &amp;lt;/NavigationContainer&amp;gt;

 );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next time I had to figure out was using props, so I coud also get my Index component working. For the purposes of testing, I had all my data in the top level of my app (later I plan to replace that with a quick fetch to an API I‚Äôve already picked out). &lt;/p&gt;

&lt;p&gt;For React Native navigation, you can‚Äôt pass an inline function like: &lt;code&gt;component={() =&amp;gt; &amp;lt;HomeScreen /&amp;gt;}&lt;/code&gt;&lt;br&gt;
Instead, much like you would see for a Route in vanilla React, you wrap the component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Stack.Screen name="Index"&amp;gt;
         {props =&amp;gt; &amp;lt;Index {...props} cards={cards} /&amp;gt;}
&amp;lt;/Stack.Screen&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for my function to properly receive the props, I used memo (there are a few other options, but this worked well for me!)&lt;br&gt;
So I changed this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Index = (props) =&amp;gt; {
   return(
      // render here
   )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Index = React.memo(function Index(props) {
   return(
      // render here
   )
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My Index is using FlatList, so I was getting a warning on my simulator, which I believe is the Native version of the warning you get when you don‚Äôt give child components individual keys in vanilla React. So if you get this error: &lt;/p&gt;

&lt;p&gt;Warning: Failed child context type: Invalid child context &lt;code&gt;virtualizedCell.cellKey&lt;/code&gt; of type &lt;code&gt;number&lt;/code&gt; supplied to &lt;code&gt;CellRenderer&lt;/code&gt;, expected &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add this where you are rendering the components: &lt;code&gt;keyExtractor={item =&amp;gt; item.index_id.toString()}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now I successfully had two different components, but only the top one will render when the app starts, and unlike a webpage, you don‚Äôt have the option of just putting in the URL to get to a different route. So I added a button to my Welcome screen, to navigate to my Index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Button color="white"
         onPress={() =&amp;gt; {
           navigation.navigate('Index')
         }}
         title="Start"
       /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: for functional components, it‚Äôs a good idea to destructure props, but if you don‚Äôt want to do that remember to put &lt;code&gt;props.navigation.navigate(‚ÄòComponent‚Äô)&lt;/code&gt; instead. &lt;/p&gt;

&lt;p&gt;If you want to navigate one page back you can use an easy back button like so: &lt;code&gt;&amp;lt;Button title="Go back" onPress={() =&amp;gt; navigation.goBack()} /&amp;gt;&lt;/code&gt;&lt;br&gt;
Though with native-gesture-handler the user can also swipe to move a page back. &lt;/p&gt;

&lt;p&gt;So that‚Äôs the basics of how I set up navigation in my current React Native application! This is definitely the easiest way to get started, and there is so much more to learn further down the line. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitHub stars matter! Here is why</title>
      <author>Ali Khajeh-Hosseini</author>
      <pubDate>Tue, 11 May 2021 20:59:11 +0000</pubDate>
      <link>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</link>
      <guid>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</guid>
      <description>&lt;p&gt;As &lt;a href="https://infracost.io"&gt;Infracost&lt;/a&gt; has hit 3,000 GitHub stars üéâ, I wanted to share some thoughts as to why GitHub stars matter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-people-star-repos"&gt;
  &lt;/a&gt;
  Why do people star repos?
&lt;/h3&gt;

&lt;p&gt;There are two main reasons why people star GitHub projects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bookmarks&lt;/strong&gt;: some people star GitHub repos to bookmark them for later use. For example I can see the repos I've starred[1] and search within them for a keyword or sort them by how recently I starred them, or how active the project has been recently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Show support or appreciation&lt;/strong&gt;: others star repos to show support or appreciation, similar to how "likes" are used in social media sites. This is a social signal, and it's very important in the very early stages of open source projects, acting as a feedback loop for project creators. Knowing that other people have seen the project and cared enough to click on the Star button can create motivation for the creators to continue working on the project initially.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is why I personally star projects. Regardless of whether I've used the project in the past, using it just now, plan to use it, or think it's a cool idea, I want the project creator to know that I like what they're doing. Terraform and Pulumi are projects that I recently starred to show support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-repo-stars"&gt;
  &lt;/a&gt;
  Benefits of repo stars
&lt;/h3&gt;

&lt;p&gt;The main benefit of repo stars is creating confidence and a good first impression of the project. That in turn helps with the project &lt;strong&gt;getting users&lt;/strong&gt;, and to a lesser extent contributors.&lt;/p&gt;

&lt;p&gt;A 2018 academic research survey of over 700 developers found that "three out of four developers consider the number of stars before using or contributing to GitHub projects"[2]. GitHub stars are not the only metric that matters though. A project's activity level, for example its last release or commit, and its ease of use, for example the quality of its documentation, are also important factors in helping projects get users.&lt;/p&gt;

&lt;p&gt;I say to a lesser extent as contributing, by creating a GitHub issue or submitting a pull request, requires significantly more effort than starring a repo. People who only star a repo are probably not yet active community members but they might become active in the future. This is why the Orbit Model classifies them as Observers[3], as they can act as the top-of-funnel for growing users and contributors.  hugely popular &lt;/p&gt;

&lt;p&gt;In addition to helping projects get users, GitHub stars can help the project creators &lt;strong&gt;meet investors&lt;/strong&gt; who are familiar with open source. Early on in Infracost's journey, we were surprised to get cold emails from VCs congratulating us on our star count. After speaking with a few, it became clear that they either had systems in place to monitor stars[4], or had analysts who reviewed Trending Repos on GitHub for potential investment opportunities[5]. Some have gone even further. For example, the VC firm Runa Capital, who invested in Nginx and MariaDB, has started to track the fastest growing open source startups using GitHub stars and forks. Infracost was recently placed 5th on the ROSS Index[6].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-github-stars"&gt;
  &lt;/a&gt;
  Future of GitHub stars
&lt;/h3&gt;

&lt;p&gt;A16Z's Martin Casado thinks that there is a big trend towards bottom-up strategies in business-to-business (B2B) software that will shape the entire B2B landscape in the next 10 years[7]. I wonder if in the same way that social media influencers are changing how products are marketed and sold, GitHub influencers (someone with many GitHub followers) will change how enterprise software is marketed and sold? Developer Advocates are currently using Twitter and LinkedIn, but GitHub has a "follow" and a "status update" feature too. Will those remain as a simple way to get updates on code-related activities? Or could they be extended to enable GitHub influencers to post their demos, talks and blogs into the GitHub activity feed? Will companies be able to buy ads on GitHub and promote their open source projects?&lt;/p&gt;

&lt;p&gt;Over to you - what have you learnt about GitHub stars, and how do you think they'll change in the future? I hang out on &lt;a href="https://twitter.com/AliKhajeh"&gt;Twitter&lt;/a&gt;...&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/alikhajeh1?tab=stars"&gt;https://github.com/alikhajeh1?tab=stars&lt;/a&gt;, this is a public page, so you can see the repos that any GitHub user has starred.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H. Borges and M. Tulio Valente, "What's in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform," Journal of Systems and Software, vol. 146, pp. 112‚Äì129, 2018. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://github.com/orbit-love/orbit-model"&gt;Orbit Model&lt;/a&gt; is implemented via the Orbit product, which can be used to measure and grow open source communities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://openbase.com"&gt;Openbase&lt;/a&gt; helps developers choose the right JavaScript package with more languages coming soon. See the &lt;a href="https://openbase.com/js/react"&gt;React&lt;/a&gt; page to get an idea of the kinds of metrics they collect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/trending"&gt;https://github.com/trending&lt;/a&gt;, Infracost has hit the Go trending page a few times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://runacap.com/ross-index/"&gt;https://runacap.com/ross-index/&lt;/a&gt;, Infracost was placed 5th in the fastest-growing open-source startups in Q4 2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fK5YUIS86SY"&gt;Growth, Sales, and a New Era of B2B&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>startup</category>
      <category>opensource</category>
    </item>
    <item>
      <title>String similarity search and fast LIKE operator using pg_trgm</title>
      <author>Muhammad Azeez</author>
      <pubDate>Tue, 11 May 2021 20:58:37 +0000</pubDate>
      <link>https://dev.to/mhmd_azeez/string-similarity-search-and-fast-like-operator-using-pgtrgm-24k2</link>
      <guid>https://dev.to/mhmd_azeez/string-similarity-search-and-fast-like-operator-using-pgtrgm-24k2</guid>
      <description>&lt;p&gt;SQL supports wildcard search on strings using &lt;code&gt;LIKE&lt;/code&gt; operator which accepts &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; wildcards. The problem with &lt;code&gt;LIKE&lt;/code&gt; is it's not very fast if you have a lot of rows and the query is &lt;a href="https://en.wikipedia.org/wiki/Sargable"&gt;non-sargable&lt;/a&gt;. And in some cases you need to provide fuzzy search capabilities where the results don't have to exactly match the query.&lt;/p&gt;

&lt;p&gt;PostgreSQL has the &lt;a href="https://www.postgresql.org/docs/9.6/pgtrgm.html"&gt;&lt;code&gt;pg_trgm&lt;/code&gt; extension&lt;/a&gt; that solves both problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has &lt;code&gt;gin&lt;/code&gt; and &lt;code&gt;gist&lt;/code&gt; indexes for speeding up &lt;code&gt;LIKE&lt;/code&gt; and other string operators&lt;/li&gt;
&lt;li&gt;It has &lt;code&gt;similarity&lt;/code&gt; function and &lt;code&gt;%&lt;/code&gt; operator for string similarity search using trigrams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's assume we have this table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;int4&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;GENERATED&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;forenames&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;surname&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;persons_pk&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Normalized columns are lowercase versions of the normal columns and special characters are removed. You can also remove character accents. This is to make the search experience better for the user as they don't have to type in the exact case and punctuations.&lt;/p&gt;

&lt;p&gt;I inserted 10M rows of fake data generated by &lt;a href="https://github.com/bchavez/Bogus"&gt;Bogus&lt;/a&gt; into the table. You can &lt;a href="http://github.com/mhmd-azeez/PgTrgm"&gt;download the dump here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If we run a &lt;code&gt;LIKE&lt;/code&gt; query on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; 
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On my laptop it takes PostgreSQL about a second to return the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;142174&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;719&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;460&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Launched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;141173&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;425&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;605&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;Rows&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3333308&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;097&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;494&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems like all of rows rows are scanned in the table. To speed things up, first we need to enable the &lt;code&gt;pg_trgm&lt;/code&gt; extension on the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use the &lt;code&gt;gin&lt;/code&gt; index on the normalized columns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;idx_gin_persons_on_names&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;gin&lt;/code&gt; index and &lt;code&gt;gin_trgm_ops&lt;/code&gt; operator are part of &lt;code&gt;pg_trgm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding the &lt;code&gt;gin&lt;/code&gt; index took about a minute on my laptop for 10M rows.&lt;/p&gt;

&lt;p&gt;Now let's see if the results have improved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3692&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;995&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;011&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;066&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;idx_gin_persons_on_names&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;995&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;092&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of &lt;code&gt;639.494 ms&lt;/code&gt; for execution time, now it only takes &lt;code&gt;4.1 ms&lt;/code&gt;! That's because instead of sequentially scanning all of the rows in the document, it scanned the &lt;code&gt;gin&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;Great, now let's take a look at how to do fuzzy search:&lt;/p&gt;

&lt;p&gt;Let's say we are trying to find someone with forename(s) of &lt;code&gt;anderson&lt;/code&gt; and surname of &lt;code&gt;mitchell&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mitchel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'andersen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt;
&lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query takes about 58 seconds to complete. The &lt;code&gt;similarity&lt;/code&gt; function is expensive, so we have to try not to use it as much as possible. For that, we can use the similarity operator (&lt;code&gt;%&lt;/code&gt;) to filter out the rows that are below a certain threshold. By default the threshold is 70% similarity (&lt;code&gt;0.3&lt;/code&gt;) but you can change that using &lt;code&gt;set_limit&lt;/code&gt;. Now let's use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mitchel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'andersen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="s1"&gt;'andersen'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="s1"&gt;'mitchel'&lt;/span&gt;
&lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt;
&lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it takes about &lt;code&gt;100ms&lt;/code&gt; on my laptop. A huge improvement over 58 seconds :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edge-cases"&gt;
  &lt;/a&gt;
  Edge Cases
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pg_trgm&lt;/code&gt; uses tri-grams for indexing. It means that each string is broken into all possible 3 letter components. For example &lt;code&gt;mitchel&lt;/code&gt;'s trigrams are: &lt;code&gt;mit&lt;/code&gt;,&lt;code&gt;itc&lt;/code&gt;,&lt;code&gt;tch&lt;/code&gt;,&lt;code&gt;che&lt;/code&gt;,&lt;code&gt;hel&lt;/code&gt; and &lt;code&gt;michelle&lt;/code&gt;'s trigrams are: &lt;code&gt;mic&lt;/code&gt;,&lt;code&gt;ich&lt;/code&gt;,&lt;code&gt;che&lt;/code&gt;,&lt;code&gt;hel&lt;/code&gt;,&lt;code&gt;ell&lt;/code&gt;,&lt;code&gt;lle&lt;/code&gt;. They share 2 trigrams so the similarity of &lt;code&gt;mitchel&lt;/code&gt; with &lt;code&gt;michelle&lt;/code&gt; is 30%.&lt;/p&gt;

&lt;p&gt;This approach is not useful for words that are less than 3 letters. As you can't form any trigrams. So this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; 
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%he%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%de%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Takes the same amount of time on both the indexed table and the non-indexed table because PostgreSQL does sequential scan for both of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;147095&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;49229&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;655&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;329&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;21216&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Launched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;141173&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20512&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;397&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;583&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;521&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7072&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%he%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%de%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;Rows&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3326261&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;655&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;974&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There can be cases where the index makes things slower. So please test it for your own use case and weight the trade-offs. Also keep in mind that inserts and updates take longer with the index.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;I wrote some very simple benchmarks using &lt;a href="https://github.com/dotnet/BenchmarkDotNet"&gt;BenchmarkDotNet&lt;/a&gt; and here is the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// * Summary *

BenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.928 (2004/?/20H1)
Intel Core i7-8550U CPU 1.80GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores
.NET Core SDK=5.0.201
  [Host]     : .NET Core 5.0.4 (CoreCLR 5.0.421.11614, CoreFX 5.0.421.11614), X64 RyuJIT
  DefaultJob : .NET Core 5.0.4 (CoreCLR 5.0.421.11614, CoreFX 5.0.421.11614), X64 RyuJIT


|            Method    |         Mean |      Error |     StdDev |     Median |
|---------------------:|-------------:|-----------:|-----------:|-----------:|
|    LikeOnGinIndex    |     5.398 ms |  0.7167 ms |   2.113 ms |   4.170 ms |
|              Like    | 1,035.140 ms | 55.0098 ms | 158.716 ms | 991.495 ms |
| SimilarityOnGinIndex |   137.339 ms | 14.7610 ms |  43.523 ms | 114.342 ms |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please download the database dump and code on &lt;a href="http://github.com/mhmd-azeez/PgTrgm"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>pgtrgm</category>
      <category>search</category>
    </item>
    <item>
      <title>Setting up a .NET service on Linux</title>
      <author>Jakub Rumpel</author>
      <pubDate>Tue, 11 May 2021 20:58:23 +0000</pubDate>
      <link>https://dev.to/hanewali/setting-up-a-net-service-on-linux-3hc0</link>
      <guid>https://dev.to/hanewali/setting-up-a-net-service-on-linux-3hc0</guid>
      <description>&lt;p&gt;This is another "I don't want to have to google this anymore" kind of post.&lt;/p&gt;

&lt;p&gt;Quick sidenotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I use .NET 5&lt;/li&gt;
&lt;li&gt;I didn't create the example &lt;em&gt;.service&lt;/em&gt; file; I couldn't find the original author, as it probably was from Stack Overflow, but this is the file I use on my VPS.&lt;/li&gt;
&lt;li&gt;This completely doesn't cover setting up nginx or writing actual code - just creates a service which runs your .NET app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-service-file"&gt;
  &lt;/a&gt;
  Create .service file
&lt;/h3&gt;

&lt;p&gt;My &lt;em&gt;.service&lt;/em&gt; files are stored in &lt;strong&gt;/etc/systemd/system/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sample &lt;em&gt;.service&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit]
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Sample Description

&lt;span class="o"&gt;[&lt;/span&gt;Service]
&lt;span class="c"&gt;# systemd will run this executable to start the service, has to be specific file&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/srv/AppDir/AppExecutable

&lt;span class="c"&gt;# to query logs using journalctl, set a logical name here&lt;/span&gt;
&lt;span class="nv"&gt;SysLogIdentifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SampleName

&lt;span class="c"&gt;# use your username to keep things simple&lt;/span&gt;
&lt;span class="c"&gt;#make use user you chose has the correct permissions to run the app&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username

&lt;span class="c"&gt;#this environment variable is neccessary when dotnet isn't loadeed for the specified user. &lt;/span&gt;
&lt;span class="c"&gt;#to figure out this variable, run 'env | grep DOTNET_ROOT' when dotnet has been loaded into your shell&lt;/span&gt;
&lt;span class="c"&gt;#Environment="DOTNET_ROOT=/opt/rh/rh-dotnet31/root/usr/lib64/dotnet"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;Install]
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Description - this will be shown as a description when you run systemctl status ServiceName.service, useful in order to identify the service&lt;/li&gt;
&lt;li&gt;ExecStart - This has to be a direct path to the executable file of your app. Make sure you made it executable using &lt;strong&gt;chmod +x&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;SysLogIdentifier - Name of the app used in syslog - again, useful to identify your app later&lt;/li&gt;
&lt;li&gt;User - Username of the user who "runs" the app. Preferably use your own, but you can use any as long as specified user has the correct permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#register-the-service"&gt;
  &lt;/a&gt;
  Register the service
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, check if systemctl command properly sees your .service file:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status ServiceName.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If results seems okay (Description is shown, and it seems like everything is okay), start your service&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start ServiceName.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aaand that's it! From this point on, you just have to make sure your code is good, and test if your app works!&lt;/p&gt;

&lt;p&gt;Have a great day ;)&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>linux</category>
    </item>
    <item>
      <title>Meet zx: A Better Way to Write Scripts with Node.js</title>
      <author>Alex Lakatos ü•ë</author>
      <pubDate>Tue, 11 May 2021 20:55:10 +0000</pubDate>
      <link>https://dev.to/lakatos88/meet-zx-a-better-way-to-write-scripts-with-node-js-4mkb</link>
      <guid>https://dev.to/lakatos88/meet-zx-a-better-way-to-write-scripts-with-node-js-4mkb</guid>
      <description>&lt;p&gt;Bash is great and all, but it‚Äôs not something I‚Äôll pick up in a day. I was looking for something a little bit more convenient to write scripts in. While looking, I‚Äôve stumbled upon this little &lt;a href="https://github.com/google/zx"&gt;utility from Google&lt;/a&gt; called &lt;code&gt;zx&lt;/code&gt;. And it‚Äôs a better way to write scripts using JavaScript.&lt;/p&gt;

&lt;p&gt;I thought I‚Äôd give &lt;code&gt;zx&lt;/code&gt; a try. It comes with a bunch of things out of the box, like &lt;code&gt;chalk&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt;. I know, Node.js already lets me write scripts, but dealing with a bunch of the crap around escaping and sanitizing inputs was painful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-script-way"&gt;
  &lt;/a&gt;
  The Script Way
&lt;/h2&gt;

&lt;p&gt;Before I talk about all the great things &lt;code&gt;zx&lt;/code&gt; promised, let‚Äôs talk about the basics of writing and using scripts first.&lt;/p&gt;

&lt;p&gt;Scripts are all text files and need to start with a shebang at the top (also known as sha-bang, hashbang, pound-bang or hash-pling). The shebang tells the operating system to interpret the rest of the file using that interpreter directive, effectively starting the interpreter and passing the text file along as a parameter.&lt;/p&gt;

&lt;p&gt;So, when scripts start with &lt;code&gt;#!/bin/bash&lt;/code&gt; or &lt;code&gt;#!/bin/sh&lt;/code&gt;, the OS actually runs &lt;code&gt;$ /bin/bash /path/to/script&lt;/code&gt; behind the scenes every time you execute the script.&lt;/p&gt;

&lt;p&gt;Before you can execute the script, you need to declare it in the system as executable. On Unix systems (macOS included), running &lt;code&gt;$ chmod +x ./script.sh&lt;/code&gt; or &lt;code&gt;$ chmod 775 ./script.sh&lt;/code&gt; will do the trick.&lt;/p&gt;

&lt;p&gt;After you‚Äôve given permissions to your script to be executed, you can run it with &lt;code&gt;$ ./script.sh&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bash-scripts"&gt;
  &lt;/a&gt;
  Bash Scripts
&lt;/h2&gt;

&lt;p&gt;A Bash script starts with the bash shebang, followed by a lot of black magic. üòÖ For example, to add two numbers that are given as command-line arguments, a script looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run it, save it as &lt;code&gt;add.sh&lt;/code&gt; and then run the following commands in your Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./add.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;./add.sh 5 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is going to be &lt;code&gt;5 + 7 = 12&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It looks pretty simple if you‚Äôve figured out that &lt;code&gt;$index&lt;/code&gt; is the command-line argument. I‚Äôve had to look that up while learning shell scripting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-zx-endraw-scripts"&gt;
  &lt;/a&gt;
  &lt;code&gt;zx&lt;/code&gt; Scripts
&lt;/h2&gt;

&lt;p&gt;Before you can use &lt;code&gt;zx&lt;/code&gt; to run scripts, you‚Äôll need to install it globally via npm, with &lt;code&gt;$ npm i -g zx&lt;/code&gt;. Why didn‚Äôt you need to install &lt;code&gt;bash&lt;/code&gt;? Because &lt;code&gt;bash&lt;/code&gt; comes installed by default with Unix systems.&lt;/p&gt;

&lt;p&gt;Similarly to all other scripts, a &lt;code&gt;zx&lt;/code&gt; script will start with a shebang. This time, a little more complicated, the &lt;code&gt;zx&lt;/code&gt; shebang. Followed by a lot of JavaScript. Let‚Äôs try to recreate the above shell script that adds two numbers given as command-line arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run it, save it as &lt;code&gt;add.mjs&lt;/code&gt; and then run the following commands in your Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./add.mjs
&lt;span class="nv"&gt;$ &lt;/span&gt;./add.mjs 5 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is going to be &lt;code&gt;/Users/laka/.nvm/versions/node/v16.1.0/bin/node + /usr/local/bin/zx = /Users/laka/.nvm/versions/node/v16.1.0/bin/node/usr/local/bin/zx&lt;/code&gt; üòÖ. And that‚Äôs because &lt;code&gt;process.argv&lt;/code&gt;, another Node.js wonder, gets called with three extra arguments before you get to 5 and 7. Let‚Äôs re-write the script to account for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the script now with &lt;code&gt;$ ./add.mjs 5 7&lt;/code&gt;, the output is going to be &lt;code&gt;5 + 7 = 57&lt;/code&gt;. Because JavaScript ü§¶. And JavaScript thinks those are strings and concatenates them instead of doing math. Re-writing the script again to deal with numbers instead of strings, it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Bash script looked a lot cleaner, right? I agree. And if I ever need to add two numbers from the command line, a Bash script would be a way better option! Bash doesn‚Äôt shine in a lot of other areas, though. Like parsing JSON files. I gave up trying to figure how to parse JSON files halfway through &lt;a href="https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools"&gt;the StackOverflow post explaining it&lt;/a&gt;. But this is where &lt;code&gt;zx&lt;/code&gt; shines.&lt;/p&gt;

&lt;p&gt;I already know how to parse JSON in JavaScript. And here is what the &lt;code&gt;zx&lt;/code&gt; script for it looks like, using the built-in &lt;code&gt;fetch&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://raw.githubusercontent.com/AlexLakatos/computer-puns/main/puns.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;puns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomPun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomPun&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;pun&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomPun&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;punchline&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because I was fancy and used the built-in &lt;code&gt;chalk&lt;/code&gt; module, this &lt;code&gt;zx&lt;/code&gt; script outputs a random pun from &lt;a href="https://puns.dev"&gt;https://puns.dev&lt;/a&gt; in the command-line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ydDhGLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alexlakatos.com/img/posts/node/node-json-zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ydDhGLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alexlakatos.com/img/posts/node/node-json-zx.png" alt="Computer Pun in Terminal via zx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building something similar in &lt;code&gt;shell&lt;/code&gt; had me rage-quit halfway through the process. And that‚Äôs OK. Finding the right tool for the job is what this post was all about.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Mock static methods with Mockito - Java Unit Testing</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 11 May 2021 20:46:52 +0000</pubDate>
      <link>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</link>
      <guid>https://dev.to/adaendra/mock-static-methods-with-mockito-java-unit-testing-189</guid>
      <description>&lt;p&gt;One of the most frustrating element when I am doing the Unit tests in Java is to not be able to mock static methods. &lt;/p&gt;

&lt;p&gt;Sure, during a long time we got PowerMock. But, since JUnit5, PowerMock wasn't compatible and we were unable to continue with it.&lt;/p&gt;




&lt;p&gt;But now, we have this feature included in Mockito! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;First, you have to add the &lt;strong&gt;mockito-inline&lt;/strong&gt; library. &lt;em&gt;(You can use any version up to 3.4.0)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is an exemple with Maven&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mockito&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mockito-inline&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.9.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#writing-test"&gt;
  &lt;/a&gt;
  Writing test
&lt;/h2&gt;

&lt;p&gt;To mock a static method, you have to create a &lt;strong&gt;mockStatic&lt;/strong&gt; of the class with the static method, and declare the event you want to apply to your mock.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MockedStatic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Mockito&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mockStatic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;loggerFactoryMock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loggerMock&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Err message test"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you just have to run your tests!&lt;/p&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>java</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How To Avoid Getting Stuck in Vim as a New git User</title>
      <author>Sam E. Lawrence</author>
      <pubDate>Tue, 11 May 2021 20:44:10 +0000</pubDate>
      <link>https://dev.to/samelawrence/my-favorite-git-one-liners-1di7</link>
      <guid>https://dev.to/samelawrence/my-favorite-git-one-liners-1di7</guid>
      <description>&lt;p&gt;If you're like me, when you get a new machine from work, the first thing you do is slap zsh on it, pull down your new repos, and start digging. It's all fun and games until you run &lt;code&gt;git branch&lt;/code&gt; and BLAM, you're stuck in Vim-land now, hope you brought a towel. I've seen more than a few new developers get stuck here, and I've had to embarrassingly ask for help myself, so if you're finding yourself stuck in this situation, know that you're not alone and you'll be ok. Just type &lt;code&gt;:wq&lt;/code&gt; and you should return to the terminal. However, if you want to prevent this happening again, read on.&lt;/p&gt;

&lt;p&gt;WARNING: This change is global and will affect all your git repositories. See the link below for details if you want to control this setting per repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; core.pager &lt;span class="nb"&gt;cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command modifies the global git configuration to use the tool &lt;code&gt;cat&lt;/code&gt; as the &lt;a href="https://en.wikipedia.org/wiki/Terminal_pager"&gt;terminal pager&lt;/a&gt; for all your future git commands. By default, on a new Mac with zsh installed, Vi is used... or Vim... I still don't really understand the difference, but it's one of them and you can't get out without &lt;code&gt;:wq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that after changing any configurations, you will need to re-launch your terminal to see changes take effect.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://stackoverflow.com/questions/2183900/how-do-i-prevent-git-diff-from-using-a-pager"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>git</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Validaci√≥n de formularios web en ASP.NET &amp; DotVVM</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 11 May 2021 20:33:45 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/validacion-de-formularios-web-en-asp-net-dotvvm-218h</link>
      <guid>https://dev.to/esdanielgomez/validacion-de-formularios-web-en-asp-net-dotvvm-218h</guid>
      <description>&lt;p&gt;¬°Hola! Un gusto saludarte. Cuando trabajamos con formularios web en aplicaciones con ASP.NET, es importante poder validar los datos que pueden ser enviados al servidor para almacenarlos o modificarlos. &lt;/p&gt;

&lt;p&gt;En esta nueva entrada, aprenderemos sobre c√≥mo validar formularios establecidos con DotVVM, de tal manera que se puedan mostrar asteriscos o mensajes de validaci√≥n para un campo especificado. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ejemplo-para-validaciones-en-formularios"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ejemplo para validaciones en formularios&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Para comprender el funcionamiento de las validaciones en formularios en ASP.NET con DotVVM, veamos un ejemplo. Supongamos que tenemos una p√°gina para el registro y autenticaci√≥n de usuarios, y queremos que validar loas campos de estos formularios. &lt;/p&gt;

&lt;p&gt;La p√°gina se visualizar√≠a de esta manera: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7OUZTala--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3irti7466lh9jq39ovb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7OUZTala--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3irti7466lh9jq39ovb.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, como es conocido, DotVVM se fundamenta en el patr√≥n MVVM (Modelo, Vista, VistaModelo), al emplear clases con C# y elementos visuales con HTML. En este sentido, veamos cada una de estas partes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#modelo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Modelo&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;En primer lugar, en esta secci√≥n podemos establecer modelos de datos que representen la informaci√≥n que los usuarios enviar√°n a la aplicaci√≥n a trav√©s de un formulario web. Este 'Modelo' deber√° proporcionar toda la informaci√≥n de validaci√≥n posible sobre de los datos que lo componen a trav√©s del uso de atributos de definici√≥n de metadatos (&lt;code&gt;DataAnnotations&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Dadas estas consideraciones, podemos encontrarnos con un modelo para la secci√≥n de autenticaci√≥n de usuarios, y otro para el registro. Con relaci√≥n al modelo de registro, este quedar√≠a de la siguiente manera:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateAccountForm&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IValidatableObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;MinLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Password2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;AgreeWithConditions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValidationContext&lt;/span&gt; &lt;span class="n"&gt;validationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;AgreeWithConditions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"You need to agree with terms &amp;amp; conditions."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AgreeWithConditions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Con las anotaciones de datos de ASP.NET, podemos encontrarnos por ejemplo con la anotaci√≥n &lt;code&gt;[Required]&lt;/code&gt;, la cual permite establecer que un atributo sea requerido al momento de llenar un formulario. Asimismo, podemos establecer la longitud m√≠nima o m√°xima que puede tener un atributo, validar que el campo cuente con un determinado formato, por ejemplo, formatos de correo electr√≥nico, tarjetas de cr√©dito, n√∫meros de tel√©fono, entre otros. &lt;/p&gt;

&lt;p&gt;Todas las anotaciones que podremos tener en cuenta en .NET 5 pueden ser consultadas en la siguiente direcci√≥n: &lt;a href="https://docs.microsoft.com/es-es/dotnet/api/system.componentmodel.dataannotations?redirectedfrom=MSDN&amp;amp;view=net-5.0"&gt;System.ComponentModel.DataAnnotations Espacio de nombres&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dentro del modelo, tambi√©n podemos establecer nuestras propias validaciones, por ejemplo, en este caso se puede verificar que el usuario este de acuerdo con los t√©rminos y condiciones al momento de registrarse. En caso de que no se cumpla la validaci√≥n, se puede establecer un mensaje de error personalizado. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vistamodelo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;VistaModelo&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Ahora, en el ViewModel necesitamos establecer los objetos que nos permitir√°n almacenar los datos recolectados en los formularios de inicio de sesi√≥n y de registro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;SignInForm&lt;/span&gt; &lt;span class="n"&gt;SignInForm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SignInForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CreateAccountForm&lt;/span&gt; &lt;span class="n"&gt;CreateAccountForm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CreateAccountForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finalmente, tambi√©n deberemos establecer los m√©todos que nos permitan realizar la operaci√≥n de inicio y registro de usuarios. Con relaci√≥n al metodo para iniciar sesion, en el proyecto nos podemos encontrar con algo como esto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SignIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this code actually doesn't sign anyone in - it's just a validation demo&lt;/span&gt;
    &lt;span class="c1"&gt;// you can use e.g. SignInManager.PasswordSignInAsync from ASP.NET Core Identity&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SignInForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"info@dotvvm.com"&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;SignInForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Password1234"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RedirectToRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: report invalid credentials&lt;/span&gt;
        &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ViewModelValidationError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ErrorMessage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Incorrect credentials."&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FailOnInvalidModelState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un aspecto interesante por mencionar es que podemos trabajar con un &lt;code&gt;ModelState&lt;/code&gt;. Este objeto nos permite realizar comprobaciones de validaci√≥n adicionales en el propio m√©todo, e informar de errores de validaci√≥n adicionales al usuario. Esto se usa para realizar validaciones que requieren acceso a la base de datos SQL, por ejemplo, para revisar las credenciales de un usuario son correctas (este es un ejemplo con fines ilustrativos). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vista"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Vista&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Con los modelos y los modelos de las vistas establecidos, ahora podemos estructurar nuestros formularios HTML con los controles de DotVVM establecidos para este prop√≥sito. Para este caso, veamos el c√≥digo para el formulario de inicio de sesi√≥n:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: SignInForm}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;form&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"signin-email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;TextBox&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
                        &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"signin-email"&lt;/span&gt;
                        &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;form&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="s"&gt;"
&lt;/span&gt;                        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: Email}"&lt;/span&gt;                                         
                        &lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: Email}"&lt;/span&gt;
                        &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter your e-mail"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;form&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"signin-password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;TextBox&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;
                        &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"signin-password"&lt;/span&gt;
                        &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;form&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="s"&gt;" 
&lt;/span&gt;                        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: Password}"&lt;/span&gt;
                        &lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: Password}"&lt;/span&gt;
                        &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ValidationSummary&lt;/span&gt; &lt;span class="n"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: _this}"&lt;/span&gt;
                            &lt;span class="n"&gt;IncludeErrorsFromTarget&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
                            &lt;span class="n"&gt;HideWhenValid&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
                            &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;alert&lt;/span&gt; &lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;danger&lt;/span&gt;&lt;span class="s"&gt;"/&amp;gt;
&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="n"&gt;IsSubmitButton&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; 
                &lt;span class="n"&gt;ButtonTagName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
                &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;btn&lt;/span&gt; &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="s"&gt;"
&lt;/span&gt;                &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{command: _root.SignIn()}"&lt;/span&gt;
                &lt;span class="n"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{value: _this}"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;Sign&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqu√≠ nos podemos encontrar con dos TextBox, el primero para el correo electr√≥nico, y el segundo para la contrase√±a del usuario. En este tipo de control, nosotros podemos poner el atributo Validator, donde debemos especificar el valor que queremos validar, por ejemplo: &lt;code&gt;Validator.Value="{value: Email}&lt;/code&gt;. Aqu√≠ la validaci√≥n se realizar√° de acuerdo con lo establecido en el modelo.&lt;/p&gt;

&lt;p&gt;Asimismo, podemos mostrar un resumen de errores con el control &lt;code&gt;ValidationSummary&lt;/code&gt;, de acuerdo con los &lt;code&gt;Validators&lt;/code&gt; establecidos dentro del formulario. &lt;/p&gt;

&lt;p&gt;En un escenario de ejemplo podr√≠amos encontrarnos con el siguiente caso:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ye1FNtso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7et0eyo415c7dcyuvk0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ye1FNtso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7et0eyo415c7dcyuvk0n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Donde, el correo electr√≥nico ingresado no se encuentra bajo un formato correcto, y el campo de la contrase√±a se encuentra vac√≠o. Estas validaciones se han realizado de acuerdo con lo establecido en las anotaciones en el modelo. &lt;/p&gt;

&lt;p&gt;En otro escenario, podr√≠amos encontrarnos con lo siguiente: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsTNOvHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lavsmketpstapss4p2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsTNOvHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lavsmketpstapss4p2r.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este caso ha sido porque las credenciales ingresadas se encuentran incorrectas. Esta validaci√≥n fue la que se hizo en el m√©todo para iniciar sesi√≥n con el &lt;code&gt;ModelState&lt;/code&gt; para validaciones personalizadas.  &lt;/p&gt;

&lt;p&gt;Y bien, de esta manera r√°pida y sencilla podremos validar nuestros formularios web dentro de ASP.NET con DotVVM.&lt;/p&gt;

&lt;p&gt;El c√≥digo fuente de este ejemplo se encuentra disponible en este repositorio de GitHub: &lt;a href="https://github.com/riganti/dotvvm-minutes/tree/master/09_Validation/DotvvmValidationSample"&gt;DotvvmValidationSample&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recursos-adicionales"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Recursos adicionales&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Si gustas seguir adquiriendo o reforzando conocimientos en esta √°rea, aqu√≠ se encuentran algunos recursos adicionales que pueden ser de gran utilidad: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/construyendo-un-dashboard-con-asp-net-core-y-dotvvm-geh"&gt;Construyendo un Dashboard con ASP.NET Core y DotVVM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/plantillas-html-para-elementos-repetitivos-en-asp-net-dotvvm-1ec8"&gt;Plantillas HTML para elementos repetitivos en ASP.NET &amp;amp; DotVVM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/esdanielgomez/net-5-despliegue-de-aplicaciones-web-con-azure-app-service-3i18"&gt;.NET 5: Despliegue de aplicaciones web con Azure App Service&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Muchas gracias por leer, espero que este demo pueda serte de utilidad. Si tienes alguna pregunta o alguna idea que necesites discutir, ser√° un gusto poder colaborarte y juntos intercambiar conocimientos entre s√≠.&lt;/p&gt;

&lt;p&gt;¬°Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas tambi√©n puedes escribirme por &lt;a href="https://t.me/esdanielgomez"&gt;Telegram&lt;/a&gt;. :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>React, TypeScript, and TDD</title>
      <author>Paul Everitt</author>
      <pubDate>Tue, 11 May 2021 20:04:21 +0000</pubDate>
      <link>https://dev.to/pauleveritt/react-typescript-and-tdd-1ne7</link>
      <guid>https://dev.to/pauleveritt/react-typescript-and-tdd-1ne7</guid>
      <description>&lt;p&gt;ReactJS is wildly popular and thus wildly supported. TypeScript is increasingly popular, and thus increasingly supported.&lt;/p&gt;

&lt;p&gt;The two together? Getting a lot better. Those two, in the context of test-driven development, combined with smart tooling? It's hard to find accurate learning materials.&lt;/p&gt;

&lt;p&gt;That three-part combination -- React, TypeScript, and TDD -- is the topic of this series. This article is a Part 1 summary of a 10-part &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/project_setup/"&gt;video/text/code tutorial on React, TypeScript, and TDD&lt;/a&gt;. In two later installments, we‚Äôll recap later steps from the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-testdriven-development"&gt;
  &lt;/a&gt;
  Why Test-Driven Development?
&lt;/h2&gt;

&lt;p&gt;Eat your vegetables!&lt;/p&gt;

&lt;p&gt;Test-driven development, or TDD, is pitched as a way to do extra work up front, to improve quality and save time later on. Most people, when told that, hear: ‚ÄúBlah blah &lt;strong&gt;extra work&lt;/strong&gt; blah blah blah‚Äù and take a pass.&lt;/p&gt;

&lt;p&gt;This tutorial series tries to pitch test-first in a different light: it‚Äôs &lt;strong&gt;faster&lt;/strong&gt; and more &lt;strong&gt;joyful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why is it &lt;strong&gt;faster&lt;/strong&gt;? I‚Äôm writing a React component, and I want to see if it works. I leave my editor, go to my browser, click around in the universe, hope I didn‚Äôt break something in another route/view. With the style of development pitched in this article, you stay in your smart editor, in the few lines of test code, and watch as things gradually start working.&lt;/p&gt;

&lt;p&gt;And don‚Äôt even get me started on debugging during component development, aka &lt;code&gt;console.log&lt;/code&gt;. Instead, you sit in your test, running under NodeJS, and set breakpoints, as all the gods in the multiverse intended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Joyful&lt;/strong&gt;? &lt;em&gt;Testing&lt;/em&gt;? &lt;/p&gt;

&lt;p&gt;That‚Äôs a big claim. But it‚Äôs true. Instead of breaking your mental ‚Äúflow‚Äù going between tools and contexts, you stay in your IDE, where you have muscle memory atop muscle memory. Code on the left, test on the right, test output at the bottom.&lt;/p&gt;

&lt;p&gt;Mess something up? You‚Äôll &lt;em&gt;fail faster&lt;/em&gt; with a broken test or even an IDE squiggly thanks to TypeScript. If you broke something that isn‚Äôt the URL being hot reloaded by create-react-app, you‚Äôll know that too. It‚Äôs a feeling -- really, I‚Äôm not just saying this -- of calm, methodical progress.&lt;/p&gt;

&lt;p&gt;Of course, you also get your vegetables into the bargain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;I won‚Äôt belabor the details of getting started: it‚Äôs in the &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/project_setup/"&gt;tutorial step&lt;/a&gt; and quite familiar to anybody who has used &lt;a href="https://create-react-app.dev"&gt;Create React App&lt;/a&gt;. Still, to get oriented, I‚Äôll show a few things.&lt;/p&gt;

&lt;p&gt;What is Create React App (CRA)? Modern React, like anything in frontend development, has gotten awfully fiddly. CRA is a scaffold to create new React projects, using a known set of working packages.&lt;/p&gt;

&lt;p&gt;You could master the hundreds of npm packages and configuration yourself, &lt;em&gt;and&lt;/em&gt; keep them up-to-date as things change. CRA not only generates a working project for you, it moves the ongoing configuration &lt;em&gt;into their package&lt;/em&gt;. Meaning, they will keep it working. (Terms and conditions apply, consult a doctor before tinkering, offer not valid if you eject.)&lt;/p&gt;

&lt;p&gt;Creating a new project using npx (the npm command to fetch and run a package) is easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modern IDEs probably automate this for you as part of the New Project wizard.&lt;/p&gt;

&lt;p&gt;npx will then fetch the create-react-app package, run it, and pass the template argument saying to generate a package that uses TypeScript. You‚Äôll probably get a laugh out of this self-aware log message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Installing packages. This might take a couple of minutes.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command also initializes a git repo, creates a &lt;code&gt;package.json&lt;/code&gt;, and does the equivalent of npm install for your generated package. At the time of this writing, the result is a mere 1,063 entries in the &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Thank you CRA for owning all that.&lt;/p&gt;

&lt;p&gt;You now have a working Hello World in React and TypeScript. To see it in action, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your IDE probably has a pointy-clicky way to run this. For example in WebStorm and other IntelliJ IDEs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AecWWQJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jetbrains.com/webstorm/guide/static/5f4c67b9ebb6b64ee278d543c670414d/efc66/npm_tool_window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AecWWQJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jetbrains.com/webstorm/guide/static/5f4c67b9ebb6b64ee278d543c670414d/efc66/npm_tool_window.png" alt="npm run start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôll see some log messages as the dev server starts, and a browser will open at &lt;code&gt;http://localhost:3000&lt;/code&gt; -- convenient!&lt;/p&gt;

&lt;p&gt;Where did ‚Äústart‚Äù come from? Take a look at the ‚Äúscripts‚Äù block in the generated package.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"start": "react-scripts start",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs a shortcut to a console script provided by CRA.&lt;/p&gt;

&lt;p&gt;But wait, there‚Äôs more! With the dev server still running, open &lt;code&gt;src/App.tsx&lt;/code&gt; and some text in the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, then save. In a second or two, your browser shows the update. CRA is watching for changes, transparently executes the four trillion instructions to change the frontend code, and does a smart reload with the browser.&lt;/p&gt;

&lt;p&gt;If you look at all of &lt;code&gt;package.json&lt;/code&gt;, you‚Äôll see that it is quite compact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react_ts_tdd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.11.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.1.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.0.15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app/jest"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;0.2%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not op_mini all"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 chrome version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 firefox version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 safari version"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, ‚Äúcompact‚Äù relative to the amount of work it is doing.&lt;/p&gt;

&lt;p&gt;The genius of create-react-app lies in moving a bunch of "What the hell is this?" configuration files, into its packages. Thus, they own those decisions and complexity. You can then upgrade those packages and gain new/fixed wiring of all the JavaScript build tools.&lt;/p&gt;

&lt;p&gt;Let‚Äôs run one more of the scripts CRA provided:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm run-script build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes a while, as it hyper-optimizes a generated React site/app in the &lt;code&gt;build&lt;/code&gt; directory. This can then be deployed to a server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-test"&gt;
  &lt;/a&gt;
  Hello Test
&lt;/h2&gt;

&lt;p&gt;‚ÄúYou got me excited about testing, no testing, where‚Äôs the testing!‚Äù You‚Äôre right! Let‚Äôs do some testing, following &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/testing/"&gt;the tutorial step that covers this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, some background. I know, I know, I‚Äôll get to a test soon.&lt;/p&gt;

&lt;p&gt;CRA is opinionated. It chooses important packages, generates the configuration, and keeps the setup working. For testing, &lt;a href="https://create-react-app.dev/docs/running-tests"&gt;CRA has made&lt;/a&gt; three important choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; as the test runner&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tmpvar/jsdom"&gt;jsdom&lt;/a&gt; as a simulated browser&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/testing-library/react-testing-library"&gt;react-testing-library&lt;/a&gt; for test helpers and an assertion library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enough ceremony. Let‚Äôs run the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm run-script &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs running under the watcher, so it tells you it doesn‚Äôt have any tests that have changed, based on Git:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsVjIPv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz7fi3e7o7u7k8d8hynk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsVjIPv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz7fi3e7o7u7k8d8hynk.png" alt="Watched No Changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;src/app/App.tsx&lt;/code&gt; and change &lt;code&gt;save to reload&lt;/code&gt; to &lt;code&gt;save to reload!!&lt;/code&gt;. You‚Äôll see output the looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--livH7cKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8cr480qygsujtdl1ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--livH7cKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq8cr480qygsujtdl1ls.png" alt="Watched Changed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The watcher has some options to limit what it looks for, which really helps productivity. This time, change ‚ÄúLearn React‚Äù in &lt;code&gt;src/App.tsx&lt;/code&gt; to say ‚ÄúMaster React‚Äù. The watcher re-runs the tests, which now &lt;em&gt;fail&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XosrSUAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z783fhv2g9y7vw9kmy6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XosrSUAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z783fhv2g9y7vw9kmy6f.png" alt="Watched Failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an IDE you might get a richer way to look at this. For example, in WebStorm, here‚Äôs what the failing test runner looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TS7Iis2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsce6vd5w73zz5fmtpfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TS7Iis2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsce6vd5w73zz5fmtpfq.png" alt="In An IDE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What‚Äôs really happening here? What‚Äôs executing? As mentioned earlier, CRA uses Jest as a test running. That makes Jest a...wait for it...test &lt;em&gt;runner&lt;/em&gt;. It provides configuration, command flags (such as the watcher), ways to find tests, etc. It also &lt;a href="https://jestjs.io/docs/configuration#testenvironment-string"&gt;bundles jsdom as the pre-configured test environment&lt;/a&gt;, which is a long way to say ‚Äúbrowser.‚Äù&lt;/p&gt;

&lt;p&gt;jsdom is really neat. It‚Äôs a fake browser, written in JS, that runs in NodeJS and pretends to render your markup and execute your JavaScript. It‚Äôs a super-fast, unobtrusive alternative to Chrome firing up for each test.&lt;/p&gt;

&lt;p&gt;Jest also uses &lt;a href="https://testing-library.com"&gt;testing-library&lt;/a&gt; -- specifically, its React integration -- for the format of the tests and the assertions where you check that the code works. &lt;/p&gt;

&lt;p&gt;What does that look like? What does an actual &lt;em&gt;test&lt;/em&gt; look like? Here is the test that Create React App generates by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll see more down below when we really get into TDD. But for now...this is a nice way to work: staying in your editor and failing faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-during-testing-with-nodejs"&gt;
  &lt;/a&gt;
  Debugging During Testing With NodeJS
&lt;/h2&gt;

&lt;p&gt;We‚Äôve already shown a lot, enough that -- at least for me -- is really compelling for working this ‚Äútest-first‚Äù way. But there‚Äôs one more part that clearly beats the alternative: debugging. This is covered in the &lt;a href="https://www.jetbrains.com/webstorm/guide/tutorials/react_typescript_tdd/nodejs_debugging/"&gt;text and video for the tutorial step&lt;/a&gt; on this section. This section shows integration with a particular tool (WebStorm) but concepts apply elsewhere.&lt;/p&gt;

&lt;p&gt;Imagine, instead of just an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; with a label, we wanted a function that calculated the ‚Äúgreeting‚Äù. This function might take an argument for the name to say hello to, and we want to uppercase that name.&lt;/p&gt;

&lt;p&gt;We could write the function and insert the call in the heading. Let‚Äôs write a test first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;generates a label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello REACT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test fails: we haven‚Äôt written a label function. In fact, our tool gave us a warning, saying we haven't even imported it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_u7Gsle9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38qx7h8gz01kzt8xwsqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_u7Gsle9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38qx7h8gz01kzt8xwsqn.png" alt="Missing Label"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs now write that &lt;code&gt;label&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we import it in &lt;code&gt;src/App.test.tsx&lt;/code&gt;, the tests now pass again. That‚Äôs great, but if we pass it an integer instead of a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;generates a label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello REACT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...the test will get angry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vX84nABG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq06rcysue612ve2e0yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vX84nABG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq06rcysue612ve2e0yk.png" alt="Integer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we can‚Äôt easily figure out the problem. Rather than sprinkling &lt;code&gt;console.log&lt;/code&gt; everywhere, we can use...the debugger! Set a breakpoint on the line in the test:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8vkhpmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0p2jup0qvwo36pinz8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8vkhpmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0p2jup0qvwo36pinz8t.png" alt="Breakpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now run the tests, but executing under the debugger:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJOixvPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opjjq6s2cn7b61vopkin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJOixvPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opjjq6s2cn7b61vopkin.png" alt="Run Under Debugger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execution will stop on this line in the test. You can choose ‚ÄúStep Into‚Äù to jump into the label function and then poke around interactively. You then discover -- duh, integers don‚Äôt have a &lt;code&gt;toUpperCase&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NJ2wH1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qiu3fk6nh95u7ln9ghx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NJ2wH1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qiu3fk6nh95u7ln9ghx.png" alt="Stop At Breakpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In fact, TypeScript was warning us about this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ddm3YtE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzfhr5aty8o733q9z3iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ddm3YtE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzfhr5aty8o733q9z3iu.png" alt="TypeScript Warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a way to help guard against this, and to ‚Äúfail faster‚Äù in the future, add type information to the name argument for the &lt;code&gt;label&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Debugging during test writing -- and staying in NodeJS, thus in your tool -- is super-productive. It‚Äôs much more productive than &lt;code&gt;console.log&lt;/code&gt; the universe, or using the browser debugger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Writing React components is usually an iterative process: write some code, switch to the browser, click around. When you have problems and need to poke around, it‚Äôs...complicated.&lt;/p&gt;

&lt;p&gt;The combination of TypeScript, test-first, and smarter tooling gives an alternative. One where you ‚Äúfail faster‚Äù and stay in the flow, code with confidence -- and dare I say, have more fun.&lt;/p&gt;

&lt;p&gt;In this first part we set the scene. As the tutorial shows, we‚Äôll get into real component development in the next two parts.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>testing</category>
    </item>
    <item>
      <title>First week of the 365 Days Of Blogging Challenge!</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Tue, 11 May 2021 19:53:30 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</link>
      <guid>https://dev.to/pjeziorowski/first-week-of-the-365-days-of-blogging-challenge-4f18</guid>
      <description>&lt;p&gt;So, &lt;a href="https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9"&gt;in the previous post&lt;/a&gt; I announced the challenge of blogging daily for the next 365 days or sending $1000 to a random person chosen from the comments section. &lt;/p&gt;

&lt;p&gt;After doing it I received tons of comments (hopefully not just because of the potential easy $ you may win if I fail :D) about what am I going to write about, about the quantity and quality of the articles and so on. &lt;/p&gt;

&lt;p&gt;A few fellow dev.to members suggested that I should substitute the goal of "1 article daily" by "x words daily" to make sure the published articles are high quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quality-over-quantity"&gt;
  &lt;/a&gt;
  Quality over quantity
&lt;/h2&gt;

&lt;p&gt;I agree that goal of writing "X amount of words daily" may lead to higher quality posts, so I decided to follow the suggestions I got in the comments section, and instead of publishing 1 article a day, I'll be writing 500 words daily, or 3500 words weekly. &lt;/p&gt;

&lt;p&gt;This is a quite aggressive goal - as @InHuoOfficial mentioned &lt;a href="https://dev.to/inhuofficial/comment/1ecdi"&gt;in his comment&lt;/a&gt;, this would result in writing basically two novels in one year (over 180K words!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-of-the-posts"&gt;
  &lt;/a&gt;
  Topics of the posts
&lt;/h2&gt;

&lt;p&gt;To answer all the questions I had about topics of the articles - I'll be writing about things I'm currently working on at &lt;a href="https://www.qovery.com/"&gt;startup I help to build&lt;/a&gt;, about things I'm currently learning, about things I'm interested in. &lt;/p&gt;

&lt;p&gt;I'm a pretty geeky tech person, so it's going to all revolve around software, programming and tech topics. You may also expect stuff about productivity, biohacking, and basically anything that may help you in your tech journey.&lt;/p&gt;

&lt;p&gt;If this challenge goes well, I'll also describe my case study and show you how I managed to write and publish consistently over such a long time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-in-public-amp-transparency"&gt;
  &lt;/a&gt;
  Writing in Public &amp;amp; Transparency
&lt;/h2&gt;

&lt;p&gt;To keep the challenge fair and give you visibility into the process, besides publishing articles, I'll be publishing drafts of posts to a &lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;public Github repository&lt;/a&gt; (which is the repo of my private blog BTW). &lt;/p&gt;

&lt;p&gt;You'll be able to track what I'm working on, topics of following articles, number of words or whatever you want to know about my writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes-in-the-challenge"&gt;
  &lt;/a&gt;
  Changes in the challenge
&lt;/h2&gt;

&lt;p&gt;So, as I previously mentioned, I'm changing the numbers in the challenge - instead of publishing 1 article a day, I'll write 500 words a day, 3500 words a week, over 180k words (2 novels!) a year. I'll do the counting, reporting and tracking if I meet the challenge's goals every week during the weekend. &lt;/p&gt;

&lt;p&gt;If you want to be informed about progress and the results (and also about the potential $1000 winner in case I fail), you can &lt;a href="https://app.getresponse.com/site2/patrykjeziorowski/?u=yXSNe&amp;amp;webforms_id=BaviR"&gt;sign up to the newsletter&lt;/a&gt; I quickly created for the purpose of this challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-up-to-date"&gt;
  &lt;/a&gt;
  Stay up to date
&lt;/h2&gt;

&lt;p&gt;Besides the newsletter, I'll publish all the articles (and challenge updates) here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/pjeziorowski"&gt;https://dev.to/pjeziorowski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cyberwritings.com"&gt;https://cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.cyberwritings.com"&gt;https://medium.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.cyberwritings.com"&gt;https://hashnode.cyberwritings.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And drafts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts"&gt;https://github.com/pjeziorowski/cyberwritings/tree/main/content/drafts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#it-all-starts-this-week"&gt;
  &lt;/a&gt;
  It all starts this week!
&lt;/h2&gt;

&lt;p&gt;Please let me know what do you think about the changes and the form of the challenge. I'll try to constantly improve the process, but I'd also like to start the challenge ASAP (this week), so any feedback now is highly appreciated! &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Job As A Web Developer</title>
      <author>Michael Duffy</author>
      <pubDate>Tue, 11 May 2021 19:45:41 +0000</pubDate>
      <link>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</link>
      <guid>https://dev.to/michaelduffy1/first-job-as-a-web-developer-3l92</guid>
      <description>&lt;p&gt;Since my first few posts here I was in the last few months of my HND Software Development course at college. My next steps were to apply for university and try my luck at applying for any developer positions that were available. (just chancing my luck to even get an interview)&lt;/p&gt;

&lt;p&gt;After many different applications I got a conditional offer for a course at university and i got an interview for a web developer position.&lt;/p&gt;

&lt;p&gt;The 1st interview was fairly relaxed and just about getting to know me as a person and what I was doing at that moment in time.&lt;/p&gt;

&lt;p&gt;I got offered a 2nd interview and this was more technical as I had to design and code a homepage for them and then present my designs. (both interviews were done remotely as COVID)&lt;/p&gt;

&lt;p&gt;I got mixed up with the interview times due to a MS Teams meeting error which said my meeting was an hour earlier than i first knew. Panic set in as I emailed the employer telling them I had made a mistake and got mixed up but it turned out was just a mixup on MS Teams.&lt;/p&gt;

&lt;p&gt;After the stress wore off I presented my designs and all went well. I was told that I would be informed later that day of any decisions regarding the web developer position.&lt;/p&gt;

&lt;p&gt;I got called a few hours later and was offered the job !!! &lt;br&gt;
I am just beginning my professional career within web development and will be journalling it through this forum.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>career</category>
    </item>
  </channel>
</rss>
