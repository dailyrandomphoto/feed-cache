<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Predicciones üßû‚Äç‚ôÄÔ∏èüíª 2022</title>
      <author>Khriztian Moreno</author>
      <pubDate>Tue, 04 Jan 2022 15:56:34 +0000</pubDate>
      <link>https://dev.to/khriztianmoreno/predicciones-2022-48a8</link>
      <guid>https://dev.to/khriztianmoreno/predicciones-2022-48a8</guid>
      <description>&lt;p&gt;Algunos puntos que deber√≠as prestar atenci√≥n para este a√±o 2022 que seguro tendr√°n un alto impacto en el ecosistema tecnol√≥gico.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RIP Babel y Webpack&lt;/strong&gt;: No desaparecer√°n para siempre, pero ser√°n reemplazados en gran medida por nuevas herramientas de compilaci√≥n que son m√°s r√°pidas e intuitivas, como &lt;a href="https://swc.rs/"&gt;SWC&lt;/a&gt;, &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; y &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serverless ayudar√° a los desarrolladores frontend a convertirse en desarrolladores fullstack (reales)&lt;/strong&gt;: y (con suerte) recibir el pago correspondiente. Gran parte de la tecnolog√≠a sin servidor se basa en V8 y est√° adoptando Web APIs, por lo que los frontend developers ya estar√°n familiarizados con las partes clave de la infraestructura sin servidor. Ahora, en lugar de poner en marcha un servidor Express y llamarse a s√≠ mismo un "fullstack developer", Serverless le permitir√° ser realmente uno.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Next.js se volver√° menos un meta-framework de React y m√°s un meta-framework &lt;em&gt;web&lt;/em&gt;&lt;/strong&gt;: Vercel ya ha contratado a Rich Harris (tambi√©n conocido como Lord of the Svelte) y ha compartido sus planes para un enfoque &lt;a href="https://vercel.com/features/edge-functions"&gt;edge-first&lt;/a&gt; para la web con cualquier framework. Se apoyar√°n a√∫n m√°s en esto en 2022, se adaptar√°n a m√°s frameworks/libs JS (con fundas de almohada llenas de efectivo) y se preparar√°n para una &lt;a href="https://es.wikipedia.org/wiki/Oferta_p%C3%BAblica_de_venta"&gt;IPO&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Las herramientas &lt;a href="https://www.genbeta.com/desarrollo/que-programacion-low-code-no-code-que-se-diferencian-como-estan-democratizando-creacion-aplicaciones"&gt;No/Low-code&lt;/a&gt; dominar√°n a√∫n m√°s&lt;/strong&gt;: Probablemente continuaremos ignor√°ndolas; mientras tanto, m√°s agencias y adolescentes ganar√°n millones de d√≥lares enviando sitios sin escribir una l√≠nea de c√≥digo. En 2022, tambi√©n comenzaremos a ver empresas de software m√°s establecidas con "desarrolladores reales" que aprovechan las herramientas sin c√≥digo o con poco c√≥digo porque el mejor c√≥digo es el que no tiene que mantener.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Meta ceder√° el control de React&lt;/strong&gt;: Al igual que cuando crearon &lt;a href="https://graphql.org/foundation/"&gt;GraphQL Foundation&lt;/a&gt; en 2018, Meta crear√° una React Foundation a finales de este a√±o y ceder√° el control de React. A diferencia de Microsoft/Amazon/Google, Meta nunca ha monetizado (con √©xito) a los desarrolladores, por lo que React no es una prioridad estrat√©gica para la empresa. Eso podr√≠a ser a√∫n m√°s cierto ahora, con los ojos de Zuck en el Metaverso y Sebastian Markb√•ge &lt;a href="https://twitter.com/sebmarkbage/status/1470761450541142023"&gt;partiendo hacia Vercel&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC resolver√° la financiaci√≥n de Open Source&lt;/strong&gt;: Al menos, se sentir√° as√≠. Con algunos proyectos OSS previos a los ingresos/tracci√≥n/pmf que generaron rondas de semillas a valoraciones entre $25-50MM, querr√° desempolvar ese viejo proyecto secundario suyo. No s√© si es sostenible (no lo es), pero es mucho mejor que cuando confiamos en &lt;a href="https://twitter.com/youyuxi/status/970722976739086336"&gt;Patreon&lt;/a&gt; para financiar nuestra infraestructura web cr√≠tica.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Netlify adquirir√° Remix&lt;/strong&gt;: Los framework de "Bottoms up" es la ola. &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; querr√° la distribuci√≥n y &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt; querr√° el‚Ä¶ dinero. Permitir√≠a al equipo de Remix dedicar su tiempo a aquello en lo que son buenos, Remix-the-framework, en lugar de Remix-the-business. El emparejamiento les dar√≠a a ambos una oportunidad mucho mejor de ponerse al d√≠a con Vercel/Next.js&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mientras todo eso ocurre ...? podemos seguir trabajando tranquilamente.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>spanish</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Why every developer should do side projects?</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 04 Jan 2022 15:54:04 +0000</pubDate>
      <link>https://dev.to/ms_yogii/why-every-developer-should-do-side-projects-12gb</link>
      <guid>https://dev.to/ms_yogii/why-every-developer-should-do-side-projects-12gb</guid>
      <description>&lt;p&gt;Hello folks, &lt;/p&gt;

&lt;p&gt;Let me start by wishing you all a very happy and healthy new year üéâ&lt;/p&gt;

&lt;p&gt;Because we have just entered the new year and most of us spend this time in goal setting or building new habits into our routines, it is the best time to share this thought and promote the importance of side projects. &lt;/p&gt;

&lt;p&gt;Let's begin by understanding what are the benefits of doing a side project. I will use 3 different advantages of side projects to convince you this - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-the-best-way-of-learning"&gt;
  &lt;/a&gt;
  1. The best way of learning.
&lt;/h3&gt;

&lt;p&gt;I am all time promoter of learning by doing. Tutorials are good to get introduced to something but they are limited when it comes to practical implementation. When you work on your side project, you implement something from scratch and every iteration of this implementation will make you learn something new. &lt;/p&gt;

&lt;p&gt;Working on something gives you a deep understanding of its concepts which are most likely missed otherwise. That‚Äôs why I am claiming it to be ‚Äúthe best‚Äù way of learning new things. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-proof-of-work"&gt;
  &lt;/a&gt;
  2. Proof of work.
&lt;/h3&gt;

&lt;p&gt;With every new side project you create, you are creating proof of work for your skills. Most of the time, the work you do for your organization (where you are working full-time) is private and there is no way you can show the world how awesome developer you are. In such cases, your side projects will be your advocates. You claiming to know certain technology and you showing off a project built in that technology all by yourself, which one you will prefer? &lt;/p&gt;

&lt;p&gt;It‚Äôs obvious that these projects are the best way to promote your skills and will help you get your next job or the new freelance gig.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-end-to-end-understanding-of-working-on-an-idea"&gt;
  &lt;/a&gt;
  3. End to end understanding of working on an idea
&lt;/h3&gt;

&lt;p&gt;Most often, we work on a product in a team or we only know a part of that product. This makes us unaware of so many sides of developing a product. When you create your project from scratch, you are responsible for each and every part of that project. Starting from designing, to deciding features, to testing the edge cases, to deploying it to prod, you are the one looking after everything. &lt;/p&gt;

&lt;p&gt;This complete product development life-cycle will make you more aware of all the side effects of small decisions we take and will improve your workflows. &lt;/p&gt;

&lt;p&gt;If you are still reading, I am pretty sure you are convinced with the thought of doing a side-project. But one small and most powerful tip, &lt;strong&gt;Don‚Äôt shy away from sharing your side projects with as many people as you can!&lt;/strong&gt; You will get the correct exposure and suggestions about your project only when you share it with people. Share your project with your friends, colleagues, share it on Twitter, or make it openly available on Github. The more you share and promote it, the more improvements you will make. You will get noticed for your work, you will understand the mistakes you might have done or you will get to know other approaches people are choosing. &lt;/p&gt;

&lt;p&gt;All this is good and you are convinced, but &lt;strong&gt;how to choose a side project? ü§î&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A side project can be anything, as small as a small animating card component or as big as a SaaS product. You have to keep your eyes and interest open, and you will see so many ideas floating around you. Whatever interests you most, pick that up and start building. &lt;/p&gt;

&lt;p&gt;I have listed some ideas for myself, sharing those with you which might help you think about one - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A chrome extension for Pomodoro timer.&lt;/li&gt;
&lt;li&gt;An expense tracker for yourself. &lt;/li&gt;
&lt;li&gt;A habit tracker.&lt;/li&gt;
&lt;li&gt;App to collect user feedback.&lt;/li&gt;
&lt;li&gt;Different component libraries, and the options are limitless. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding the importance of side projects, a few months ago, we started working on one. The thought was simple, a platform to create a single work profile for every individual and we built &lt;a href="https://peerlist.io"&gt;Peerlist&lt;/a&gt;. While working on it, we also started sharing our journey on Twitter. The responses were amazing and the idea evolved so wonderfully that the side project is now our full-time job! So, that‚Äôs why I am here, promoting the importance of doing side projects because who knows, you might end up monetizing your one ü§ë&lt;/p&gt;

&lt;p&gt;Final thought, building a side project will definitely make you jack of all and master of some. So what are you waiting for? Let's &lt;code&gt;git init&lt;/code&gt;üòâ&lt;/p&gt;

&lt;p&gt;That‚Äôs it from this article! If you are working on something or you have some ideas, do share them in the comments. I would love to check them out.&lt;/p&gt;

&lt;p&gt;You can also connect with me on &lt;a href="https://twitter.com/hey_yogini"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.buymeacoffee.com/heyyogini"&gt;buy me a coffee&lt;/a&gt; if you like my articles. I publish an article every tuesday about web development, frontend, my learnings, and some random fun thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy coding and keep learning üôå&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>sideprojects</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dev Learning Hub - a place to share your knowledge with everyone powered with MongoDB Atlas</title>
      <author>Brayan Arrieta</author>
      <pubDate>Tue, 04 Jan 2022 15:52:33 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/dev-learning-hub-a-place-to-share-your-knowledge-with-everyone-powered-with-mongodb-atlas-24hc</link>
      <guid>https://dev.to/brayanarrieta/dev-learning-hub-a-place-to-share-your-knowledge-with-everyone-powered-with-mongodb-atlas-24hc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dev Learning Hub&lt;/strong&gt; is the place to share your knowledge with other developers. &lt;strong&gt;Dev Learning Hub&lt;/strong&gt; is a website with the main idea of creating a collection of useful resources based on community feedback and request. That will allow to everyone improve their level skills and also collaborate with other developers to learn together as a community. Some of the features provided by &lt;strong&gt;Dev Learning Hub&lt;/strong&gt; are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-snippet-collection"&gt;
  &lt;/a&gt;
  Code Snippet Collection
&lt;/h4&gt;

&lt;p&gt;Code snippets are templates that make it easier to enter repeating code patterns. For that reason, every developer probably has several snippets that can help to do the work easier. &lt;strong&gt;Dev Learning Hub&lt;/strong&gt; wants to have a collection of developers' code snippets of different technologies.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IYl7VtnyUpk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#interview-questions-collection"&gt;
  &lt;/a&gt;
  Interview Questions Collection
&lt;/h4&gt;

&lt;p&gt;I believe that each one of us has ever had to prepare for a job interview. Regardless of whether we are students, junior developers, senior developers, or a different role, we know how complicated it can be at first to enter the world of interviews. Over time, some of us gain experience in the process with the help of advice that we receive, or we gain self-confidence to make the interviews much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dev Learning Hub&lt;/strong&gt; wants to share a collection of common interview questions based on the community feedback that could help with a future interview process, and also with that, we can learn together as a community.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9JHDblWhoiw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#quiz-interview-practice"&gt;
  &lt;/a&gt;
  Quiz Interview Practice
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Dev Learning Hub&lt;/strong&gt; wants to share a simulator to improve your skills and prepare before your interviews with some common questions about different technologies.&lt;/p&gt;

&lt;p&gt;Right now just the &lt;strong&gt;React&lt;/strong&gt; quiz interview is available, but during the next few days, I will be adding more information to the other technologies.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zDUKf-2tfdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community-requests"&gt;
  &lt;/a&gt;
  Community Requests
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Dev Learning Hub&lt;/strong&gt; wants that everyone shares their knowledge with others, for that reason the &lt;strong&gt;Community Request&lt;/strong&gt; feature is one of the most important. The feature consists of a process so similar as when you create a merge request or pull request for your code. In this case, there is just one difference is that the content of the community request will be to add or share knowledge with the community so could create a community request to add a new &lt;strong&gt;free course&lt;/strong&gt;, a new &lt;strong&gt;code snippet&lt;/strong&gt;, a new** interview question*&lt;em&gt;, after that need to be reviewed for the community and when you have **5 approves&lt;/em&gt;* you can merge to the page and will be added to the main content of the page.&lt;/p&gt;

&lt;p&gt;Right now we can just create &lt;strong&gt;community requests&lt;/strong&gt; to add new content, however, the idea is that in the future we will community request to edit and remove the content of the page based on the feedback of the community.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lkc1Pu-uWdg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/brayanarrieta"&gt;
        brayanarrieta
      &lt;/a&gt; / &lt;a href="https://github.com/brayanarrieta/dev-learning-hub"&gt;
        dev-learning-hub
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Dev Learning Hub - a place to share your knowledge with everyone
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#dev-learning-hub-demo"&gt;
  &lt;/a&gt;
  Dev Learning Hub Demo
&lt;/h4&gt;

&lt;p&gt;Rigth now, there is a demo of Dev Learning Hub in the next URL &lt;a href="https://dev-learning-hub.vercel.app/"&gt;https://dev-learning-hub.vercel.app/&lt;/a&gt;. There are some data that I have added and probably I will still add more data on the page, but the main idea is that the community share their knowledge and preference and start to add content so that will allow to the site grow based on the feedback of everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-31Mn2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esubm7a5sl9vzfmbo9cw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-31Mn2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esubm7a5sl9vzfmbo9cw.png" alt="Dev Learning Hub" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-with-the-help-of-the-next-technologies"&gt;
  &lt;/a&gt;
  Build with the help of the next technologies
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNpJjwey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0nnluz4nfoz2v27s2rn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNpJjwey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0nnluz4nfoz2v27s2rn.png" alt="Technologies" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Technologies&lt;/strong&gt;: &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;, &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;, &lt;a href="https://react-hook-form.com/"&gt;react-hook-form&lt;/a&gt;, &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt;, &lt;a href="https://mongoosejs.com/"&gt;Mongoose&lt;/a&gt;, &lt;a href="https://eslint.org/"&gt;Eslint&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/react-markdown"&gt;react-markdown&lt;/a&gt;, &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Platforms&lt;/strong&gt;: &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database&lt;/strong&gt;: MongoDB hosted on &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;Mongo DB Atlas&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#database-structure"&gt;
  &lt;/a&gt;
  Database Structure
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca4VGMuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydyeg2t96n0kr2v3yzjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca4VGMuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydyeg2t96n0kr2v3yzjq.png" alt="Database Diagram" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I hope you find this article really interesting about &lt;strong&gt;Dev Learning Hub&lt;/strong&gt;, the code is shared so if you have some recommendation or suggestion will be helpful. There is a lot of work to do, so if you have an idea that we can use to improve the process or the main idea of the project, please share üëç.&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>nextjs</category>
      <category>mongodb</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Write an Effective Technical R√©sum√©</title>
      <author>Bala Priya C</author>
      <pubDate>Tue, 04 Jan 2022 15:41:19 +0000</pubDate>
      <link>https://dev.to/balapriya/how-to-write-an-effective-technical-resume-36lc</link>
      <guid>https://dev.to/balapriya/how-to-write-an-effective-technical-resume-36lc</guid>
      <description>&lt;p&gt;Getting your r√©sum√© writing right is an important step in your developer journey.&lt;/p&gt;

&lt;p&gt;Have you ever been a part of the job search process‚Äîbe it an internship or a full-time opportunity‚Äîas a student or a new grad? &lt;/p&gt;

&lt;p&gt;If yes, you already know: getting past the r√©sum√© screening step, and &lt;em&gt;landing that interview call&lt;/em&gt; can often be harder than the actual interview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/A5vvxQfVGVbInEXzTa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/A5vvxQfVGVbInEXzTa/giphy.gif" alt="It's so hard" width="480" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the next few minutes, you'll get to know some actionable tips for r√©sum√© writing, that you could use to revamp your r√©sum√©. This post is inspired by Jessie Newman's webinar for WWCode, NYC chapter.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-goes-on-a-r%C3%A9sum%C3%A9"&gt;
  &lt;/a&gt;
  What goes on a r√©sum√©?
&lt;/h2&gt;

&lt;p&gt;Let's start with this question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are companies and hiring managers looking for?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, they're looking for candidates who:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can improve the company's products with their technical expertise,&lt;/li&gt;
&lt;li&gt;be enjoyable to work with, and&lt;/li&gt;
&lt;li&gt;can contribute positively to the company's culture and growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Even if the recruiter skims through your r√©sum√© for less than a minute, you should stand out as a prospective candidate, yes?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this to happen, the content on your r√©sum√© should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Recent&lt;/strong&gt;: Always present information in reverse chronological order‚Äîstarting with the most recent experience first.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relevant&lt;/strong&gt; to the role that you're applying to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clear&lt;/strong&gt; even to a reader who has no context.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, your r√©sum√© should only be about a page long. And that's all you've got to make an impression on the reviewer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As they say, "You're much more than a one-page r√©sum√©‚Äîbut your r√©sum√© should not be more than one page.üòÑ&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#format-of-a-r%C3%A9sum%C3%A9"&gt;
  &lt;/a&gt;
  Format of a r√©sum√©
&lt;/h2&gt;

&lt;p&gt;There's no one recommended format to draft your r√©sum√©. However, the following sections should typically be present:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Name and Contact info
- Objective (optional)
- Education
- Technical Experience
- Skills
- Leadership | Volunteering
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now visit each of these sections, and see how you can best structure each of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-and-contact-info"&gt;
  &lt;/a&gt;
  Name and contact info
&lt;/h3&gt;

&lt;p&gt;‚úÖ Include your name, your email address, links to your portfolio/GitHub.&lt;/p&gt;

&lt;p&gt;‚úÖ Be sure to check if your email address is professional enough.&lt;/p&gt;

&lt;p&gt;‚úÖ Include social media handles‚Äîlike LinkedIn‚Äîonly if you've updated them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objective-raw-optional-endraw-"&gt;
  &lt;/a&gt;
  Objective (&lt;code&gt;optional&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;Include the objective section &lt;em&gt;only&lt;/em&gt; if you aim at providing some context to the reviewer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every line should tell the recruiter something that they don't already know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you're a CS major applying to a software engineering role, your objective isn't going to provide any context to the recruiter. &lt;/p&gt;

&lt;p&gt;On the other hand, suppose you're a professional accountant, who's looking to break into software development. Then, the objective tells the recruiter upfront that you're trying to switch careers‚Äîand they won't look for a CS degree or developer experience as they skim through your r√©sum√©.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#education"&gt;
  &lt;/a&gt;
  Education
&lt;/h3&gt;

&lt;p&gt;Always cite details of your education‚Äîstarting from your highest qualification first. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/6XX4V0O8a0xdS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/6XX4V0O8a0xdS/giphy.gif" alt="study" width="500" height="270"&gt;&lt;/a&gt;&lt;br&gt;
If you're a Master's student, only mention details of your Master's and undergraduate degree. Some companies do have a certain cut-off GPA, so be sure to include your GPA.&lt;/p&gt;

&lt;p&gt;Some people do include &lt;code&gt;Relevant Coursework&lt;/code&gt; subsection in their &lt;code&gt;Education&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;However, you should use it only if needed.&lt;/p&gt;

&lt;p&gt;Being a CS major, doing courses in algorithm design and analysis, and operating systems isn't any interesting to the reviewer. If you're from a non-CS stream, but have supplemented your coursework with courses from the CS bucket‚Äîyou may include them in the &lt;code&gt;Relevant Coursework&lt;/code&gt; section.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#technical-experience"&gt;
  &lt;/a&gt;
  Technical Experience
&lt;/h3&gt;

&lt;p&gt;This section should account for nearly &lt;code&gt;80%&lt;/code&gt; of your r√©sum√©, and should include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relevant work experience and&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚ñ∂ We'll talk about this in greater detail in the next section.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#skills"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;You should always organize your skills by category‚Äîordered by proficiency.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Languages: Python, JavaScript
Libraries: NumPy, pandas, scikit-learn
Tools: Git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should always remember to demonstrate your skills in the other sections.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, if Python is the language that you're most proficient in‚Äîyour projects should be indicative of your proficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#leadership-volunteering"&gt;
  &lt;/a&gt;
  Leadership | Volunteering
&lt;/h3&gt;

&lt;p&gt;If you've been volunteering, involved in open-source communities, mentoring and the like, you may include them in this section.&lt;/p&gt;

&lt;p&gt;Ensure that you're communicating your interests and impact clearly, and keep this section short and towards the end of your r√©sum√©.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-describe-your-technical-experience"&gt;
  &lt;/a&gt;
  How to describe your technical experience
&lt;/h2&gt;

&lt;p&gt;This section is the most crucial section in your r√©sum√©‚Äîbe sure to draft this section carefully.&lt;/p&gt;

&lt;p&gt;Here are a few suggestions on how you should explain your experience and projects.&lt;/p&gt;

&lt;p&gt;‚ùå Do not list down your job responsibilities. &lt;br&gt;
‚úî Write what you accomplished.&lt;/p&gt;

&lt;p&gt;‚ùå Do not tell what you learned.&lt;br&gt;
‚úî Instead, explain what you built with that knowledge.&lt;/p&gt;

&lt;p&gt;‚ùå Do not use weak language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Avoid phrases like:

- Helped build, 
- worked as part of the team,
- helped implement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úî Use strong language that's impactful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Say:
- Built,
- Worked on,
- Implemented
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ùå Do not be vague when specifying impact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...worked on speeding up the inference pipeline --&amp;gt; # not quantifying impact
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úî Quantify impact wherever possible‚Äîtalk numbers!.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...worked on speeding up the inference pipeline by 30% 
by reducing the inference time to 2.5 ms --&amp;gt; #quantifying impact
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ùå Do not include many projects without explaining each of them. &lt;br&gt;
‚úî Explain your projects clearly in detail‚Äîprioritize quality over quantity.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be sure to specify the programming language, and tech stacks used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Built a ____ using JavaScript, React.

Used Python to code a process scheduler.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Never leave the recruiter guessing why the project is interesting/relevant. Explain clearly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you know how to draft all major sections in your r√©sum√©, let's list down a few concluding points.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#points-to-remember"&gt;
  &lt;/a&gt;
  Points to remember
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Have a r√©sum√© for every role that you'd be applying to.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're interested in both software engineering and data analytics, be sure to draft a dedicated r√©sum√© for each of these roles. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Don't be terse in explaining your projects‚Äîincluding portfolio links doesn't suffice. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The recruiter may not have time to look at your portfolio. So your  r√©sum√© should do the talking for you. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not use fuzzy language just to make your projects sound look cool and complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/WsNbxuFkLi3IuGI9NU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/WsNbxuFkLi3IuGI9NU/giphy.gif" alt="explain me" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Prefer using simple and clear language instead‚Äîjust the way you'd explain to your friends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üéØ And you've reached the end of this post on best practices in r√©sum√© writing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading all the way up to here!üòÑ&lt;/p&gt;

&lt;p&gt;Hope you found this post helpful. If you know someone who'd find this useful, do share with them as well.&lt;/p&gt;

&lt;p&gt;If you're currently looking for opportunities, I wish you loads of luck in your endeavors. &lt;br&gt;
&lt;a href="https://i.giphy.com/media/12XDYvMJNcmLgQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12XDYvMJNcmLgQ/giphy.gif" alt="good-luck" width="480" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>resume</category>
    </item>
    <item>
      <title>Root to Linux: Search Files with Grep</title>
      <author>Christina Gorton</author>
      <pubDate>Tue, 04 Jan 2022 15:38:13 +0000</pubDate>
      <link>https://dev.to/coffeecraftcode/root-to-linux-search-files-with-grep-516m</link>
      <guid>https://dev.to/coffeecraftcode/root-to-linux-search-files-with-grep-516m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Grep is a commonly used command in Linux (or Unix) to search through 1 or more files for a pattern or word.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun fact: grep is short for Global regular expression print(g/re/p). It was a command used in a simple Unix text editor called &lt;code&gt;ed&lt;/code&gt;(pronounced ee dee). It would print all the lines matching a certain pattern. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many ways to use the grep command. In this tutorial you will use the grep command to search within files and directories and print file types that contain a certain string and more. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can use a Linux shell or any Unix terminal like the one found on MacOS. If you do not have a Linux distro set up, you can use an online command shell to practice these commands. 
For this tutorial I used the terminal found on MacOS.&lt;/li&gt;
&lt;li&gt;Create a directory on your computer called &lt;code&gt;book&lt;/code&gt; and add 2 text files named story.txt and poem.txt.  We will use these files throughout the tutorial. 
If you would like to practice the Linux commands to create a directory, files, and add text please see Part 1 and 2 of my &lt;a href="https://dev.to/coffeecraftcode/root-to-linux-hands-on-commands-part-1-284e"&gt;Hands-on Commands&lt;/a&gt; tutorial. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the &lt;code&gt;story.txt&lt;/code&gt; file add this text:&lt;br&gt;
&lt;em&gt;A Cat Haiku&lt;br&gt;
In the morning&lt;br&gt;
You sleep despite my meow&lt;br&gt;
I stand on your face&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;poem.txt&lt;/code&gt; file add this text:&lt;br&gt;
&lt;em&gt;A Cat Poem&lt;br&gt;
Meow meow meow&lt;br&gt;
Meow meow meow meow&lt;br&gt;
Meow meow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zpKZuLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odrmae8lpg7vjfl31zuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zpKZuLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odrmae8lpg7vjfl31zuu.png" alt="Creating a directory and files with Linux commands" width="420" height="315"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#searching-within-a-file"&gt;
  &lt;/a&gt;
  Searching Within a File
&lt;/h2&gt;

&lt;p&gt;One way to use the grep command is to search for a word in a specific file. In this section you will use the grep command to search for the word &lt;strong&gt;cat&lt;/strong&gt; in the story.txt file. &lt;/p&gt;

&lt;p&gt;In your terminal navigate to your &lt;code&gt;book&lt;/code&gt; directory with the &lt;code&gt;cd&lt;/code&gt; command then type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep cat &lt;/span&gt;story.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5SlfFbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul66h0ixtpjgrfsv2ad2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5SlfFbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul66h0ixtpjgrfsv2ad2.png" alt="Using grep to search a file" width="370" height="143"&gt;&lt;/a&gt;&lt;br&gt;
&lt;small&gt;Nothing is returned&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;This command looks in the &lt;code&gt;story.txt&lt;/code&gt; file for a pattern that matches &lt;code&gt;cat&lt;/code&gt;. You will see in the terminal that it does not return anything. There is a word cat in the story.txt file but it is capitalized. &lt;br&gt;
The grep command is &lt;strong&gt;case sensitive&lt;/strong&gt;. To return the line in the text file that matches the pattern cat you could type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep &lt;/span&gt;Cat story.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yet, you may not know the case of a pattern you are looking for in a file. To search for a word or pattern that is case &lt;strong&gt;insensitive&lt;/strong&gt; you can use the &lt;code&gt;-i&lt;/code&gt; flag. The &lt;code&gt;-i&lt;/code&gt; flag is shorthand for &lt;code&gt;--ingnore-case&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;story.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should now return the correct line that contains the pattern. &lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;A Cat Haiku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUYzSpR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrl3rnokwrtgfh8rfht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUYzSpR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrl3rnokwrtgfh8rfht.png" alt="Using the -i flag with grep" width="352" height="87"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#searching-recursively"&gt;
  &lt;/a&gt;
  Searching Recursively
&lt;/h2&gt;

&lt;p&gt;When you want to search through multiple files or you are unsure what file contains a pattern you can search recursively through a directory with grep and the &lt;code&gt;-r&lt;/code&gt; flag. The -r flag is shorthand for &lt;code&gt;--recursive&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example we will search for the word &lt;strong&gt;meow&lt;/strong&gt; in the &lt;code&gt;book&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;The command will use &lt;code&gt;grep&lt;/code&gt;, the &lt;code&gt;-r&lt;/code&gt; flag, the pattern/string you want to search for, and the path of the directory to search in. &lt;/p&gt;

&lt;p&gt;In your terminal type:&lt;br&gt;
&lt;code&gt;grep -r "meow" /Users/cmgorton/Desktop/book&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/Users/cmgorton/Desktop/book/poem.txt:Meow meow meow
/Users/cmgorton/Desktop/book/poem.txt:Meow meow meow meow
/Users/cmgorton/Desktop/book/poem.txt:Meow meow
/Users/cmgorton/Desktop/book/story.txt:You &lt;span class="nb"&gt;sleep &lt;/span&gt;despite my meow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TeDIHAIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgdg8m4il7yp6115a9cz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeDIHAIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgdg8m4il7yp6115a9cz.png" alt="Using the -r flag with grep" width="800" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that the command returned every line that matched the pattern in both the &lt;strong&gt;poem&lt;/strong&gt; and &lt;strong&gt;story&lt;/strong&gt; text file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invert-search-with-raw-v-endraw-flag"&gt;
  &lt;/a&gt;
  Invert search with &lt;code&gt;-v&lt;/code&gt; Flag
&lt;/h2&gt;

&lt;p&gt;Before, we used grep to find all the successful matches of a word in a file. You can use the &lt;code&gt;-v&lt;/code&gt; flag along with grep to invert the search. The &lt;code&gt;-v&lt;/code&gt; flag is shorthand for &lt;code&gt;--invert-match&lt;/code&gt;. This means the search will return all non-matching lines in a file the pattern you are searching for. &lt;/p&gt;

&lt;p&gt;In this example we will look for all the lines that &lt;strong&gt;do not&lt;/strong&gt; match the word "meow" in the &lt;code&gt;poem.txt&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;While in the &lt;code&gt;book&lt;/code&gt; directory type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s2"&gt;"meow"&lt;/span&gt; poem.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;A Cat Poem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lBQB5ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyeo0s29pnuma447ysca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lBQB5ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyeo0s29pnuma447ysca.png" alt="inverted search with -v flag" width="394" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now try to do the same inverted search in the &lt;code&gt;story.txt&lt;/code&gt; file and see what the results would be. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-for-specific-file-types"&gt;
  &lt;/a&gt;
  Search for Specific File Types
&lt;/h2&gt;

&lt;p&gt;When we searched through the previous files we knew that they contained the word &lt;strong&gt;meow&lt;/strong&gt;. However, if you were unsure which files contained the word you could search for a specific file type with the &lt;code&gt;-l&lt;/code&gt; flag. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-l flag is shorthand for&lt;/code&gt;--files-with-matches`. It will search only the names of files containing selected lines. For this example you will search through the file type .txt to see which files contain the word &lt;strong&gt;meow&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This command will search through all files in the &lt;strong&gt;current&lt;/strong&gt; working directory. &lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code&gt;book&lt;/code&gt; directory. &lt;br&gt;
Type: &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
grep -l meow *.txt&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
poem.txt&lt;br&gt;
story.txt&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ixBKW4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e68loz52mrfatzxsimb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ixBKW4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e68loz52mrfatzxsimb1.png" alt="Searching with grep and the -l flag" width="372" height="142"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The * in Linux stands for "zero or more characters". In the example it looks for &lt;strong&gt;all&lt;/strong&gt; files with the &lt;code&gt;.txt&lt;/code&gt; characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial you explored a few of the ways to use &lt;code&gt;grep&lt;/code&gt; to search through files and directories for a pattern. &lt;br&gt;
There are a lot of other flags you can use with &lt;code&gt;grep&lt;/code&gt;. You can also use &lt;a href="https://www.geeksforgeeks.org/piping-in-unix-or-linux/#:~:text=A%20pipe%20is%20a%20form,program%2Fprocess%20for%20further%20processing."&gt;pipes&lt;/a&gt; to pipe the output of a command through &lt;code&gt;grep&lt;/code&gt; to filter out information. &lt;/p&gt;

&lt;p&gt;To see all of the options you can use with &lt;code&gt;grep&lt;/code&gt; type: &lt;code&gt;man grep&lt;/code&gt; in your terminal. This will list the General Commands Manual for &lt;code&gt;grep&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you would like to see some of these commands as visual content, check out my post where I share my GoodNotes. &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lynhUmsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHuUR2EWQAEIRKs.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvlBE_hL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1445090284514250765/AoxY_CzQ_normal.jpg" alt="Christina Gorton profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Christina Gorton
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today I have been learning more about the grep command. &lt;br&gt;I will write a new blog post sometime this week but until then enjoy my horrible handwriting on the iPad with these notes on some of the ways to use grep. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:08 PM - 28 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1475936778792148993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1475936778792148993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1475936778792148993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JS's Spread Operator (...) in Python? üò∞</title>
      <author>Rajesh Joshi</author>
      <pubDate>Tue, 04 Jan 2022 15:33:03 +0000</pubDate>
      <link>https://dev.to/rajeshj3/jss-spread-operator-in-python-beg</link>
      <guid>https://dev.to/rajeshj3/jss-spread-operator-in-python-beg</guid>
      <description>&lt;p&gt;Spread Operator in JavaScript is one of the best thing given by GOD üòù&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-spread-operator-in-js"&gt;
  &lt;/a&gt;
  What is Spread Operator in JS?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Spread operator&lt;/strong&gt; allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in the variable array where there is more than 1 values are expected. It allows us the privilege to obtain a list of parameters from an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Spread Operator&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, 4, 5 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-in-python"&gt;
  &lt;/a&gt;
  What is ... in Python?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;...&lt;/strong&gt; or &lt;strong&gt;Ellipsis&lt;/strong&gt; is a Python Object. It has no Methods. It is a singleton Object i.e, provides easy access to single instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# style1
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# style2
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# both the styles are same
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More example&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use an Ellipsis in Numpy To Omit Dimensions&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [[[1.83948755e-01 7.34415667e-04]
#   [7.34273680e-01 3.92355559e-01]
#   [6.73369042e-01 2.93722630e-01]]
#
#  [[8.17789457e-01 1.13353920e-01]
#   [3.53150493e-01 2.70330813e-01]
#   [7.46381962e-01 7.42168707e-01]]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
#  [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[...,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
# [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;Ellipsis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
#  [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can use &lt;strong&gt;...&lt;/strong&gt; or &lt;strong&gt;Ellipsis&lt;/strong&gt; in place of &lt;code&gt;pass&lt;/code&gt; in python. or use in numpy To omit dimensions.&lt;/p&gt;




&lt;p&gt;Hurray! You just learned &lt;code&gt;What is the difference between JS Spread Operator and ... Python.&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; ü§©, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! üòÉüíª&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Auto Enabling dark mode(CSS only)üéâüéâ</title>
      <author>‚ö°Preethi</author>
      <pubDate>Tue, 04 Jan 2022 15:05:37 +0000</pubDate>
      <link>https://dev.to/preethi_dev/automatic-enabling-dark-modecss-only-2m1h</link>
      <guid>https://dev.to/preethi_dev/automatic-enabling-dark-modecss-only-2m1h</guid>
      <description>&lt;p&gt;Hey There, Most of the users(specially developers) are the huge fan of dark mode and try to use it on all apps and software. &lt;b&gt;They will definitely expect enabling dark mode on web content also. So, we can get their theme preference by their OS(In this blog, technically call as "UA" means User Agent) without need to toggle&lt;/b&gt;üò≤üò≤. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;b&gt;Dark mode&lt;/b&gt; is better for your eyes in low-light environments and is better for your device battery&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can achieve these without asking help to JavaScriptüéâ which really sounds good (&lt;em&gt;Disclaimer: I'm not mean JS is complicated, But we enable these feature as simple as possible&lt;/em&gt;). Seems be like, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Algm7tWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dycljzy5u4zgg3yc9ic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Algm7tWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dycljzy5u4zgg3yc9ic.gif" alt="Image description" width="498" height="280"&gt;&lt;/a&gt; &lt;br&gt;
NO, I'm not kiddingüòÖ. Seriously possible.&lt;/p&gt;

&lt;h1&gt;A magical media queryü™Ñ&lt;/h1&gt;

&lt;p&gt;Using &lt;code&gt;@media (prefers-color-scheme: dark)&lt;/code&gt; media query, We can detect if the user has requested a light or dark color theme by User Agent(based on OS settings).&lt;/p&gt;

&lt;p&gt;For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--main-bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#040404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--card-bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3a3a38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--icon-bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f7d1a2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--main-light-onColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#aeb4bd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--main-dark-onColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#777676&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* we can also style for light mode*/&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above instance illustrate that, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;b&gt;OS theme preference&lt;/b&gt; is dark, Then it will be changed to dark mode. Otherwise, It will stuck with light mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glFzZOok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c72db8cjli2lpvj70wzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glFzZOok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c72db8cjli2lpvj70wzb.png" alt="Image description" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;b&gt;OS theme preference&lt;/b&gt; is light, Then it will be changed to light mode.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOca6SQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suir4wfphwy5tmoyc19b.png" alt="Image description" width="880" height="221"&gt;
&lt;code&gt;:root&lt;/code&gt; Selects the root element of the document:  in the case of HTML and defined the &lt;code&gt;custom property&lt;/code&gt; inside &lt;code&gt;:root&lt;/code&gt; means which can be declared and used globally in document. Use &lt;code&gt;Custom property&lt;/code&gt; is a best practice which save our loads of time like Life saver.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you not aware of &lt;code&gt;Custom property&lt;/code&gt;, Not a big issue. I will explain, else you just skip this fold and pass on to next fold.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;CSS Custom Property(Variables)&lt;/h2&gt;

&lt;p&gt;Declaring a custom property is done using a custom property name that &lt;b&gt;begins with a double hyphen (--), and a property value that can be any valid CSS value&lt;/b&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A common best practice is to define custom properties on the &lt;code&gt;:root&lt;/code&gt; pseudo-class, so that it can be applied globally across your HTML document&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--main-bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uh, Creating a &lt;code&gt;custom property&lt;/code&gt; is pretty easy right. Likewise, Use this custom property is painless processüòâ. Just you use the custom property value by specifying your &lt;code&gt;custom property&lt;/code&gt; name inside the &lt;code&gt;var()&lt;/code&gt; function, in place of a regular property value.&lt;/p&gt;

&lt;p&gt;For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you grasped the concept and let's get a ride on next..&lt;/p&gt;

&lt;p&gt;Hey still with me, Proud to see your curiosity about learning new things‚ú®. It's my pleasure to give you a bonus info and some additional resource for practice.&lt;/p&gt;

&lt;h2&gt;
&lt;code&gt;color-scheme&lt;/code&gt; - Must include&lt;/h2&gt;

&lt;p&gt;We need to add styles for even form controls, scrollbars and so on. It's may be painful process. So, Using &lt;code&gt;color-scheme&lt;/code&gt; changes the default text and background colors of the page to match the &lt;b&gt;current system appearance, standard form controls, scrollbars and other named system colors also change their look automatically&lt;/b&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* possible property values */&lt;/span&gt;
&lt;span class="nt"&gt;color-scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;color-scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;light&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;color-scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;color-scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;light&lt;/span&gt; &lt;span class="nt"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;color-scheme&lt;/code&gt; specifying the values &lt;b&gt;light&lt;/b&gt; and &lt;b&gt;dark&lt;/b&gt; on the root element. let's the rendering engine known both modes are supported by the document. &lt;/p&gt;

&lt;p&gt;I recommend you to practice on codepen or fork &lt;a href="https://github.com/Preethi-Dev/dark_mode"&gt;my repository&lt;/a&gt;üéÅ and practice on you own pace.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/GRMxJXM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you loved this blog, Then give an endearing heartüíùand drop your thought about this blogüòç which really a lot to me. I love the discussion with you, If you feel not comfortable at styling concepts or have any doubts.&lt;/p&gt;

&lt;p&gt;If you not experiment with &lt;b&gt;&lt;a href="https://dev.to/preethi_dev/claymorphism-on-2022-css-only-4am"&gt;Claymorphism&lt;/a&gt;&lt;/b&gt;, Start to explore now.&lt;/p&gt;

&lt;p&gt;Thanks for Reading!!&lt;br&gt;
&lt;a href="https://dev.to/preethi_dev"&gt;&lt;b&gt;Preethi&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;- Make your CSS life easier&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>16 basic commands to get started with GIT</title>
      <author>NoviceDev</author>
      <pubDate>Tue, 04 Jan 2022 15:03:54 +0000</pubDate>
      <link>https://dev.to/novicedev/16-basic-commands-to-get-started-with-git-415b</link>
      <guid>https://dev.to/novicedev/16-basic-commands-to-get-started-with-git-415b</guid>
      <description>&lt;p&gt;As a beginner knowing all the git commands could be overwhelming, but you can get away with some basic git commands at the start.&lt;/p&gt;

&lt;p&gt;In this article, we will go through these 16 basic git commands that you should know as a new developer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git checkout&lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git config&lt;/li&gt;
&lt;li&gt;git status&lt;/li&gt;
&lt;li&gt;git diff&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;li&gt;git remote&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git log&lt;/li&gt;
&lt;li&gt;git rm&lt;/li&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;li&gt;git fetch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Original post: &lt;a href="https://www.novicedev.com/blog/16-basic-commands-get-started-git"&gt;https://www.novicedev.com/blog/16-basic-commands-get-started-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go through them in little detail...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-git-clone"&gt;
  &lt;/a&gt;
  1. Git clone
&lt;/h2&gt;

&lt;p&gt;Git clone git command is used when you are trying to download a project from a remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone &amp;lt;repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-git-init"&gt;
  &lt;/a&gt;
  2. Git init
&lt;/h2&gt;

&lt;p&gt;Git init command is used to convert a directory into a git repository. This command is useful when you are starting a new project or want to initialize git in an existing project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-git-checkout"&gt;
  &lt;/a&gt;
  3. Git checkout
&lt;/h2&gt;

&lt;p&gt;Git checkout command is used to switch your current branch to another one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With -b option Git checkout branch can also create a new branch from the current branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b &amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-git-branch"&gt;
  &lt;/a&gt;
  4. Git branch
&lt;/h2&gt;

&lt;p&gt;Git branch command is used to list all the branches on your local repository. And the output will highlight the current branch you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git branch command can also be used to create a new branch by adding the name of the new branch at end of the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch &amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-git-config"&gt;
  &lt;/a&gt;
  5. Git config
&lt;/h2&gt;

&lt;p&gt;Git config command is used to set the git user config for the project or globally. At the start of your project make sure you set the correct user.name and user.email for your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config &amp;lt;setting&amp;gt; &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git config command can also be used to set this config globally. You can find more information about the git config command here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-git-status"&gt;
  &lt;/a&gt;
  6. Git status
&lt;/h2&gt;

&lt;p&gt;Git status command returns the current status of your working directory. This is the best way to know what is modified, added or deleted in your repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-git-diff"&gt;
  &lt;/a&gt;
  7. Git diff
&lt;/h2&gt;

&lt;p&gt;Git diff command can be used in many different ways and initially, you can use it to check what is modified in a file or directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git diff &amp;lt;file_name or directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-git-add"&gt;
  &lt;/a&gt;
  8. Git add
&lt;/h2&gt;

&lt;p&gt;Git add command is used to move new or modified files to the staging area. After this changes can be committed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add &amp;lt;file_name or directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to add all files then use the git add command with ‚Äú.‚Äù.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-git-commit"&gt;
  &lt;/a&gt;
  9. Git commit
&lt;/h2&gt;

&lt;p&gt;Once you are done with your changes, the git commit command is used to save your change in the git branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit -m ‚ÄúYour commit message.‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-git-push"&gt;
  &lt;/a&gt;
  10. Git push
&lt;/h2&gt;

&lt;p&gt;To more your local committed changes to remote use git push command. With this command, you push your local branch to the remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-git-remote"&gt;
  &lt;/a&gt;
  11. Git remote
&lt;/h2&gt;

&lt;p&gt;Git remote command with different options helps to sync the local repository with the remote repository. You can view, create/add, delete, rename remote to other repositories.&lt;/p&gt;

&lt;p&gt;Git remote command is used to show the remote repository name and URL to which your local repository is connected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# View remote
$ git remote -v

# Add remote
$ git remote add &amp;lt;remote_name&amp;gt; &amp;lt;remote_path&amp;gt;

# Delete remote
$ git remote rm &amp;lt;remote_name&amp;gt;

# Rename remote
$ git remote rename &amp;lt;old_remote_name&amp;gt; &amp;lt;new_remote_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#12-git-pull"&gt;
  &lt;/a&gt;
  12. Git pull
&lt;/h2&gt;

&lt;p&gt;As the name suggests, the git pull command will fetch all the changes from the remote repository and merge them into your local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#13-git-log"&gt;
  &lt;/a&gt;
  13. Git log
&lt;/h2&gt;

&lt;p&gt;Git log command is used to show commit history in the current branch on your local repository. Commit history will be in chronological order with unique commit hash, commit author and date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the git log command with other options to filter the logs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-git-rm"&gt;
  &lt;/a&gt;
  14. Git rm
&lt;/h2&gt;

&lt;p&gt;Git rm command is used to remove files or directories from the git index. Different options can be used with the git rm command to get the desired result.&lt;/p&gt;

&lt;p&gt;And keep in mind the git rm command will also remove files from the working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rm &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-git-stash"&gt;
  &lt;/a&gt;
  15. Git stash
&lt;/h2&gt;

&lt;p&gt;Git stash command is used to save current changes of modified files and get a clean branch.&lt;/p&gt;

&lt;p&gt;You will need git stash when you want to move to a different branch but can't because you have modified changes in your current branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can always come back to your original branch and do the "git stash pop" command to get back your stashed changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-git-fetch"&gt;
  &lt;/a&gt;
  16. Git fetch
&lt;/h2&gt;

&lt;p&gt;Git fetch is used when you want to get updates from a remote repository.&lt;/p&gt;

&lt;p&gt;It works the same as git pull doesn't merge the changes into your local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git fetch &amp;lt;remote_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are only the basic git command that every beginner should start with. All these git commands can be used in many different ways by adding arguments with them.&lt;/p&gt;

&lt;p&gt;And you can always test these git commands and get familiar with them by creating a free git repository on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; or &lt;a href="https://gitlab.com/users/sign_in"&gt;Gitlab&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Simple ü§ì yet Powerful üöÄ Server with Python üêç</title>
      <author>Rajesh Joshi</author>
      <pubDate>Tue, 04 Jan 2022 14:55:53 +0000</pubDate>
      <link>https://dev.to/rajeshj3/create-a-simple-yet-powerful-server-with-python-2pkp</link>
      <guid>https://dev.to/rajeshj3/create-a-simple-yet-powerful-server-with-python-2pkp</guid>
      <description>&lt;p&gt;Python is very well known for it's simplicity ü§©. Which is a plus point if you are just getting started in the programming world.&lt;/p&gt;

&lt;p&gt;In this post, you'll be learning how to create a simple &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; üöÄ server in Python üêç.&lt;/p&gt;

&lt;p&gt;FastAPI is really handy to get started with &lt;code&gt;backend development&lt;/code&gt; in python. In this post, you'll see a simple code demo of FastAPI.&lt;/p&gt;

&lt;p&gt;So let's get started üöÄ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setup-python-environment"&gt;
  &lt;/a&gt;
  Setup Python Environment
&lt;/h2&gt;

&lt;p&gt;Open a directory, open terminal or cmd and write the following command to create a virtual environment with &lt;code&gt;Python v3&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-v&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Activate the Virtual Environment&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ .\env\Scripts\activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Linux or Mac&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#install-the-dependencies"&gt;
  &lt;/a&gt;
  Install the Dependencies
&lt;/h2&gt;

&lt;p&gt;Install FastAPI and other dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi &lt;span class="s2"&gt;"uvicorn[standard]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code üöÄ
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;main.py&lt;/code&gt; file&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Import FastAPI&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create FastAPI instance, &lt;code&gt;app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Write a &lt;code&gt;route&lt;/code&gt;, on which you will be hitting the server (Requesting for some &lt;code&gt;Resource&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a root route (eg. &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, Write a function, which will be trigerred when you hit this &lt;code&gt;API end-point&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code ü§ì
&lt;/h2&gt;

&lt;p&gt;Combining the above script will result the &lt;code&gt;main.py&lt;/code&gt; a this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#spin-up-the-fastapi-server"&gt;
  &lt;/a&gt;
  Spin up the FastAPI Server üöÄ
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;uvicorn main:app &lt;span class="nt"&gt;--reload&lt;/span&gt;

INFO:     Uvicorn running on http://127.0.0.1:8000 &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
INFO:     Started reloader process &lt;span class="o"&gt;[&lt;/span&gt;28720]
INFO:     Started server process &lt;span class="o"&gt;[&lt;/span&gt;28722]
INFO:     Waiting &lt;span class="k"&gt;for &lt;/span&gt;application startup.
INFO:     Application startup complete.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in your browser, you'll se your first server serving the clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---O1EWfc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75zoomra5xlrdqyh9bjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---O1EWfc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75zoomra5xlrdqyh9bjo.png" alt="Hello, World!" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#explore-fastapi"&gt;
  &lt;/a&gt;
  Explore FastAPI üöÄ
&lt;/h2&gt;

&lt;p&gt;Now, you have your first server running. You can walk through the &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI Docs&lt;/a&gt;. and explore the possibilities.&lt;/p&gt;




&lt;p&gt;Hurray! You just learned how to setted up &lt;strong&gt;A Simple ü§ì yet Powerful üöÄ Server with Python üêç&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; ü§©, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! üòÉüíª&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to OpenStack with MicroStack</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Tue, 04 Jan 2022 14:42:44 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/introduction-to-openstack-with-microstack-1f5j</link>
      <guid>https://dev.to/donaldsebleung/introduction-to-openstack-with-microstack-1f5j</guid>
      <description>&lt;p&gt;In this article, we will learn what OpenStack is, followed by a hands-on session where we install MicroStack in our local development environment and explore some basic features of MicroStack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Due to the nature of OpenStack, this hands-on session has non-trivial system requirements on top of knowledge and skill requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-and-skill-requirements"&gt;
  &lt;/a&gt;
  Knowledge and skill requirements
&lt;/h3&gt;

&lt;p&gt;It is assumed that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are comfortable with the Linux command line and troubleshooting&lt;/li&gt;
&lt;li&gt;Understand the core concepts behind hardware virtualization; practical experience with a production-grade hypervisor such as VMware Workstation or KVM would be beneficial&lt;/li&gt;
&lt;li&gt;Understand the core concepts behind cloud computing, in particular IaaS; practical experience with a public cloud provider such as AWS, Azure or GCP would be beneficial&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#system-requirements"&gt;
  &lt;/a&gt;
  System requirements
&lt;/h3&gt;

&lt;p&gt;It is assumed that your local development desktop or laptop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has at least 2 CPU cores; 4 or more recommended&lt;/li&gt;
&lt;li&gt;Has at least 8 GiB of RAM; 16 GiB or more recommended&lt;/li&gt;
&lt;li&gt;Has at least 100 GiB of available storage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is running a sufficiently recent version of Ubuntu, or another Linux distribution where &lt;a href="https://snapcraft.io"&gt;Snap&lt;/a&gt; packages are supported&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular, if your desktop / laptop does not satisfy the last requirement (e.g. if you are running Windows or macOS), it should contain enough hardware resources to run a VM satisfying the requirements above, with hardware acceleration and &lt;strong&gt;nested virtualization&lt;/strong&gt; enabled, so that you can run VMs &lt;em&gt;inside&lt;/em&gt; that VM. Either way, &lt;a href="https://dictionary.cambridge.org/dictionary/english/ymmv"&gt;YMMV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another possible solution if you do not meet the system requirements is to provision a bare metal instance on a public cloud such as AWS, Azure or GCP. For example, AWS offers a range of &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/"&gt;bare metal instances&lt;/a&gt; powered by &lt;a href="https://aws.amazon.com/ec2/nitro/"&gt;AWS Nitro&lt;/a&gt;. However, do note that bare metal pricing is orders of magnitude greater than most other instance types, ranging from USD $4.00 per hour upwards. If you're ready to spend hundreds of dollars on a simple tutorial like this one, by all means, go ahead, so long as &lt;em&gt;you are fully aware that you are solely responsible for any and all monetary costs incurred&lt;/em&gt; ;-)&lt;/p&gt;

&lt;p&gt;With the prerequisites addressed, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openstack"&gt;
  &lt;/a&gt;
  OpenStack
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://www.openstack.org/"&gt;OpenStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The official OpenStack website describes the project as "a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed and provisioned through APIs with common authentication mechanisms". Simply put, it is an open source platform designed to function as a private (or public) cloud. Typically, OpenStack would be deployed on a fleet of production-grade servers in a datacenter (or datacenters), though in this article we'll see how we can set up our own single-node micro cloud with MicroStack, a beta offering (at the time of writing) by &lt;a href="https://canonical.com/"&gt;Canonical&lt;/a&gt;, the company behind one of the most successful Linux distributions ever - Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKtDJVOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3rjk6zble8fgi7j0rfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKtDJVOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3rjk6zble8fgi7j0rfy.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure: Our own (micro) cloud in a &lt;del&gt;bottle&lt;/del&gt; desktop / laptop. How cool is that? Credits to &lt;a href="https://www.stevespanglerscience.com/lab/experiments/cloud-in-a-bottle-experiment/"&gt;Steve Spangler Science&lt;/a&gt; for the image&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OpenStack is a project under the &lt;a href="https://openinfra.dev/"&gt;Open Infrastructure Foundation&lt;/a&gt;, a non-profit organization founded for this purpose, though it has expanded to house related open source projects such as &lt;a href="https://www.airshipit.org/"&gt;Airship&lt;/a&gt; and &lt;a href="https://katacontainers.io/"&gt;Kata Containers&lt;/a&gt; as well. OpenStack is licensed under the open source Apache 2.0 license and its source code can be found &lt;a href="https://github.com/openstack/openstack"&gt;on GitHub&lt;/a&gt; or through the official website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microstack"&gt;
  &lt;/a&gt;
  MicroStack
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://microstack.run/"&gt;MicroStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OpenStack is comprised of a collection of components known as &lt;em&gt;services&lt;/em&gt; that can be selectively deployed to provide APIs to access various types of infrastructure resources, which you can learn about &lt;a href="https://www.openstack.org/software/project-navigator/openstack-components#openstack-services"&gt;through the official website&lt;/a&gt;. For this reason, among others, deploying OpenStack is not a trivial task.&lt;/p&gt;

&lt;p&gt;MicroStack is Canonical's &lt;em&gt;distribution&lt;/em&gt; of OpenStack made simple and accessible, similar to how Ubuntu is a distribution of Linux made simple and accessible to the average user (also offered by Canonical). In a moment, we'll see how installing MicroStack is as simple as running a single &lt;code&gt;snap install&lt;/code&gt; command, and initializing it for use is equally simple as well, also requiring a single command. No wonder the project describes itself as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most straightforward OpenStack ever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apart from being a great introduction to OpenStack, MicroStack can also be used for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Micro-clouds consisting of a small number (not necessarily just 1) of nodes&lt;/li&gt;
&lt;li&gt;Edge computing&lt;/li&gt;
&lt;li&gt;Continuous Integration / Continuous Delivery (CI / CD) pipelines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a larger number of nodes such as would be found in a typical datacenter, other distributions such as &lt;a href="https://ubuntu.com/openstack"&gt;Charmed OpenStack&lt;/a&gt; (also offered by Canonical) or &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;Red Hat OpenStack Platform&lt;/a&gt; (RHOP) may be more suitable, many of which are bundled with commercial support.&lt;/p&gt;

&lt;p&gt;Anyway, enough talk - let's get our hands dirty ;-)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-microstack-and-provisioning-our-first-instance"&gt;
  &lt;/a&gt;
  Installing MicroStack and provisioning our first instance
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview"&gt;Get started with MicroStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First &lt;a href="https://snapcraft.io/docs/installing-snapd"&gt;ensure snapd is installed on your system&lt;/a&gt;. If you're on a sufficiently recent version of Ubuntu, snapd is already installed by default and you do not have to do anything. Otherwise, you may have refer to the link above and follow the instructions specific to your distribution.&lt;/p&gt;

&lt;p&gt;MicroStack is currently in beta. Install it from the beta channel in devmode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;microstack &lt;span class="nt"&gt;--devmode&lt;/span&gt; &lt;span class="nt"&gt;--beta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that completes, initialize it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;microstack init &lt;span class="nt"&gt;--auto&lt;/span&gt; &lt;span class="nt"&gt;--control&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take about 20 minutes or more to complete, depending on your hardware specs. On my MacBook Air from 2013 with 4 GiB of RAM and 2 CPU cores (4 CPU threads), it took about 45 minutes and running the above command twice before it successfully executed to completion.&lt;/p&gt;

&lt;p&gt;Once complete, you should see the following line at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2022-01-03 21:32:49,907 - microstack_init - INFO - Complete. Marked microstack as initialized!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Print a (very long!) help message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's launch our first instance. Here, we use the &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html#cirros-test"&gt;CirrOS&lt;/a&gt; image, a minimal Linux distribution specifically designed as a test image for use in OpenStack. We'll call the instance &lt;code&gt;test&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch cirros &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="nb"&gt;test
&lt;/span&gt;Creating &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="s2"&gt;"microstack"&lt;/span&gt; ssh key at /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack
Launching server ...
Allocating floating ip ...
Server &lt;span class="nb"&gt;test &lt;/span&gt;launched! &lt;span class="o"&gt;(&lt;/span&gt;status is BUILD&lt;span class="o"&gt;)&lt;/span&gt;

Access it with &lt;span class="sb"&gt;`&lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118&lt;span class="sb"&gt;`&lt;/span&gt;
You can also visit the OpenStack dashboard at https://10.20.20.1:443
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Addendum: the name "CirrOS" is likely inspired by &lt;a href="https://en.wikipedia.org/wiki/Cirrus_cloud"&gt;cirrus clouds&lt;/a&gt; which are thin and wispy in appearance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the command output depicted above, we see that an SSH key pair was automatically generated for accessing this instance, and the instance IP is &lt;code&gt;10.20.20.118&lt;/code&gt; in my case (yours may differ). Now connect to this instance using the provided SSH private key, replacing the private key path and instance IP as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now explore the instance with a few commands (feel free to try out your own):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uptime
 &lt;/span&gt;14:08:55 up 5 min,  1 &lt;span class="nb"&gt;users&lt;/span&gt;,  load average: 0.00, 0.00, 0.00
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;whoami
&lt;/span&gt;cirros
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;hostname
test&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;id
&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
Linux &lt;span class="nb"&gt;test &lt;/span&gt;4.4.0-28-generic &lt;span class="c"&gt;#47-Ubuntu SMP Fri Jun 24 10:09:13 UTC 2016 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/os-release
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Buildroot
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2015.05-g31af4e3-dirty
&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buildroot
&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2015.05
&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Buildroot 2015.05"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice. So we see from &lt;code&gt;uname -a&lt;/code&gt; that the CirrOS image was likely derived from Ubuntu in some way.&lt;/p&gt;

&lt;p&gt;Exit the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit
&lt;/span&gt;Connection to 10.20.20.118 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We learn from the &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.27535480.592365252.1641211146-836258490.1641211146#5-launch-and-access-a-vm"&gt;official MicroStack tutorial&lt;/a&gt; that &lt;code&gt;microstack launch&lt;/code&gt; is a wrapper for &lt;code&gt;microstack.openstack server create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;View commands for managing MicroStack instances:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List running instances:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prints out a table, which could be difficult to read if your terminal width is small.&lt;/p&gt;

&lt;p&gt;List running instances in JSON (much more readable IMO):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stop the instance, replacing the instance ID as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server stop 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View the instance state again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"SHUTOFF"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restart the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server start 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And check the instance state again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try SSHing into the instance again to confirm it is back up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you're done exploring, terminate the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm that the instance has been terminated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. Now that we've seen some basic commands for dealing with instances, let's go a bit deeper and explore some other common features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flavor-management"&gt;
  &lt;/a&gt;
  Flavor management
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.openstack.org/nova/rocky/user/flavors.html"&gt;OpenStack Docs: Flavors&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've dealt with Amazon EC2 before (or a comparable public cloud IaaS provider), you've probably realized by now that OpenStack flavors are analogous to EC2 instance types (or equivalent). Basically, they define the amounts of various hardware resources (compute, network, storage) allocated to an instance, most notably the number of virtual CPU cores and memory. The main difference between EC2 instance types and OpenStack flavors is that the former is predetermined by the public cloud provider, but the latter can be managed by you (subject to the hardware resources available) since you own the cloud ;-)&lt;/p&gt;

&lt;p&gt;Let's dive in with some simple commands. Print a help message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor &lt;span class="nt"&gt;--help&lt;/span&gt;
Command &lt;span class="s2"&gt;"flavor"&lt;/span&gt; matches:
  flavor create
  flavor delete
  flavor list
  flavor &lt;span class="nb"&gt;set
  &lt;/span&gt;flavor show
  flavor &lt;span class="nb"&gt;unset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List the available flavors (in JSON):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"3"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.medium"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 4096,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 2,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"4"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.large"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 8192,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 4,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"5"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.xlarge"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 16384,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 8,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we see we have 5 flavors by default:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flavor&lt;/th&gt;
&lt;th&gt;vCPUs&lt;/th&gt;
&lt;th&gt;Memory (MiB)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.tiny&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.small&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.medium&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.large&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.xlarge&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;16384&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Not bad for a micro-cloud. The thing is, my development laptop only has 4 GiB of RAM so &lt;code&gt;m1.small&lt;/code&gt; would already be stretching the limits of my physical hardware and anything &lt;code&gt;m1.medium&lt;/code&gt; and above would be out of the question. So let's remove some flavors that we won't be able to use anyway:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor delete m1.xlarge m1.large m1.medium
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm that they have been deleted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Display detailed information on remaining flavors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.tiny &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 512,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.small &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 20,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 2048,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see a few more properties being printed such as the amount of swap space for that flavor and whether the flavor is publicly accessible.&lt;/p&gt;

&lt;p&gt;I've also just realized that 512 MiB of RAM seems a bit small for proper Ubuntu images that I would like to import and boot later, but 2 GiB of RAM would be a tad too large. What if I could create instances with 1 GiB of RAM? Simple - since I own this cloud, I can just define my own flavor!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor create m1.mini &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--vcpus&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--ram&lt;/span&gt; 1024 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--disk&lt;/span&gt; 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new flavor &lt;code&gt;m1.mini&lt;/code&gt; with 1 vCPU core, 1 GiB of RAM and 20 GiB of storage.&lt;/p&gt;

&lt;p&gt;Confirm the new flavor is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"7d0de4b8-5c51-408c-9fb1-3d7bf3641e73"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.mini"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 1024,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View details on this new flavor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.mini &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 20,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"7d0de4b8-5c51-408c-9fb1-3d7bf3641e73"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.mini"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 1024,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, we've already covered 4 out of 6 (at the time of writing) commands for managing flavors - the remaining two are &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt; which deals with modifying details of existing flavors.&lt;/p&gt;

&lt;p&gt;Now let's look at another service - the image service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#image-and-snapshot-management"&gt;
  &lt;/a&gt;
  Image and snapshot management
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html"&gt;Get images&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An image is a template from which an instance is launched. Let's see what operations on images are available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image &lt;span class="nt"&gt;--help&lt;/span&gt;
Command &lt;span class="s2"&gt;"image"&lt;/span&gt; matches:
  image add project
  image create
  image delete
  image list
  image member list
  image remove project
  image save
  image &lt;span class="nb"&gt;set
  &lt;/span&gt;image show
  image &lt;span class="nb"&gt;unset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View default images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is only one by default, &lt;code&gt;cirros&lt;/code&gt;. View details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image show cirros &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"checksum"&lt;/span&gt;: &lt;span class="s2"&gt;"443b7623e27ecf03dc9e01ee93f67afe"&lt;/span&gt;,
  &lt;span class="s2"&gt;"container_format"&lt;/span&gt;: &lt;span class="s2"&gt;"bare"&lt;/span&gt;,
  &lt;span class="s2"&gt;"created_at"&lt;/span&gt;: &lt;span class="s2"&gt;"2022-01-03T13:28:32Z"&lt;/span&gt;,
  &lt;span class="s2"&gt;"disk_format"&lt;/span&gt;: &lt;span class="s2"&gt;"qcow2"&lt;/span&gt;,
  &lt;span class="s2"&gt;"file"&lt;/span&gt;: &lt;span class="s2"&gt;"/v2/images/98a4eb3d-5965-4954-98eb-1ae7f589ce68/file"&lt;/span&gt;,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
  &lt;span class="s2"&gt;"min_disk"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"min_ram"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
  &lt;span class="s2"&gt;"owner"&lt;/span&gt;: &lt;span class="s2"&gt;"9bfca2a6753d4f869f2e9a74d1604c92"&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"os_hidden"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
    &lt;span class="s2"&gt;"os_hash_algo"&lt;/span&gt;: &lt;span class="s2"&gt;"sha512"&lt;/span&gt;,
    &lt;span class="s2"&gt;"os_hash_value"&lt;/span&gt;: &lt;span class="s2"&gt;"6513f21e44aa3da349f248188a44bc304a3653a04122d8fb4535423c8e1d14cd6a153f735bb0982e2161b5b5186106570c17a9e58b64dd39390617cd5a350f78"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.object"&lt;/span&gt;: &lt;span class="s2"&gt;"images/cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.sha256"&lt;/span&gt;: &lt;span class="s2"&gt;"a8dd75ecffd4cdd96072d60c2237b448e0c8b2bc94d57f10fdbc8c481d9005b8"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.md5"&lt;/span&gt;: &lt;span class="s2"&gt;"443b7623e27ecf03dc9e01ee93f67afe"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"protected"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"schema"&lt;/span&gt;: &lt;span class="s2"&gt;"/v2/schemas/image"&lt;/span&gt;,
  &lt;span class="s2"&gt;"size"&lt;/span&gt;: 12716032,
  &lt;span class="s2"&gt;"status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;,
  &lt;span class="s2"&gt;"tags"&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;,
  &lt;span class="s2"&gt;"updated_at"&lt;/span&gt;: &lt;span class="s2"&gt;"2022-01-03T13:28:33Z"&lt;/span&gt;,
  &lt;span class="s2"&gt;"visibility"&lt;/span&gt;: &lt;span class="s2"&gt;"public"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our cloud isn't much use if we can only launch CirrOS instances, which are minimal and only suitable for demo and testing purposes. What if we could import an image for a more popular, practical distribution such as Ubuntu? Fortunately, we can do so with the &lt;code&gt;openstack image create&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image create &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a moment to skim through the help info. In particular, we see that we can pass a &lt;code&gt;--file &amp;lt;FILE&amp;gt;&lt;/code&gt; option to create a new image from a local disk file.&lt;/p&gt;

&lt;p&gt;Fetch the latest Ubuntu 20.04 LTS cloud image for KVM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64-disk-kvm.img
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image create ubuntu-focal &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--disk-format&lt;/span&gt; qcow2 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--file&lt;/span&gt; focal-server-cloudimg-amd64-disk-kvm.img &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm it is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to boot an instance from our new image with our newly created &lt;code&gt;m1.mini&lt;/code&gt; flavor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch ubuntu-focal &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-n&lt;/span&gt; my-mini-ubuntu &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; m1.mini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;microstack launch&lt;/code&gt; is specific to MicroStack, while &lt;code&gt;openstack server create&lt;/code&gt; is applicable across OpenStack distributions. You may wish to try launching an instance with &lt;code&gt;openstack server create&lt;/code&gt; as an additional exercise.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SSH into it as usual. Now poke around the instance (feel free to try out your own commands):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;whoami
&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;hostname
&lt;/span&gt;my-mini-ubuntu
&lt;span class="nv"&gt;$ &lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt;
              total        used        free      shared  buff/cache   available
Mem:            990         107         508           0         375         862
Swap:             0           0           0
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-Th&lt;/span&gt;
Filesystem     Type      Size  Used Avail Use% Mounted on
/dev/root      ext4       20G  1.3G   18G   7% /
devtmpfs       devtmpfs  494M     0  494M   0% /dev
tmpfs          tmpfs     496M     0  496M   0% /dev/shm
tmpfs          tmpfs     100M  476K   99M   1% /run
tmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs          tmpfs     496M     0  496M   0% /sys/fs/cgroup
/dev/loop0     squashfs   68M   68M     0 100% /snap/lxd/21835
/dev/loop1     squashfs   44M   44M     0 100% /snap/snapd/14295
/dev/loop2     squashfs   62M   62M     0 100% /snap/core20/1270
/dev/vda15     vfat      105M  5.2M  100M   5% /boot/efi
tmpfs          tmpfs     100M     0  100M   0% /run/user/1000
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
Linux my-mini-ubuntu 5.4.0-1050-kvm &lt;span class="c"&gt;#52-Ubuntu SMP Fri Nov 12 11:00:20 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/os-release
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"20.04.3 LTS (Focal Fossa)"&lt;/span&gt;
&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;ID_LIKE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;debian
&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu 20.04.3 LTS"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"20.04"&lt;/span&gt;
&lt;span class="nv"&gt;HOME_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://www.ubuntu.com/"&lt;/span&gt;
&lt;span class="nv"&gt;SUPPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://help.ubuntu.com/"&lt;/span&gt;
&lt;span class="nv"&gt;BUG_REPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://bugs.launchpad.net/ubuntu/"&lt;/span&gt;
&lt;span class="nv"&gt;PRIVACY_POLICY_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;span class="nv"&gt;UBUNTU_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session when done.&lt;/p&gt;

&lt;p&gt;Now that we have a known working Ubuntu image, we probably won't use CirrOS anymore. Delete the image and confirm the deletion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image delete cirros
&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now only have the &lt;code&gt;ubuntu-focal&lt;/code&gt; image left.&lt;/p&gt;

&lt;p&gt;Before we conclude our tour of OpenStack, let's look at one more feature: snapshots. Snapshots record the state of an instance at a particular time, so that we can revert to that state later on (if something goes wrong, for example). In fact, as far as OpenStack is concerned, a snapshot is just an image.&lt;/p&gt;

&lt;p&gt;SSH into our &lt;code&gt;my-mini-ubuntu&lt;/code&gt; instance and run the following commands &lt;em&gt;within our instance&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;add-apt-repository ppa:donaldsebleung/misc
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;yes&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; | openssl req &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-x509&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-newkey&lt;/span&gt; rsa:4096 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-keyout&lt;/span&gt; key.pem &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-out&lt;/span&gt; cert.pem &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-sha256&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-days&lt;/span&gt; 365 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-nodes&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;key.pem /etc/donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;cert.pem /etc/donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; donaldsebleung-com.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs my personal website (shameless promotion here :-P). Check that it is up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://localhost &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE HTML&amp;gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free &lt;span class="k"&gt;for &lt;/span&gt;personal and commercial use under the CCA 3.0 license &lt;span class="o"&gt;(&lt;/span&gt;html5up.net/license&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session. Now stop our instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server stop my-mini-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a snapshot &lt;code&gt;donaldsebleung-com&lt;/code&gt; from &lt;code&gt;my-mini-ubuntu&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server image create my-mini-ubuntu &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt; donaldsebleung-com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now see that it has been added to our list of images, along with &lt;code&gt;ubuntu-focal&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"e58f4ab7-2bb6-4f11-9cfd-0887d1ac9b2c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"saving"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the status of your snapshot is &lt;code&gt;saving&lt;/code&gt; as shown above, wait a few seconds and query the image list again until the status changes to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, if your laptop is resource-constrained like mine (with only 4 GiB of RAM!), you may wish to first terminate your existing &lt;code&gt;my-mini-ubuntu&lt;/code&gt; instance, as we will be launching another instance shortly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete my-mini-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now launch a new instance &lt;code&gt;my-personal-website&lt;/code&gt; from the &lt;code&gt;donaldsebleung-com&lt;/code&gt; snapshot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch donaldsebleung-com &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-n&lt;/span&gt; my-personal-website &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; m1.mini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SSH into the instance. If everything is working as expected, the web server should already be up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://localhost &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE HTML&amp;gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free &lt;span class="k"&gt;for &lt;/span&gt;personal and commercial use under the CCA 3.0 license &lt;span class="o"&gt;(&lt;/span&gt;html5up.net/license&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://opendev.org/x/microstack"&gt;OpenStack in a snap!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Terminate &lt;code&gt;my-personal-website&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete my-personal-website
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you won't be using MicroStack again in a short while but would like to keep it around for future exploration, disabling the snap could be an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap disable microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, whenever you need MicroStack again, you can re-enable it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;enable &lt;/span&gt;microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, if you might not use MicroStack again for quite a while and would like to free up disk space (like I do), removing it with the usual &lt;code&gt;snap remove&lt;/code&gt; is an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap remove &lt;span class="nt"&gt;--purge&lt;/span&gt; microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What OpenStack is&lt;/li&gt;
&lt;li&gt;MicroStack as an OpenStack distribution that "just works"&lt;/li&gt;
&lt;li&gt;How to install MicroStack, provision our first instance and connect to it&lt;/li&gt;
&lt;li&gt;How to manage instances, flavors, images and snapshots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is just the tip of the iceberg. Some things we haven't had the time to look at in this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identity access management with &lt;a href="https://docs.openstack.org/keystone/latest/"&gt;Keystone&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Advanced networking configuration with &lt;a href="https://docs.openstack.org/neutron/latest/"&gt;Neutron&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Managing OpenStack from the web console with &lt;a href="https://docs.openstack.org/horizon/latest/"&gt;Horizon&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, the compute and image services that we explored are known as &lt;a href="https://docs.openstack.org/nova/latest/"&gt;Nova&lt;/a&gt; and &lt;a href="https://docs.openstack.org/glance/latest/"&gt;Glance&lt;/a&gt; respectively. At the time of writing, MicroStack only comes with these 5 core services, with many additional services left out. This means if you get the chance to try out a proper production-grade OpenStack distribution, you might have the chance to work with other services not available through MicroStack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/zun"&gt;Zun&lt;/a&gt; for containers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/ironic"&gt;Ironic&lt;/a&gt; for bare-metal provisioning&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/magnum"&gt;Magnum&lt;/a&gt; for container orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and so on.&lt;/p&gt;

&lt;p&gt;Finally, here are some extra resources for your interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.openstack.org/"&gt;OpenStack official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index"&gt;Architecture Guide&lt;/a&gt; gives a detailed overview of RHOP with advanced examples beyond the scope of this tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this article ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introducing two new Amazon EC2 bare metal instances: &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Nitro: &lt;a href="https://aws.amazon.com/ec2/nitro/"&gt;https://aws.amazon.com/ec2/nitro/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack: &lt;a href="https://www.openstack.org/"&gt;https://www.openstack.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Open Infrastructure Foundation: &lt;a href="https://openinfra.dev/"&gt;https://openinfra.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Airship: &lt;a href="https://www.airshipit.org/"&gt;https://www.airshipit.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kata Containers: &lt;a href="https://katacontainers.io/"&gt;https://katacontainers.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack on GitHub: &lt;a href="https://github.com/openstack/openstack"&gt;https://github.com/openstack/openstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;MicroStack: &lt;a href="https://microstack.run/"&gt;https://microstack.run/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack Services: &lt;a href="https://www.openstack.org/software/project-navigator/openstack-components#openstack-services"&gt;https://www.openstack.org/software/project-navigator/openstack-components#openstack-services&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Charmed OpenStack: &lt;a href="https://ubuntu.com/openstack"&gt;https://ubuntu.com/openstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Red Hat OpenStack Platform: &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;https://www.redhat.com/en/technologies/linux-platforms/openstack-platform&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get started with MicroStack: &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview"&gt;https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installing snapd: &lt;a href="https://snapcraft.io/docs/installing-snapd"&gt;https://snapcraft.io/docs/installing-snapd&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CirrOS: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html#cirros-test"&gt;https://docs.openstack.org/image-guide/obtain-images.html#cirros-test&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack Docs: Flavors: &lt;a href="https://docs.openstack.org/nova/rocky/user/flavors.html"&gt;https://docs.openstack.org/nova/rocky/user/flavors.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get images: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html"&gt;https://docs.openstack.org/image-guide/obtain-images.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack in a snap!: &lt;a href="https://opendev.org/x/microstack"&gt;https://opendev.org/x/microstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Keystone: &lt;a href="https://docs.openstack.org/keystone/latest/"&gt;https://docs.openstack.org/keystone/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Neutron: &lt;a href="https://docs.openstack.org/neutron/latest/"&gt;https://docs.openstack.org/neutron/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Horizon: &lt;a href="https://docs.openstack.org/horizon/latest/"&gt;https://docs.openstack.org/horizon/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Zun: &lt;a href="https://www.openstack.org/software/releases/xena/components/zun"&gt;https://www.openstack.org/software/releases/xena/components/zun&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ironic: &lt;a href="https://www.openstack.org/software/releases/xena/components/ironic"&gt;https://www.openstack.org/software/releases/xena/components/ironic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Magnum: &lt;a href="https://www.openstack.org/software/releases/xena/components/magnum"&gt;https://www.openstack.org/software/releases/xena/components/magnum&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Architecture guide: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index"&gt;https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloud</category>
      <category>iaas</category>
      <category>openstack</category>
      <category>microstack</category>
    </item>
    <item>
      <title>Stubs vs Mocks in JS</title>
      <author>Lucia Cerchie</author>
      <pubDate>Tue, 04 Jan 2022 14:40:39 +0000</pubDate>
      <link>https://dev.to/cerchie/stubs-vs-mocks-in-js-3fp2</link>
      <guid>https://dev.to/cerchie/stubs-vs-mocks-in-js-3fp2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Resources: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;https://martinfowler.com/articles/mocksArentStubs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/50389981/how-to-properly-mock-es6-classes-with-sinon"&gt;https://stackoverflow.com/questions/50389981/how-to-properly-mock-es6-classes-with-sinon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sinonjs.org/releases/v12.0.1/stubs/"&gt;https://sinonjs.org/releases/v12.0.1/stubs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spin.atomicobject.com/2011/04/28/mocking-objects-with-sinon-js/"&gt;https://spin.atomicobject.com/2011/04/28/mocking-objects-with-sinon-js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowledge pre-reqs: Basic CoffeeScript testing implementation&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;We see the terms 'mocks' and 'stubs' thrown around a lot in JS testing. There's a difference between them, but sometimes they're used to refer to the same processes, so it can be difficult to tell what it is. This article is my attempt to get closer to the truth.&lt;/p&gt;

&lt;p&gt;From Martin Fowler's &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;article on testing&lt;/a&gt;, we see that mocks test using behavior verification while stubs test using state verification. He uses a Java example to illustrate his point. In this article, I'm going to use a JavaScript example to show what he means. &lt;/p&gt;

&lt;p&gt;First of all, we've got to hash out the difference between state verification and behavior verification in the abstract. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-verification"&gt;
  &lt;/a&gt;
  State verification:
&lt;/h3&gt;

&lt;p&gt;tests the state of the object in the system we're testing &lt;em&gt;after&lt;/em&gt; the methods that comprise the behavior are exercised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behavior-verification"&gt;
  &lt;/a&gt;
  Behavior verification:
&lt;/h3&gt;

&lt;p&gt;tests the behavior of the system being tested. This requires a little more dissection of the system in that we employ a mock, tell it what to expect during setup, and have it self-verify. &lt;/p&gt;

&lt;p&gt;Now let's see how some examples in JS illustrate these definitions. &lt;/p&gt;

&lt;p&gt;(Note that the following examples will be a bit over-engineered since I'm testing a built-in JS method -- but you can see how this would apply to an API or a system with similar complexity). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-verification-example"&gt;
  &lt;/a&gt;
  State verification example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fatso83/mini-mocha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sinon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sinonjs/referee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a string greeting the user with chosen word&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetBehavior&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, my stub is created using the sinon library (I'll also use this for my mock example). You can see that I'm checking the state of the value returned from the greet method once it's done executing against the stub in this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;assert.equals(stub(), greeting)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-bump-in-the-road"&gt;
  &lt;/a&gt;
  A Bump in the Road
&lt;/h2&gt;

&lt;p&gt;Now, how would I execute this test using mocks? This example was much more difficult to execute -- among the reasons why is that many developers use the term "mock" as an umbrella for a lot of testing tactics, including "stub". So when I looked up how to do this with mocks, I ended up seeing examples on how to stub! &lt;/p&gt;

&lt;p&gt;I ended up with an example that I couldn't get to work after several hours, so I turned to my friends at &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt; in the #help-and-pairing channel for assistance. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://snikhill.tech/"&gt;Nikhil Seth&lt;/a&gt; refactored my code to the following solution (notably adding the param '1' to my &lt;code&gt;.once()&lt;/code&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mock-verification-example-from-nikhil-seth"&gt;
  &lt;/a&gt;
  Mock verification example from Nikhil Seth
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fatso83/mini-mocha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sinon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test greet using Greeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should verify Greeting.greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GREETING INSTANCE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Test expects that the `greet` method of newGreeting&lt;/span&gt;
    &lt;span class="c1"&gt;// should be called once.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Calling the greet method&lt;/span&gt;
    &lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Checking if the greet method's expectations are met&lt;/span&gt;
    &lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this example employs &lt;em&gt;behavior verification&lt;/em&gt;, testing the behavior of the system being tested. We use a mock, tell it what to expect (that the greet method is executed once) during setup, and have it self-verify using the &lt;code&gt;.verify()&lt;/code&gt; method. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I learned a lot about stubs vs mocks that I never would have, if I hadn't set out to write this blog post! I like to write to synthesize my thoughts since it makes me concretize ideas with examples. Otherwise I might just read a generalized blog post and come away with a fuzzy understanding. If you're learning a new technical concept and you work with a few examples, you'll understand the general concept much better since you've seen it instantiated in different environments. &lt;/p&gt;

&lt;p&gt;PS-- many thanks also to &lt;a href="https://twitter.com/ray_deck"&gt;Ray Deck&lt;/a&gt; for asking pertinent questions when I was stuck! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solidity Basics for JavaScript Devs Part 3</title>
      <author>K (he/him)</author>
      <pubDate>Tue, 04 Jan 2022 14:24:22 +0000</pubDate>
      <link>https://dev.to/fllstck/solidity-basics-for-javascript-devs-part-3-585</link>
      <guid>https://dev.to/fllstck/solidity-basics-for-javascript-devs-part-3-585</guid>
      <description>&lt;p&gt;I wanted to publish the third part of this series after I finished my first Solidity project alongside the source code of that project.&lt;/p&gt;

&lt;p&gt;Sadly, I got a few issues connecting the frontend to the Hardhat local network.&lt;/p&gt;

&lt;p&gt;Anyway, I figured I could still publish it unfinished; at least all the tests pass, haha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kay-is/first-smart-contract"&gt;Here is the link to the repo&lt;/a&gt;. The examples from the book &lt;a href="https://www.amazon.com/Hands-Contract-Development-Solidity-Ethereum/dp/1492045268"&gt;Hands-On Smart Contract Development with Solidity and Ethereum&lt;/a&gt; but rewritten for Hardhat and TypeScript. Again, the frontend doesn't work; I started one with Preact but had some issues with the local network and didn't find the time to solve this.&lt;/p&gt;

&lt;p&gt;Maybe, some of you might figure out how to get the frontend connected to the local network? &lt;/p&gt;

&lt;p&gt;Anyway, here are the last three Solidity tips for you, my fellow JavaScript users!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contracts-have-a-raw-receive-endraw-raw-fallback-endraw-function"&gt;
  &lt;/a&gt;
  Contracts have a &lt;code&gt;receive&lt;/code&gt;/&lt;code&gt;fallback&lt;/code&gt; Function
&lt;/h2&gt;

&lt;p&gt;The EVM calls two special functions when someone sends transactions to your contract that no other functions could handle. They don't need the &lt;code&gt;function&lt;/code&gt; keyword and must be &lt;code&gt;external payable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// called when none of the contract's functions
&lt;/span&gt;        &lt;span class="c1"&gt;// match the called function signature
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// called when the call data is empty
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-fallback-function"&gt;
  &lt;/a&gt;
  The Fallback Function
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;fallback&lt;/code&gt; function to delegate calls to different contracts. Since contracts deployed on the Ethereum blockchain are immutable, you need some indirection if you want to upgrade them over time. This can be done with a contract that only implements the &lt;code&gt;fallback&lt;/code&gt; function that will relay calls to any function to a contract address. You can change this address and, in turn, indirectly change the implementation of the contract.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-receive-function"&gt;
  &lt;/a&gt;
  The Receive Function
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;receive&lt;/code&gt; function to handle calls only concerned with Ether and nothing else. For example, when you want to store a token amount into the smart contract's balance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solidity-variables-are-initialized-by-default"&gt;
  &lt;/a&gt;
  Solidity Variables are Initialized by Default
&lt;/h2&gt;

&lt;p&gt;Because solidity uses static typing, the language knows what type every variable at compile time. Each of these types has an initial value the EVM will use when it executes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-values"&gt;
  &lt;/a&gt;
  Initial Values
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;address: &lt;code&gt;0x0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;array (dynamic): &lt;code&gt;[]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;array (fixed): fixed-size array with initial values&lt;/li&gt;
&lt;li&gt;boolean: &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;enum: first enum element&lt;/li&gt;
&lt;li&gt;function (external): a function that always throws an error&lt;/li&gt;
&lt;li&gt;function (internal): a function that returns initial values if a return is defined&lt;/li&gt;
&lt;li&gt;int: &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;mapping: empty mapping&lt;/li&gt;
&lt;li&gt;string: &lt;code&gt;""&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;struct: a struct where all members are set to initial values&lt;/li&gt;
&lt;li&gt;uint: &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requesting-a-wallet-account-requires-a-manual-call-of-raw-ethrequestaccounts-endraw-"&gt;
  &lt;/a&gt;
  Requesting a Wallet Account Requires a Manual Call of &lt;code&gt;eth_requestAccounts&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Browser extension wallets usually block access to the accounts they manage from websites. The user has to allow the website to access it manually.&lt;/p&gt;

&lt;p&gt;Somehow Ethers.js doesn't ask for permissions automatically when you want to use a wallet account. You have to manually send a request to the wallet before you can use an account/signer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Web3Provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethereum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;chainId&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eth_requestAccounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The call to the asynchronous &lt;code&gt;send&lt;/code&gt; method will block until the user accepted the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With this article I finished my first steps into Solidity, smart contract development, and web3 in general. &lt;/p&gt;

&lt;p&gt;I hope, I could clear things up for you and my project helps you to get started!&lt;/p&gt;

&lt;p&gt;I saw thousands of views on this series, so I pursuing more ideas in that direction this year. So if you're a web2 JavaScript developer who wants to learn more about web3, stay tuned!&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>javascript</category>
      <category>web3</category>
    </item>
  </channel>
</rss>
