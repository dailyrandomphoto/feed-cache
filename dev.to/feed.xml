<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>type vs interface in TypeScript</title>
      <author>saad ahmad</author>
      <pubDate>Fri, 09 Apr 2021 19:10:17 +0000</pubDate>
      <link>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</link>
      <guid>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</guid>
      <description>&lt;p&gt;When I first started working with TypeScript, I quickly found myself questioning the use of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; in regards to providing type safety to my code. What is the difference between the two? When should I use one over the other? I decided it was time to get some answers.&lt;/p&gt;

&lt;p&gt;After a bit of research, I realized that the two are more similar today than they have ever been. However, there are still some differences that are worth mentioning. Let’s talk about it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-and-interfaces-at-a-high-level"&gt;
  &lt;/a&gt;
  types and interfaces at a high level
&lt;/h3&gt;

&lt;p&gt;Before we take a look at the similarities and differences between a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;, let’s first get a good mental model of what the two were intended to achieve in the first place.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; keyword in TypeScript is a way for you to provide type aliases to your variables, objects, and functions. These aliases essentially &lt;em&gt;describe&lt;/em&gt; what your data is going to look like. You can describe what your data is going to look like by using the core types (e.g. &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; etc.) or by creating your own custom types. Let’s take a look at a few examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" alt="1_MKAKdf6Gco0bcRhNr3pgjg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;interface&lt;/code&gt; keyword in TypeScript on the other hand is a way for you to describe &lt;strong&gt;only&lt;/strong&gt; what your objects are going to look like. Let’s see an example of &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" alt="1_hSlmeCXEy1x37EZ9E9smLQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right off the bat, you might think that the &lt;code&gt;type&lt;/code&gt; keyword is the more flexible choice of the two when it comes to type safety. Hold that thought. Let’s take a look now at how the two are similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similarities"&gt;
  &lt;/a&gt;
  Similarities
&lt;/h3&gt;

&lt;p&gt;Let’s say I wanted to provide some type safety for an object, one of the most common use cases for using a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;. Turns out they both work pretty much the same, and the syntax is almost identical.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" alt="1_TPjtC18Ro3IhSSro3ZXoYw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if I wanted to combine object properties from one &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; into another? We can do that too for both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" alt="1_ARdjVoUQbBugTD8MlvenrA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" alt="1_yNQhRWm2m2F8esP1HPw1Yg"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer the extends syntax as it feels a bit more natural to me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Want to provide some type safety to your functions? This is also possible with both a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" alt="1_B1WDG4pKhygWDnPN8vCCEA"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer using a type here since it reads a bit cleaner, but totally up to you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A quick note about the above. Earlier I mentioned that an interface can &lt;strong&gt;only&lt;/strong&gt; describe what an object is going to look like, yet here I am describing what a function is going to look like with an &lt;code&gt;interface&lt;/code&gt;. The reason this is possible is because a function technically &lt;em&gt;is&lt;/em&gt; an object under the hood.&lt;/p&gt;

&lt;p&gt;Finally, if you wanted to create a class that adheres to a certain type safety contract provided by a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;, you would be able to do so just fine with both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" alt="1_0FTHZgh-R80TUJ355AwURA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That covers most of the similarities of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;, let’s now take a look at the differences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differences"&gt;
  &lt;/a&gt;
  Differences
&lt;/h3&gt;

&lt;p&gt;Starting with &lt;code&gt;type&lt;/code&gt;, there are a few things that are possible that you wouldn’t be able to do with an &lt;code&gt;interface&lt;/code&gt;. For example, If you wanted to setup a type alias for just a single core type (e.g. string, number, boolean etc.), this is something that is possible with &lt;code&gt;type&lt;/code&gt; but not with &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" alt="1_9msX1PR0rC_REWxd3eouAw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility with &lt;code&gt;type&lt;/code&gt; is that you are able to create a bit more custom type aliases by using unions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" alt="1_QlcaARr_2JgnLPry7FEsoQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pretty much sums up the unique offerings of &lt;code&gt;type&lt;/code&gt;. While there may be some more advance features that &lt;code&gt;type&lt;/code&gt; offers that I missed, this should cover the most common use cases.&lt;/p&gt;

&lt;p&gt;Moving on to &lt;code&gt;interface&lt;/code&gt;, there is a unique feature called “declaration merging” that you aren’t able to do with a &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" alt="1_pbV0jRO22ETpb0-_obqmBw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;To summarize, both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; provide some nice type safety options for you to choose from depending on your needs. When it comes to describing object shapes which is the majority of my use cases, I prefer to go with an &lt;code&gt;interface&lt;/code&gt;. I personally like that an &lt;code&gt;interface&lt;/code&gt; was designed specifically with this purpose in mind, and is very intentional about it.&lt;/p&gt;

&lt;p&gt;However anytime I need to provide type safety for a function, or need a bit more customization for a type alias such as the case with unions, I prefer to go with &lt;code&gt;type&lt;/code&gt;. Both are lovely options for providing type safety, and you really can’t go wrong with using either one!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Super Useful Menubar Apps For macOS</title>
      <author>Rohith Gilla</author>
      <pubDate>Fri, 09 Apr 2021 18:48:55 +0000</pubDate>
      <link>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</link>
      <guid>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" alt="Hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! In this post let's breeze ❄️ through some of my most used and favourite, free menu bar applications for Mac. &lt;/p&gt;

&lt;p&gt;At one point or another, nearly every Mac user reaches a point where they feel as though the functionality included with macOS is not enough to enable them to perform their jobs to their standards. For this reason, many Mac owners turn to third-party applications that will help improve these workflows while offering additional features.&lt;/p&gt;

&lt;p&gt;There are a number of menu bar applications that Mac owners use for daily workflows. In many cases, these applications help you improve your workflow and offers you some extra features that will allow you to do your work more efficiently throughout the day.&lt;/p&gt;

&lt;p&gt;If you haven't checked my 2020 edition I'll leave the link here, do check it out 😄&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gillarohith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVXfW6Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xIsgHLUD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/317018/ae62352f-cc66-414d-8d25-1735f649f780.jpg" alt="gillarohith image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/6-super-useful-menubar-apps-for-macos-3g19" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Super Useful Menubar Apps For MacOS&lt;/h2&gt;
      &lt;h3&gt;Rohith Gilla ・ Jun 16 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macos&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The 5 Applications we will go over are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud App&lt;/li&gt;
&lt;li&gt;Dozer&lt;/li&gt;
&lt;li&gt;Tot&lt;/li&gt;
&lt;li&gt;xbar&lt;/li&gt;
&lt;li&gt;Drafts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's glide over them now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" alt="Glide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-app"&gt;
  &lt;/a&gt;
  Cloud App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" alt="Cloud app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Record your screen as a video with your voice &amp;amp; face, an annotated image, or a GIF and instantly share it as a link to get your point across.&lt;/p&gt;

&lt;p&gt;This is an amazing application, this is currently my go-to app to take and share screenshots, record screen.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://www.getcloudapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dozer"&gt;
  &lt;/a&gt;
  Dozer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" class="article-body-image-wrapper"&gt;&lt;img height="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hide menu bar icons to give your Mac a cleaner look. This is a free version of the famous bartender application.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;br&gt;
You can also check and contribute to the code &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tot"&gt;
  &lt;/a&gt;
  Tot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" alt="Tot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An elegant, simple way to collect &amp;amp; edit text on your Mac, iPhone, and iPad.&lt;/p&gt;

&lt;p&gt;I use to jot down quick stuff, write some important tasks and taking notes during an impromptu meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xbar"&gt;
  &lt;/a&gt;
  xbar
&lt;/h2&gt;

&lt;p&gt;Put the output from any script or program into your macOS Menu Bar.&lt;/p&gt;

&lt;p&gt;If you want a custom script running on your menubar, like your youtube stats, Twitter followers or anything else, this is the application for you.&lt;/p&gt;

&lt;p&gt;You can download and check other plugins &lt;a href="https://xbarapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drafts"&gt;
  &lt;/a&gt;
  Drafts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drafts opens to a new page with the keyboard ready so you can type immediately. Go hands-free with Dictation. Drafts lets you get things down before you forget without fiddling folders, naming, etc.&lt;/p&gt;

&lt;p&gt;This is one of the most underrated application, this is the quickest way to jot down anything. The best thing is not only it resides in the menu bar, but it can also be added as a complication to an Apple Watch. It syncs between iPad, iPhone, Mac, Watch seamlessly. You get the amazing apple ecosystem feeling.&lt;/p&gt;

&lt;p&gt;You can support me here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/C0C042WW1"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWEX3xu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi2.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rohithgilla"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to drop your favourite apps in the comments below and let me know if I missed any amazing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" alt="Thanks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Rohith Gilla&lt;/p&gt;

&lt;p&gt;P.S: Please let me know if you want me to explain how each of the application helps make your workflow better in detail. &lt;/p&gt;

&lt;p&gt;Will definitely try to make it happen.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>macos</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Litmus Tests in Tech</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Fri, 09 Apr 2021 18:43:37 +0000</pubDate>
      <link>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</link>
      <guid>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</guid>
      <description>&lt;p&gt;Since I began blogging on Dev.to, one of my primary subjects has been the (arbitrary) standards that we apply to others when we evaluate them as potential candidates for jobs.  In fact, it was the focus of my &lt;em&gt;first&lt;/em&gt; blog on this platform, and I've addressed it on several different levels since.  But this really became much clearer (in &lt;em&gt;my&lt;/em&gt; mind, at least) after I posted my last article - an article about applying to Facebook.&lt;/p&gt;

&lt;p&gt;In that article, I explained that I'd been told to expect questions about &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;.  And because I don't feel any need to "bolster" my image in this forum, I also mentioned that I had to immediately Google those concepts - because I wasn't familiar with them.&lt;/p&gt;

&lt;p&gt;To be absolutely clear, I've been coding, quite literally, since I was a kid.  I've been coding &lt;em&gt;professionally&lt;/em&gt; for almost a quarter-century.  I've been doing JavaScript development quite heavily for about... a decade or so.  And I've been doing React development, specifically, for the last five+ years.  &lt;/p&gt;

&lt;p&gt;Despite this mountain of real-world experience, I wasn't terribly familiar with the ideas of &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  After I looked them up, I realized exactly &lt;em&gt;why&lt;/em&gt; I'm not familiar with them - because I don't use them &lt;strong&gt;&lt;em&gt;at all&lt;/em&gt;&lt;/strong&gt; in my regular work.  And given "modern" JS norms, I'm not even sure how or why I would use them going forward.  &lt;/p&gt;

&lt;p&gt;As a React dev, I'm intimately familiar with &lt;code&gt;.bind()&lt;/code&gt;.  I'm familiar with it because there was a time when I used it frequently.  That time has passed.  In my current dev (and by "current", I mean, the last 2-3 years), I haven't used it at all.  Quite frankly, for me, &lt;code&gt;.bind()&lt;/code&gt; is basically... &lt;em&gt;deprecated&lt;/em&gt;.  And when I looked up &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;, I similarly felt that these concepts are &lt;em&gt;deprecated&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;You see, I don't even &lt;em&gt;use&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; anymore.  And I'm not saying that there aren't some potentially-valid use-cases out there for &lt;code&gt;this&lt;/code&gt;.  But for the most part, if you're repeatedly falling back on &lt;code&gt;this&lt;/code&gt;, I gotta wonder how "modern" your JS dev really is?  And if you're &lt;em&gt;not&lt;/em&gt; using &lt;code&gt;this&lt;/code&gt;, then the use-cases for &lt;code&gt;.bind()&lt;/code&gt;, &lt;code&gt;.call()&lt;/code&gt;, and &lt;code&gt;.apply()&lt;/code&gt; become incredibly... &lt;em&gt;scant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But this article is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; about &lt;code&gt;.bind()&lt;/code&gt; or &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  I truly couldn't care less whether you agree with my take on them.  In fact, this article isn't about any particular language construct at all.  This article is about the arrogance of "tech folks" (like myself), and &lt;em&gt;litmus tests&lt;/em&gt;, and &lt;em&gt;shibboleths&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shibboleths"&gt;
  &lt;/a&gt;
  Shibboleths
&lt;/h2&gt;

&lt;p&gt;To truly understand someone's abilities is... &lt;em&gt;hard&lt;/em&gt;.  And most of us can't really put in the time to do a "deep dive" on someone else's credentials.  So we take shortcuts.&lt;/p&gt;

&lt;p&gt;I'm not pointing fingers here.  &lt;em&gt;I&lt;/em&gt; do this.  We &lt;em&gt;all&lt;/em&gt; do this.  We create an informal list slang that we can use to determine whether someone is "one of &lt;em&gt;us&lt;/em&gt;" or "one of &lt;em&gt;them&lt;/em&gt;".  &lt;/p&gt;

&lt;p&gt;In other words, we create (consciously or subconsciously) &lt;em&gt;shibboleths&lt;/em&gt;.  We create shortcuts to separate the &lt;em&gt;real&lt;/em&gt; devs - from the pretenders.&lt;/p&gt;

&lt;p&gt;What do shibboleths look/sound like in the current JavaScript environment?  Here are some common examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a JS dev says "class" or "constructor" or "OOP" without the appropriate level of derision, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev says "declarative" or "pure" or "immutable" or "functional programming", he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a frontend dev (of nearly any language) uses tabs, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses spaces (and only &lt;em&gt;two-space&lt;/em&gt; indents!), he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev refers to object properties via dot-notation, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev relentlessly destructures all of his object properties into standalone variables, he one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses the &lt;code&gt;function&lt;/code&gt; keyword, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses arrow syntax, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could go on and on here, but I think you get the point.  Because we don't have the time to do a "deep dive" on everyone's skillset, we resort to using these shorthand call signs to swiftly label a dev as one of &lt;em&gt;us&lt;/em&gt;, or one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The (massive) problem with this approach is that it's lazy.  And it frequently leads to wildly-inaccurate assessments.  &lt;/p&gt;

&lt;p&gt;If I can perfectly pronounce &lt;em&gt;shibbólet&lt;/em&gt;, does that mean I'm Jewish?  Possibly.  But it could also mean that I was raised in an environment with heavy Jewish influences.  Or it could mean that I study languages and I'm fluent in Hebrew.  Or it could even mean that I knew you'd use this silly test as a sorting mechanism, so I studied, beforehand, exactly how to pronounce &lt;em&gt;shibbólet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, the shibboleths we employ when evaluating fellow coders are prone to serious miscalculations.  More importantly, they're also rife with our own personal biases.  &lt;/p&gt;

&lt;p&gt;I've met some coders who absolutely adore &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.  And that's fine.  But sometimes they are so enamored with it that they'll look down their nose at anyone who uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;.  Or they scoff at anyone who uses the &lt;code&gt;function&lt;/code&gt; keyword.  Or they snigger when they see a &lt;code&gt;class&lt;/code&gt; in your code.  In other words, they're treating these concepts as shibboleths to sort out the poor coders.  But what they're &lt;em&gt;really&lt;/em&gt; sorting out is: people who don't code &lt;strong&gt;&lt;em&gt;like them&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#litmus-snobbery"&gt;
  &lt;/a&gt;
  Litmus Snobbery
&lt;/h2&gt;

&lt;p&gt;A litmus test is similar to a shibboleth - but not entirely.  Shibboleths are more about &lt;em&gt;communication&lt;/em&gt; - concepts that we &lt;em&gt;want&lt;/em&gt; to hear from other coders, and concepts that we do &lt;em&gt;not&lt;/em&gt; want to hear.  &lt;/p&gt;

&lt;p&gt;But litmus tests are more about tactics that you've either mastered - or you haven't.  Here's how a litmus test typically works in coding environments:&lt;/p&gt;

&lt;p&gt;A candidate comes in for an interview and the team positions the nervous, sweaty soul at the whiteboard.  Then they ask him to code an example of doing a search with a binary tree.  The candidate has some extensive experience, and a solid grasp of many coding concepts.  But he's never studied or implemented a binary tree.  So he fails to provide any satisfactory solution to the problem.&lt;/p&gt;

&lt;p&gt;At this point, the interview is &lt;em&gt;functionally&lt;/em&gt; over.  They might afford him the courtesy of continuing the interview for another 45 minutes or so.  But the devs in that room who are evaluating the candidate have already decided that this guy's an imposter.  And they &lt;em&gt;know&lt;/em&gt; he's an imposter because he can't do a binary tree!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I mean... the &lt;em&gt;nerve&lt;/em&gt; of this guy!  Whatever made him believe that he was worthy of writing code if he hasn't already mastered the concept of binary trees?!  Not only should he be eliminated from consideration for the job, but he should also have his hands chopped off, so he's never tempted to sit down at a keyboard again! &lt;em&gt;Ammiright???&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, the &lt;em&gt;reality&lt;/em&gt; is quite different.  In a quarter century of professional coding, a binary tree has been the "right tool for the job", for &lt;em&gt;me&lt;/em&gt;, exactly... &lt;strong&gt;&lt;em&gt;ONCE&lt;/em&gt;&lt;/strong&gt;.  I know what a binary tree &lt;em&gt;is&lt;/em&gt;, and I generally know &lt;em&gt;where&lt;/em&gt; they should be used.  But if I had to set up a binary tree search today, I'd first start by hitting up Google for a few minutes, because I haven't actually &lt;em&gt;written&lt;/em&gt; anything related to a binary tree in about 15 years.&lt;/p&gt;

&lt;p&gt;But this article isn't about binary trees.  It's about the fact that we latch onto some programming technique that &lt;em&gt;we're&lt;/em&gt; familiar with, and then we use that technique as a litmus test to eliminate potential candidates.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinlyveiled-arrogance"&gt;
  &lt;/a&gt;
  Thinly-Veiled Arrogance
&lt;/h2&gt;

&lt;p&gt;Litmus tests reek of &lt;em&gt;arrogance&lt;/em&gt;.  They function from the perspective that &lt;em&gt;you&lt;/em&gt; know how to do this thing, so anyone else who claims to be a "real" coder should also know how to do this thing.  And if they can't do that thing?  Then no amount of experience will allow you to overlook the fact that this person - who &lt;em&gt;claims&lt;/em&gt; to know how to code - couldn't do this "thing" that you yourself can do just fine.  So clearly... they must royally suck at life!&lt;/p&gt;

&lt;p&gt;This is where the Arrogants get all in a lather.  They start hyperventilating and flailing their arms, and they say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But, but, &lt;em&gt;but&lt;/em&gt;... if this guy can't do a binary tree, he's obviously not a dev with broad and deep knowledge!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take it from me.  When a litmus tester reaches &lt;em&gt;this&lt;/em&gt; point, there's really no benefit in talking to them about it any longer.  Because at &lt;em&gt;this&lt;/em&gt; point, there is no amount of knowledge or skill or experience that will, in their mind, erase the fact that this guy didn't know how to do &lt;em&gt;this one thing&lt;/em&gt;.  You can tell them, "But... he wrote Tesla's entire self-driving application.  By himself.  In assembly code.  Over a long weekend."  And their only response will be, "But he didn't know how to write that binary tree search, so he obviously can't be too dedicated to his craft!"&lt;/p&gt;

&lt;p&gt;You see, once someone gets it in their head that you should know some particular bit of programming knowledge, it won't matter to them whether you can prove that you know &lt;strong&gt;&lt;em&gt;ALL THE (other) THINGS!!!&lt;/em&gt;&lt;/strong&gt;  They will always come back to the fact that you didn't know &lt;em&gt;this&lt;/em&gt; thing - and therefore, you suck.&lt;/p&gt;

&lt;p&gt;Defenders of this mindset will tell you that there's nothing wrong with expecting a candidate to have certain skills - like programming a binary tree search.  And if they can't do that, then how is it &lt;em&gt;arrogant&lt;/em&gt; to eliminate candidates on that basis???  But the answer to that is incredibly simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who rely on litmus tests, their basis for what is-or-is-not "standard" is: Do &lt;em&gt;they&lt;/em&gt; know how to do it themselves???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me say that again, in a slightly different way.  Because I want this to really &lt;em&gt;sink in&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;When we apply litmus tests to other coders, we generally assume that whatever &lt;em&gt;we&lt;/em&gt; are comfortable with is "common knowledge" - and any "real" coder should be able to do the same.  And we assume that whatever we &lt;em&gt;aren't&lt;/em&gt; comfortable with is... esoteric.  Rare.  Arcane.  &lt;/p&gt;

&lt;p&gt;The Arrogants who are judging you based upon your binary tree skills are doing so either because A) their environment just so happens to use a lot of binary tree searches, or B) it's been established in their dev shop that this is a Sacred Coding Test and all of their current devs either knew how to do binary tree searches before they came onboard, or they quickly learned after it became a "standard" in their environment.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#karma-is-a"&gt;
  &lt;/a&gt;
  Karma is a...
&lt;/h2&gt;

&lt;p&gt;In case you can't hear them yourself, those Arrogants are still squawking in the background.  They're fidgeting and arguing that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don't care what you say, if someone isn't intimately familiar with binary tree searches, they're not a &lt;em&gt;real&lt;/em&gt; programmer!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To which I will only respond with this:&lt;/p&gt;

&lt;p&gt;I wasn't familiar with &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; until a few weeks ago.  I guess that means I'm not a "real" coder.  I'd need to do a little googling before I'd be ready to sit down and write out a binary tree search algorithm from scratch.  I guess that also means that I'm not a "real" coder.&lt;/p&gt;

&lt;p&gt;But I've been doing this now for a quarter-century.  Do you &lt;em&gt;really&lt;/em&gt; believe that, if &lt;em&gt;I'm&lt;/em&gt; the one conducting the interview, that I couldn't possibly come up with a litmus test that you would &lt;code&gt;FAIL&lt;/code&gt;???  Are you so certain in the incredibly-broad and impressively-deep scope of your knowledge, that you're sure I couldn't possibly stump you???  &lt;/p&gt;

&lt;p&gt;And if I &lt;em&gt;could&lt;/em&gt; stump you on any particular "litmus test", how will you feel when you get summarily dismissed from consideration just because you hadn't mastered the one technique that I happened to ask you to illustrate on the whiteboard???&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>hiring</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Bisect &gt; Encontrando o Commit Bugado</title>
      <author>Felipe Ribeiro</author>
      <pubDate>Fri, 09 Apr 2021 18:41:41 +0000</pubDate>
      <link>https://dev.to/felipefrbr/git-bisect-encontrando-o-commit-bugado-14g0</link>
      <guid>https://dev.to/felipefrbr/git-bisect-encontrando-o-commit-bugado-14g0</guid>
      <description>&lt;p&gt;Então você roda a sua aplicação e descobre um bug! &lt;br&gt;
Você olha o histórico de alterações do projeto e não consegue identificar quando o bug foi introduzido.&lt;br&gt;
O jeito é fazer o checkout de cada revision e testar... um por um! Se for apenas 3 commits, ok! Mas se for 10, 15, 30... vai levar horas!&lt;/p&gt;

&lt;p&gt;Aí que entra o &lt;code&gt;git bisect&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KX6hdPMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui6nm9hvzenfgblvq0jd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KX6hdPMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui6nm9hvzenfgblvq0jd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;git bisect&lt;/code&gt; utiliza um algoritmo de pesquisa binária no histórico de alterações do seu projeto para descobrir qual commit introduziu o bug. Mas ele não faz tudo sozinho. Precisamos interagir bastante nesse processo mas ainda assim é bem mais fácil do que fazer tudo sozinho.&lt;/p&gt;

&lt;p&gt;Para iniciarmos o processo, precisamos informar um commit "bad" (ruim) e um commit "good" (bom). Então o primeiro passo é descobrir um commit onde você tenha certeza de que a sua aplicação estava funcionando. Com esse commit na mão podemos começar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect start
$ git bisect bad            # A versão atual está ruim
$ git bisect good bf21fee   # bf21fee é uma versão boa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então o &lt;code&gt;git bisect&lt;/code&gt; vai fazer uma análise e irá te responder algo assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bisecting: 84 revisões deixadas para testar depois disso (aproximadamente 7 passos)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A partir daí, ele vai selecionar um commit entre esses dois pontos, vai fazer o checkout e vai te perguntar se esse commit é "bom" ou "ruim". Então cabe a você decidir... ou melhor, testar! Faça o teste e verifique se o bug está lá.&lt;/p&gt;

&lt;p&gt;Se o bug ainda estiver lá, basta digitar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect bad
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas, se a versão estiver funcionando corretamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git bisect good
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após isso, ele irá responder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bisecting: 42 revisões deixadas para testar depois disso (aproximadamente 6 passos)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, ele irá escolher um outro commit, fará o checkout e te perguntará novamente se o commit é bom ou ruim. Agora é só ir repetindo esse processo até acabarem os commits. Então o &lt;code&gt;git bisect&lt;/code&gt; irá te informar qual é o primeiro commit ruim.&lt;/p&gt;

&lt;p&gt;Pronto! Agora é com você! Hora de corrigir esse bug!&lt;/p&gt;

</description>
      <category>git</category>
      <category>brazilliandev</category>
    </item>
    <item>
      <title>What's your favorite programming channel?</title>
      <author>CristoferK</author>
      <pubDate>Fri, 09 Apr 2021 18:41:18 +0000</pubDate>
      <link>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</link>
      <guid>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</guid>
      <description>&lt;p&gt;What's your favorite programming YouTube channel?&lt;br&gt;
Mine are Web Dev, Web Dev Simplified, Codingflag, and Online Tutorials.&lt;/p&gt;

&lt;p&gt;Also, I am making programming tutorials too! Here is the link to my channel&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;br&gt;
Please Subscribe!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>youtube</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Best 5 Steps To Improve Your Programming skills</title>
      <author>Thu Htet Tun</author>
      <pubDate>Fri, 09 Apr 2021 18:05:37 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</link>
      <guid>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
Today I would like to share you how to improve your programming skills within an unexpected time limit.&lt;/p&gt;

&lt;p&gt;I also uploaded this content on my YouTube channel.&lt;br&gt;
If you prefer to watch, please go for it. &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For readers, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choose-your-specific-role"&gt;
  &lt;/a&gt;
  1. Choose your specific role
&lt;/h2&gt;

&lt;p&gt;There are a lot of roles in software engineering. For example, Front-End, Back-end, DevOps, Analyst, Security, QA, DB admin etc. So, what gets you excited about them. If you are interested in design, go for designing things. If you enjoy about algorithms and data structures, just go for it. Important things is you have to choose one first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-choose-your-weapon-programming-language"&gt;
  &lt;/a&gt;
  2. Choose your weapon (programming language)
&lt;/h2&gt;

&lt;p&gt;First, you have to choose what programming language will be yours. &lt;br&gt;
There are a lot of programming languages in software engineering so if you don't decide it first, you will never escape from beginner step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-learn-it-but-not-study"&gt;
  &lt;/a&gt;
  3. Learn it but not study
&lt;/h2&gt;

&lt;p&gt;After you got your weapon, then learn about it. You can learn from different ways like University, Bootcamp, Mentor, Online class or YouTube etc. Important thing is to be enjoyed on your learning. Personally, I don't like studying just for an exam. I used to be but I don't like it. Studying is just intended for making a result. Learning is different because it is continuous and fun for me. Mostly, if you are in IT field, learning is an essential thing you have to follow. Plus, don't forget to learn about your main programming language's documentation deeply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-apply-your-knowledge-with-multiple-projects"&gt;
  &lt;/a&gt;
  4. Apply your knowledge with multiple projects
&lt;/h2&gt;

&lt;p&gt;You've got some knowledge from learning things. So, Apply it. Start with small projects so that you can feel achievement. It is important too. That will make you the reason what you are learning about. &lt;/p&gt;

&lt;p&gt;In this case, sometimes learning and applying might be parallel. Because there is no complete learning. we have to keep that in mind. &lt;/p&gt;

&lt;p&gt;As another reason, you can boost your self-confidence by creating projects. Plus, you can show those projects to your clients or whatever as your experiences. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keep-in-touch-with-community"&gt;
  &lt;/a&gt;
  5. Keep in touch with Community
&lt;/h2&gt;

&lt;p&gt;Congratulations to reach this step. Now, you know yourself in this professional field. It is time to upgrade your skills. Go for advanced projects or get a job. At this point, you will see that your domain knowledge is not enough while building things. Time to learn from real world experience. &lt;/p&gt;

&lt;p&gt;You may find some skills or tools that you don't have. Don't worry. You've already got learning skills right? So quick learn them. You can connect to respective engineering community, forum, social media page or groups. Discuss and sharing about what you gets and needs. &lt;/p&gt;

&lt;p&gt;That's it.&lt;br&gt;
Now, it is time to spread your wings and fly.&lt;/p&gt;

&lt;p&gt;I hope you enjoy this post.&lt;br&gt;
I also uploaded this content on my YouTube channel.&lt;br&gt;
Please check this out too.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to follow me back if you like.&lt;br&gt;
See you guys.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ng-learn: How to Become An Angular Expert</title>
      <author>ng-conf</author>
      <pubDate>Fri, 09 Apr 2021 18:02:27 +0000</pubDate>
      <link>https://dev.to/ngconf/ng-learn-how-to-become-an-angular-expert-34mh</link>
      <guid>https://dev.to/ngconf/ng-learn-how-to-become-an-angular-expert-34mh</guid>
      <description>&lt;p&gt;Maria Korneeva | ng-conf | Sep 2020&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pv4vnA5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Avst1n-bdK-0td0O_Q1JP-w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pv4vnA5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Avst1n-bdK-0td0O_Q1JP-w.jpeg" alt='A black sketch style drawing of three small pile of books, one book is open between them. The book on top of one pile has the Angular logo on the cover and a fabric bookmark peeking out of the pages. The bottom book of another pile has the word "Angular" on the spine. The open book has a pair of glasses resting on it.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I settled to become a frontend developer, I wanted to be a good one. To become an expert, you need to gain the knowledge. To have the knowledge, you have to learn and practice. So, how does it usually start? You pick up a new framework, follow a couple of tutorials, build a couple of demos — your learning curve sky-rockets. You know, what happens next? Once you get familiar with the framework’s logic, the learning pace slows down. Now, instead of learning overall concepts and approaches, you make progress just when something does not work as expected. So the question is, how to keep learning?&lt;/p&gt;

&lt;p&gt;I’m going to share my experience with you about how I continued to learn after that initial learning curve. I might mention some podcasts, mailing lists etc., but none of them is my recommendation for &lt;strong&gt;you&lt;/strong&gt;. I care more about the process than the content. So, it is more important that after reading this text you will find &lt;strong&gt;your&lt;/strong&gt; podcasts, mailing lists, or further resources for yourself. Though I explicitly mention Angular, you can use my tips for any kind of frontend or backend or any tech topics.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlfb6TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2AVTwtLFav6O_Em-OoiJYfXg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlfb6TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2AVTwtLFav6O_Em-OoiJYfXg.jpeg" alt="A black and white sketch styled picture of a stick figure girl with short hair and a large smile. She has her arms crossed over her chest. There is a thought bubble, and in that is the same girl. In her thoughts she's wearing a fancy hat with the Angular logo and has a hand tucked into her jacket lapel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the problem statement. Here is Maria. Maria wants to become an Angular guru NOW! She could binge-watch tutorials and spend a week or two reading professional articles 10 hours a day if she only could see the result immediately. The problem is, that it does not work this way (yet). The key to success lies in consistency and regular effort. But how to come to this path of enlightenment? Let’s have a look at the main idea.&lt;/p&gt;

&lt;p&gt;Whenever you work on your professional or private projects, you progress in &lt;em&gt;incident-based learning&lt;/em&gt;. One might go very deep on a specific use case without having an overarching understanding of the underlying principles. The opposite (or rather complementary) way is the &lt;em&gt;concept-based learning&lt;/em&gt; — looking at the topic from the bird-perspective. While specific implementation details are shot-lived, the understanding of framework concepts usually survives several (minor) versions. To progress as a developer, you need both — enough practical learning (e.g. from bug fixing) and enough theory to avoid similar pitfalls in the future. So, we need to maximize our information inflow, keep it stable and overcome the &lt;a href="https://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html"&gt;instant gratification monkey&lt;/a&gt;. Here are some tips.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-it-on-your-dailyregular-todo-list"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Put it on your daily/regular To-Do list&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCxwo89b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2A88udmmzMwYrEMqMFPhPEJg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCxwo89b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2A88udmmzMwYrEMqMFPhPEJg.jpeg" alt='A black and white sketch style picture of an elephant holding a pen in its trunk. There is a paper list in front of the elephant containing three list items, each with a checkmark box. The first says "today", the second "tomorrow" and the third reads ". . .".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a to-do list might be an obvious suggestion. Nevertheless, let’s briefly touch upon it. You probably already know t&lt;a href="https://www.absencehub.com/elephant-technique-how-to-get-things-done/"&gt;hat the elephant should be eaten in steaks&lt;/a&gt;. In other words, the huge mission of becoming an Angular guru should be split into easy-to-manage learning tasks. Do not put “learn Angular” on your list, but put “watch tutorial XYZ” instead. Start with a very small step to trick your lazy mind — something like “open the website in the browser”, “find a good course to follow”, “write down the action plan” etc.&lt;/p&gt;

&lt;p&gt;And now, how to achieve consistency? Have a look at &lt;a href="https://flow-e.com/blog/no-zero-days/"&gt;the concept of no zero days&lt;/a&gt;: every single day brings you closer to your goal if you make even the tiniest progress. I have a daily task called “education” in my to-do list. It comprises the following items: “reading 1 article from my list”, “watching 1 video from my list”, “listening to 1 podcast episode”, “searching for frontend community events”. To check the task as “done”, I need to finish at least one of them — daily sense of accomplishment guaranteed. You can drive it even further by establishing a habit through your own reward system. For this, check out &lt;a href="https://charlesduhigg.com/the-power-of-habit/"&gt;The Power of Habit by Charles Duhigg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another task that I have on my monthly To-Do list is to answer at least 1 question on &lt;a href="https://stackoverflow.com/questions/tagged/angular"&gt;stackoverflow&lt;/a&gt;. It gives me some karma points and increases my use-case-based learning chances. Every Monday I have a “twitter update” task. It puts me under the pressure of analyzing what I have learned so far or which of my daily Angular experiences are worth sharing with others. To sum up — app reminders and public pressure will help your keep going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-a-reading-watching-web-crawler"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Be a reading / watching web crawler&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The reading list or the list of tutorials, conference talks etc. is the foundation of concept-based learning. To keep the inflow of information steady, be just like &lt;a href="https://www.webfx.com/blog/internet/what-is-a-web-crawler/"&gt;a web crawler&lt;/a&gt;: when you “process” one of the items on your list, check links and concepts that they refer to. If the linked resource sounds interesting, add it to your list. The clue here is to keep updating the list as regularly as possible. For example, my &lt;a href="https://todoist.com/"&gt;To-Do app&lt;/a&gt; allows me to add links from Twitter or LinkedIn as tasks without leaving the social network. The hurdle of opening the article is smaller if the task is clickable and redirects to the resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFL3moqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2Au4QlMw1GzVyVAuABn2LUDg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFL3moqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/1%2Au4QlMw1GzVyVAuABn2LUDg.png" alt="A black and white sketched style drawing of a stick figure girl with short hair walking across the image. Beneath her are four pages, one has an arrow leading to another, and that has two arrows each leading to one page."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to keep the reading list on the blogging platform of your choice. Here are some examples that have tons of articles on Angular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://medium.com/search?q=angular"&gt;Medium&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/search?q=angular"&gt;Dev.to&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://indepth.dev/search?query=angular"&gt;inDepth.dev&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackernoon.com/search?query=angular"&gt;hackernoon&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/news/search/?query=angular"&gt;freeCodeCamp&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.angular-university.io/top-10-angular-2-tutorials-blogs-and-podcasts/"&gt;Angular-university&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ultimatecourses.com/blog/category/angular/"&gt;Ultimate Courses&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.angularminds.com/blog.html?utm_source=devglan"&gt;AngularMindes&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.mgechev.com/"&gt;Minko Gechev’s blog&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juristr.com/blog/"&gt;Juri Strumpflohner’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For further blogs and even more input, check out and chose your favourites yourself from ‘&lt;a href="https://2muchcoffee.com/blog/top-43-angular-blogs-websites-influencers/"&gt;Top 43 Angular websites and influencers&lt;/a&gt;’ or the verified education list from Angular. The drawback is that you might end up with 2–3–4 lists on different platforms.&lt;/p&gt;

&lt;p&gt;Mailing lists are another source of Angular insights. There is an old saying: “If the mountain will not go to the man, then the man must go to the mountain”. So if I do not personally check for the most recent articles myself, then I should have the must-reads delivered to my inbox automatically. Such emails serve as a reminder for my learning goals and as an input source for my reading list (remember, be like a web crawler!). Yet, chose wisely, which topics you would like to follow… As of now, I am getting digests from (Angular + overall frontend focus):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medium,&lt;/li&gt;
&lt;li&gt;inDepth,&lt;/li&gt;
&lt;li&gt;Dev.to,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.thisdot.co/"&gt;This Dot&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jamstack.email/"&gt;JamStack&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN web docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also go for further product-specific lists (e.g. Cypress, NX etc.).&lt;/p&gt;

&lt;p&gt;When there is no time for reading…start listening to podcasts. I am not a podcasts person, but maybe, you are? A friend of mine listens to podcasts when doing the dishes, another one when jogging. Maybe, you can listen to an episode, when driving home? A quick search for the keyword “Angular” on Spotify gives around &lt;a href="https://open.spotify.com/search/angular/shows"&gt;10 matches&lt;/a&gt;, even more for broader terms (“JS”, “JavaScript”, “Frontend”, “Web Dev” etc.). Apple Podcasts is a good source, too. Insider tip: check if blog authors have a podcast, like &lt;a href="https://podcast.mgechev.com/"&gt;Minko Gechev&lt;/a&gt; (and vice versa — if the podcast authors have a twitter account). One really great podcast worth checking out is &lt;a href="https://open.spotify.com/show/1PrLErQHBqBhZsRV1KHhGM"&gt;The Angular Show&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Besides articles, books, or podcasts, you can learn from other people! That is why one of my daily tasks encompasses searching for new events — check out LinkedIn, Xing, This Dot, Mozilla, &lt;a href="https://angular.io/events"&gt;list of conferences&lt;/a&gt; or &lt;a href="https://www.meetup.com/topics/angularjs/"&gt;Angular MeetUps&lt;/a&gt; for that. Due to COVID-19, more and more MeetUps go online so that you can join from anywhere! Many of them are being recorded and can be watched later on YouTube, so it is definitely worth it to search for such channels. Some examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC1nBp6ouBB1o5P8YvPznPOw"&gt;Frontend Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCHkqtrnQO2HMyW50ixOtJGw"&gt;This Dot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/ngconfvideos"&gt;ng-conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCZ4GiUa-sCui8Kh5_rs5_EA/videos"&gt;500Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCUlbE1BakJPBVx8OAzc5quA"&gt;AngularToronto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC3dvhlLD9QsFwe3H0HrFJLg"&gt;Angular Meetup Zurich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCiRMADUpw0enFE3ehyns5ew"&gt;Meetup Leipzig&lt;/a&gt;, and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-your-learning-bubble"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create your learning bubble&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Being in a bubble is generally not good. I don’t want to only see only the content that I going to hit the “like” button for and get even more of it (vicious circle!). The “learning bubble” I’m talking about is different. I see it as a mind hack to maximize information on Angular that I get. If I spend plenty of time on Facebook, I make sure that my newsfeed has some learning potential. For example, I follow &lt;a href=""&gt;Dev Community&lt;/a&gt; to get some posts on frontend topics (including Angular) and have joined some similar groups. Here are some further ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow people on Twitter that post Angular content&lt;/li&gt;
&lt;li&gt;Check “who to follow” suggestions for the keyword “Angular”&lt;/li&gt;
&lt;li&gt;Search for authors of the articles from your reading/watching list, speakers from conferences, tutors, peer developers (just like web crawler, huh?). Check their posts before subscribing, though —the keyword does not always guarantee tech-only content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you get it all settled —let’s customize! The learning bubble only works if the information you get is valuable and relevant. Like, follow, unfollow, hide content, unsubscribe from unuseful lists, show less irrelevant content, let the recommender system learn from your feedback— design your own learning bubble and make it inescapable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-now-what-to-do-with-all-the-input"&gt;
  &lt;/a&gt;
  &lt;strong&gt;And now — what to do with all the input?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The best way to turn information into knowledge is to create new things using it (side projects, blog posts, twits). Even better — to expose it to the wider audience. This is exactly what Shawn Wang underlines in his brilliant essay “&lt;a href="https://www.swyx.io/learn-in-public/"&gt;Learn in public&lt;/a&gt;” (I am not going to repeat his suggestions here). Create some &lt;a href="https://coggle.it/diagram/Xe1hAtfvayr9ztsi/t/frontend/9fc512b335a1bfa12e0c80df6d5fbdc51dfe44ff0b7e05249c0b63de515b226f"&gt;mind maps&lt;/a&gt; to structure your knowledge and share it with your colleagues. &lt;a href="https://twitter.com/BrowserPerson/status/1276912794500304896?s=20"&gt;Illustrate some articles on Angular&lt;/a&gt; that you liked and post it on social networks. Process and output it.&lt;/p&gt;

&lt;p&gt;That’s it. The final words:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.informationStream$.pipe(
   shareReplay(1);
   ).subscribe(
      (input) =&amp;gt; {
         this.doDiscipline(habit, reward);
         const referredInput = this.process(input);
         this.informationStream$.next(referredInput);
      }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learning is not a one-time action, it’s a system!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;[&lt;strong&gt;Disclaimer&lt;/strong&gt;: did I miss something / is something not quite correct? Please let me and other readers know &lt;strong&gt;AND&lt;/strong&gt; provide missing/relevant/correct information in your comments — help other readers (and the author) to get it straight! a.k.a. #learningbysharing]&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#thanks-to-rogelio-flores-zubillaga"&gt;
  &lt;/a&gt;
  Thanks to Rogelio Flores Zubillaga.
&lt;/h6&gt;

</description>
      <category>angular</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Symfony Live Online 2021</title>
      <author>Mathieu Ledru</author>
      <pubDate>Fri, 09 Apr 2021 17:59:51 +0000</pubDate>
      <link>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</link>
      <guid>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</guid>
      <description>&lt;p&gt;Nouvel article sur le blog&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.darkwood.fr/article/symfony-live-online-2021"&gt;https://blog.darkwood.fr/article/symfony-live-online-2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Big O notation 1/2
</title>
      <author>Guillain bisimwa</author>
      <pubDate>Fri, 09 Apr 2021 17:22:50 +0000</pubDate>
      <link>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</link>
      <guid>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</guid>
      <description>&lt;p&gt;Welcome to this series of articles dedicated to &lt;strong&gt;Big O&lt;/strong&gt; scoring. What is it anyway? Big O? before knowing more on the subject, I would like to warn you that this concept can seem a bit confusing if you do not have a basic knowledge of data structure and algorithms! If that’s your case, I welcome you to check out some great resources on this topic at the bottom of this article!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt; is a notion that describes the performance or complexities of an algorithm. We write it with a capital letter &lt;strong&gt;O&lt;/strong&gt;, not a zero (Read as Big Oh), the &lt;strong&gt;Big O&lt;/strong&gt; is a measure and a description of the time necessary for the execution of an algorithm… In short, we are talking about efficiency! We use it to evaluate codes for performance and space.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oops! Does this definition seem a bit awkward to you ?? Ok let’s try to see an analogy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose you occasionally enjoy baking your own cake at home. For you, it will take you &lt;strong&gt;“T”&lt;/strong&gt; time to bake a cake. Now your birthday is approaching, and you decide to invite 5 of your friends.&lt;/p&gt;

&lt;p&gt;Easily you can provide 3 cakes which make &lt;strong&gt;“3T”&lt;/strong&gt; to prepare everything. It’s not exaggerating, eh!&lt;br&gt;
So imagine you decide to call 200 people, wow it’s very hard to get by because when the number of guests increases so does the time to bake the cakes for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“We used ’n’ to denote the variable size of the input of the algorithm. We use &lt;strong&gt;Big O&lt;/strong&gt; notation also to describe how much space an algorithm uses.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then an alternative is available for you. You can order the cakes online. By ordering the number you want: whether it’s 10, 50 or 200 everything will take the same delivery time.&lt;br&gt;
We then notice that even if the number of guests increases, the time to bake the cakes and the time to deliver the cakes remain constant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We ask ourselves, what is the place of the algorithm and DataStructure? In section 2 we will see in detail the different types of data structures that can be used to store data and some algorithms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the case of a simple array, and let’s break that down!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collection of items sorted in a contiguous memory location. Each element can be identified by its index in the array. Since the array uses computer memory, we also need this memory optimally. This is why the &lt;strong&gt;Big O&lt;/strong&gt; measures space complexity, which is the amount of storage a program wants. This explains how the size grows as the inputs increase.&lt;/p&gt;

&lt;p&gt;There are several operations that we can do with an array such as for example adding elements in it, reading an element at a position (index), sorting by order or alphabetically, … &lt;br&gt;
These operations are considered as algorithms that we can apply to achieve the desired result. This leads us to evaluate the time complexity. It represents the number of times a statement or operation is executed in a program. The Big O notation expresses the run time of an algorithm in terms of how quickly it grows in relation to the input.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not easy to determine the exact runtime of an algorithm. It depends on the speed of the computer processor. Instead of talking about the run time directly, we use Big O notation to talk about how quickly the runtime grows. There are more runtimes than what we saw in this previous example. The best known are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constant O (1),&lt;/li&gt;
&lt;li&gt;Logarithmic O (log N),&lt;/li&gt;
&lt;li&gt;Log-linear O (N log N),&lt;/li&gt;
&lt;li&gt;Linear O (N),&lt;/li&gt;
&lt;li&gt;Quadratic O (N² ),&lt;/li&gt;
&lt;li&gt;Cubic O (N³), and&lt;/li&gt;
&lt;li&gt;Exponential O (2^n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This series of articles is devoted to the details and examples of these runtimes!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Without huge memory, we can address huge problems&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-o1-constant-time-complexity-read-as-big-oh-of-1"&gt;
  &lt;/a&gt;
  1. O(1) — Constant time complexity. (Read as Big Oh of 1)
&lt;/h2&gt;

&lt;p&gt;In this complexity, no matter how big or small your inputs are, the output time will always be the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This algorithm takes the same amount of time to execute.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-links"&gt;
  &lt;/a&gt;
  Helpful links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.khanacademy.org/computing/computer-science/algorithms"&gt;https://en.khanacademy.org/computing/computer-science/algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513"&gt;https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bigonotation</category>
      <category>bigo</category>
      <category>timecomplexity</category>
      <category>spacecomplexity</category>
    </item>
    <item>
      <title>How to run Linux bash in Windows OS</title>
      <author>Sameer Katija</author>
      <pubDate>Fri, 09 Apr 2021 17:22:48 +0000</pubDate>
      <link>https://dev.to/sameerkatija/how-to-run-linux-bash-in-windows-os-54mk</link>
      <guid>https://dev.to/sameerkatija/how-to-run-linux-bash-in-windows-os-54mk</guid>
      <description>&lt;p&gt;I use windows for most of my daily tasks, and almost all the software I prefer for my daily tasks, are windows based. Almost 90% of my time is spent on Windows, but still, the gap is there which can only be filled by Linux. Being a developer, I needed Linux for most of my tasks, one of them is deployment. Unlike Windows, Linux is free and most of the Linux versions are open-source.&lt;/p&gt;

&lt;p&gt;As the need for Linux came, I completely made a shift to ubuntu. After shifting, I realize that there are plenty of reasons I should shift back to windows. Well, my favorite software which I used in my free time was missing there especially Adobe illustrator(I seriously love this software and this lets you explore your creativity). I came back to windows and opted for the virtual machine.&lt;/p&gt;

&lt;p&gt;Think of a Virtual machine as a machine inside your real machine. It’s basically a concept, where most of the resources are split and are made available as a new virtual machine, though this new machine is totally virtual and acts as a real machine. This new virtual machine can be used to install another OS inside your main machine. I hope that now you have a concept of the virtual machine but as a reference, you can also read this definition by &lt;a href="https://en.wikipedia.org/wiki/Virtual_machine"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, a virtual machine is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtual Machine is better when it comes to dual boot. As every tool has some flaws too. Virtual machine too has some cons. As I alluded, a virtual machine runs on your real machine. So each and every hardware resource which our virtual machine will need have to request from the main machine. It means that our main machine will access hardware indirectly, thus its performance will be impacted. So, what is the alternative which can be the best fit for our needs? It’s Windows Subsystem for Linux (WSL).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-windows-subsystem-for-linuxwsl"&gt;
  &lt;/a&gt;
  What is Windows Subsystem for Linux(WSL)
&lt;/h2&gt;

&lt;p&gt;The WSL is a type of resource within windows OS that allows users to run a Linux command-line interface(CLI) in windows. In WSL, you can do almost all the tasks which you can perform on Linux Terminal.&lt;/p&gt;

&lt;p&gt;WSL is based on a Virtual machine. When we download a preferred Linux distro, we are not creating a VM instance. Instead, WSL provides a layer for translating Linux system calls to Windows system calls. Thus Linux binaries are able to run in windows unmodified. We can also have the Linux process communicate with Windows Process. WSL also maps Windows services, like the filesystem and networking, as devices that Linux can access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-wsl-is-better-than-virtual-machine"&gt;
  &lt;/a&gt;
  Why WSL is better than Virtual Machine
&lt;/h2&gt;

&lt;p&gt;Instead of using a VM instance, WSL virtualizes a Linux kernel interface on top of the Windows kernel. it means that running WSL only requires a small amount of memory. And when it’s not in use, the WSL driver isn’t loaded into memory, making it much more efficient than a solution based on a VM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-setup-and-install-wsl"&gt;
  &lt;/a&gt;
  How to setup and install WSL
&lt;/h2&gt;

&lt;p&gt;In order to use WSL in windows, you have to set up and install it first to do that we need some configuration and some Linux kernel installed in our machine, Don’t worry this isn’t as tedious as it sounds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-enable-the-wsl"&gt;
  &lt;/a&gt;
  Step 1 — Enable the WSL
&lt;/h3&gt;

&lt;p&gt;WSL is a Windows feature and it is by default off and to enable it you need to open &lt;code&gt;powershell&lt;/code&gt; as administrator and run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-enable-virtual-machine-features"&gt;
  &lt;/a&gt;
  Step 2 — Enable Virtual machine features
&lt;/h3&gt;

&lt;p&gt;After enabling the WSL feature then we need to enable virtualization functionality to run WSL on windows. In order to enable VM features on your machine, you need to run the command given below in Powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-download-linux-kernal-package"&gt;
  &lt;/a&gt;
  Step 3 — Download Linux Kernal Package
&lt;/h3&gt;

&lt;p&gt;Now, you need to download the Linux kernel package. you can download this package by clicking &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;here&lt;/a&gt;. or you can also download this package from &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft's WSL documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-wsl2-as-your-current-version"&gt;
  &lt;/a&gt;
  Step 4 — Setting WSL2 as your current version
&lt;/h3&gt;

&lt;p&gt;Open Powershell and run the command given below, you can skip this command. If you don’t want to work with WSL2, you can also work with WSL1. In my case, I would prefer to go for WSL2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-install-your-preferred-linux-distro"&gt;
  &lt;/a&gt;
  Step 6 — Install your preferred Linux Distro
&lt;/h3&gt;

&lt;p&gt;Open the &lt;a href="https://www.microsoft.com/en-us/search?q=WSL"&gt;Microsoft store&lt;/a&gt; and search for your preferred Linux distro. I would suggest going for &lt;a href="https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6"&gt;ubuntu&lt;/a&gt; because you will find a lot of community support in case you needed any help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJB6iYMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2Av5G_1WRh8Om8nWsuRBZSyQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJB6iYMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2Av5G_1WRh8Om8nWsuRBZSyQ.png" alt="Picture of Windows Store"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing, you need to open ubuntu and for the first time, you have to give a username and a password which will only be for ubuntu and will be used afterward to login and do other &lt;code&gt;sudo&lt;/code&gt; stuff in ubuntu. With all that congrats on installing and setting up WSL on your machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I am not against the dual boot, virtual machine instances, or anything else like that. I still use Virtual Machine for some of the Linux applications. The point I am trying to make in this article is that, if you need Linux to just fulfill your developer needs then WSL is the best choice to go for. If you still prefer some other tool and technology that’s totally fine. Choices are our own. With that thanks for reading this article and don’t forget to support me by clicking clap and sharing this with other developers. Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>linux</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Serverless GraphQL Server: Deploying to Netlify Functions, 3 ways</title>
      <author>Eka</author>
      <pubDate>Fri, 09 Apr 2021 17:20:39 +0000</pubDate>
      <link>https://dev.to/ekafyi/serverless-graphql-server-deploying-to-netlify-functions-3-ways-jfb</link>
      <guid>https://dev.to/ekafyi/serverless-graphql-server-deploying-to-netlify-functions-3-ways-jfb</guid>
      <description>&lt;p&gt;As a detour from my attempt at learning GraphQL resolvers and data sources, I'm going to try... &lt;em&gt;deploying a server without data sources&lt;/em&gt;. 😬&lt;/p&gt;

&lt;p&gt;There are multiple options for hosting our server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apollo Server &lt;a href="https://www.apollographql.com/docs/apollo-server/deployment"&gt;official documentation&lt;/a&gt; has sections on deploying to Heroku, Lambda, Netlify, and Azure Functions. Firebase Cloud Functions is in the same category. All of them (at the time of writing) have free tiers.&lt;/li&gt;
&lt;li&gt;For demos or starter templates, web IDEs with Node server like &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt; and &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt; can get you started quickly with &lt;em&gt;near-zero configuration&lt;/em&gt;. These are not ideal for production use if you are on a free account, since the server goes to sleep after x minutes of inactivity.&lt;/li&gt;
&lt;li&gt;Finally, you can always self-host your server if you have the resources and knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post focuses on the first option, which is a good choice for those who have no/little experience deploying servers but want a robust, scalable solution.&lt;/p&gt;

&lt;p&gt;I'm going to discuss 3 ways to deploy our server on Netlify Functions. They are essentially similar and achieve the same objective, but with slight variations suited for different needs.&lt;/p&gt;

&lt;p&gt;If you've never used or (?)heard of Netlify Functions at all, here is a post I wrote last year about serverless and Netlify Functions in general.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ekafyi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--napK5Qgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eJKQyS4q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/70827/319e1725-cd9c-40c5-bbad-6e9be00879be.png" alt="ekafyi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ekafyi/getting-started-with-netlify-functions-part-1-zero-config-setup-and-writing-our-first-functions-1i5b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Netlify Functions — Zero-config setup and our first functions&lt;/h2&gt;
      &lt;h3&gt;Eka ・ Jul 25 '20 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#jamstack&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic code and dependencies&lt;/li&gt;
&lt;li&gt;Option 1: No build&lt;/li&gt;
&lt;li&gt;Option 2: With build&lt;/li&gt;
&lt;li&gt;Option 3: With TypeScript&lt;/li&gt;
&lt;li&gt;Connecting Git repo to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;TL;DR?&lt;/em&gt; Check out the sample repo at the end of this post.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basic-code-and-dependencies"&gt;
  &lt;/a&gt;
  Basic code and dependencies
&lt;/h2&gt;

&lt;p&gt;Let's start with our basic project setup.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h4&gt;

&lt;p&gt;Like any JS app, we need a &lt;code&gt;package.json&lt;/code&gt; file for our project information, commands, and dependencies. We'll get to the commands later—now let's look at the dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;private&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.22.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^15.5.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;encoding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.1.13&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;netlify-cli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^3.13.7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dependencies:

&lt;ul&gt;
&lt;li&gt;apollo-server-lambda

&lt;ul&gt;
&lt;li&gt;We use &lt;code&gt;apollo-server-lambda&lt;/code&gt; instead of &lt;code&gt;apollo-server&lt;/code&gt; above. &lt;a href="https://www.npmjs.com/package/apollo-server-lambda"&gt;apollo-server-lambda&lt;/a&gt; is Apollo Server's AWS Lambda integration, and Netlify Functions uses AWS Lambda under the hood.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;graphql &lt;em&gt;(...but of course)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dev dependencies:

&lt;ul&gt;
&lt;li&gt;encoding&lt;/li&gt;
&lt;li&gt;netlify-cli&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our server app does not directly use the dev dependencies, but rather they enable Netlify to build the code. At the time of writing, without these, we'll get a build error &lt;code&gt;bash: yarn: command not found&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#graphqljs"&gt;
  &lt;/a&gt;
  graphql.js
&lt;/h4&gt;

&lt;p&gt;Here is our &lt;strong&gt;server code&lt;/strong&gt;. It has to be named &lt;code&gt;graphql.js&lt;/code&gt;. To keep things simple, we use the example from Apollo documentation.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apollo-server-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  type Query {
    hello: String
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;playground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// enable GraphQL Playground IDE on prod env&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Don't forget to add this!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#netlifytoml"&gt;
  &lt;/a&gt;
  netlify.toml
&lt;/h4&gt;

&lt;p&gt;Next, we need a &lt;strong&gt;Netlify build configuration&lt;/strong&gt; file called &lt;code&gt;netlify.toml&lt;/code&gt;. Leave the values blank for now.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;command = ""&lt;/span&gt;
  &lt;span class="s"&gt;functions = ""&lt;/span&gt;
  &lt;span class="s"&gt;publish = ""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can optionally add more options and/or configure additional environments, but these are the least we should have. &lt;/p&gt;

&lt;p&gt;These options are also available from the Netlify web UI settings. In case of conflicting values between the configuration file and the Netlify UI settings, the config file wins.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#option-1-no-build"&gt;
  &lt;/a&gt;
  Option 1: No build
&lt;/h2&gt;

&lt;p&gt;This is the most simple setup we could possibly have.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; /
├── functions/
│   └── graphql.js
├── static/
│   └── index.js &lt;span class="c"&gt;# can be empty but has to exist&lt;/span&gt;
├── netlify.toml
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;netlify.toml:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;command = "yarn"&lt;/span&gt;
  &lt;span class="s"&gt;functions = "functions"&lt;/span&gt;
  &lt;span class="s"&gt;publish = "static"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;package.json&lt;/code&gt; file is identical to the basic example above.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The only command that we run on build is &lt;code&gt;yarn&lt;/code&gt;, ie. install the dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;functions = "functions"&lt;/code&gt; means our function code exists in a directory called &lt;code&gt;functions&lt;/code&gt;. You can use any name, eg. &lt;code&gt;functions = "my-functions"&lt;/code&gt;, just make sure the function code exists there.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;publish = "static"&lt;/code&gt; means our static build files are in a directory called &lt;code&gt;static&lt;/code&gt;. We only use the serverless functions here and we are not serving any web page, but this directory is required. Add an empty &lt;code&gt;index.js&lt;/code&gt; file there. Again, you can replace this with any directory name.&lt;/li&gt;
&lt;li&gt;We simply serve our code; it is not compiled. So we have to use CommonJS syntax like regular Node.js apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple and straightforward. Ideal for simple servers.&lt;/li&gt;
&lt;li&gt;Faster build time. The free plan gives us 300 build minutes per month, so faster buid time means saving money.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Limited capability, eg. can't use ES6 imports or anything that requires compiling/transpiling.&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Netlify recently &lt;a href="https://www.netlify.com/blog/2021/04/02/modern-faster-netlify-functions/"&gt;announced an upcoming new bundler&lt;/a&gt; that—among other features—supports using ES modules syntax. If you just want to use &lt;code&gt;import&lt;/code&gt;, optional chaining, etc, you most likely won't need &lt;code&gt;netlify-lambda build&lt;/code&gt;. It is opt-in now and will be launched as public default next May. Unfortunately I don't have time to play with it now... let me know if you have tried it! 😁&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#option-2-with-build"&gt;
  &lt;/a&gt;
  Option 2: With build
&lt;/h2&gt;

&lt;p&gt;First, rename the directory containing our server file (&lt;code&gt;graphql.js&lt;/code&gt;) from &lt;code&gt;functions&lt;/code&gt; to &lt;code&gt;src&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; /
├── src/ &lt;span class="c"&gt;# rename from functions to src&lt;/span&gt;
│   └── graphql.js
├── static/
│   └── index.js
├── netlify.toml
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then change the command in &lt;code&gt;netlify.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;[build]&lt;/span&gt;
- command = "yarn"
&lt;span class="gi"&gt;+ command = "yarn build"
&lt;/span&gt;  functions = "functions"
  publish = "static"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We &lt;em&gt;don't&lt;/em&gt; change the functions directory here, the build/destination directory is still &lt;code&gt;functions&lt;/code&gt;, while our server source code now lives in &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are using &lt;a href="https://github.com/netlify/netlify-lambda"&gt;netlify-lambda&lt;/a&gt; for the build step. Install it and add these commands to &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; netlify-lambda
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; netlify-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  "scripts": {
&lt;span class="gi"&gt;+   "start": "netlify-lambda serve src",
+   "build": "netlify-lambda build src"
&lt;/span&gt;  },
  "devDependencies": {
    "encoding": "^0.1.13",
    "netlify-cli": "^3.13.7",
&lt;span class="gi"&gt;+   "netlify-lambda": "^2.0.3"
&lt;/span&gt;  },
  // ... no change to rest of file
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We add two commands, &lt;code&gt;serve&lt;/code&gt; (optional; you may use &lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt; instead) and &lt;code&gt;build&lt;/code&gt;. In both commands, we tell netlify-lambda to build from the &lt;code&gt;src&lt;/code&gt; directory—where our function code is.&lt;/li&gt;
&lt;li&gt;netlify-lambda knows where the source files are, but how does it know &lt;em&gt;where&lt;/em&gt; to build the code a.k.a. the destination folder? It reads our &lt;code&gt;netlify.toml&lt;/code&gt; file! 🎩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, modify our server code to use ES6 &lt;code&gt;import&lt;/code&gt; instead of the Node/CommonJS &lt;code&gt;require&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt; src/graphql.js
&lt;span class="gd"&gt;- const { ApolloServer, gql } = require('apollo-server-lambda');
&lt;/span&gt;&lt;span class="gi"&gt;+ import { ApolloServer, gql } from "apollo-server-lambda";
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can have more complex Lambda functions with transpiled modern features, imports, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a general rule, more dependencies = longer build and higher possibility of errors or incompatibilities. Only use the build step if necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#option-3-with-typescript"&gt;
  &lt;/a&gt;
  Option 3: With TypeScript
&lt;/h2&gt;

&lt;p&gt;We can use TypeScript with Netlify functions to take advantage of its type-checking and Intellisense features.&lt;/p&gt;

&lt;p&gt;First, install the dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @babel/preset-typescript typescript @types/node @types/aws-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then create a Babel config file and a TypeScript config file in our root directory.&lt;/p&gt;

&lt;p&gt;.babelrc&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;targets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugins&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/plugin-proposal-class-properties&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/plugin-transform-object-assign&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/plugin-proposal-object-rest-spread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;tsconfig.json&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;target&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;es5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;commonjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moduleResolution&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outDir&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exclude&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Your tsconfig file does not have to look like this. Just make sure the &lt;code&gt;outDir&lt;/code&gt; value matches the &lt;code&gt;functions&lt;/code&gt; value in our &lt;code&gt;netlify.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Rename our server file from &lt;code&gt;graphql.js&lt;/code&gt; to &lt;code&gt;graphql.ts&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This part is optional: I add a resolver function with a custom function using TS syntax. Our &lt;code&gt;hello&lt;/code&gt; query now takes an optional argument &lt;code&gt;name&lt;/code&gt;, which the server will &lt;em&gt;SHOUT!!!!&lt;/em&gt; back to us.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;import { ApolloServer, gql } from "apollo-server-lambda";
&lt;/span&gt;
+ const shout = (msg: string) =&amp;gt; {
&lt;span class="gi"&gt;+   return `${msg.toUpperCase()}!!!!`
+ }
&lt;/span&gt;
const typeDefs = gql`
  type Query {
&lt;span class="gi"&gt;+   hello(name: String): String
&lt;/span&gt;  }
&lt;span class="err"&gt;`;&lt;/span&gt;

&lt;span class="p"&gt;const resolvers = {
&lt;/span&gt;  Query: {
&lt;span class="gi"&gt;+   hello: (_parent, args) =&amp;gt; shout(`Hello ${args.name || 'serverless server'}`),
&lt;/span&gt;  },
&lt;span class="err"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;//&lt;/span&gt; ... no change to the rest of code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same as Option 2, plus TypeScript &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same as Option 2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#connecting-git-repo-to-netlify"&gt;
  &lt;/a&gt;
  Connecting Git repo to Netlify
&lt;/h2&gt;

&lt;p&gt;Sign up for a free Netlify account if you haven't got one. Push your code to a Git repository (Github, Gitlab, or Bitbucket).&lt;/p&gt;

&lt;p&gt;Go to Netlify Dashboard on &lt;a href="https://app.netlify.com"&gt;https://app.netlify.com&lt;/a&gt; and choose &lt;em&gt;"New site from Git"&lt;/em&gt;. &lt;em&gt;Continuous Deployment&lt;/em&gt; is enabled by default, so Netlify deploys your site every time you push to your repo.&lt;/p&gt;

&lt;p&gt;Once deployed, you can check the build process in the &lt;em&gt;Deploys&lt;/em&gt; section on &lt;code&gt;https://app.netlify.com/sites/YOUR-SITE-NAME/deploys&lt;/code&gt;. If your build fails (😿), the logs are available there. &lt;/p&gt;

&lt;p&gt;When the build completes successfully, your serverless server function will appear in the &lt;em&gt;Functions&lt;/em&gt; section under the name &lt;code&gt;graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uyrjreI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22so5au35tg602pgzf0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uyrjreI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22so5au35tg602pgzf0b.png" alt="Netlify dashboard - functions section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click to view its details and endpoint URL. If we enabled &lt;code&gt;playground&lt;/code&gt; config in our server code above, we can interact with our server directly by accessing GraphQL IDE from the endpoint URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdI9Zsqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grms5hz3e250hmefjupa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdI9Zsqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grms5hz3e250hmefjupa.png" alt="Netlify dashboard - function log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wanCfeiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytaajjj41mvor619m8mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wanCfeiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytaajjj41mvor619m8mw.png" alt="GraphQL IDE playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do various customizations (turn off automatic deploys, customize repo branch and base directory, and more) from &lt;em&gt;Site settings &amp;gt; Build &amp;amp; deploy&lt;/em&gt; on &lt;code&gt;https://app.netlify.com/sites/YOUR-SITE-NAME/settings/deploys&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Serverless cloud functions services like Netlify Functions enable us to get an API server live and running with no charge (to begin with), with little infrastructure and devOps knowledge.&lt;/p&gt;

&lt;p&gt;You can find all the code above in this repo. Fork it and build something fun!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ekafyi"&gt;
        ekafyi
      &lt;/a&gt; / &lt;a href="https://github.com/ekafyi/hello-graphql-server"&gt;
        hello-graphql-server
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Serverless GraphQL Server on Netlify Functions, 3 Ways&lt;/h1&gt;
&lt;p&gt;Sample repo for &lt;a href="https://dev.to/ekafyi/serverless-graphql-server-deploying-to-netlify-functions-3-ways-jfb" rel="nofollow"&gt;my DEV.to post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does what it says on the tin...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-build&lt;/code&gt; — graphql server function without build step&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;with-build&lt;/code&gt; — graphql server function with netlify-lambda build&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;with-ts&lt;/code&gt; — graphql server function with netlify-lambda build + TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/ekafyi/hello-graphql-server" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/417d890ba67c98ad5856b715343a61cdbf07d72b9bd5b79dd45d43de634c29ea/68747470733a2f2f7777772e6e65746c6966792e636f6d2f696d672f6465706c6f792f627574746f6e2e737667" alt="Deploy with Netlify"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If deploying from this repo, make sure you &lt;em&gt;set the base directory&lt;/em&gt; to the directory you want to use (eg. &lt;code&gt;no-build&lt;/code&gt;). See: &lt;a href="https://docs.netlify.com/configure-builds/get-started/#definitions" rel="nofollow"&gt;https://docs.netlify.com/configure-builds/get-started/#definitions&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Else&lt;/h2&gt;
&lt;p&gt;Or you can clone this repo and start a Git repo manually/locally from the directory you want to use.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/ekafyi/hello-graphql-server.git

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; hello-graphql-server/no-build

npm install

git init&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ekafyi/hello-graphql-server"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thank you for reading, and stay tuned for more beginner GraphQL learning attempts. 🤞🏽&lt;/p&gt;




&lt;p&gt;References&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/netlify/netlify-lambda"&gt;https://github.com/netlify/netlify-lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/overview/"&gt;https://docs.netlify.com/site-deploys/overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration"&gt;https://docs.netlify.com/configure-builds/file-based-configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>graphql</category>
      <category>netlifyfunctions</category>
      <category>apollo</category>
    </item>
    <item>
      <title>Use RSS feed and "read later" apps to encourage learning</title>
      <author>Dan V</author>
      <pubDate>Fri, 09 Apr 2021 17:05:48 +0000</pubDate>
      <link>https://dev.to/dan_v/use-rss-feed-and-read-later-apps-to-encourage-learning-55lp</link>
      <guid>https://dev.to/dan_v/use-rss-feed-and-read-later-apps-to-encourage-learning-55lp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I recently discovered the magical and somewhat retro world of RSS feeds. Remember that little orange "wifi" icon that used to live next to blog titles? Yes, that's what we're talking about. Very 00s.&lt;/p&gt;

&lt;p&gt;I'm here to tell you why RSS is still useful today, particularly for a developer in the everchanging tech world.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-rss"&gt;
  &lt;/a&gt;
  What is RSS?
&lt;/h1&gt;

&lt;p&gt;RSS stands for "Really Simple Syndication" (or "RDF Site Summary". Aren't acronyms fun?).&lt;/p&gt;

&lt;p&gt;Put simply, it's a way for websites to allow users to subscribe to their content, most commonly used in blogs.&lt;/p&gt;

&lt;p&gt;RSS has fallen out of vogue in the past 10 years with the rise of social media. but I believe it can still be a very useful tool, particularly in the dev world.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-should-i-care"&gt;
  &lt;/a&gt;
  Why should I care?
&lt;/h1&gt;

&lt;p&gt;As developers, particularly if you're a newbie, there is so much to learn and to keep on top of. How do we orchestrate the journey of those streams of information from disparate websites and into our brains?&lt;/p&gt;

&lt;p&gt;That's where RSS feed apps come in. RSS feed apps can help you keep up to date with tech blogs, release notes, video tutorials series, and even email-only newsletters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rss-feed-apps"&gt;
  &lt;/a&gt;
  RSS feed apps
&lt;/h1&gt;

&lt;p&gt;There are plenty of apps available out there, each with their pros and cons. I've been checking out two of the most popular, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//feedly.com"&gt;Feedly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inoreader.com"&gt;Inoreader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They look a bit like this:&lt;/p&gt;

&lt;p&gt;Feedly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkviDE-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qm6elk7c5djrnqqep1q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkviDE-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qm6elk7c5djrnqqep1q.PNG" alt="Feedly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inoreader:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlrTKHre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5a42xcc4w0jqyf0tw48.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlrTKHre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5a42xcc4w0jqyf0tw48.PNG" alt="Inoreader"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;I have blocked any ads for posting here, but I usually allow them to help support the developers.&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Search for a topic you want to read about and follow any feeds that look interesting.&lt;/li&gt;
&lt;li&gt;Alternatively, enter a URL for a website you want to follow, or use your chosen app's browser extension (if available) to add sites to your feed when you visit them.&lt;/li&gt;
&lt;li&gt;The feed will appear in your feeds list and you'll be able to start browsing through a list of previous posts from that website straight away.&lt;/li&gt;
&lt;li&gt;Over time, you'll see new content from your feeds coming through, like an email inbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;Well, that's not &lt;i&gt;it&lt;/i&gt; it. There is plenty more you can do with these apps, such as setting up rules for highlighting specific content, sharing reading lists with teams, and much much more.&lt;/p&gt;

&lt;p&gt;But to start with, just by following a few feeds, you can now easily stay up-to-date with React's release notes, or your favourite tech guru's blog, or a YouTube tutorial series you've been following. All in one place!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#which-app-should-i-use"&gt;
  &lt;/a&gt;
  Which app should I use?
&lt;/h1&gt;

&lt;p&gt;It's best to just go out and try a few and find out what you prefer. However, here are a few initial thoughts on the two RSS feed apps I've been trying out:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedly"&gt;
  &lt;/a&gt;
  Feedly
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Friendly, helpful UI with plenty of useful action buttons like "save for later" and "mark as read".&lt;/li&gt;
&lt;li&gt;Pretty design. Looks like a magazine.&lt;/li&gt;
&lt;li&gt;Intuitive search UI for finding new feeds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#inoreader"&gt;
  &lt;/a&gt;
  Inoreader
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design is more functional and compact.&lt;/li&gt;
&lt;li&gt;Has some really nice features, like "send to device".&lt;/li&gt;
&lt;li&gt;Seems to be able to retrieve images for articles more easily than Feedly.&lt;/li&gt;
&lt;li&gt;Can subscribe to email newsletter subscriptions, without all the inconvenience of them entering your actual email inbox!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are plenty of other apps available, these are just the two I've spent most time with, and arguably the most popular. They're both great, and I am continuing to trial and compare them.&lt;/p&gt;

&lt;p&gt;Now, often RSS feed apps won't be able to retrieve the website's full content, and will encourage you to visit the website itself instead. To me, that's fine. The app is serving the purpose of notifying me about new content, which is the prime purpose of using an RSS feed app.&lt;/p&gt;

&lt;p&gt;But reading content without the usual guff and bulk that websites often come with can be really helpful. Furthermore, having a place outside of your browser tabs to safely store a list of reading materials for later is invaluable. This is why I use a reading app alongside an RSS feed app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reading-or-read-later-apps"&gt;
  &lt;/a&gt;
  Reading (or "read later") apps
&lt;/h1&gt;

&lt;p&gt;Browsers like Firefox and Opera come with a built-in reading mode. You can even turn on Chrome's experimental reading list feature (go to chrome://flags and search "reading list"). But for ease of use, I like to use &lt;a href="https://getpocket.com"&gt;Pocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pocket looks a little like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKn7fMl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy0gu7tlqakrgkgsh8x6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKn7fMl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy0gu7tlqakrgkgsh8x6.PNG" alt="Pocket (desktop)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnSdXMfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43qitwmdhpvye7rhsfpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnSdXMfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43qitwmdhpvye7rhsfpm.png" alt="Pocket (mobile)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pocket is a really handy application for easily saving website content to read later. The reading view simplifies content, allowing you to focus on text and images. It's like reading an eBook on a Kindle.&lt;/p&gt;

&lt;p&gt;A popular alternative to Pocket is &lt;a href="https://www.instapaper.com"&gt;Instapaper&lt;/a&gt;, although I haven't had the pleasure of trying it out yet. I'm sure there are plenty others too.&lt;/p&gt;

&lt;p&gt;RSS feeder apps do generally come with their own reading mode features, but they don't always work perfectly. In any case, I find it helpful to separate out a few articles I &lt;i&gt;actually&lt;/i&gt; want to read into my reading app, and let my RSS feed app just deal with offering new content to me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-it-simple"&gt;
  &lt;/a&gt;
  Keep it simple
&lt;/h1&gt;

&lt;p&gt;On that point, and going back to RSS, I would advise against following too many feeds to start with. &lt;/p&gt;

&lt;p&gt;It may be tempting to click "follow" on as many feeds as possible. I did that at first, but this was instantly overwhelming and unhelpful. So many unread articles!&lt;/p&gt;

&lt;p&gt;Instead, be selective. Think YAGNI ("You Aren't Gonna Need It"). Or perhaps YARNI ("You Aren't Gonna Read It").&lt;/p&gt;

&lt;p&gt;Instead, I suggest following a few feeds you're genuinely interested in following, and building up gradually.&lt;/p&gt;

&lt;p&gt;Similarly, don't add every single article you see to Pocket. Find some you're actually going to read, then make sure you read them before adding too many more. Remember: "the road to hell is paved with good intentions".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;RSS feed apps are a useful tool for any developer. They're not the be all and end all, and you will likely want to utilise Twitter (bleugh!) if you're serious about staying up-to-date with all the goings-on in the tech world. But using these tools can certainly help automate your knowledge-absorbing process.&lt;/p&gt;

&lt;p&gt;Do you use an RSS reader or a reading app? What are your favourite apps to use, and why? Are there any other methods of learning and keeping up-to-date that you helpful? Comment below!&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Disclaimer: I am in no way affiliated with any of the apps mentioned in this article, they're just a few I've been trying out or heard of.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Also: this is my first proper blog post! Any constructive feedback is much appreciated.&lt;/i&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>learning</category>
      <category>rss</category>
      <category>reading</category>
    </item>
  </channel>
</rss>
