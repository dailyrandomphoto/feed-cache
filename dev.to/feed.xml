<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Distributed messaging with NATS</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 20 Jan 2022 10:45:52 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/distributed-messaging-with-nats-3jg3</link>
      <guid>https://dev.to/karanpratapsingh/distributed-messaging-with-nats-3jg3</guid>
      <description>&lt;p&gt;Recently, I was building an application where I wanted to take event-driven approach for async communication between the microservices. Usually, I would use &lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;, &lt;a href="https://www.rabbitmq.com/tutorials/tutorial-one-go.html"&gt;RabbitMQ&lt;/a&gt;, &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; or a managed solution like &lt;a href="https://aws.amazon.com/sns/"&gt;AWS SNS&lt;/a&gt;, &lt;a href="https://cloud.google.com/pubsub/"&gt;Google Cloud Pub/Sub&lt;/a&gt; but this time I wanted to keep my implementation easy and cost minimal yet not affect my scalability or increase technical debt for the future. After a few hops on &lt;a href="//stackshare.io"&gt;StackShare&lt;/a&gt;, I found &lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; as a popular alternative and after trying it out, I really liked it. That evening I migrated everything from Apache Kafka to NATS. So, in this article, we'll learn what NATS is and how to get started with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nats"&gt;
  &lt;/a&gt;
  What is NATS?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16BnSNlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nats.io/img/logos/nats-horizontal-color.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16BnSNlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nats.io/img/logos/nats-horizontal-color.png" alt="nats" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NATS is an &lt;a href="https://github.com/nats-io/nats-server"&gt;open-source&lt;/a&gt; messaging system. It provides a simple, secure, and performant communications system for digital systems, services, and devices. The core design principles of NATS are performance, scalability, and ease of use. Its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify the design and operation of modern distributed systems. It is written in &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; and used by companies like Tesla, Paypal, Walmart, and many others. NATS is also part of the Cloud Native Computing Foundation (&lt;a href="https://www.cncf.io/"&gt;CNCF&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For more info checkout &lt;a href="https://nats.io"&gt;NATS.io&lt;/a&gt; or watch this fantastic &lt;a href="https://www.youtube.com/watch?v=lHQXEqyH57U"&gt;Keynote&lt;/a&gt; by its creator &lt;a href="https://github.com/derekcollison"&gt;Derek Collison&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;Here are some of the features that I found interesting for my use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Highly performant&lt;/li&gt;
&lt;li&gt;Zero downtime scaling&lt;/li&gt;
&lt;li&gt;Self healing and resilient&lt;/li&gt;
&lt;li&gt;Isolated and secure by default&lt;/li&gt;
&lt;li&gt;Supports edge, cloud or hybrid deployments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;p&gt;Before we start with any code, let's see what we will implement. We will try to make a simple pub/sub example like shown in the diagram below, and we will use different languages and pretend they are different services.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTIa4vs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aidayfv61l5bhhrcjvwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTIa4vs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aidayfv61l5bhhrcjvwy.png" alt="demo" width="880" height="672"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setup-nats-server"&gt;
  &lt;/a&gt;
  Setup NATS server
&lt;/h4&gt;

&lt;p&gt;Before anything, we'll need to set up a NATS server. We can do it multiple ways as shown below. Personally, I like to use docker but feel free to set it up however you want. We can also use &lt;code&gt;demo.nats.io&lt;/code&gt; which is a demo server provider buy NATS authors (please don't use it for production!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's our &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nats&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nats&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nats:2.7.0-alpine&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4222:4222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can simply use &lt;code&gt;docker run&lt;/code&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -p 4222:4222 nats:2.7.0-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I'm using macOS, I installed it with &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install nats-server
$ nats-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Checkout &lt;a href="https://docs.nats.io/running-a-nats-service/introduction/installation"&gt;official docs&lt;/a&gt; for more installation options.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[18193] 2022/01/20 16:00:05.581377 [INF] Starting nats-server
[18193] 2022/01/20 16:00:05.581992 [INF]   Version:  2.7.0
[18193] 2022/01/20 16:00:05.581996 [INF]   Git:      [not set]
[18193] 2022/01/20 16:00:05.582005 [INF]   Name:     ND2VU7MH7J6RU6RS6JUKKPPCTMRPY35LRBRFT3NLENDZI3TL33PVRR3P
[18193] 2022/01/20 16:00:05.582008 [INF]   ID:       ND2VU7MH7J6RU6RS6JUKKPPCTMRPY35LRBRFT3NLENDZI3TL33PVRR3P
[18193] 2022/01/20 16:00:05.582791 [INF] Listening for client connections on 0.0.0.0:4222
[18193] 2022/01/20 16:00:05.583066 [INF] Server is ready
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#client"&gt;
  &lt;/a&gt;
  Client
&lt;/h4&gt;

&lt;p&gt;Now that our NATS server is running, we'll be using &lt;a href="https://github.com/nats-io/nats.go"&gt;Go&lt;/a&gt; and &lt;a href="https://github.com/nats-io/nats.js"&gt;Node.js&lt;/a&gt;  clients to connect to it for a simple demonstration. Not familiar with Go or Node? Don't worry NATS has clients available in &lt;a href="https://nats.io/download"&gt;over 40 languages&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;First, let's init our Go module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init example
$ go get github.com/nats-io/nats.go/@latest
$ touch main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Go code will act as the subscriber.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/nats-io/nats.go"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"my_subject"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscribed to"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's init our Node project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
$ npm install nats
$ touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is our JavaScript code that will act as the publisher.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StringCodec&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_subject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:4222&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StringCodec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;servers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;codec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sent...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drain&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will subscribe to the &lt;code&gt;my_subject&lt;/code&gt; subject by running our Go code first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
Subscribed to my_subject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, We will run our JavaScript code, which publishes &lt;code&gt;Hello there!&lt;/code&gt; message on &lt;code&gt;my_subject&lt;/code&gt; subject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node index.js
Sent...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there it is! We can see the message being received by our subscriber. NATS makes this so simple, yet so powerful!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Subscribed to my_subject
Received: Hello there!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We haven't even scratched the surface in this article, NATS also has a built-in distributed persistence system called &lt;a href="https://docs.nats.io/nats-concepts/jetstream"&gt;JetStream&lt;/a&gt; which takes it to a whole another level!&lt;/p&gt;

&lt;p&gt;Lastly, I think NATS is a fantastic technology, it scales well from a hobby project to production ready distributed applications. And best of all it's quite easy to get started. I hope this article was helpful in getting you interested!&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>backend</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Introducing a new tool - DEV Backup</title>
      <author>SnowBit</author>
      <pubDate>Thu, 20 Jan 2022 10:39:03 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</link>
      <guid>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a passionate young developer having the intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with an amazing tool for my fellow writers on this platform. Probably, you all write articles and post on DEV.to and want to keep a backup of your posts and articles on GitHub and doing that manually becomes somewhat tedious work. &lt;/p&gt;

&lt;p&gt;Here comes &lt;strong&gt;&lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/strong&gt; that backup/saves any post on &lt;strong&gt;DEV Community&lt;/strong&gt; in your GitHub Repository in just a few clicks. Let's give it a try 🌟 - &lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xspv9Vbf9qI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How could you be certified with AWS DevOps Professional? </title>
      <author>Igor Soroka</author>
      <pubDate>Thu, 20 Jan 2022 10:27:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-could-you-be-certified-with-aws-devops-professional-1eah</link>
      <guid>https://dev.to/aws-builders/how-could-you-be-certified-with-aws-devops-professional-1eah</guid>
      <description>&lt;p&gt;Last year, I felt that it was time to have more certifications. I have a Developer Associate certificate, so getting a Solutions Architect Associate one should not be an issue. I was wrong. It took time to get into the flow of the studying. Passing exams is a skill you should develop through an effective routine and development mindset. &lt;/p&gt;

&lt;p&gt;Recently I went to certification on DevOps professional. My background is in Development mostly. However, I spent my time setting up environments and infrastructure during recent years. It is worth mentioning that my typical stack includes AWS Lambda, DynamoDB, S3, API Gateway, and SNS/SQS. Here is my list of tips and materials for passing your DevOps professional certificate. You could combine them in any order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General recommendations&lt;/strong&gt;. Do not underestimate the content, syllabus, and time during the exam preparation. Sitting on the exam for 3 hours could be challenging. I took the exam in the Pearson VUE accredited test center. I got two A4 papers for writing. With the online option, you will not have a chance to write anything. The notes during the exam helped to map the question and refresh it during the review part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-sysops-administrator"&gt;
  &lt;/a&gt;
  Pass SysOps Administrator
&lt;/h2&gt;

&lt;p&gt;Try to focus on on monitoring, deployments. This exam will benefit the parts regarding deployments, auditing, and monitoring. Take 1-2 months for the DevOps preparation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-whitepapers"&gt;
  &lt;/a&gt;
  Read whitepapers
&lt;/h2&gt;

&lt;p&gt;I was skipping them during associate ones. They build the correct mindset towards implementation on how to follow AWS practices. I advise you to read them before sleep. Here is the official list&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j5TgVfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpg2c7qagif4qg4z1b9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j5TgVfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpg2c7qagif4qg4z1b9d.jpg" alt="whitepapers list" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-course"&gt;
  &lt;/a&gt;
  Main Course
&lt;/h2&gt;

&lt;p&gt;Complete one course with Labs. Any platform will work. There are plenty of them, but the most accessible ones are ACloudGuru or CloudAcademy. Making quick hand-written notes is helpful on the last days before the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmJBov_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssyrap8ihgt910mdb7wx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmJBov_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssyrap8ihgt910mdb7wx.jpg" alt="exam note example" width="612" height="792"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-skill-builder"&gt;
  &lt;/a&gt;
  Use Skill Builder
&lt;/h2&gt;

&lt;p&gt;It is a new official online learning platform from the AWS itself. The quality of the content is outstanding. One drawback is that you need to register but it is for free. &lt;/p&gt;

&lt;p&gt;I recommend these courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting Started with DevOps on AWS&lt;/li&gt;
&lt;li&gt;AWS Certification Official Practice Question Sets (sample test is free now for any of the exams)&lt;/li&gt;
&lt;li&gt;Exam Readiness: AWS Certified DevOps Engineer - Professional&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#train-yourself"&gt;
  &lt;/a&gt;
  Train yourself
&lt;/h2&gt;

&lt;p&gt;Sit the actual 75 questions in one go (TutorialsDojo practice exams or the one at the end of the course). Do not be demotivated by the results of the practice exams. &lt;/p&gt;

&lt;p&gt;Topics and services to concentrate on: Beanstalk, Config, Trusted Advisor, Auto Scaling, CloudFront, CodeDeploy, Systems Manager, S3, Logging, CloudTrail, CodeCommit.&lt;/p&gt;

&lt;p&gt;If you have a couple of days before an exam - concentrate on the most complicated areas. Read tutorialsdojo's cheatsheets. They are enormously helpful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Config (&lt;a href="https://tutorialsdojo.com/aws-config/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CodeDeploy (&lt;a href="https://tutorialsdojo.com/aws-codedeploy/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deployment tools comparison (&lt;a href="https://tutorialsdojo.com/elastic-beanstalk-vs-cloudformation-vs-opsworks-vs-codedeploy/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Installation of CodeDeploy Agent (&lt;a href="https://www.youtube.com/watch?v=P4K3HB8TNJo"&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Systems Manager (&lt;a href="https://tutorialsdojo.com/aws-systems-manager/"&gt;cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#physical-aspect"&gt;
  &lt;/a&gt;
  Physical aspect
&lt;/h2&gt;

&lt;p&gt;Sleep well, do physical exercises, spend time outdoors. Take a break during the exam for standing and stretching. Avoid consuming too much caffeine and sugar especially in the last week before the exam. In the end, all of these factors accumulates into tiredness and lack of concentration. For improving focus, it is nice to do meditation or yoga.&lt;/p&gt;

&lt;p&gt;The exam is challenging, but you could become an AWS-certified professional with extensive preparation and discipline. If you could learn at least one lesson from this article, it would mean for me that it was worth sharing. Thanks for reading me! Follow me on Twitter also:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2v9HFv-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1453302847592976384/girU0zFG_normal.jpg" alt="Igor Soroka profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Igor Soroka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/grenguar"&gt;@grenguar&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      After watching cloud educational content on 2x speed, I noticed that every instructor sounds sad at normal playback.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:21 AM - 17 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1483021717874388994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>aws</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Concurrency In JavaScript</title>
      <author>Kinanee Samson</author>
      <pubDate>Thu, 20 Jan 2022 09:54:25 +0000</pubDate>
      <link>https://dev.to/kalashin1/concurrency-in-javascript-4oho</link>
      <guid>https://dev.to/kalashin1/concurrency-in-javascript-4oho</guid>
      <description>&lt;p&gt;JavaScript our dearly beloved programming is termed asynchronous and this is one of the things we love about it. JavaScript has an api for handling concurrent tasks, as is required of most high level languages. There is a neat way that JavaScript achieves this, which is quite different from what you'd be used to in Java or C. In this article we are going to explore this amazing part of JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;Often there is a need for a program to be able to execute certain commands out of the normal flow, without breaking other parts of the program. Much like you can see and listen at the same time, if we examine more closely you will find out these two phenomenal occur in parallel and at the same time, the collective result of both "programs" makes what's happening more clear to us. Similarly we as software engineers desire that our programs should behave in like manner. &lt;/p&gt;

&lt;p&gt;It is very normal for a computer cpu to expose more than one core on which we can execute or run commands, JavaScript as a language was not designed to utilize more than one core, JavaScript code normally runs in a single thread manner where one statement is executed and then the next. This approach is logical, however there is often a need to "move" on to the next without waiting for the immediate to complete, going out of the normal flow as we pointed out earlier.&lt;/p&gt;

&lt;p&gt;If we could not then our user would not get a good user experience, certain things like fetching data could cause glitches especially if your internet is not fast, thank God this isn't the case and we handle data fetching and other like actions asynchronously. We will now proceed to understanding how JavaScript implements its concurrency model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queue-stack-heap"&gt;
  &lt;/a&gt;
  Queue, Stack, Heap
&lt;/h2&gt;

&lt;p&gt;Every JavaScript program is a self isolated process, it has its own queue a term we will look at shortly, stack another term we will look at, and its heap. The heap is a largely unstructured area of memory allocated to the objects in our code. Let's think of the heap as an area where messangers on horseback wait before they get to deliver their messages. &lt;/p&gt;

&lt;p&gt;When it gets to the turn of a messenger they unmount and move to &lt;code&gt;queue&lt;/code&gt;.  This area they are attended to in a first in first out manner, when each messenger dispatches their message, there is usually a reaction to that message, which in our case is a function call, for every message in the queue there is a function associated with it, that function is called when the message is processed out of the queue.&lt;/p&gt;

&lt;p&gt;Each function call creates a stack frame that contains the statement and expression in the function, when that function returns a value or void, its frame is then popped out, the next function will begin executing, if we call a function inside another function a frame will be created for each. The frame for the nested function sits on top of the frame for the function that called it, when the nested function is done executing it will return and get popped of and the main function will continue executing or return and get popped off. The items in stack are treated in a last in first out format. The stack is a data structure that holds the frame for each function, we can deduce that this is a synchronous process, so how is concurrency achieved with the stack and the queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-loop"&gt;
  &lt;/a&gt;
  Event Loop
&lt;/h2&gt;

&lt;p&gt;The event loop is simply a loop that iterates through the queue and processes any message if any is in the queue. Since we are in a JavaScript development environment messages could also be added to the queue as a result of events happening in the DOM. The event loop does not really care, its job is to process the messages in the queue. Its js interesting to remember that a stack frame which is in essence a function call can emit an event that adds a new message to the queue or it can directly add a message to the queue. So when the result of an expression might take long, there are APIs that allow us to add that result as a message when it is available to the queue, we go on processing other things without waiting. This is the basis of callback based code. This is also how setTimeout and setInterval adds messages asynchronously to the queue. When we write a setTimeout function a message is added to the queue after the specified delay in milisecs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delayed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hello gets logged because it is immediately added to the queue and since there is no other task waiting to be added to the queue except of course the one from the setTimeout, which is added immediately, there's no 100ms delay guarantee that the message will be added to the queue, rather this is just a maximum delay if there are other messages in the queue waiting to be processed, however if this is not the case and there are no messages waiting in the queue, the task from the SetTimeout is added immediately ignoring the delay.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// do something with place&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// something&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;london&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// call back based code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example above when the first function is executed  a new stack frame is created, we create a variable and then use setTimeout  to call the function passed in. as the second argument and give it the variable we created earlier when, if the first function has to take some time before completing the action would have to wait, but our code does not have to wait and it moves on to processing the next statement, when the result is ready &lt;code&gt;action&lt;/code&gt; is called with the &lt;code&gt;result&lt;/code&gt; passed in as an argument to the function. A new stack frame is created for it and the next message in the queue is processed if any. &lt;/p&gt;

&lt;p&gt;The above process, the way the event loop as described above is synchronous, the event loop is usually expressed in terms of a while loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForMessage&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
 &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processNextMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we pass in 0, as the delay this is does not always mean that the message will be added to the queue in zero seconds. The message will only be added to the queue when other messages in the queue has been processed. You should know that each stack frame must run to completion before another can be added on top of it. If you want to know more about asynchronous JavaScript i think you should read this &lt;a href="https://dev.to/kalashin1/mastering-asynchronous-operations-in-javascript-1712"&gt;article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Install Kodi on Ubuntu</title>
      <author>Ramashankar</author>
      <pubDate>Thu, 20 Jan 2022 08:42:05 +0000</pubDate>
      <link>https://dev.to/okayrama/how-to-install-kodi-on-ubuntu-7lg</link>
      <guid>https://dev.to/okayrama/how-to-install-kodi-on-ubuntu-7lg</guid>
      <description>&lt;p&gt;This guide will teach you to install Kodi on your Ubuntu Devices. Many of you may not know what Kodi is? Kodi is a free and open source media player, previously known as XBOX Media Centre. With the help of Kodi, You can watch popular Movies, TV Shows, Seasons and Episodes, Music &amp;amp; Audiobooks, Music Videos, Live TV and PVR, Pictures &amp;amp; Comic Books for free. It also &lt;a href="https://thedroidgenome.com/how-to/install-kodi-on-ubuntu/"&gt;runs on Debian, Linux Mint and other operating systems&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-kodi-on-ubuntubased-linux-distros-via-ppa"&gt;
  &lt;/a&gt;
  Install Kodi on Ubuntu-based Linux distros via PPA
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afBr3KR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fthbzf8tkmhxrxxua9yl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afBr3KR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fthbzf8tkmhxrxxua9yl.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Kodi on Ubuntu-based Linux distros via PPA. Install Kodi by running following command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo add-apt-repository ppa:team-xbmc/ppa&lt;br&gt;
sudo apt-get update&lt;br&gt;
sudo apt-get install kodi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start Kodi by running the following command in Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kodi&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kodi-repositories"&gt;
  &lt;/a&gt;
  Kodi Repositories
&lt;/h2&gt;

&lt;p&gt;These are following Build Types of Kodi&lt;/p&gt;

&lt;p&gt;ppa:team-xbmc/ppa - Final release builds&lt;br&gt;
ppa:team-xbmc/unstable - Betas and release candidates&lt;br&gt;
ppa:team-xbmc/xbmc-nightly - Nightly builds&lt;/p&gt;

&lt;p&gt;Install the repository of choice by replacing the build PPA.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install software-properties-common&lt;br&gt;
sudo add-apt-repository -ysP team-xbmc/[build type]&lt;br&gt;
sudo apt install kodi&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the help of this guide, we learnt how can we install Kodi on Ubuntu. Feel free to comment down your issues, I will be more than happy to help you.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>How to Develop a Smartphone Game from the Scratch?</title>
      <author>jason0300</author>
      <pubDate>Thu, 20 Jan 2022 08:12:37 +0000</pubDate>
      <link>https://dev.to/all_tech/how-to-develop-a-smartphone-game-from-the-scratch-4665</link>
      <guid>https://dev.to/all_tech/how-to-develop-a-smartphone-game-from-the-scratch-4665</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLztN0mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8veu9cm3z1e3f87tzu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLztN0mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8veu9cm3z1e3f87tzu.jpg" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
Gaming for smartphones has expanded its market coverage like a wildfire. From horror to survival, gaming apps are being downloaded by millions of people every month. Now, developers are also seeing games as an opportunity to make good money. Ways such as in-app purchases, premium subscriptions, or app prices are providing game developers good income if the game has potential. Now, how to build a game that has enough potential to grow in the market? That’s the question we will answer here.&lt;/p&gt;

&lt;p&gt;Furthermore, we are discussing how to design a smooth game development process from scratch. We will discuss every crucial element of the game development process from developing an idea to marketing the app. If you think your questions can be answered in this blog, stick with us until the end!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-of-developing-a-smartphone-game"&gt;
  &lt;/a&gt;
  Process of developing a smartphone game
&lt;/h2&gt;

&lt;p&gt;Without further ado, let’s go through each step to prepare the proper game development process design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-an-idea"&gt;
  &lt;/a&gt;
  1. An idea
&lt;/h2&gt;

&lt;p&gt;Every process begins with an idea. Now it all depends on what users like to play. Take PUBG for example. When it came into the market, it influenced millions of players instantly and grew with an unmatchable speed.&lt;/p&gt;

&lt;p&gt;With such popularity, it became evident that multiplayer survival games were the future. Thus, expert &lt;a href="https://appinventiv.com/on-demand-app-development"&gt;on-demand gaming app developers&lt;/a&gt; from many prestigious organizations released survival co-op and multiplayer games with various concepts. These games are also defined under the Battle Royale category.&lt;/p&gt;

&lt;p&gt;Now, the message is, that you need to find an idea that you think users will love. It can be a zombie killer storyline or a superhero team-up. It’s all about how creative and influencing you can get.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-prepare-the-budget"&gt;
  &lt;/a&gt;
  2. Prepare the budget
&lt;/h2&gt;

&lt;p&gt;Now, the entire game development process is divided into three parts-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pre-development&lt;/li&gt;
&lt;li&gt;During the development&lt;/li&gt;
&lt;li&gt;Post-development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the pre-development budget planning includes tasks like preparing a budget for hiring, technology expenses, API costs, time investments, platform-specific or &lt;a href="https://www.mobileappdaily.com/best-hybrid-app-frameworks"&gt;hybrid app development frameworks&lt;/a&gt; that you are using, and more. During the development, costs such as game testing occur. Once the game development process is done, game marketing and publishing take the main share of costs. It has to be understood that without a good marketing strategy, the success of the smartphone game that you developed can be considered compromised. Your budget will have the following elements influencing it-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No. of people working on the process&lt;/li&gt;
&lt;li&gt;No. of hours consumed in the development&lt;/li&gt;
&lt;li&gt;Maintenance of the gaming app&lt;/li&gt;
&lt;li&gt;Any modifications or updates&lt;/li&gt;
&lt;li&gt;Gaming app marketing platforms&lt;/li&gt;
&lt;li&gt;Target operating systems&lt;/li&gt;
&lt;li&gt;Target countries where you will publish the game&lt;/li&gt;
&lt;li&gt;Licensing costs, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-build-the-prototype"&gt;
  &lt;/a&gt;
  3. Build the prototype
&lt;/h2&gt;

&lt;p&gt;It is always ideal to build a prototype first to have an idea of the final product that you are going to get. You can use any easy &lt;a href="https://www.gamedeveloper.com/disciplines/develop-a-mobile-game-the-easy-way-use-a-framework"&gt;gaming framework&lt;/a&gt; to conceptualize the prototype. Now, there are many low-end development frameworks that will let you build the gaming app without the least requirements of manual coding. You can also skip the prototyping phase and begin the development of the actual game, especially if you are building a small game. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-test-your-game-properly"&gt;
  &lt;/a&gt;
  4. Test your game properly
&lt;/h2&gt;

&lt;p&gt;With each phase that you finish developing, test it to make sure that there is no error or glitch left in the game. The glitch can ruin all the progress of the player and spoil their experience. The QA team should be instructed to explore the game through every possible way of playing it to find all the possible bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-market-the-app-on-multiple-platforms"&gt;
  &lt;/a&gt;
  5. Market the app on multiple platforms
&lt;/h2&gt;

&lt;p&gt;If your budget allows, you should always go for the omnichannel marketing strategy. Omnichannel marketing strategies include advertising the game on print media, audio-video media, and the internet. It helps you in covering more markets. Moreover, you can also use social media marketing techniques like hiring influencers or advertising the game on huge pages and groups to attract as many people as possible to your game.&lt;/p&gt;

&lt;p&gt;Some marketing strategies like using hashtags to expand your reach might not even cost you anything. It’s always a good idea to build a social media presence from the moment you finalize the idea as it takes time to grow social media platforms originally. Moreover, you also require a regular routine of posting interesting content to grow your social media outreach as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-update-and-maintain-games-regularly"&gt;
  &lt;/a&gt;
  6. Update and maintain games regularly
&lt;/h2&gt;

&lt;p&gt;The job is not over even after the game is published. The main work is making sure it remains interesting and playable for users. Thus, it is always a good idea to bring new ideas occasionally and update the game to give players new experiences. It keeps the curiosity and fun alive. Moreover, as technologies evolve and new OS versions or devices get released in the market, your gaming app has to keep up. Thus, make sure you maintain it and update it regularly to make it suitable for new OS or devices.&lt;/p&gt;

&lt;p&gt;Well, that’s it for the process of developing a gaming app from scratch. Hopefully, it was useful. Until next time, Happy Programming!&lt;/p&gt;

</description>
      <category>gamedev</category>
    </item>
    <item>
      <title>View this solution on Exercism</title>
      <author>Schawnnara</author>
      <pubDate>Thu, 20 Jan 2022 07:54:22 +0000</pubDate>
      <link>https://dev.to/schawnnaraj/view-this-solution-on-exercism-2cn9</link>
      <guid>https://dev.to/schawnnaraj/view-this-solution-on-exercism-2cn9</guid>
      <description>&lt;p&gt;&lt;a href="https://exercism.org/tracks/bash/exercises/rectangles/solutions/SchawnnahJ"&gt;https://exercism.org/tracks/bash/exercises/rectangles/solutions/SchawnnahJ&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning Go by examples: part 9 - Use HomeBrew &amp; GoReleaser for distributing a Golang app</title>
      <author>Aurélie Vache</author>
      <pubDate>Thu, 20 Jan 2022 07:18:22 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-9-use-homebrew-goreleaser-for-distributing-a-golang-app-44ae</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-9-use-homebrew-goreleaser-for-distributing-a-golang-app-44ae</guid>
      <description>&lt;p&gt;As we have seen in &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a"&gt;Learning Go by examples: part 8 - Automatically cross-compile &amp;amp; release your Go app&lt;/a&gt; article, we can create an app and cross-compile automatically. It's cool but I think we can go more deeper.&lt;/p&gt;

&lt;p&gt;It's cool to create awesome tools but it's better to provide a way to install them easily.&lt;/p&gt;

&lt;p&gt;What do you think if Mac users can install and update our app through HomeBrew?&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to allows users to install your apps, hosted in a GitHub repository, through HomeBrew, starting from my GopherSay application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  HomeBrew
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AfXDGfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u31j5h3p4fkb194gxgi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AfXDGfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u31j5h3p4fkb194gxgi3.png" alt="HomeBrew" width="880" height="1325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Homebrew is the missing package manager for macOS. It installs packages with a simple command like &lt;code&gt;brew install curl&lt;/code&gt;. &lt;strong&gt;Homebrew taps&lt;/strong&gt; are third-party repositories. By creating a Homebrew tap &lt;strong&gt;formula&lt;/strong&gt;, users can install and use your repository.&lt;/p&gt;

&lt;p&gt;Taps are external sources of Homebrew formula, casks and/or external commands. They can be created by anyone to provide their own formula, casks and/or external commands to any Homebrew user.&lt;/p&gt;

&lt;p&gt;For example, if you want to install &lt;strong&gt;curl&lt;/strong&gt; app through HomeBrew, you just need to enter the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Curl app is on the core HomeBrew tap so HomeBrew found the tap and install the tool in your computer.&lt;/p&gt;

&lt;p&gt;If you want to install a tool that is in a private tap, you need to add it and then install the tool.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew tap go-task/tap
$ brew install go-task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or you can directly install the tool in a private tap in only one line:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install go-task/tap/go-task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-github-repository-for-our-homebrew-tap"&gt;
  &lt;/a&gt;
  Create a GitHub repository for our HomeBrew Tap
&lt;/h2&gt;

&lt;p&gt;A Tap is usually a Git repository. If hosted on GitHub, it is recommended that the repository’s name start with &lt;strong&gt;homebrew-&lt;/strong&gt; in order to use &lt;code&gt;brew tap&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scraly/homebrew-tools&lt;/code&gt; repository =&amp;gt; &lt;code&gt;brew tap scraly/tools&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;Note: even if we want to install only our GopherSay app in this tutorial, we will not name our repository &lt;strong&gt;homebrew-gophersay&lt;/strong&gt; instead of that we will create a repository that will contains many of different formulas.&lt;/p&gt;

&lt;p&gt;First, create our new repository in GitHub: &lt;strong&gt;homebrew-tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For that, I logged in GitHub website, clicked on the repositories link, click on "New" green button and then I created a new repository called &lt;code&gt;homebrew-tools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9Ow6Dqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejbuhx75glcczp4irlpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9Ow6Dqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejbuhx75glcczp4irlpr.png" alt="homebrew-tools" width="880" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our new GitHub repository is created:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/homebrew-tools"&gt;
        homebrew-tools
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
homebrew-tools&lt;/h1&gt;
&lt;p&gt;Homebrew formula for installing Scraly's apps &amp;amp; tools.&lt;/p&gt;
&lt;h2&gt;
How To Use&lt;/h2&gt;
&lt;p&gt;Add repository:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew tap scraly/tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;a href="https://github.com/scraly/gophersay"&gt;GopherSay&lt;/a&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew install gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upgrade the GopherSay CLI to the latest version:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew upgrade gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scraly/homebrew-tools"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generate-automatically-homebrew-tap-formula-through-goreleaser"&gt;
  &lt;/a&gt;
  Generate automatically HomeBrew Tap Formula through GoReleaser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnqADMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqbae08i5nalsf49ffqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnqADMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqbae08i5nalsf49ffqu.png" alt="Gopher Zelda" width="414" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous article, we created GopherSay golang app, we generated the releases thanks to Go Releaser and we automatized them through GitHub actions.&lt;br&gt;
Everytime we publish a new GitHub release in GopherSay, the GitHub action is runned and our release is created.&lt;/p&gt;

&lt;p&gt;It's perfect.&lt;/p&gt;

&lt;p&gt;So now we need to ask GoReleaser to generate also a HomeBrew tap formula :).&lt;/p&gt;

&lt;p&gt;In order to do that automatically, we need to edit our &lt;code&gt;goreleaser.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you don't already clone the repository, you need to clone it and go into the &lt;strong&gt;gophersay&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/gophersay.git
$ cd gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add the following step in &lt;code&gt;.goreleaser.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;brews&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gophersay&lt;/span&gt;
  &lt;span class="na"&gt;homepage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/scraly/homebrew-tools&lt;/span&gt; 
  &lt;span class="na"&gt;tap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scraly&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homebrew-tools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain this code block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;brews&lt;/strong&gt; section specifies how the formula should be created. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;homepage&lt;/strong&gt; is for your app's homepage&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tap&lt;/strong&gt; is for defining the GitHub/GitLab repository to push the formula to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Warning: the name of the brew will be the name of the formula, so what you want to install with &lt;code&gt;brew install &amp;lt;name&amp;gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-our-formula"&gt;
  &lt;/a&gt;
  Generate our formula!
&lt;/h2&gt;

&lt;p&gt;In order to generate the HomeBrew formula automatically, we need to create a new tag in our Git repository and push it. This will create a new release in the GitHub repository.&lt;/p&gt;

&lt;p&gt;Let's create and push &lt;strong&gt;v1.0.2&lt;/strong&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git tag v1.0.2
$ git push origin v1.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check if the new tag have been correctly added, go to &lt;a href="https://github.com/scraly/gophersay/releases/"&gt;GopherSay Releases&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZPdGv48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reqktr4g3n75ls2d25xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZPdGv48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reqktr4g3n75ls2d25xz.png" alt="GopherSay Releases" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fine, release v1.0.2 exists.&lt;/p&gt;

&lt;p&gt;Now, go in &lt;strong&gt;Actions&lt;/strong&gt; tab in the GitHub repository in order to check if GitHub action runned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MwwD7le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0geajhny62miu29iuxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MwwD7le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0geajhny62miu29iuxl.png" alt="GitHub Actions" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything is green, it's a good sign! 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-check-if-our-formula-have-been-added"&gt;
  &lt;/a&gt;
  Let's check if our formula have been added
&lt;/h2&gt;

&lt;p&gt;Go in our &lt;a href="https://github.com/scraly/homebrew-tools"&gt;HomeBrew Tap repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The GopherSay formula have been automatically updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--is9cmRaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awlysnv794sf83y7j6sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--is9cmRaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awlysnv794sf83y7j6sc.png" alt="GopherSay formula" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's have a look to our &lt;code&gt;gophersay.rb&lt;/code&gt; formula file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# typed: false&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="c1"&gt;# This file was generated by GoReleaser. DO NOT EDIT.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gophersay&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Formula&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="n"&gt;homepage&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/homebrew-tools"&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s2"&gt;"1.0.2"&lt;/span&gt;

  &lt;span class="n"&gt;on_macos&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;intel?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Darwin_x86_64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"084b60f89b442cc66159a495421d3e9fb48b3861b324a2ac1062d4491c342f27"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arm?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Darwin_arm64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"0e98ff426817075492f3e61569c28d5bfd7a69ab7264f6cf03dd99e007277ae1"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;on_linux&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;intel?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Linux_x86_64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"bd3af60d4e9f5deb63dfd675cc5c2aa515d4897fb056b3170d316d9a9e466998"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arm?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_64_bit?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Linux_arm64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"b8e8113b90efcd8dce4a38d648000cd5f1d8830bba039a585ca2d5067eb17740"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;GoReleaser create and update this formula every time you will push a new tag is your app with release information like: version, executable binary archive depending on the OS, sha256...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-our-app-through-homebrew"&gt;
  &lt;/a&gt;
  Install our app through HomeBrew
&lt;/h2&gt;

&lt;p&gt;Now your HomeBrew tap is ready and the formula is created, so we can install our app.&lt;/p&gt;

&lt;p&gt;Add our tap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew tap scraly/tools
==&amp;gt; Tapping scraly/tools
Cloning into '/usr/local/Homebrew/Library/Taps/scraly/homebrew-tools'...
remote: Enumerating objects: 9, done.
remote: Counting objects: 100% (9/9), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 9 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (9/9), done.
Tapped 1 formula (13 files, 7.7KB).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install gophersay
Updating Homebrew...
==&amp;gt; Auto-updated Homebrew!
Updated 1 tap (scraly/tools).
==&amp;gt; New Formulae
scraly/tools/gophersay

==&amp;gt; Installing gophersay from scraly/tools
==&amp;gt; Downloading https://github.com/scraly/gophersay/releases/download/v1.0.1/gophersay_1.0.1_Darwin_x86_64.tar.gz
==&amp;gt; Downloading from https://github-releases.githubusercontent.com/398637863/968c588e-71e2-4300-b62a-33aa9b245ada?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210830%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20210830T100137
######################################################################## 100.0%
Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink bin/gophersay
Target /usr/local/bin/gophersay
already exists. You may want to remove it:
  rm '/usr/local/bin/gophersay'

To force the link and overwrite all conflicting files:
  brew link --overwrite gophersay

To list all files that would be deleted:
  brew link --overwrite --dry-run gophersay

Possible conflicting files are:
/usr/local/bin/gophersay
==&amp;gt; Summary
🍺  /usr/local/Cellar/gophersay/1.0.1: 5 files, 1.5MB, built in 8 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can directly install the app in oneline installation command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install scraly/tools/gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-our-app"&gt;
  &lt;/a&gt;
  Test our app
&lt;/h2&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gophersay test

  ----
&amp;lt; test &amp;gt;
  ----
        \
         \

       (%%.                             .
     @***,*********@           &amp;amp;****************&amp;amp;             .&amp;amp;%(********%#
       ,(((((((@*******@   .*************///***********#  @****(#((((((((((@
         &amp;amp;(((((((((@*****@***********************************((((((((((,
           .((((((((((%((((((((&amp;amp;****************************((((((((((@
             &amp;amp;((((((((@.    .@#((@***************************@((((((@
                /@(@     @@@     (*************************&amp;amp;(((/(((((%
                   @     @@      /************************            @
                 (**            /************************&amp;amp;    (@@@    *
                /*****%       @**************************@            @
               ,*******************************************&amp;amp;         ,
               ***************************************************
              @***********************((((((((&amp;amp;*******************
             *************************((((((&amp;amp;((&amp;amp;*****************&amp;amp;
             ***********************((((((((((((%****************
            (****.......@......#***&amp;amp;((((((#((((%***..........@**,@,
          ****,/ .......#.......,******,  (  ******.. ....@..*******@
          @*@.... @.....#..(.....#*****@@@@/(*****..(...../...&amp;amp;. ****&amp;amp;
             ............ ......../************&amp;amp;.........&amp;amp;..&amp;amp;*,  (((#
             ..............@........@********/.......... .....   &amp;amp;(((
              ...............%........&amp;amp;**#............/......(    %((.
             *..................,.......#...........#.......@    .((((
             *....................(.......%.....#..........(     (((((
              ......................@........%.............      #((((
               .......................&amp;amp;......@............(       ((((
                ........................@................*        #(((
                 /....................... ......(.......%        #(((
                   (.......................,.....#....****@     (#((
                  .******.@.................,.....@*   ****/   &amp;amp;((((/
                 /****.                                         ##.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrade-our-app"&gt;
  &lt;/a&gt;
  Upgrade our app
&lt;/h2&gt;

&lt;p&gt;Through HomeBrew, you can now upgrade our GopherSay application to the latest version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew upgrade gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create multiple different applications in Go,  and automatize build and cross-compilation and even provides an easy way to install our app for Mac users.&lt;/p&gt;

&lt;p&gt;All the code of our GopherSay app in Go is available in: &lt;a href="https://github.com/scraly/gophersay"&gt;https://github.com/scraly/gophersay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>library</category>
      <category>package</category>
    </item>
    <item>
      <title>YOU NEED to Learn Python in 2022! (Business Perspective)</title>
      <author>CodeWithKenn</author>
      <pubDate>Thu, 20 Jan 2022 07:14:13 +0000</pubDate>
      <link>https://dev.to/codewithkenn/top-5-reasons-to-learn-python-in-2022-business-perspective-27fj</link>
      <guid>https://dev.to/codewithkenn/top-5-reasons-to-learn-python-in-2022-business-perspective-27fj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python is one of the easiest programming languages to get started with. For this reason, the community keeps growing every month.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because of its simplicity (of the Syntax), Python has become the most popular language.&lt;/p&gt;

&lt;p&gt;Besides, Python helps Engineers build great products in many industries and professional domains.&lt;br&gt;
The Programmer's life gets easier when it comes to having a look at Python.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-about-the-python-business-market-size"&gt;
  &lt;/a&gt;
  What about the Python Business Market size?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooqISuWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662070916/ha3UIJDHx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooqISuWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662070916/ha3UIJDHx.jpeg" alt="market-size-market-share.jpg" width="815" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python is an open-source language, which means that anyone can use it. However, if you look to an industry such as data analytics, in which Python can be used, the market value is &lt;strong&gt;over $10 billion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Shared by &lt;a href="https://www.futurelearn.com/info/insights/python-insights"&gt;futurelearn.com&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-the-top-10-most-common-uses-of-python-by-industry"&gt;
  &lt;/a&gt;
  Here are the top 10 most common uses of Python by industry
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umGw-dCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662192938/xYTgi2Ycs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umGw-dCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662192938/xYTgi2Ycs.png" alt="pandemic-hero.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▪ Insurance: Creating business insights with machine learning.&lt;/p&gt;

&lt;p&gt;▪ Retail Banking: Flexible data transformation and manipulation.&lt;/p&gt;

&lt;p&gt;▪ Aerospace: Meeting software system deadlines.&lt;/p&gt;

&lt;p&gt;▪ Finance: Data mining to identify cross-sell opportunities.&lt;/p&gt;

&lt;p&gt;▪ Business Services: API access to financial information&lt;/p&gt;

&lt;p&gt;▪ Hardware: Automating network administration&lt;/p&gt;

&lt;p&gt;▪ Healthcare: Predicting disease prognosis&lt;/p&gt;

&lt;p&gt;▪ Consulting Services: Bespoke web development&lt;/p&gt;

&lt;p&gt;▪ InfoTech: IT modernization&lt;/p&gt;

&lt;p&gt;▪ Software: Adding extensibility to legacy applications&lt;/p&gt;

&lt;p&gt;Shared by &lt;a href="https://appdevelopermagazine.com/ten-industries-using-python-programming/"&gt;appdevelopermagazine.com&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-5-worldclass-software-companies-that-use-python"&gt;
  &lt;/a&gt;
  Here are 5 World-Class Software Companies That Use Python
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3fz1ihF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662333807/Y73E563_X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3fz1ihF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662333807/Y73E563_X.jpeg" alt="COTW-TechAcquisitions-Shareable-2.jpg" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
(Photo by Visual Capitalist)&lt;/p&gt;

&lt;p&gt;Google, Meta (Facebook), Instagram, Netflix, Instagram.&lt;br&gt;
There are plenty of companies searching for Python Developers around the globe.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hence-i-created-this-blog-to-help-you-out"&gt;
  &lt;/a&gt;
  Hence, I created this Blog to help you out!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3BDkfEel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662424540/nnlZkUO_y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3BDkfEel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662424540/nnlZkUO_y.jpeg" alt="Design-Blog-Page-Python.jpg" width="800" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, Learning Python helps you create Opportunities from jobs to Building Products people use.&lt;br&gt;
I just got into Full-stack development using Python Software Development, React + Python as Tech Stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-to-follow-codewithkenn-for-more-articles-about"&gt;
  &lt;/a&gt;
  Make sure to follow CodeWithKenn for more articles about:
&lt;/h2&gt;

&lt;p&gt;➞ Learning Python in simple terms&lt;/p&gt;

&lt;p&gt;➞ Building Side Projects and SaaS using React + Python&lt;/p&gt;

&lt;p&gt;➞ Getting useful Resources and tips for your coding Journey&lt;/p&gt;

&lt;p&gt;Stay tuned! More articles are coming out! Feel free to comment and share the articles to support me 🤙&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Let's connect
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeWithKenn"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KennStack01"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/kennkibadi/"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.instagram.com/codewithkenn_/"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/Code-With-Kenn-104376625415201"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to start blogging?  🔥&lt;a href="https://hashnode.com/@CodeWithKenn/joinme"&gt;Join NOW!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a Spotify that can interact  with social media and we can upload song there </title>
      <author>M.Majid</author>
      <pubDate>Thu, 20 Jan 2022 06:57:13 +0000</pubDate>
      <link>https://dev.to/majidnope/building-a-spotify-that-can-interact-with-social-media-and-we-can-upload-song-there-2lad</link>
      <guid>https://dev.to/majidnope/building-a-spotify-that-can-interact-with-social-media-and-we-can-upload-song-there-2lad</guid>
      <description>&lt;p&gt;&lt;a href="https://www.instagram.com/nop.__e_/"&gt;Connect me in 🤖 Instagtram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODcabNcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0fx6owq2eb57g7u1zoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODcabNcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0fx6owq2eb57g7u1zoa.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React to the React App: How to hard reload your React Web App?</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 20 Jan 2022 06:18:16 +0000</pubDate>
      <link>https://dev.to/alichherawalla/react-to-the-react-app-how-to-hard-reload-your-react-web-app-3god</link>
      <guid>https://dev.to/alichherawalla/react-to-the-react-app-how-to-hard-reload-your-react-web-app-3god</guid>
      <description>&lt;p&gt;Good software development practices reduce the possibility of errors. But these pesky creatures still find their way in production. When a user runs into an error the webpage could crash and s/he would have to manually reload it. This leads to a bad user experience. A reload button in case of an error could help the user and nudge them into recovery. More specifically a “Hard reload button” i.e. a button that fetches the webpage from the server instead of the cache.&lt;/p&gt;

&lt;p&gt;The error boundary of your web application is a good place to keep the reload button. In most React applications this is a component. It contains a fallback UI, with some text to nudge the user to reload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note: This tutorial assumes that you know React and have good 
working knowledge of javascript.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this tutorial, you will learn to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a basic Error Boundary component&lt;/li&gt;
&lt;li&gt;Create a button that will hard reload a webpage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Starter Project&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We’re going to use the &lt;a href="https://github.com/wednesday-solutions/react-template"&gt;Wednesday react template&lt;/a&gt; as a starter project. This is a project we use as a base across all the react projects at Wednesday.&lt;/p&gt;

&lt;p&gt;Open the terminal and clone the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="o"&gt;[&lt;/span&gt;git@github.com]&lt;span class="o"&gt;(&lt;/span&gt;mailto:git@github.com&lt;span class="o"&gt;)&lt;/span&gt;:wednesday-solutions/react-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the project on the terminal and run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the react template. You should see the following on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjbbEwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck90vhqurxbvj8dznrd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjbbEwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck90vhqurxbvj8dznrd9.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great going so far. You’re now ready to start making changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-error-boundary"&gt;
  &lt;/a&gt;
  The Error Boundary
&lt;/h2&gt;

&lt;p&gt;The Starter Project comes with a basic error boundary but we will begin by &lt;strong&gt;creating an all-new Error Boundary&lt;/strong&gt; with a refresh button &amp;amp; a start fresh button.&lt;/p&gt;

&lt;p&gt;Open the project in your text editor of choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Navigate to the &lt;strong&gt;app/components/ErrorBoundary&lt;/strong&gt; folder and replace the contents of the &lt;strong&gt;index.js&lt;/strong&gt; file with the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * ErrorBoundary
 *
 */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;errorBoundaryImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@images/icon-512x512.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styled components to make it look nice&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  text-align: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-top: 8rem;
  width: 25%;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extraLarge&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  margin-top: 1.375rem;
  font-family: 'Poppins';
  color: #00244f;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;large&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  color: #00244f;
  margin: 0 26.9% 0 26.9%;

  b {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 0.5rem 1.5rem;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  border: none;
  color: #ffffff;
  background: #af0974;
  margin: 1.5rem 1.5rem 11rem 0;
  cursor: pointer;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// state to hold the error&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryImage&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorBoundaryImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Please bear with us..&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sorry for the inconvenience. We suggest you &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;refresh the page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; to resolve the issue.
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hit Refresh&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOfType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a lot to digest. I’ve left a few comments in the code to make it easy to understand.&lt;/p&gt;

&lt;p&gt;In a nutshell this component shows the a button and some text when the error state is set.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To test your new component you're going to deliberately trigger an error in the App Container.&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;app/containers/App/index.js&lt;/strong&gt; file and replace the current App component with the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your browser should now show the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nM9qmg0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in1jt1a9l17m7hanrh1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nM9qmg0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in1jt1a9l17m7hanrh1e.png" alt="Image description" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hard-reload"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hard Reload&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You now have all the building blocks in place. You have a component that will show up when an error occurs. You just need to write the logic to hard reload the page when the user hits the refresh button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-uninstall-service-workers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Uninstall service workers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Paste in the below code in the &lt;strong&gt;handleRefreshClick&lt;/strong&gt; function in &lt;strong&gt;app/components/ErrorBoundary/index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegistrations&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;registrations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;registrations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above piece of code gets all the service workers currently installed for your web app and uninstalls them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Note: We could also use the window.location.reload&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; 
However it would not bypass the service worker and requests will still 
be fetched from the cache.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-clear-the-cache"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2: Clear the cache&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The the following code to the end of the &lt;strong&gt;handleRefreshClick()&lt;/strong&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;keyList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;keyList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above piece of code removes all browser cache entries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-reload-the-window"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3: Reload the window&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Finally, copy the following snippet and paste it at the end of the same function and add the async keyword before the function name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This triggers the browser to reload the page. If you reload the webpage in your browser, it should now work as expected. Clicking the 'Hit Refresh' button will hard reload the page.&lt;/p&gt;

&lt;p&gt;Yay! You’ve now &lt;strong&gt;created a button that can hard reload a webpage.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Where to go from here&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You’re now able to hard reload webpages using javascript and implement it on your website. The &lt;strong&gt;Error Boundary&lt;/strong&gt; we created here is very basic to keep the focus on the javascript bit.  When you do implement it in your website, remember to get as creative as possible i.e. design a much more helpful webpage, add animations, transitions. Have fun with it. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial as much as I enjoyed writing it. If this piqued your interest, check out other articles by Wednesday Solutions and tweet your comments at &lt;a href="https://twitter.com/home"&gt;us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By: Saksham Khatod &lt;br&gt;
Originally appeared on &lt;a href="https://www.wednesday.is/writing-tutorials/react-to-the-react-app-how-to-hard-reload-your-react-web-app-using-error-boundary"&gt;https://www.wednesday.is/writing-tutorials/react-to-the-react-app-how-to-hard-reload-your-react-web-app-using-error-boundary&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webapp</category>
    </item>
    <item>
      <title>Tailwind CSS Pseudo-elements</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 20 Jan 2022 05:51:59 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/tailwind-css-pseudo-elements-1h2</link>
      <guid>https://dev.to/dailydevtips1/tailwind-css-pseudo-elements-1h2</guid>
      <description>&lt;p&gt;I only learned that Tailwind recently added the option to style pseudo-elements.&lt;br&gt;
Ever since the introduction of &lt;a href="https://daily-dev-tips.com/posts/why-tailwind-jit-compiler-is-amazing/"&gt;Tailwind JIT&lt;/a&gt; it turns out we can now also leverage pseudo-elements in Tailwind!&lt;/p&gt;

&lt;p&gt;Let's look at how it works and what we can do with them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-pseudoelements"&gt;
  &lt;/a&gt;
  What are pseudo-elements
&lt;/h2&gt;

&lt;p&gt;If you are &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;not aware of pseudo-elements&lt;/a&gt;, they are similar to pseudo-classes like &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:first&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The difference is that &lt;code&gt;pseudo-classes&lt;/code&gt; are existing elements that get styled differently.&lt;br&gt;
As to where &lt;code&gt;pseudo-elements&lt;/code&gt; are new elements.&lt;br&gt;
They can give us the superpower to add new styled elements to the DOM.&lt;/p&gt;

&lt;p&gt;Another way to identify &lt;code&gt;pseudo-elements&lt;/code&gt; is to always start with two &lt;code&gt;::&lt;/code&gt; where the classes only use one &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at each of the pseudo-elements and how we can use them in Tailwind CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tailwind-css-firstline-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS first-line pseudo-element
&lt;/h2&gt;

&lt;p&gt;This pseudo-element can manipulate the first line of a specific sentence.&lt;/p&gt;

&lt;p&gt;Let's say we want to make the first line of an article blue, so it pops a bit more. While we are at it, we could also transform the first line to uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-line:uppercase first-line:tracking-widest first-line:text-blue-500"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/dyVqwqz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-firstletter-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS first-letter pseudo-element
&lt;/h2&gt;

&lt;p&gt;Like the &lt;code&gt;first-line&lt;/code&gt; selector, we can also target the first letter.&lt;br&gt;
You often see this in those old-school books giving a nice effect.&lt;/p&gt;

&lt;p&gt;I personally really love this effect, and this is how you use it in Tailwind CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-letter:text-7xl first-letter:font-bold first-letter:mr-3 first-letter:float-left first-letter:text-teal-500"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of the first-letter will look like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/JjrawqN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-before-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS before pseudo-element
&lt;/h2&gt;

&lt;p&gt;The before pseudo-element is perfect for adding that extra new element to the dom, which you can use to add nice effects to certain elements.&lt;/p&gt;

&lt;p&gt;Let's try and create a fun background for an image.&lt;br&gt;
We want the image to show, but there should be a different colored div with an angle on the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative before:block before:absolute before:-inset-1 before:-rotate-6  before:bg-teal-500"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative border-4 border-white"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/NWaLeQV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-before-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS before pseudo-element
&lt;/h2&gt;

&lt;p&gt;The after element can be used the same way as the before element.&lt;br&gt;
Let's try something else for this one.&lt;/p&gt;

&lt;p&gt;We often have forms with required fields. Let's add a red &lt;code&gt;*&lt;/code&gt; for the required fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm font-medium text-gray-700"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Email
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-1 px-3 py-2 bg-white border shadow-sm border-gray-300 placeholder-gray-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1"&lt;/span&gt;
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"you@example.com"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in this amazing piece:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/mdBGvVz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-selection-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS selection pseudo-element
&lt;/h2&gt;

&lt;p&gt;I'm sure you have seen this before, you select a piece of text, and the color is different.&lt;/p&gt;

&lt;p&gt;That is done by using the &lt;code&gt;selection&lt;/code&gt; pseudo-element.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"selection:bg-teal-500 selection:text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out by selecting some text:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOGdqrZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we can use these selectors in Tailwind, there is almost no need for any custom CSS while using Tailwind.&lt;/p&gt;

&lt;p&gt;I'm thrilled these are now so well supported, and I'm sure it will be a game-changer.&lt;/p&gt;

&lt;p&gt;If you want to read up more, the &lt;a href="https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-elements"&gt;official docs of Tailwind&lt;/a&gt; are always a gem of information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
