<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python - List Vs Tuple Memory Management</title>
      <author>Siddharth Chandra</author>
      <pubDate>Thu, 06 May 2021 05:10:24 +0000</pubDate>
      <link>https://dev.to/siddharth2016/python-list-vs-tuple-memory-management-4056</link>
      <guid>https://dev.to/siddharth2016/python-list-vs-tuple-memory-management-4056</guid>
      <description>&lt;p&gt;This article is going to be a short read, we will focus on how memory is managed in Python for objects like &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt; and what can be the key takeaways.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;Python list as we all know is a mutable dynamic array that behaves like a linked list as well. Let's look at some code for creating and updating a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./list_1.py
&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# A new list gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list using in-built append method
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# Pop last item
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list by adding a new list to given list
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following will be the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial List &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Append 4, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4]
Pop, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Add new list, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 5, 6]
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see what happens in memory when we run the above script, here we will be using &lt;code&gt;sys&lt;/code&gt; to help us out on viewing system-related information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./list_2.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# A new list gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list using in-built append method
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# Pop last item
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list by adding a new list to given list
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the output first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial List &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Initial List Address 139688582615624
Initial List Memory 88
Append 4, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4]
Append 4, List Address 139688582615624
Append 4, List Memory 120
Pop, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Pop, List Address 139688582615624
Pop, List Memory 120
Add new list, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 5, 6]
Add new list, List Address 139688582615624
Add new list, List Memory 120
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following points we can find out after looking at the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initially, when the list got created, it had a memory of &lt;code&gt;88&lt;/code&gt; bytes, with 3 elements.&lt;/li&gt;
&lt;li&gt;Later on, after appending an element &lt;code&gt;4&lt;/code&gt; to the list, the memory changes to &lt;code&gt;120&lt;/code&gt; bytes, meaning more memory blocks got linked to list &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Even after popping out the last element the created blocks memory remains the same and still attached to list &lt;code&gt;l&lt;/code&gt;. And when we add another list with 2 more elements to the given list &lt;code&gt;l&lt;/code&gt;, we see that occupied memory is still the same &lt;code&gt;120&lt;/code&gt; bytes. Hence, we can conclude that it is behaving more like a dynamic array, which updates the size of the list to contain more elements at once to avoid repetitive callbacks (to create and attach new memory address) at every insertion of the new element.&lt;/li&gt;
&lt;li&gt;We also notice that the list address remains the same, even if we do append, pop or add a new list to it (as long as we don't assign it to a new variable). This advocates the nature of the mutability of python lists (it means, more or less, that at the same address we are able to update values or extend it further).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's look at the tuples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tuple"&gt;
  &lt;/a&gt;
  Tuple
&lt;/h3&gt;

&lt;p&gt;Python tuple as we all know are immutable and do not extend in the memory further after the initial declaration. Now, let's look at the above same scenario but for tuples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./tuple_1.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# A new tuple gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating tuple by adding a new tuple to given tuple
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial Tuple &lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
Initial Tuple Address 140452527817280
Initial Tuple Memory 72
Add new tuple, Tuple updated to &lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3, 5, 6&lt;span class="o"&gt;)&lt;/span&gt;
Add new tuple, Tuple Address 140452528572728
Add new tuple, Tuple Memory 88
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following points we notice after looking at the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since, tuples are immutable, once created cannot be updated unless a new tuple gets added to the previous one, resulting in the creation of a new tuple.&lt;/li&gt;
&lt;li&gt;Once a tuple gets created, its allocated memory will not be changed.&lt;/li&gt;
&lt;li&gt;Updating a tuple after adding another tuple to it, updates the address of the resulting tuple, this advocated its immutability property.&lt;/li&gt;
&lt;li&gt;We can see it allocates &lt;code&gt;72&lt;/code&gt; bytes for 3 values and &lt;code&gt;88&lt;/code&gt; for 6 values, it does not allocate the unnecessary amount of memory, only what is required is allocated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at some miscellaneous points.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  MISC
&lt;/h3&gt;

&lt;p&gt;What happens when we create an empty list and empty tuple?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./misc.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l1 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l2 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l1 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l2 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t1 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t2 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t1 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t2 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we get?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;List l1 address 139766851756616
List l2 address 139766851761800
List l1 memory 64
List l2 memory 64
List t1 address 139766871547976
List t2 address 139766871547976
List t1 memory 48
List t2 memory 48
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we find?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating 2 empty lists have the same amount of memory allocated, whereas the address of both lists is different. It makes sense because, list address will have to act as mutable and cannot be the same at a given time, which means 2 different lists will be different unless they are the same (not in value but in reference point of view).&lt;/li&gt;
&lt;li&gt;Creating 2 empty tuples have the same amount of memory allocated and will point to the same address initially. It makes sense because of its immutability property. Consider integer &lt;code&gt;1&lt;/code&gt; value in python that is immutable and always point to the same address unless changed to some other integer. Similarly, the initial empty tuple will always point to the same address unless changed to some other tuple.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Well, that's it from me.&lt;/p&gt;

&lt;p&gt;We explored quite a few points on how memory is allocated and how it could be managed in Python.&lt;/p&gt;

&lt;p&gt;To know more about memory management, I encourage you to explore their code available on python's &lt;a href="https://github.com/python/cpython"&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feeling it's difficult to go through the source code of python? Don't worry, we can always use available &lt;code&gt;sys&lt;/code&gt; module methods and other functions like &lt;code&gt;id&lt;/code&gt; to develop an understanding of what could be happening behind the scenes.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>8 Video Streaming Websites and their Alternatives</title>
      <author>shahul98</author>
      <pubDate>Thu, 06 May 2021 05:00:33 +0000</pubDate>
      <link>https://dev.to/shahul98/8-video-streaming-websites-and-their-alternatives-5fk8</link>
      <guid>https://dev.to/shahul98/8-video-streaming-websites-and-their-alternatives-5fk8</guid>
      <description>&lt;p&gt;With the arrival of movie streaming websites such as Netflix, Hulu, and Prime Video,  users are able to watch high-quality video content in the comfort of their homes by subscribing to it.&lt;/p&gt;

&lt;p&gt;However, not many people know about other free online streaming platforms where people can watch the latest movies and TV shows. The following is a list of 8 popular movie streaming sites and their alternatives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-tvmuse"&gt;
  &lt;/a&gt;
  1. TVMuse
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PffHJAWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216426450/m49o115Lg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PffHJAWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216426450/m49o115Lg.jpeg" alt="tvmuse-homepage (1).jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tvmuse.cc/"&gt;TVMuse&lt;/a&gt; is a popular movie streaming website that aggregates video content. Users can watch movies and TV series on the web and can even download them for viewing later. Alternatives to TVMuse are WatchEpisodes and Flex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-openload"&gt;
  &lt;/a&gt;
  2. Openload
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aI9rTa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217214034/ciIYDXcL8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aI9rTa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217214034/ciIYDXcL8.png" alt="Openload_download_page_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Openload was a file-sharing website that made sharing files with friends and colleagues a breeze. It was the preferred website for many people to watch free movies and television shows. However, it was shut down in 2019 after legal action. Alternatives to Openload are Yes! Movies and VMovee.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-rabbit"&gt;
  &lt;/a&gt;
  3. Rabbit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSyw5frV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217094384/fGHiyPvUE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSyw5frV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217094384/fGHiyPvUE.jpeg" alt="Screenshot 2021-04-06 163307.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kast.gg/"&gt;Rabbit &lt;/a&gt; is a hugely popular platform that allowed users to co-watch movies and tv shows with friends in real-time. However, Rabbit was discontinued after it failed to secure funding. It is currently owned by Kast, another streaming service provider.  Alternatives to Rabbit are Netflix Party, Tutturu, and Invited.tv.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-popcorn-time"&gt;
  &lt;/a&gt;
  4. Popcorn Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Fc8vOhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216844894/-CD7jTKnm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Fc8vOhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216844894/-CD7jTKnm.jpeg" alt="Capture (2).JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://popcorntime-online.ch/"&gt;Popcorn Time&lt;/a&gt; is a multi-platform, free software BitTorrent client that includes a free and open-source integrated media player. Alternatives to Popcorn Time are Kodi and Duckie TV.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-kissasian"&gt;
  &lt;/a&gt;
  5. KissAsian
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---K6xg1g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217276286/1QD8tjP6v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---K6xg1g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217276286/1QD8tjP6v.jpeg" alt="Screenshot 2021-04-22 170915 (1).jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KissAsian is an online-based platform where the users can watch movies, tv-series, and Asian dramas in HD quality for free. Alternatives to KissAsian are KOCOWA and MyDramaList.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-selecttv"&gt;
  &lt;/a&gt;
  6. SelectTV
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVF1W-y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217151963/xvnq5CbCd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVF1W-y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217151963/xvnq5CbCd.jpeg" alt="maxresdefault.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.selecttv.com/"&gt;SelectTV&lt;/a&gt; is an aggregated smart guide for online media, bringing entertainment content from hundreds of free and paid sources together for consumers to browse, manage, and watch easily. Alternatives are JustWatch and Plex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-kodi"&gt;
  &lt;/a&gt;
  7. Kodi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj07z4DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216969802/m-0Zxrm_0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj07z4DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216969802/m-0Zxrm_0.jpeg" alt="nexus2cee_Kodi2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kodi.tv/"&gt;Kodi&lt;/a&gt; is a media player is software that can play media on your device.  It is free, open-source software for managing your local collection of movies, television shows, music, and photos. Alternatives to Kodi are Popcorn Time and Stremio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-plex"&gt;
  &lt;/a&gt;
  8. Plex
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtkPETXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217028547/BclIZam_q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtkPETXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217028547/BclIZam_q.jpeg" alt="plex-desktop-movies-1024x659.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.plex.tv/"&gt;Plex&lt;/a&gt; gives you one place to find and access all the media that matters to you. From personalized media to free and on-demand Movies, live TV, and shows, to music, you can enjoy it all in one app. Alternatives to Plex are MediaPortal and Kodi.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What it takes to be a great Lead Engineer</title>
      <author>Daine Mawer</author>
      <pubDate>Thu, 06 May 2021 04:48:17 +0000</pubDate>
      <link>https://dev.to/dainemawer/what-it-takes-to-be-a-great-lead-engineer-1jhl</link>
      <guid>https://dev.to/dainemawer/what-it-takes-to-be-a-great-lead-engineer-1jhl</guid>
      <description>&lt;p&gt;3.5 years ago, I sat at my computer, wanting more for my career. I was already a Lead Engineer at an incredibly successful corporate technology company, managing multiple top-of-mind open-source projects and 4 junior - mid engineers.&lt;/p&gt;

&lt;p&gt;I thought I knew a lot about managing people and great code back then. Fast-forward nearly 4 years and it couldn't have been further from the truth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;In 2011, I sat by my grandfather's deathbed listening to the knowledge he had accrued over a near half-century-long multi-national career. In the 1930's he had started at the company delivering mail and by the 1970s, he had worked his way up to CEO - a mentality that is so often lost in the technology industry where everyone jumps ship for greener pastures more often than they should. &lt;/p&gt;

&lt;p&gt;Inspired by my grandfather's story I decided to change jobs in 2017 and throw away my hard-earned titles. I started, with a wealth of knowledge and experience, with no title and a very minimal salary at 10up in September 2017. It was important for me to start right at the bottom and put aside ego and salary expectations so that I could show the people I work with, one incredibly important trait: humility.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#junior"&gt;
  &lt;/a&gt;
  Junior
&lt;/h2&gt;

&lt;p&gt;The first year being "junior" was tough. I was 27 years old and felt like I was starting my career all over again. I made plenty of mistakes, and the learning curve was insane. I felt like I had a lot to prove and to be honest, in the first 3-6 months I felt like I didn't prove much. The first 2 years were a crash course in engineering technicality. I learned fast and I learned hard. &lt;/p&gt;

&lt;p&gt;There were days that felt impossible, there were tickets/tasks that felt like I had no idea how to even attempt and there were days where I attempted those tickets and failed. However, there were just as many days where I succeeded even my own expectations and the expectations of those around me. &lt;/p&gt;

&lt;p&gt;Peer feedback is a really underrated mechanism. During the first 2 years I spent working as a "junior", I received a ton of great feedback. My efforts were being noticed. Leadership was noticing my work ethic and my peers were beginning to respect my code style and mindset.  &lt;/p&gt;

&lt;p&gt;During my time as a Junior, while I was absorbing as much knowledge as I possibly could, I became aware that I had spent so many years focusing on code skills and engineering that I had left one important dynamic of seniority behind: people skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#senior"&gt;
  &lt;/a&gt;
  Senior
&lt;/h2&gt;

&lt;p&gt;2 years passed and I received my promotion to Senior. To date, my senior position at 10up has molded me more than any other experience in my life. I've spent many months honing my technical skills further, providing solutions that worked for clients, and co-tech-leading major builds and retainers with great success. But Senior to me wasn't how fast I could ensure a page load or how clean my ES6 JavaScript was. No, it was about one of the pillars of being a Lead: mentoring others.&lt;/p&gt;

&lt;p&gt;You see, being a great Lead Engineer really has nothing much to do with proving your technical ability to your peers and/or superiors. In fact, they already know that you're technically strong. &lt;/p&gt;

&lt;p&gt;There are of course things I still don't know, but for the most part, my technical ability remains acknowledged by my peers and at the same time you really begin to experiment with code, leveraging a deep understanding of the mechanics behind what you write.&lt;/p&gt;

&lt;p&gt;Where you really need to shine is helping those who are less experienced than you to be as good as you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lead"&gt;
  &lt;/a&gt;
  Lead
&lt;/h2&gt;

&lt;p&gt;As with most positions, you generally spend a fair amount of time in Senior, really "being" Lead. Lead is a significant feat for engineers to achieve. You have an advanced understanding of web technologies but as I mentioned earlier you need to find ways to impart that knowledge to others while ensuring they can fight their own battles. &lt;/p&gt;

&lt;p&gt;That also means letting go of a certain amount of control, yourself. I struggled a lot with this. I have incredibly high expectations of myself and thus subconsciously, expect that of others. Something I had to admit and accept.&lt;/p&gt;

&lt;p&gt;Being Lead is about managing your own expectations of others while simultaneously ensuring their own success in their position.&lt;/p&gt;

&lt;p&gt;So how did I go about doing this? I've outlined below what I found most helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-give-positive-sandwiches"&gt;
  &lt;/a&gt;
  1. Give Positive Sandwiches
&lt;/h3&gt;

&lt;p&gt;A positive sandwich is a technique for masking criticism. In a nice way, you give a compliment, then the criticism, then another compliment. Instead of saying:&lt;/p&gt;

&lt;p&gt;"Hey X, the function you wrote is breaking the staging website"&lt;/p&gt;

&lt;p&gt;You could say: "Hey x, looks like you wrote a great function we can reuse across the site, at the moment it seems to be breaking staging, I think it's probably something minor but if you could take a look when you get in today, I'd appreciate it, ping me if you need a hand."&lt;/p&gt;

&lt;p&gt;All too often I've seen Leads be blunt, bordering on rude, and it's not for lack of trying, they just feel like they wouldn't have made a mistake like that which can make Juniors and Seniors feel uncomfortable. At the end of the day, it's just code, but in the situation above it's got nothing to do with the code, it's about their confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-let-go-of-your-own-expectations"&gt;
  &lt;/a&gt;
  2. Let go of your own expectations
&lt;/h3&gt;

&lt;p&gt;As I mentioned before, I have exceedingly high expectations of myself. Each piece of code I write is thoroughly tested and linted to ensure it's written in a way that checks all the best practice boxes and is something I can be proud of. &lt;/p&gt;

&lt;p&gt;But not everyone writes code like I do or understands parts of a codebase as I do. &lt;/p&gt;

&lt;p&gt;In this situation, you need to learn to take a step back and accept that the code that eventually gets merged is no reflection on you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-learn-how-to-support-other-leads"&gt;
  &lt;/a&gt;
  3. Learn how to support other Leads
&lt;/h3&gt;

&lt;p&gt;This is a point that most Leads don't really take into account. They're often siloed to their team of less experienced engineers who seem to take up all of their time. But supporting your direct peers is also important, and required for a successful project build. You may be Leads in different disciplines but from a human perspective, this means that you can support each other, whether that's on a technical level or a motivational one to ensure a better outcome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-learn-humility"&gt;
  &lt;/a&gt;
  4. Learn humility
&lt;/h3&gt;

&lt;p&gt;Often, being high up in an organization comes with a level of stigma. Namely, ego. There's a "huff" about your title and people below you generally don't know whether to be intimidated by you or respect you. &lt;/p&gt;

&lt;p&gt;Well, that's 100% up to you. By practicing humility in your role each day, you'll achieve others' respect, after all in a Lead position, project outcomes become about your experience and how you handle others. Maintaining the mindset of: "I'm still learning" - makes it easy to stay humble and not overstep your bounds. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-learn-empathy"&gt;
  &lt;/a&gt;
  5. Learn empathy
&lt;/h3&gt;

&lt;p&gt;This is by far the most demanding and difficult soft skill to nurture. Personally, I'm a highly empathic human being, almost to my detriment. Professionally I seem to set aside some of that empathy as I expect results. But empathy doesn't just apply to what your expected output of an engineer is on any given day, it's also a useful tool to manage how people talk to you or interact with you. &lt;/p&gt;

&lt;p&gt;In fact, it's self-disarming. If I think back over the last 4 years, I could have gotten myself into a lot of nasty fights, but using empathy helped me develop respectful relationships both below my current position and above it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In closing, being a great Lead Engineer is more about people than great code. Technical know-how and implementation play a huge role, but if you can nurture, advise and aid engineers in a way that helps them grow and exceed their own expectations, then you'll be a successful Lead. &lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>motivation</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Go Crash Course Part 4: Types, Conversion and Inference</title>
      <author>Mofizur Rahman</author>
      <pubDate>Thu, 06 May 2021 03:11:59 +0000</pubDate>
      <link>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</link>
      <guid>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/moficodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsTAGJOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--z5HHrKkr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/173296/ff1c7da5-b8e7-47d6-9606-e1557494c6a5.jpeg" alt="moficodes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/moficodes/go-crash-course-part-iii-variables-and-functions-22p7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Go Crash Course Part III: Variables and Functions&lt;/h2&gt;
      &lt;h3&gt;Mofizur Rahman ・ May  5 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The code for this part is in the &lt;code&gt;types&lt;/code&gt; folder under &lt;a href="https://github.com/moficodes/go-crash-course"&gt;this github repo&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h2&gt;

&lt;p&gt;Go is a typed language. That means everything we create must have a type. &lt;/p&gt;

&lt;p&gt;There are a few basic types. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-types"&gt;
  &lt;/a&gt;
  Boolean Types
&lt;/h3&gt;

&lt;p&gt;Represents set of boolean value. With predefined constant &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;        &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#numeric-types"&gt;
  &lt;/a&gt;
  Numeric Types
&lt;/h3&gt;

&lt;p&gt;Integer and Floating point values. Following are architecture independent numeric types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="kt"&gt;uint8&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint16&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint32&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;4294967295&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint64&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;18446744073709551615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;int8&lt;/span&gt;        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int16&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;32767&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int32&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;2147483648&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;2147483647&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int64&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;9223372036854775808&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;9223372036854775807&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;float32&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="kt"&gt;float64&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;

&lt;span class="kt"&gt;complex64&lt;/span&gt;   &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float32&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;
&lt;span class="kt"&gt;complex128&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;

&lt;span class="kt"&gt;byte&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;
&lt;span class="kt"&gt;rune&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;int32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are architecture dependent. (Could be either 32 bit or 64 bit)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;     &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;
&lt;span class="kt"&gt;uintptr&lt;/span&gt;  &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;enough&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;uninterpreted&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#string-types"&gt;
  &lt;/a&gt;
  String Types
&lt;/h3&gt;

&lt;p&gt;String is a sequence of bytes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composite-types"&gt;
  &lt;/a&gt;
  Composite Types
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h4&gt;

&lt;p&gt;Arrays are fixed length and fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#slice"&gt;
  &lt;/a&gt;
  Slice
&lt;/h4&gt;

&lt;p&gt;Contiguous segment of underlying array. Has fixed type. Length can be dynamically reallocated. (More on this on a later chapter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#maps"&gt;
  &lt;/a&gt;
  Maps
&lt;/h4&gt;

&lt;p&gt;Key value store. Similar to dictionary in python or object in JavaScript. But it still has a fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;Functions are also types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;function&lt;/code&gt; has a type &lt;code&gt;func() int&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#struct"&gt;
  &lt;/a&gt;
  Struct
&lt;/h4&gt;

&lt;p&gt;Custom type defined by user. Its a sequence of named elements  with name and types. Struct can be empty too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#channel"&gt;
  &lt;/a&gt;
  Channel
&lt;/h4&gt;

&lt;p&gt;Channels are typed conduit between running go routines. We will hold off on talking about channels until we talk about go routines. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;An interface type specifies a method set called its interface. If a any type has the method set of the interface, that type implements the interface. All types implement the empty interface &lt;code&gt;interface{}&lt;/code&gt;. Interface does not have any type. Its always the underlying components type. A type can implement any number of interfaces. We will talk about interface in great details in a later post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// y now has a type of empty since that is the type of x.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type-alias-and-type-definition"&gt;
  &lt;/a&gt;
  Type Alias and Type Definition
&lt;/h3&gt;

&lt;p&gt;We already saw 2 examples of type aliases. &lt;code&gt;byte&lt;/code&gt; and &lt;code&gt;rune&lt;/code&gt; are type aliases of &lt;code&gt;uint8&lt;/code&gt; and &lt;code&gt;uint32&lt;/code&gt; respectively. This means every time we use &lt;code&gt;byte&lt;/code&gt; we are basically using an &lt;code&gt;uint8&lt;/code&gt;. We can also define our own type from another base type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// type alias&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasFloat&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5.0&lt;/span&gt; &lt;span class="c"&gt;// has type float64&lt;/span&gt;
&lt;span class="c"&gt;// type definition&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasInt&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;// has type myint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type alias is useful for moving types between packages for refactoring. Lets say we were using a struct type called &lt;code&gt;coolstuff&lt;/code&gt; in a package. If we move the &lt;code&gt;coolstuff&lt;/code&gt; to a different package, we would have to refactor all the places where &lt;code&gt;coolstuff&lt;/code&gt; were being used. One way to mitigate issues during the refactor type is to create a type alias in the old package where &lt;code&gt;coolstuff&lt;/code&gt; was.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;coolstuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coolstuff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type definition is used usually for creating enums. Or sometimes to extend existing types by attaching methods. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type int does not have any methods. But with &lt;code&gt;myint&lt;/code&gt; we can create a &lt;code&gt;double()&lt;/code&gt; method on our type. We have yet to talk about method and method receiver. We will talk about it in depth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-conversion"&gt;
  &lt;/a&gt;
  Type Conversion
&lt;/h2&gt;

&lt;p&gt;Basic numeric types can be converted with &lt;code&gt;T()&lt;/code&gt; syntax. Where &lt;code&gt;T&lt;/code&gt; is the type to be converted to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;355&lt;/span&gt;        &lt;span class="c"&gt;// type int&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c"&gt;// type float64&lt;/span&gt;
&lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c"&gt;// type byte (uint8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Struct type can be converted to and from each other as long as they have identical field names and types in identical order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="c"&gt;// try swapping these fields&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"john"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"paul"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There is a way to type case any struct to any other struct using the &lt;code&gt;unsafe&lt;/code&gt; package. This is rarely used. If you write code that uses unsafe package, you better have a solid reasoning for it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On function calls type conversion is automatic if the parameter can be converted to the desired type it gets converted. &lt;code&gt;int&lt;/code&gt; will be converted to &lt;code&gt;float&lt;/code&gt; but not the other way around because float to int can loose precision.&lt;/p&gt;

&lt;p&gt;For defined types, the conversion is uni directional. You can always use the underlying type in place of the defined type but not the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of mi=%T&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of i=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this get converted to myint type&lt;/span&gt;

&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this does not work&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inference"&gt;
  &lt;/a&gt;
  Inference
&lt;/h2&gt;

&lt;p&gt;We have seen example of inference a few times already. Every time we use the &lt;code&gt;:=&lt;/code&gt; operator, we are inferring the type of the left hand operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int because of the type of x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type inference also happens for numeric constants when passing to a function if the compiler does not detect a loss of precision or overflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;This is Part 4 of this Go crash course series.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Advices For Every Aspiring Web Developer </title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 06 May 2021 03:00:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</link>
      <guid>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</guid>
      <description>&lt;p&gt;I have been in this industry for nearly two years now. &lt;/p&gt;

&lt;p&gt;Spent those two years learning, observing, teaching, building, planning and once again, learning!&lt;/p&gt;

&lt;p&gt;Here's one thing I really want you all to know: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one knows it all.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not a complete expert, and neither is anyone out there. No one can memorize all language's syntax and rules from HTML, Git to React. &lt;/p&gt;

&lt;p&gt;Most highly proficient developers are very experienced when it comes to quickly finding  answers to their problems. They know where and when to look.&lt;/p&gt;

&lt;p&gt;Still, beginners are most likely to find themselves in a quandary regarding how to go about the interesting journey into web development, especially given the myriad of technologies present in the ecosystem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're looking for some kind of roadmap, I'll highly recommend &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React Course&lt;/a&gt; . It's very detailed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone with a fair amount of experience, here are 10 advices I have for beginners:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-start"&gt;
  &lt;/a&gt;
  Just Start.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"I don't have a computer",&lt;/em&gt;&lt;br&gt;
&lt;em&gt;"My computer is not capable enough",&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I am not smart enough",*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those are just excuses, and are not true at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a fact:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I started learning how to code websites without a computer. That's right, I used my Android phone to learn.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not smart enough?&lt;/strong&gt; Well I used think even worse of myself. Yet here I am. &lt;/p&gt;

&lt;p&gt;You will really need to set aside the excuses and put more effort into starting. You don't need any dedicated system or fancy set-up. Just a computer with a web browser and internet connection will do.&lt;/p&gt;

&lt;p&gt;As you progress, you will gain more self-confidence.&lt;/p&gt;

&lt;p&gt;Start now, thank me later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-detailed-resources"&gt;
  &lt;/a&gt;
  Find Detailed Resources
&lt;/h3&gt;

&lt;p&gt;As a Beginner, you're starting out with absolutely no knowledge of web development or programming. &lt;/p&gt;

&lt;p&gt;You don't know what HTML, CSS, JavaScript or Angular is. &lt;/p&gt;

&lt;p&gt;For this reason, it's very important that you go for courses and tutorials which contains a lot of information. &lt;/p&gt;

&lt;p&gt;I will highly recommend is &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt;. However, if you want something free, there are many sites and YouTube channels to find quality and comprehensive tutorials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-the-basics"&gt;
  &lt;/a&gt;
  Master the basics.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the basics to web development. It doesn't matter how or what you use in building your website, you'll always find HTML present.&lt;/p&gt;

&lt;p&gt;HTML has really evolved over the years. We now have a new standard which comes with more semantic elements to create meaningful markups and UX friendly websites.&lt;/p&gt;

&lt;p&gt;CSS is even more important. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one wants to navigate a site with no design, that would be horrendous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS is a very broad topic. At the start, it's very simple to use. However as you grow and build more websites professionally, you'll start to find CSS to be more interesting and perhaps difficult. That's why it's crucial you have a solid foundation.&lt;/p&gt;

&lt;p&gt;JavaScript is another very important and elementary technology to grasp. &lt;/p&gt;

&lt;p&gt;You have git, which is a source control software, DevTools for app debugging and assessment, and a text editor or IDE like VSCode.&lt;/p&gt;

&lt;p&gt;All of these are basics every Beginner must know. And once again, HTML To React covers the basics very well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-right-from-the-start"&gt;
  &lt;/a&gt;
  Practice Right From the Start.
&lt;/h3&gt;

&lt;p&gt;"HTML is so easy, I don't actually need to practice that." &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wrong Wrong Wrong.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't underrate any thing when it comes to web development. You always have something to learn, even when it may not seem like it. &lt;/p&gt;

&lt;p&gt;Start playing with code right from the beginning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-consistently-build-projects"&gt;
  &lt;/a&gt;
  Practice Consistently, Build Projects.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"The easiest way to learn something is by Constant practise" - over 1 million motivational speakers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;That statement is especially true with developers.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You might feel very confident with your abilities after watching a lengthy tutorial but I can assure you that implementation will not be as smooth. &lt;/p&gt;

&lt;p&gt;As you practice more, these things happen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You learn things which the tutor may have left out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You learn how to type faster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You internalize certain Syntax and procedures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get smarter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You buy me some coffee&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jokes aside, practicing is hands-down the best way to learn web development. &lt;/p&gt;

&lt;p&gt;It's also the most effective way to conquer your impostor syndrome. Take it from me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-an-online-developer-community"&gt;
  &lt;/a&gt;
  Join an online developer community
&lt;/h3&gt;

&lt;p&gt;This is a very crucial step, which has helped me a whole whole lot.&lt;/p&gt;

&lt;p&gt;Some of you may already know me on Twitter but for those of you who don't, I joined Twitter on December 2020 and since then some incredible things have happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have met some very friendly people&lt;/li&gt;
&lt;li&gt;I have grown to nearly 10,000 follows&lt;/li&gt;
&lt;li&gt;I made my first income&lt;/li&gt;
&lt;li&gt;I created an &lt;a href="//gumroad.com/l/WebDevBeginners"&gt;eBook&lt;/a&gt; and sold some copies&lt;/li&gt;
&lt;li&gt;I have learned a lot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You learn a whole lot when you are active in some community. &lt;/p&gt;

&lt;p&gt;Apart from Twitter which I highly recommend, here are some developer communities to consider&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Practical Dev&lt;/li&gt;
&lt;li&gt;HashNode&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;CodeWars&lt;/li&gt;
&lt;li&gt;HackerRank&lt;/li&gt;
&lt;li&gt;HackerNoon&lt;/li&gt;
&lt;li&gt;CodeNewbie&lt;/li&gt;
&lt;li&gt;FreeCodeCamp&lt;/li&gt;
&lt;li&gt;HackerNews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;p&gt;This is very important.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-tools-to-save-time"&gt;
  &lt;/a&gt;
  Use Tools To Save Time.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I am not telling you to spend $1000 dollars on some high end equipment, friend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the best IDEs, like &lt;strong&gt;VSCode&lt;/strong&gt;, provides you with a collection of highly useful extensions to save time and increase productivity.&lt;/p&gt;

&lt;p&gt;Here are some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Server&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Git History&lt;/li&gt;
&lt;li&gt;Auto Rename Tag&lt;/li&gt;
&lt;li&gt;Snippets&lt;/li&gt;
&lt;li&gt;Better Comments.&lt;/li&gt;
&lt;li&gt;Markdown All in One.&lt;/li&gt;
&lt;li&gt;Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out what these tools do and see just how useful they really are.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It would be rather unwise to abandon all these tools for drudgery, **don't you think?&lt;/em&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-repetitive-tasks"&gt;
  &lt;/a&gt;
  Automatic Repetitive Tasks
&lt;/h3&gt;

&lt;p&gt;A lot of processes and tasks are repetitive. &lt;/p&gt;

&lt;p&gt;You don't need to do the same thing over and over again. It's not just tedious and boring, it's also a waste of precious time. &lt;/p&gt;

&lt;p&gt;This is why I highly advise you get familiar with the command line. &lt;/p&gt;

&lt;p&gt;That way, instead of always typing out long commands every single time, you create a simple script that automates the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-is-your-friend"&gt;
  &lt;/a&gt;
  Google is your friend.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Wait&lt;/strong&gt;, let me rephrase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google is your friend if you know how to use it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to effectively search for solutions on Google. The accuracy of your search query may hold the balance between you remaining stuck and your salvation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-overwork-yourself"&gt;
  &lt;/a&gt;
  Don't Overwork Yourself.
&lt;/h3&gt;

&lt;p&gt;I feel attacked writing this particular part, but I am working on it.&lt;/p&gt;

&lt;p&gt;You should already know what happens when you overwork yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stress&lt;/li&gt;
&lt;li&gt;Fatigue&lt;/li&gt;
&lt;li&gt;Insomnia&lt;/li&gt;
&lt;li&gt;Mental stress&lt;/li&gt;
&lt;li&gt;Health Issues&lt;/li&gt;
&lt;li&gt;Aids&lt;/li&gt;
&lt;li&gt;Cancer &lt;/li&gt;
&lt;li&gt;Death &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I'm Joking lol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But seriously, don't overwork yourself. Take intermittent breaks while coding. Drink lots of water. Don't persist when you're faced with a very difficult bug. Personally when I confront a difficult problem I close my laptop and stare at the roof.&lt;/p&gt;

&lt;p&gt;For 20 minutes.&lt;/p&gt;

&lt;p&gt;Maybe I'm crazy, but you get the point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you got something valuable from this post. If you did, consider buying me favourite fruit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your support is highly appreciated.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>A simple guide to Action Cable </title>
      <author>Lucas Kuhn</author>
      <pubDate>Thu, 06 May 2021 02:00:19 +0000</pubDate>
      <link>https://dev.to/lucaskuhn/a-simple-guide-to-action-cable-2dk2</link>
      <guid>https://dev.to/lucaskuhn/a-simple-guide-to-action-cable-2dk2</guid>
      <description>&lt;p&gt;Action cable is the Rails way of implementing WebSockets - with some Rails magic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-it"&gt;
  &lt;/a&gt;
  Why use it
&lt;/h2&gt;

&lt;p&gt;Usually your client to connects with your server by making requests: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EXnZQgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkmkjgf1l8yh2cjbp9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EXnZQgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkmkjgf1l8yh2cjbp9h.png" alt="953F8214-7173-4755-B16E-AB6FC9983223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With ActionCable, you create an open connection between your client and your server, allowing a communication flow: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1E5K1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9wdg07e6kawodmz9tqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1E5K1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9wdg07e6kawodmz9tqo.png" alt="65223B82-BB95-4D36-8FC0-7EE6B1227ED4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;

&lt;p&gt;You have a simple blog - posts and comments - and multiple users reading that post. If one user adds a comment, the other one will never know: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci4TINmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38e37j4mkyo32myub12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci4TINmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38e37j4mkyo32myub12.gif" alt="Kapture 2021-05-05 at 22.53.50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But with the open connection from ActionCable, he will receive updates from that posts (the important comments from other people) &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U5emB7oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w07oj14gx6zk67sox5b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U5emB7oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w07oj14gx6zk67sox5b.gif" alt="Kapture 2021-05-05 at 22.44.44"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it
&lt;/h2&gt;

&lt;p&gt;First of all, generate a &lt;em&gt;channel&lt;/em&gt; for your Posts. This class will be able to broadcast updates to all clients listening:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails generate channel posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will create some files for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      create    test/channels/posts_channel_test.rb
      create  app/channels/posts_channel.rb
   identical  app/javascript/channels/index.js
   identical  app/javascript/channels/consumer.js
      create  app/javascript/channels/posts_channel.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#sending-messages"&gt;
  &lt;/a&gt;
  Sending messages
&lt;/h2&gt;

&lt;p&gt;We will work with our newly generated &lt;code&gt;posts_channel.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We want to specify from which channel to stream, so we can pass the an &lt;code&gt;id&lt;/code&gt;params and ask rails to make a stream for that post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsChannel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationCable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Channel&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribed&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;stream_for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, from anywhere in our app, we can call PostsChannel and ask it to broadcast  something to anyone listening to that post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;PostsChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this to our create action, to broadcast the comment to the post channel every time a comment is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="no"&gt;PostsChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Comment was successfully created."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that does nothing so far, since no one is listening to this broadcast. Moving forward! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receiving-messages"&gt;
  &lt;/a&gt;
  Receiving messages
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#opinionated-setup"&gt;
  &lt;/a&gt;
  Opinionated setup:
&lt;/h4&gt;

&lt;p&gt;I do not like to create a separate file for every consumer, I prefer to do the connection in script tags in the view. It feels more like a separate front end, where only the views that need a connection create one. To do so, change your &lt;code&gt;app/javascript/channels/consumer.js&lt;/code&gt; to expose the action cable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createConsumer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/actioncable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConsumer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createConsumer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Exposing the cable &lt;a href="https://guides.rubyonrails.org/v5.0/action_cable_overview.html#client-side-components"&gt;was the default according to official docs&lt;/a&gt; until Rails 6, where Webpacker was introduced&lt;/p&gt;

&lt;p&gt;By default, the generator  we used before creates a file in &lt;code&gt;app/javascript/channels/posts_channel.js&lt;/code&gt; &lt;br&gt;
This might be bad for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It it always required, so it always run &lt;/li&gt;
&lt;li&gt;We might not want to have everyone on our app to try and open a connection, just the ones listening to our post show page &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you can go ahead and delete the created posts_channel.js 🗑&lt;/p&gt;

&lt;p&gt;Now, we can make the listener to our broadcast in the view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/posts/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PostsChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connected to the channel:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;disconnected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Disconnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Received some data:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, upon opening our blog post page, we can see the connected message on our Console, and some Rails main that enabled this connection on our terminal: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dFIFJEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf26kih020li4qfmyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dFIFJEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf26kih020li4qfmyi.png" alt="82E5203A-8D8C-494E-8810-0CEACBF4AEAB"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;posts:Z2lkOi8vYWN0aW9uY2FibGUtYXBwL1Bvc3QvMg&lt;/code&gt; is the name of the channel created by rails when we told it to &lt;code&gt;stream_for post&lt;/code&gt; in our posts_channel file.&lt;/p&gt;

&lt;p&gt;And you’re done! 🎉 &lt;br&gt;
~Almost~&lt;/p&gt;

&lt;p&gt;While the above script received data, it doesn’t show it on the page. We can   update it to add the comment to our list upon receiving it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PostsChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;%= @post.id %&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(All functions are optional, I removed the disconnected and connected from here) &lt;/p&gt;

&lt;p&gt;And there you go, your app now talks to any browser listening to it via Action Cable: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHTKSFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbep90d1wcrfbzi6nlns.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHTKSFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbep90d1wcrfbzi6nlns.gif" alt="Kapture 2021-05-05 at 22.44.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;Rails Guide: &lt;br&gt;
 &lt;a href="https://guides.rubyonrails.org/action_cable_overview.html?fbclid=IwAR1e2hlrvUB0qPzmFZ1KB7JfkseRSAJUckbMkHV-caaBu-yH1LNxCI9fZEE"&gt;https://guides.rubyonrails.org/action_cable_overview.html&lt;/a&gt; &lt;br&gt;
Heroku Guide: &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fblog.heroku.com%2Freal_time_rails_implementing_websockets_in_rails_5_with_action_cable%3Ffbclid%3DIwAR3xePBKYPjiptHNHhW520hfxddI5moPOgCechqi3cGqFLXgRAUzU0c1s3w&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable&lt;/a&gt; &lt;br&gt;
Cable.yml Config: &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fissues%2F28118%3Ffbclid%3DIwAR0hiW4E9dEvz4Awl5EDeDXmePJW8acG05dn-9lporNyWngNjr5PxRC_82c&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://github.com/rails/rails/issues/28118&lt;/a&gt; &lt;br&gt;
Cable for specific pages: &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages?fbclid=IwAR0_Nz3ICdHB5JOE896e0HG51yhGiluGjzLuWCrlK2HecXVC545IMGJDk24"&gt;https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36438323%2Fpage-specific-actioncable%3Ffbclid%3DIwAR3DZ3CO7Biofa1DXfiWFXOurHdNbTrinUF_h5D8Bg6d_VT7jvrJIoADpxY&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://stackoverflow.com/questions/36438323/page-specific-actioncable&lt;/a&gt; &lt;br&gt;
Good JS subscription examples: &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages?fbclid=IwAR11aMICYd5jBjdPylyMmmNUFSvx16sHLjhBjD-zbn7rPKFsQgEg3KRmV2M"&gt;https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://samuelmullen.com/articles/introduction-to-actioncable-in-rails-5/?fbclid=IwAR0NZcr4c9vk-B9avdHWabUCreEj5sF1mf8F_n48SWdsgvzS48on-nV1e3c"&gt;https://samuelmullen.com/articles/introduction-to-actioncable-in-rails-5/&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36266746%2Factioncable-not-receiving-data%3Ffbclid%3DIwAR11aMICYd5jBjdPylyMmmNUFSvx16sHLjhBjD-zbn7rPKFsQgEg3KRmV2M&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://stackoverflow.com/questions/36266746/actioncable-not-receiving-data&lt;/a&gt; &lt;br&gt;
Usage with ActiveJob &lt;br&gt;
 &lt;a href="https://www.pluralsight.com/guides/creating-a-chat-using-rails-action-cable?fbclid=IwAR2BNC0JG3-ADFvZn5nC9OxiFnTHWBX5cMPPyYIWbSI4Npwc4Jav6lr1tr4"&gt;https://www.pluralsight.com/guides/creating-a-chat-using-rails-action-cable&lt;/a&gt; &lt;br&gt;
Cable on ReactNative &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/43510021/action-cable-not-receiving-response-on-client?fbclid=IwAR3DZ3CO7Biofa1DXfiWFXOurHdNbTrinUF_h5D8Bg6d_VT7jvrJIoADpxY"&gt;https://stackoverflow.com/questions/43510021/action-cable-not-receiving-response-on-client&lt;/a&gt; &lt;br&gt;
AnyCable&lt;br&gt;
&lt;a href="https://nebulab.com/blog/actioncable-vs-anycable-fight"&gt;Action Cable vs AnyCable: fight! | Nebulab&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>13 Unique and Fun APIs + Project ideas</title>
      <author>Dev Write Ups</author>
      <pubDate>Thu, 06 May 2021 01:51:07 +0000</pubDate>
      <link>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</link>
      <guid>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</guid>
      <description>&lt;p&gt;Being a developer is great - you can build almost anything you want! Sometimes, however, it's difficult to decide what to build next as there are so many different project ideas out there. To help you find your next project, I've come up with a list of APIs that you can play with and provided potential project ideas. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#removalai-api"&gt;
  &lt;/a&gt;
  &lt;a href="//bit.ly/removalai"&gt;RemovalAI API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" alt="Screenshot 2021-04-30 at 10-14-07 Background Remover Create Transparent Background.png"&gt;&lt;/a&gt;&lt;br&gt;
Background Removal API, Remove the background of any image* with 1 API call.  &lt;a href="//bit.ly/removalai"&gt;Removal.AI&lt;/a&gt;  makes it easy for you, it uses AI to remove background from your images, the final image which you get is more clean and good. Simple to use you just have to drag n drop your image into the website and see the awesome result.&lt;/p&gt;

&lt;p&gt;&lt;a href="//bit.ly/removalai"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com/developers"&gt;Unsplash API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" alt="Screenshot 2021-04-30 at 10-19-32 Unsplash Image API Free HD Photo API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unsplash is a website that host "beautiful, free images and photos that you can download and use for any projects". It's API can be used to fetch photos from Unsplash. The Unsplash API could be used to make an application with a background that changes to a random image at different times during the day. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/developers"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-movie-database-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.themoviedb.org/documentation/api"&gt;The Movie Database API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" alt="Screenshot 2021-04-30 at 10-44-24 The Movie Database (TMDb).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API service is for those of you interested in using our movie, TV show or actor images and/or data in your application. Our API is a system we provide for you and your team to programmatically fetch and use our data and/or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.themoviedb.org/documentation/api"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.slack.com/"&gt;Slack&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" alt="Screenshot 2021-04-30 at 10-22-10 Slack API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Slack API you can build tools that integrate directly with Slack. The Slack API can be used to build a chat-bot that can carry out various function such as setting reminders, checking the weather or communicating with other APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.slack.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotify-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" alt="Screenshot 2021-04-30 at 10-25-43 Web API Spotify for Developers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the Spotify API to create a home automation dashboard that shows what songs I'm currently playing and has controls to play, pause, skip tracks and set the volume (in addition to other functionality). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devto-api-and-hashnode-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.forem.com/api/"&gt;Dev.to API&lt;/a&gt; and  &lt;a href="https://api.hashnode.com/"&gt;Hashnode API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" alt="Screenshot 2021-04-30 at 10-27-34 DEV API (beta).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Dev.to's or Hashnode's own API you could create your own personal editor that can create, schedule and publish as well as edit old ones. While creating this app you'd have to build a markdown editor and a system to publish you articles to Dev.to. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.forem.com/api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-meal-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://themealdb.com/"&gt;The Meal API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" alt="Screenshot 2021-04-30 at 10-42-37 TheMealDB com.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mean API gived you access to random meal data to use it in your application. This API contains all the meal categories with images, ingredients, videos, the country of each meal and many more features. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://themealdb.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hue-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.meethue.com/"&gt;Hue API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" alt="Screenshot 2021-04-30 at 10-30-41 Hue Your Imaginations - Philips Hue Developer Program.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any products form the Phillips Hue family, it's likely that they can be controlled using the Hue API. The official app can become a bit busy when you have multiple devices, so you could build an app that can control Hue bulbs around the house, changing their color and brightness. You could also go back to basic and build a command-line app to control your lights!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.meethue.com/"&gt;Link &lt;/a&gt; to the API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#random-jokes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://icanhazdadjoke.com/"&gt;Random Jokes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" alt="jokes ai.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The random jokes API allows you to fetch random jokes data in an easy way using Fetch, Ajax XHR and etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://icanhazdadjoke.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-bad-quotes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://breakingbadquotes.xyz/"&gt;Breaking bad quotes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" alt="Screenshot 2021-04-30 at 10-50-07 Breaking Bad Quotes API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A free API to retrieve some quotes of Breaking Bad, bitch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://breakingbadquotes.xyz/"&gt;Link to API&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tronald-dump"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tronalddump.io/"&gt;Tronald Dump&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" alt="Screenshot 2021-04-30 at 11-01-14 Tronald Dump.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web archive for the dumbest things Donald Trump has ever said.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tronalddump.io/"&gt;Link &lt;/a&gt; to API &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marvel-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.marvel.com/"&gt; Marvel API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" alt="msd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Marvel Comics API allows developers everywhere to access information about Marvel's vast library of comics—from what's coming up, to 70 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.marvel.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;




&lt;p&gt;These and other APIs will assist you with supercharging your capacities. With dull issues dealt with, you'll be allowed to zero in with respect to your work that no one but you can perform.&lt;/p&gt;

&lt;p&gt;Thank your for Reading ⚡ We're here to see your amazing projects you will make with these APIs(Just comment it below and see 😊). Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>project</category>
      <category>programming</category>
    </item>
    <item>
      <title>Améliorer votre Python: Maîtriser les Listes</title>
      <author> </author>
      <pubDate>Thu, 06 May 2021 01:33:45 +0000</pubDate>
      <link>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</link>
      <guid>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</guid>
      <description>&lt;p&gt;*** &lt;small&gt;Je publie des articles régulièrement et en français. Pour ne rien manquer suivez moi en cliquant Follow&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Bonjour les amis!&lt;/p&gt;

&lt;p&gt;Aujourd'hui nous allons travailler sur un aspect très important pour tous ceux qui veulent devenir des experts Python: Les Listes.&lt;/p&gt;

&lt;p&gt;En Python, les listes sont une collection d'éléments dans un ordre particulier. Vous pouvez mettre tout ce que vous voulez dans une liste.&lt;/p&gt;

&lt;p&gt;Par convention, normalement, le nom de votre liste sera pluriel. Par exemple, une liste de produit peut être nommée: produits.&lt;/p&gt;

&lt;p&gt;Python utilise des crochets [] pour indiquer une liste, et les éléments individuels sont séparés par des virgules.&lt;/p&gt;

&lt;p&gt;Une liste peut être créé vide [] ou avec des éléments déjà à l'intérieur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# vide
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 

&lt;span class="c1"&gt;# Avec éléments
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iMac'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut contenir des éléments de différent type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;liste_divers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'autre'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut même contenir une autre liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il existe plusieurs façon d'ajouter des éléments à une liste:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Exemple une liste de fruits
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Ajouter un fruit à la liste
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['orange', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Insère un élément à la position x
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# Va inséré 'fraise' à la position 1
# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La liste est une base zéro. Cela signifie que la première position est 0 et la deuxième position est 1, etc. &lt;/p&gt;

&lt;p&gt;Vous pouvez d'ailleurs accéder à un élément unique de votre liste en utilisant les crochets []:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# premier item
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# dernier item
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La position -1 représente le dernier élément de la liste.&lt;/p&gt;

&lt;p&gt;Avec cette logique de position négative il est possible d'accédé à l'avant dernier élément en utilisant -2 et ainsi de suite pour le reste de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# banane
&lt;/span&gt;&lt;span class="n"&gt;avant_dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# melon
&lt;/span&gt;&lt;span class="n"&gt;avant_avant_dernier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# pomme
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour déterminer le nombre d'éléments dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;nb_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici comment accéder à une liste dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Marc
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Pierre
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d'enlever des éléments de la liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# enlève fraise
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enlever le dernier élément&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lastFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# enlever le dernier element
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de récupérer une partie (tranche) de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# ['orange', 'fraise' ,'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Même chose mais syntaxe abrégée
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# Quand le no n'est pas spécifié, Python commence à la position 0
&lt;/span&gt;
&lt;span class="c1"&gt;# Autre exemple
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;  &lt;span class="c1"&gt;# retourne les derniers items
# ['melon','banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Copie complète
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; 
&lt;span class="c1"&gt;# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Changer l'ordre. L'ajout de :-1 permet de renverser l'ordre de la tranche retournée.
&lt;/span&gt;&lt;span class="n"&gt;ma_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['pomme', 'fraise', 'orange'] 
&lt;/span&gt;
&lt;span class="c1"&gt;# Un autre exemple
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Va faire une copie et renverse l'ordre
# ['banane', ',melon', 'pomme', 'fraise', 'orange'] 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais plus simplement, il existe une méthode qui permet de renverser une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de créer une liste à partir d'un string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rouge, vert, bleu'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# La method split divise la string en éléments
#['rouge', 'vert', 'bleu']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour trier une liste vous utilisé la syntaxe suivante:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['banane', 'fraise', 'melon', 'orange', 'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Trier en ordre inversé
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['pomme', 'orange', 'melon', 'fraise', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Méthode pour fusionner / concatener deux listes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array concact
&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'jaune'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;couleurs2&lt;/span&gt; 
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;
&lt;span class="c1"&gt;# Concatener avec le "unpacking"
&lt;/span&gt;&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut être assigné à plusieurs variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assignation multiple
&lt;/span&gt;&lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# nom = 'iPhone' 
# prix = 599
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un Tuple est une liste non altérable. La syntaxe est des parenthèses a la place des crochets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Creation d'un Tuple
&lt;/span&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parcourir les éléments d'une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Itération dans la liste
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;couleurs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creation d'une liste avec un "range" de nombre&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;# 1 2 3 4 5 6 7 8 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La List Comprehension offre une syntaxe plus courte lorsque vous le souhaitez créer une nouvelle liste basée sur les valeurs d'une liste existante.&lt;/p&gt;

&lt;p&gt;Voici un exemple sans List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['banane','fraise', 'mangue']
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici un exemple avec List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La syntaxe des List Comprehension:&lt;br&gt;
 [expression for item in iterable if condition == True]&lt;/p&gt;

</description>
      <category>french</category>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 9</title>
      <author>David Tetreau</author>
      <pubDate>Thu, 06 May 2021 01:28:18 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</guid>
      <description>&lt;p&gt;Now that functions have been introduced, we will move on to some other concepts. Don't worry! We will come back to functions. There is a lot more to them. For Part 9 , we will explore objects. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;

&lt;p&gt;JavaScript objects are more complex than other data types such as strings or numbers. They store multiple collections of data. Here is an example of a JavaScript object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the object&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object is assigned to a variable, so you can easily work with it elsewhere by using just the variable's name. Also, the object has the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The object is enclosed within curly braces (mustaches)&lt;/li&gt;
&lt;li&gt;Each property has a name and value separated by a colon. We call this a "key: value" pair.&lt;/li&gt;
&lt;li&gt;The first key has the name of "breed". This key stores the value 'German Shepherd'. This value is a string. &lt;/li&gt;
&lt;li&gt; The object has three "key: value" pairs which are relevant to the variable name that they are stored in. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessing-objects"&gt;
  &lt;/a&gt;
  Accessing Objects
&lt;/h2&gt;

&lt;p&gt;Objects can be accessed in several different ways. First, you can access an object by dot notation. Here's an example with the same object from above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the value stored in breed&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name, followed by a dot, followed by the first key in the object was used to log the value stored in that key to the console. This would have worked for the other key value pairs as well (dog.color) and (dog.age).  You would have logged the value stored to both of those keys to the console. Try it!&lt;/p&gt;

&lt;p&gt;Another way to access the data stored in objects is to use bracket notation. Here's an example of bracket notation with the same object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//logs the value stored in color&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name followed by brackets containing the key inside of quotation marks was used to log the value stored in that key to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-objects"&gt;
  &lt;/a&gt;
  Changing Objects
&lt;/h2&gt;

&lt;p&gt;In addition to having the ability access the "key:value" pairs in an object, you can also change the data within the object. Here's an example using our example object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;breed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the delete operator deleted the "key:value" pair named breed. If you tried to log it to the console, undefined would be returned because it no longer exists. Adding "key:value" pairs to the dog object is just as easy. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;long haired&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hair&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//'long haired'&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding a key value pair involves nothing more than taking the object name and appending a key to it via dot or bracket notation and setting that equal to a value. This all occurs outside of the object. &lt;/p&gt;

&lt;p&gt;Take some time to manipulate the example object, add "key: value" pairs, delete "key: value" pairs, and experiment with assigning different data types to the values (objects, arrays, numbers, strings, booleans, undefined, null, etc). You will see that some of them work as values and some do not.  &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript's Strict Mode</title>
      <author>Jonathan Cohen</author>
      <pubDate>Thu, 06 May 2021 00:47:45 +0000</pubDate>
      <link>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</link>
      <guid>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</guid>
      <description>&lt;p&gt;Some devs would probably describe javascript as a flexible language. Flexible, in this case, would refer to JS allowing certain lines of code that don't fall under 'proper syntax' to run without issue. I've often heard this action be referred to as failing silently. 'Strict mode' could be used to combat this flexible behavior in a lot of cases. You could think of strict mode as a sort of JavaScript compass, pointing you in the general direction of your error.&lt;/p&gt;

&lt;p&gt;An example of not using strict mode vs. using strict mode could be seen with the variable assignment.  Not having strict mode while attempting to create a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;love = "Shovel Knight and Shield Knight" ;
love;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would run with JS considering the love variable a global variable created with the var keyword. With 'strict mode' set at the beginning of the script that variable assignment would not be allowed and JS would throw a reference error, showing you where the mistake was made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict' ;
love = "Shovel Knight and Shield Knight" ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" alt="shovel and shield"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would throw a reference error stating that love isn't defined. That error should let me know that I need to define the love variable with a keyword of either let or const. The var keyword can be considered as well but, for REASONS...... &lt;em&gt;ahem&lt;/em&gt;, we will just stick with let and const. &lt;/p&gt;

&lt;p&gt;Since realizing this was an actual thing in JS, I've been trying to make use of it as much as I can. It's helped me to get better with my syntax and there's so much more that I can do than help you avoid bad variable assignments. Give it a try if you get a chance &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Everything You Need to Know to Succeed as a Freelancer</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Thu, 06 May 2021 00:41:22 +0000</pubDate>
      <link>https://dev.to/tanoaksam/everything-you-need-to-know-to-succeed-as-a-freelancer-ffb</link>
      <guid>https://dev.to/tanoaksam/everything-you-need-to-know-to-succeed-as-a-freelancer-ffb</guid>
      <description>&lt;p&gt;First off: who am I to be offering this advice?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I've been freelancing off-and-on as a writer since 2012&lt;/li&gt;
&lt;li&gt;I have been self-employed or at least side-hustling for most of my adult life&lt;/li&gt;
&lt;li&gt;I currently freelance as a web developer and technical writer for agencies and tech startups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you follow me on &lt;a href="https://www.twitter.com/tanoaksam"&gt;Twitter&lt;/a&gt;, you're probably most interested in how to get started as a freelance web developer. &lt;/p&gt;

&lt;p&gt;If you're interested in getting paid to write, a lot of my advice will apply to you, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-need-a-vertical"&gt;
  &lt;/a&gt;
  1. You Need a Vertical
&lt;/h2&gt;

&lt;p&gt;When someone asks about your taste in music, the worst answer you can give is "I like a little bit of everything."&lt;/p&gt;

&lt;p&gt;OK, but- what are you &lt;em&gt;actually&lt;/em&gt; passionate about?&lt;/p&gt;

&lt;p&gt;The same goes for freelancing!&lt;/p&gt;

&lt;p&gt;Your "vertical" is the market or industry that you target.&lt;/p&gt;

&lt;p&gt;You need to be very specific about who you serve, and what you offer.&lt;/p&gt;

&lt;p&gt;I got my start in freelancing as a music journalist. I wrote about specific genres of music, and established a name for myself as a vocal supporter of my local music scene.&lt;/p&gt;

&lt;p&gt;I was "that local music guy."&lt;/p&gt;

&lt;p&gt;Now that I'm in tech, people know me as "that tree-hugging dude who's into the Jamstack."&lt;/p&gt;

&lt;p&gt;You need to be able to sum up your personal brand similarly.&lt;/p&gt;

&lt;p&gt;Speaking of which...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-need-a-personal-brand"&gt;
  &lt;/a&gt;
  2. You Need a Personal Brand
&lt;/h2&gt;

&lt;p&gt;I know. It sounds gross. It grossed me out for way longer than it should have.&lt;/p&gt;

&lt;p&gt;But look- if you interact with other people in public, guess what? &lt;/p&gt;

&lt;p&gt;You have a personal brand.&lt;/p&gt;

&lt;p&gt;And if you're intentional about crafting that brand, you can establish yourself as an authority on the services you offer within your vertical.&lt;/p&gt;

&lt;p&gt;This is another instance where it really pays off to "niche down." &lt;/p&gt;

&lt;p&gt;The more specific your niche is, the easier it will be for you to make yourself known as the go-to person within that niche.&lt;/p&gt;

&lt;p&gt;How do you become the go-to person for &lt;em&gt;anything?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-you-need-to-network"&gt;
  &lt;/a&gt;
  3. You Need to Network
&lt;/h2&gt;

&lt;p&gt;This was another one that I was allergic to in my younger years, and I just ended up shooting myself in the foot over the long run.&lt;/p&gt;

&lt;p&gt;Establishing professional connections doesn't have to feel weird or phony. &lt;/p&gt;

&lt;p&gt;It's only disingenuous if &lt;em&gt;you&lt;/em&gt; decide to be disingenuous about the relationships that you cultivate!&lt;/p&gt;

&lt;p&gt;The people you want to network with know how this game is played. &lt;/p&gt;

&lt;p&gt;They aren't going to think it's weird if you DM with a question or ask to have a chat. &lt;/p&gt;

&lt;p&gt;That's how we forge these relationships.&lt;/p&gt;

&lt;p&gt;Twitter is where the vast majority of my networking takes place. &lt;/p&gt;

&lt;p&gt;It's truly incredible the kinds of relationships you can build purely by sharing what you do.&lt;/p&gt;

&lt;p&gt;If you want to know more about how I tackled networking when I was brand new to the tech industry, check out my piece here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/tanoaksam/my-networking-strategy-for-making-meaningful-connections-in-tech-1702"&gt;My Networking Strategy for Making Meaningful Connections in Tech&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-need-clients"&gt;
  &lt;/a&gt;
  4. You Need Clients
&lt;/h2&gt;

&lt;p&gt;Well, duh. Easier said than done, right?&lt;/p&gt;

&lt;p&gt;How the heck do you land that first client when you don't have any experience, nor much of a professional network?&lt;/p&gt;

&lt;p&gt;The short answer is: &lt;/p&gt;

&lt;p&gt;Be very vocal about the services you offer!&lt;/p&gt;

&lt;p&gt;Your first client could easily be a family member, a friend of a friend, that dude from college you're still friends with on Facebook...&lt;/p&gt;

&lt;p&gt;Start with your personal network. You don't have to treat it like multi-level marketing or anything.&lt;/p&gt;

&lt;p&gt;Just make it known what you're up to and what you can do.&lt;/p&gt;

&lt;p&gt;You never know who might know somebody who knows somebody who might want to hire you.&lt;/p&gt;

&lt;p&gt;If that doesn't work for you, another approach is cold-emailing.&lt;/p&gt;

&lt;p&gt;I had some success at this when I was just getting started. &lt;/p&gt;

&lt;p&gt;That said: it's a numbers game. It can be &lt;em&gt;very&lt;/em&gt; tedious work, and a full-time commitment just to find &lt;em&gt;prospective&lt;/em&gt; leads.&lt;/p&gt;

&lt;p&gt;The vast majority of emails you send will be ignored.&lt;/p&gt;

&lt;p&gt;For every 100 &lt;em&gt;carefully targeted, meticulously curated&lt;/em&gt; emails you send, you might expect to close 1 or 2 deals if you're lucky.&lt;/p&gt;

&lt;p&gt;Nobody said it was easy.&lt;/p&gt;

&lt;p&gt;If you want to know more about how I did it, you can read about my workflow here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tanoaksam.hashnode.dev/freelancing-workflow"&gt;My Freelancing Workflow, From Cold Leads to Paid Invoices&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-need-patience-and-diligence"&gt;
  &lt;/a&gt;
  5. You Need Patience and Diligence
&lt;/h2&gt;

&lt;p&gt;I don't care how talented you are - this isn't going to happen overnight.&lt;/p&gt;

&lt;p&gt;The only way this is going to work over the long-term is if you are diligent about &lt;em&gt;establishing your reputation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;People who casually follow me on Twitter know me as a freelancer in the tech industry - &lt;em&gt;that wasn't an accident!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I put in the work over time, and it has paid off.&lt;/p&gt;

&lt;p&gt;Essentially all of my marketing happens on Twitter now.&lt;/p&gt;

&lt;p&gt;People approach me with work now - sometimes more than I can take on.&lt;/p&gt;

&lt;p&gt;All because I have been intentional about how I present my personal brand to the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-you-need-to-upsell"&gt;
  &lt;/a&gt;
  6. You Need to Upsell
&lt;/h2&gt;

&lt;p&gt;Who are the people you should be targeting the most with your marketing?&lt;/p&gt;

&lt;p&gt;The people who are already paying you!&lt;/p&gt;

&lt;p&gt;The simplest way to land more work is to make it known to your existing clients that you can be hired for additional work.&lt;/p&gt;

&lt;p&gt;See something that needs doing? Write a proposal outlining how you would do it, and why it matters!&lt;/p&gt;

&lt;p&gt;Ask - directly - for referrals!&lt;/p&gt;

&lt;p&gt;There's a good chance your clients know other people who might want to hire you. &lt;/p&gt;

&lt;p&gt;But most people aren't going to go out of their way to make those connections on your behalf.&lt;/p&gt;

&lt;p&gt;Unless you ask.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-you-need-multiple-revenue-streams"&gt;
  &lt;/a&gt;
  7. You Need Multiple Revenue Streams
&lt;/h2&gt;

&lt;p&gt;My career as a music journalist imploded in 2014 when my one long-term client suddenly shut down and I couldn't sustain myself off of free concert tickets alone.&lt;/p&gt;

&lt;p&gt;I put all of my eggs in one basket, and didn't prioritize forging stronger relationships with other potential clients while I was so comfortable with the one.&lt;/p&gt;

&lt;p&gt;When you're self-employed, nobody owes you a paycheck just for showing up.&lt;/p&gt;

&lt;p&gt;When the contract is fulfilled - or otherwise can't be renewed - you're on your own.&lt;/p&gt;

&lt;p&gt;Your networking and marketing efforts can't stop simply because the work is flowing steadily today.&lt;/p&gt;

&lt;p&gt;Even if you have one or two big clients paying your bills at the moment, you should always be diligent about forging new relationships and strengthening older ones. &lt;/p&gt;

&lt;p&gt;You never know where your next big deal might come from.&lt;/p&gt;

&lt;p&gt;Also- consider ways you might be able to "productize" your services.&lt;/p&gt;

&lt;p&gt;If you're a subject matter expert, you might write a book or launch a course.&lt;/p&gt;

&lt;p&gt;If you have a particular service with a process that looks pretty much the same for all clients - like an SEO audit or a content strategy consultation - you could turn this into a flat-rate product rather than charging an hourly fee.&lt;/p&gt;

&lt;p&gt;I'm not a fan of the term "passive income" - the work it takes upfront is anything but passive.&lt;/p&gt;

&lt;p&gt;That said - it never hurts to have some extra cash show up on a regular basis for work you completed months or years ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-need-tools-to-make-your-life-easier"&gt;
  &lt;/a&gt;
  8. You Need Tools to Make Your Life Easier
&lt;/h2&gt;

&lt;p&gt;I don't know what I would do without Freshbooks for accounting and invoicing.&lt;/p&gt;

&lt;p&gt;For digital contracts you can use HelloSign or DocuSign - I've found them to be pretty much the same on the free tier.&lt;/p&gt;

&lt;p&gt;All of my research, note-taking, and writing happens in &lt;a href="https://www.obsidian.md"&gt;Obsidian&lt;/a&gt;. There are many other options out there for this kind of thing, but I'm happy with my decision.&lt;/p&gt;

&lt;p&gt;You will probably want to set yourself up with Google Workspace for a custom domain email, and Search Console to keep track of analytics on your portfolio site. &lt;/p&gt;

&lt;p&gt;(You &lt;em&gt;do&lt;/em&gt; have a portfolio site, right?)&lt;/p&gt;

&lt;p&gt;Finally, consider ways to manage and track your time. &lt;/p&gt;

&lt;p&gt;Calendly is a fantastic tool for streamlining the process of scheduling meetings.&lt;/p&gt;

&lt;p&gt;I'm a big fan of the Pomodoro method for time management, which involves setting a timer for 25 minutes of focused work, followed by a 5 minute break. &lt;/p&gt;

&lt;p&gt;This is how I structure my daily schedule and keep track of how much time I invest in any given project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-you-enjoyed-this-piece-and-you-want-to-keep-up-with-my-work-you-can-sign-up-for-my-email-newsletter-through-this-link-i-promise-to-make-every-email-something-you-will-be-excited-to-open"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you enjoyed this piece and you want to keep up with my work, you can &lt;a href="https://buttondown.email/samuelsycamore"&gt;sign up for my email newsletter through this link&lt;/a&gt;. I promise to make every email something you will be excited to open!&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>freelancing</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deconstructing a bitcoin transaction</title>
      <author>thunderbiscuit</author>
      <pubDate>Thu, 06 May 2021 00:38:55 +0000</pubDate>
      <link>https://dev.to/thunderbiscuit/deconstructing-a-bitcoin-transaction-4l2n</link>
      <guid>https://dev.to/thunderbiscuit/deconstructing-a-bitcoin-transaction-4l2n</guid>
      <description>&lt;p&gt;Here is a hex dump of the raw bitcoin transaction &lt;a href="https://blockstream.info/tx/e778e8765fdbb60f62e267de4705789f526a5fe9bb0c0f5e56ab4f566c5240eb"&gt;&lt;code&gt;e778e8765fdbb60f62e267de4705789f526a5fe9bb0c0f5e56ab4f566c5240eb&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0H7oScC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbn2zkebn9s1t8zhbgc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0H7oScC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbn2zkebn9s1t8zhbgc1.png" alt="raw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've seen bitcoin transactions expressed in this form if you've ever tried to dive into the more technical bitcoin books, or have just been lurking around in the bitcoin community for long enough. They seem arcane and of impenetrable complexity, but it turns out that that's not the case at all; the above transaction, for example, is composed of 15 small building blocks, each one easy to find and interpret.&lt;/p&gt;

&lt;p&gt;Studying the structure of bitcoin transactions in their "true" form is a valuable quest for all bitcoiners. This article is written with the curious bitcoiner in mind looking to get a high level understanding of what exactly gets passed around from node to node on the network. Let's get to it.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#priors"&gt;
  &lt;/a&gt;
  Priors
&lt;/h2&gt;

&lt;p&gt;To really understand all pieces of a transaction, a basic grasp of 4 foundational, non-bitcoin concepts are important: &lt;strong&gt;bytes and hexadecimal notation&lt;/strong&gt;, &lt;strong&gt;endianness&lt;/strong&gt;, &lt;strong&gt;variable-length fields&lt;/strong&gt;, and &lt;strong&gt;varints&lt;/strong&gt;. I address all 4 of those in the sections below, but if you are familiar with computer science in general you most definitely won't need this kind of entry level review. If you are not familiar with them, however, I think you'll find them enlightening, and they will most definitely serve you well on your journey into bitcoin.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-bytes-and-hexes"&gt;
  &lt;/a&gt;
  1. Bytes and Hexes
&lt;/h4&gt;

&lt;p&gt;You might have seen "raw" bitcoin transactions printed in hexadecimal format (the transaction above is an example of that). But of course computers only speak the language of bits (0s and 1s). A bitcoin transaction in it's computer-understandable form is therefore a string of binary digits. Moreover, those 0s and 1s are always kept in small groups of 8 bits, called &lt;strong&gt;bytes&lt;/strong&gt;. Here is an example of a byte: &lt;code&gt;1101 0110&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with binary code is that it's not easy for humans to parse. The transaction above (and it's not even a big one) written in binary format is exactly 1,800 digits (&lt;code&gt;10101011100101000101100000110100000011101...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But binary numbers are still numbers; if we write them for humans we can write them in any we want that works best. Decimal notation (our regular number system), Roman numerals, Korean characters. etc.&lt;/p&gt;

&lt;p&gt;Decimal notation would be an obvious candidate, but it turns out that it is not very convenient for working with bytes. Take for example the bytes &lt;code&gt;1101 0110&lt;/code&gt; and &lt;code&gt;0000 0010&lt;/code&gt;. In decimal notation, the first number is &lt;code&gt;214&lt;/code&gt;, whereas the second number is &lt;code&gt;3&lt;/code&gt;. In fact every byte, when written in decimal notation, will take between 1 and 3 digits. That's not convenient, because then you'd never know when a byte ends and when the next one starts—how many bytes is &lt;code&gt;21431042&lt;/code&gt;? There can be multiple interpretations.&lt;/p&gt;

&lt;p&gt;Instead, a preferred numbering system for writing bytes for human consumption is the &lt;a href="https://en.wikipedia.org/wiki/Hexadecimal"&gt;hexadecimal number notation&lt;/a&gt;. A full explanation is beyond the scope of this post, but you should know that the number of possible arrangements of 4 bits is 16, and that the hexadecimal notation system has exactly... 16 digits. They map out nice and tidy with &lt;strong&gt;half a byte&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADOahvSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skphq0vhceix9nksikus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADOahvSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skphq0vhceix9nksikus.png" alt="hexes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we can now represent our bytes as two hexadecimal digits, for a clean notation. Each byte is two hexadecimal digits, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rt_vVTup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1nmvucudqvbot4iimg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rt_vVTup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1nmvucudqvbot4iimg2.png" alt="bytes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're looking at a big hexadecimal string like the one at the beginning of this post, you're really just looking at a neat little representation of a bunch of bytes, with each block of two characters representing one byte.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-bigendian-and-littleendian-ordering"&gt;
  &lt;/a&gt;
  2. Big-Endian and Little-Endian Ordering
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Endianness"&gt;Endianness&lt;/a&gt; refers to the order of bytes within a representation of a number. You can think of it as the "direction" in which bytes should be read for meaning, while understanding that either direction does not influence the ultimate meaning of the bytes. &lt;/p&gt;

&lt;p&gt;Take for example the number &lt;em&gt;one thousand five hundred and ninety two&lt;/em&gt;. You are probably used to reading a number like this in the following way: &lt;code&gt;1592&lt;/code&gt;. At the same time, if I told you that I had this weird habit of always writing my numbers from right to left, you would still know that &lt;code&gt;2951&lt;/code&gt; means &lt;em&gt;one thousand five hundred and ninety two&lt;/em&gt;, because you'd know me and understand my weird habit.&lt;/p&gt;

&lt;p&gt;It turns out that some computer architectures are more efficient when working with numbers if they are stored with the &lt;em&gt;least significant byte first&lt;/em&gt; (the equivalent of reading right to left), and so a lot of the numbers we use when communicating with computers are "translated" to that format. We call this computer version of a number &lt;em&gt;little-endian&lt;/em&gt;, because it starts with the &lt;em&gt;little end&lt;/em&gt;. When shifting from big-endian to little-endian, it's the &lt;em&gt;bytes&lt;/em&gt; that we shift. This means shifting the last two characters (remember that one byte equals two hexadecimal characters) for the two up front, and so on. &lt;/p&gt;

&lt;p&gt;The number 220,000 in hexadecimal notation is written &lt;code&gt;03 5b 60&lt;/code&gt;, but expressed in little-endian it becomes &lt;code&gt;60 5b 03&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A real life example would be our transaction id for this article, which if referred to within a bitcoin transaction will be written in its little-endian form, but if you try to look it up in a block explorer, you'll need it's "human", big-endian version:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIh5oUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj9nhxaiz1ipixq2wn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIh5oUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj9nhxaiz1ipixq2wn4.png" alt="endian"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-variablelength-fields"&gt;
  &lt;/a&gt;
  3. Variable-Length Fields
&lt;/h4&gt;

&lt;p&gt;You'll notice that the bytes in a transaction are all glued together in one big continuous blob. How does the software know where an input start and where it ends? How does it know if a certain byte belongs to the number of bitcoin transmitted or to the receiving address? The flexibility offered by bitcoin transactions implies that there are an extremely rich number of combinations possible, and that the scripts required for unlocking utxos vary greatly in length.&lt;/p&gt;

&lt;p&gt;One way to deal with this uncertainty would be to give every field a set length in bytes. This is what the version field does, for example: the version number of a transaction is always written in the first 4 bytes of a transaction (see the &lt;code&gt;01000000&lt;/code&gt; number that starts the transaction below). In a lot of cases, however the length needed to transmit the necessary data differs widely between transactions: unlocking scripts for a simple Pay to Public Key hash might be 106 bytes long like in the transaction we are using in this post, but they can easily be 5 times that size on complex multisig scripts. Giving a fixed length to that data section would not only be inefficient (a lot of transactions would not need that much space at all), it would also be limiting, because scripts would have to stay under that size.&lt;/p&gt;

&lt;p&gt;A better way to deal with this and keep both flexibility and efficiency is by using a small marker at the beginning of a variable-length section that will give the software an indication of the lenght of the  section to follow. Here is an example of a series of 6 bytes: &lt;code&gt;05 e7 78 e8 76 5a&lt;/code&gt;. If we knew that the first byte was a indicator byte for the length of the section, a plain-english reading of this would then look like this: &lt;/p&gt;

&lt;p&gt;byte 1: &lt;code&gt;05 &amp;gt;&amp;gt;&amp;gt; the following section is 5 bytes long&lt;/code&gt;&lt;br&gt;
bytes 2 to 6: &lt;code&gt;e7 78 e8 76 5a &amp;gt;&amp;gt;&amp;gt; data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin transactions use a mix of fixed-length fields and variable-length fields. I'll make note of which ones use which in the description of each parts.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-varints"&gt;
  &lt;/a&gt;
  4. Varints
&lt;/h4&gt;

&lt;p&gt;Variable Integers (varints) are a way to write a very wide range of numbers in a way that minimizes their cost on transaction space.&lt;/p&gt;

&lt;p&gt;To understand how they accomplish this, first note that the bigger the number we need to write down, the more bytes it requires. &lt;em&gt;Three&lt;/em&gt; is written as &lt;code&gt;00000010&lt;/code&gt; (1 byte), whereas &lt;code&gt;two million twenty nine thousand five hundred and twelve&lt;/code&gt; is written as &lt;code&gt;000111101111011111001000&lt;/code&gt; (3 bytes).&lt;/p&gt;

&lt;p&gt;The problem we are faced with is that all bytes are glued together in one long string of 0s and 1s, and the software needs to know exactly where each of the fields pertinent to a transaction start and end. One way to deal with this is to give fields a never-changing length, so that we always know when they end. This is what the version field does, for example: the version number of a transaction is always written in the first 4 bytes of a transaction (see the &amp;lt;code &lt;code&gt;01000000&lt;/code&gt; number that starts the transaction below). The problem with this approach is that if we sometimes need to accommodate numbers of great size, we will need to give the field a length with the ability to accommodate all of those numbers (say 8 bytes dedicated to a particular field). But if in most cases we only use the field for very small numbers, then a lot of those bytes are just wasted, because those small numbers only need 1 byte. If this type of field is required in multiple places in a transaction, all that waste starts to add up. Rather, we need a solution that will use &lt;em&gt;only the space required&lt;/em&gt; for the number we wish to write. This is what varints do; they use 1 byte for most of our use cases, and up to 9 bytes for the really big numbers we don't expect often.&lt;/p&gt;

&lt;p&gt;The way this is achieved is simple. A single byte can normally be used to represent the numbers 0 to 255. If the number we need represented (say, the number of inputs in a transaction) is &lt;em&gt;below&lt;/em&gt; 253, we write it in the first byte, and the software knows that that's all there is to it. If the number is big enough that it needs a few more bytes to write, we instead write &lt;em&gt;253&lt;/em&gt; in that first byte, which will be interpreted by the software as "read the next two bytes as the actual number I need to communicate". If the number is even bigger, we use 254 instead, meaning "read the next 4 bytes for the actual number", and if our number needs even more, we use 255, which implies the next 8 bytes are the actual representation of our number. Easy and efficient; most varints used in transactions never need to be more than one byte, but they can all grow to accommodate incredibly large numbers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-legacy-bitcoin-transaction"&gt;
  &lt;/a&gt;
  A Legacy Bitcoin Transaction
&lt;/h2&gt;

&lt;p&gt;A "legacy" bitcoin transaction is the name we give a transaction that does not implement &lt;em&gt;Segregated Witness&lt;/em&gt;, a newer form of transaction in which the "witness" data (fields 5 and 6 below) are put into their own special section (we say they are &lt;em&gt;segregated&lt;/em&gt;, hence the name).&lt;/p&gt;

&lt;p&gt;These legacy transactions are perfectly valid bitcoin transactions, but they are being used less and less because of the efficiency gains made by the segregated witness approach resulting in lower fees, as well as its fix of the &lt;em&gt;transaction malleability&lt;/em&gt; bug, enabling, among others, the creation of lightning channels. Legacy transactions are easy to identify because they involve unlocking utxo(s) belonging to addresses starting with a 1. &lt;/p&gt;

&lt;p&gt;This article breaks down a typical legacy transaction where one utxo is used and spent into two: one payment to a payee, and one payment to a change address. It contains 15 different fields, and I describe each of their purpose below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ8IZcdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeo7hh51zpi6gphyeh17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ8IZcdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeo7hh51zpi6gphyeh17.png" alt="transaction"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2auUYGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d16rdos2vz1r74dh2llz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2auUYGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d16rdos2vz1r74dh2llz.png" alt="parts"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-transaction-version-number"&gt;
  &lt;/a&gt;
  [1] transaction version number
&lt;/h4&gt;

&lt;p&gt;This field specifies the type of transaction being transmitted. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes) and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The field indicates that this transaction is of version 1.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-number-of-inputs"&gt;
  &lt;/a&gt;
  [2] number of inputs
&lt;/h4&gt;

&lt;p&gt;This field expresses how many inputs will be unlocked by the transaction. Each of those inputs will need to be identified (here with fields 3 and 4), and unlocked (here with fields 5 and 6). In our case there is only one input, and so we only need to go through this loop once, but in the case where there are many inputs, we repeat the fields 3 to 6 as many times as there are inputs. This field is a &lt;strong&gt;varint&lt;/strong&gt;, is &lt;strong&gt;little-endian&lt;/strong&gt;, and can grow up to 9 bytes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The byte indicates that the transaction unlocks only one UTXO.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-previous-transaction-id"&gt;
  &lt;/a&gt;
  [3] previous transaction id
&lt;/h4&gt;

&lt;p&gt;This field expresses the transaction which contains the output to be unlocked by the unlocking script in the coming fields 5 and 6. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (32 bytes), and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;04dde43b0e4724f1e3b45782a9bfbcc91ea764c7cb1c245fba1fefa175c3a5d0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because the field is little-endian, if you wish to search for that transaction in a block explorer you'll need to convert it to big endian first: &lt;a href="https://blockstream.info/tx/d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04"&gt;&lt;code&gt;d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04&lt;/code&gt;&lt;/a&gt;. A look at that transaction will reveal that there were 2 outputs to it. Which one of those two is unlocked by the signature script is defined in the next field.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-ouput-number-in-previous-transaction"&gt;
  &lt;/a&gt;
  [4] ouput number in previous transaction
&lt;/h4&gt;

&lt;p&gt;Defining the transaction an output comes from is not precise enough—there might be more than one. We need to know which output from that transaction is being unlocked, and this field expresses that. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes), and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the number 1 written in little endian, indicating that the output being unlocked is the second one in transaction &lt;a href="https://blockstream.info/tx/d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04"&gt;&lt;code&gt;d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04&lt;/code&gt;&lt;/a&gt;. It is valid for 300,000 satoshis, or 0.00300000 bitcoin.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-size-of-the-unlocking-script"&gt;
  &lt;/a&gt;
  [5] size of the unlocking script
&lt;/h4&gt;

&lt;p&gt;This field indicates the number of bytes taken by the unlocking script, the field that follows it. It is a &lt;strong&gt;varint&lt;/strong&gt;, and can take up to 9 bytes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;6a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 106, meaning our unlocking script (field 6) will be 106 bytes long (212 hex characters).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-unlocking-script"&gt;
  &lt;/a&gt;
  [6] Unlocking script
&lt;/h4&gt;

&lt;p&gt;You can think of the unlocking script as the key that unlocks the utxo. If any of the unlocking scripts fail for any of the input utxos, the whole transaction fails. If all unlocking scripts succeed, the signer has proven they have ownership of the coins, and the transaction can move forward to the next steps. This field is of &lt;strong&gt;variable length&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;4730440220519f7867349790ee441e83e545afbd25b954a34e0733cd4da3b5f1e5588625050220166730d053c3672973bcb2bb1a977b747837023b647e3af2ac9c15728b0681da01210236ccb7ee3a9f154127f384a05870c4fd86a8727eab7316f1449a0b9e65bfd90d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The unlocking script is written in a language called &lt;em&gt;Script&lt;/em&gt;, a language unique to bitcoin. It is beyond the scope of this article to look at the exact unlocking script used in this transaction, but we know it was a valid script, since the transaction was indeed propagated by the network, and later on mined.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-sequence-number"&gt;
  &lt;/a&gt;
  [7] sequence number
&lt;/h4&gt;

&lt;p&gt;The sequence number is a field initially designed for a purpose it never fulfilled. Nowadays it is often disabled  by setting it to &lt;code&gt;ffffffff&lt;/code&gt;. It can used to signal that a transction  is replace-by-fee enabled as per &lt;a href=""&gt;BIP 125&lt;/a&gt;, by setting the field equal to any number below &lt;code&gt;ffffffff -1&lt;/code&gt;. In some cases, the field is used to set timelocks (to enable this, verion 2 of a transaction must be declared in field 1). It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes) and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;ffffffff&lt;/code&gt;&lt;br&gt;
The field is disabled in this transaction.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-number-of-outputs"&gt;
  &lt;/a&gt;
  [8] number of outputs
&lt;/h4&gt;

&lt;p&gt;This field expresses how many outputs the transaction will create. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;02&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The transaction has two outputs.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-amount-going-to-output-0"&gt;
  &lt;/a&gt;
  [9] amount going to output 0
&lt;/h4&gt;

&lt;p&gt;This field expresses the amount of bitcoin being locked in output 0, expressed in satoshis. It is a &lt;strong&gt;fixed-length&lt;/strong&gt; field of 8 bytes, and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;5d36010000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output 0 locks in 79,453 satoshis.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-size-of-locking-script-for-output-0"&gt;
  &lt;/a&gt;
  [10] size of locking script for output 0
&lt;/h4&gt;

&lt;p&gt;This field expresses the size of the locking script for output 0. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;19&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 25, meaning our locking script will be 25 bytes long (50 hex characters)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#11-locking-script-for-output-0"&gt;
  &lt;/a&gt;
  [11] locking script for output 0
&lt;/h4&gt;

&lt;p&gt;This field is the locking script for output 0. It is a &lt;strong&gt;variable-length&lt;/strong&gt; field.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;76a91478364a559841329304188cd791ad9dabbb2a3fdb88ac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can think of this field as a of lock we put on output 0. It is written in Script, bitcoin's own programming language.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#12-amount-going-to-output-1"&gt;
  &lt;/a&gt;
  [12] amount going to output 1
&lt;/h4&gt;

&lt;p&gt;This field expresses the amount of bitcoin being locked in output 1, expressed in satoshis. It is a &lt;strong&gt;fixed-length&lt;/strong&gt; field of 8 bytes, and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;605b030000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output 1 locks in 220,000 satoshis.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#13-size-of-locking-script-for-output-1"&gt;
  &lt;/a&gt;
  [13] size of locking script for output 1
&lt;/h4&gt;

&lt;p&gt;This field expresses the size of the locking script for output 1. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;19&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 25, meaning our locking script will be 25 bytes long (50 hex characters).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#14-locking-script-for-output-1"&gt;
  &lt;/a&gt;
  [14] locking script for output 1
&lt;/h4&gt;

&lt;p&gt;This field is the locking script for output 0. It is a variable-length field. This is a &lt;strong&gt;variable-length&lt;/strong&gt; field.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;76a914064e0aa817486573f4c2de09f927697e1e6f233f88ac&lt;/code&gt;&lt;br&gt;
We can think of this field as a of lock we put on output 1. It is written in Script, bitcoin's own programming language.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#15-nlocktime"&gt;
  &lt;/a&gt;
  [15] nLocktime
&lt;/h4&gt;

&lt;p&gt;nLocktime field allows for a transaction to be unspendable until a certain point in the future. If the field is set to &lt;code&gt;00000000&lt;/code&gt;, the transaction is spendable right away. If they field is any number &lt;em&gt;below&lt;/em&gt; 500 million, it is intepreted as a block height. If it is &lt;em&gt;above&lt;/em&gt; 500 million, it is interpreted as a Unix timestamp. Transactions with locktimes on them will not be propagated by nodes if they are not valid at the time a node see it, hence the sender must wait until the transaction is valid before broadcasting.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;00000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our example the nLocktime field is such that the transaction is spendable right away.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-notes-on-the-above-transaction"&gt;
  &lt;/a&gt;
  Some notes on the above transaction
&lt;/h2&gt;

&lt;p&gt;The example used here is a type of transaction known as a &lt;em&gt;Pay to Public Key Hash&lt;/em&gt;, or P2PKH. It is the simplest form of transactions we see nowadays. The transaction hex has 450 characters, and the transaction is therefore 225 bytes in size.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#txid"&gt;
  &lt;/a&gt;
  TXID
&lt;/h2&gt;

&lt;p&gt;The txid (transaction identifier) is derived from hashing the transaction data twice using SHA256. You can test this with our example transaction right in your shell. The following command basically takes the hex dump of the transaction, converts it to binary, hashes it, then converts that result to binary again, and hashes it once more. It is then printed to console in little-endian, hex format. Notice that you'll need to convert it to big-endian if you want to use it in a block explorer!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;010000000104dde43b0e4724f1e3b45782a9bfbcc91ea764c7cb1c245fba1fefa175c3a5d0010000006a4730440220519f7867349790ee441e83e545afbd25b954a34e0733cd4da3b5f1e5588625050220166730d053c3672973bcb2bb1a977b747837023b647e3af2ac9c15728b0681da01210236ccb7ee3a9f154127f384a05870c4fd86a8727eab7316f1449a0b9e65bfd90dffffffff025d360100000000001976a91478364a559841329304188cd791ad9dabbb2a3fdb88ac605b0300000000001976a914064e0aa817486573f4c2de09f927697e1e6f233f88ac00000000 | xxd &lt;span class="nt"&gt;-revert&lt;/span&gt; &lt;span class="nt"&gt;-plain&lt;/span&gt; | &lt;span class="nb"&gt;sha256sum&lt;/span&gt; | xxd &lt;span class="nt"&gt;-revert&lt;/span&gt; &lt;span class="nt"&gt;-plain&lt;/span&gt; | &lt;span class="nb"&gt;sha256sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#on-signing-and-broadcasting"&gt;
  &lt;/a&gt;
  On Signing and Broadcasting
&lt;/h2&gt;

&lt;p&gt;An often overlooked aspect of bitcoin transactions is how creating them and broadcasting them are two completely separate tasks, and that they can be done independently of each other. We mostly use wallets that construct and sign transactions and &lt;em&gt;also&lt;/em&gt; broadcast them for us, but it does not have to be so.&lt;/p&gt;

&lt;p&gt;This is what projects like &lt;a href="https://txtenna.com/"&gt;TxTenna&lt;/a&gt; and the Lightning Network are leveraging.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;I hope this article proved to be an interesting way to peel the first layer on bitcoin transactions if you had not seen them this way before. More to come!&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
