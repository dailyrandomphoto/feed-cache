<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fully Isolating Resources in a Multi-Tenant SaaS on Google Cloud using a Token Vending Machine</title>
      <author>Brian Burton</author>
      <pubDate>Fri, 26 Nov 2021 09:22:45 +0000</pubDate>
      <link>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</link>
      <guid>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</guid>
      <description>&lt;p&gt;If you're building a multi-tenant SaaS, securely isolating customer data not only from other customers but from your own developers is a conversation that you'll have sooner or later.  Here at &lt;a href="https://skribe.ai"&gt;Skribe&lt;/a&gt; our customers' data is highly confidential and we go to extreme efforts to protect it both from inadvertent exposure caused by software bugs and internal access by employees unless absolutely necessary.&lt;/p&gt;

&lt;p&gt;For a hybrid pool/silo architecture like Skribe's, my favorite security strategy to achieve this is one that AWS promotes known as the &lt;a href="https://aws.amazon.com/blogs/apn/isolating-saas-tenants-with-dynamically-generated-iam-policies/"&gt;Token Vending Machine&lt;/a&gt; that leverages IAM to isolate customer data.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" alt="Example of the Token Vending Machine" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially an authorized user &lt;em&gt;(1)&lt;/em&gt; makes an API request through the API Gateway &lt;em&gt;(2)&lt;/em&gt;, which calls a custom authorizer to validate the credentials and generate a dynamic IAM policy &lt;em&gt;(3)&lt;/em&gt;. The dynamic IAM policy is passed to the handler function &lt;em&gt;(4)&lt;/em&gt; that locks all further processes into a specific set of resources &lt;em&gt;(5)&lt;/em&gt;.  The elegance of this solution is that it removes the burden of handling tenant security from the developers' hands and moves it down to the platform level. The threat of inadvertently exposing tenant data even at the hands of a malicious developer is almost completely mitigated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Skribe is a primarily built on Google Cloud in a hybrid pooled/siloed architecture, and for what felt like an eternity, I'd been researching methods to implement this same strategy on GCP.  It had seemed impossible given the limitations of their managed services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Endpoints and API Gateway don't support custom authorizers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamically generated IAM policies aren't supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The proposed solutions you'll find on StackOverflow, Reddit and even GCP's own whitepapers all basically say the same thing: "Tenant security should be handled at the app level."&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yuck!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But after days of trial and error, we found a solution that gives us the highly secure tenant isolation we needed on Google Cloud!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" alt="Strategy to fully isolate tenants in an multi-tenant environment on Google Cloud using a Token Vending Machine" width="856" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly as before, the user in Tenant A &lt;em&gt;(1)&lt;/em&gt; makes an authorized request to list the users in their tenant &lt;em&gt;(2)&lt;/em&gt;. The API Gateway passes that to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service &lt;em&gt;(3)&lt;/em&gt; that has no inherit permission to access any database, so it passes the user's auth token to the &lt;code&gt;TokenVendingMachine&lt;/code&gt; &lt;em&gt;(4)&lt;/em&gt;. The &lt;code&gt;TokenVendingMachine&lt;/code&gt; validates the token and based on the custom claims retrieves the tenant's Service Account key file from our secure bucket &lt;em&gt;(5)&lt;/em&gt; and returns it to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service.  Finally we can call our database using the key file &lt;em&gt;(6)&lt;/em&gt; and return the results to the user.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-onboarding"&gt;
  &lt;/a&gt;
  Step 1: Onboarding
&lt;/h4&gt;

&lt;p&gt;When a new tenant is created, a tenant-specific Service Account is asynchronously created and the JSON key file is stored in a highly-secured bucket containing tenant key files.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-authentication"&gt;
  &lt;/a&gt;
  Step 2: Authentication
&lt;/h4&gt;

&lt;p&gt;We use the Identity Platform with multi-tenancy enabled to authenticate users.  When a user logs in they exchange their initial token with a custom token containing custom claims such as the user's tenant and role, and that custom token is sent with every subsequent request.&lt;/p&gt;

&lt;p&gt;Those custom claims look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  tn: 'tn-xyz987',
  rl: 'editor',
  rg: 1,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The claims identify the user's tenant, their role and the region that their data resides in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-api-requests"&gt;
  &lt;/a&gt;
  Step 3: API Requests
&lt;/h4&gt;

&lt;p&gt;When a user's authenticated request hits the API Gateway, it's sent to a Cloud Run service that runs our API.  The database and storage buckets are abstracted behind like-named services and require a valid JSON key file in order to access any resource.&lt;/p&gt;

&lt;p&gt;So if a user requests a list of users within their tenant, the API's code can be as simple as this pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.run('/users', (res: Request, res: Response) =&amp;gt; {
  // Create a new instance of our TokenVendingMachine class
  const tvm = new TokenVendingMachine();

  // Request the key file using the user's auth token
  tvm.get(req.headers.authorization)
    .then(async (key: Credentials) =&amp;gt; {
      // The tenant's database name has been embedded in the key
      const db = new Database(key);

      const rows = await db.query("SELECT ...");

      res.json(rows);
    })
    .catch((e: any) =&amp;gt; res.status(403));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Main Takeaway:&lt;/strong&gt; The developers can write code as if this is a single-tenant environment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-know-what-youre-going-to-say"&gt;
  &lt;/a&gt;
  I know what you're going to say...
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not issue short lived service account credentials?&lt;/strong&gt;&lt;br&gt;
Latency. Retrieving an existing key file from a GCS bucket is extremely fast compared to requesting new credentials on each request. Sure you could cache those short-lived credentials, but it creates a new set of problems of storing those securely if your goal is total isolation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not use the Secrets Manager to store the key files?&lt;/strong&gt;&lt;br&gt;
In a word, cost.  At $0.03 per 10,000 operations the costs will add up fast for an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn't a storage bucket full of key files dangerous?&lt;/strong&gt;&lt;br&gt;
Not if properly secured.  The &lt;code&gt;TokenVendingMachine&lt;/code&gt; service has read only access to all objects in that bucket and another service that generates the key file during the onboarding process has write access. There's also have a backend service that regularly cycles the keys so that they don't live on in perpetuity.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript Object Keys</title>
      <author>Amer Sikira</author>
      <pubDate>Fri, 26 Nov 2021 08:53:53 +0000</pubDate>
      <link>https://dev.to/amersikira/javascript-object-keys-h1</link>
      <guid>https://dev.to/amersikira/javascript-object-keys-h1</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://webinuse.com/javascript-object-keys/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have already mentioned JavaScript Object Keys when we spoke about &lt;a href="https://webinuse.com/object-manipulation-in-javascript/"&gt;Object manipulation in JavaScript&lt;/a&gt;. In this article, we are going to cover &lt;code&gt;Object.keys()&lt;/code&gt; in-depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-object"&gt;
  &lt;/a&gt;
  What is the Object?
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;MDN&lt;/a&gt;, the Object class represents one of JavaScript’s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.&lt;/p&gt;

&lt;p&gt;The Object is one of the most complex &lt;a href="https://webinuse.com/guide-to-javascript-data-types/"&gt;JavaScript data types&lt;/a&gt;. It can hold any other data type. It can hold functions, also. Here is an example of some objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//The first way of creating Object in JavaScript&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//The second way of creating Object in &lt;/span&gt;
&lt;span class="c1"&gt;//JavaScript using Object constructor.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//The third way of creating object in JavaScript &lt;/span&gt;
&lt;span class="c1"&gt;//is by using ES6 object literalls&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;username&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-javascript-object-keys"&gt;
  &lt;/a&gt;
  What are JavaScript Object Keys?
&lt;/h3&gt;

&lt;p&gt;Every JavaScript Object consists of keys and values. The key is the “name” by which we can call a value. Let’s make an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our example, keys are id, name, username, and values are 1, “John” and “Doe”. But there is a difference between the Object key, which is “the name” and &lt;code&gt;Object.keys()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-javascript-objectkeys-method"&gt;
  &lt;/a&gt;
  What is JavaScript Object.keys() method?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Object.keys()&lt;/code&gt; method returns an array of a given object’s own enumerable property names, iterated in the same order that a normal loop would, as per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that when we use &lt;code&gt;Object.keys()&lt;/code&gt; it will return an array of strings. Those strings will be the keys of the Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(3) ['id', 'name', 'username']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One small thing though is that if the keys are numbers than &lt;code&gt;Object.keys()&lt;/code&gt; will return those number in ascending order, regardless of their order as keys in Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One hundred and two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Twenty five&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sixty four&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(4) ['1', '25', '64', '102']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is a mix of letters and numbers then JavaScript Object Keys will firstly return numbers in ascending order, then letters in the order they appeared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Five&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Letter c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Letter a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(4) ['1', '5', 'c', 'a']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/javascript-array-length-the-definitive-guide/"&gt;JavaScript Array length – the definitive guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using JSDoc to write better JavaScript Code</title>
      <author>Ingo Steinke</author>
      <pubDate>Fri, 26 Nov 2021 08:28:30 +0000</pubDate>
      <link>https://dev.to/ingosteinke/using-jsdoc-to-write-better-javascript-code-17a</link>
      <guid>https://dev.to/ingosteinke/using-jsdoc-to-write-better-javascript-code-17a</guid>
      <description>&lt;p&gt;Using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; consistently offers a lot of benefits, especially for writing clean code to prevent unnecessary bugs and errors. But it takes some time and effort to learn, and you have to adapt every code snippet after copy-pasting from a tutorial or a StackOverflow example (especially true for back-end code using Node, Express and Mongoose like I did for a &lt;a href="https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa"&gt;full-stack web app side project&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-typescript"&gt;
  &lt;/a&gt;
  Alternatives to TypeScript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popular, but unhelpful, alternative: don't care at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a href="https://eslint.org"&gt;eslint&lt;/a&gt;, but that's not an alternative, you should lint your code anyway and benefit from (mostly) helpful hints and warnings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactjs.org/docs/typechecking-with-proptypes.html"&gt;ReactPropTypes&lt;/a&gt; adds some type checking to ECMAScript / JavaScript in React applications, but PropTypes are merely footnotes, placed far away from where they would be most useful, but still bloating your code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyXM0_OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvq8jwf73jucyf7r2p3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyXM0_OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvq8jwf73jucyf7r2p3.png" alt="PropTypes example with an unhappy emoji and critical handwritten notes reading: merely a footnote below?" width="572" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enter &lt;strong&gt;JSDoc&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jsdoc"&gt;
  &lt;/a&gt;
  JSDoc
&lt;/h2&gt;

&lt;p&gt;Often overlooked, never even heard of until now, &lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt; deserves more attention, as it brings a lot of advantages out of some short lines of documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-documentation"&gt;
  &lt;/a&gt;
  Code Documentation
&lt;/h3&gt;

&lt;p&gt;That's JSDoc's original purpose: generating a code / API documentation out of a few lines placed before variables, functions, and classes.&lt;/p&gt;

&lt;p&gt;Similar approaches have been used with Java and PHP for a long time, and JSDoc follows established practice and is quite easy to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hints-and-code-completion"&gt;
  &lt;/a&gt;
  Hints and Code Completion
&lt;/h3&gt;

&lt;p&gt;Using JSDoc inside a modern IDE, you'll get another benefit: live code inspection, warnings, and proper code completion even for the most obscure DOM methods you never knew about before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZrfRePf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o65lra697a5k7tzv69p3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZrfRePf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o65lra697a5k7tzv69p3.png" alt="Screenshot of annotated code with method hints in PhpStorm IDE" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a simple example: &lt;/p&gt;

&lt;p&gt;I wanted to make allow a modal dialog to be closed typing the Escape key, and my first quick code-like-it's-1999-style script was frowned upon by eslint.&lt;/p&gt;

&lt;p&gt;So I decided to write proper, modern code, but still plain "vanilla JS" that does not need a transpiler to produce working code (unlike TypeScript, which is does not even have native support in Microsoft's Edge browser).&lt;/p&gt;

&lt;p&gt;I wrote a function that takes two arguments: an event, and an optional DOM element so that we are able to close a specific modal dialog from outside without relying on the event context.&lt;/p&gt;

&lt;p&gt;Add a JSDoc comment before, it becomes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * close an open modal dialog
 * @param {MouseEvent} event
 * @param {HTMLElement=} elementToClose
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;modalClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;telling our readers (of this code, and of a possible, automatically generated, documentation / API reference) what the function is supposed to do, and what arguments it expects:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@param {MouseEvent} event&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We don't even have to look up the proper event type!&lt;/p&gt;

&lt;p&gt;My IDE (PhpStorm) has some suggestions for code completion even in this special kind of comment, suggesting &lt;code&gt;MouseEvent&lt;/code&gt; on top of the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRdwTSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6k16uji5u3ka4t6c3w2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRdwTSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6k16uji5u3ka4t6c3w2.png" alt="Screenshot showing a dropdown with suggested type annotations" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syntax is rather simple.&lt;/p&gt;

&lt;p&gt;Annotations blocks are special comments that start with a slash and a double asterisk &lt;code&gt;/**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A parameter hint starts with an at sign, the word "param", and a type definition inside curly braces, followed by the parameter's name.&lt;/p&gt;

&lt;p&gt;To mark an optional parameter, add an equals sign behind the type, like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;param&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but to be more clear to human readers, we can also add anything behind the parameter's name, like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;param&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now my editor shows me type annotation, that are not part of my written code (unlike they would be in TypeScript) but rather implicitly follow from my code. So my actual code stays short and compact, while the implicit meaning is still more obvious than before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assistance-for-lazy-developers"&gt;
  &lt;/a&gt;
  Assistance for Lazy Developers
&lt;/h3&gt;

&lt;p&gt;Not only do we see the additional hint &lt;code&gt;event: MouseEvent&lt;/code&gt;, but when we start using the &lt;code&gt;event&lt;/code&gt; in our code below, there are more code suggestions, helping us to choose methods and properties that are actually available and not deprecated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjNUgKuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zul8g46vxu3cfzkdseux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjNUgKuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zul8g46vxu3cfzkdseux.png" alt="Image showing code completion suggestions for 'event.' in PhpStorm" width="813" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More assistance as we continue: hints and documentation everywhere. We don't even have to visit &lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt; in our browser anymore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67LiHjDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsadm8d4rwn9l7d77h61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67LiHjDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsadm8d4rwn9l7d77h61.png" alt="Screenshot showing documentation for event.currentTarget.closest" width="840" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;JSDoc makes coding in JavaScript easier, helping us to code quickly while avoiding obvious errors, just by adding some lines of optional comments in our code.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Create and deploy Lambda function on AWS with CDK and API endpoint to Lambda</title>
      <author>Abdul Waqar</author>
      <pubDate>Fri, 26 Nov 2021 08:10:35 +0000</pubDate>
      <link>https://dev.to/abdulwaqar844/how-to-create-lambda-function-on-aws-with-cdk-and-api-endpoint-to-lambda-3eca</link>
      <guid>https://dev.to/abdulwaqar844/how-to-create-lambda-function-on-aws-with-cdk-and-api-endpoint-to-lambda-3eca</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1what-is-aws-and-cdk-"&gt;
  &lt;/a&gt;
  1.What is AWS and CDK ?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="'https://aws.amazon.com/what-is-aws/'"&gt;Amazon Web Services&lt;/a&gt; (AWS) is the world’s most comprehensive and broadly adopted scaleable cloud platform. AWS offering over 200 fully featured services from data centers globally. Millions of customers—including the fastest-growing startups, largest enterprises, and leading government agencies—are using AWS to lower costs, become more agile, and innovate faster.&lt;br&gt;
The &lt;a href="'https://aws.amazon.com/cdk'"&gt;AWS Cloud Development Kit&lt;/a&gt; (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages.CDK is used to define structure of our application as Code. We can call it Infrastructure as Code which is best for scaleable&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2lambda-function"&gt;
  &lt;/a&gt;
  2.Lambda Function
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/"&gt;AWS Lambda&lt;/a&gt;&lt;/strong&gt;  is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services and software as a service (SaaS) applications, and only pay for what you use.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3amazon-api-gateway"&gt;
  &lt;/a&gt;
  3.Amazon API Gateway
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="'https://aws.amazon.com/api-gateway/'"&gt;AWS API Gateway&lt;/a&gt;&lt;/strong&gt; is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. APIs act as the main communication gateway for applications to access data,apply business logic, or functionality from your backend services. Using API Gateway, you can create RESTful APIs and WebSocket APIs that enable real-time two-way communication applications. API Gateway supports containerized and serverless workloads, as well as web applications.&lt;/p&gt;

&lt;p&gt;API Gateway handles all the tasks involved in accepting and processing up to hundreds of thousands of concurrent API calls, including traffic management, CORS support, authorization and access control, throttling, monitoring, and API version management. API Gateway has no minimum fees or startup costs. You pay for the API calls you receive and the amount of data transferred out and, with the API Gateway tiered pricing model, you can reduce your cost as your API usage scales. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-write-code-for-lambda-function"&gt;
  &lt;/a&gt;
  &lt;em&gt;Lets write code for Lambda Function&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Before deploying code to AWS Clouds we need to configure our AWS profile with our development envoirnment. I have written step by step guide how to configure AWS profile and deploy simple helloWorld Application. If you are begginer then before writing lambda code &lt;a href="'https://dev.to/abdulwaqar844/a-beginner-s-guide-to-configure-aws-cdk-and-deploy-hello-world-app-54ll'"&gt;Read basic Guide here &lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#note-in-this-artical-we-will-use-typescript-language-to-write-application-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note&lt;/strong&gt; :  &lt;em&gt;In this artical we will use Typescript language to write Application Code&lt;/em&gt;
&lt;/h5&gt;
&lt;h2&gt;
  &lt;a href="#steps-to-write-amp-compile-the-code"&gt;
  &lt;/a&gt;
  Steps to write &amp;amp; compile the code
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  step 1
&lt;/h3&gt;

&lt;p&gt;make a new folder for your cdk project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;hello_lambda_with_apigatway
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  step 2
&lt;/h3&gt;

&lt;p&gt;intialize your cdk project in typescript by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk init app --language typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  step 3
&lt;/h2&gt;

&lt;p&gt;run the following command to build your ts files in real-time. This process needs to keep running in the background so it is best if you run it in a seperate terminal. If you don't want to watch application build process at real time you can skip this step and after writing code make a build before deploying.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  step 4
&lt;/h2&gt;

&lt;p&gt;Initialize your lambda function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;apigw&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-apigateway&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HelloLambdaStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloHandler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_10_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello.handler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain this code. we have created a class HelloLamdaStack in which we have initialized our lambda funtion and API Gateway. In this code we have declared that we will use  Nodejs 10  version and code of our lambda funtion is exist in lambda folder at root directory and name of our lambda function is hello.&lt;br&gt;
Also update code of &lt;code&gt;/bin/&lt;/code&gt; . Code in this file will create a New Stack for lambda function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source-map-support/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HelloLambdaStack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/step01_hello_lambda-stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Step01HelloLambdaStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloLambdaStack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
typescript&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  step 5
&lt;/h3&gt;

&lt;p&gt;add the handler code for your lambda in lambda/hello.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;APIGatewayProxyResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello, CDK! You've hit &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call endpoint to this lambda function our function will return "Hello, CDK! You've hit ${event.path}".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  step 6
&lt;/h2&gt;

&lt;p&gt;Installing Bootstrap Stack. &lt;br&gt;
For Lambda functions we will need to do &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html"&gt;bootstrapping&lt;/a&gt; becuase they require &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/assets.html"&gt;assets&lt;/a&gt; i.e. handler code that will be bundleded with the CDK library etc. and stored in S3 bootstraped bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-7-optional"&gt;
  &lt;/a&gt;
  Step 7 (optional)
&lt;/h2&gt;

&lt;p&gt;Run the following command to see the cloud formation template of your cdk code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk synth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-8-optional"&gt;
  &lt;/a&gt;
  Step 8 (optional)
&lt;/h2&gt;

&lt;p&gt;Run the following command to see the difference between the new changes that you just made and the code that has already been deployed on the cloud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk diff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-9"&gt;
  &lt;/a&gt;
  Step 9
&lt;/h2&gt;

&lt;p&gt;Run the following command to deploy your code to the cloud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you did not run "npm run watch" in the step 4 then you need to build the project before deployment by running the folliwng command. npm run build will also compile typescript files of the lambda function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-10"&gt;
  &lt;/a&gt;
  step 10
&lt;/h2&gt;

&lt;p&gt;Now test the function in AWS Lambda Console (make sure you are in the correct region):&lt;br&gt;
&lt;a href="https://console.aws.amazon.com/lambda/home#/functions"&gt;https://console.aws.amazon.com/lambda/home#/functions&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-11"&gt;
  &lt;/a&gt;
  step 11
&lt;/h2&gt;

&lt;p&gt;Next step is to add an API Gateway in front of our function. Install the dependency: npm install @aws-cdk/aws-apigateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new apigw.LambdaRestApi(this, "Endpoint", {
      handler: hello,
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-12"&gt;
  &lt;/a&gt;
  step 12
&lt;/h2&gt;

&lt;p&gt;deploy again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-13"&gt;
  &lt;/a&gt;
  step 13
&lt;/h2&gt;

&lt;p&gt;Get the URL from the output and test it using curl or paste the url in browser:&lt;/p&gt;

&lt;p&gt;curl &lt;a href="https://xxxxxx.execute-api.us-east-2.amazonaws.com/prod/"&gt;https://xxxxxx.execute-api.us-east-2.amazonaws.com/prod/&lt;/a&gt;&lt;br&gt;
😊 Congratulation ! You have successfully deployed your first Lambda Function and API Gateway to call Lambda Function on AWS Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>typescript</category>
      <category>serverless</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Features of clean code architecture | Node.js</title>
      <author>DhiWise</author>
      <pubDate>Fri, 26 Nov 2021 08:01:31 +0000</pubDate>
      <link>https://dev.to/dhiwise/features-of-clean-code-architecture-nodejs-1big</link>
      <guid>https://dev.to/dhiwise/features-of-clean-code-architecture-nodejs-1big</guid>
      <description>&lt;p&gt;Goal: Make our code resilient against changes over time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EolZ5bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2Addura25okCbtOt9PsKfv9Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EolZ5bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2Addura25okCbtOt9PsKfv9Q.jpeg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-introduction-to-architecture"&gt;
  &lt;/a&gt;
  A brief introduction to architecture
&lt;/h2&gt;

&lt;p&gt;Software architecture is primarily the structure of the software components to be arranged in a purposeful and efficient system. The goal of software architecture is to minimize the human effort required to build and maintain software systems. One of the most effort-consuming processes in the software development cycle is to accommodate change. In software development, the primary method of handling change in the system is to create a separation of concerns between the layers of your software. This is where the Clean code architecture, created by &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert Cecil Martin&lt;/a&gt; (a.k.a Uncle Bob), shines.&lt;/p&gt;

&lt;p&gt;Following are the benefits of implementing a clean code architecture with snippets from a node application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-independence"&gt;
  &lt;/a&gt;
  Framework independence
&lt;/h2&gt;

&lt;p&gt;Using the framework for a lot of operations can easily make our code heavily dependent on the framework we are using. Creating a tight coupling between our code and the underlying framework leads to difficulty in changing the framework in the future. For example, if you want to move from “express” to “sails”&lt;/p&gt;

&lt;p&gt;To resolve this :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We limit our dependability on the framework, as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We do this by using an &lt;em&gt;adapter design pattern&lt;/em&gt; between the framework and our project’s code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The same approach is used to adapt Response objects as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a MERN stack application, we create an adaptRequest() function to act as an &lt;em&gt;intermediary adapter&lt;/em&gt; between our express framework and application code i.e {code in the inner layers}. Check out my sample snippet below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#database-independent"&gt;
  &lt;/a&gt;
  Database independent
&lt;/h2&gt;

&lt;p&gt;We use a similar adapter design pattern to make your code {in the inner layers} independent of the database we are using.&lt;/p&gt;

&lt;p&gt;Basically, we can create a DB service interface that consists of all generic database operations. Then implement a DB service for each type of database we want to use in your project. To give an example, suppose we have the requirement to use multiple heterogeneous databases(say DynamoDB and MongoDb) in a single project, we will create Db service for each of the databases we are using and simply pass the Db service(DynamoDbService.js) as a dependency injection to the service(say FileUploadService.js) that needs to perform the operation on that database(DynamoDB).&lt;/p&gt;

&lt;p&gt;You can go a level deeper by passing the dbConnectionInstance as a dependency of the DB service. Thereby enabling you to make/switch DB connections within the project, by simply changing the dbConnectionInstance.&lt;br&gt;
&lt;em&gt;(I suggest doing so only if you have to connect to multiple db instances from a single application.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-breaking-changes-due-to-third-party-libraries"&gt;
  &lt;/a&gt;
  Avoiding breaking changes due to third party libraries
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Third-party libraries are often the cause of change in a project that has a longer development life span.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything from finding a better alternate library to upgrading the existing library may cause the code to be changed and often breaks the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again our adapter design pattern can be implemented here to resolve this issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We simply create a Service (say ThirdPartyLib.js) and import third-party libraries in it and wrap the third-party function with your own function and append any extra logic if necessary. Then use this, ThirdParyLib.js, library wherever we need to use third-party methods.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#dependency-injection"&gt;
  &lt;/a&gt;
  Dependency injection
&lt;/h2&gt;

&lt;p&gt;Dependency Injection, Dependency Injection, Dependency Injection — you have probably heard this word many times by now. But what is dependency injection?&lt;/p&gt;

&lt;p&gt;‘Dependency Injection’ is a 25-dollar term for a 5-cent concept…Dependency injection means giving an object its instance variables. Really. That’s it. — &lt;a href="http://jamesshore.com/v2/blog/2006/dependency-injection-demystified"&gt;[3]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why do we use dependency injection in the first place?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating Testability&lt;br&gt;
Dependency injection is a very useful technique for testing, since it allows dependencies to be mocked or stubbed out. &lt;a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection"&gt;[4]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Achieving Loose coupling&lt;br&gt;
The obvious benefit of loose coupling is that it provides the flexibility to change our dependencies without modifying the underlying business logic. This provides us with a greater ability to try out newer alternatives both during development as well as during testing without risking the changes in the code of the inner layers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-clean-code-boilerplate"&gt;
  &lt;/a&gt;
  Creating clean code boilerplate
&lt;/h2&gt;

&lt;p&gt;Although creating projects using clean code architecture has many benefits, creating the boilerplate code has always been an uphill task. The sample code you get online is great for learning purposes; however, creating a real-world application is significantly different from it. An easy way to do that is to use a new online code-generating platform called &lt;a href="https://app.dhiwise.com/"&gt;DhiWise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can add your models using the table view, click on build app, select clean code architecture from the combo box, and Boom!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0an7sTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5760/1%2AFbI2hH15ZNZIE9mCPBMwiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0an7sTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5760/1%2AFbI2hH15ZNZIE9mCPBMwiw.png" alt="You can view the generated application’s code online or dl the source code." width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7EmboKQH8lM"&gt;Clean Code — Uncle Bob entire series of lectures&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/dev-mastery/comments-api"&gt;Dev mastery’s clean code architecture demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/howardmann/clean-node"&gt;Howardamann’s clean code demo app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified"&gt;Dependency Injection Demystified&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;The clean code blog by Robert C. Martin (Uncle Bob)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection"&gt;Discussion on DI over stack overflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.dhiwise.com/"&gt;Dhiwise-pro code platform&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>This is really a great shit 💩</title>
      <author>Manu Martinez</author>
      <pubDate>Fri, 26 Nov 2021 07:46:09 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/who-am-i-4n59</link>
      <guid>https://dev.to/whitehatdevv/who-am-i-4n59</guid>
      <description>&lt;h2&gt;
  &lt;a href="#wtf-oh-shit"&gt;
  &lt;/a&gt;
  WTF? Oh, &lt;strong&gt;Shit&lt;/strong&gt; 💩
&lt;/h2&gt;

&lt;p&gt;Yes it's exactly which you have just read, it's completely describe such a &lt;strong&gt;Shit&lt;/strong&gt;, but why?, the question should be why is it called &lt;strong&gt;shit&lt;/strong&gt;?&lt;br&gt;
In this posts I will share you everything you need to known as a developer, I will tell you exactly as I have felt it without skimping anything. 😇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If you are not interested please not continue reading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hey 😄, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#let-me-introduce-it"&gt;
  &lt;/a&gt;
  Let me introduce it 😌
&lt;/h3&gt;

&lt;p&gt;My &lt;em&gt;full name&lt;/em&gt; is Emanuel (&lt;em&gt;you can call me Manu&lt;/em&gt;), I was born in Uruguay but actually I'm located in &lt;strong&gt;Spain&lt;/strong&gt; 🇪🇸, I suppose you think I'm older, but no 😜, at the moment I'm twenty years old, I started coding when I was 14 years old. Maybe you are asking for why I started coding at this age, the answer can be summarise in one word: &lt;br&gt;
&lt;strong&gt;Curiosity&lt;/strong&gt; 😙.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-will-this-series-talk-about"&gt;
  &lt;/a&gt;
  What will this series talk about?
&lt;/h3&gt;

&lt;p&gt;It's really important for me, I'm sure you have &lt;strong&gt;already&lt;/strong&gt; heart that developer life is incredible, blah, blah blah 🤓, a lot of suppositions without any fundament, the &lt;strong&gt;typical&lt;/strong&gt; phrase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Coding will be you millionaire 💰.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;All that glitters is not gold&lt;/em&gt;, you have to take into accounts a &lt;strong&gt;couple of things&lt;/strong&gt; you aren't known, really all of us are &lt;strong&gt;ignorant&lt;/strong&gt; 🥸, we think we know everything, we think we are gifted, but no. I'm overwhelmed about the society's &lt;strong&gt;ignorance&lt;/strong&gt;. Almost people get settle with their lives, making a cyclic and eternal life. I'm here 🤨 trying to show you why you shouldn't stop learning, how is exactly a software engineer life? &lt;/p&gt;

&lt;p&gt;Really, let me tell you, you do not have to be &lt;strong&gt;agree with me&lt;/strong&gt; 🥲, it's only my point of view based in my &lt;em&gt;experience&lt;/em&gt; and &lt;em&gt;knowledge&lt;/em&gt;, this is why I have learnt in 7 years as software engineer, I will be more &lt;strong&gt;transparent&lt;/strong&gt; to you than with my &lt;strong&gt;family&lt;/strong&gt; 🤐. &lt;/p&gt;

&lt;p&gt;Every &lt;strong&gt;Friday&lt;/strong&gt; I will post a new story in this series talking about all this topics, I recommend you subscribing to the newsletter to get up to date with my &lt;strong&gt;latest post&lt;/strong&gt;. Run this code in your mind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;postReminder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Reminder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shit Post 💩&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu will release a new post in his story&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urgently&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;everyFriday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setReminder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postReminder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;I'm here to help you growing in your professional &lt;strong&gt;career&lt;/strong&gt;, if you regarding any question, suggestion or complain please &lt;strong&gt;do not hesitate&lt;/strong&gt; in contact me. I'm very glad in helping you 🤤&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>leadership</category>
    </item>
    <item>
      <title>30 Best Chrome Extensions for Personal Productivity in 2022</title>
      <author>katemay</author>
      <pubDate>Fri, 26 Nov 2021 07:44:35 +0000</pubDate>
      <link>https://dev.to/katemay48947206/30-best-chrome-extensions-for-personal-productivity-in-2022-426</link>
      <guid>https://dev.to/katemay48947206/30-best-chrome-extensions-for-personal-productivity-in-2022-426</guid>
      <description>&lt;p&gt;Having the capability to enhance our online presence and optimize work without extra efforts, Chrome extensions are helpful in achieving a high level of efficiency. In this post, you will find 30 top Сhrome extensions in 10 recommended categories for your personal productivity in 2022: &lt;a href="https://blog.tmetric.com/chrome-productivity-extensions/"&gt;https://blog.tmetric.com/chrome-productivity-extensions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Historical Test Report Portal — How Developers Accelerate the Testing Process</title>
      <author>Cody Simons</author>
      <pubDate>Fri, 26 Nov 2021 07:38:58 +0000</pubDate>
      <link>https://dev.to/codysimons20/historical-test-report-portal-how-developers-accelerate-the-testing-process-16fm</link>
      <guid>https://dev.to/codysimons20/historical-test-report-portal-how-developers-accelerate-the-testing-process-16fm</guid>
      <description>&lt;p&gt;"Your testing team, from developers to testers, has put out a great amount of work to design test cases.&lt;/p&gt;

&lt;p&gt;Knowing that an error-free testing process simply does not exist, when it comes to the test execution, this one fails, while the rest passes. Or, is one of them is taking much longer to complete compared to previous runs? How do you determine if your tests have slowed down or increased their probability of failing?&lt;/p&gt;

&lt;p&gt;This requires context–historical logs from past sessions to be more specific. Without trends of test performance over time, decisions made and corrective measures could be misleading, resulting in wasted efforts, time, and the overall ROI for your project."&lt;br&gt;
&lt;a href="https://www.katalon.com/resources-center/blog/historical-data-unit-test/"&gt;Continue reading&lt;/a&gt; &lt;/p&gt;

</description>
      <category>testing</category>
      <category>historicaltestreport</category>
      <category>tester</category>
    </item>
    <item>
      <title>A Detailed Guide on Angular Onpush Change Detection and Component Design</title>
      <author>Tarun Gurang</author>
      <pubDate>Fri, 26 Nov 2021 07:14:52 +0000</pubDate>
      <link>https://dev.to/tarungurang/a-detailed-guide-on-angular-onpush-change-detection-and-component-design-254n</link>
      <guid>https://dev.to/tarungurang/a-detailed-guide-on-angular-onpush-change-detection-and-component-design-254n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;For all of our favorite projects, we've switched to Angular. We understand what Angular has to offer and how we can use it to create fantastic online applications. However, there are a few things to know about Angular that will help us use it more effectively in our projects.&lt;/p&gt;

&lt;p&gt;Because data flow is at the heart while performing everything through Angular, change detection is something to be aware of. It will make it much easier to track out errors and improve our apps when working with large data sets.&lt;/p&gt;

&lt;p&gt;Did we ever try to implement the Angular OnPush Change Detection technique in our project but run into some difficult-to-debug bugs and have to revert to the default change detection?&lt;/p&gt;

&lt;p&gt;In this article, we’ll look at Angular change detection, data structures, and the process of making them immutable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-change-detection-in-angular"&gt;
  &lt;/a&gt;
  What is Change Detection in Angular?
&lt;/h3&gt;

&lt;p&gt;When we make a modification to one of our models, Angular recognizes it and updates the views right away. In Angular, this is called change detection. This method aims to ensure that the underlying views and their accompanying models are always in sync. This key component of Angular is what makes it tick, and it's one of the reasons why it's such a good choice for building modern online apps.&lt;/p&gt;

&lt;p&gt;Any of the following scenarios can cause an Angular model to change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Events in the DOM (click, hover over, etc.)&lt;/li&gt;
&lt;li&gt;Requests made with AJAX&lt;/li&gt;
&lt;li&gt;setTimer() and setInterval() are two methods for setting timers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/an-important-guide-on-angular-directives-and-their-types"&gt;An Important Guide On Angular Directives And Their Types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#change-detectors"&gt;
  &lt;/a&gt;
  Change Detectors
&lt;/h4&gt;

&lt;p&gt;All Angular programs are run out of a hierarchical tree of components. During runtime, Angular creates a separate change detector class for each component in the tree, resulting in a hierarchy of change detectors that is equal to the component hierarchy tree.&lt;/p&gt;

&lt;p&gt;Angular travels down this tree of change detectors whenever change detection is triggered to see if any of them have reported changes.&lt;/p&gt;

&lt;p&gt;Every detected change is subjected to a single change detection cycle, which begins at the root change detector and proceeds down sequentially. Because we know component data can only come from its parent, this sequential design choice is nice because it predictably changes the model.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#change-detectors-hierarchy"&gt;
  &lt;/a&gt;
  Change Detectors Hierarchy
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhtBtg_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81d2hpahat2e9m9b3ojm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhtBtg_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81d2hpahat2e9m9b3ojm.jpg" alt="Change Detectors Hierarchy" width="636" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To report changes to Angular, the change detectors maintain track of the component's historical and current states as well as its structure.&lt;/p&gt;

&lt;p&gt;When Angular receives a change detector report, it instructs the appropriate component to re-render and update the document object model (DOM).&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#change-detection-strategies"&gt;
  &lt;/a&gt;
  Change Detection Strategies
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Value vs. Reference Types&lt;/strong&gt;&lt;br&gt;
To comprehend what a change detection strategy is and how it works, we must first comprehend the differences between JavaScript value types and reference types. This part can be skipped if we are already familiar with how this works.&lt;/p&gt;

&lt;p&gt;Let's start with a review of the value and reference types, as well as their categories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value Types&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the sake of simplicity, assume that these types merely store their values in stack memory (which is technically incorrect, but it will suffice for this article). For example, look at the stack memory and its values in the graphic below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IprF7ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypcrmj86nv77x9roocvx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IprF7ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypcrmj86nv77x9roocvx.jpg" alt="Stack Memory" width="191" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference Types&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These types are a little more complicated since they store a reference to their real value on the heap memory in the stack memory. In the sample graphic below, we can see how stack memory and heap memory interact. The stack memory refers to the heap memory's real values for the reference type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTCrixJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04r94dwwjt2c3jjp4ygb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTCrixJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04r94dwwjt2c3jjp4ygb.jpg" alt="Heap Memory" width="661" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The important difference between value types and reference types is that reading the value of a value type requires only verifying the stack memory, whereas reading the value of a reference type requires first querying the stack memory to obtain a reference, and then using that reference to query the heap memory to locate the reference type's value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching for Reliable &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;Angular Development Company&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#default-strategy"&gt;
  &lt;/a&gt;
  Default Strategy
&lt;/h5&gt;

&lt;p&gt;As previously stated, Angular watches changes to the model to ensure that it captures all of them. It will look for any changes between the previous state of the overall application model and the current state.&lt;/p&gt;

&lt;p&gt;Angular raises the following question in the default change detection strategy: Has any value in the model changed? However, with a reference type, we can use strategies to ask a better query. The OnPush change detection method comes into play here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onPush Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The OnPush technique is based on the notion that treating reference types like immutable objects allows us to notice changes in values much faster. When a reference type is immutable, it indicates that the reference on the stack memory must change every time it is updated. Now we can simply check: Has the reference type's reference (in the stack) changed? If this is the case, double-check all the values (on the heap). If we are having trouble understanding this, go back to the previous stack heap diagrams.&lt;/p&gt;

&lt;p&gt;Instead of asking one question, the OnPush approach asks two. Has there been a change in the reference type's reference? Have the values in heap memory changed if this is the case?&lt;/p&gt;

&lt;p&gt;Assume we have a 30 element immutable array, and we want to determine if there have been any changes. We know that in order for the immutable array to be updated, the reference to it (in the stack) would have to change. This means we can check to see if the array reference is different right away, potentially saving us 30 more tests (in the heap) to figure out which element is different. The OnPush approach is what it's called.&lt;/p&gt;

&lt;p&gt;So, what does it mean to treat reference types as immutable, we might ask? It means we never set a reference type's property, but instead reassign the value as a whole. Take a look at what follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Treating objects as mutable:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static mutable() {
  var before = {foo: "bar"};
  var current = before;
  current.foo = "hello";
  console.log(before === current);
  // =&amp;gt; true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Treating objects as immutable:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static mutable() {
  var before = {foo: "bar"};
  var current = before;
  current = {foo "hello"};
  console.log(before === current);
  // =&amp;gt; false
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth noting that in the examples above, we're treating reference types as immutable by convention, so we're still dealing with changeable objects at the end of the day.&lt;/p&gt;

&lt;p&gt;So, how do we put an OnPush strategy into action for a component? Simply include the changeDetection argument in their @Component annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {ChangeDetectionStrategy, Component} from '@angular/core';
@Component({
  // ...
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class OnPushComponent {
  // ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;Angular change detection is a built-in framework feature that ensures that a component's data and its HTML template view are always in sync. Change detection determines whether the view of each component has to be updated by recognizing typical browser events like mouse clicks, HTTP requests, and other types of events.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Splitting User Stories - What it is and techniques used</title>
      <author>Rebecca Ferrao</author>
      <pubDate>Fri, 26 Nov 2021 07:09:07 +0000</pubDate>
      <link>https://dev.to/rebecca/splitting-user-stories-what-it-is-and-techniques-used-1pkp</link>
      <guid>https://dev.to/rebecca/splitting-user-stories-what-it-is-and-techniques-used-1pkp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-user-story"&gt;
  &lt;/a&gt;
  What is a user story?
&lt;/h2&gt;

&lt;p&gt;Firstly, let's understand what stories are in agile. It is a short description that talks about the desired function from the perspective of the user. Agile teams size these in such a way that they can be completed in one iteration. These are the basic artifacts that eventually define the system behavior. Both business as well as tech stakeholders can understand the story's intent with ease.&lt;/p&gt;

&lt;p&gt;They are of two types: User stories and Enabler stories. The former delivers the functionality to the final user. The latter on the other hand brings more visibility into the building process. In this blog, we will be dealing with user stories, and splitting user stories.&lt;/p&gt;

&lt;p&gt;To understand the difference between the two types of stories, let's take this example:&lt;/p&gt;

&lt;p&gt;User story (end user): As a commuter, I want to identify the nearest cab I can book so that I can travel to my destination faster.&lt;/p&gt;

&lt;p&gt;Enabler story: Use the device GPS and sync with nearby registered device GPS.&lt;/p&gt;

&lt;p&gt;In agile, user stories are the most basic means of telling what is the needed functionality. They focus on the end user and are very customer-centric in nature. The subject of interest in a user story isn't the system, but rather the user. User stories also define the business value of the requirement at hand.&lt;/p&gt;

&lt;p&gt;So, roughly, a user story would be written combining the following:&lt;/p&gt;

&lt;p&gt;User Story = User role + Activity + Business Value.&lt;/p&gt;

&lt;p&gt;In the above example, the user role is that of the commuter.&lt;/p&gt;

&lt;p&gt;Activity is identifying the nearest cab.&lt;/p&gt;

&lt;p&gt;The business value would then be the need to travel faster to the destination.&lt;/p&gt;

&lt;p&gt;Through this method of writing user stories, the dev teams understand these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who would be using the product/ who they are building for&lt;/li&gt;
&lt;li&gt;What the user is doing with the feature&lt;/li&gt;
&lt;li&gt;Why are they building the product?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know what user stories are, let's move on to understanding splitting user stories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-splitting-user-stories-mean"&gt;
  &lt;/a&gt;
  What does 'Splitting user stories' mean?
&lt;/h2&gt;

&lt;p&gt;When a user story is ready so that it can be scheduled for implementation, it should be 'small enough'. What this means is that the story should be such that the developers can complete it in one iteration. This is a general rule of thumb around user stories.&lt;/p&gt;

&lt;p&gt;The agile&lt;a href="https://buildd.co/product/invest-agile"&gt;INVEST&lt;/a&gt; acronym states the characteristics of a good user story and can be cited here. A quick refresher, this is what the acronym stands for:&lt;/p&gt;

&lt;p&gt;I - Independent&lt;/p&gt;

&lt;p&gt;N - Negotiable&lt;/p&gt;

&lt;p&gt;V - Valuable&lt;/p&gt;

&lt;p&gt;E - Estimable&lt;/p&gt;

&lt;p&gt;S - Small&lt;/p&gt;

&lt;p&gt;T - Testable&lt;/p&gt;

&lt;p&gt;As is clear, the S-Small suggests that user stories are to be small in size. These allow faster implementation, and are also more reliable. This is because being small in size, they flow through the system with a less amount of risk and variability.&lt;/p&gt;

&lt;p&gt;However, it so happens that most user stories are complex in nature. They cannot be completed in one iteration.&lt;/p&gt;

&lt;p&gt;This is where user story splitting comes into play. As you might have already figured, splitting user stories means to split a bigger, more complex user story into a smaller one to complete it in one go. This process is also known as story splitting. Since a user story has three parts, the role + activity + business value, it's a must to keep these on splitting. So, story splitting is done such that each story has a measurable business value by itself.&lt;/p&gt;

&lt;p&gt;But, how is this done? Well, there is no one way for splitting user stories. The ways of doing this depend on the business domain and hence various authors have their own ideas on how to do it. In the coming sections we will touch upon some of the ways of splitting user stories.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJVrFTbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/RackMultipart20211126-4-2wiv03_html_1a1a24b74d9c3d41.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJVrFTbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/RackMultipart20211126-4-2wiv03_html_1a1a24b74d9c3d41.jpg" alt="" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agile-techniques-for-splitting-user-stories"&gt;
  &lt;/a&gt;
  Agile Techniques for Splitting User Stories
&lt;/h2&gt;

&lt;p&gt;These are some of the common ways of splitting user stories:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-story-splitting-by-capabilities-offered"&gt;
  &lt;/a&gt;
  1. Story splitting by capabilities offered
&lt;/h3&gt;

&lt;p&gt;In this, you have to look at the capabilities being offered by each user story. For example, if a main user story needs you to search as well as sort, you can split these into two. You can also then further split these if you have multiple ways of sorting and searching in each.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-based-on-the-devices-the-app-is-to-be-used-on"&gt;
  &lt;/a&gt;
  2. Based on the devices the app is to be used on
&lt;/h3&gt;

&lt;p&gt;You can't expect all the users using your software to use it on the exact same type of system. For this, you have to make accommodations for devices, settings, and other things. So, you can split user stories based on these differences and work on one at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-splitting-based-on-user-roles"&gt;
  &lt;/a&gt;
  3. Splitting based on user roles
&lt;/h3&gt;

&lt;p&gt;Note that the same software would be used differently by different users. For example, consider a recruitment portal. The users would be using it in a different way than the HR managers. Same thing for educational software, teachers and students wouldn't be using it in the same way. Thus, you can define the different roles of people who would use the system. Through this, you can also split the features and work on them accordingly. In this way, it's easier to address the varied needs of each user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-splitting-user-stories-based-on-user-personas"&gt;
  &lt;/a&gt;
  4. Splitting user stories based on user personas
&lt;/h3&gt;

&lt;p&gt;Again, after user roles, user personas also could differ. This would depend on a number of things. For example, if a person has a lot of knowledge about the system, they'd want shortcuts so that they can work faster. A newer user would need a lot of guidance on the system and you'd probably have to integrate a lot of tips or guides. Someone with a physical handicap would need to interact with the feature in a different way.&lt;/p&gt;

&lt;p&gt;Based on such differences in personas, you can split your user stories so that you are focusing on only one at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-split-user-stories-by-workflows"&gt;
  &lt;/a&gt;
  5. Split user stories by workflows
&lt;/h3&gt;

&lt;p&gt;One main feature can be divided into a number of smaller ones. Take, for instance, posting a photo on an app like Instagram. You'd first choose the picture from your gallery, or click one. Then, you might want to make some edits to the picture. Next, tagging people and adding a location and caption would come into play. After all these things only would you post the picture.&lt;/p&gt;

&lt;p&gt;Of course, the example we've taken is bound to be more complex than this, but the basic idea is to split based on the flow. So each of these tasks can be worked on as a separate user story.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-split-based-on-data-types"&gt;
  &lt;/a&gt;
  6. Split based on data types
&lt;/h3&gt;

&lt;p&gt;Here, we shall consider local ways of entering data all over the world. Suppose you are creating an app to track the amount of steps you take a day and the distance covered. In the USA, you'd have to show this data in miles. But, in India, you'd have to show the same data in kilometres. So, when making an app, you'd come across different ways of entering data. You can split user stories based on the data types accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-splitting-user-stories-by-the-crud-operations"&gt;
  &lt;/a&gt;
  7. Splitting user stories by the CRUD operations.
&lt;/h3&gt;

&lt;p&gt;As you might know, CRUD stands for Create, Read, Update and Delete. You can split your user stories into smaller ones based on this. This way, a smaller user story would involve only dealing with the Creation of something. Another might deal only with the way users Read certain data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-spidr-method-for-splitting-user-stories"&gt;
  &lt;/a&gt;
  The SPIDR method for splitting user stories
&lt;/h2&gt;

&lt;p&gt;The SPIDR method is a relatively new way of splitting user stories. It stands for:&lt;/p&gt;

&lt;p&gt;S - Spikes&lt;/p&gt;

&lt;p&gt;P - Paths&lt;/p&gt;

&lt;p&gt;I - Interface&lt;/p&gt;

&lt;p&gt;D - Data&lt;/p&gt;

&lt;p&gt;R - Rules&lt;/p&gt;

&lt;p&gt;Let's understand how it works.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spikes&lt;br&gt;
Spike is a method to make the development team more aware of the things they are doing. Technical unknowns tend to make a story large, so the team needs to learn before making user stories. Only after understanding the components in detail do they work on writing and splitting the user stories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paths&lt;br&gt;
There could be multiple ways of carrying out a function. Say to pay online, you could use credit or debit card or some other way. User stories are then made to tackle each of these.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interfaces&lt;br&gt;
This is similar to the point about devices mentioned earlier. You can split user stories based on the devices and interfaces users will be interacting through.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data&lt;br&gt;
The data would be entered in different ways. Take for instance filling a form. Here, you could work on one story for collecting and storing basic user data such as name and location. Another story could then collect the picture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rules&lt;br&gt;
User stories would have some restrictions to make it function well. So, you can split and add just one rule at a time in each user story. For example, the first user story would be open and have no restrictions and collect any sort of data. The next ones can add various restrictions on this data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Originally published &lt;a href="https://buildd.co/product/splitting-user-stories"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.S. If you liked the above article, also check out the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://buildd.co/product/three-daily-scrum-questions"&gt;Three Daily Scrum Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildd.co/marketing/category-development-index"&gt;Category Development Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildd.co/product/minimum-marketable-feature"&gt;Minimum Marketable Feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildd.co/funding/authorized-shares"&gt;Authorized Shares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildd.co/product/team-facilitator-agile"&gt;Team Facilitator&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>agile</category>
      <category>beginners</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Advanced Typescript | Generics</title>
      <author>Marius Bongarts</author>
      <pubDate>Fri, 26 Nov 2021 07:01:51 +0000</pubDate>
      <link>https://dev.to/mariusbongarts/advanced-typescript-generics-32lm</link>
      <guid>https://dev.to/mariusbongarts/advanced-typescript-generics-32lm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" alt="Large elephant with Typescript logo and small elephant with JavaScript logo" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn advanced Typescript features and apply them to practical code exercises&lt;/p&gt;

&lt;p&gt;Typescript Generics provide a way to write flexible code that can work with various data types rather than a single data type. That allows users of the code to provide their own types.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/advanced-typescript-generics-1b30d6b5dd49" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LfpZ9m70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/1%2AtHDAGXmHWPWPSCMJyPPvQg.png" alt="Marius Bongarts"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/advanced-typescript-generics-1b30d6b5dd49" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Advanced Typescript | Generics. Learn advanced Typescript features and… | by Marius Bongarts | Nov, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Marius Bongarts ・ &lt;time&gt;Nov 26, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnDHPsJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium-f709f79cf29704f9f4c2a83f950b2964e95007a3e311b77f686915c71574fef2.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>programming</category>
      <category>technology</category>
    </item>
    <item>
      <title>Use react-hot-toast with Promise &amp; Axios</title>
      <author>MOHSIN ALI SOOMRO</author>
      <pubDate>Fri, 26 Nov 2021 06:55:44 +0000</pubDate>
      <link>https://dev.to/mohsinalisoomro/use-react-hot-toast-with-promise-axios-2lmd</link>
      <guid>https://dev.to/mohsinalisoomro/use-react-hot-toast-with-promise-axios-2lmd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#promise"&gt;
  &lt;/a&gt;
  Promise
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;promise&lt;/a&gt; is an object that may produce a single value some time in the future : either a resolved value, or a reason that it's not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending&lt;/p&gt;

&lt;p&gt;👉 A promise can states&lt;/p&gt;

&lt;p&gt;✅ fulfilled - The action relating to the promise succeeded&lt;br&gt;
❌ rejected - The action relating to the promise failed&lt;br&gt;
⚪ pending - Hasn't fulfilled or rejected yet&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; is a Javascript library used to make HTTP requests from node. js or XMLHttpRequests from the browser and it supports the Promise API that is native to JS ES6. It can be used intercept HTTP requests and responses and enables client-side protection against XSRF. It also has the ability to cancel requests&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reacthottoast"&gt;
  &lt;/a&gt;
  react-hot-toast
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/timolins/react-hot-toast"&gt;Smoking hot Notifications for React&lt;/a&gt;.&lt;br&gt;
Lightweight, customizable and beautiful by default.&lt;/p&gt;

&lt;p&gt;React Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios, { AxiosResponse } from "axios";
import toast, { Toaster } from "react-hot-toast";
import { useEffect } from "react";
export default function App() {
  const fetchData = async (): Promise&amp;lt;AxiosResponse&amp;gt; =&amp;gt; {
    const response = await axios.get(
      "https://jsonplaceholder.typicode.com/users"
    );
    console.log({ response });
    return response;
  };
  toast.promise(fetchData(), {
    loading: "Process",
    error: "error occurs in data",
    success: "get data successfully...."
  });
  useEffect(() =&amp;gt; {
    fetchData();
  }, []);

  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;Hello CodeSandbox&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;Start editing to see some magic happen!&amp;lt;/h2&amp;gt;
      &amp;lt;Toaster /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👏 Thanks for reading&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
