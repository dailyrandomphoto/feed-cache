<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rejected by Facebook</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Wed, 28 Apr 2021 20:50:51 +0000</pubDate>
      <link>https://dev.to/bytebodger/rejected-by-facebook-1o3j</link>
      <guid>https://dev.to/bytebodger/rejected-by-facebook-1o3j</guid>
      <description>&lt;p&gt;[NOTE: A month ago I wrote an article explaining that I would be applying to Facebook.  You can read that article here: &lt;a href="https://dev.to/bytebodger/applying-to-facebook-dan"&gt;https://dev.to/bytebodger/applying-to-facebook-dan&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;So... I'm no longer "Applying to Facebook".  Or, to put it in more explicit terms, I'm no longer being &lt;em&gt;considered&lt;/em&gt; by Facebook.  For those who read the first article, this won't come as a huge surprise to you.  I was very open about the fact that I did &lt;em&gt;not&lt;/em&gt; expect to be hired by them.  &lt;/p&gt;

&lt;p&gt;However, the exact &lt;em&gt;manner&lt;/em&gt; in which I was eliminated was, umm... interesting. So what happened??&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---A48o5KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okj0l0i6mhqirfkk7vcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---A48o5KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okj0l0i6mhqirfkk7vcz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-synopsis"&gt;
  &lt;/a&gt;
  A Quick Synopsis
&lt;/h2&gt;

&lt;p&gt;Facebook reached out to me on LinkedIn about five weeks ago.  It was a standard ping from one of their internal recruiters - it's not like I was being pursued by one of their executives to fill a specific role.  There wasn't anything overtly "special" about my resume or their desire to talk to me.&lt;/p&gt;

&lt;p&gt;After a brief call with the recruiter, they asked me to send them an updated copy of my resume.  The &lt;em&gt;first&lt;/em&gt; thing I did was to write the first article (linked above).  Quite frankly, I just thought it would be interesting content for the Dev.to crowd.  The &lt;em&gt;second&lt;/em&gt; thing I did was to spend a little more than a week standing up a new resume site.  If you're interested, you can see that site here: &lt;a href="https://adamdavis.codes"&gt;https://adamdavis.codes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This may sound like a strange reaction on my part.  After all, why wouldn't I just &lt;em&gt;manually&lt;/em&gt; update a resume and send it to them?  Well... for some time now I've been a little exasperated whenever a recruiter - calling about a job that I may not even be interested in - asks me to update my resume and send it to them.  I mean... I'm a programmer, &lt;em&gt;right&lt;/em&gt;?  Wouldn't it be more efficient just to create a resume site that I rarely need to update?  And then to send that link to any recruiter who wants my CV?  So that's what I did.  And once the site was live, I sent the recruiter the link to &lt;a href="https://adamdavis.codes"&gt;https://adamdavis.codes&lt;/a&gt; - and waited.&lt;/p&gt;

&lt;p&gt;I actually didn't hear back from them for almost three weeks.  Not that this was bothering me at all.  I just figured that, when they wanted to get back to me, they would.  Or maybe they wouldn't get back to me at all?  Who knows??  The point is that I wasn't exactly stressing about it.&lt;/p&gt;

&lt;p&gt;But late last week, I did indeed receive a reply from the Facebook recruiter.  Here's the pertinent quote from that email:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;My sincerest apologies on the delay in providing you an update. As promised, I have shared your resume link with our team and unfortunately I have to inform you that we have decided we will not be moving forward with your application at this time and I am not able to provide any specific feedback. For what it’s worth, I’d normally inform over the phone but I feel terrible for how long we’ve kept you waiting so I wanted to let you know as soon as I found out.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;And there you have it.  I'm a Facebook reject!!!&lt;/p&gt;

&lt;p&gt;If it's not already clear, I wasn't exactly crestfallen.  In fact, when I read the response above, I literally laughed out loud.  I really only applied because I thought it would make for interesting content - taking you along on the ride until I was ultimately eliminated.  &lt;/p&gt;

&lt;p&gt;I must admit that I thought I'd make it at least &lt;em&gt;a little bit&lt;/em&gt; further in the process.  I figured that I'd at least, you know, have the honor of failing a coding test or bombing a developer interview.  Basically... I fell down in the starter's block.  &lt;/p&gt;

&lt;p&gt;The rejection itself was completely expected.  But the &lt;em&gt;nature&lt;/em&gt; in which I was eliminated felt strange.  So... &lt;em&gt;what happened&lt;/em&gt;???&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5kpyb7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpf725ymhsjbu5y9kf4g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5kpyb7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpf725ymhsjbu5y9kf4g.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#following-the-clues"&gt;
  &lt;/a&gt;
  Following the Clues
&lt;/h2&gt;

&lt;p&gt;Obviously, there's no way to know exactly why I was eliminated.  And Facebook is under no obligation to tell me.  But we can do a little... surmising.  &lt;/p&gt;

&lt;p&gt;Remember when I said that I didn't send them an updated resume, but instead sent them a link to my new resume &lt;em&gt;site&lt;/em&gt;??  It's possible that this minor difference - between what they requested and what I provided - was enough for them to move onward.  I don't honestly believe this to be the case, but it's at least &lt;em&gt;theoretically&lt;/em&gt; possible.&lt;/p&gt;

&lt;p&gt;Far more likely is that someone at Facebook looked at my resume site - and didn't appreciate what they saw.  You see, some of my resume site is written with the same "spiciness" that I bring to these articles.  And some people - especially, some people who are evaluating candidates - don't much appreciate that.&lt;/p&gt;

&lt;p&gt;If I had an agent, he'd probably beg me to change the verbiage on my resume site.  But that verbiage serves &lt;em&gt;a purpose&lt;/em&gt;.  Specifically, it's designed to repel those employers who are looking for hoop-jumpers.  Cuz I don't own any hoops.  And I don't jump through anyone else's hoops.&lt;/p&gt;

&lt;p&gt;It's also possible that my rejection had nothing to do with anything on my resume - and everything to do with something that's &lt;em&gt;linked to&lt;/em&gt; on my resume site.  You see, my resume site has a feed that shows all of my Dev.to articles.  And one of my recent articles was about &lt;em&gt;the process of applying to Facebook&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Someone at Facebook may not have appreciated the fact that I was openly talking about the process.  More likely, someone at Facebook didn't appreciate the fact that I'd written about the folly of using concepts like &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; as litmus tests in a tech interview.&lt;/p&gt;

&lt;p&gt;Or maybe it wasn't even my "Applying to Facebook" article that put them off?  Maybe they didn't like something &lt;em&gt;else&lt;/em&gt; that I wrote about on Dev.to?  Or maybe they looked at my pic and realized that I'm far-short of handsome?  Or maybe they decided that hiring cranky old guys isn't always the best strategy in Silicon Valley?  Who knows?  Who cares???&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRqLrKB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1fp8conm38jrp8fe5mt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRqLrKB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1fp8conm38jrp8fe5mt.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mysteries-are-ok"&gt;
  &lt;/a&gt;
  Mysteries Are OK
&lt;/h2&gt;

&lt;p&gt;Ultimately, I'll never know exactly why they cut the process so short.  And that's just fine.  I had honestly hoped to turn it into a few more articles - but I can't control that.  If nothing else, it was &lt;em&gt;interesting&lt;/em&gt;.  And despite the ancient Chinese curse (&lt;em&gt;May you live in interesting times.&lt;/em&gt;), "interesting" isn't always a bad thing.&lt;/p&gt;

&lt;p&gt;Onward, I go!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>JavaScript Key Code
</title>
      <author>ali-dev-hash</author>
      <pubDate>Wed, 28 Apr 2021 20:43:42 +0000</pubDate>
      <link>https://dev.to/alidevhash/javascript-key-code-2f28</link>
      <guid>https://dev.to/alidevhash/javascript-key-code-2f28</guid>
      <description>&lt;p&gt;JavaScript Key Code&lt;/p&gt;

&lt;p&gt;Demo == &amp;gt; &lt;a href="https://codepen.io/Bilal1909/full/jOyJWpz"&gt;https://codepen.io/Bilal1909/full/jOyJWpz&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;KeyboardEvent keyCode Property&lt;/h1&gt;

&lt;p&gt;Definition and Usage&lt;/p&gt;

&lt;p&gt;The keyCode property returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event.&lt;/p&gt;

&lt;p&gt;The difference between the two code types:&lt;/p&gt;

&lt;p&gt;Character codes - A number which represents an ASCII character&lt;br&gt;
Key codes - A number which represents an actual key on the keyboard&lt;br&gt;
These types do not always mean the same thing; for example, a lower case "w" and an upper case "W" have the same keyboard code, because the key that is pressed on the keyboard is the same (just "W" = the number "87"), but a different character code because the resulting character is different (either "w" or "W", which is "119" or "87") - See "More Examples" below to better understand it.&lt;/p&gt;

&lt;p&gt;Tip: To find out if the user is pressing a printable key (e.g. "a" or "5"), it is recommended to use this property on the onkeypress event. To find out if the user is pressing a function key (e.g. "F1", "CAPS LOCK" or "Home") use the onkeydown or onkeyup event.&lt;/p&gt;

&lt;p&gt;Note: In Firefox, the keyCode property does not work on the onkeypress event (will only return 0). For a cross-browser &lt;br&gt;
solution, use the which property together with keyCode, e.g:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Tip: For a list of all Unicode characters, please study our Complete Unicode Reference.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Tip: If you want to convert the returned Unicode value into a character, use the fromCharCode() method.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Note: This property is read-only.&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Note: Both the keyCode and which property is provided for compatibility only. The latest version of the DOM Events Specification recommend using the key property instead (if available).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Tip: If you want to find out whether the "ALT", "CTRL", "META" or "SHIFT" key was pressed when a key event occured, use the altKey, ctrlKey, metaKey or shiftKey property.&lt;br&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / Object-Oriented Programming (OOP)</title>
      <author>Nikita Kozlov</author>
      <pubDate>Wed, 28 Apr 2021 20:06:13 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-object-oriented-programming-oop-3443</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-object-oriented-programming-oop-3443</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
What is object-oriented programming (OOP)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
It is an agreement describing how you can write programs, grouping state, and related operations in one place. &lt;/p&gt;

&lt;p&gt;There are classes - a boilerplate for objects, objects - actual containers for the data, methods - operators over data in these objects.&lt;/p&gt;

&lt;p&gt;// Btw, it may be useful to know the other paradigms, more info on the &lt;a href="https://en.wikipedia.org/wiki/Programming_paradigm"&gt;wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
Let's start from some simple problem which we will try to solve using OOP.&lt;/p&gt;

&lt;p&gt;Imagine we are building new Facebook, but for the dogs. Awesome startup idea! &lt;br&gt;
&lt;a href="https://i.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, so we are dealing with dog profiles, what data is there?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  name: 'Doggert',
  age: 2,
  isGood: true,
},
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need some way to create profiles like this in a blink of an eye and do some common things like barking.&lt;/p&gt;

&lt;p&gt;At this point, OOP kicks in. Let's create a boilerplate code that will help us easily create objects like the previous one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DogProfile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isGood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doggert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DogProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doggert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to figure out how to bark, as it is required for every mannered dog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DogProfile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bark!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;barkInEnglish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello my friend! My name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;changeName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;doggert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;barkInEnglish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;doggert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doggert the Great&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;doggert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;barkInEnglish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have a class, which helps us create new data, objects which store data, and methods that help us to work with the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are not only 🦄 and 🌈. In real-life applications, you should consider few caveats using this approach.&lt;/p&gt;

&lt;p&gt;For example, you should consider how do you extend or refactor existing classes. Imagine you need to add &lt;code&gt;CatProfile&lt;/code&gt;, it is the same as &lt;code&gt;DogProfile&lt;/code&gt;, but still different. How do you handle situations like this?&lt;/p&gt;

&lt;p&gt;At another moment you need to add admin profiles and admin permissions. How do you handle it? Will you need to update all classes?&lt;/p&gt;

&lt;p&gt;There is another funny sound issue &lt;code&gt;banana, monkey, jungle problem&lt;/code&gt;. It is when you need to create a banana, but you need a monkey to hold it, but the monkey only lives in a forest.&lt;/p&gt;

&lt;p&gt;So there are a lot of possible issues which you need to be aware of in advance. &lt;code&gt;With great power comes great responsibility&lt;/code&gt; as you may have heard 🕷&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QYkX9IMHthYn0Y3pcG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QYkX9IMHthYn0Y3pcG/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;p.s.: I'm not trying to be 100% accurate on every definition, but just trying to describe it in simple words. Sorry in advance 🙏&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;wiki/OOP&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Programming_paradigm"&gt;wiki/programming_paradigm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-static-vs-dynamic-typing-2d5k"&gt;JS interview in 2 minutes / Static vs Dynamic typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-higher-order-functions-38kb"&gt;JS interview in 2 minutes / Higher Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-value-vs-reference-5a8k"&gt;JS interview in 2 minutes / value vs reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>😤React State Antipattern.</title>
      <author>Alex Suarez</author>
      <pubDate>Wed, 28 Apr 2021 19:54:53 +0000</pubDate>
      <link>https://dev.to/alexandprivate/react-state-antipattern-1gi</link>
      <guid>https://dev.to/alexandprivate/react-state-antipattern-1gi</guid>
      <description>&lt;p&gt;Putting data in your redux or global state is an antipattern... Don't do it ... like never!&lt;/p&gt;

&lt;p&gt;Thanks :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Does Python need types?</title>
      <author>Tushar Sadhwani</author>
      <pubDate>Wed, 28 Apr 2021 19:50:15 +0000</pubDate>
      <link>https://dev.to/tusharsadhwani/does-python-need-types-59if</link>
      <guid>https://dev.to/tusharsadhwani/does-python-need-types-59if</guid>
      <description>&lt;p&gt;I'm a huge fan of Python. It's by far the simplest general purpose language, that you can just pick up and start building amazing things with.&lt;/p&gt;

&lt;p&gt;But for the past year or so, I've been working on frontend projects, and I've really enjoyed using &lt;a href="https://www.typescriptlang.org"&gt;Typescript&lt;/a&gt;. It's essentially JavaScript, but with fancy features built on top of it like &lt;em&gt;Static Type checking&lt;/em&gt; and &lt;em&gt;Null safety&lt;/em&gt;, and it was &lt;em&gt;awesome&lt;/em&gt; how much it helped in writing robust, bug free code.&lt;/p&gt;

&lt;p&gt;So I went out to find if Python has such an equivalent, and sure enough, there was.&lt;/p&gt;

&lt;p&gt;It's called &lt;a href="https://mypy-lang.org"&gt;mypy&lt;/a&gt;, and it is amazing. It works so well in-fact, that I can never go back to writing plain Python now — and this article will be your introduction to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But before all that&lt;/strong&gt;, let's figure out what's the deal with &lt;em&gt;Types&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-types"&gt;
  &lt;/a&gt;
  Why types?
&lt;/h2&gt;

&lt;p&gt;What it essentially means is if you have a type system, &lt;strong&gt;every variable has a pre-decided type associated with it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1gLI665--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdmzm8gner72499j5i3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1gLI665--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdmzm8gner72499j5i3h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
Untyped vs. typed Python code



&lt;blockquote&gt;
&lt;p&gt;Note that, while this might not look like it, the typed version is perfectly valid Python code.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;What it also means, is you can't pass values of the wrong type anywhere. The type checker doesn't let you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbrtepU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgam11h9xoxqyhizstw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbrtepU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgam11h9xoxqyhizstw2.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Which is extremely valuable if you think about it - I've lost count how many &lt;code&gt;TypeError&lt;/code&gt;'s I've seen in Python over the years!&lt;/p&gt;

&lt;p&gt;Just having the confidence that there's no such place in your code where accidentally passed a &lt;code&gt;str&lt;/code&gt; where an &lt;code&gt;int&lt;/code&gt; was expected, eliminates an entire class of bugs from your codebase.&lt;/p&gt;




&lt;p&gt;Not only that - you get a bunch of other benefits, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self-documenting code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;None&lt;/code&gt;-awareness&lt;/li&gt;
&lt;li&gt;Better autocompletion and IDE support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll go over all these points in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selfdocumenting-code"&gt;
  &lt;/a&gt;
  Self-documenting code
&lt;/h3&gt;

&lt;p&gt;Imagine you have this piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pending_ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems rather simple, doesn't it? We seem to have a list of &lt;code&gt;order&lt;/code&gt;'s, and we add each order's id to a set called &lt;code&gt;pending_ids&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what are &lt;code&gt;order&lt;/code&gt;'s here...&lt;/p&gt;

&lt;p&gt;It's hard to tell. In a large codebase, you might have to search pretty hard to find out which part of the code is calling &lt;code&gt;add_orders&lt;/code&gt;, and where the data in that is coming from, to eventually find out that it's supposed to be just a &lt;code&gt;namedtuple&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Order&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pending_ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's instantly clear, that everywhere &lt;code&gt;add_orders&lt;/code&gt; is used, it's going to be exactly of that type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-none-endraw-awareness"&gt;
  &lt;/a&gt;
  &lt;code&gt;None&lt;/code&gt;-awareness
&lt;/h3&gt;

&lt;p&gt;What I mean by this, is that not only can you not pass wrong types of values around, you also can't pass values that could be &lt;code&gt;None&lt;/code&gt;, to places that don't expect the value to be possibly &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'User'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'favorites'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_users&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_from_api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Anonymous'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;favorites&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'favorites'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_favorite_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;favorites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;print_favorite_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and on first glance, this looks fine. We're using &lt;code&gt;.get&lt;/code&gt; so we shouldn't get a &lt;code&gt;KeyError&lt;/code&gt; anywhere, so we should be fine, right?&lt;/p&gt;

&lt;p&gt;Now here's the typed version of the same code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;favorites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_from_api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Anonymous'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;favorites&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'favorites'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_favorite_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;favorites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;print_favorite_colors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as soon as you add types, you see one error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6ka6E_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcmm87dc0gdnwr7k45j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6ka6E_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcmm87dc0gdnwr7k45j1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You forgot that &lt;code&gt;user.favorites&lt;/code&gt; could be None, which would crash your entire application.&lt;/p&gt;

&lt;p&gt;Good thing mypy caught it before your clients did.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-autocompletion-and-ide-support"&gt;
  &lt;/a&gt;
  Better autocompletion and IDE support
&lt;/h3&gt;

&lt;p&gt;This is honestly my favorite part of working with typed Python. The amount of autocompletion static types give me is awesome, and it increases my productivity ten-fold, because I rarely have to open the documentation anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXySS-2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af50k2xhu0n7oz5w3f83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXySS-2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af50k2xhu0n7oz5w3f83.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-use-it"&gt;
  &lt;/a&gt;
  Where can I use it?
&lt;/h2&gt;

&lt;p&gt;Now I can hear you saying, "All of this sounds very cool. But where can I use this mypy-thing in my Python codebase?"&lt;/p&gt;

&lt;p&gt;And turns out, &lt;strong&gt;you can start gradually adding types to your existing Python codebase&lt;/strong&gt;, one function and one class at a time. It will infer as much information as it can from the amount of type information it has, and will reduce your bugs no matter how small you start.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, this was my introduction to you, to the world of static type checking in Python. Are you interested in learning more about it? I'll be dropping a detailed guide to mypy very soon, so stay tuned.&lt;/p&gt;

&lt;p&gt;I'd also love to hear your thoughs on this article, so let me know what you think about mypy down in the comments.&lt;/p&gt;

</description>
      <category>python</category>
      <category>types</category>
      <category>mypy</category>
    </item>
    <item>
      <title>A Promise of Asynchronous JavaScript</title>
      <author>Michael Karén</author>
      <pubDate>Wed, 28 Apr 2021 19:47:45 +0000</pubDate>
      <link>https://dev.to/this-is-learning/a-promise-of-asynchronous-javascript-4all</link>
      <guid>https://dev.to/this-is-learning/a-promise-of-asynchronous-javascript-4all</guid>
      <description>&lt;p&gt;In this article, we discover the &lt;strong&gt;problems with synchronous JavaScript&lt;/strong&gt; and how we can &lt;strong&gt;solve them with the asynchronous&lt;/strong&gt; techniques of &lt;strong&gt;callbacks, promises, and async/await&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We go through the three ways one by one with examples to discover how JavaScript has evolved in this area in recent years. However, before looking into these techniques, let’s look into the difference between synchronous and asynchronous code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#synchronous-code"&gt;
  &lt;/a&gt;
  Synchronous code
&lt;/h2&gt;

&lt;p&gt;JavaScript is a single-threaded programming language, which means only one thing can happen at a time. While a single thread simplifies writing and reasoning about code, this also has some drawbacks.&lt;/p&gt;

&lt;p&gt;Imagine we do a long-running task like fetching a resource over the network. Now we block the browser until the resource is downloaded. This can make for a bad user experience and might result in the user leaving our page.&lt;/p&gt;

&lt;p&gt;When we execute code &lt;strong&gt;synchronously&lt;/strong&gt;, we wait for it to finish before moving to the next task. Nothing else can happen while each operation is being processed — rendering is paused.&lt;/p&gt;

&lt;p&gt;Let’s write some code to clarify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;in logFunction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;logFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;End&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// -&amp;gt; Start&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; in logFunction&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; End&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code executes as expected.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We log “Start”. &lt;/li&gt;
&lt;li&gt;We execute the function which logs “in logFunction”&lt;/li&gt;
&lt;li&gt;We log “End”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, synchronous tasks must be aware of one another and be executed in sequence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-code"&gt;
  &lt;/a&gt;
  Asynchronous code
&lt;/h2&gt;

&lt;p&gt;That’s where asynchronous JavaScript comes into play. Using asynchronous JavaScript, we can perform long-lasting tasks without blocking the main thread. When we execute something &lt;strong&gt;asynchronously&lt;/strong&gt;, we can move to another task before it finishes.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;event loop&lt;/strong&gt; is the secret behind JavaScript’s asynchronous programming. JavaScript executes all operations on a single thread, but using a few clever data structures gives us the illusion of multi-threading. If you want to understand what happens under the hood in the following examples, you should read more about the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;concurrency model and the event loop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s do another example, this time using &lt;code&gt;setTimeout()&lt;/code&gt;, that allows us to wait a defined number of milliseconds before running its code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;In timeout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Wait 1s to run&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;End&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// -&amp;gt; Start&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; End&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; In timeout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you expect “In timeout” to be logged before “End”? &lt;br&gt;
We are not blocking the code execution but instead, we continue and come back to run the code inside &lt;code&gt;setTimeout&lt;/code&gt; one second later.&lt;/p&gt;

&lt;p&gt;Let’s look at another example. When we fetch an image from a server, we can’t return the result immediately. That means that the following wouldn’t work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myImage.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// fetch is asynchronous&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s because we don’t know how long the image takes to download, so when we run the second line, it throws an error because the response is not yet available. Instead, we need to wait until the response returns before using it.&lt;/p&gt;

&lt;p&gt;Let’s look at how we would solve this with asynchronous code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callbacks"&gt;
  &lt;/a&gt;
  Callbacks
&lt;/h2&gt;

&lt;p&gt;This approach to asynchronous programming is to make slow-performing actions take an extra argument, a &lt;strong&gt;callback function&lt;/strong&gt;. When the slow action finishes, the callback function is called with the result.&lt;/p&gt;

&lt;p&gt;As an example, the &lt;code&gt;setTimeout&lt;/code&gt; function waits a given number of milliseconds before calling a function. We can simulate slow asynchronous tasks without calling the backend this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One second later.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the concept of callbacks is great in theory, it can lead to confusing and difficult-to-read code. Just imagine making callback after callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getMoreData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getMoreData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;getMoreData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
       &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nested callbacks going several levels deep are sometimes called &lt;strong&gt;callback hell&lt;/strong&gt;. Each new callback level makes the code more difficult to understand and maintain. Using callbacks is not common these days, but if we get unlucky we might find them in legacy code bases.&lt;/p&gt;

&lt;p&gt;Next, we look into how modern JavaScript has tried to solve this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h2&gt;

&lt;p&gt;Promises, introduced with ES6, are a new way of dealing with asynchronous operations in JavaScript. A &lt;strong&gt;promise&lt;/strong&gt; is an object that might produce a value in the future. Just like in real life, we don’t know if the promise will be kept and we use the promise object as a placeholder while we wait for the outcome.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having an object as a proxy for future values lets us write the code in a synchronous manner. We get the promise object and continue executing the code. But, there is a bit more to it, as we will see.&lt;/p&gt;

&lt;p&gt;The promise constructor takes one argument, a callback with two parameters, one for success (resolve) and one for fail (reject). We need to either resolve a promise if it’s fulfilled or reject it if it failed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="c1"&gt;// Do stuff&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* fulfilled */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It worked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It failed!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#states"&gt;
  &lt;/a&gt;
  States
&lt;/h2&gt;

&lt;p&gt;A promise in JavaScript is similar to a promise in real life. It will either be kept, (fulfilled), or it won’t (rejected).&lt;/p&gt;

&lt;p&gt;A promise can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;*&lt;em&gt;pending *&lt;/em&gt;— Initial state, not fulfilled or rejected yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;em&gt;fulfilled *&lt;/em&gt;— The operation succeeded. &lt;code&gt;resolve()&lt;/code&gt; was called.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;em&gt;rejected *&lt;/em&gt;— The operation failed. &lt;code&gt;reject()&lt;/code&gt; was called.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;settled&lt;/strong&gt;— Has fulfilled or rejected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUhQMP7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619630744916/tzF-5n28M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUhQMP7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619630744916/tzF-5n28M.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a promise is &lt;em&gt;settled&lt;/em&gt; it can not change its state anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resolve"&gt;
  &lt;/a&gt;
  Resolve
&lt;/h3&gt;

&lt;p&gt;Let’s create a promise and resolve it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We are done.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; Promise {&amp;lt;fulfilled&amp;gt;: "We are done."}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that resolving the promise resulted in a &lt;em&gt;fulfilled&lt;/em&gt; state.&lt;/p&gt;

&lt;p&gt;Now that we have created a promise, let’s see how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then"&gt;
  &lt;/a&gt;
  Then
&lt;/h3&gt;

&lt;p&gt;To access the value passed by the &lt;code&gt;resolve&lt;/code&gt; or &lt;code&gt;reject&lt;/code&gt; functions, we can use &lt;code&gt;then()&lt;/code&gt;. It takes two optional arguments, a callback for a resolved case and another for a rejected one.&lt;/p&gt;

&lt;p&gt;In this case, we get its resolved value by using the &lt;code&gt;then()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We are done.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; We are done.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A promise can only resolve or reject once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chaining"&gt;
  &lt;/a&gt;
  Chaining
&lt;/h3&gt;

&lt;p&gt;Since &lt;code&gt;then()&lt;/code&gt; returns a new promise, it can be chained. Like synchronous code, chaining results in a sequence that runs in serial.&lt;/p&gt;

&lt;p&gt;Consider this simplified example where we fetch some data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;saveData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleErrors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming each function returns a promise, &lt;code&gt;saveData()&lt;/code&gt; waits for &lt;code&gt;processData()&lt;/code&gt; to complete before starting, which in turn waits for &lt;code&gt;fetch()&lt;/code&gt; to complete. &lt;code&gt;handleErrors()&lt;/code&gt; only runs if any of the previous promises reject.&lt;/p&gt;

&lt;p&gt;The possibility of chaining is one of the advantages of using Promises compared to callbacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;When a promise rejects, the control jumps to the closest rejection handler. The &lt;code&gt;catch()&lt;/code&gt; doesn’t have to be immediately after, it may instead appear after one or multiple &lt;code&gt;then()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We failed.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; We failed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should end all promise chains with a &lt;code&gt;catch()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Promises are commonly used when fetching data over a network or doing other kinds of asynchronous programming in JavaScript and have become an integral part of modern JavaScript.&lt;/p&gt;

&lt;p&gt;Next, let’s take a look at &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-and-await"&gt;
  &lt;/a&gt;
  Async and Await
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Async functions and the await keyword&lt;/strong&gt;, new additions with ECMAScript 2017, act as syntactic sugar on top of promises allowing us to write synchronous-looking code while performing asynchronous tasks behind the scenes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  Async
&lt;/h2&gt;

&lt;p&gt;First, we have the &lt;code&gt;async&lt;/code&gt; keyword. We put it in front of a function declaration to turn it into an &lt;em&gt;async function&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Invoking the function now returns a &lt;strong&gt;promise&lt;/strong&gt;. This is one of the traits of async functions — their return values are converted to promises.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Async functions&lt;/em&gt; enable us to write promise-based code as if it were synchronous, but without blocking the execution thread and instead operating asynchronously.&lt;/p&gt;

&lt;p&gt;However, &lt;code&gt;async&lt;/code&gt; alone does not make the magic happen. The next step is to use the &lt;code&gt;await&lt;/code&gt; keyword inside the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#await"&gt;
  &lt;/a&gt;
  Await
&lt;/h2&gt;

&lt;p&gt;The real advantage of &lt;em&gt;async functions&lt;/em&gt; becomes apparent when you combine them with the &lt;code&gt;await&lt;/code&gt; keyword. Await can only be used inside an async block, where it makes JavaScript wait until a promise returns a result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The keyword &lt;code&gt;await&lt;/code&gt; makes JavaScript pause at that line until the promise settles and returns its result, and then resumes code execution.&lt;/p&gt;

&lt;p&gt;It’s a more elegant syntax of getting the result from a promise than &lt;code&gt;promise.then()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch"&gt;
  &lt;/a&gt;
  Fetch
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;fetch()&lt;/code&gt; allows us to make network requests similar to &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR). The main difference is that the &lt;strong&gt;Fetch API&lt;/strong&gt; uses promises, which enables a simpler and cleaner API, avoiding callbacks.&lt;/p&gt;

&lt;p&gt;The simplest use of &lt;code&gt;fetch()&lt;/code&gt; takes one argument — the path to the resource — and returns a promise containing the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our code, we now wait for &lt;code&gt;fetch()&lt;/code&gt; to return with the data before we return it from the function.&lt;/p&gt;

&lt;p&gt;Now, we have our function ready. Remember, since it returns a promise, we need to use &lt;code&gt;then()&lt;/code&gt; to get hold of the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we could even write this shorthand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have all the basics of expected behavior figured out now, but what if something unexpected happens?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;If &lt;code&gt;await promise&lt;/code&gt; is rejected, it throws the error, just as if there were a &lt;code&gt;throw&lt;/code&gt; statement at that line. We can catch that error using &lt;code&gt;try/catch&lt;/code&gt;, the same way as in regular code where an error is thrown.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don’t have the &lt;code&gt;try/catch&lt;/code&gt;, the promise generated by calling the async function becomes rejected. We can append &lt;code&gt;catch()&lt;/code&gt; to handle it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don’t add a &lt;code&gt;catch()&lt;/code&gt;, we get an unhandled promise error. We could catch such errors using a global error handler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-with-fetch"&gt;
  &lt;/a&gt;
  Example with fetch
&lt;/h2&gt;

&lt;p&gt;For testing purposes, it’s often a good idea to start by making the data available locally. We can do this by creating a &lt;strong&gt;json file&lt;/strong&gt; with the data. Since we can use &lt;code&gt;fetch()&lt;/code&gt; to get the data from it just like we would do with a remote call it’s easy to replace the URL from local to remote.&lt;/p&gt;

&lt;p&gt;We can’t use fetch directly on the file system so we need to run a webserver to serve our file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httpserver"&gt;
  &lt;/a&gt;
  Http-server
&lt;/h3&gt;

&lt;p&gt;If we don’t have a web server on our machine, we can use the simple, zero-configuration command-line &lt;a href="https://github.com/http-party/http-server#readme"&gt;http-server&lt;/a&gt;. You need &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed on your machine. &lt;a href="https://www.npmjs.com/package/npx"&gt;Npx&lt;/a&gt; is a tool for executing Node packages, and we can use it to run our server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx http-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It serves files from the folder we run the command from. When the server starts, it tells you which address to go to in your browser to run the application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--le2a5Fky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619630747749/SYMDOs-kO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--le2a5Fky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619630747749/SYMDOs-kO.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are serving the file, we can start the actual coding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch"&gt;
  &lt;/a&gt;
  Fetch
&lt;/h3&gt;

&lt;p&gt;First, we create a file &lt;code&gt;data.json&lt;/code&gt; where we can save the data in JSON format. Next, we write an *async function &lt;code&gt;*getData()&lt;/code&gt; to get the data from the local json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Default if file is empty;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response from fetch is an HTTP response, not the actual JSON. To extract the JSON body content from the response, we use the &lt;code&gt;json()&lt;/code&gt; method. Running the code retrieves the data from the local file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we have code that doesn’t complete immediately, we need to wait for it to finish before continuing. This is where asynchronous JavaScript comes in. We looked into the differences between synchronous and asynchronous JavaScript and how we first tried solving it with callbacks.&lt;/p&gt;

&lt;p&gt;Next, we learned about promises, and how they solve some of the problems we had with callbacks. Promises are commonly used when fetching data over a network or doing other kinds of asynchronous programming in JavaScript. They have become an integral part of modern JavaScript and as such, are important for JavaScript developers to master.&lt;/p&gt;

&lt;p&gt;Async/await provides a nice, simplified way to write async code that is simpler to read and maintain. The &lt;code&gt;async&lt;/code&gt; keyword tells that functions return a promise rather than directly returning the value. The &lt;code&gt;await&lt;/code&gt; keyword can only be used inside an async block, where it makes JavaScript wait until a promise returns a result.&lt;/p&gt;

&lt;p&gt;I hope that after reading this, you have a better understanding of asynchronous JavaScript and the different techniques we can use to implement it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Go inside Wren CLI</title>
      <author>Camilo</author>
      <pubDate>Wed, 28 Apr 2021 19:21:00 +0000</pubDate>
      <link>https://dev.to/clsource/using-go-inside-wren-cli-1glp</link>
      <guid>https://dev.to/clsource/using-go-inside-wren-cli-1glp</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/wren-lang/wren/wiki/%5BCookbook%5D-Use-Golang-functions-inside-Wren-CLI"&gt;Original in Wren Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wren-lang/wren-cli"&gt;Wren CLI&lt;/a&gt; is the official project for a small command line application that embeds &lt;em&gt;Wren&lt;/em&gt;. Serves as an example implementation.&lt;/p&gt;

&lt;p&gt;If you want to use the exact version of this tutorial. &lt;a href="https://github.com/wren-lang/wren-cli/commit/8229047c3b9d33509cd8849316a8758229683782"&gt;See this commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this simple exercise we will export a go function and use it inside the &lt;em&gt;CLI&lt;/em&gt; as a new class.&lt;/p&gt;

&lt;p&gt;The function will be a simple &lt;em&gt;Http&lt;/em&gt; server that returns a message if we go to &lt;a href="http://localhost:8080"&gt;localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WiS-UkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116343900-5c08d780-a7b3-11eb-85d8-ec9f88597934.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WiS-UkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116343900-5c08d780-a7b3-11eb-85d8-ec9f88597934.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#golang"&gt;
  &lt;/a&gt;
  Golang
&lt;/h2&gt;

&lt;p&gt;If you need to install go you can &lt;a href="https://golang.org/dl/"&gt;download it from here&lt;/a&gt;. (&lt;em&gt;go version go1.16.3 darwin/amd64&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Our go code is really simple. &lt;br&gt;
Based on &lt;a href="https://golangr.com/golang-http-server/"&gt;Golang http server&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"io"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;//export Http&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Set routing rules&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//Use the default DefaultServeMux.&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Tmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Calling Go functions from Wren in static libs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main requirements for our go code are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import "C"&lt;/code&gt; : Imports the &lt;code&gt;cgo&lt;/code&gt; runtime&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;//export Http&lt;/code&gt; : Tells the compiler to export a function named &lt;code&gt;Http&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;func main() {}&lt;/code&gt;: Is required to export the lib.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need more examples &lt;a href="https://github.com/vladimirvivien/go-cshared-examples"&gt;you can look here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now lets create a new directory and files inside the &lt;em&gt;cli&lt;/em&gt; project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lKOMUDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116344740-cb32fb80-a7b4-11eb-9b63-fff5d9f4bf3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lKOMUDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116344740-cb32fb80-a7b4-11eb-9b63-fff5d9f4bf3e.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new directory named &lt;code&gt;go&lt;/code&gt; inside &lt;code&gt;src&lt;/code&gt; and inside create two files &lt;code&gt;http.go&lt;/code&gt; and &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fill &lt;code&gt;http.go&lt;/code&gt; with the code above. Then &lt;code&gt;Makefile&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;
&lt;span class="nl"&gt;b build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    go build &lt;span class="nt"&gt;-buildmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c-archive &lt;span class="nt"&gt;-o&lt;/span&gt; libhttp.a http.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we go to the &lt;code&gt;src/go&lt;/code&gt; directory and run &lt;code&gt;make build&lt;/code&gt; we will have two new files &lt;code&gt;libhttp.a&lt;/code&gt; and &lt;code&gt;libhttp.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNMbqRDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116345764-cbcc9180-a7b6-11eb-853c-5ea2fe715a58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNMbqRDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116345764-cbcc9180-a7b6-11eb-853c-5ea2fe715a58.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explendid!&lt;/p&gt;

&lt;p&gt;Now we have to configure our &lt;code&gt;C&lt;/code&gt; code files and add a new &lt;em&gt;Wren&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;src/module&lt;/code&gt; and create &lt;code&gt;server.h&lt;/code&gt;, &lt;code&gt;server.c&lt;/code&gt;, &lt;code&gt;server.wren&lt;/code&gt; and &lt;code&gt;server.wren.inc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOACwnNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116346053-6e851000-a7b7-11eb-8407-78b86f269bad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOACwnNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116346053-6e851000-a7b7-11eb-8407-78b86f269bad.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;server.h&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#ifndef server_h
#define server_h
&lt;/span&gt;
&lt;span class="cp"&gt;#include "wren.h"
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;server.c&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include "wren.h"
&lt;/span&gt;
&lt;span class="c1"&gt;// We import our generated h file from go&lt;/span&gt;
&lt;span class="cp"&gt;#include "libhttp.h"
&lt;/span&gt;
&lt;span class="c1"&gt;// And create a simple wrapper to Bind the exported function to the Wren VM&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;server.wren&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// foreign is used to tell Wren this will be implemented in C&lt;/span&gt;
    &lt;span class="nx"&gt;foreign&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;server.wren.inc&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file can be auto generated too! using &lt;/span&gt;
&lt;span class="c1"&gt;// python3 util/wren_to_c_string.py src/module/server.wren.inc src/module/server.wren&lt;/span&gt;
&lt;span class="c1"&gt;// the convention is &amp;lt;filename&amp;gt;ModuleSource&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;serverModuleSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="s"&gt;"class Http {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="s"&gt;"  foreign static serve()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="s"&gt;"}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok let's modify our &lt;code&gt;src/cli/modules.c&lt;/code&gt; file to include our new class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// near line 4&lt;/span&gt;
&lt;span class="cp"&gt;#include "modules.h"
&lt;/span&gt;
&lt;span class="cp"&gt;#include "io.wren.inc"
#include "os.wren.inc"
#include "repl.wren.inc"
#include "scheduler.wren.inc"
#include "timer.wren.inc"
&lt;/span&gt;
&lt;span class="c1"&gt;// We add our generated server.wren.inc file&lt;/span&gt;
&lt;span class="cp"&gt;#include "server.wren.inc"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// near line 51&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stdoutFlush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;schedulerCaptureMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;timerStartTimer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add our new function as a extern (this will tell the compiler that this function&lt;/span&gt;
&lt;span class="c1"&gt;// is implemented elsewhere (in our server.c file)&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WrenVM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// near line 180&lt;/span&gt;
  &lt;span class="n"&gt;MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;STATIC_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"startTimer_(_,_)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timerStartTimer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;END_CLASS&lt;/span&gt;
  &lt;span class="n"&gt;END_MODULE&lt;/span&gt;

  &lt;span class="c1"&gt;// We add our module mapping&lt;/span&gt;
  &lt;span class="c1"&gt;// import "server" for Http&lt;/span&gt;
  &lt;span class="c1"&gt;// Http.serve()&lt;/span&gt;
  &lt;span class="n"&gt;MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;STATIC_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"serve()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;END_CLASS&lt;/span&gt;
  &lt;span class="n"&gt;END_MODULE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we have to include the new paths in the &lt;em&gt;Makefile&lt;/em&gt; so the libs and objects are included in the compilation.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;projects/make.mac/wren_cli.make&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WK2PfFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116347424-3206e380-a7ba-11eb-8694-01beae4b4f23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WK2PfFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116347424-3206e380-a7ba-11eb-8694-01beae4b4f23.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="c"&gt;# Near line 30 prepend -I../../src/go
&lt;/span&gt;&lt;span class="nv"&gt;INCLUDES&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nt"&gt;-I&lt;/span&gt;../../src/go &lt;span class="nt"&gt;-I&lt;/span&gt;../../src/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="c"&gt;# Near line 34
&lt;/span&gt;&lt;span class="nv"&gt;LIBS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nt"&gt;-L&lt;/span&gt;../../src/go &lt;span class="nt"&gt;-lhttp&lt;/span&gt; &lt;span class="nt"&gt;-framework&lt;/span&gt; CoreFoundation &lt;span class="nt"&gt;-framework&lt;/span&gt; Security
&lt;span class="c"&gt;# Note that we use -lhttp to refer to libhttp.a
# also we include the required frameworks from MacOS that Go http module needs to work
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="c"&gt;# Near line 160
&lt;/span&gt;&lt;span class="nv"&gt;OBJECTS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$(OBJDIR)&lt;/span&gt;/wren_value.o
&lt;span class="nv"&gt;OBJECTS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$(OBJDIR)&lt;/span&gt;/wren_vm.o

&lt;span class="nv"&gt;OBJECTS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$(OBJDIR)&lt;/span&gt;/server.o
&lt;span class="c"&gt;# We include the generated object
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="c"&gt;# Near line 382
&lt;/span&gt;&lt;span class="nl"&gt;$(OBJDIR)/timer1.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;../../src/module/timer.c&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;notdir&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$(SILENT)&lt;/span&gt; &lt;span class="nv"&gt;$(CC)&lt;/span&gt; &lt;span class="nv"&gt;$(ALL_CFLAGS)&lt;/span&gt; &lt;span class="nv"&gt;$(FORCE_INCLUDE)&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-MF&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;(@:%.o=%.d)"&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nl"&gt;$(OBJDIR)/server.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;../../src/module/server.c&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;notdir&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;$(SILENT)&lt;/span&gt; &lt;span class="nv"&gt;$(CC)&lt;/span&gt; &lt;span class="nv"&gt;$(ALL_CFLAGS)&lt;/span&gt; &lt;span class="nv"&gt;$(FORCE_INCLUDE)&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-MF&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;(@:%.o=%.d)"&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# We include the server.c source file for the object.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are almost ready. Just go to the &lt;code&gt;make.mac&lt;/code&gt; directory and execute &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRKQvGDQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116348291-d63d5a00-a7bb-11eb-968d-334f37c04c3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRKQvGDQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/292738/116348291-d63d5a00-a7bb-11eb-968d-334f37c04c3f.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all went well you will have a shiny &lt;code&gt;wren_cli&lt;/code&gt; binary inside &lt;code&gt;bin/&lt;/code&gt;.&lt;br&gt;
And if you execute the &lt;em&gt;REPL&lt;/em&gt; you can use the new module and go to &lt;a href="http://localhost:8080"&gt;localhost:8080&lt;/a&gt; for testing it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/wren_cli
&lt;span class="se"&gt;\\&lt;/span&gt;/&lt;span class="s2"&gt;"-
 &lt;/span&gt;&lt;span class="se"&gt;\_&lt;/span&gt;&lt;span class="s2"&gt;/   wren v0.4.0
&amp;gt; import "&lt;/span&gt;server&lt;span class="s2"&gt;" for Http
&amp;gt; Http.serve()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;
&lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The generated static library contains lots of functions, even if you just exported one. So it will add weight to the &lt;em&gt;wren_cli&lt;/em&gt;. In this case up to 5Mb more.&lt;/li&gt;
&lt;li&gt;You can automate generating &lt;code&gt;wren.inc&lt;/code&gt; files with &lt;code&gt;python3 util/wren_to_c_string.py src/module/server.wren.inc src/module/server.wren&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can automate generating &lt;code&gt;projects/make.mac/wren_cli.make&lt;/code&gt; files by using &lt;a href="https://premake.github.io/"&gt;Premake&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The same procedure can be followed by other languages like &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; and bring all its power to &lt;em&gt;Wren&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-premake"&gt;
  &lt;/a&gt;
  Using Premake
&lt;/h3&gt;

&lt;p&gt;The minimum version required is: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;premake5 (Premake Build Script Generator) 5.0.0-alpha14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configure &lt;code&gt;projects/premake/premake5.lua&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- near line 58&lt;/span&gt;
&lt;span class="n"&gt;includedirs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"../../src/cli"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"../../src/module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"../../src/go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- near line 118&lt;/span&gt;
  &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="s2"&gt;"system:macosx"&lt;/span&gt;
    &lt;span class="n"&gt;systemversion&lt;/span&gt; &lt;span class="s2"&gt;"10.12"&lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/Library/Frameworks/CoreFoundation.framework"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/Library/Frameworks/Security.framework"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;linkoptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"-L../../src/go"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then execute&lt;br&gt;
&lt;code&gt;python3 utils/generate_projects.py&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Wren&lt;/em&gt; is marvelous and it's &lt;em&gt;CLI&lt;/em&gt; is easy to hack and extend. If you need &lt;em&gt;Wren&lt;/em&gt; to have industry level extensions you can rely &lt;br&gt;
on &lt;em&gt;Go&lt;/em&gt; or &lt;em&gt;Rust&lt;/em&gt; extensive libraries and create something wonderful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NinjasCL-archive/wren-cli/tree/golang"&gt;If you need a complete project you can go here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>wren</category>
      <category>c</category>
      <category>rust</category>
    </item>
    <item>
      <title>SPACE INVADERS - PC GAME | Trailer</title>
      <author>Arwaz Khan </author>
      <pubDate>Wed, 28 Apr 2021 19:13:44 +0000</pubDate>
      <link>https://dev.to/arwazkhan189/space-invaders-pc-game-trailer-1dd6</link>
      <guid>https://dev.to/arwazkhan189/space-invaders-pc-game-trailer-1dd6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello Dev's&lt;/strong&gt;,&lt;br&gt;
 I created a 🛸SPACE INVADERS - PC Game using pygame (Python) ...&lt;br&gt;
The game is almost completed just some final touch left...&lt;br&gt;
After some days game will be available on my website &lt;a href="https://arwazkhan.me"&gt;https://arwazkhan.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Game Trailer link - &lt;a href="https://youtu.be/zF5doa6dUZo"&gt;https://youtu.be/zF5doa6dUZo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQUDnYU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ot534ydj8nunxhm6ilk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQUDnYU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ot534ydj8nunxhm6ilk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou 🙏&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>gamedev</category>
      <category>pygame</category>
      <category>pcgame</category>
    </item>
    <item>
      <title>80/20 is the new Half-Ass</title>
      <author>swyx</author>
      <pubDate>Wed, 28 Apr 2021 19:00:42 +0000</pubDate>
      <link>https://dev.to/swyx/80-20-is-the-new-half-ass-3kg</link>
      <guid>https://dev.to/swyx/80-20-is-the-new-half-ass-3kg</guid>
      <description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;Pareto Principle&lt;/a&gt; is making you lazy.&lt;/p&gt;

&lt;p&gt;Let me be more precise: The &lt;a href="https://en.wikipedia.org/wiki/Pareto_distribution"&gt;Pareto distribution&lt;/a&gt; is a useful model of power law effects in real life. But people are using it poorly, primarily as an &lt;em&gt;excuse&lt;/em&gt; to be lazy.&lt;/p&gt;

&lt;p&gt;This thought was triggered by &lt;a href="https://www.shaanpuri.com/"&gt;Shaan Puri's newsletter&lt;/a&gt; featuring &lt;a href="https://stephsmith.io/"&gt;Steph Smith&lt;/a&gt; this week (both of whom I greatly respect):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VZnn75Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1079803857264205835/T2ZDra6d_normal.jpg" alt="Steph Smith profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Steph Smith
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/stephsmithio"&gt;@stephsmithio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My go-to question for learning from others is "what's your 80/20 advice on [area of expertise]?"&lt;br&gt;&lt;br&gt;Helps them focus on what matters.&lt;br&gt;&lt;br&gt;Examples:&lt;br&gt;What's your 80/20 advice on investing?&lt;br&gt;What's your 80/20 advice on building a podcast studio?&lt;br&gt;What's your 80/20 advice on eating well?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:37 PM - 24 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1386071726279127041" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1386071726279127041" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1386071726279127041" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You hear 80/20 rules &lt;a href="https://twitter.com/search?q=80%2F20%20filter%3Afollows&amp;amp;src=typed_query"&gt;a lot&lt;/a&gt; in &lt;a href="https://www.ribbonfarm.com/2017/08/17/the-premium-mediocre-life-of-maya-millennial/"&gt;premium mediocre&lt;/a&gt; circles. If you want to signal that you are smarter than the average 80/20 bear, you might refer to the "&lt;a href="https://twitter.com/search?q=%22high%20order%20bit%22&amp;amp;src=typed_query"&gt;high order bit&lt;/a&gt;" instead. Same shit, different status display.&lt;/p&gt;

&lt;p&gt;The spirit of the idea is sound. It's great for 280 character tweets and 5 minute soundbites. At best, I don't think it's sufficient for execution. At worst, it's just intellectually dishonest.&lt;/p&gt;

&lt;p&gt;Look at reactions like &lt;a href="https://twitter.com/jasonleowsg/status/1386209784626434050?s=20"&gt;this&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Love this [80/20] framing! Great way to remove the fluff and get to the core".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm sorry but the remaining 80% is not "the fluff":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People forget that &lt;em&gt;the devil is in the details&lt;/em&gt;. The first 20% everyone knows to say on Twitter. The remaining 80% is the ugly, nasty, hacky, unglamorous shit nobody talks about unless you've got time to sweat the details (&lt;em&gt;who am I kidding, of course you don't, you've already moved on to the next 80/20&lt;/em&gt;). The more popular the 80/20 meme becomes, the less competition you will have as someone who knows how to take things to the finish line.&lt;/li&gt;
&lt;li&gt;People forget that causal attribution is subject to &lt;a href="https://fs.blog/2016/04/narrative-fallacy/"&gt;narrative fallacy&lt;/a&gt;. Ask a successful person what their 80/20 was and they'll confidently tell you in hindsight. The truth is at the time they had 4 other bets also going on that just didn't work out. The popular saying in medical school is that "&lt;a href="https://blogs.bmj.com/pmj/2014/05/30/50-of-what-you-are-taught-is-wrong/"&gt;50% of what you learn will be wrong — we just don't know which 50%&lt;/a&gt;". And that is in goddamn &lt;em&gt;medical science&lt;/em&gt; with double blind randomized clinical trials. We don't have 1% of that rigor in popular anecdata which you base your 80/20 inferences on.&lt;/li&gt;
&lt;li&gt;People don't understand that distributions aren't always Pareto. When you assert that "an 80/20" exists, you are asserting useful &lt;a href="https://en.wikipedia.org/wiki/Dimensionality_reduction"&gt;dimensionality reduction&lt;/a&gt;. Sometimes complex, or even linear, things just do not have an "80/20". The &lt;a href="https://www.faa.gov/regulations_policies/handbooks_manuals/aviation/media/prh_change1.pdf"&gt;FAA's Parachute Rigger Handbook&lt;/a&gt; has 350 pages of densely packed advice. Please &lt;strong&gt;do not try to 80/20 your parachute packing&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm reminded of that classic movie Click, where  Adam Sandler finds a magic remote that lets him 80/20 his life:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5fjha1FnlBU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Don't spend your life spraying 20% effort all over the place, hoping for 80% results, only to look back and wonder why you never hit 100% on anything.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This topic is loosely related to Epistemology, which I've &lt;a href="https://www.swyx.io/first-principles-approach/#epistemology"&gt;written about briefly&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>reflections</category>
      <category>advice</category>
    </item>
    <item>
      <title>Using AWS CDK to deploy your Amazon Managed Workflows for Apache Airflow environment</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Wed, 28 Apr 2021 18:48:17 +0000</pubDate>
      <link>https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf</link>
      <guid>https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment"&gt;
  &lt;/a&gt;
  Using AWS CDK to deploy your Amazon Managed Workflows for Apache Airflow environment
&lt;/h3&gt;

&lt;p&gt;What better way to celebrate CDK Day tomorrow, than to return to a previous blog where I wrote about automating the &lt;a href="https://aws-oss.beachgeek.co.uk/3h"&gt;installation and configuration of Amazon Managed Workflows for Apache Airflow (MWAA)&lt;/a&gt;, and take a look at doing the same thing but this time using AWS CDK. &lt;/p&gt;

&lt;p&gt;What this post will show you is how you can use AWS CDK to deploy a working MWAA environment, and I will provide enough details that you should be able to tailor this to your own needs. It should take (if everything works ok!) around 45-60 minutes to complete. Given that Apache Airflow uses Python, this CDK application is also going to be using Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK Day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you didn't know, &lt;a href="https://aws-oss.beachgeek.co.uk/fq"&gt;CDK Day&lt;/a&gt; is a community run event that covers the AWS Cloud Development Kit (AWS CDK), a developer tool built on the open source Constructs model. With over 3500 people signed up, if you are reading this before the 30th, there is still time to &lt;a href="https://aws-oss.beachgeek.co.uk/fr"&gt;register&lt;/a&gt; - it is a free, virtual event, so what are you waiting for..&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-mwaa-with-cdk"&gt;
  &lt;/a&gt;
  Installing MWAA with CDK
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;What will you need&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS account with the right level of privileges&lt;/li&gt;
&lt;li&gt;An environment with the AWS CDK configured and running - it is outside the scope of this post to cover what AWS CDK is, but check out my open source newsletter as I often feature great tutorial blog posts. Also, I would ensure you are running the latest version too.&lt;/li&gt;
&lt;li&gt;Access to an AWS region where Managed Workflows for Apache Airflow is supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have provided everything you need in a &lt;a href="https://aws-oss.beachgeek.co.uk/fs"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some thing to watch out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are deploying this in an environment that already has VPCs, you may generate an error if you exceed the number of VPCs within your AWS Account.&lt;/li&gt;
&lt;li&gt;If you deploy and are using an existing Amazon S3 bucket as your MWAA Dag bucket, the deployment will fail. Make sure that the Amazon S3 bucket you define for your MWAA environment does not existing before running the CDK app - I need to put some better logic in the code, so by the time you read this I might have done this. If not, keep note.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After checking out the repository you will have the following files on your local developer environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── LICENSE
├── README.md
├── app.py
├── cdk.json
├── dags
│   ├── sample-cdk-dag-od.py
│   └── sample-cdk-dag.py
├── mwaa_cdk
│   ├── mwaa_cdk_backend.py
│   └── mwaa_cdk_env.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will go through these files, but first we need to install the AWS CDK constructs we are using. If you are familiar with CDK, then you may already have these but in this specific CDK application, I will be using the &lt;strong&gt;aws_cdk.aws_mwaa&lt;/strong&gt; construct, which you may not have installed.&lt;/p&gt;

&lt;p&gt;To make this easier, I have put them in the requirements.txt so all you need to do is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a look at the &lt;strong&gt;app.py&lt;/strong&gt; file, we can see what our CDK application looks like. We are creating two stacks, one called &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; and the other called &lt;strong&gt;mwaa_cdk_env&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env python3
import io
from aws_cdk import core

from mwaa_cdk.mwaa_cdk_backend import MwaaCdkStackBackend
from mwaa_cdk.mwaa_cdk_env import MwaaCdkStackEnv

env_EU=core.Environment(region="eu-central-1", account="XXXXXXXXX")
mwaa_props = {'dagss3location': 'airflow-ricsue-cdk-demo','mwaa_env' : 'cdk-ricsue-demo-delete'}

app = core.App()

mwaa_backend = MwaaCdkStackBackend(
    scope=app,
    id="MWAA-Backend",
    env=env_EU,
    mwaa_props=mwaa_props
)

mwaa_env = MwaaCdkStackEnv(
    scope=app,
    id="MWAA-Environment",
    vpc=mwaa_backend.vpc,
    env=env_EU,
    mwaa_props=mwaa_props
)

app.synth()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; will be used to setup the VPC network that the MWAA environment is going to use. The &lt;strong&gt;mwaa_cdk_env&lt;/strong&gt; is the stack that will configure your MWAA environment. In order to do both though, first we set up some parameters we want to use so that we do not need to hard code these. If you look at&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="eu-central-1", account="XXXXXXXXX")
mwaa_props = {'dagss3location': 'airflow-ricsue-cdk-demo','mwaa_env' : 'cdk-ricsue-demo-delete'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we define the AWS region and the AWS Account we want to deploy this into. These are used when creating the IAM policies as well as ensuring the environment is setup in the AWS region you want to run this in. Following that we define &lt;strong&gt;dagss3location&lt;/strong&gt; which is the name of the Amazon S3 bucket that will get created. You will need to change this before you run this to make sure it is something unique. The &lt;strong&gt;mwaa_env&lt;/strong&gt; is the name we give to the MWAA environment.&lt;/p&gt;

&lt;p&gt;After changing the values in the &lt;strong&gt;app.py&lt;/strong&gt; file and saving, we are ready to deploy. Before we do that, lets take a look at the stacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is nothing particular interesting about this other than it creates the underlying network infrastructure that MWAA needs. There is nothing you need to do, but if you do want to experiment, then what I would say is that a) ensure you read and follow the networking guidance on the MWAA documentation site, as they provide you with details on what needs to be setup, b) if you are trying to lock down the networking, try just deploying the backend stack, and then manually creating a MWAA environment to see if it works/fails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from aws_cdk import core
import aws_cdk.aws_ec2 as ec2
import aws_cdk.aws_s3 as s3
import aws_cdk.aws_s3_deployment as s3deploy
import aws_cdk.aws_mwaa as mwaa

class MwaaCdkStackBackend(core.Stack):

    def __init__(self, scope: core.Construct, id: str, mwaa_props, **kwargs) -&amp;gt; None:
        super().__init__(scope, id, **kwargs)

        # Create VPC network

        self.vpc = ec2.Vpc(
            self,
            id="MWAA-ApacheAirflow-VPC",
            cidr="10.192.0.0/16",
            max_azs=2,
            nat_gateways=1,
            subnet_configuration=[
                ec2.SubnetConfiguration(
                    name="public", cidr_mask=24,
                    reserved=False, subnet_type=ec2.SubnetType.PUBLIC),
                ec2.SubnetConfiguration(
                    name="private", cidr_mask=24,
                    reserved=False, subnet_type=ec2.SubnetType.PRIVATE)
            ],
            enable_dns_hostnames=True,
            enable_dns_support=True
        )


        core.CfnOutput(
            self,
            id="VPCId",
            value=self.vpc.vpc_id,
            description="VPC ID",
            export_name=f"{self.region}:{self.account}:{self.stack_name}:vpc-id"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;mwaa_cdk_env&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The MWAA environment stack is a little more interesting and I will break it down. The first part of the stack configures the Amazon S3 buckets that MWAA will use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MwaaCdkStackEnv(core.Stack):

    def __init__(self, scope: core.Construct, id: str, vpc, mwaa_props,  **kwargs) -&amp;gt; None:
        super().__init__(scope, id, **kwargs)

        # Create MWAA S3 Bucket and upload local dags 

        dags_bucket = s3.Bucket(
            self,
            "mwaa-dags",
            bucket_name=f"{mwaa_props['dagss3location'].lower()}",
            versioned=True,
            block_public_access=s3.BlockPublicAccess.BLOCK_ALL
        )

        s3deploy.BucketDeployment(self, "DeployDAG",
        sources=[s3deploy.Source.asset("./dags")],
        destination_bucket=dags_bucket,
        destination_key_prefix="dags",
        prune=False,
        retain_on_delete=False
        )

        dags_bucket_arn = dags_bucket.bucket_arn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this also does however, is it takes all the files it finds in the local dags folder (on your developer environment) and uploads those as part of the deployment process. You can tweak this to your own requirements if you want, and even comment it out/remove as needed if you do not need to do this.&lt;/p&gt;

&lt;p&gt;Next up we have the code that creates the MWAA execution policy and associated role that will be used by the MWAA worker nodes. This is taken from the MWAA documentation, but you can adjust as needed for your own environment. You might need to do this if you are integrating with other AWS services - this has been setup with default none access, so anything you need to do will need to be added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       # Create MWAA IAM Policies and Roles, copied from MWAA documentation site

        mwaa_policy_document = iam.PolicyDocument(
            statements=[
                iam.PolicyStatement(
                    actions=["airflow:PublishMetrics"],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:airflow:{self.region}:{self.account}:environment/{mwaa_props['mwaa_env']}"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "s3:ListAllMyBuckets"
                    ],
                    effect=iam.Effect.DENY,
                    resources=[
                        f"{dags_bucket_arn}/*",
                        f"{dags_bucket_arn}"
                        ],
                ),
                iam.PolicyStatement(
                    actions=[
                        "s3:GetObject*",
                        "s3:Head*",
                                 "s3:GetBucket*",
                                 "s3:List*"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[
                        f"{dags_bucket_arn}/*",
                        f"{dags_bucket_arn}"
                        ],
                ),
                iam.PolicyStatement(
                    actions=[
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:GetLogRecord",
                        "logs:GetLogGroupFields",
                        "logs:GetQueryResults"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:logs:{self.region}:{self.account}:log-group:airflow-{mwaa_props['mwaa_env']}-*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "logs:DescribeLogGroups"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "sqs:ChangeMessageVisibility",
                        "sqs:DeleteMessage",
                        "sqs:GetQueueAttributes",
                        "sqs:GetQueueUrl",
                        "sqs:ReceiveMessage",
                        "sqs:SendMessage"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=[f"arn:aws:sqs:{self.region}:*:airflow-celery-*"],
                ),
                iam.PolicyStatement(
                    actions=[
                        "kms:Decrypt",
                        "kms:DescribeKey",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                    conditions={
                        "StringEquals": {
                            "kms:ViaService": [
                                f"sqs.{self.region}.amazonaws.com",
                                f"s3.{self.region}.amazonaws.com",
                            ]
                        }
                    },
                ),
            ]
        )

        mwaa_service_role = iam.Role(
            self,
            "mwaa-service-role",
            assumed_by=iam.CompositePrincipal(
                iam.ServicePrincipal("airflow.amazonaws.com"),
                iam.ServicePrincipal("airflow-env.amazonaws.com"),
            ),
            inline_policies={"CDKmwaaPolicyDocument": mwaa_policy_document},
            path="/service-role/"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next part configures the security group and subnets needed by MWAA.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   # Create MWAA Security Group and get networking info

        security_group = ec2.SecurityGroup(
            self,
            id = "mwaa-sg",
            vpc = vpc,
            security_group_name = "mwaa-sg"
        )

        security_group_id = security_group.security_group_id

        security_group.connections.allow_internally(ec2.Port.all_traffic(),"MWAA")

        subnets = [subnet.subnet_id for subnet in vpc.private_subnets]
        network_configuration = mwaa.CfnEnvironment.NetworkConfigurationProperty(
            security_group_ids=[security_group_id],
            subnet_ids=subnets,
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final part is the most interesting from the MWAA perspective, which is setting up and then configuring the environment. I have commented some of the environment settings out, so feel free to adjust for your own needs.&lt;/p&gt;

&lt;p&gt;The first thing we do is create a configuration for the MWAA logging. In this particular configuration, I have enabled everything with INFO level logging so feel free to enable/disable or change the logging level as you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Configure specific MWAA settings - you can externalise these if you want

        logging_configuration = mwaa.CfnEnvironment.LoggingConfigurationProperty(
            task_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            worker_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            scheduler_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            dag_processing_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO"),
            webserver_logs=mwaa.CfnEnvironment.ModuleLoggingConfigurationProperty(enabled=True, log_level="INFO")
            )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we define some MWAA Apache Airflow configuration parameters. If you use custom properties, then this is where you will add them. Also, if you want to use TAGs for your MWAA environment, you can adjust accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
        options = {
            'core.load_default_connections': False,
            'core.load_examples': False,
            'webserver.dag_default_view': 'tree',
            'webserver.dag_orientation': 'TB'
        }

        tags = {
            'env': f"{mwaa_props['mwaa_env']}",
            'service': 'MWAA Apache AirFlow'
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we come to actually creating the environment, using the stuff we have created or setup above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        # Create MWAA environment using all the info above

        managed_airflow = mwaa.CfnEnvironment(
            scope=self,
            id='airflow-test-environment',
            name=f"{mwaa_props['mwaa_env']}",
            airflow_configuration_options={'core.default_timezone': 'utc'},
            airflow_version='1.10.12',
            dag_s3_path="dags",
            environment_class='mw1.small',
            execution_role_arn=mwaa_service_role.role_arn,
            #kms_key=key.key_id,
            logging_configuration=logging_configuration,
            max_workers=5,
            network_configuration=network_configuration,
            #plugins_s3_object_version=None,
            #plugins_s3_path=None,
            #requirements_s3_object_version=None,
            #requirements_s3_path=None,
            source_bucket_arn=dags_bucket_arn,
            webserver_access_mode='PUBLIC_ONLY',
            #weekly_maintenance_window_start=None
        )

        managed_airflow.add_override('Properties.AirflowConfigurationOptions', options)
        managed_airflow.add_override('Properties.Tags', tags)

        core.CfnOutput(
            self,
            id="MWAASecurityGroup",
            value=security_group_id,
            description="VPC ID for MWAA"
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Running the CDK application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you have reviewed the app, modified it so that it contains your details (your AWS account/unique S3 bucket/etc) you can now run the app and deploy the CDK stacks. To do this we use the "cdk deploy" command.&lt;/p&gt;

&lt;p&gt;First of all, from the directory, make sure everything is working ok. To do this we can use the "cdk ls" command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should return the following (which are the ids assigned in the stacks that this CDK application uses) if it is working ok.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MWAA-Backend
MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now deploy them, either all together or one at a time. This CDK application needs the MWAA-Backend app deployed first as it contains the VPC networking that will be used in the MWAA-Environment stack, so we can deploy that by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deplpy MWAA-Backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if it is working ok, it should start of with..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MWAA-Backend: deploying...
MWAA-Backend: creating CloudFormation changeset...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then start creating the CloudFormation which you can then track/view via the AWS Console. Once it has finished, you should see something like the following (your numbers/letters will be different):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ✅  MWAA-Backend

Outputs:
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCB5BDED9D45FBF85F = vpc-0a46c87709f48799a
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCprivateSubnet1Subnet41EDA5200DFEC7E0 = subnet-0a5ea20a194b2e7e1
MWAA-Backend.ExportsOutputRefMWAAApacheAirflowVPCprivateSubnet2SubnetF8BEBBAC6108F015 = subnet-0e4bb92d83d79e8fa
MWAA-Backend.VPCId = vpc-0a46c87709f48799a

Stack ARN:
arn:aws:cloudformation:eu-central-1:XXXXXXXXX:stack/MWAA-Backend/4de53ff0-a84d-11eb-a753-020a8f92cbec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now deploy the MWAA environment, which we can do simply by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deploy MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time it will pop up details about some of the security related information, in this case the IAM policies and security groups which I mentioned earlier. Answer "y" to deploying these changes. This will kick off the deployment which you can track by going to the CloudFormation console.&lt;/p&gt;

&lt;p&gt;This will take approx 20-25 minutes, so a good time to grab a cup of tea and read some of my other blog posts perhaps :-)&lt;/p&gt;

&lt;p&gt;If it has been successful, you will see the following output (again, your details will change but it should look similar to this):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ✅  MWAA-Environment

Outputs:
MWAA-Environment.MWAASecurityGroup = sg-0c2a02f721d2ce27b

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/MWAA-Environment/16380e60-a84e-11eb-a109-0a082239d27a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Testing the environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we take a look at the Amazon S3 bucket we can see we have our MWAA bucket and dags folder created, as well as our local dags uploaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEfCfGwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-s3.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEfCfGwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-s3.png%3Fraw%3Dtrue" alt="s3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we go to the MWAA console, we can see our environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1AxwtL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-env.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1AxwtL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-env.png%3Fraw%3Dtrue" alt="mwaa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now grab the URL for this environment, either by getting it from the console or by using the AWS Cli.&lt;/p&gt;

&lt;p&gt;Just substitute the name of the MWAA environment and AWS region, and it should then give you the URL you can use in your browser (although you will have to append /home to it)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note I am using jq, if you do not have this in your environment, you can run the command without this but just need to find the entry in the output where it says "WebserverUrl"&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws mwaa get-environment --name {name of the environment created} --region={region} | jq -r '.Environment | .WebserverUrl'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as we can see, we have the two sample DAGS that were in the local folder, and are now available for us in the MWAA environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcIh5gO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-ui.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcIh5gO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blogpost-cdk-mwaa/blob/main/images/mwaa-cdk-ui.png%3Fraw%3Dtrue" alt="ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing/Cleaning up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to remove everything we have deployed, all we need to do is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk destroy MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take 20-30 minutes to clean up the MWAA environment. One thing that it will not do however, is remove the Amazon S3 bucket we setup, so you will need to manually delete that via the console (or use the AWS Cli - that would be my approach). Once you have removed that S3 bucket, now clean up the backend stack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk destroy MWAA-Backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should be much quicker to clean up. Once finished, you should be done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That's all folks, I hope this has been helpful. You can find out more about the MWAA CDK construct by checking out the documentation &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-mwaa-readme.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things I will hopefully come back to in the weeks to come is taking some of the other ways I have setup MWAA and incorporate these into existing or new CDK stacks. For example;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either extending the &lt;strong&gt;mwaa_cdk_backend&lt;/strong&gt; stack to include a bastion host so we can configure a Private environment, or even creating a new stack that does that&lt;/li&gt;
&lt;li&gt;setting up and integrating a simple CI/CD stack that improves the developer experience&lt;/li&gt;
&lt;li&gt;setting up the KMS key and then configuring the MWAA environment to use it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any other suggestions, feel free to use the comments or get in touch and let me know. Would be great to hear from you...and on that note.&lt;/p&gt;

&lt;p&gt;If you found this post useful, I would be very grateful if you could let me know by completing this very short feedback thingie, which will probably only take you around 30 seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/TVWJXPA"&gt;Complete Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 Helpful CSS Tips</title>
      <author>mrwolferinc</author>
      <pubDate>Wed, 28 Apr 2021 18:29:09 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/10-helpful-css-tips-4669</link>
      <guid>https://dev.to/mrwolferinc/10-helpful-css-tips-4669</guid>
      <description>&lt;p&gt;These are 10 small CSS tips that can actually help you in projects. If you would like to request more tips, let me know in the comments section.&lt;/p&gt;




&lt;h1 id="smooth-scrolling"&gt;1. Smooth Scrolling&lt;/h1&gt;

&lt;p&gt;When you visit some websites and try to go to different sections, it scrolls smoothly to that section. You can achieve this feature on your website by using one line of CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;smooth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/BapbJKK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-prevent-raw-lttextareagt-endraw-resize"&gt;
  &lt;/a&gt;
  2. Prevent &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; Resize
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;resize&lt;/code&gt; property to prevent a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element from being resized (or limit it to one axis).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.no-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.horizontal-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.vertical-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/poRYpVL?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-drop-cap"&gt;
  &lt;/a&gt;
  3. Drop Cap
&lt;/h1&gt;

&lt;p&gt;You can add a drop cap to a paragraph by using the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/qBRvxZO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-drop-shadow"&gt;
  &lt;/a&gt;
  4. Drop Shadow
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;drop-shadow()&lt;/code&gt; filter effect on transparent images. It will give a much better shadow effect than using the &lt;code&gt;box-shadow&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/bGgJwjq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#5-center-any-raw-ltdivgt-endraw-element"&gt;
  &lt;/a&gt;
  5. Center Any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; Element
&lt;/h1&gt;

&lt;p&gt;It can sometimes be difficult to center a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element on the page, but not with this tip. You can center any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element on the page using a few lines of CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/NWdmbRy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#6-input-caret-color"&gt;
  &lt;/a&gt;
  6. Input Caret Color
&lt;/h1&gt;

&lt;p&gt;You can use the &lt;code&gt;caret-color&lt;/code&gt; property to change the color of the input field caret.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;caret-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/xxgeRYG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#7-prevent-highlighting"&gt;
  &lt;/a&gt;
  7. Prevent Highlighting
&lt;/h1&gt;

&lt;p&gt;This one is similar to #2, but you can use the &lt;code&gt;user-select&lt;/code&gt; property to prevent an element from being highlighted by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.no-highlight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/zYNXobv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#8-input-range-pseudoclasses"&gt;
  &lt;/a&gt;
  8. Input Range Pseudo-Classes
&lt;/h1&gt;

&lt;p&gt;The lesser-known &lt;code&gt;:in-range&lt;/code&gt; and &lt;code&gt;:out-of-range&lt;/code&gt; pseudo-classes can help you validate an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element whose current value is within the range specified by its &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:out-of-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/poRBMGd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#9-image-overlay"&gt;
  &lt;/a&gt;
  9. Image Overlay
&lt;/h1&gt;

&lt;p&gt;You can create an image overlay using the &lt;code&gt;object-fit&lt;/code&gt; property. This can prove to be useful when you want to create a hero image on your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image-overlay&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:only-of-type:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/abproKb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#10-the-raw-transition-endraw-property"&gt;
  &lt;/a&gt;
  10. The &lt;code&gt;transition&lt;/code&gt; Property
&lt;/h1&gt;

&lt;p&gt;You might know this one already, but what if I told you that there was a way to animate elements without the use of keyframes? The &lt;code&gt;transition&lt;/code&gt; property allows you to define the transition between two states of an element. It is mostly used for hover animations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0d6efd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0a58ca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mrwolferinc/embed/RwKmbzZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>HIPAA Compliant Scheduling API</title>
      <author>Spurwing</author>
      <pubDate>Wed, 28 Apr 2021 18:26:20 +0000</pubDate>
      <link>https://dev.to/spurwing/hipaa-compliant-scheduling-api-36id</link>
      <guid>https://dev.to/spurwing/hipaa-compliant-scheduling-api-36id</guid>
      <description>&lt;p&gt;2020 was a year of great transformation across most every industry, but especially winthin the medical industry.&lt;/p&gt;

&lt;p&gt;Traditional clinics and medical facilities moved aggressively into telehealth solutions, pushing forward a lot of amazing innovation but also bumping into a considerable amount of obstacles they hadn’t yet faced.&lt;/p&gt;

&lt;p&gt;One of those obstacles was finding a way to maintain full HIPAA compliance with their scheduling. The three components of HIPAA security rule compliance: administrative, physical security, and technical security.&lt;/p&gt;

&lt;p&gt;Thankfully though, a lot of clinics have found their way to the Spurwing Scheduling API platform (built from the ground up with HIPAA compliance in mind) and have dramatically improved the efficiency and security of their virtual scheduling platform.&lt;/p&gt;

&lt;p&gt;Let’s dig a little deeper into how the medical community is using Spurwing today!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-how-the-medical-community-is-using-spurwing-today"&gt;
  &lt;/a&gt;
  Here’s How the Medical Community is Using Spurwing Today
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwz2tTrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sevmydhlzgmnbo66qb27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwz2tTrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sevmydhlzgmnbo66qb27.png" alt="hipaa booking api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-client-booking-and-calendar-management"&gt;
  &lt;/a&gt;
  Easier Client Booking and Calendar Management
&lt;/h3&gt;

&lt;p&gt;Unsurprisingly, new research shows that patients are a lot more interested in scheduling their healthcare appointments over the web (especially via mobile friendly platforms) – and that’s helped to make Spurwing and essential part of this new telemedicine revolution.&lt;/p&gt;

&lt;p&gt;With the help of Spurwing, it becomes effortless to create a very simple calendar system in your currently existing website or digital platform for handling these kinds of calendar activities.&lt;/p&gt;

&lt;p&gt;Automating so much of the process, you free up valuable human resources that can be redirected elsewhere while also creating a much more user-friendly and intuitive scheduling system for your clients to use.&lt;/p&gt;

&lt;p&gt;Talk about a real win-win!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---p2nXkT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3n8nka2j6qepy2pvffp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---p2nXkT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3n8nka2j6qepy2pvffp.png" alt="hipaa dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-sync-across-personal-and-business-calendars"&gt;
  &lt;/a&gt;
  Quick Sync Across Personal and Business Calendars
&lt;/h3&gt;

&lt;p&gt;Synchronizing personal and business calendars becomes a lot easier with the help of the Spurwing Scheduling API solution, too.&lt;/p&gt;

&lt;p&gt;Most professionals (especially those in the healthcare world) are juggling multiple calendars all at once, and keeping everything neat and organized – not to mention synchronized – can be a bit of a hassle while still maintaining HIPAA compliance.&lt;/p&gt;

&lt;p&gt;Spurwing provides that compliant system while still offering full synchronization with popular calendar platforms like Google Calendar, Apple, and the Outlook calendar, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2FnjjGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88675wyg6m4kngb75c2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2FnjjGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88675wyg6m4kngb75c2g.png" alt="hipaa scheduling solutions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shared-group-calendars-to-keep-everyone-on-the-same-page"&gt;
  &lt;/a&gt;
  Shared, Group Calendars to Keep Everyone on the Same Page
&lt;/h3&gt;

&lt;p&gt;A big part of why telehealth services become so popular with healthcare professionals is because of the freedom and flexibility these options provide.&lt;/p&gt;

&lt;p&gt;Instead of having to come to a clinic or facility and running all of your appointments from that singular location during strict hours of operation, it’s now possible to “meet your patients where they are” in a way that just was impossible previously.&lt;/p&gt;

&lt;p&gt;At the same time, this flexibility and freedom runs the risk of your calendar being booked sporadically with no real rhyme or reason.&lt;/p&gt;

&lt;p&gt;That’s going to dramatically reduce your overall efficiency and will likely have you working a lot more than you would have been before – in large part because of those “gaps” between appointments.&lt;/p&gt;

&lt;p&gt;Spurwing helps to streamline your calendar a bit, working to “group” different types of appointments together by gently nudging potential clients, employees, and fellow healthcare professionals into scheduling specific types of appointments in similar blocks of time.&lt;/p&gt;

&lt;p&gt;Being able to carve out these better optimized group appointments helps to better maintain your schedule while still giving you the ability to leverage the flexibility that telehealth brings to the table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#effortlessly-time-block-for-admin-work"&gt;
  &lt;/a&gt;
  Effortlessly Time Block for Admin Work
&lt;/h3&gt;

&lt;p&gt;Even if you are moving to a predominantly telehealth kind of platform for your patients and clients, you are still likely going to need some time blocked off to handle purely administrative work and administrative tasks.&lt;/p&gt;

&lt;p&gt;Keeping on top of these tasks is mission-critical for running a successful business in the healthcare world. These tasks are essential to smooth operations and the services that you provide, and you can’t just tackle administrative tasks “willy-nilly” whenever your schedule opens up.&lt;/p&gt;

&lt;p&gt;The Spurwing platform allows you to carve out different blocks of time for these administrative tasks, eliminating the ability for clients to reserve the same locks of time on your calendar – even if it isn’t that overt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_KJ3as-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvtamhu0tzvh4l1k7gcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_KJ3as-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvtamhu0tzvh4l1k7gcn.png" alt="scheduling hipaa platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scheduled-email-and-text-appointment-reminders-go-out-automatically"&gt;
  &lt;/a&gt;
  Scheduled Email and Text Appointment Reminders Go Out Automatically
&lt;/h3&gt;

&lt;p&gt;A lot of healthcare professionals are discovering that the number one reason their clients aren’t showing up to their telehealth meetings is simply because they don’t remember them!&lt;/p&gt;

&lt;p&gt;That’s obviously going to be a problem for any healthcare operation, as missed appointments or skipped appointments are always going to cost time and money. Cancellation rates – even cancellations done on accident – need to be brought down just as low as humanly possible.&lt;/p&gt;

&lt;p&gt;With Spurwing it’s possible to send out email and text based appointment reminders automatically, helping to improve your appointment attendance numbers significantly.&lt;/p&gt;

&lt;p&gt;And we’re not just talking about once off email or text based appointment reminders, either.&lt;/p&gt;

&lt;p&gt;You’ll be able to configure entire “reminder” sequences that play out over a couple of weeks or a couple of days to make sure that your clients and patients are kept in the loop and frequently reminded of their appointment with you.&lt;/p&gt;

&lt;p&gt;All of these reminders go out automatically after they have been configured, freeing up your time and your energy (as well as valuable human resources in your office) to be redirected elsewhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smarter-safer-and-more-secure-hipaa-compliant-telehealth-solutions"&gt;
  &lt;/a&gt;
  Smarter, Safer, and More Secure HIPAA Compliant Telehealth Solutions
&lt;/h3&gt;

&lt;p&gt;As we made mention of earlier, Spurwing is a scheduling solution that has been built from the ground up with full HIPAA compliance in mind right from the first line of code that was ever written.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUsF5a4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyeysmu57o5r0kto1ivb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUsF5a4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyeysmu57o5r0kto1ivb.png" alt="medical hipaa"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The safety, security, and privacy of your patients and clients needs to be respected regardless of the kinds of tools you are taking advantage of. By using this tool your leveraging secure solutions that protect your patients every step of the way while still providing a lot of useful functionality for you and them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easily-enforceable-telehealth-cancellation-policies"&gt;
  &lt;/a&gt;
  Easily Enforceable Telehealth Cancellation Policies
&lt;/h3&gt;

&lt;p&gt;Businesses in the medical community have discovered that the telehealth transition has helped to dramatically reduce the amount of client cancellations for appointments, in large part because of how simple and straightforward it is for these appointments to move forward now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JROX5YPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n0wij7veybhobc50x2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JROX5YPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n0wij7veybhobc50x2t.png" alt="hipaa appointments healthcare"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time, though, cancellation rates haven’t stopped altogether – and you’ll need a proper cancellation policy that is automatically enforced if you’re going to eliminate problems that will devastate your revenue and steal your time.&lt;/p&gt;

&lt;p&gt;Spurwing streamlines this process quite a bit, not only through the reminders that we mentioned above but also through the cancellation policy enforcement mechanisms that are built right in, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;At the end of the day, the future of medicine definitely looks like it is trending towards the world of telehealth services – more rapidly than anyone could have expected, really.&lt;/p&gt;

&lt;p&gt;Solutions like Spurwing help medical services and businesses jump on board the telehealth trend without having to completely overhaul their office, their workflow, or the way that they are used to doing business.&lt;/p&gt;

&lt;p&gt;For more information about how &lt;a href="https://www.spurwing.io/"&gt;Spurwing&lt;/a&gt; works, or for a live demo, reach out today!&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.spurwing.io/"&gt;https://www.spurwing.io/&lt;/a&gt;&lt;br&gt;
Blog: &lt;a href="https://dev.to/spurwing"&gt;https://dev.to/spurwing&lt;/a&gt;&lt;br&gt;
Marketplace: &lt;a href="https://github.com/Spurwing"&gt;https://github.com/Spurwing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>security</category>
    </item>
  </channel>
</rss>
