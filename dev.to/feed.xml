<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The power of problem solving in a team</title>
      <author>Sarah Mottram</author>
      <pubDate>Sun, 07 Nov 2021 14:21:15 +0000</pubDate>
      <link>https://dev.to/smelbows/the-power-of-problem-solving-in-a-team-3848</link>
      <guid>https://dev.to/smelbows/the-power-of-problem-solving-in-a-team-3848</guid>
      <description>&lt;p&gt;&lt;strong&gt;I’m a problem solver. You’re a problem solver. We often work in teams of multiple problem solvers. But are we all the same?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, you’ve guessed it; clearly I’m suggesting the answer is “No”. No need to read any further, good job everyone, you can all go home!&lt;/p&gt;

&lt;p&gt;But, in case you’re interested, let’s dive a bit deeper into what it really means to be a problem solver, since so many companies add it to their list of ‘desirable qualities’, and so many of us describe ourselves as ‘a problem solver’ when we’re adding to our CVs.&lt;/p&gt;

&lt;p&gt;The term ‘problem solving’ really focuses on the end goal, or on having achieved it, but what I’m interested in is &lt;em&gt;how&lt;/em&gt; we all solve these problems, on how &lt;em&gt;differently&lt;/em&gt; we solve them, and what that means when problem solving with others in a team.&lt;/p&gt;

&lt;p&gt;I am currently studying on a 24 week intensive front-end development bootcamp with &lt;a href="https://www.technigo.io/"&gt;Technigo&lt;/a&gt; (who are amazing, btw), and throughout the course we get the chance to try out our pair and mob-programming skills. I knew that this bootcamp was going to be an intense experience, but I had thought that the real learning for me would be around the new programming skills. I’ve worked in teams before, I’ve lead teams before. This part, I thought, would be nothing new. How wrong I was!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’m a problem solver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with how I problem solve myself. I’m in familiar territory here, I’ve known myself a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Just type something, &lt;em&gt;anything&lt;/em&gt;!!”&lt;/strong&gt; Is the advice I get one day, while pairing.&lt;/p&gt;

&lt;p&gt;But no! I can’t type &lt;em&gt;anything&lt;/em&gt;. When I encounter a problem, I like to try to break it down. I deconstruct it. I analyse it. I like to figure out what is happening, what I think &lt;em&gt;should&lt;/em&gt; be happening, and then I like to join the dots between these two with knowledge. So I think, I read, I go away, think some more, research (let’s be transparent; I Google stuff). Only when I feel like I’ve understood the problem, can I feel secure in fixing it. This is methodical. This is slow. But I like to think that it’s worth the time, because when I encounter a similar problem further down the line (which I inevitably will) I should have the depth of knowledge to be able to solve it instantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You’re a problem solver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Working on group Technigo projects (it’s the &lt;a href="https://tiger-weather-app.netlify.app/"&gt;Weather App&lt;/a&gt; that really sticks with me) has given me a much deeper insight into the ways in which other people might problem solve, and how those differences can actually benefit teamwork rather than hinder it. We were five different problem solvers on that team, but it’s one amazing team member in particular that I’m thinking about now, (she probably knows who she is!) because her problem solving methods are so completely the opposite of mine! She &lt;em&gt;does&lt;/em&gt; type something, she &lt;em&gt;does&lt;/em&gt; type &lt;strong&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/strong&gt;! She still researches (Googles) - we all do - but she looks something up, adds it in, sees what happens. Doesn’t work? Tries something else. Still doesn’t work? No problem, tries something else again. Sometimes, something &lt;em&gt;does&lt;/em&gt; work, and we all cheer and high five because our problem is fixed. But, of course, her problem solving (I think) doesn’t actually stop once the problem is fixed. Now (or maybe later) she’ll have a look at that little bit of code that works but none of us understand, and understand it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’re a team of problem solvers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was difficult for me. Everything went so fast, so how could I analyse what was on the screen before it was gone again, replaced with something new? But it was amazing too, because sometimes the advice is right, and I really do just need to try something, &lt;em&gt;anything&lt;/em&gt;, so that I have more information to go on. For us, the way to problem solve together was to take it in turns. I would let the code come and go on the screen without trying to figure it all out, but try to see what was happening at each change and find the answer within that. Later, when there was time, I’d go away and do my reading so that I could understand the problem in depth. In some ways I think it’s slightly harder for ‘trial-and-error’ problem solvers to work around my more methodical approach, because it involves waiting while I’m analyzing to see what I come back with. But it’s possible, and when you know your team well, very doable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here is the point:&lt;/strong&gt; Yes, it’s fascinating to me that not everyone solves problems in the same way. But being aware of it also has hugely positive impacts on teamwork. There are many ways to problem solve, and when you’re working on a team, it’s not about how an individual solves a problem, it’s about how the whole team comes together, uses the various different problem solving skills of everybody, and makes sure that &lt;em&gt;everyone gets heard&lt;/em&gt; (that’s so important it should probably be a whole other blog post). And when you come out victorious on the other side, it’s not because one way of problem solving was superior to another, it’s because you took the time to understand each other, what you all can bring, and how to use those problem solving skills together.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Coroutine Vs Subroutine [ VBA Programming ]</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 07 Nov 2021 14:07:10 +0000</pubDate>
      <link>https://dev.to/bekbrace/coroutine-vs-subroutine-526b</link>
      <guid>https://dev.to/bekbrace/coroutine-vs-subroutine-526b</guid>
      <description>&lt;p&gt;While I was preparing a new tutorial - intro to VBA programming with a project - I stumbled upon the concept of subroutine and how can I explain it, in my mind a subroutine is a function .. and I thought to keep it simple .. but again, this is an oversimplification and not simplification .. so here it is ..&lt;/p&gt;

&lt;p&gt;A subroutine and a function are essentially the same thing, with one difference: A function returns some sort of value (usually via the stack or CPU register), while a subroutine does not. Whether subroutine or function, it is a block of executable code, having exactly one point of entry. A co-routine is also a block of executable code, and, just like a subroutine, it has one point of entry. However, it also has one or more points of re-entry.&lt;/p&gt;

&lt;p&gt;Before getting to threads, let's review: A computer program, also known as a process, will generally have its allocation of memory organized into a code space, a heap, and a stack. The code space stores the one or more blocks of its executable code. The stack stores the parameters, automatic variables, and return addresses of subroutines, functions, and co-routines (and other things too). The heap is the wide-open memory space available to the process for whatever its purposes. In addition to these memory spaces are the CPU registers, each of which stores a set of bits. These bits could be an integer value, a memory address, a bunch of status flags, or whatever. Most programmers don't need to know much about them, but they're there and essential to the operation of the CPU. Probably the ones worth knowing about are the Program Counter, Stack Pointer, and Status Register, but we're not going to get into them here.&lt;/p&gt;

&lt;p&gt;A thread is a single logical flow of execution. In a primitive computing system, there is only one thread available to a process. In modern computing systems, a process is composed of one or more threads. Each thread gets its own stack and set of CPU registers (which is usually physically impossible, but made virtual logically - a detail we'll skip on here). However, while each thread of a process has its own stack and registers, they will all share the same heap and code space. They are also (presumably) running simultaneously; something that can truly happen in a multi-core CPU. So two or more parts of your program can run at the same time.&lt;/p&gt;

&lt;p&gt;Back to the co-routine: As mentioned before, it has one or more points of re-entry. A point of re-entry means that the co-routine can allow for some other block of code outside of itself to have some execution time, and then at some future time have execution time resume back within its own block of code. This implies that the parameters and automatic variables of the co-routine are preserved (and restored if need be) whenever execution is yielded to an external block of code and then returns to that of the co-routine. A co-routine is something that is not directly implemented in every programming language, although it is common to many assembly languages. In any case, it is possible to implement a co-routine in a conceptual way. There is a good article on co-routines at &lt;a href="http://en.wikipedia.org/wiki/Coroutine"&gt;http://en.wikipedia.org/wiki/Coroutine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems to me there are two principal motivations in implementing a co-routine design pattern: (1) overcoming the limitations of a single-threaded process; and (2) hoping to achieve better computational performance. Motivation (1) is clear to understand when the process must address many things at once where a single thread is a must. Motivation (2) may not be as clear to understand, since that is tied to a lot of particulars about the system hardware, compiler design, and language design. I can only imagine that computational effort might be reduced by cutting-back on stack manipulations, avoidance of redoing initializations in a subroutine, or relieving some of the overhead of maintaining a multi-threaded process.&lt;/p&gt;

&lt;p&gt;Hope this useful in any way, and I'll catch you on the other side of the Sub ;)&lt;/p&gt;

</description>
      <category>vba</category>
      <category>programming</category>
      <category>functional</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to configure PHP logs for Docker</title>
      <author>Mateusz Cholewka</author>
      <pubDate>Sun, 07 Nov 2021 14:06:06 +0000</pubDate>
      <link>https://dev.to/mtk3d/how-to-configure-php-logs-for-docker-2384</link>
      <guid>https://dev.to/mtk3d/how-to-configure-php-logs-for-docker-2384</guid>
      <description>&lt;p&gt;If you are using docker and cloud services to run your application live, you should manage your logs.&lt;br&gt;&lt;br&gt;
The most common method to store them is to put them in the text file. It's the default configuration for most backend frameworks. This option is ok if you run your application locally or on the VPS server for test.&lt;br&gt;&lt;br&gt;
When you run your application in a production environment, you should choose a better option to manage your logs. Almost every cloud has a tool for rotating logs or if not, you can use for example Grafana Loki or ELK stack. Those solutions are better because give you interfaces to rotate and search your logs. Also, you have easy access to them, you no need to connect to your server to review them.&lt;br&gt;&lt;br&gt;
If you are using Docker containers, and you running your application in cloud services, often they will be automatically writing the logs of your containers to tools like AWS CloudWatch or GCloud Stackdriver.  &lt;/p&gt;

&lt;p&gt;But first, you need to redirect your log streams to the output of the Docker container to be able to use them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#linux-streams"&gt;
  &lt;/a&gt;
  Linux streams
&lt;/h2&gt;

&lt;p&gt;Docker containers are running the Linux processes. In linux every running process has 3 streams, &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, &lt;code&gt;STDERR&lt;/code&gt;. &lt;code&gt;STDIN&lt;/code&gt; it's command input stream, that you can provide for ex. by your keyboard. &lt;code&gt;STDOUT&lt;/code&gt; is the stream where the running command may print the output. &lt;code&gt;STDERR&lt;/code&gt; is the standard error stream, but the name I think is a bit confusing, because it is basically intended for diagnostic output.  &lt;/p&gt;

&lt;p&gt;When you run the &lt;code&gt;docker logs [container]&lt;/code&gt; command in your terminal, you will see the output of &lt;code&gt;STDOUT&lt;/code&gt; and &lt;code&gt;STDERR&lt;/code&gt; streams. So our goal is to redirect our logs to one of those streams.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/config/containers/logging/"&gt;Official docker documentation page&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#phpfpm"&gt;
  &lt;/a&gt;
  PHP-FPM
&lt;/h2&gt;

&lt;p&gt;In PHP we are often running our application using the PHP-FPM (Process Manager). If you run your docker with FPM inside a docker container, and you run the &lt;code&gt;docker logs&lt;/code&gt; command, you should see the output with processed requests, or errors.  &lt;/p&gt;

&lt;p&gt;So the PHP-FPM is already writing its output to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The PHP-FPM allow us to catch workers output and forward them to the &lt;code&gt;STDOUT&lt;/code&gt;. To do that we need to make sure that the FPM is configured properly. You can create new config file, and push it for example to the &lt;code&gt;/usr/local/etc/php-fpm.d/logging.conf&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[global]
error_log = /proc/self/fd/2

[www]
access.log = /proc/self/fd/2

catch_workers_output = yes
decorate_workers_output = no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;error_log&lt;/code&gt; and &lt;code&gt;access.log&lt;/code&gt; parameters are configuration of streams of logs output.&lt;br&gt;&lt;br&gt;
The &lt;code&gt;catch_workers_output&lt;/code&gt; option is turning on the worker's output caching. The &lt;code&gt;decorate_workers_output&lt;/code&gt; is the option that turns off the output decoration. If you leave this option turned on, FPM will decorate your application output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[21-Mar-2016 14:10:02] WARNING: [pool www] child 12 said into stdout: "[your log line]"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that &lt;code&gt;decorate_workers_output&lt;/code&gt; option is available only for &lt;a href="https://www.php.net/manual/en/install.fpm.configuration.php#decorate-workers-output"&gt;PHP 7.3.0 and higher&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;If you are using official docker php-fpm image, this configuration is already set in the &lt;code&gt;/usr/local/etc/php-fpm.d/docker.conf&lt;/code&gt; file, so you no need to do anything more 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-application-configuration"&gt;
  &lt;/a&gt;
  PHP application configuration
&lt;/h2&gt;

&lt;p&gt;Right now everything that will be put to the stdout from PHP workers will be shown in our docker logs. But when logs are forwarded to that stream in PHP?  &lt;/p&gt;

&lt;p&gt;To write something to &lt;code&gt;STDIN&lt;/code&gt; on PHP level, we need to just write to the &lt;code&gt;php://stdout&lt;/code&gt; stream.  &lt;/p&gt;

&lt;p&gt;In the simplest way you can do this like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello world'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you execute this code in php cli, you will get the &lt;code&gt;Hello world&lt;/code&gt; text on the output.&lt;/p&gt;

&lt;p&gt;But it's not the optimal way to push your logs to the &lt;code&gt;STDOUT&lt;/code&gt;. Every modern framework should have a PSR-3 Logger. I think that the most popular now is the monolog, so I will show you how to configure it in Symfony, Laravel, and in pure usage.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monolog"&gt;
  &lt;/a&gt;
  Monolog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Seldaek/monolog"&gt;Monolog&lt;/a&gt; is great library to handle logs in your application. It's easy and elastic in configuration.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-monolog-configuration"&gt;
  &lt;/a&gt;
  Basic monolog configuration
&lt;/h3&gt;

&lt;p&gt;If you are using monolog in your project with manual configuration, you need to configure handler in this way:&lt;/p&gt;

&lt;p&gt;(Modified documentation example)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Handler\StreamHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stdout'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;pushHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Foo'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just need to configure StreamHandler, to write to the &lt;code&gt;php://stdout&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  Symfony
&lt;/h3&gt;

&lt;p&gt;Symfony Kernel since the Flex was provided, &lt;a href="https://symfony.com/blog/new-in-symfony-3-4-minimalist-psr-3-logger"&gt;is using minimalist PSR-3 logger&lt;/a&gt;, that logs everything to &lt;code&gt;php://stderr&lt;/code&gt; by default.  &lt;/p&gt;

&lt;p&gt;In Symfony, monolog as other components is configured in YAML files. So the same configuration will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/packages/monolog.yaml&lt;/span&gt;
&lt;span class="na"&gt;monolog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handlers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;stdout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stream&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;php://stdout"&lt;/span&gt;
            &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h3&gt;

&lt;p&gt;Laravel use the arrays for configuration so the same thing will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;# config/logging.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Monolog\Handler\StreamHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'channels'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="s1"&gt;'stdout'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'driver'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'monolog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'handler'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;StreamHandler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'level'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LOG_LEVEL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;'with'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'stream'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'php://stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stderr-or-stdout"&gt;
  &lt;/a&gt;
  STDERR or STDOUT
&lt;/h2&gt;

&lt;p&gt;In some articles on the internet, you can read that someone uses stderr, and someone uses stdout streams to write logs there. Right now I cannot fin any reasons to choose one of them which is better.&lt;br&gt;&lt;br&gt;
The only information that I found on this topic is &lt;a href="https://stackoverflow.com/questions/4919093/should-i-log-messages-to-stderr-or-stdout"&gt;that post&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
I think that stderr is more popular in some examples, also Fabien Potencier set it as default in his minimalistic logger, so I think we can assume that this one is better.  &lt;/p&gt;

&lt;p&gt;Personally, I always used the stdout, so that's the reason why I use it in this post's examples.  If I will find a great reason for using one of them over another I will update this post.  &lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://mateuszcholewka.com/post/php-logs-in-docker/"&gt;https://mateuszcholewka.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>docker</category>
      <category>laravel</category>
      <category>symfony</category>
    </item>
    <item>
      <title>But why do we need Blockchain, anyway? And why does it need us just as much? </title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Sun, 07 Nov 2021 12:49:27 +0000</pubDate>
      <link>https://dev.to/manbir/but-why-do-we-need-blockchain-anyway-and-why-does-it-need-us-just-as-much-115p</link>
      <guid>https://dev.to/manbir/but-why-do-we-need-blockchain-anyway-and-why-does-it-need-us-just-as-much-115p</guid>
      <description>&lt;p&gt;Out of all the cult surrounding Bitcoin, many people think of blockchain as the technology that powers it. While it's true and that was its original purpose, blockchain is capable of a lot more, thanks to all the innovation happening. Also, we don't hear the term 'blockchains' quite often, but that's a term, because there are a whole bunch of them.&lt;/p&gt;

&lt;p&gt;Blockchain is, in-fact, a shorthand for a whole suite of distributed ledger technologies that can be programmed to record and track any type of value; for example, from financial transactions and medical records, to property/land titles. You might be thinking that we already have processes to track and store data, then what's so special about blockchain?  &lt;/p&gt;

&lt;p&gt;Let's dive into the reasons why blockchain technology is here to revolutionize the way we store and interact with data, along with why blockchain needs us just as much we need it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4ODJxyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tg7spo3lncwgrxlbnw5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4ODJxyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tg7spo3lncwgrxlbnw5.gif" alt="blockchain" width="269" height="269"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-storing-and-tracking-data"&gt;
  &lt;/a&gt;
  1. Storing and Tracking Data
&lt;/h2&gt;

&lt;p&gt;While many people relate blockchain with cryptocurrencies, it has more to do with how we store and manage data. Blockchain stores information in batches, called &lt;em&gt;'blocks'&lt;/em&gt;. There are multiple of them, that are linked together in a chronological order that can not be modified, forming a continuous line: metaphorically, a chain of blocks. &lt;/p&gt;

&lt;p&gt;If we want to make a change in the information in a particular block in-between the chain, we can not do that simply by rewriting the data in that block. Instead, the change is stored in a new block after the most recently created block, depicting that 'x' changed 'y' at a particular date and time. To software engineers, this might sound familiar (reference: &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;).  &lt;/p&gt;

&lt;p&gt;Leaving even git aside, it might still feel familiar to you because blockchain is based on the centuries-old method of the &lt;a href="https://www.investopedia.com/terms/g/generalledger.asp"&gt;general financial ledger&lt;/a&gt;, making it a non-destructive way to track data over time. &lt;/p&gt;

&lt;p&gt;As an example, say there are two siblings, Anne and Harry, in a dispute over who owns a piece of land that has been there in the family for centuries. Now, since blockchain technology uses the ledger method, it would hold an entry in the ledger showing that Josh, one of Anne and Harry's ancestor owned the property first, say from 1990 to 1925, then transferred it to Bill - another ancestor (forming a new entry in the ledger), and so on, until it got transferred to Anne in 2015 by her father, making Anne the current owner. We'll be able to see that history of transfer of ownership for the piece of land in the ledger along with date and time. Unlike the old-age ledger method being on a notebook or a computer, all that data can never be tampered or deleted over blockchain because of its decentralized nature, which brings us to its second unique property... &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNTtnG4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/WelllitSpicyConure-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNTtnG4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/WelllitSpicyConure-size_restricted.gif" alt="decentralization" width="640" height="360"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-distributed-and-decentralized"&gt;
  &lt;/a&gt;
  2. Distributed and Decentralized
&lt;/h2&gt;

&lt;p&gt;Blockchain is designed to be decentralized, meaning that it can not be controlled by any individual, organization or government institution. The data is distributed over a large network of computers. So if any entity wants to change the data, they'll need to change it on all the computers that hold that data—which is nowhere near feasible; thus making blockchain tamper-proof. All this creates trust in the network of blockchain users. &lt;/p&gt;

&lt;p&gt;Before a block gets added to the chain, an algorithmic problem must be solved to validate an action over the network, for example, a transaction. The computer that solves the problem (called nodes), shares the solution with all the other computers over the network. This is called Proof-of-Work (PoW). The network then works on verifying this PoW thereby reaching a consensus, and if it's correct, the block gets added to the chain. One of the major benefits of having a decentralized and distributed network is that, in case one of the nodes go down, there would still be multiple up and running, to validate the transactions and share data with rest of the nodes (represented in the GIF above).&lt;/p&gt;

&lt;p&gt;The combination of these complex computational problems, along with verification by a large number of computers collectively ensures that we can trust every single block on the chain. Because the network does the trust building for us, it brings us the opportunity to interact with the data in real-time, also bringing us to the third major property of blockchain...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-no-requirement-for-intermediaries"&gt;
  &lt;/a&gt;
  3. No Requirement for Intermediaries
&lt;/h2&gt;

&lt;p&gt;Currently, when dealing in business, we don't show the other party our financial or business records. We instead, rely on a trusted intermediary such as a broker, bank or lawyer. We also trust them to keep our information confidential. For example, Uber connects a passenger with a driver and ensures that the ride is carried out efficiently. In the process, additional time and money is involved, and we also give out our personal information like contact, address, etc. to Uber—which has nothing to do with the data after a ride. They may or may not hold your sensitive data after the ride. Now, what if a passenger could get in touch with one of the nearby drivers directly? &lt;/p&gt;

&lt;p&gt;Taking an example of voting in elections; how do we make sure that the count of votes going to a particular political party is genuine? How do we make sure that every citizen in a country gets an equal opportunity to vote just by being a part of it without requiring any additional document? How do we make sure that there's no human error in the counting of votes (in case of ballot casting)? By relying on algorithms that can be audited anytime, by anyone in the world. Blockchain works to solve such type of problems. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/bwh3XIO9aql0uZiWzn/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bwh3XIO9aql0uZiWzn/giphy.gif" alt="gif3" width="480" height="296"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, going back to the example of Anne and Harry; in real world, a lawyer would have to sort out the dispute to verify that Anne is the rightful owner of the land by looking at the records, thus data getting exposed to the middleman. If Anne's ownership information was stored in the blockchain, she could independently retrieve the information about her property from there. Now since the data on blockchain is verified to be true (by multiple computers instead of a single human intermediary), Anne could simply show that data to Harry, thus saving a considerable amount of time and money that would've been invested while dealing with a lawyer. &lt;/p&gt;

&lt;p&gt;This type of trusted, peer-to-peer interaction with data can revolutionize the way we access, verify and transact with each other by leveraging the power of algorithmic computations. Since blockchain is a type of technology and not a single network, it can be implemented in many different ways. While some blockchains can be completely public for anyone to view and access at any time, others can be closed to a select group of authorized users, such as an organization, group, agency or government institution like banks. There can be hybrid public-private blockchains too; where anyone can see the public data, but only authorized parties can see the sensitive data. &lt;/p&gt;

&lt;p&gt;All the three properties above collectively contribute to allow groups of people who are anonymous and don't know each other to establish trust between each other. This develops a democratization in the data, which can significantly reduce fraud and mismanagement due to human errors. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-that-we-know-why-we-need-blockchain-how-does-the-inverse-hold"&gt;
  &lt;/a&gt;
  Now that we know why we need blockchain, how does the inverse hold?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyM17PF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99o7qttju2m3hldtye1d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyM17PF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99o7qttju2m3hldtye1d.gif" alt="gif4" width="312" height="312"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Blockchain needs us, users and early adopters just as much we need it; in the form of developers, miners, investors, validators, liquidity providers, educators and other form of contributors, because the power of a blockchain is in its community. The bigger the community of a blockchain network becomes, the more trust is established, not just because we'll have more computational power to validate transactions, but also because we're building an ecosystem in which the use cases are linked together between products that can co-exist to form a workflow, each providing a separate solution to a real-world problem that gets solved on-chain. &lt;/p&gt;






&lt;center&gt;&lt;sup&gt;✍🏻 with ❤️ by &lt;a href="https://twitter.com/manbirmarwah"&gt;Manbir&lt;/a&gt;&lt;/sup&gt;&lt;/center&gt;

</description>
      <category>blockchain</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Responsive Navigation Bar with mobile menu using HTML &amp; CSS</title>
      <author>Adam Nagy</author>
      <pubDate>Sun, 07 Nov 2021 12:35:56 +0000</pubDate>
      <link>https://dev.to/javascriptacademy/responsive-navigation-bar-with-mobile-menu-using-html-css-2hpd</link>
      <guid>https://dev.to/javascriptacademy/responsive-navigation-bar-with-mobile-menu-using-html-css-2hpd</guid>
      <description>&lt;p&gt;Any website on the web should be responsive in the modern web era. One of the must-do task is to create a navigation bar which is usable on both huge 4K monitors and small mobile devices. And this is exatly what we'll create in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch a a &lt;strong&gt;step-by-step, beginner friendly&lt;/strong&gt; video instead, you can check out the video that I made &lt;a href="https://www.youtube.com/c/JavaScriptAcademyOfficial"&gt;on my YouTube channel:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OjQP7rPwJyE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-html"&gt;
  &lt;/a&gt;
  Implementing the HTML
&lt;/h2&gt;

&lt;p&gt;The HTMl markup will be really simple and will consist of two separate sections. We'll first create the markup that will be used for the desktop version, and after that we will implement the markup required for the mobile menu.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-markup-for-the-desktop-version"&gt;
  &lt;/a&gt;
  HTML markup for the desktop version
&lt;/h3&gt;

&lt;p&gt;We wrap everything inside of &lt;code&gt;header&lt;/code&gt; tags, and it will make our site more accessible as it helps screen readers. Inside the header we'll place a logo. For the sake of this example this will be a simple text wrapped inside an &lt;code&gt;a&lt;/code&gt; tag, which navigates to the homepage. Below the brand div, we will have a &lt;code&gt;nav&lt;/code&gt; wrapper. It also helps screen readers to understand the page. Inside our &lt;code&gt;nav&lt;/code&gt; we'll have an unordered list, which will hold all of our navigation links. Every navigation link will have the same basic structure. Each of them will be a list item (&lt;code&gt;li&lt;/code&gt;), and inside that we will have an &lt;code&gt;a&lt;/code&gt; tag which links to separate pages. I'll also give an id to the login and signup navigation for further styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MyCompany&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Signup&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-markup-for-the-mobile-version"&gt;
  &lt;/a&gt;
  HTML markup for the mobile version
&lt;/h3&gt;

&lt;p&gt;At small screen sizes, we will use a hamburger menu to toggle the navigation menu. For the hamburger icon you can use any external icon libraries, like &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt;, but in this tutorial, I'll create my own hamburger icon using HTML and CSS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-hamburger-icon"&gt;
  &lt;/a&gt;
  The hamburger icon 🍔
&lt;/h4&gt;

&lt;p&gt;The html structure of the icon will be really simple. First we'll add a container div with the id of &lt;code&gt;hamburger-icon&lt;/code&gt;. We will use this wrapper div to style and positions the bars inside the hamburger icon. We'll also add an &lt;code&gt;onclick&lt;/code&gt; event handler, which will toggle our mobile menu. We'll implement this later in javascript. Inside our container we'll add three divs. They have separate classnames, and we'll use those for makeing our micro animation which will fade away the middle bar and form an &lt;code&gt;X&lt;/code&gt; from the bottom and top one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-icon"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"toggleMobileMenu(this)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS, we'll center the icon vertically using &lt;code&gt;margin: auto 0&lt;/code&gt;, and hide it by default using &lt;code&gt;display: none&lt;/code&gt;. We'll make it visible through a media query if the screen is less than 600px wide. (You can also do it in a mobile first approach and show it by default and hide it if the screen is wider than 600px). We'Ll give the divs inside the wrapper a fixed width and height and give them a little vertical spacing with margin. When the mobile menu is open (&lt;code&gt;open&lt;/code&gt; class is added to the mobile menu), we'll rotate the first bar by -45 degrees and adjust it with translate. We'll hide the second bar by setting the opacity to zero, and we'll also do the same transformations to the last element as we did for the first, but in the opposite direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.bar3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mobile-html-markup"&gt;
  &lt;/a&gt;
  Mobile HTML markup
&lt;/h4&gt;

&lt;p&gt;Below the bars that we created for the hamburger icon in the previous section, we'll add the same navigation menu that we had in the desktop HTML markup section. The only important difference is that the unordered list has a class &lt;code&gt;mobile-menu&lt;/code&gt;. We will use this class to apply all the mobile related styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger-icon"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"toggleMobileMenu(this)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mobile-menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Signup&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finishing-up-the-html"&gt;
  &lt;/a&gt;
  Finishing up the HTML.
&lt;/h3&gt;

&lt;p&gt;There is two things we have to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A link to the css stylesheet in the head section that we'll create:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Importing our javascript file at the end of the body:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-the-css-part"&gt;
  &lt;/a&gt;
  Implement the CSS part
&lt;/h2&gt;

&lt;p&gt;First I'll import a Google font called Poppins, then reset every browser default margins and paddings and also set the box-siting to border-box. Then for the body we'll set out brand new font and set a dark background and white text color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#353836&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll focus on the header wrapper and the logo. We'll remove all text decoration (underline) from any links inside the header. For the header we'll set a little bit of left and right padding, give it a dark background color, and a fixed height. We'll also set the display to flex, and to have the logo on the right and the navigation links on the left we'll add &lt;code&gt;justify-content: space-between;&lt;/code&gt;. For the brand, we'll set the desired font size and weight, and also center it vertically using flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1d1f1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#brand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#brand&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09c372&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regarding the navigation links we'll remove any bullet points from the list, make the container full width and center it vertically using flexbox. We'll set a white color for the links and add some spacing using paddings and margins to the list items. I'll also add a hover effect to scale the links up a bit when they are hovered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The login and signup links will have a different button-like styling. We'll give them more spacing and round borders and use blue and red colors to differentiate them from the other links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#498afb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#signup&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3860&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#login&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#498afb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to implement the styles for the mobile menu. By default the menu will be hidden so we'll apply &lt;code&gt;display: none;&lt;/code&gt;. We'll position the mobile menu absolutely, and place it right below the header, to do that we have to set a top offset of 50px, as it is the fixed height of the header. We want the mobile menu to take the full remaning space of the site (besides the header), so will make it full width, and we'll set the high to be 100% and substract the height of the header from it.&lt;/p&gt;

&lt;p&gt;When the mobile menu is open, we want to display it, and we'll use flexbox to overrode the &lt;code&gt;display:none&lt;/code&gt;. We'll use flex-direction column to stack the links below each other, center them horizontally and make them start from the beginning of the flex container. We'll also add a little bottom margin to the links to amke them a little space to breath.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mobile-menu&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we have to add the media query to hide the desktop menu, when we are on mobile size and display the hamburger icon when we are on mobile screen size. I'll use 600px as the breakpoint for mobile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#hamburger-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-little-bit-of-javascript"&gt;
  &lt;/a&gt;
  A little bit of javascript
&lt;/h2&gt;

&lt;p&gt;We will have one lonely javascript function in our index.js file that will toggle the mobile menu between open and closed states. We already added this event handler in the HTML section. We will use the reference that we passed from the HTML and modify its classList using it. The toggle function will check wether the provided class is present on the element and if it is then it will remove it and if it's not then it will add it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleMobileMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links-for-the-full-source-code"&gt;
  &lt;/a&gt;
  Links for the full source code
&lt;/h2&gt;

&lt;p&gt;You can check the full source code here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/agitated-tu-97n1i?file=/index.js:0-70"&gt;Codesandbox link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/javascriptacademy-stash/responsive-navbar"&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-you-can-learn-more-from-me"&gt;
  &lt;/a&gt;
  Where you can learn more from me?
&lt;/h2&gt;

&lt;p&gt;I create education content covering web-development on several platforms, feel free to 👀 check them out.&lt;/p&gt;

&lt;p&gt;I also create a newsletter where I share the week's or 2 week's educational content that I created. No bull💩 just educational content.&lt;/p&gt;

&lt;p&gt;🔗 Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;☕️ Support free education and my work, &lt;a href="https://ko-fi.com/adamnagy"&gt;buy me a coffee&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💬 Join our &lt;a href="https://discord.gg/GuxmcEgAjB"&gt;community on Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📧 Newsletter &lt;a href="https://www.getrevue.co/profile/dev_adamnagy"&gt;Subscribe here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎥 YouTube &lt;a href="https://www.youtube.com/channel/UCicOwFWkuMX0ddFaKCc_E5Q"&gt;Javascript Academy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href="https://twitter.com/dev_adamnagy"&gt;@dev_adamnagy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📷 Instagram &lt;a href="https://www.instagram.com/javascriptacademy/"&gt;@javascriptacademy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use API using Axios : Basic</title>
      <author>SnowBit</author>
      <pubDate>Sun, 07 Nov 2021 12:24:18 +0000</pubDate>
      <link>https://dev.to/snowbit/how-to-use-api-using-axios-basic-36bj</link>
      <guid>https://dev.to/snowbit/how-to-use-api-using-axios-basic-36bj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-fetch-api-using-axios"&gt;
  &lt;/a&gt;
  How to fetch API using Axios
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-axios"&gt;
  &lt;/a&gt;
  What is Axios?
&lt;/h2&gt;

&lt;p&gt;Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple to use library in a small package with a very extensible interface.&lt;/p&gt;

&lt;p&gt;To install Axios, you must be have &lt;a href="https://nodejs.org/en/"&gt;Node JS&lt;/a&gt; installed on your device.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-begin-the-journey"&gt;
  &lt;/a&gt;
  Let's begin the journey 🔥
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's install Axios, paste the following command in your terminal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, the main part arrives,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the API data,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get random user api using axios and show it on the page in json&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://tiny-news-api.herokuapp.com/api/news&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// API url which is getting data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the whole &lt;a href="https://github.com/snowbit-coderboi/axios-tutorial"&gt;Code&lt;/a&gt;, and try forking the repository to save it, so you can refer to it any time you want.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48ajtj07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzkyheqavfxaprpmxe3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48ajtj07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzkyheqavfxaprpmxe3l.png" alt="How to fork" width="170" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How #TeamSeas Proves the Internet Can Do Good</title>
      <author>ArjunPatel33</author>
      <pubDate>Sun, 07 Nov 2021 11:00:36 +0000</pubDate>
      <link>https://dev.to/arjunpatel/how-teamseas-proves-the-internet-can-do-good-9pa</link>
      <guid>https://dev.to/arjunpatel/how-teamseas-proves-the-internet-can-do-good-9pa</guid>
      <description>&lt;p&gt;Mr.Beast and Mark Rober get together for a second time to help the environment. &lt;br&gt;
The fruit of their collaboration is Team Seas – an initiative to stop ocean pollution. The charismatic duo launched #TeamSeas on October 29th. Through their social media profiles, they announced the campaign that hopes to clean 30 million pounds of trash from rivers, oceans, and beaches.&lt;br&gt;
With the help of two non-profit organizations, Team Seas hopes to achieve its goal by January 1st, 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayCXlKUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tkfdfm6u8v8s77szvui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayCXlKUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tkfdfm6u8v8s77szvui.png" alt="Image description" width="512" height="310"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Team Seas And the Power of the Internet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mr.Beast and Mark Rober are no strangers to using the internet for good. It’s almost two years since the duo launched the project Team Trees. Team Trees was a charity project where fans would donate money and the organization would plant an equal amount of trees. The goal of Team Trees was to plant 20 million trees. Given that Team Trees was a huge internet success, Mr.Beast and Mark Rober went from planting trees to cleaning plastic from our oceans.&lt;/p&gt;

&lt;p&gt;The campaign is already attracting hundreds of thousands of donors. Fans can chip in as little as $1 to this worthy cause. With Team Trees existing for only a few days, fans and celebrities already managed to fund $11 million. Through the power of the internet, Team Trees attracts donations with little to no advertisement.&lt;/p&gt;

&lt;p&gt;Mr.Beast and Mark Rober got together with smaller content creators to promote the event and raise awareness for a huge environmental issue. Through social media posts and YouTube fundraiser videos, the campaign got off to a rocking start.&lt;br&gt;
In the first 5 hours, fans raised a million dollars! One of the very first big-money donations was a $400,000 donation from YouTube Originals – YouTube’s very own production house.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team Seas Receives Million-Dollar Donations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hype around the project took the internet by storm. News outlets wrote articles, content creators made videos, and the duo even made an appearance live on Jimmy Kimmel. In the interview, Mark Rober explained that most of the donations they receive are from ordinary people on the internet.&lt;br&gt;
The charity also attracted a couple of million-dollar donations like Tobi Lütke from Shopify, &lt;a href="https://great.com/erik/"&gt;Erik Bergman&lt;/a&gt; from Great.com, and the Bikeoff Foundation. In a Twitter thread, Mr.Beast asked Elon to beat the leader donation and be the highest donation. While Musk is yet to reply, that doesn’t stop people chipping in whatever they can.&lt;/p&gt;

&lt;p&gt;A single dollar removes a pound of trash, and that’s something the internet can get behind. While there is still a long way to go, fans are anticipating who the highest donation will be next. Will Elon Musk pass &lt;a href="https://great.com/erik/notes/donation-teamseas-erik-bergman-mrbeast/"&gt;Great.com donation&lt;/a&gt;? Only time will tell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Worthy Cause the Internet Can Get Behind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mr.Beast and Mark Rober and proving everybody wrong for the second time that the internet can do good. As both of them said, “The internet isn’t only a place for drama and BS.”&lt;br&gt;
Team Trees was a massive success and they still receive donations to this day. Team Seas hops to have the same level of success as Team Trees. But the ultimate goal of both projects is to raise awareness for both environmental issues. Team Trees shed light on an issue that governments hope to bury. Nearly 2.4 million trees are cut down every single day. That amasses to 900 million trees every year.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.nationalgeographic.com/science/article/150109-oceans-plastic-sea-trash-science-marine-debris"&gt;National Geographic&lt;/a&gt;, our oceans are filled with 5.25 trillion pieces of trash. Most of the pollution comes from 1% of highly-polluted rivers. The trash makes its way from these rivers to the oceans and back to the beaches. It pollutes wildlife, endangers it, and kills it. We’ve found plastic pieces in the insides of whales, turtles, and even small fish. It is a never-ending problem that only a few organizations are actively battling.&lt;/p&gt;

&lt;p&gt;That’s why Team Seas partners with the Ocean Conservancy and the Ocean Cleanup. Every donation goes to both non-profit organizations. With the help of both organizations, Team Seas hopes to clean the dirtiest rivers and stop trash from going into the ocean.&lt;/p&gt;

&lt;p&gt;These organizations have the experience, the trained personnel, and the means to solve the problem. Mark Rober gave us a tour of one of their &lt;a href="https://www.youtube.com/watch?v=pXDx6DjNLDU&amp;amp;t=176s"&gt;trash-eating robots&lt;/a&gt; in his latest YouTube video. The robot collects plastic and stores it in specialized containers where the plastic is then sent for recycling. One of these trash-eating robots is operated by the Dominican Republic. Although the non-profit organizations make these robots, they donate them to the countries that most need them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBSRK9Ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjl3no536zg66ypd4zmc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBSRK9Ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjl3no536zg66ypd4zmc.png" alt="Image description" width="512" height="269"&gt;&lt;/a&gt;&lt;br&gt;
Credit: Mark Rober YT&lt;/p&gt;

&lt;p&gt;The Dominican Republic is indeed one of these countries after a shocking video of an endless wave of trash washing ashore emerges.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every Dollar Counts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whether you’re a millionaire, a billionaire, a fan of Mr.Beast and Mark Rober, or simply someone who wants to help, you can do so by donating to Team Seas. Apart from donations, you can also buy their merchandise as that also goes to funding the waste-collecting campaign. Mr.Beast even said that fans can organize volunteer meetups and do their part to raise awareness in anyway they can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are you thoughs on #TeamSeas?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>teamseas</category>
      <category>internet</category>
      <category>good</category>
      <category>donation</category>
    </item>
    <item>
      <title>How to remove a package from Laravel using Composer</title>
      <author>Marcos Gad</author>
      <pubDate>Sun, 07 Nov 2021 10:35:51 +0000</pubDate>
      <link>https://dev.to/marcosgad/how-to-remove-a-package-from-laravel-using-composer-43ba</link>
      <guid>https://dev.to/marcosgad/how-to-remove-a-package-from-laravel-using-composer-43ba</guid>
      <description>&lt;p&gt;Composer is dependency manager for PHP packages. Laravel also uses composer to install and remove packages from the application.&lt;/p&gt;

&lt;p&gt;we will see how to remove package from your Laravel application. Actually you can remove package from any PHP application which uses composer as package manager. Run the following command and it will remove the package from the application. It will also update composer.json and composer.lock automatically.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;composer remove vendor/package&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, you will also need to remove references to that package within your application, from config, controllers etc. otherwise it may give class not found error because you have removed all class files from application.&lt;/p&gt;

&lt;p&gt;I hope it is useful to all.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Everything About Django - 2 (Architecture of Django)</title>
      <author>Priyanshu Panwar</author>
      <pubDate>Sun, 07 Nov 2021 10:28:05 +0000</pubDate>
      <link>https://dev.to/priyanshupanwar/everything-about-django-2-architecture-of-django-2o6c</link>
      <guid>https://dev.to/priyanshupanwar/everything-about-django-2-architecture-of-django-2o6c</guid>
      <description>&lt;p&gt;This is the &lt;strong&gt;second blog&lt;/strong&gt; of my series &lt;strong&gt;Everything About Django&lt;/strong&gt;. You can read my previous article &lt;a href="https://dev.to/priyanshupanwar/everything-about-django-1-how-to-start-25ai"&gt;here&lt;/a&gt;.&lt;br&gt;
In this article, we are going to learn the &lt;strong&gt;core architecture of Django, how Django works&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-django"&gt;
  &lt;/a&gt;
  Architecture of Django
&lt;/h2&gt;

&lt;p&gt;Django follows the architecture &lt;strong&gt;MVT - Model View Template&lt;/strong&gt;.&lt;br&gt;
Let's break the MVT architecture :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model : This is the &lt;strong&gt;database layer&lt;/strong&gt; of the architecture. Model means the tables stored in the database. Django follows the &lt;strong&gt;ORM (Object Relational Mapping)&lt;/strong&gt; Protocol by which we can write the database commands in pythonic way without any SQL. We will study this in detail in coming blog.&lt;/li&gt;
&lt;li&gt;View : This is the &lt;strong&gt;logical layer&lt;/strong&gt; of the architecture. This is where we write the logic of our project. We create functions/classes which are mapped to different URL Patterns of our site (project). &lt;/li&gt;
&lt;li&gt;Template : This is the &lt;strong&gt;display layer&lt;/strong&gt; of the architecture. This contains the html files that are rendered(displayed) on our web interface. Every view(function/class) sends a template or a http response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at this picture for clear understanding.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVrX4JdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abvbys3c58tmswhw6vbj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVrX4JdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abvbys3c58tmswhw6vbj.jpg" alt="MVT Pattern" width="880" height="403"&gt;&lt;/a&gt;&lt;br&gt;
Let's drop this into few points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user opens a &lt;strong&gt;specific url&lt;/strong&gt; of our site (project) suppose &lt;a href="http://localhost:8000/login"&gt;http://localhost:8000/login&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Django maps this url to the &lt;strong&gt;specific view&lt;/strong&gt; (function) which implements the logic for this url.&lt;/li&gt;
&lt;li&gt;The view takes the data from &lt;strong&gt;associated models&lt;/strong&gt; (database) and &lt;strong&gt;sends a template&lt;/strong&gt; which is rendered on the web interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope the MVT architecture of Django is clear. Feel free to comment your doubts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  THANK YOU
&lt;/h2&gt;

&lt;p&gt;You can find me at : &lt;a href="http://priyanshu-panwar.github.io/"&gt;My Portfolio&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/priyanshu-panwar"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Null Object spread horror story</title>
      <author>Alex Bratsos</author>
      <pubDate>Sun, 07 Nov 2021 10:25:15 +0000</pubDate>
      <link>https://dev.to/alexbratsos/null-object-spread-horror-story-p07</link>
      <guid>https://dev.to/alexbratsos/null-object-spread-horror-story-p07</guid>
      <description>&lt;p&gt;While most of the modern frontend engineers use object spread syntax a lot in their code, we all overcome some simple details and underlying mechanisms of how it actually works.&lt;/p&gt;

&lt;p&gt;With a first look, this code looks like something that would break right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; {} Wait what? Is this valid??&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; {} Um, wat?&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// {} Please stop&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// {} Ok I'm done, bye javascript&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smallpdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; {0: "S", 1: "m", 2: "a", 3: "l", 4: "l", 5: "p", 6: "d", 7: "f"}&lt;/span&gt;

&lt;span class="c1"&gt;// Did we break javascript??!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably we would expect a &lt;code&gt;TypeError&lt;/code&gt; here. But we must not forget that &lt;code&gt;...&lt;/code&gt; is a syntax code, not an operator. So the result of it depends on the surrounding context. It behaves differently if it's in an array (&lt;code&gt;[...myArr]&lt;/code&gt;), in an object (&lt;code&gt;{...myObj}&lt;/code&gt;), or in a function argument list (&lt;code&gt;myFunc(arg1, ..restArgs&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;So let's see what happens &lt;em&gt;exactly&lt;/em&gt; when it is used inside an object.&lt;/p&gt;

&lt;p&gt;According to TC39, object spread initializer is &lt;a href="https://github.com/tc39/proposal-object-rest-spread/blob/master/Spread.md"&gt;a syntactic sugar&lt;/a&gt; on top of &lt;code&gt;Object.assign&lt;/code&gt;. So the next logical step is to see how the &lt;code&gt;Object.assign&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; work, as instructed by the &lt;a href="https://262.ecma-international.org/6.0/#sec-object.assign"&gt;ECMAscript spec.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86XLs_97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2omyt1mg2d8p0ev43r98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86XLs_97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2omyt1mg2d8p0ev43r98.png" alt="Screenshot from ECMAScript spec explaining how Object.assign should work" width="880" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our case, when using the &lt;code&gt;{...something}&lt;/code&gt; syntax, the object expression (&lt;code&gt;{}&lt;/code&gt;) is the &lt;code&gt;target&lt;/code&gt; so it's a newly created object and &lt;code&gt;sources&lt;/code&gt; is whatever we pass after the &lt;code&gt;...&lt;/code&gt; syntax, so in our case it's &lt;code&gt;something&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if &lt;code&gt;something&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; we can see an explicit instruction of how &lt;code&gt;Object.assign&lt;/code&gt; should handle this, treat it like an empty &lt;code&gt;List&lt;/code&gt; so our end result will just ignore it. This explains why &lt;code&gt;{...undefined}&lt;/code&gt; and &lt;code&gt;{...null}&lt;/code&gt; returns an empty object and doesn't crash in any way.&lt;/p&gt;

&lt;p&gt;But what happens with &lt;code&gt;false&lt;/code&gt; &lt;code&gt;123&lt;/code&gt; and &lt;code&gt;'Smallpdf'&lt;/code&gt;? Let's go back to the ECMAscript spec&lt;/p&gt;

&lt;p&gt;After explicitly handling &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; cases it concludes with the next steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FU_FRLHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zt8l268dgbumrgak8x4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FU_FRLHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zt8l268dgbumrgak8x4.png" alt="Screenshot from ECMAScript spec explaining what should happen when value is null or undefined" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we see that for other types of arguments, (except &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;) the spec uses the &lt;code&gt;ToObject&lt;/code&gt; abstract operation, to convert the value to an object and if the return value is not &lt;code&gt;undefined&lt;/code&gt; it will try to use the enumerable properties of the result. Keep in mind that &lt;code&gt;ToObject&lt;/code&gt; conversions are &lt;a href="https://262.ecma-international.org/6.0/#sec-toobject"&gt;described in the table below&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v6XHlqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ts9dpue29aibr8hxyd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v6XHlqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ts9dpue29aibr8hxyd3.png" alt="Screenshot from ECMAScript spec with a detailed table explaining what ToObject conversion should do depending on the argument type" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to code this we will get the following results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ToObject conversion&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NumberObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BooleanObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StringObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smallpdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get properties for each items, and return enumerable properties to our object&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NumberObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {}&lt;/span&gt;
&lt;span class="c1"&gt;// So object? = {...123} =&amp;gt; {} makes sense&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BooleanObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {}&lt;/span&gt;
&lt;span class="c1"&gt;// object? = {...false} =&amp;gt; {} yup&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StringObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// So according to the spec, we take only the `enumerable: true` properties&lt;/span&gt;
&lt;span class="c1"&gt;// from this object. Finally we use their `keys` (0, 1, 2, 3, 4, 5, 6, 7)&lt;/span&gt;
&lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;their&lt;/span&gt; &lt;span class="s2"&gt;`value`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt;
&lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;our&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c1"&gt;// object? = {...'Smallpdf'} // =&amp;gt; {0: "S", 1: "m", 2: "a", 3: "l", 4: "l", 5: "p", 6: "d", 7: "f"}&lt;/span&gt;
&lt;span class="c1"&gt;// it all makes sense now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Javascript surely is weird, but if we follow the spec, it all makes sense! 🌈 🎉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>explainlikeimfive</category>
      <category>programming</category>
    </item>
    <item>
      <title>Git basics: Branches and strategies</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 07 Nov 2021 10:12:33 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/git-basics-branches-and-strategies-4hab</link>
      <guid>https://dev.to/dailydevtips1/git-basics-branches-and-strategies-4hab</guid>
      <description>&lt;p&gt;Branches are an essential part of using Git. You can view a branch as separate versions of your project.&lt;/p&gt;

&lt;p&gt;Generally speaking, it's a good thing always to have these two branches in place:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;master&lt;/strong&gt;: (main) This is the production version of your project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;development&lt;/strong&gt;: The testing version of your app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Besides these branches that are always there, you might encounter some other branches.&lt;br&gt;
These other branches depend on the type of issue they solve.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branches-for-critical-hotfixes"&gt;
  &lt;/a&gt;
  Branches for critical hotfixes
&lt;/h2&gt;

&lt;p&gt;Your project is live, but you realized a typo or a minor styling issue.&lt;br&gt;
It's always something that needs to be solved right away.&lt;/p&gt;

&lt;p&gt;These hotfix branches can be merged directly into the master branch; however, don't forget to merge them into development to keep up to date.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h2&gt;

&lt;p&gt;More often, you'll be making new features. This could be a small feature or a bigger feature that might take a while to create.&lt;/p&gt;

&lt;p&gt;In either way, you'll be using multiple feature branches. Each feature should be as small as possible, so it narrows down what that branch does.&lt;/p&gt;

&lt;p&gt;Once you are finished with a feature, it should be merged into the development branch for testing purposes.&lt;/p&gt;

&lt;p&gt;The testing should always be done on the individual/development branches. Once the tests are good and happy with the results, you can merge development into master.&lt;/p&gt;

&lt;p&gt;If you want to be super fancy, you can introduce release branches. (For me, that's not a super high need)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gitflow"&gt;
  &lt;/a&gt;
  GitFlow
&lt;/h2&gt;

&lt;p&gt;With this, we have something called a GitFlow.&lt;/p&gt;

&lt;p&gt;This workflow created by &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;Vincent Driessen&lt;/a&gt; describes the flow that should be taken when developing using Git.&lt;/p&gt;

&lt;p&gt;This is an opinionated flow, but I've seen this success in a lot of different companies. Hence it's always the flow I choose for my projects.&lt;/p&gt;

&lt;p&gt;See below for a visual representation of the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kgduu7kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635313947207/RULXcQpfO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kgduu7kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635313947207/RULXcQpfO.png" alt="GitFlow model" width="880" height="1166"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-create-branches"&gt;
  &lt;/a&gt;
  How to create branches
&lt;/h2&gt;

&lt;p&gt;This might all sound cool to you, and you have a good understanding of &lt;a href="https://daily-dev-tips.com/posts/git-basics-your-first-commit-to-github/"&gt;committing code to Git&lt;/a&gt;.&lt;br&gt;
But we haven't used any branches other than the master branch till now.&lt;/p&gt;

&lt;p&gt;Let's open up our project and create a development branch from whatever we have now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new branch called &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can, however, also create a new branch of specific other branches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; feature_1 development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These branches will still be local and not pushed to GitHub.&lt;/p&gt;

&lt;p&gt;To push a different branch, you can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push origin development

git push origin feature_1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we then go over to GitHub, we should see two new branches show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvRiqV-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635314408871/gxYjCSid8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvRiqV-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635314408871/gxYjCSid8.png" alt="GitHub multiple branches" width="880" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just be aware of which branch you are working on.&lt;br&gt;
You can always switch to another branch by using the &lt;code&gt;checkout&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will reset you to the master branch. You can use any branch name instead of master.&lt;/p&gt;

&lt;p&gt;And that wraps up branches in Git. I hope you learned something about Gitflow and how to make your first own branch.&lt;/p&gt;

&lt;p&gt;You can view my &lt;a href="https://github.com/rebelchris/git-test/branches"&gt;branches on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 53/100 The Secret Life of Objects</title>
      <author>Rio Cantre</author>
      <pubDate>Sun, 07 Nov 2021 10:00:36 +0000</pubDate>
      <link>https://dev.to/riocantre/day-53100-the-secret-life-of-objects-17ko</link>
      <guid>https://dev.to/riocantre/day-53100-the-secret-life-of-objects-17ko</guid>
      <description>&lt;p&gt;"An abstract data type is realized by writing a special kind of program […] which defines the type in terms of the operations which can be performed on it."&lt;/p&gt;

&lt;p&gt;– Barbara Liskov, Programming with Abstract Data Types&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6u1CPNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hguhyxnt7gf0tdlnwdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6u1CPNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hguhyxnt7gf0tdlnwdz.png" alt="Rabbit" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
