<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's So Great About Next.js?</title>
      <author>Brian Rinaldi</author>
      <pubDate>Fri, 15 Oct 2021 12:50:56 +0000</pubDate>
      <link>https://dev.to/launchdarkly/whats-so-great-about-nextjs-21ji</link>
      <guid>https://dev.to/launchdarkly/whats-so-great-about-nextjs-21ji</guid>
      <description>&lt;p&gt;If you're working in web development today, chances are that you're aware of, curious about, or perhaps even used &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Next.js is what's often referred to as a "meta framework," in that it is a framework built upon one or more other frameworks. In the case of Next.js, it is built upon &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As React became the most widely adopted web framework, encompassing over 40% of developers in 2021 &lt;a href="https://www.statista.com/statistics/1124699/worldwide-developer-survey-most-used-frameworks-web/"&gt;according to Statista&lt;/a&gt;, Next.js adoption has also grown dramatically. &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, the company that maintains Next.js, &lt;a href="https://venturebeat.com/2021/06/23/vercel-secures-102m-to-accelerate-next-js-adoption/"&gt;cites&lt;/a&gt; over 6 million downloads since its launch and 50% usage growth in the top ten-thousand websites for the period of October 2020 to June 2021 alone.&lt;/p&gt;

&lt;p&gt;A big part of the reason that developers and companies are choosing Next.js for their web application development is because it is a full-stack framework (as in, it handles both the frontend and backend of your application) and offers support for a variety of rendering methods---even mixing and matching those methods as needed. &lt;/p&gt;

&lt;p&gt;Let's take a brief look at how Next.js has evolved and, in particular, how the rendering methods within Next.js have evolved.&lt;/p&gt;

&lt;p&gt;And if you want a more detailed exploration of how to combine Next.js and &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt; feature management, check out my new guide, "&lt;a href="https://docs.launchdarkly.com/guides/platform-specific/nextjs"&gt;Using LaunchDarkly with Next.js&lt;/a&gt;."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-evolution-of-nextjs"&gt;
  &lt;/a&gt;
  The Evolution of Next.js
&lt;/h2&gt;

&lt;p&gt;Today, Next.js is frequently associated with the &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt; methodology for developing web applications. When it was &lt;a href="https://vercel.com/blog/next"&gt;launched in early 2016&lt;/a&gt;, however, it was originally just for server-side rendered apps. At the time, what made Next.js unique was that it handled both the frontend and the backend of your application and both were built using JavaScript and React. This allows developers to build full-stack applications using a single language and toolset while delivering an improved user experience that typically results in a faster initial render of the page.&lt;/p&gt;

&lt;p&gt;Next.js also gained popularity because it simplified building full-stack applications using React. It provided automatic routing for pages and built-in methods for server-side rendering (SSR) and data fetching. All of these features still exist in Next.js today, but many new features have been added and the existing ones have been dramatically enhanced. In particular, Next.js now handles multiple types of rendering methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-methods-in-nextjs"&gt;
  &lt;/a&gt;
  Rendering Methods in Next.js
&lt;/h2&gt;

&lt;p&gt;As we noted, Next.js started as simply a framework for server-side rendering (SSR) As its capabilities have expanded, even what SSR means in Next.js has changed. Let's look at the various rendering options available in Next.js today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering-ssr"&gt;
  &lt;/a&gt;
  Server-side rendering (SSR)
&lt;/h3&gt;

&lt;p&gt;In SSR, content is generated on the server (which is Node.js) for every single request and then sent to the browser. Starting with the release of &lt;a href="https://nextjs.org/blog/next-8"&gt;Next.js 8&lt;/a&gt;, every server-rendered page became a serverless function (also known as a lambda). For instance, when we call the page at &lt;code&gt;/about&lt;/code&gt;, Next.js calls a serverless function that specifically handles returning the backend data necessary to render the "About" page. The data fetching is encapsulated in the &lt;code&gt;getServerSideProps()&lt;/code&gt; method in Next.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerendering"&gt;
  &lt;/a&gt;
  Pre-rendering
&lt;/h3&gt;

&lt;p&gt;With pre-rendering---also called static rendering or static site generation (SSG)---the page is rendered during a build that occurs before the application is deployed, usually as part of a CI/CD build process. This was originally added as an option in &lt;a href="https://auth0.com/blog/nextjs-3-release-what-is-new/"&gt;Next.js 3&lt;/a&gt; but the process was very manual. As of &lt;a href="https://nextjs.org/blog/next-6"&gt;Next.js 6&lt;/a&gt;, routes became automatic for both SSR and SSG pages (though dynamic routes still need to provide paths programmatically via the &lt;code&gt;getStaticPaths()&lt;/code&gt; method). &lt;a href="https://nextjs.org/blog/next-9"&gt;Next.js 9&lt;/a&gt; introduced a feature called "Automatic Static Optimization" that automatically determines if a page can be rendered as static. The ability to mix server-side rendered pages/routes and pre-rendered pages/routes was unique to Next.js and has since been adopted by other tools frameworks like &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; and &lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deferred-rendering-isr"&gt;
  &lt;/a&gt;
  Deferred rendering (ISR)
&lt;/h3&gt;

&lt;p&gt;Within Next.js, deferred rendering is referred to as Incremental Static Regeneration (ISR), which was initially introduced in &lt;a href="https://nextjs.org/blog/next-9-4"&gt;version 9.4&lt;/a&gt;. It is similar to pre-rendering, though the requested page isn't rendered during the initial build but instead when it is first requested by a user. Subsequent users will see the pre-rendered version of the page either until a new build occurs or until an optional cache timeout has passed. The goal of ISR is to eliminate the extremely long build time that large sites could often face by allowing the developer to defer building lower-trafficked pages. It also has the ability to be selectively used to render pages based upon user-generated content.&lt;/p&gt;

&lt;p&gt;Of course, as with any frontend framework, Next.js also has methods to assist with client-side rendering, where content can be loaded, modified or updated via client-side JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#with-great-power"&gt;
  &lt;/a&gt;
  With Great Power...
&lt;/h2&gt;

&lt;p&gt;The ability to mix and match all of these rendering methods gives developers a lot of power, but it also presents a unique challenge. Developers now have to consider more than just how to render specific content, but &lt;em&gt;when&lt;/em&gt; to render it. While by no means comprehensive, here are a few things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Is this content the same for every user? Then pre-rendering or deferred rendering can offer the best performance.&lt;/li&gt;
&lt;li&gt;  Is this content user-specific or generated dynamically for each request? Then server-side rendering may be the best option, but, in some cases, deferred rendering may be able to achieve similar results.&lt;/li&gt;
&lt;li&gt;  Is this content user/request-specific but lightweight or does it require real-time updates to the page? Then this can probably be loaded via client-side rendering.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This also becomes complicated when integrating a tool like LaunchDarkly. Which SDK(s) should I use? How do I integrate the SDKs into Next.js code? How does LaunchDarkly work with pre-rendered or deferred rendered pages? &lt;/p&gt;

&lt;p&gt;We answer all of these questions and more in my latest guide, "&lt;a href="https://docs.launchdarkly.com/guides/platform-specific/nextjs"&gt;Using LaunchDarkly with Next.js&lt;/a&gt;."&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Free React Dashboards - Chakra, M-UI and Ant Design</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 15 Oct 2021 12:43:11 +0000</pubDate>
      <link>https://dev.to/sm0ke/free-react-dashboards-chakra-m-ui-and-ant-design-3328</link>
      <guid>https://dev.to/sm0ke/free-react-dashboards-chakra-m-ui-and-ant-design-3328</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a curated list with open-source &lt;strong&gt;&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt;&lt;/strong&gt; styled with different &lt;code&gt;super-popular&lt;/code&gt; components libraries: &lt;code&gt;Chakra-UI&lt;/code&gt;, &lt;code&gt;M-UI&lt;/code&gt;, and &lt;code&gt;Ant.Design&lt;/code&gt;. All templates are released under permissive licenses that allow unlimited copied for hobby and commercial projects. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is an &lt;strong&gt;open-source&lt;/strong&gt; JavaScript library for coding user interfaces baked by Facebook.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard"&gt;React Dashboard Purity&lt;/a&gt; - styled with &lt;code&gt;Chakra UI&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://berrydashboard.io/"&gt;React Dashboard Berry&lt;/a&gt; - &lt;code&gt;Material-UI&lt;/code&gt; design from CodedThemes&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react"&gt;React Dashboard Soft&lt;/a&gt; - styled with &lt;code&gt;M-UI&lt;/code&gt; (ex. Material-UI)&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard"&gt;React Dashboard Muse&lt;/a&gt; - styled with &lt;code&gt;Ant Design&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-purity"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard"&gt;React Dashboard Purity&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Designed for those who like modern UI elements and beautiful websites &lt;strong&gt;Purity Dashboard&lt;/strong&gt; is made of hundreds of elements, designed blocks, and fully coded pages. Purity UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using Chakra's style props.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard"&gt;React Dashboard Purity&lt;/a&gt; - &lt;strong&gt;product page&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/purity-ui-dashboard/#/admin/dashboard"&gt;React Dashboard Purity&lt;/a&gt; - &lt;strong&gt;LIVE Demo&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jyehW0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53lwd2lv50eiph4en3wi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jyehW0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53lwd2lv50eiph4en3wi.gif" alt="Animated presentation of Purity Template, a free React Dashboard crafted on top of Chakra UI. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-soft"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react"&gt;React Dashboard Soft&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Built with Soft UI Design system, probably the most innovative design system from Creative-Tim. This FREE Material-UI Dashboard is coming with prebuilt design blocks, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react"&gt;React Dashboard Soft&lt;/a&gt; - &lt;strong&gt;product page&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-react/#/dashboard"&gt;React Dashboard Soft&lt;/a&gt; - &lt;strong&gt;LIVE Demo&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYhOqjbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjozpg24mncpdlmw6qml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYhOqjbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjozpg24mncpdlmw6qml.png" alt="Sample Page of Soft UI Template, a free React Dashboard crafted on top of Materui UI components library. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-berry"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://berrydashboard.io/"&gt;React Dashboard Berry&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Berry is a creative open-source admin dashboard template build using React and Material-UI library. It is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://berrydashboard.io/"&gt;Berry Dashboard&lt;/a&gt; - &lt;strong&gt;product page&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Berry Dashboard&lt;/a&gt; - &lt;strong&gt;source code&lt;/strong&gt; (published on Github)&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://berrydashboard.io/free/dashboard/default"&gt;Berry Dashboard&lt;/a&gt; - &lt;strong&gt;LIVE Demo&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This free product might be a good choice for your next project based on the modern UI aesthetics, rich set of UI components, modern tooling, and a simple, intuitive codebase structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdMxIcLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5sa8tv1ku9mbxrxuk8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdMxIcLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5sa8tv1ku9mbxrxuk8d.png" alt="Dashboard Page of Berry Template, a free React Dashboard crafted on top of Materui UI components library. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-muse"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard"&gt;React Dashboard Muse&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Muse Ant Design Dashboard is a free Admin Template based on two popular front-end technologies: Ant Design &amp;amp; React. It was built to simplify the developer's work and is comes with a fresh design inspired by Ant Design. All its components are built to fit perfectly with each other while aligning to the Ant Design concepts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard"&gt;React Dashboard Muse&lt;/a&gt; - &lt;strong&gt;product page&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/muse-ant-design-dashboard/#/dashboard"&gt;React Dashboard Muse&lt;/a&gt; - &lt;strong&gt;LIVE Demo&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This beautiful React Admin Template comes with 5 color filter choices for both the sidebar and the cards (blue, green, red, yellow, and black), an option to have a transparent or fill sidebar, and an option to have a fixed navbar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VE-guYHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ynvtek4hnqs06qaqgf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VE-guYHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ynvtek4hnqs06qaqgf5.png" alt="Dashboard Page of Muse Template, a free React Dashboard crafted on top of Ant.Design components library. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;Free &lt;strong&gt;&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt;&lt;/strong&gt; - article published on Dev.to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt;&lt;/strong&gt; - a curated list with &lt;code&gt;full-stack starters&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>dashboards</category>
    </item>
    <item>
      <title>Video Streaming Protocol– Everything You Must Know In 2021</title>
      <author>hermoni versa</author>
      <pubDate>Fri, 15 Oct 2021 12:21:45 +0000</pubDate>
      <link>https://dev.to/hermoniversa/video-streaming-protocol-everything-you-must-know-in-2021-4j0j</link>
      <guid>https://dev.to/hermoniversa/video-streaming-protocol-everything-you-must-know-in-2021-4j0j</guid>
      <description>&lt;p&gt;Video streaming is a popular term today which has a new technology whether in entertainment, e-commerce, or education. Today, you can share a video with millions of viewers around the world with just a few clicks on your computer or phone. How is it possible? Video streaming protocols allow you to stream and deliver videos to your device. What are Video Streaming Protocols? How do I select an appropriate video streaming protocol? What video streaming protocols are commonly used? Read on, as we talk about them in this guide.&lt;/p&gt;

&lt;p&gt;Are you eager to dive into &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;video streaming&lt;/a&gt;&lt;/strong&gt; protocols?&lt;/p&gt;

&lt;p&gt;To better understand how to use video efficiently, it's essential to apprehend what number of protocols are affecting video streaming. So let's get into that. &lt;/p&gt;

&lt;p&gt;But first ... The easy definition of the streaming protocol is a set of rules that determines how information is transferred over the net irrespective of the type of streaming, audio or video. &lt;/p&gt;

&lt;p&gt;Rather, a video streaming protocol is a standardized approach for handing over video content material to users. In the case of video, the stream is split down into small portions and transmitted to the receiving end, reassembled in a single portion and fed to the user.&lt;/p&gt;

&lt;p&gt;When selecting the high-quality video streaming protocol for your use case, it’s essential to contemplate the following elements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Kind of use&lt;/li&gt;
&lt;li&gt;Support and compatibility&lt;/li&gt;
&lt;li&gt;Codec requirements&lt;/li&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Quality of experience (adaptive bitrate features, etc.)
Playback support&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By keeping in mind the elements above, companies can select applicable video streaming protocols based on their needs.&lt;br&gt;
Now that you get a better idea of the purpose of video streaming protocols, then, let us discuss a list of the most common protocols for video streaming today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-different-types-of-video-streaming-protocols"&gt;
  &lt;/a&gt;
  The Different Types of Video Streaming Protocols
&lt;/h2&gt;

&lt;p&gt;All protocols serve their purpose and vary in terms of elements like latency and compatibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legacy-protocols"&gt;
  &lt;/a&gt;
  Legacy Protocols
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#realtime-messaging-protocol-rtmp"&gt;
  &lt;/a&gt;
  Real-Time Messaging Protocol (RTMP)
&lt;/h3&gt;

&lt;p&gt;RTMP remains the most-used protocol. It is developed by Macromedia and acquired by Adobe in 2005. It keeps a persistent, strong connection and permits low-latency communication. This universally standard protocol is designed to keep low latency connections by transmitting video and audio records in small packets. However, this protocol evolved typically to work with the Flash player. Also, RTMP is supported by most streaming platforms and software due to the legacy factor. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Video Codecs:264, VP6, VP8&lt;/li&gt;
&lt;li&gt;Audio Codecs: AAC, AAC-LC, MP3,HE-AAC+ v1 &amp;amp; v2, Speex,Opus, Vorbis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Low latency (approximately 5 seconds)&lt;/li&gt;
&lt;li&gt;No buffering required&lt;/li&gt;
&lt;li&gt;Multicast support&lt;/li&gt;
&lt;li&gt;Extensive platform support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability is low&lt;/li&gt;
&lt;li&gt;Not optimized for quality&lt;/li&gt;
&lt;li&gt;Due to the death of Flash, it Will eventually become obsolete &lt;/li&gt;
&lt;li&gt;Low security&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rtsp-realtime-streaming-protocol"&gt;
  &lt;/a&gt;
  RTSP – Real-Time Streaming Protocol
&lt;/h3&gt;

&lt;p&gt;RTSP is famous for communication and entertainment systems. Its low latency additionally makes it famous for surveillance systems, drone streaming and different IoT devices as well.&lt;/p&gt;

&lt;p&gt;RTSP permits viewers to remotely pause, play, and stop video streams through the Internet without the need for local downloads. RTSP was most substantially used by RealNetworks Real Player and continues to be being implemented for various uses such as remote camera streams, online education and net radio. RTSP requires a devoted server for streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Video Codecs:265 (preview), H.264, VP9, VP8&lt;/li&gt;
&lt;li&gt;Audio Codecs: AAC, AAC-LC,MP3, HE-AAC+ v1 &amp;amp; v2, Speex, Vorbis,Opus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Low latency (approximately 2 seconds)&lt;/li&gt;
&lt;li&gt;Popular  among IP cameras and surveillance systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability is low&lt;/li&gt;
&lt;li&gt;Not optimized for quality&lt;/li&gt;
&lt;li&gt;Dependent on other protocols (RTP &amp;amp; RTCP)&lt;/li&gt;
&lt;li&gt;Not commonly supported with many devices&lt;/li&gt;
&lt;li&gt;HTTP Based Protocols&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hls-http-live-streaming"&gt;
  &lt;/a&gt;
  HLS – HTTP Live Streaming
&lt;/h3&gt;

&lt;p&gt;HLS is an adaptive bitrate streaming protocol from Apple launched in 2009 to solve the problems of efficient live video and VOD delivery to viewers’ devices, especially Apple devices. HLS content material is delivered from an internet server (or starting place server) and frequently via a CDN before it reaches a video participant. As an adaptive bitrate protocol, the video participant appears for adjustments in the bandwidth conditions and if there are fluctuations, it could seamlessly transfer to the ABR profile quality ideal at that given moment. HLS video streaming is well-matched with an extensive majority of devices and HTML5 players. The death of Flash has made maximum users transfer to HTML5 players, that's the primary reason for its extended popularity. As an Apple technology, HLS is the primary delivery protocol for iOS devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Video Codecs:265, H.264&lt;/li&gt;
&lt;li&gt;Audio Codecs: AAC-LC, xHE-AAC,HE-AAC+ v1 &amp;amp; v2, Apple Lossless, FLAC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High scalability&lt;/li&gt;
&lt;li&gt;High quality
*Widely popular and supported
*Adaptive bitrate streaming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*High latency with quality prioritized &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MPEG-DASH – Dynamic Adaptive Streaming over HTTP&lt;/li&gt;
&lt;li&gt;MPEG-DASH  was advanced by the Moving Pictures Expert Group (MPEG), a global authority on digital audio and video standards, to supply video and audio to devices over net servers in the use of the DASH (Dynamic Adaptive Streaming over HTTP) protocol. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An open-supply option, it may be custom designed to support any audio or video codec. It additionally presents adaptive bitrate streaming which is typically used to supply stay and on-call for video content material over the net to viewers.&lt;/p&gt;

&lt;p&gt;MPEG-DASH is codec agnostic. In this manner, MPEG-DASH isn't limited to the use of H.264 or HEVC codecs however it can also support others consisting of VP8 or VP9 which might be high-quality for better quality broadcasts with lower bitrates. As an alternative ABR protocol to HLS, MPEG-DASH is extensively used on Android devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Video Codecs: codec-agnostic&lt;/li&gt;
&lt;li&gt;Audio Codecs: codec-agnostic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-source protocol&lt;/li&gt;
&lt;li&gt;Codec-agnostic&lt;/li&gt;
&lt;li&gt;Adaptive bitrate streaming&lt;/li&gt;
&lt;li&gt;Optimized for user experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High latency&lt;/li&gt;
&lt;li&gt;Not compatible with Apple software and devices&lt;/li&gt;
&lt;li&gt;Modern Protocols&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-realtime-communications-webrtc"&gt;
  &lt;/a&gt;
  Web Real-Time Communications (WebRTC)
&lt;/h3&gt;

&lt;p&gt;WebRTC is an open-source standard for real-time communication developed by Google and standardized in January 2021, which is often used for video conferences. It is one of the newest new video streaming protocols with the fastest video and audio transmission capabilities of any protocol in existence today. Record and play video and audio without downloading and installing additional plug-ins. It is compatible with almost all modern browsers including Safari, Google Chrome, Firefox, Opera, and others. &lt;/p&gt;

&lt;p&gt;It supports the high-quality VP8 and VP9 (in addition to the old H 264) as well as the Opus audio codec. Soon, the protocol will be compatible with a new AV1 video codec. The protocol is expected to replace telephony and become the mainstay of communications services. WebRTC is that it turns millions of browsers into streaming terminals without installing additional plug-ins. Finally, the protocol uses adaptive bit rate technology that allows you to automatically adjust the video quality and avoid dropouts and interruptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video Codecs:264, VP8, VP9(H.625 + AV1 in progress)&lt;br&gt;
Audio Codecs: Opus, iSAC, iLBC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Superfast&lt;/li&gt;
&lt;li&gt;Browser-based protocol&lt;/li&gt;
&lt;li&gt;No plugins needed&lt;/li&gt;
&lt;li&gt;Sub-second latency&lt;/li&gt;
&lt;li&gt;supported codecs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Designed for video conferencing&lt;/li&gt;
&lt;li&gt;Not scalable&lt;/li&gt;
&lt;li&gt;Instability due to sub-second latency&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secure-reliable-transport-srt"&gt;
  &lt;/a&gt;
  Secure Reliable Transport (SRT)
&lt;/h3&gt;

&lt;p&gt;This open-source protocol can offer excellent video streaming no matter the network conditions. This video streaming protocol has been identified as a competitive replacement for both RTMP and RTSP. It gives reliable stay video streaming with low latency over suboptimal networks. However, this protocol continues to be no longer extensively supported yet due to being a rising technology.&lt;/p&gt;

&lt;p&gt;It is broadly considered to be an alternative to RTMP shortly. It permits you to stay-stream your content material over suboptimal networks. The developers state that SRT protects your stay videos from jitters, bandwidth fluctuation, and packet loss. Besides, this protocol is codec-agnostic, which means it supports any current audio and video codec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifications:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video Codecs: Any since it’s codec-agnostic&lt;br&gt;
Audio Codecs: Any since it’s codec-agnostic&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-quality video support&lt;/li&gt;
&lt;li&gt;Low latency streaming over suboptimal networks&lt;/li&gt;
&lt;li&gt;Stability&lt;/li&gt;
&lt;li&gt;sub-second latency&lt;/li&gt;
&lt;li&gt;strong codec support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not commonly supported with many devices&lt;/li&gt;
&lt;li&gt;Weak platform support&lt;/li&gt;
&lt;li&gt;No playback&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Finally, We have reviewed the most famous live-streaming protocols, which are RTMP, RTSP, HLS, MPEG-DASH, WebRTC, and SRT. Each has its pros and cons, which means you may use any protocol depending on your needs. I hope this blog will give you clear understandings of a protocol for video streaming and the relation between video streaming protocol, codec, and container format. I  am sure that you are &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;ready to pick out and use the right protocol for your needs&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>videostreaming</category>
      <category>videostreamingprotocol</category>
      <category>livestreaming</category>
    </item>
    <item>
      <title>Work Life Balance While Working Remotely</title>
      <author>Vadim Atamanenko</author>
      <pubDate>Fri, 15 Oct 2021 12:01:49 +0000</pubDate>
      <link>https://dev.to/vadimatamanenko/work-life-balance-while-working-remotely-890</link>
      <guid>https://dev.to/vadimatamanenko/work-life-balance-while-working-remotely-890</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-keep-the-balance"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to keep the balance?&lt;/strong&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-does-work-life-balance-mean"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What does work life balance mean?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In theory, it seems that the concept of "balance between personal life and work" has a certain meaning - part of your time to work, but at the same time spending all your free time with friends, family, doing hobbies, sports or just watching TV. The idea behind work-life balance is to offer a connected and social work environment where creativity and career fulfillment will be encouraged, whether you work remotely or in the office, as well as provide a comprehensive personal life outside of their professional duties. In layman's terms, "work-life balance" means 40 hours of work per week, followed by unrelated weekends and vacations.&lt;/p&gt;

&lt;p&gt;The modern concept of work-life balance is based on empowering employees to work anywhere, anytime, leaving fewer fixed hours of work and more time for innovation and communication between team members.&lt;/p&gt;

&lt;p&gt;The emergence of cloud-based IT infrastructure and the prevalence of BYOD policies enable employees today to work from home or remotely and seamlessly collaborate with colleagues and management.&lt;/p&gt;

&lt;p&gt;As companies now become more dynamic, flexible, and have corporate social collaboration tools and BYOD at their disposal, the "mobile effect" will continue to tie employees' professional and personal lives together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-myths-surrounding-work-life-balance"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are the myths surrounding work life balance?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;But what if everything you thought you knew about work-life balance is a myth? Some industry experts believe that such a concept no longer exists in its traditional sense. &lt;br&gt;
Traditionally, work and personal life have been viewed as competing activities that are fighting for our time. There is work and then there is "free time," meaning that work is not freedom. And the term "balance" implies that more work automatically means less personal life. But we have only one life - we just live one part of it, working, and the other - doing other things.&lt;br&gt;
The traditional concept of balance between personal life and work is not correct, since the development of global innovative companies has narrowed geographic boundaries and made time zones irrelevant. Consumers expect services and technical support to be provided 24 hours a day, 365 days a year, and most companies have either already switched to using mobile access or are migrating to it so that employees are always in touch and participate in the overall process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-dos-and-donts-surrounding-work-life-balance-when-working-remotely"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are the do's and don’ts surrounding work life balance when working remotely?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Technology can also offer concrete solutions to help employees and managers maintain an appropriate balance between their personal and professional lives. Experts recommend using social collaboration solutions that can help reduce the incessant flow of emails and lengthy meetings, give employees quick access to the information or authority they need, and enable them to interact within their “virtual workspace” rather than in a physical office. Managing your time and work effectively helps you free up more time for your personal life.&lt;br&gt;
According to experts, the ultimate goal is to avoid dividing work and life into separate areas, and to find the most promising moments that will allow you to do without prejudice to both. Think about it, because you are not leading a "work" and "personal" life - you have one life, it is simply expressed in different aspects. And these aspects are so intermingled and interdependent that there is no point in trying to separate them. They are already so intertwined with each other that there is no such moment in time when you devote 100% to work and 100% to weekends, it's just your life. And this is not about maintaining balance, but about being happy and living life to the fullest in all its manifestations.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Day 7 of 100 Days of Code &amp; Scrum: Panel Interviews, Dating Site Ad, and Networking</title>
      <author>Rammina</author>
      <pubDate>Fri, 15 Oct 2021 11:52:15 +0000</pubDate>
      <link>https://dev.to/rammina/day-7-of-100-days-of-code-scrum-panel-interviews-dating-site-ad-and-networking-6bo</link>
      <guid>https://dev.to/rammina/day-7-of-100-days-of-code-scrum-panel-interviews-dating-site-ad-and-networking-6bo</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;Today was rather stressful, but I still managed to get my minimum required work done, along with some side Photoshop work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#panel-interview"&gt;
  &lt;/a&gt;
  Panel Interview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euGyY_KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6hm32x9s9681zbn7hq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euGyY_KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6hm32x9s9681zbn7hq5.png" alt="Panel Interview Meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly, I had to go through a panel interview, which I find anxiety-inducing for an introvert like me.&lt;/p&gt;

&lt;p&gt;I don't really understand why businesses feel the need to have 5 people interview someone, each of them crossing their arms and taking turns to ask questions. In some places I've interviewed with, they invite someone that's not really relevant and doesn't even talk. I just think it's inefficient, but that's just my opinion anyway.&lt;/p&gt;

&lt;p&gt;I believe I did well in the interview (I think the wait drained me more than the interview itself), but I should've asked more questions to show interest in the job position or in the company. Not asking questions is a yellow flag that shows that a candidate is kind of apathetic with regard to the company and job position.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dating-site-ad"&gt;
  &lt;/a&gt;
  Dating Site Ad?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRiic4Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4qky7nrc96tco2hl0l9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRiic4Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4qky7nrc96tco2hl0l9.png" alt="Pair Programming Ad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was practicing Photoshop on the side as well. Specifically, I tried to make a poster for &lt;a href="https://chingu.io/"&gt;Chingu.io&lt;/a&gt; for promoting the weekly pair programming matchups that they offer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result?
&lt;/h3&gt;

&lt;p&gt;It looks like a dating site ad, and I kind of cringed inside, to be honest. Maybe I will update it some more, but I could also just use this because it looks pretty nice anyway and the meme value might give it more attention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I learned about &lt;code&gt;useLazyQuery&lt;/code&gt;, GraphQL &lt;code&gt;subscriptions&lt;/code&gt;, and &lt;code&gt;WebSocketLink&lt;/code&gt;. I also managed to finish the React + Apollo client tutorial at &lt;a href="https://www.howtographql.com/"&gt;https://www.howtographql.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are some of the things I've learned/reviewed:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;I'm reviewing everything I learned about GraphQL this week, especially the gaps in my knowledge. I'm also learning more about use cases and comparisons of REST and GraphQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;p&gt;The Scrum Master assists the Development Team in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coaching the Development Team in self-organization and cross-functionality.&lt;/li&gt;
&lt;li&gt;Coaching the Development Team in organizational environments in which Scrum is not yet fully adopted and understood.&lt;/li&gt;
&lt;li&gt;Helping the Development Team to create high-value products.&lt;/li&gt;
&lt;li&gt;Removing impediments to the Development Team’s progress.&lt;/li&gt;
&lt;li&gt;Facilitating Scrum events as requested or needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TgRYKBtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45dwiwuygsppyz0cgfy1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgRYKBtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45dwiwuygsppyz0cgfy1.jpeg" alt="Dead Thumbsup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How is everyone doing in their learning journey? Feel free to chat with me in the comments and/via DM!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Level up compliance confidence with AWS Config</title>
      <author>Michael Wu</author>
      <pubDate>Fri, 15 Oct 2021 11:23:31 +0000</pubDate>
      <link>https://dev.to/aws-builders/level-up-compliance-confidence-with-aws-config-15ne</link>
      <guid>https://dev.to/aws-builders/level-up-compliance-confidence-with-aws-config-15ne</guid>
      <description>&lt;p&gt;With the ever increasing adoption of moving workloads to public cloud providers like AWS, satisfying regulatory compliance has emerged as one of the most demanding requirements for businesses that operate on the cloud.&lt;/p&gt;

&lt;p&gt;As an AWS customer, this means that you need to establish a proper governance model for your business operations to continue, particularly for those that operate under specific regulations. This "model", is conceptualised under &lt;a href="https://docs.aws.amazon.com/controltower/latest/userguide/guardrails.html"&gt;AWS Control Tower&lt;/a&gt; as a collection of guardrails. A guardrail is simply a rule that describes what is allowed or disallowed in your AWS account. Now, a guardrail can be of two forms, a preventive guardrail or a detective guardrail.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A preventive guardrail basically &lt;strong&gt;enforces&lt;/strong&gt; a policy, such as using SCP to deny IAM users to specific APIs, so that those users in that AWS account cannot perform certain actions.&lt;/li&gt;
&lt;li&gt;On the other hand, a detective guardrail &lt;strong&gt;reports&lt;/strong&gt; a violation after evaluations of a resource deem it non-compliant under the rule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, not every AWS customer uses Control Tower, or even AWS Organizations. This blog post aims at walking you through how to leverage AWS Config to set up &lt;strong&gt;detective&lt;/strong&gt; guardrails in your AWS account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#config-rule"&gt;
  &lt;/a&gt;
  Config rule
&lt;/h2&gt;

&lt;p&gt;In order to detect non-compliant resources, you need to first define what a compliant resource &lt;em&gt;should&lt;/em&gt; look like, and this is done via a Config Rule.&lt;/p&gt;

&lt;p&gt;A config rule evaluates resources based on desired configuration settings. For example,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SNS topics should have at least one active subscriber.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IAM users should not be inactive for more than 90 days.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can define as many rules as you like. Since the main purpose of AWS Config is to track resource inventory and changes in an AWS account, it maintains an ever growing &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html"&gt;list of built-in rules&lt;/a&gt; that you can choose to enable to monitor resources of your interest.&lt;/p&gt;

&lt;p&gt;You can also create your own rules, backed by a lambda function. Custom rules offer greater flexibility to monitor resource types that are currently not supported by AWS Config. One thing worth noting in relation to security is that you can edit the lambda resource-based policy to restrict the lambda invocation permission only to the config rule that's calling it, instead of granting access to the entire Config service principal. AWS recommends it as a &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules_nodejs.html#restricted-lambda-policy"&gt;security best practice for developing custom rules&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-we-have-rules-now-what"&gt;
  &lt;/a&gt;
  Okay we have rules, now what?
&lt;/h2&gt;

&lt;p&gt;That's it! That's all you need to do to set up &lt;em&gt;detective guardrails&lt;/em&gt;. Now that you are armed with a bit of automation to monitor resources on your behalf, wouldn't it be nicer to take it further by rectifying the non-compliant resources found? This is called a &lt;strong&gt;remediation&lt;/strong&gt;. AWS Config allows you to apply remediation automation as an SSM document to respond to evaluation results from config rules. Like managed Config rules, SSM also maintains a list of automation runbooks that AWS Config can use for resource remediation. You are also free to create your own automation runbooks as SSM documents. How to create an automation runbook is outside the scope of this post, but AWS has an excellent walkthrough of &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-authoring-runbooks.html"&gt;authoring a custom runbook&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-rules-and-remediation"&gt;
  &lt;/a&gt;
  Combining rules and remediation?
&lt;/h2&gt;

&lt;p&gt;Yes, AWS Config supports bringing config rules and remediation into one deployment, referred to as a &lt;strong&gt;conformance pack&lt;/strong&gt;. A conformance pack typically comprises a bunch of config rules and remediation actions, declared in a yaml file, similar to a Cloudformation template, but &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/cpack-prerequisites.html"&gt;with a few catches&lt;/a&gt;. The deployment of a conformance pack is underpinned by Cloudformation, you can get the underlying stack arn by describing the conformance pack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-i-have-multiple-accounts"&gt;
  &lt;/a&gt;
  What if I have multiple accounts?
&lt;/h2&gt;

&lt;p&gt;Both AWS Config rule and conformance pack deployments have APIs that target an AWS Organization. On top of simplified deployment, it has added benefits of bringing newly joined accounts into line automatically, and deleting the organizational guardrails when an account leaves the Organization. Organizational config rules and conformance packs are easily identifiable via a special prefix added to the resources deployed into a member account. Cleaning up organizational resources can sometimes get messy because you can only issue the delete API from the management account or the delegated admin account. Given my experience, oftentimes the org level delete API will report failed because of failures on deletion in one or more member accounts. You need to continuously issue the same API from the management or delegated admin account until all members are cleared.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>devops</category>
      <category>compliance</category>
    </item>
    <item>
      <title>JavaScript Promises: Everything You Need to Know</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Fri, 15 Oct 2021 10:55:08 +0000</pubDate>
      <link>https://dev.to/aravsanj/javascript-promises-everything-you-need-to-know-18cj</link>
      <guid>https://dev.to/aravsanj/javascript-promises-everything-you-need-to-know-18cj</guid>
      <description>&lt;p&gt;In today's post, I promise to give you the best article on JavaScript promises you ever read. See what I did there? A promise in JavaScript is an object that is returned after an asynchronous operation. The object will be returned regardless of whether the asynchronous operation was a success or failure. This is why it is called a &lt;strong&gt;promise&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of using promise is to avoid &lt;em&gt;callback hell&lt;/em&gt;. In this post, we will learn about JavaScript promises, what they are, what they can do, and how to use them.&lt;/p&gt;

&lt;p&gt;To start off, we will discuss what existed before promise was introduced. Before promise, we used to pass callback functions directly as an argument.&lt;/p&gt;

&lt;p&gt;Let's take the example of an asynchronous function that downloads a certain image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DownloadImageAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function has to accept three arguments,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The url of the image&lt;/li&gt;
&lt;li&gt;A function that is executed after the image is successfully downloaded&lt;/li&gt;
&lt;li&gt;A function that is executed after the image download failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two functions are called callback functions. Without callback functions, we cannot act up on the result of an asynchronous operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;DownloadImageAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how a typical asynchronous operation is structured. The problem with this approach start when we try to run several asynchronous operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;asyncFunctionOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;asyncFunctionTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;asyncFunctionThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;failure&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;failure&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see above is called a callback hell. This will get worse as more asynchronous operations are added. This is where JavaScript promises sweeps in with a better syntax.&lt;/p&gt;

&lt;p&gt;As I already mentioned, a promise in JavaScript is an object that is returned after an asynchronous operation. We will get to creating promises later down the post. For now, let's rewrite the above code for promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;asyncFunctionOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncFunctionTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncFunctionThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each asynchronous functions above returns a promise. In a promise, we can attach the &lt;code&gt;then&lt;/code&gt; method where we pass the next function. From the above code you should take away three things,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises are far shorter and simpler in syntax&lt;/li&gt;
&lt;li&gt;You only need to pass the failure callback once&lt;/li&gt;
&lt;li&gt;A promise must always return results (check arrow function syntax, it is returning results which is passed to the next &lt;code&gt;then&lt;/code&gt; block)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;It is important to note that for most of our JavaScript life, we will be using already-made promises instead of creating them ourselves.&lt;/em&gt; With that being said, let's learn to create promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-promise"&gt;
  &lt;/a&gt;
  Creating a promise
&lt;/h2&gt;

&lt;p&gt;To create promises, we use the &lt;code&gt;Promise&lt;/code&gt; constructor object in JavaScript. The &lt;code&gt;new&lt;/code&gt; keyword is used to create a new instance of a user-defined object or constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A promise has to be resolved (success) or rejected (failure). In both cases, a function is executed (as demonstrated above). We pass these functions as arguments of an arrow function passed to the &lt;code&gt;Promise&lt;/code&gt; constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the arrow function, we create the definition and condition for resolve or reject to be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already saw how to consume the promise. By using &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// output: from then success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the condition is satisfied (which it is), the resolve function is triggered and &lt;code&gt;then&lt;/code&gt; method is executed. Otherwise, the &lt;code&gt;catch&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; method above itself returns another promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use &lt;code&gt;then&lt;/code&gt; method again on the new promise object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better way to do this is to just tuck in the &lt;code&gt;then&lt;/code&gt; methods one after another (as we saw in the first example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is called a promise chain.&lt;/p&gt;

&lt;p&gt;To recap,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; is an object (constructor) in JavaScript&lt;/li&gt;
&lt;li&gt;An instance of the object is created using &lt;code&gt;new&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;A function is passed as an argument to the constructor&lt;/li&gt;
&lt;li&gt;The function accepts two other functions as arguments - resolve &amp;amp; reject&lt;/li&gt;
&lt;li&gt;Conditions and definitions for these functions are defined in the function definition&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods are executed for resolve and reject accordingly&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;then&lt;/code&gt; method itself returns a promise that can attach another &lt;code&gt;then&lt;/code&gt; method creating a promise chain&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#states-of-a-promise"&gt;
  &lt;/a&gt;
  States of a promise
&lt;/h2&gt;

&lt;p&gt;A promise always has to be in one of the following three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pending&lt;/li&gt;
&lt;li&gt;Fullfilled&lt;/li&gt;
&lt;li&gt;Rejected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pending&lt;/em&gt; is the initial state of the the promise. The promise is &lt;em&gt;fullfilled&lt;/em&gt; when it is a success. The promise is &lt;em&gt;rejected&lt;/em&gt; when it is a failure.&lt;/p&gt;

&lt;p&gt;When a promise is rejected, it is still returning another promise. That means we can also use &lt;code&gt;then&lt;/code&gt; method instead of &lt;code&gt;catch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;code&gt;then&lt;/code&gt; method in this case is used to execute another asynchronous operation. It should not be confused with &lt;code&gt;catch&lt;/code&gt; which is used for error handling. A &lt;code&gt;catch&lt;/code&gt; is always necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; method is instantly executed when confronted with an error. It doesn't matter how many &lt;code&gt;then&lt;/code&gt; methods it had to skip.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; method also returns a promise. So we can tuck in a &lt;code&gt;then&lt;/code&gt; method after the &lt;code&gt;catch&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somethingElse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;somethingElse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we can still trigger another asynchronous operation after error handling.&lt;/p&gt;

&lt;p&gt;If you want to execute something regardless of whether your promise is fulfilled or rejected, use &lt;code&gt;finally&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somethingElse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;somethingElse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whatever goes in to the &lt;code&gt;finally&lt;/code&gt; block is always executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-resolve-and-reject-methods"&gt;
  &lt;/a&gt;
  The resolve() and reject() methods
&lt;/h2&gt;

&lt;p&gt;When we created a promise earlier, we defined the condition for resolving or rejecting that promise. But there is a way to resolve or reject a promise unconditionally.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.resolve()&lt;/code&gt; method returns a promise object that is already resolved by a given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Promise.reject()&lt;/code&gt; method returns a promise object that is rejected with a given reason.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating promises that are unconditionally resolved or rejected is particularly useful when handling multiple independent promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-multiple-independent-promises"&gt;
  &lt;/a&gt;
  Handling multiple independent promises
&lt;/h2&gt;

&lt;p&gt;We can handle multiple independent promises using &lt;code&gt;Promise.all()&lt;/code&gt; and &lt;code&gt;Promise.race()&lt;/code&gt; methods. Both methods accept an array of promises.&lt;/p&gt;

&lt;p&gt;While using &lt;code&gt;Promise.all()&lt;/code&gt;, the &lt;code&gt;then&lt;/code&gt; method is only triggered after the last promise is resovled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// [ result1, result1, result3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using &lt;code&gt;Promise.race()&lt;/code&gt;, the &lt;code&gt;then&lt;/code&gt; method is triggered the moment first promise is resolved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// result1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since these are simple promises, &lt;code&gt;promise1&lt;/code&gt; will be resolved first. This may not be the case with complex ones. This enables us to run multiple asynchronous operations and act up on the one that finishes first.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🔥 How to create a Landing Page with Next JS in 5 minutes and deploy in production 🚀</title>
      <author>Remi W.</author>
      <pubDate>Fri, 15 Oct 2021 10:45:28 +0000</pubDate>
      <link>https://dev.to/ixartz/how-to-create-a-landing-page-with-next-js-in-5-minutes-and-deploy-in-production-5e08</link>
      <guid>https://dev.to/ixartz/how-to-create-a-landing-page-with-next-js-in-5-minutes-and-deploy-in-production-5e08</guid>
      <description>&lt;p&gt;The first thing you do for your SaaS products is to create a landing page. It's also applied for open source projects, Startups, selling online products, etc. Building your Landing Page is the best way to promote your projects and find your audience.&lt;/p&gt;

&lt;p&gt;In this article, I'll show you how you can create and deploy your landing page in production. In 5 minutes, you'll have a marketing website where you can start promoting your projects or products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-js-landing-page-template"&gt;
  &lt;/a&gt;
  Next JS Landing Page Template
&lt;/h2&gt;

&lt;p&gt;Recently, Next JS has grown among React community. With Next JS pre-render pages at build time (SSG), you are now able to write your React components for creating a Landing Page or marketing website.&lt;/p&gt;

&lt;p&gt;To create a landing page in 5 minutes and deploy it in production, you need to get some help. Otherwise, it'll take you several days or weeks to make it.&lt;/p&gt;

&lt;p&gt;I have built an open-source and free Next JS landing page with React, TypeScript and Tailwind CSS. So, you don't need to create and code the design yourself. The code is hosted on GitHub at &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;Next JS Landing Page Template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In one click, you'll able to deploy your landing page on Netlify. You'll find the &lt;a href="https://github.com/ixartz/Next-js-Boilerplate#deploy-to-netlify"&gt;one-click deploy button&lt;/a&gt; inside the REAMDE file of the project.&lt;/p&gt;

&lt;p&gt;After clicking on the Netlify button, you'll redirect to Netlify wizard to set up the landing page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44n9TB-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-one-deploy-landing-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44n9TB-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-one-deploy-landing-page.png" alt="Netlify one-click deploy Next JS Landing Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything should be already configured for you, you only need to indicate the name of your project. At the end of the setup wizard, you should see this UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh7sgRr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-dashboard-deployment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh7sgRr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-dashboard-deployment.png" alt="Netlify one-click deploy Next JS Landing Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait until the landing page is deployed, you can now click the link to your website which follows this format &lt;code&gt;https://XXXXXXXX.netlify.app&lt;/code&gt;. Here is the final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QJkwaOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-landing-page-netlify.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QJkwaOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-landing-page-netlify.png" alt="Next JS Landing Page Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;By following this tutorial, you have created and deployed your landing page in production. Now, you can customize the page to meet your needs and requirements.&lt;/p&gt;

&lt;p&gt;You can also check out our other &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;Next JS Landing Page Template&lt;/a&gt; with prebuilt premium components like Testimonials, Pricing cards, FAQs, or Stats.&lt;/p&gt;

&lt;p&gt;If you want to build SaaS products, I've also created a &lt;a href="https://nextlessjs.com"&gt;Next JS SaaS Boilerplate&lt;/a&gt;. It includes everything you need to build your SaaS products faster with authentication, Stripe integration, prebuilt landing page, prebuilt user dashboard, form and error handling, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>List of currencies of the world</title>
      <author>Jessica Wanda ✤</author>
      <pubDate>Fri, 15 Oct 2021 10:44:14 +0000</pubDate>
      <link>https://dev.to/currency-converter/list-of-currencies-of-the-world-3ndk</link>
      <guid>https://dev.to/currency-converter/list-of-currencies-of-the-world-3ndk</guid>
      <description>&lt;p&gt;There are over 195 countries in the world and seven continents such as Africa, Asia, Australia, Europe, North America, South America and Antarctica. Each country is different with its own history, architecture, struggles, culture and political identity. One thing that invariably is common amongst all countries is the use of money as a medium of exchange. All countries irrespective of whether they are small or big, landlocked or island-based, rich or poor, have a specific currency used for all monetary transactions. Discover the history, interesting facts and details about the most important currencies worldwide. How they were created, which are the banknotes and coins and what they are worth. You can see the table by the name of the currency or the name of the country. What money do you use depends on where are you living or planning to travel. Totally, there are 170 official national currencies circulating around the world. Although the number of the independent countries is 197 plus about five dozen of dependent territories. The matter is, that some of them don't have their own money and officially use the foreign currency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#countries-and-their-currency"&gt;
  &lt;/a&gt;
  Countries and their currency
&lt;/h2&gt;

&lt;p&gt;Our currency table lists the currencies and subcurrencies in use in more than 170+ countries and territories around the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Country&lt;/strong&gt;&lt;br&gt;
We have used the popular rather than the formal names of countries and territories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Currency Name&lt;/strong&gt;&lt;br&gt;
In many cases a number of countries share the same currency&lt;br&gt;
name, but not the same currency. To lessen confusion, we have&lt;br&gt;
included the country name in the currency column.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Currency Codes&lt;/strong&gt;&lt;br&gt;
The International Organization for Standardization has established alpha and numeric codes for all currencies. These are the formal codes that banks and currency dealers use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symbols&lt;/strong&gt;&lt;br&gt;
Most every currency in the world has a symbol or abbreviation&lt;br&gt;
that is more commonly used than the formal ISO codes. For example, $, € and £.&lt;/p&gt;

&lt;p&gt;★ All &lt;strong&gt;currencies of the world&lt;/strong&gt; with their ISO-4217 codes, listed by countries and dependent territories ➔ &lt;a href="https://currencyconverts.com/currencies-of-the-world"&gt;https://currencyconverts.com/currencies-of-the-world&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>currency</category>
      <category>world</category>
    </item>
    <item>
      <title>MediaStream API in Javascript</title>
      <author>Zygimantas Sniurevicius</author>
      <pubDate>Fri, 15 Oct 2021 10:34:03 +0000</pubDate>
      <link>https://dev.to/producthackers/mediastream-api-in-javascript-16h2</link>
      <guid>https://dev.to/producthackers/mediastream-api-in-javascript-16h2</guid>
      <description>&lt;p&gt;Hello fellow dev’s today we are gonna see how easy it is to record your voice or screen in the browser using Mediastream Recording API, with just a few lines we can have something working immediately, first  let’s see how MDN defines &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"&gt;Mediastream Recording API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“The MediaStream Recording API is comprised of a single major interface, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"&gt;MediaRecorder&lt;/a&gt;, which does all the work of taking the data from a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream"&gt;MediaStream&lt;/a&gt; and delivering it to you for processing. The data is delivered by a series of dataavailable events, already in the format you specify when creating the &lt;code&gt;MediaRecorder&lt;/code&gt;”&lt;/p&gt;

&lt;p&gt;There are a lot of technical words in that explanation but in a extremely simplified way mediaStream provides us the tools to control audio and videos using streams of data to deliver information with events like &lt;strong&gt;dataavailable&lt;/strong&gt; or &lt;strong&gt;onstop&lt;/strong&gt;, after that we manipulate this information however we see fit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coKleKBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibo0ru8aqeojtob3bdm1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coKleKBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibo0ru8aqeojtob3bdm1.JPG" alt="repository header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all the code you see in this article is available in the following &lt;a href="https://github.com/zygisS22/MediaStreamAPI"&gt;REPOSITORY&lt;/a&gt;&lt;br&gt;
and if you wanna test the code directly you can do it &lt;a href="https://zygiss22.github.io/MediaStreamAPI/"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project uses only javascript vanilla, we don’t need anything eccentric like react.js or vue.js, but of course if you want to try it using some framework go ahead because it’s basically the same.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;The HTML file is a simple template, with links to our css and js files, other than that we some buttons and a gallery, this is where we gonna display all our audios/videos.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;As for the styling I added some basic flex styles just for centering and a fancy button gradient just for presentation purpose.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;

&lt;p&gt;Now, here we have the main dish, let’s go through  almost line by line.&lt;/p&gt;

&lt;p&gt;We start by declaring all the HTML selectors we'll end up using for future events, mediaRecorder is gonna be the main object that dictates if we recording audio or our screen and the chunks variable is where we gonna store our recording data before converting it into an HTML element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const buttons = document.querySelectorAll(".button");
const startAudioButton = document.querySelector("#startAudio");
const startScreenButton = document.querySelector("#startScreen");
const stopButton = document.querySelector("#stopAudio");
const audioList = document.querySelector("#audio-list");
const videoList = document.querySelector("#video-list");

let mediaRecorder = null;
let chunks = [];

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we add click events to our three beautiful buttons so each one calls the function associate with the HTML element when we want to start or stop recording.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;startAudioButton .addEventListener("click", recordAudio);
stopButton.addEventListener("click", stopRecording);
startScreenButton.addEventListener("click", recordSCreen);


function recordAudio() {
    // ...code
}

function  stopRecording() {
    // ...code
}

function  recordSCreen() {
    // ...code
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first “big” function we have is for recording audio, here we have a promise that calls the method &lt;strong&gt;.getUserMedia()&lt;/strong&gt; with a json object to specify that we need only audio, this pops up a window asking for our &lt;strong&gt;permission&lt;/strong&gt; to use the microphone inside the browser, after that we get a stream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SluIUWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhok6ep8e573xf6yv46b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SluIUWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhok6ep8e573xf6yv46b.JPG" alt="microphone permission"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This stream can be obtained from audio or video, but in our case we want to capture our microphones stream, so we use it to initialize a new MediaRecorder object.&lt;/p&gt;

&lt;p&gt;During the recording we will get a continues flow of data from the event &lt;strong&gt;ondataavailable&lt;/strong&gt;, this data has the following structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEqwBF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtcfmi8p7ffvsm0tzlp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEqwBF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtcfmi8p7ffvsm0tzlp.JPG" alt="console.log data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the definition of a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob"&gt;Blob&lt;/a&gt; for those that dont know what it means.&lt;/p&gt;

&lt;p&gt;“The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream “&lt;/p&gt;

&lt;p&gt;we store all this information inside the array chunks as we are gonna need it later to create the audio element with it.&lt;/p&gt;

&lt;p&gt;Then whenever we stop recording we call another function that creates the  HTML audio element using the chunks array (Blobs).&lt;/p&gt;

&lt;p&gt;Lastly we start the recording with...you guessed it &lt;strong&gt;mediaRecorder.start(x)&lt;/strong&gt; by default it saves the entire file into a single Blob, but if we specify a duration then it creates a Blob every X milliseconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function recordAudio() {
  navigator.mediaDevices
    .getUserMedia({ audio: true})
    .then((stream) =&amp;gt; {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = (e) =&amp;gt; {
        chunks.push(e.data);
      };
      mediaRecorder.onstop = (e) =&amp;gt; {
        createMediaElement("audio", "audio/mp3", audioList);
      };
      mediaRecorder.onerror = (e) =&amp;gt; {};
      mediaRecorder.start(1000);
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We stop the recording by simply calling mediaRecorder.stop()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function stopRecording() {
  mediaRecorder.stop();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we stop a recording we automatically create a &lt;strong&gt;mediaRecorder.onstop&lt;/strong&gt; event , this then calls the function &lt;strong&gt;createMediaElement(...)&lt;/strong&gt; with the mediaType (audio or video), fileType and the placeToAdd (where to insert the element we just created).&lt;/p&gt;

&lt;p&gt;Now we use all the stored information in the chunks array to create one Blob and make it into a url.&lt;/p&gt;

&lt;p&gt;Then we create the HTML element passing the url as src and we reset the let variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function createMediaElement(mediaType, fileType, placeToAdd) {
  const blob = new Blob(chunks, {
    type: fileType,
  });
  const mediaURL = window.URL.createObjectURL(blob);
  const element = document.createElement(mediaType);
  element.setAttribute("controls", "");
  element.src = mediaURL;
  placeToAdd.insertBefore(element, placeToAdd.firstElementChild);
  mediaRecorder = null;
  chunks = [];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Screen recording is more or less the same thing, the only big differences is that we call &lt;strong&gt;getDisplayMedia&lt;/strong&gt; instead of &lt;strong&gt;getUserMedia&lt;/strong&gt; and when we create the media element we pass the chunks type as fileType.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function recordSCreen() {
  navigator.mediaDevices
    .getDisplayMedia({ mediaSource: "screen"})
    .then((stream) =&amp;gt; {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = (e) =&amp;gt; {
        chunks.push(e.data);
      };
      mediaRecorder.onstop = (e) =&amp;gt; {
        createMediaElement("video", chunks[0].type, videoList);
      };
      mediaRecorder.start();
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we have basically covered the entire thing, as you can see there is not much to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;As always thanks for reading and I hope you learnt something new today, stay safe and healthy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glLGqkXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abi41zpbiej9ql2roslh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glLGqkXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abi41zpbiej9ql2roslh.gif" alt="Goodbye gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>decentralized and encrypted cloud storage</title>
      <author>Patrick</author>
      <pubDate>Fri, 15 Oct 2021 10:30:08 +0000</pubDate>
      <link>https://dev.to/patrickwilson41/decentralized-and-encrypted-cloud-storage-4h03</link>
      <guid>https://dev.to/patrickwilson41/decentralized-and-encrypted-cloud-storage-4h03</guid>
      <description>&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;I've just found out about Internxt, a decentralized cloud storage that is secured and encrypted&lt;/p&gt;

&lt;p&gt;Apparently they are a new project and I really liked it.&lt;br&gt;
Prices are fine (1tb 99€ is not bad) but I got the code BLURWEB to get 2 TB for free for one year.&lt;/p&gt;

&lt;p&gt;You guys should check it!!&lt;/p&gt;

</description>
      <category>encryptation</category>
      <category>beginners</category>
      <category>storage</category>
      <category>opensource</category>
    </item>
    <item>
      <title>DeepfakeHTTP v6.1.1</title>
      <author>Alexander</author>
      <pubDate>Fri, 15 Oct 2021 10:20:55 +0000</pubDate>
      <link>https://dev.to/xnbox1/deepfakehttp-v611-241o</link>
      <guid>https://dev.to/xnbox1/deepfakehttp-v611-241o</guid>
      <description>&lt;p&gt;The new release of &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;DeepfakeHTTP&lt;/a&gt; brings new features.&lt;/p&gt;

&lt;p&gt;One of the cool new features is that templates can now be populated with data from an external &lt;strong&gt;JSON&lt;/strong&gt; file.&lt;br&gt;
Moreover, requests can modify this file dynamically using &lt;strong&gt;JavaScript&lt;/strong&gt; and give a full impression of a real server. At any time you can export a dump with updated JSON and use it in the future.&lt;/p&gt;

&lt;p&gt;In this release (v6.1.1):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New option &lt;code&gt;--db &amp;lt;file|url&amp;gt;&lt;/code&gt; json/yaml/csv memory file to populate templates&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--db-export &amp;lt;file&amp;gt;&lt;/code&gt; export memory to json file&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--db-path &amp;lt;path&amp;gt;&lt;/code&gt; serve live memory file at specified context&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--js &amp;lt;file|url&amp;gt;... &lt;/code&gt; JavaScript file(s) for script engine context&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--no-bak&lt;/code&gt; disable backup old memory file before overwrite&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-XGI&lt;/code&gt; XGI (Extended Gateway Interface) program&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-CGI&lt;/code&gt; CGI (Common Gateway Interface) program&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-JS&lt;/code&gt; JavaScript response handler function&lt;/li&gt;
&lt;li&gt;Default 'Not found' status changed from &lt;code&gt;400&lt;/code&gt; to &lt;code&gt;404&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Cheatsheet page updated.&lt;/li&gt;
&lt;li&gt;Bug fixes&lt;/li&gt;
&lt;li&gt;Minor code enhancements&lt;/li&gt;
&lt;li&gt;Documentation updated&lt;/li&gt;
&lt;li&gt;Release on top of Tommy v10.0.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you to all the people who helped with advice, suggestions, and participation!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>news</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
