<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's New in Codesphere Version 1.11.2</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 28 May 2021 14:17:08 +0000</pubDate>
      <link>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-11-2-29d1</link>
      <guid>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-11-2-29d1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The latest Codesphere updates!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's New?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;App Monitoring&lt;/li&gt;
&lt;li&gt;Code Search&lt;/li&gt;
&lt;li&gt;Added Python support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting today, Codesphere has a new interface to &lt;strong&gt;monitor your app&lt;/strong&gt;! The new feature will allow you to make sure that your app is running as expected, and let you know if you're under or over-estimating your computing needs.&lt;/p&gt;

&lt;p&gt;We're also happy to announce that you can now find a &lt;strong&gt;search bar&lt;/strong&gt; above your file tree, which gives you the ability to search through your codebase. &lt;/p&gt;

&lt;p&gt;In addition, we‚Äôve added &lt;strong&gt;python support&lt;/strong&gt; as we understand that more and more developers are building their web apps in python-based frameworks like Django and Flask.&lt;/p&gt;

&lt;p&gt;To get a better idea of all our new feature releases, take a look at our new video on our &lt;a href="https://link.codesphere.com/I"&gt;YouTube channel&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;At Codesphere, we‚Äôve been hard at work bringing you the next generation cloud platform so that you can spend less time configuring and more time doing what you do best: Actually Coding.&lt;/p&gt;

&lt;p&gt;If there is a feature we haven‚Äôt released yet that you‚Äôd like to see, comment down below! Otherwise, stay tuned for future releases!&lt;/p&gt;

&lt;p&gt;As always, thanks for using Codesphere.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>webdev</category>
      <category>monitoring</category>
      <category>python</category>
    </item>
    <item>
      <title>What is Cookies All about HTTP(Part 2)</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 28 May 2021 14:14:19 +0000</pubDate>
      <link>https://dev.to/nikhil27b/what-is-cookies-all-about-http-part-2-3l0l</link>
      <guid>https://dev.to/nikhil27b/what-is-cookies-all-about-http-part-2-3l0l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#http-cookies"&gt;
  &lt;/a&gt;
  HTTP Cookies
&lt;/h3&gt;

&lt;p&gt;HTTP cookies are known as a web cookie, Internet cookies, browser cookies. in the cookie, we can store a small piece of data that server send to your browser.&lt;/p&gt;

&lt;p&gt;Cookies are useful for Auth cookie tokens, to store in small text files, user preferences, color themes, game scores for many things you can use HTTP cookies. Its very easy to create cookies and delete cookies with JavaScript, PHP, NodeJS &amp;amp; Python etc. &lt;/p&gt;

&lt;p&gt;In cookies, we have many options like Expires, Domain, Path, Secure, Name they are used when we create a cookie or read a cookie.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.Expire: we can use it to set the date the cookie will expire.&lt;br&gt;
2.Secure: a browser only use HTTP. &lt;br&gt;
3.Domain: The domain name of your site.&lt;br&gt;
4.Path: The path to the directory or web page that set the cookie. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-set-cookies-with-js"&gt;
  &lt;/a&gt;
  How to set cookies with JS?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLYPqeyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjgicagn8y6jujkwyn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLYPqeyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjgicagn8y6jujkwyn0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For NodeJS, you need to require HTTP in your code and directly use cookies.&lt;/p&gt;

&lt;p&gt;If you find this useful in a post like and save this post also comments about your thoughts. For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pulumi - IaC in your favorite programming language!</title>
      <author>Techworld with Nana</author>
      <pubDate>Fri, 28 May 2021 14:13:04 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/pulumi-iac-in-your-favorite-programming-language-3i1m</link>
      <guid>https://dev.to/techworld_with_nana/pulumi-iac-in-your-favorite-programming-language-3i1m</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLy7NrYWoggjztwSskGu59O38gL5v0LjUT"&gt;DevOps tool of the month&lt;/a&gt; is a series, where each month I introduce one new useful DevOps tool in 2021 üôåüèº&lt;/p&gt;

&lt;p&gt;For May I chose: &lt;a href="https://www.pulumi.com/"&gt;&lt;strong&gt;Pulumi&lt;/strong&gt;&lt;/a&gt; üéâ - a modern Infrastructure as Code Tool for Developers.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-vijeidcsr3q-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vIjeiDcsR3Q"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pulumi-and-how-its-different-from-other-iac-tools"&gt;
  &lt;/a&gt;
  What is Pulumi and how it's different from other IaC tools üí°
&lt;/h2&gt;

&lt;p&gt;When writing IaC scripts using other tools, you usually have to use a DSL (like HCL in case of Terraform) of that tool or YAML or JSON which is a format that many tools use. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem with YAML or JSON:&lt;/strong&gt; &lt;br&gt;
It's easy to read and easy to define resources you want to create and that is great.&lt;/p&gt;

&lt;p&gt;But what if we need to add some logic in there, like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;conditionals, "create this EC2 instance, if xyz"&lt;/li&gt;
&lt;li&gt;or use loops, like "I want to create 20 EC2 Instances with the same configuration"&lt;/li&gt;
&lt;li&gt;or what about re-using logic? Like, "all 20 instances with this shared config, plus some specific configs"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It gets pretty complex in such formats. So all these logical operations, loops, reusing blocks of code is a natural part of any programming language, right? &lt;/p&gt;

&lt;p&gt;So writing the same infrastructure as code logic in a programming language would obviously make writing more complex code easier and cleaner. And that's exactly what Pulumi did. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pulumi allows you to write infrastructure as code in a programming language&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now which programming language is that? ü§î Well, you can actually choose whichever language you want to use Pulumi. You can write it in Node.js, Python, .net etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w26iiwiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryr4w2aho4xr83hvkxo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w26iiwiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryr4w2aho4xr83hvkxo1.png" alt="Pulumi - choose favorite language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So instead of having to learn a new syntax or DSL or a new language, you can use the language you are most proficient in and use it for writing infrastructure as code. üëç&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-benefits-of-using-a-programming-language-of-your-choice"&gt;
  &lt;/a&gt;
  Main Benefits of using a Programming Language of your choice ü§©
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1) Use the same Programming Tools you know for Infrastructure&lt;/strong&gt;&lt;br&gt;
If you are coding in Python for example, you probably have the most fitting IDE for it, like PyCharm, you have installed all the plugins for that languages, you have configured linters that tell you immediately if you have an error in the code or warning in your code quality. You know all the main libraries you can use in your code etc. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So you know the whole eco-system of that language. And that means you can &lt;strong&gt;use&lt;/strong&gt; all that same eco-system and your &lt;strong&gt;expertise for now writing infrastructure as code&lt;/strong&gt;. And this can make your work much more efficient.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mXZjkna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd3jaiwrxbi8macvelsf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mXZjkna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd3jaiwrxbi8macvelsf.png" alt="Use Programming Expertise for Infrastructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Treat Infrastructure as Code as Application Code&lt;/strong&gt;&lt;br&gt;
Another thing that we see emerging and becoming a standard is &lt;strong&gt;treating our infrastructure as code exactly the same way as our application code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQ9zfNdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r962ers9e2jt6cfwn4c8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQ9zfNdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r962ers9e2jt6cfwn4c8.png" alt="One Pipeline for Everyone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That includes e.g. testing the code. Having unit tests, integration tests etc. So with YAML and JSON format or DSL, like HCL that Terraform uses, it's pretty difficult to write tests for these scripts. &lt;/p&gt;

&lt;p&gt;With Pulumi obviously you have the advantage of simply writing tests for you IaC as for your application code, using the same test libraries, same language, same editor etc. üôåüèº&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pulumi-works-in-practice"&gt;
  &lt;/a&gt;
  How Pulumi works in Practice üë©üèª‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;Check out the video to see how Pulumi works in practice. I will show you how to write a simple Pulumi project to first create an S3 bucket in an AWS account and then a more realistic example of provisioning an EKS cluster:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtr48z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj9zjuaz9rnth1vloftv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtr48z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj9zjuaz9rnth1vloftv.png" alt="Pulumi Demo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;More awesome tools coming up next on this series, so stay tuned for it! üé¨ üòä&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üòç for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>pulumi</category>
      <category>devops</category>
      <category>iac</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>üöÄ10 Trending projects on GitHub for web developers - 28th May 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 28 May 2021 14:07:27 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-28th-may-2021-2411</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-28th-may-2021-2411</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-comlink"&gt;
  &lt;/a&gt;
  1. Comlink
&lt;/h3&gt;

&lt;p&gt;Comlink makes WebWorkers enjoyable. Comlink is a tiny library (1.1kB), that removes the mental barrier of thinking about postMessage and hides the fact that you are working with workers.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/GoogleChromeLabs"&gt;
        GoogleChromeLabs
      &lt;/a&gt; / &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;
        comlink
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Comlink makes WebWorkers enjoyable.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Comlink&lt;/h1&gt;
&lt;p&gt;Comlink makes &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" rel="nofollow"&gt;WebWorkers&lt;/a&gt; enjoyable. Comlink is a &lt;strong&gt;tiny library (1.1kB)&lt;/strong&gt;, that removes the mental barrier of thinking about &lt;code&gt;postMessage&lt;/code&gt; and hides the fact that you are working with workers.&lt;/p&gt;
&lt;p&gt;At a more abstract level it is an RPC implementation for &lt;code&gt;postMessage&lt;/code&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" rel="nofollow"&gt;ES6 Proxies&lt;/a&gt;.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ npm install --save comlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/234957/54164510-cdab2d80-4454-11e9-92d0-7356aa6c5746.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5AND5Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/234957/54164510-cdab2d80-4454-11e9-92d0-7356aa6c5746.png" alt="Comlink in action"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Browsers support &amp;amp; bundle size&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2b5ac9008c756586e4b3a81b353c7f418ed2d682138bdf2daa5dad927d193384/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4368726f6d652d35362b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/2b5ac9008c756586e4b3a81b353c7f418ed2d682138bdf2daa5dad927d193384/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4368726f6d652d35362b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Chrome 56+"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3569d071249b186d1e2e98f769d1b54804f1831348473cfcd2f3552843701722/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f456467652d31352b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/3569d071249b186d1e2e98f769d1b54804f1831348473cfcd2f3552843701722/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f456467652d31352b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Edge 15+"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/bc5c4e8d51314885275132fd2c4d1c069fbeaba3e7191d28c53649d16e110213/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f46697265666f782d35322b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/bc5c4e8d51314885275132fd2c4d1c069fbeaba3e7191d28c53649d16e110213/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f46697265666f782d35322b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Firefox 52+"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/97af1095338c0f506af508370ec25906f6b40d887cc03639e097f8899d7bb4dc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f706572612d34332b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/97af1095338c0f506af508370ec25906f6b40d887cc03639e097f8899d7bb4dc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f706572612d34332b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Opera 43+"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e4655ea7b05e0cbb29ab1c3c88c2d9049f7968f89291331a5a30e486e9a4cac2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361666172692d31302e312b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/e4655ea7b05e0cbb29ab1c3c88c2d9049f7968f89291331a5a30e486e9a4cac2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361666172692d31302e312b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Safari 10.1+"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c8c6b46d7716aef4978ecc35a105a6176ccc5a59b79ca0b1ba844b66eaa285f0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53616d73756e675f496e7465726e65742d362e302b2d677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/c8c6b46d7716aef4978ecc35a105a6176ccc5a59b79ca0b1ba844b66eaa285f0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53616d73756e675f496e7465726e65742d362e302b2d677265656e2e7376673f7374796c653d666c61742d737175617265" alt="Samsung Internet 6.0+"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Browsers without &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" rel="nofollow"&gt;ES6 Proxy&lt;/a&gt; support can use the &lt;a href="https://github.com/GoogleChrome/proxy-polyfill"&gt;proxy-polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;: ~2.5k, ~1.2k gzip‚Äôd, ~1.1k brotli‚Äôd&lt;/p&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;On mobile phones, and especially on low-end mobile phones, it is important to keep the main thread as idle as possible so it can respond to user interactions quickly and provide a jank-free experience. &lt;strong&gt;The UI thread ought to be for UI work only&lt;/strong&gt;. WebWorkers are a web API that allow you to run code in a separate thread. To communicate with another thread, WebWorkers offer the &lt;code&gt;postMessage&lt;/code&gt; API. You can send JavaScript objects‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/GoogleChromeLabs/comlink"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-notion-sdk-for-javascript"&gt;
  &lt;/a&gt;
  2. Notion SDK for JavaScript
&lt;/h3&gt;

&lt;p&gt;Official Notion JavaScript Client. A simple and easy to use client for the Notion API&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/makenotion"&gt;
        makenotion
      &lt;/a&gt; / &lt;a href="https://github.com/makenotion/notion-sdk-js"&gt;
        notion-sdk-js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Official Notion JavaScript Client
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
    &lt;h1&gt;
Notion SDK for JavaScript&lt;/h1&gt;
    &lt;p&gt;
        &lt;b&gt;A simple and easy to use client for the &lt;a href="https://developers.notion.com" rel="nofollow"&gt;Notion API&lt;/a&gt;&lt;/b&gt;
    &lt;/p&gt;
    &lt;br&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/makenotion/notion-sdk-js/actions/workflows/ci.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hKQ6rRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/makenotion/notion-sdk-js/actions/workflows/ci.yml/badge.svg" alt="Build status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/notion-api-js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4ac83c30fe3fecb1bf50fc69548837d1ade41ce2ec69df29bde4ce5c1b1d1ec4/68747470733a2f2f62616467652e667572792e696f2f6a732f2534306e6f74696f6e6871253246636c69656e742e737667" alt="npm version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install @notionhq/client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Before getting started, &lt;a href="https://www.notion.com/my-integrations" rel="nofollow"&gt;create an integration&lt;/a&gt; and find the token.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.notion.com/docs/authorization" rel="nofollow"&gt;‚Üí Learn more about authorization&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Import and initialize a client using an &lt;strong&gt;integration token&lt;/strong&gt; or an OAuth &lt;strong&gt;access token&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; Client &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"@notionhq/client"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-c"&gt;// Initializing a client&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;notion&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Client&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;auth&lt;/span&gt;: &lt;span class="pl-s1"&gt;process&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;env&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;NOTION_TOKEN&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Make a request to any Notion API endpoint.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See the complete list of endpoints in the &lt;a href="https://developers.notion.com/reference" rel="nofollow"&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-k"&gt;async&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;listUsersResponse&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-s1"&gt;notion&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;users&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;list&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Each method returns a &lt;code&gt;Promise&lt;/code&gt; which resolves the response.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;listUsersResponse&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-c"&gt;// {&lt;/span&gt;
&lt;span class="pl-c"&gt;//   results: [&lt;/span&gt;
&lt;span class="pl-c"&gt;//     {&lt;/span&gt;
&lt;span class="pl-c"&gt;//       object: 'user',&lt;/span&gt;
&lt;span class="pl-c"&gt;//       id: 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/makenotion/notion-sdk-js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-capacitor"&gt;
  &lt;/a&gt;
  3. Capacitor
&lt;/h3&gt;

&lt;p&gt;Build cross-platform Native Progressive Web Apps for iOS, Android, and the Web&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ionic-team"&gt;
        ionic-team
      &lt;/a&gt; / &lt;a href="https://github.com/ionic-team/capacitor"&gt;
        capacitor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Build cross-platform Native Progressive Web Apps for iOS, Android, and the Web ‚ö°Ô∏è
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/236501/105104854-e5e42e80-5a67-11eb-8cb8-46fccb079062.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo4cYwor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/236501/105104854-e5e42e80-5a67-11eb-8cb8-46fccb079062.png" width="560"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  ‚ö°Ô∏è Cross-platform apps with JavaScript and the Web ‚ö°Ô∏è
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/ionic-team/capacitor/actions?query=workflow%3ACI"&gt;&lt;img src="https://camo.githubusercontent.com/80a89c1088e45d3fa4c84258c3b90e3da15d1f9d3cd0d4d2e9930d303802d20a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f696f6e69632d7465616d2f636170616369746f722f43493f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/@capacitor/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee4248f7822f6dfcb2257859a2c6e07361e82e44d6ace083738cdb0316840cba/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f40636170616369746f722f636f72653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/@capacitor/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/34618a581b834ec2e254fea9ebb00ad879cd5d40d3696d49cd703b39853001d9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40636170616369746f722f636f72653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/@capacitor/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ecf120ab0c8806383b975e32a3109c2f95a2ec1011ab47e2167a503855517a1/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f40636170616369746f722f636f72653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://capacitorjs.com/docs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a1b82b4dd666f8e1bf46aebf14940e392b8f002bcd622dcba763e1699aa8e5c8/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d646f6373266d6573736167653d676574636170616369746f722e636f6d26636f6c6f723d626c7565267374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://twitter.com/capacitorjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6cd3e8719a17593e5353e632a760d5ffc60c4d45bc3b577e0feca005d565ec0/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f636170616369746f726a73"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;Capacitor is a cross-platform API and code execution layer that makes it easy to call Native SDKs from web code and to write custom native plugins that your app may need. Additionally, Capacitor provides first-class Progressive Web App support so you can write one app and deploy it to the app stores &lt;em&gt;and&lt;/em&gt; the mobile web.&lt;/p&gt;

&lt;p&gt;Capacitor comes with a Plugin API for building native plugins. Plugins can be written inside Capacitor apps or packaged into an npm dependency for community use. Plugin authors are encouraged to use Swift to develop plugins in iOS and Kotlin (or Java) in Android.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
Capacitor 3.0 development has begun! ‚ú® üöÄ ‚≠ê
&lt;/h3&gt;
&lt;p&gt;Interested in following Capacitor 3 development? We'd love your feedback! Use the &lt;a href="https://github.com/ionic-team/capacitor/issues/3133"&gt;Capacitor 3 planning issue&lt;/a&gt; as a starting point. &lt;a href="https://github.com/ionic-team/capacitor/discussions"&gt;Open a discussion&lt;/a&gt; if you have questions or suggestions.&lt;/p&gt;
&lt;p&gt;We'd love to hear‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ionic-team/capacitor"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-daisyui"&gt;
  &lt;/a&gt;
  4. daisyUI
&lt;/h3&gt;

&lt;p&gt;Tailwind CSS Components. Adds component classes like btn, card and more to Tailwind CSS&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/saadeghi"&gt;
        saadeghi
      &lt;/a&gt; / &lt;a href="https://github.com/saadeghi/daisyui"&gt;
        daisyui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚ÄÉTailwind Components
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://daisyui.com/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfkeQZVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/saadeghi/files/main/daisyui/logo-4.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tailwind CSS Components&lt;/strong&gt;&lt;br&gt;
Adds component classes like &lt;code&gt;btn&lt;/code&gt;, &lt;code&gt;card&lt;/code&gt; and more to Tailwind CSS&lt;/p&gt;
&lt;p&gt;[ &lt;a href="https://daisyui.com/" rel="nofollow"&gt;See all components&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?text=DaisyUI%20%0D%0AUI%20Components%20for%20Tailwind%20CSS%20%0D%0Ahttps://github.com/saadeghi/daisyui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/29fac89587877ec8a3a32105190daa6a3af3dedb188155969bc83efc0745bcb7/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c3f7374796c653d736f6369616c2675726c3d68747470732533412532462532466769746875622e636f6d253246736161646567686925324664616973797569" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://daisyui.com/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JR6AuU_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/saadeghi/files/main/daisyui/card-3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
DaisyUI&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/saadeghi/daisyui/actions"&gt;&lt;img src="https://camo.githubusercontent.com/3504ee2b680b251161a01f7375a976dc759b0bcdd1b99b997615060dabd0999d/68747470733a2f2f62616467656e2e6e65742f6769746875622f636865636b732f73616164656768692f646169737975693f6c6162656c3d6275696c64" alt=""&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/daisyui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/15fbb89ac7479d8557fed67e5e7bc60b74daa577e741142a6ae7fb4190d4a32f/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f646169737975693f6c6162656c3d76657273696f6e26636f6c6f723d707572706c65" alt=""&gt;&lt;/a&gt; &lt;a href="https://daisyui.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9c04579dcda204c68a51d63a501053f358f6d707b344d96950ac878410e0d3b3/68747470733a2f2f62616467656e2e6e65742f62616467652f636f6d706f6e656e747325323061646465642f33352f707572706c65" alt=""&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=daisyui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/934d91cf9d1c868464506437f481f1b8caece33878886cd45100000cfb70997c/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f646169737975693f6c6162656c3d696e7374616c6c25323073697a6526636f6c6f723d707572706c65" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/daisyui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f15017255c1ec3f292925732ef70d46e76c251db0fd700765cd9bfd3cc45ac98/68747470733a2f2f62616467656e2e6e65742f6e706d2f64742f646169737975693f69636f6e3d6e706d26636f6c6f723d707572706c65" alt=""&gt;&lt;/a&gt; &lt;a href="https://github.com/saadeghi/daisyui"&gt;&lt;img src="https://camo.githubusercontent.com/bb93f08cade5dfa97b307135e47db775dbb896d1d4bc303ff3b4976dcaba571d/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6173742d636f6d6d69742f73616164656768692f646169737975693f69636f6e3d67697468756226636f6c6f723d707572706c65" alt=""&gt;&lt;/a&gt; &lt;a href="https://github.com/saadeghi/daisyui/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/eea24b8e2419fcb676dd49f4a160b3f8f4a5f8b319909a2cde4f3efc37ee912b/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6963656e73652f73616164656768692f646169737975693f636f6c6f723d707572706c65" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
üëâ [ &lt;a href="https://daisyui.com/" rel="nofollow"&gt;See all components&lt;/a&gt; ]&lt;/li&gt;
&lt;li&gt;
üìò Documents: &lt;a href="https://daisyui.com/" rel="nofollow"&gt;daisyui.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üé≤ Try it online: &lt;a href="https://play.tailwindcss.com/5du2H2Kyvq" rel="nofollow"&gt;Tailwind Play&lt;/a&gt; | &lt;a href="https://codepen.io/saadeghi/pen/gOwWKvv" rel="nofollow"&gt;Codepen&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üì¶ Source: &lt;a href="https://github.com/saadeghi/daisyui"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.npmjs.com/package/daisyui" rel="nofollow"&gt;NPM&lt;/a&gt; | &lt;a href="https://unpkg.com/browse/daisyui/" rel="nofollow"&gt;Unpkg&lt;/a&gt; | &lt;a href="https://www.jsdelivr.com/package/npm/daisyui" rel="nofollow"&gt;JSdeliver&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
üåº Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tailwind CSS plugin&lt;/strong&gt;
DaisyUI is a Tailwind CSS plugin. Install it, add it to your &lt;code&gt;tailwind.config.js&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Component classes&lt;/strong&gt;
Adds component classes to Tailwind. Classes like &lt;code&gt;btn&lt;/code&gt;, &lt;code&gt;card&lt;/code&gt;,‚Ä¶ So you will end up with a cleaner HTML.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Semantic color names&lt;/strong&gt;
Adds color names like &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;secondary&lt;/code&gt;, &lt;code&gt;accent&lt;/code&gt;,‚Ä¶.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customizable&lt;/strong&gt;
You can customize the design of components with Tailwind utility classes and CSS variables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Themeable&lt;/strong&gt;
Add multiple themes and customize colors. You can even set a theme for a specific section of your page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RTL supported&lt;/strong&gt;
Enable &lt;code&gt;rtl&lt;/code&gt; config for right to left layouts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pure CSS&lt;/strong&gt;
No script‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/saadeghi/daisyui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-notistack"&gt;
  &lt;/a&gt;
  5. Notistack
&lt;/h3&gt;

&lt;p&gt;Highly customizable notification snackbars (toasts) that can be stacked on top of each other&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamhosseindhv"&gt;
        iamhosseindhv
      &lt;/a&gt; / &lt;a href="https://github.com/iamhosseindhv/notistack"&gt;
        notistack
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Highly customizable notification snackbars (toasts) that can be stacked on top of each other
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://iamhosseindhv.com/" rel="nofollow"&gt;&lt;img width="756" src="https://camo.githubusercontent.com/a320de56f9816818e980df675a1d2b2b32c94e9eaafc5eba5c0206cfeebcd518/68747470733a2f2f69616d686f737365696e6468762e636f6d2f7374617469632f70726f6a656374732f6e6f7469737461636b2d62616e6e65722e706e67" alt="notistack logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://iamhosseindhv.com/notistack" rel="nofollow"&gt;&lt;strong&gt;Notistack&lt;/strong&gt;&lt;/a&gt; is a notification library which makes it extremely easy to display notifications on your web apps. It is highly customizable and enables you to stack snackbars/toasts on top of one another
&lt;br&gt;
&lt;strong&gt;Visit &lt;a href="https://iamhosseindhv.com/notistack/demos" rel="nofollow"&gt;documentation website&lt;/a&gt; for demos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/notistack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/122ab235a35ffa8baf922c0e466f75263d763b65c2d1f47d73266222ac0ba747/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6e6f7469737461636b2e7376673f6c6162656c3d76657273696f6e" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/notistack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0556473afe6fa6f6406e2d5da49bd53e111f7f7969f7eebdffcdae9a1dc53fce/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f6e6f7469737461636b2e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/notistack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3f65ca3764c4fb7f0e5c7fe54170fa99425b3852bbcb09ca4db750ce6be1fe67/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f6e6f7469737461636b2e737667" alt="package license"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stacking behaviour&lt;/th&gt;
&lt;th&gt;Dismiss oldest when reached maxSnack (3 here)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/44e563d6ac25f8b9ee63d9be0a4a47c3810156ad6fabeb5a646116a19c599ff9/68747470733a2f2f692e696d6775722e636f6d2f4d74696a76414b2e676966"&gt;&lt;img width="400" src="https://camo.githubusercontent.com/44e563d6ac25f8b9ee63d9be0a4a47c3810156ad6fabeb5a646116a19c599ff9/68747470733a2f2f692e696d6775722e636f6d2f4d74696a76414b2e676966"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4c9a60c00f7a73326d22c8a6354dd7dcb03ab9ae30e23b77548bf535dc5e8c0/68747470733a2f2f692e696d6775722e636f6d2f7572583437576e2e676966"&gt;&lt;img width="400" src="https://camo.githubusercontent.com/f4c9a60c00f7a73326d22c8a6354dd7dcb03ab9ae30e23b77548bf535dc5e8c0/68747470733a2f2f692e696d6775722e636f6d2f7572583437576e2e676966"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamhosseindhv/notistack/master/#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamhosseindhv/notistack/master/#online-demo"&gt;Online demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iamhosseindhv.com/notistack/api" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamhosseindhv/notistack/master/#redux-and-mobx-support"&gt;Redux / Mobx support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;Use your preferred package manager:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install notistack
yarn add notistack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
How to use&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1:&lt;/strong&gt; Wrap your app inside a &lt;code&gt;SnackbarProvider&lt;/code&gt; component: (see &lt;a href="https://iamhosseindhv.com/notistack/api" rel="nofollow"&gt;docs&lt;/a&gt; for a full list of available props)
&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If you're using material-ui &lt;code&gt;ThemeProvider&lt;/code&gt;, make sure &lt;code&gt;SnackbarProvider&lt;/code&gt; is a child of it.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;SnackbarProvider&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'notistack'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;SnackbarProvider&lt;/span&gt; &lt;span class="pl-c1"&gt;maxSnack&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;SnackbarProvider&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2:&lt;/strong&gt; Export any component that needs to send notification using &lt;code&gt;withSnackbar&lt;/code&gt;. By doing this, you'll have access to‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iamhosseindhv/notistack"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-dragula"&gt;
  &lt;/a&gt;
  6. Dragula
&lt;/h3&gt;

&lt;p&gt;Drag and drop so simple it hurts&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bevacqua"&gt;
        bevacqua
      &lt;/a&gt; / &lt;a href="https://github.com/bevacqua/dragula"&gt;
        dragula
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üëå Drag and drop so simple it hurts
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="markdown"&gt;
&lt;p&gt;&lt;a href="http://bevacqua.github.io/dragula/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKglSyw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/bevacqua/dragula/raw/master/resources/logo.png" alt="logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/bevacqua/dragula" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a1bb90f0b8140d5fa8b6f243fcf4d610f1ee14141aa42449f7df755f1b07201/68747470733a2f2f7472617669732d63692e6f72672f62657661637175612f64726167756c612e737667" alt="Travis CI"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/bevacqua/dragula" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e2920caf13c763080a4b97b7e96377604331b9eea637c320008d9e97cfe0130b/68747470733a2f2f64617669642d646d2e6f72672f62657661637175612f64726167756c612e737667" alt="Dependencies"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/bevacqua/dragula#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/824fa726bfbfc72fd2f19fd72f9285727b45f260db63ba8ff959dc9b7322a003/68747470733a2f2f64617669642d646d2e6f72672f62657661637175612f64726167756c612f6465762d7374617475732e737667" alt="Dev Dependencies"&gt;&lt;/a&gt;
&lt;a href="https://patreon.com/bevacqua" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb5a8f85d80eeab6d06596b6baf5837144f57a30306c72d77ca86b33c465b2b2/68747470733a2f2f7261776769742e636f6d2f62657661637175612f64726167756c612f6d61737465722f7265736f75726365732f70617472656f6e2e737667" alt="Patreon"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Drag and drop so simple it hurts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Browser support includes every sane browser and &lt;strong&gt;IE7+&lt;/strong&gt;. &lt;em&gt;(Granted you polyfill the functional &lt;code&gt;Array&lt;/code&gt; methods in ES5)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Framework support includes vanilla JavaScript, Angular, and React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Official &lt;a href="https://github.com/bevacqua/angularjs-dragula"&gt;Angular bridge&lt;/a&gt; for &lt;code&gt;dragula&lt;/code&gt; &lt;a href="http://bevacqua.github.io/angularjs-dragula/" rel="nofollow"&gt;&lt;em&gt;(demo)&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Official &lt;a href="https://github.com/valor-software/ng2-dragula"&gt;Angular 2 bridge&lt;/a&gt; for &lt;code&gt;dragula&lt;/code&gt; &lt;a href="http://valor-software.com/ng2-dragula/index.html" rel="nofollow"&gt;&lt;em&gt;(demo)&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Official &lt;a href="https://github.com/bevacqua/react-dragula"&gt;React bridge&lt;/a&gt; for &lt;code&gt;dragula&lt;/code&gt; &lt;a href="http://bevacqua.github.io/react-dragula/" rel="nofollow"&gt;&lt;em&gt;(demo)&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Demo&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://bevacqua.github.io/dragula/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_WUqfU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/bevacqua/dragula/raw/master/resources/demo.png" alt="demo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try out the &lt;a href="http://bevacqua.github.io/dragula/" rel="nofollow"&gt;demo&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
Inspiration&lt;/h1&gt;

&lt;p&gt;Have you ever wanted a drag and drop library that just works? That doesn't just depend on bloated frameworks, that has great support? That actually understands where to place the elements when they are dropped? That doesn't need you to do a zillion things to get it to work? Well, so did I!&lt;/p&gt;

&lt;h1&gt;
Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Super easy to set up&lt;/li&gt;
&lt;li&gt;No bloated dependencies&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Figures out sort order&lt;/strong&gt; on its own&lt;/li&gt;
&lt;li&gt;A shadow where the item would be dropped offers &lt;strong&gt;visual feedback&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Touch events!&lt;/li&gt;
&lt;li&gt;Seamlessly handles clicks &lt;em&gt;without any configuration&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Install&lt;/h1&gt;

&lt;p&gt;You can‚Ä¶&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bevacqua/dragula"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#7-simplebar"&gt;
  &lt;/a&gt;
  7. SimpleBar
&lt;/h3&gt;

&lt;p&gt;SimpleBar does only one thing: replace the browser's default scrollbar with a custom CSS-styled one without losing performances.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Grsmto"&gt;
        Grsmto
      &lt;/a&gt; / &lt;a href="https://github.com/Grsmto/simplebar"&gt;
        simplebar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Custom scrollbars vanilla javascript library with native scroll, done simple, lightweight, easy to use and cross-browser.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/527559/66231995-3cd0c380-e6be-11e9-8782-c50c834aac93.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bBG_1CY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/527559/66231995-3cd0c380-e6be-11e9-8782-c50c834aac93.png" width="520" alt="SimpleBar"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
  &lt;a href="https://npmjs.org/package/simplebar" rel="nofollow"&gt;&lt;img alt="NPM version" src="https://camo.githubusercontent.com/d3aec392b24bea2050f038410c00e77aa7bd0ba43999ce0e813e5cec662b421e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f73696d706c656261722e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://npmjs.org/package/simplebar" rel="nofollow"&gt;&lt;img alt="NPM downloads" src="https://camo.githubusercontent.com/14db5165d61fd904e1ac406d7e4dc6974c6b159bdbdb2ef1d8f6f25b4ad5e02d/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f73696d706c656261722e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.org/grsmto/simplebar" rel="nofollow"&gt;&lt;img alt="Build Status" src="https://camo.githubusercontent.com/4982e79a58d18ee11567188b89ede140751c6379a7719efc2fe5c3663497ebc5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6772736d746f2f73696d706c656261722f6d61737465722e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;a href="https://automate.browserstack.com/public-build/amtTU2pEa1FjNmpabTBCbUh2b3FpbFZQaXhNd1Q3bEg0L1dlSzd2SGN2Zz0tLWpjK1ZwWWRNWnVGQWI4OXphWGRISEE9PQ==--39b14340be576db5bd01b020627cd17414003bfb%" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9a0d1030c0fc732efb1625e019a45f0440970634104a1af41614c7e282afd269/68747470733a2f2f6175746f6d6174652e62726f77736572737461636b2e636f6d2f62616467652e7376673f62616467655f6b65793d616d7454553270456131466a4e6d706162544243625568326233467062465a516158684e64315133624567304c31646c537a643253474e325a7a30744c57706a4b315a775757524e576e5647515749344f587068574752495345453950513d3d2d2d3339623134333430626535373664623562643031623032303632376364313734313430303362666225"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
SimpleBar does only one thing: replace the browser's default scrollbar with a custom CSS-styled one without losing performances&lt;br&gt;
Unlike some popular plugins, SimpleBar doesn't mimic scroll with Javascript, causing janks and strange scrolling behaviours&lt;br&gt;
You keep the awesomeness of native scrolling...with a custom scrollbar&lt;/p&gt;

&lt;p&gt;SimpleBar &lt;strong&gt;does NOT implement a custom scroll behaviour&lt;/strong&gt;. It keeps the &lt;strong&gt;native&lt;/strong&gt; &lt;code&gt;overflow: auto&lt;/code&gt; scroll and &lt;strong&gt;only&lt;/strong&gt; replace the scrollbar visual appearance.&lt;/p&gt;

&lt;h4&gt;
Design it as you want&lt;/h4&gt;
&lt;p&gt;SimpleBar uses pure CSS to style the scrollbar. You can easily customize it as you want! Or even have multiple style on the same page...or just keep the default style ("Mac OS" scrollbar style).&lt;/p&gt;
&lt;h4&gt;
Lightweight and performant&lt;/h4&gt;
&lt;p&gt;Only 6kb minified. SimpleBar doesn't use Javascript to handle scrolling. You keep the performances/behaviours of the native scroll.&lt;/p&gt;
&lt;h4&gt;
Supported everywhere&lt;/h4&gt;
&lt;p&gt;SimpleBar has been tested on the following browsers: Chrome, Firefox, Safari, Edge, IE11.&lt;/p&gt;
&lt;h3&gt;
Getting started&lt;/h3&gt;
&lt;p&gt;The easiest way to use SimpleBar‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Grsmto/simplebar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-govukreact"&gt;
  &lt;/a&gt;
  8. govuk-react
&lt;/h3&gt;

&lt;p&gt;An implementation of the GOV.UK Design System in React using CSSinJS&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/govuk-react"&gt;
        govuk-react
      &lt;/a&gt; / &lt;a href="https://github.com/govuk-react/govuk-react"&gt;
        govuk-react
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An implementation of the GOV.UK Design System in React using CSSinJS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
govuk-react&lt;/h1&gt;
&lt;p&gt;An implementation of the &lt;a href="https://govuk-design-system-production.cloudapps.digital" rel="nofollow"&gt;GOV.UK Design System&lt;/a&gt; in &lt;a href="https://reactjs.org" rel="nofollow"&gt;React&lt;/a&gt; using &lt;a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660" rel="nofollow"&gt;CSSinJS&lt;/a&gt; using Object notation (with &lt;a href="https://www.styled-components.com/docs/advanced#style-objects" rel="nofollow"&gt;styled-components&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/govuk-react/govuk-react" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/db96a2eaccb11b848b4ff367b3ff2e387a2ddacbe6e8d4de65d8562681944b8a/68747470733a2f2f636f6465636f762e696f2f67682f676f76756b2d72656163742f676f76756b2d72656163742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://spectrum.chat/govuk-react" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3aaae7abc6655c1485b607bd83b732aec0d7316f84511c9c7471c4641d4679f2/68747470733a2f2f77697468737065637472756d2e6769746875622e696f2f62616467652f62616467652e737667" alt="Join the community on Spectrum"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We aim to track the following projects (in priority order) as to which components to implement and how they should look/behave. Where possible we are using the existing CSS as a guide. When we need to modify to suit custom markup, we aim to provide a comment in our code as to why this was done.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alphagov/govuk-frontend"&gt;GOV.UK Frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://design-system.service.gov.uk" rel="nofollow"&gt;GOV.UK Design System&lt;/a&gt; (&lt;a href="https://github.com/alphagov/govuk-design-system"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alphagov/govuk-design-system-backlog"&gt;GOV.UK Design System Backlog&lt;/a&gt; (where there are open tickets in the backlog that reference patterns/components in existing govuk sites)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alphagov/govuk_elements"&gt;GOV.UK/elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://govuk-publishing-components.herokuapp.com/component-guide" rel="nofollow"&gt;GOV.UK Publishing Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Any other established govuk pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install govuk-react styled-components --save&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Button&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'govuk-react'&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;MyComponent&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;title&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;title&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Button&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/govuk-react/govuk-react"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-htmx"&gt;
  &lt;/a&gt;
  9. htmx
&lt;/h3&gt;

&lt;p&gt;htmx allows you to access AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bigskysoftware"&gt;
        bigskysoftware
      &lt;/a&gt; / &lt;a href="https://github.com/bigskysoftware/htmx"&gt;
        htmx
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      &amp;lt;/&amp;gt; htmx - high power tools for HTML
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://htmx.org" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWS3T8B1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bigskysoftware/htmx/master/www/img/htmx_logo.1.png" alt="&amp;lt;/&amp;gt; htmx" title="high power tools for HTML"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;high power tools for HTML&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://htmx.org/discord" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e8a1cc18e105a260610b9a3aae188d24da3e369ed8cf2cdfa5fe99268f7044bb/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f373235373839363939353237393333393532" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://app.netlify.com/sites/htmx/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/27e33042040a920b02b4ae2624ad08f02a01f35f0cc16b93b83d2b816f4141ca/68747470733a2f2f696d672e736869656c64732e696f2f6e65746c6966792f64626133666338352d643963392d343736612d613335612d653532613633326365663738" alt="Netlify"&gt;&lt;/a&gt;
&lt;a href="https://bundlephobia.com/result?p=htmx.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e3fc614061d34d8d7289f4fd93744e76fd024828d06de3668b8c785480ad413e/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f646570656e64656e63792d636f756e742f68746d782e6f7267" alt="Bundlephobia"&gt;&lt;/a&gt;
&lt;a href="https://bundlephobia.com/result?p=htmx.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/04c42e3c2427879b9827f72d872350310bbe4864b8e6242a88a1b52bac07cef7/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f68746d782e6f7267" alt="Bundlephobia"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
introduction&lt;/h2&gt;
&lt;p&gt;htmx allows you to access  &lt;a href="https://htmx.org/docs#ajax" rel="nofollow"&gt;AJAX&lt;/a&gt;, &lt;a href="https://htmx.org/docs#css_transitions" rel="nofollow"&gt;CSS Transitions&lt;/a&gt;
&lt;a href="https://htmx.org/docs#websockets" rel="nofollow"&gt;WebSockets&lt;/a&gt; and &lt;a href="https://htmx.org/docs#sse" rel="nofollow"&gt;Server Sent Events&lt;/a&gt;
directly in HTML, using &lt;a href="https://htmx.org/reference#attributes" rel="nofollow"&gt;attributes&lt;/a&gt;, so you can build
&lt;a href="https://htmx.org/examples" rel="nofollow"&gt;modern user interfaces&lt;/a&gt; with the &lt;a href="https://en.wikipedia.org/wiki/HATEOAS" rel="nofollow"&gt;simplicity&lt;/a&gt; and
&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" rel="nofollow"&gt;power&lt;/a&gt; of hypertext&lt;/p&gt;
&lt;p&gt;htmx is small (&lt;a href="https://unpkg.com/htmx.org/dist/" rel="nofollow"&gt;~10k min.gz'd&lt;/a&gt;)
&lt;a href="https://github.com/bigskysoftware/htmx/blob/master/package.json"&gt;dependency-free&lt;/a&gt;
&lt;a href="https://htmx.org/extensions" rel="nofollow"&gt;extendable&lt;/a&gt; &amp;amp;
IE11 compatible&lt;/p&gt;
&lt;h2&gt;
motivation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why should only &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; be able to make HTTP requests?&lt;/li&gt;
&lt;li&gt;Why should only &lt;code&gt;click&lt;/code&gt; &amp;amp; &lt;code&gt;submit&lt;/code&gt; events trigger them?&lt;/li&gt;
&lt;li&gt;Why should only GET &amp;amp; POST be available?&lt;/li&gt;
&lt;li&gt;Why should you only be able to replace the &lt;em&gt;entire&lt;/em&gt; screen?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By removing these arbitrary constraints htmx completes HTML as a
&lt;a href="https://en.wikipedia.org/wiki/Hypertext" rel="nofollow"&gt;hypertext&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
quick start&lt;/h2&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;  &lt;span class="pl-c"&gt;&amp;lt;!-- Load from unpkg --&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/htmx.org@1.4.0&lt;/span&gt;" &lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&amp;lt;!-- have a button POST a click via AJAX --&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt; &lt;span class="pl-c1"&gt;hx-post&lt;/span&gt;="&lt;span class="pl-s"&gt;/clicked&lt;/span&gt;" &lt;span class="pl-c1"&gt;hx-swap&lt;/span&gt;="&lt;span class="pl-s"&gt;outerHTML&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
    Click Me
  &lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bigskysoftware/htmx"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-vuestic-ui"&gt;
  &lt;/a&gt;
  10. Vuestic UI
&lt;/h3&gt;

&lt;p&gt;Free and Open Source UI Library for Vue 3&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/epicmaxco"&gt;
        epicmaxco
      &lt;/a&gt; / &lt;a href="https://github.com/epicmaxco/vuestic-ui"&gt;
        vuestic-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Free and Open Source UI Library for Vue 3 ü§ò
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
    &lt;a href="https://vuestic.dev" rel="nofollow"&gt;
        &lt;img alt="Vuestic UI Logo" width="500" src="https://res.cloudinary.com/practicaldev/image/fetch/s--05zg_iss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/epicmaxco/vuestic-ui/develop/./packages/ui/src/assets/vuestic-ui-logo.png"&gt;
    &lt;/a&gt;
        &lt;br&gt;
    Vue.js 3.0 UI Library
    &lt;br&gt;
    Developed by &lt;a href="https://epicmax.co" rel="nofollow"&gt;Epicmax&lt;/a&gt;. Designed by
    &lt;a href="https://xxsavitski.com/" rel="nofollow"&gt;Vasili Savitski&lt;/a&gt;
    &lt;br&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href="https://app.circleci.com/pipelines/github/epicmaxco/vuestic-ui" rel="nofollow"&gt;
      &lt;img src="https://camo.githubusercontent.com/996783b1ec3cd470b5b7294407929329dcb6f79ce4210724ef5a137024625413/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f657069636d6178636f2f767565737469632d75692f646576656c6f70" alt="CI badge"&gt;
    &lt;/a&gt;
    &lt;a href="https://github.com/epicmaxco/vuestic-ui/blob/develop/LICENSE.MD"&gt;
      &lt;img src="https://camo.githubusercontent.com/593cd9bc275e0f79b962c1419c99a532c34c6d1a50cdf7727ddf3fd450b3c75e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f767565737469632d75692e737667" alt="License"&gt;
    &lt;/a&gt;
    &lt;a href="https://www.npmjs.com/package/vuestic-ui" rel="nofollow"&gt;
      &lt;img src="https://camo.githubusercontent.com/310781ddb643fb108035db5a1e25a42e7e9ff240ad5dca5248a97da50bbcdf35/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f657069636d6178636f2f767565737469632d7569" alt="Version"&gt;
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href="https://vuestic.dev/" rel="nofollow"&gt;Documentation&lt;/a&gt;
    |
    &lt;a href="https://discord.gg/u7fQdqQt8c" rel="nofollow"&gt;Discord&lt;/a&gt;
  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vuestic UI is forever free and open to contributions. See our
&lt;a href="https://github.com/epicmaxco/vuestic-ui/issues"&gt;issues&lt;/a&gt;
&lt;a href="https://vuestic.dev/en/contribution/guide" rel="nofollow"&gt;contributing guide&lt;/a&gt; and join discussions on our
&lt;a href="https://discord.gg/u7fQdqQt8c" rel="nofollow"&gt;Discord&lt;/a&gt; to help us improve Vuestic UI experience.&lt;/p&gt;
&lt;/blockquote&gt;
  &lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/epicmaxco/vuestic-ui/develop/./packages/ui/src/assets/vuestic-ui-image.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fE5kz4jf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/epicmaxco/vuestic-ui/develop/./packages/ui/src/assets/vuestic-ui-image.jpg"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Why use Vuestic UI?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Vue.js 3.0 compatible&lt;/li&gt;
&lt;li&gt;MIT license&lt;/li&gt;
&lt;li&gt;Feature-rich: more than 52 customizable components&lt;/li&gt;
&lt;li&gt;Two built-in color scheme presets&lt;/li&gt;
&lt;li&gt;Powerful configurations
&lt;ul&gt;
&lt;li&gt;Local - configure components in-depth&lt;/li&gt;
&lt;li&gt;Global - configure framework overall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-browser and responsive&lt;/li&gt;
&lt;li&gt;i18n-ready&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;p&gt;First, make sure you have all prerequisites installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;Node.js&lt;/a&gt; ( &amp;gt;=14.*)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/get-npm" rel="nofollow"&gt;npm&lt;/a&gt; version 3+ (
or &lt;a href="https://yarnpkg.com/lang/en/docs/install" rel="nofollow"&gt;yarn&lt;/a&gt; version 1.16+)
and &lt;a href="https://git-scm.com" rel="nofollow"&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After checking the prerequisites, install Vuestic UI via npm/yarn:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install vuestic-ui
//or
yarn add vuestic-ui&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Quick start&lt;/h3&gt;
&lt;p&gt;Make sure you're imported both styles and plugin into your entry file:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;//main.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;createApp&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'vue'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'./App.vue'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;VuesticPlugin&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'vuestic-ui'&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/epicmaxco/vuestic-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing üìà
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite&lt;/a&gt; +1,890 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +1,234 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cdr/code-server"&gt;code-server&lt;/a&gt; +1,103 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +926 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +908 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/cassiozen/useStateMachine"&gt;useStateMachine&lt;/a&gt; +164%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +69%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite&lt;/a&gt; +27%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FormidableLabs/renature"&gt;renature&lt;/a&gt; +7%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hauptrolle/chakra-templates"&gt;Chakra TemplatesÔ∏è&lt;/a&gt; +7%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +5,557 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,500 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,678 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nextapps-de/winbox"&gt;WinBox.js&lt;/a&gt;  +3,668 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt; +3,609 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/nextapps-de/winbox"&gt;WinBox.js&lt;/a&gt; +653%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/github/github-elements"&gt;github-elements&lt;/a&gt; +160%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +159%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/realtime"&gt;Supabase Realtime&lt;/a&gt; +42%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +36%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introduction to Promises in JavaScript.</title>
      <author>Abhishek Jain</author>
      <pubDate>Fri, 28 May 2021 13:46:15 +0000</pubDate>
      <link>https://dev.to/abhishekjain35/introduction-to-promises-in-javascript-3cd4</link>
      <guid>https://dev.to/abhishekjain35/introduction-to-promises-in-javascript-3cd4</guid>
      <description>&lt;p&gt;I promise that you will have a good understanding of promises by the end of the article üòÅ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise
&lt;/h2&gt;

&lt;p&gt;A promise in javascript is just like a promise we make in our lives. It refers to an event that will occur in the future.&lt;br&gt;
Promises in javascript are used to handle asynchronous operations. Promises have three possible states -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pending (Initial State)&lt;/li&gt;
&lt;li&gt;Fulfilled (Successful)&lt;/li&gt;
&lt;li&gt;Rejected (Failed)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmHD6qIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gokowel8p73wuh407x87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmHD6qIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gokowel8p73wuh407x87.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we make a promise, its state will be pending till either it is fulfilled or rejected. If fulfilled, its value will be the value it resolves with, and if it encounters any error, its value will be the value it rejects with (the error object).&lt;/p&gt;

&lt;p&gt;For example, when we make API requests to the server, it immediately returns a promise with &lt;em&gt;pending&lt;/em&gt; state. If the API call is successful, the state of promise changes from &lt;strong&gt;pending&lt;/strong&gt; to &lt;strong&gt;fulfilled&lt;/strong&gt;, and if the API request fails, then its state changes from &lt;strong&gt;pending&lt;/strong&gt; to &lt;strong&gt;rejected&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-promise-in-javascript"&gt;
  &lt;/a&gt;
  Creating a Promise in Javascript
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promiseExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resolve with Any type of data (objects, arrays, strings, etc...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error description.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, we can create a promise by using the &lt;code&gt;new Promise()&lt;/code&gt; constructor. It takes a function as an argument. This function takes two callback functions, &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. Whenever you want to fulfill the promise, you can call the &lt;code&gt;resolve&lt;/code&gt; callback function and pass the value to it. To reject a promise, call the &lt;code&gt;reject&lt;/code&gt; callback, providing some error message.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-promise"&gt;
  &lt;/a&gt;
  Using the Promise
&lt;/h2&gt;

&lt;p&gt;We can use the above promise creation example.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#then"&gt;
  &lt;/a&gt;
  .then()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promiseExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Promise Fulfilled.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Promise Rejected.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseExample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Promise Fulfilled.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, the &lt;code&gt;.then()&lt;/code&gt; method takes a callback function that executes whenever the promise resolves (or is fulfilled). The callback itself takes a parameter to store the actual result returned from the promise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;.then&lt;/code&gt; also takes a second parameter, a callback function, to handle errors, but there's a better way.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#catch"&gt;
  &lt;/a&gt;
  .catch()
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseExample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Promise Rejected.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;.catch()&lt;/code&gt; method also takes a callback that executes whenever the promise rejects (or fails). This callback takes an error parameter to catch the error information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#chaining-of-promises"&gt;
  &lt;/a&gt;
  Chaining of Promises
&lt;/h2&gt;

&lt;p&gt;Suppose we have to perform multiple asynchronous tasks. In that case, we use promise chaining.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Resolve promise after 1 sec&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promiseExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data of 1st Promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseExample&lt;/span&gt;
  &lt;span class="c1"&gt;// 1st .then()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataOfFirstPromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataOfFirstPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// data of 1st Promise&lt;/span&gt;

    &lt;span class="c1"&gt;// simulating API call which resolves after 1 sec.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data of 2nd Promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// 2nd .then()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataOfSecondPromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataOfSecondPromise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// data of 2nd Promise&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Few things to note here - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; methods always returns a promise so that we can again use &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; on them and chain the promises.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the above example, we use two &lt;code&gt;.then()&lt;/code&gt; methods. So, to consume the result of the first &lt;code&gt;.then()&lt;/code&gt; method, we always need to return that value from it. In this case, we &lt;code&gt;return&lt;/code&gt; a promise from the first &lt;code&gt;.then()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We use &lt;code&gt;.catch()&lt;/code&gt; to catch the error if it occurs in any of the promises. This is the main reason we use &lt;code&gt;.catch()&lt;/code&gt; instead of the second parameter of &lt;code&gt;.then()&lt;/code&gt;. The &lt;code&gt;.catch()&lt;/code&gt; method always catches the error either if it occurs in promise or the &lt;code&gt;.then()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the above example, we first create a promise which resolves after 1 second. After that, we call &lt;code&gt;.then&lt;/code&gt; on the promise and get the result of the first promise in parameter &lt;code&gt;dataOfFirstPromise&lt;/code&gt;. Now, if we want to fire another API request only after the 1st promise resolves, we can do that here. So we simulate API request with 2nd promise that resolves after 1 second, and we can get the result of 2nd promise in the 2nd &lt;code&gt;.then()&lt;/code&gt; method. You can chain as many &lt;code&gt;.then() 's and&lt;/code&gt;.catch() 's as you want.&lt;/p&gt;

&lt;p&gt;That is all about Promise chaining.&lt;/p&gt;

&lt;p&gt;Well, this was a brief introduction to promises. Thanks for reading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/13HgwGsXF0aiGY/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/13HgwGsXF0aiGY/source.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Quasar Brand Refresh and New Partnership</title>
      <author>Razvan Stoenescu</author>
      <pubDate>Fri, 28 May 2021 13:35:39 +0000</pubDate>
      <link>https://dev.to/quasar/quasar-brand-refresh-and-new-partnership-ao1</link>
      <guid>https://dev.to/quasar/quasar-brand-refresh-and-new-partnership-ao1</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;As part of our journey to improve Quasar with each passing day, &lt;strong&gt;we're proud to announce a new partnership with &lt;a href="https://dreamonkey.com/"&gt;Dreamonkey&lt;/a&gt;&lt;/strong&gt; (who is also an important sponsor of our framework).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dreamonkey Team will be helping us with the next steps in the evolution of Quasar&lt;/strong&gt; and in particular refreshing its brand and supporting content, which in turn will help everyone better understand what Quasar is, how it works, and how it can benefit you and the company you work for. &lt;/p&gt;

&lt;p&gt;Getting everyone to this understanding is not an easy task, as Quasar is not the everyday, run-of-the-mill Vue framework that you often come across. Nope. Quasar not only entails an extensive set of performance-oriented components and directives (the Quasar UI library). It also supplies a massive build architecture (with the Quasar CLI), which will get you and your ideas up and running and building apps in record time. The CLI starts with an awesome development experience and ends with deployment builds for practically any platform (i.e. SPA/SSR - PWA/SSR - Hybrid Mobile with Cordova or Capacitor - Desktop with Electron - and even BEX - Browser Extensions). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We've had this (successful) approach for a few years and we can ensure that all of the parts work together flawlessly and with incredible performance, yet final builds with all of the best practices in modern web development built-in and with the smallest possible package footprint&lt;/strong&gt;. All of our efforts with the CLI allows you to focus on the functionality of your products, instead of the often complex marriage and compatibility of the underlying technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quasar has partnered with Dreamonkey in our endeavor to better express why Quasar is one of the best alternatives to frontend application development out there&lt;/strong&gt;, along with expressing what our core values and principles are. &lt;/p&gt;

&lt;p&gt;Aside from the great cooperation we have with Dreamonkey, we also have a progressive rollout schedule in place. So stay tuned for lots of exciting new things in the coming weeks. We'll start with an improved logo and brand guide and work our way up to significant improvements to the Quasar docs website, which will help developers learn to use ALL of Quasar's exceptional value.&lt;/p&gt;

&lt;p&gt;You can read more about how Dreamonkey designed the new logo and more brand-related insights by reading their &lt;a href="https://dreamonkey.com/en/blog/the-new-official-quasar-logo"&gt;press release article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We have more exciting announcements to make for this quarter&lt;/strong&gt;. Along with the brand updates, we have some interesting times ahead for Quasar and we'd love to take you all with us on our incredible journey to make Quasar the best frontend application framework ever. ;)&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
Razvan Stoenescu, creator and team lead of Quasar Framework&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bootstrap 5 Search</title>
      <author>MD Bootstrap</author>
      <pubDate>Fri, 28 May 2021 12:57:08 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/bootstrap-5-search-1n2g</link>
      <guid>https://dev.to/mdbootstrap/bootstrap-5-search-1n2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-bootstrap-search"&gt;
  &lt;/a&gt;
  What is the Bootstrap Search?
&lt;/h2&gt;

&lt;p&gt;The search box is an UI element prepared for creating search engines. Its most important element is search input, but it can also contain icons or buttons. It is also adjusted to be used in various other components such as navbar, dropdown, table, select, sidenav and many more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#manual-installation-zip-package"&gt;
  &lt;/a&gt;
  Manual installation (zip package)
&lt;/h4&gt;

&lt;p&gt;To take advantage of  our Bootstrap images component and use them in your project, you first need to install the &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/installation/#section-manual-installation"&gt;MDB 5 Free package&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#mdb-cli"&gt;
  &lt;/a&gt;
  MDB CLI
&lt;/h4&gt;

&lt;p&gt;Watch our &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/quick-start/"&gt;&lt;strong&gt;Quick Start Tutorial&lt;/strong&gt;&lt;/a&gt; to discover and use the full potential of MDB 5 and MDB CLI&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h6&gt;

&lt;p&gt;Before starting the project make sure to install &lt;a href="https://nodejs.org/en/"&gt;Node LTS (12.x.x recommended)&lt;/a&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h6&gt;

&lt;p&gt;To install MDB UI KIT in your project easily type the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm i mdb-ui-kit 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-js-modules"&gt;
  &lt;/a&gt;
  Importing JS modules
&lt;/h6&gt;

&lt;p&gt;You can import the entire library or just individual modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;import * as mdb from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// lib
&lt;span class="gp"&gt;import { Input } from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// module 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-css-file"&gt;
  &lt;/a&gt;
  Importing CSS file
&lt;/h6&gt;

&lt;p&gt;To import MDB stylesheet please use the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;@import '~mdb-ui-kit/css/mdb.min.css';&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-scss-modules"&gt;
  &lt;/a&gt;
  Importing SCSS modules
&lt;/h6&gt;

&lt;p&gt;You can also import individual SCSS modules. To do it properly, we recommend to copy them from the node_modules/mdb-ui-kit/src/scss location directly to your project and import in the same way as CSS files.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#webpack-integration"&gt;
  &lt;/a&gt;
  Webpack integration
&lt;/h6&gt;

&lt;p&gt;You can significantly speed up the process of creating a new project based on Webpack using our &lt;a href="https://github.com/mdbootstrap/mdb-webpack-starter"&gt;Starter&lt;/a&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h4&gt;

&lt;p&gt;Installation via CDN is one of the easiest methods of integrating MDB UI KIT with your project. Just copy the latest compiled JS script tag and CSS link tag from &lt;a href="https://cdnjs.com/libraries/mdb-ui-kit"&gt;cdnjs&lt;/a&gt; to the application.&lt;/p&gt;

&lt;p&gt;Don't forget to add also Font Awesome and Roboto font if you need it. Here's an example code:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Font&lt;/span&gt; &lt;span class="nt"&gt;Awesome&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Google&lt;/span&gt; &lt;span class="nt"&gt;Fonts&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;MDB&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;MDB&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic example
&lt;/h5&gt;

&lt;p&gt;A basic example with a simple button.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-outline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"form1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#search-without-additional-elements"&gt;
  &lt;/a&gt;
  Search without additional elements
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-outline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Type query"&lt;/span&gt;
  &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-can-see-more-customization-examples-on-the-search-documentation-page"&gt;
  &lt;/a&gt;
  You can see more customization examples on the &lt;a href="https://mdbootstrap.com/docs/standard/forms/search/"&gt;üìÑ Search documentation page&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#crucial-resources"&gt;
  &lt;/a&gt;
  Crucial Resources
&lt;/h2&gt;

&lt;p&gt;Here are the resources that we have prepared to help you work with this component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;a href="https://mdbootstrap.com/docs/standard/forms/search/"&gt;üìÑ Search documentation page&lt;/a&gt; &amp;lt;-- start here&lt;/li&gt;
&lt;li&gt;In to get the most out of your project, you should also get acquainted with other Content &amp;amp; style options related to Images. See the section below to find the list of them.&lt;/li&gt;
&lt;li&gt;You can use predesigned Content &amp;amp; style elements in &lt;a href="https://mdbootstrap.com/freebies/"&gt;üì• Starter Bootstrap 5 templates&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Templates are a part of &lt;a href="https://mdbootstrap.com/docs/standard/"&gt;üì¶ Free UI Kit for Bootstrap 5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;After finishing the project you can publish it with CLI in order to receive &lt;a href="https://mdbootstrap.com/docs/standard/cli/"&gt;üíΩ Free hosting (beta)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#related-content-and-styles-options-amp-features"&gt;
  &lt;/a&gt;
  Related Content and Styles options &amp;amp; features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/autocomplete/"&gt;Autocomplete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/checkbox/"&gt;Checkbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/datepicker/"&gt;Datepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/datetimepicker/"&gt;DateTimepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/file/"&gt;File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/input-fields/"&gt;Input fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/input-group/"&gt;Input group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/multi-range-slider/"&gt;Multi Range Slider &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/select/"&gt;Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/switch/"&gt;Switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/radio/"&gt;Radio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/range/"&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/timepicker/"&gt;Timepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/forms/validation/"&gt;Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#learn-bootstrap-5-in-15h"&gt;
  &lt;/a&gt;
  Learn Bootstrap 5 in 1.5H
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c9B4TPnak1A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources
&lt;/h2&gt;

&lt;p&gt;Learn web development with our &lt;strong&gt;learning roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/docs/standard/getting-started/"&gt;üéì Start Learning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our mailing list &amp;amp; receive &lt;strong&gt;exclusive resources&lt;/strong&gt; for developers&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/newsletter/"&gt;üéÅ Get gifts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our private FB group for &lt;strong&gt;inspiration &amp;amp; community experience&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.facebook.com/groups/682245759188413"&gt;üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ask to join&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support creation of open-source packages&lt;/strong&gt; with a STAR on GitHub&lt;br&gt;
&lt;a href="https://github.com/mdbootstrap/mdb-ui-kit/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKY5TtAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/mdbootstrap/mdb-ui-kit%3Flabel%3DStar%2520now%26style%3Dsocial" alt="GitHub Stars"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>JavaScript Interview Question #43: Object.toString vs Array.toString</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Fri, 28 May 2021 12:49:22 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-43-object-tostring-vs-array-tostring-2cim</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-43-object-tostring-vs-array-tostring-2cim</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82YZA_E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82YZA_E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-43.png" alt="coderslang javascript interview question #43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's the difference between &lt;code&gt;Object.toString&lt;/code&gt; and &lt;code&gt;Array.toString&lt;/code&gt; in JavaScript? What‚Äôs the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learn.coderslang.com/ru/js-test-22-tostring-nuances-in-javascript/"&gt;A regular behavior&lt;/a&gt; of the JavaScript function &lt;code&gt;Object.prototype.toString&lt;/code&gt; in a browser ‚Äî is a string that looks like &lt;code&gt;[object "TYPE"]&lt;/code&gt;. The part "TYPE" is substituted with the type of the Object that &lt;code&gt;toString&lt;/code&gt; is called on. In our case, it's &lt;code&gt;Array&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toStringObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// [object Array]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second instance, we call &lt;code&gt;toString&lt;/code&gt; from &lt;code&gt;Array&lt;/code&gt;. It‚Äôs not the same function as it overrides the standard implementation of &lt;code&gt;Object.prototype.toString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.toString&lt;/code&gt; returns a string that consists of all the array elements separated with commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toStringArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1,2,3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: 2 strings will appear on the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite: Docker Swarm Integration</title>
      <author>kodumbeats</author>
      <pubDate>Fri, 28 May 2021 12:43:54 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-docker-swarm-integration-2io9</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-docker-swarm-integration-2io9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-with-docker-swarm"&gt;
  &lt;/a&gt;
  Deploy with Docker Swarm
&lt;/h2&gt;

&lt;p&gt;Welcome to Day 28 üëã ! Your app has become an overnight success. Everyone is using your app, from celebrities to your friends. You never anticipated this and find yourself in a situation where your app isn't able to keep up with the overwhelming number of requests. Fret not! Appwrite was designed with exactly this in mind. As you already know, Appwrite is designed as a set of stateless micro services with scalability as one of our top priorities! While there are many ways to achieve scalability with lots of orchestration services, we will take a look at one of the most intuitive ones. Today, we're going to discuss horizontally scaling Appwrite with Docker Swarm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker-swarm"&gt;
  &lt;/a&gt;
  What is Docker Swarm?
&lt;/h2&gt;

&lt;p&gt;Docker Swarm is a container orchestration tool built right into the Docker CLI which allows us to deploy our Docker services to a cluster of hosts, instead of just the one allowed with &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. This is known as Swarm Mode, not to be confused with the classic Docker Swarm that is &lt;a href="https://github.com/docker/classicswarm"&gt;no longer being developed&lt;/a&gt; as a standalone product. Docker Swarm works great with Appwrite as it builds upon the &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;Compose specification&lt;/a&gt;, meaning we can use Appwrite's &lt;code&gt;docker-compose&lt;/code&gt; configuration to deploy to a swarm (with a few changes here and there). Its simplicity allows us to get started right away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-appwrite-with-swarm"&gt;
  &lt;/a&gt;
  Deploying Appwrite with Swarm
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For this example, we'll need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/get-docker/"&gt;Docker is installed&lt;/a&gt; on each of your hosts.&lt;/li&gt;
&lt;li&gt;The following ports must be open between your hosts:

&lt;ul&gt;
&lt;li&gt;TCP port 2377 for cluster management communications&lt;/li&gt;
&lt;li&gt;TCP and UDP port 7946 for communication among nodes&lt;/li&gt;
&lt;li&gt;UDP port 4789 for overlay network traffic&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The "leader" server has Appwrite's &lt;a href="https://gist.github.com/eldadfux/977869ff6bdd7312adfd4e629ee15cc5"&gt;Compose files&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-swarm"&gt;
  &lt;/a&gt;
  Creating the Swarm
&lt;/h3&gt;

&lt;p&gt;We'll create the swarm on whichever host we want to be the "leader". Initialize the swarm with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker swarm init
Swarm initialized: current node &lt;span class="o"&gt;(&lt;/span&gt;7db8w7aurb7qrhvm0c0ttd4ky&lt;span class="o"&gt;)&lt;/span&gt; is now a manager.

To add a worker to this swarm, run the following &lt;span class="nb"&gt;command&lt;/span&gt;:

    docker swarm &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="nt"&gt;--token&lt;/span&gt; SWMTKN-1-0wagrl3qt4loflf9jcadj8gx53fj2dzmbwaato7r50vghmgiwp-cvo3jflyfh2gnu46pzjtaexv2 your.ip.addr.ess:2377

To add a manager to this swarm, run &lt;span class="s1"&gt;'docker swarm join-token manager'&lt;/span&gt; and follow the instructions.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's run the provided command on our other system(s) - we're looking for the message &lt;code&gt;This node joined a swarm as a worker.&lt;/code&gt; Once that's complete, we can go back to the "leader" host and can see both systems with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker node ls
ID                            HOSTNAME          STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
yfl7xsy5birfbpiw040chef67     appwrite          Ready     Active                          20.10.6
op3nf4ab6f5v1lulwkpyy2a83 *   appwrite_leader   Ready     Active         Leader           20.10.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-raw-dockercomposeyml-endraw-"&gt;
  &lt;/a&gt;
  Update &lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Now that the swarm is ready, we'll need to make some changes to &lt;code&gt;docker-compose.yml&lt;/code&gt; to make it Swarm-compatible.&lt;/p&gt;

&lt;p&gt;Volumes in a Docker swarm aren't shared between hosts by default, so we'll use NFS to share directories between the hosts. Shared data can be accomplished in a variety of ways, but this is the simplest to get started. To do so, we'll replace all the named volumes with NFS mounts. DigitalOcean has a &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-20-04"&gt;great guide&lt;/a&gt; on configuring NFS, so refer to that guide for more details.&lt;/p&gt;

&lt;p&gt;We're going to configure these NFS volumes on our "leader" host and share those folders with other hosts in the swarm. We'll use the following directories to replace the Docker volumes and share via NFS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /nfs/&lt;span class="o"&gt;{&lt;/span&gt;mariadb,redis,cache,uploads,certificates,functions,influxdb,config&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll create the corresponding &lt;code&gt;/nfs&lt;/code&gt; directories on the second host (with the same command as above) where we'll mount the NFS share from the "leader" host.&lt;/p&gt;

&lt;p&gt;Now, replace each named volume in &lt;code&gt;docker-compose.yml&lt;/code&gt; with its corresponding NFS directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# - appwrite-uploads:/storage/uploads:rw&lt;/span&gt;
- /nfs/uploads:/storage/uploads:rw

&lt;span class="c"&gt;# - appwrite-certificates:/storage/certificates:rw&lt;/span&gt;
- /nfs/certificates:/storage/certificates:rw

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll need to remove the &lt;code&gt;depends_on&lt;/code&gt; and &lt;code&gt;container_name&lt;/code&gt; stanzas from &lt;code&gt;docker-compose.yml&lt;/code&gt;, as they aren't supported by Docker Swarm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overlay-networks"&gt;
  &lt;/a&gt;
  Overlay Networks
&lt;/h3&gt;

&lt;p&gt;Docker uses &lt;a href="https://docs.docker.com/network/overlay/"&gt;overlay networks&lt;/a&gt; to connect each node together in the swarm, so containers can communicate with each other regardless of where it is deployed. We could create the overlay network with the Docker CLI, but instead, let's capture this change in &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;networks:
  gateway:
  appwrite:
    driver: overlay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ready-to-deploy"&gt;
  &lt;/a&gt;
  Ready to Deploy
&lt;/h3&gt;

&lt;p&gt;Once everything is in place, we'll set our &lt;a href="https://appwrite.io/docs/environment-variables"&gt;Appwrite environment variables&lt;/a&gt; and deploy to the swarm with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker stack deploy &lt;span class="nt"&gt;-c&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;docker-compose config&lt;span class="o"&gt;)&lt;/span&gt; appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you see &lt;code&gt;docker-compose config&lt;/code&gt; warnings, try upgrading the Compose version to &lt;code&gt;version: '3.8'&lt;/code&gt; at the head of &lt;code&gt;docker-compose.yml&lt;/code&gt; to utilize the latest Compose specification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our micro service workers rely on Redis to handle pub/sub, so you may see them restart until the stack self-heals. Once everything is deployed, you can check the status of the services with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker service &lt;span class="nb"&gt;ls
&lt;/span&gt;ID             NAME                                    MODE         REPLICAS   IMAGE                     PORTS
ktfto6dap451   appwrite_appwrite                       replicated   1/1        appwrite/appwrite:0.8.0   
hazw2csk4epd   appwrite_appwrite-maintenance           replicated   1/1        appwrite/appwrite:0.8.0   
fshro0zn8iw6   appwrite_appwrite-schedule              replicated   1/1        appwrite/appwrite:0.8.0   
jep5n0gnmvy6   appwrite_appwrite-worker-audits         replicated   1/1        appwrite/appwrite:0.8.0   
oiftp636aq6v   appwrite_appwrite-worker-certificates   replicated   1/1        appwrite/appwrite:0.8.0   
tlu7yxvtrr0r   appwrite_appwrite-worker-deletes        replicated   1/1        appwrite/appwrite:0.8.0   
rda2kspenbzr   appwrite_appwrite-worker-functions      replicated   1/1        appwrite/appwrite:0.8.0   
im800v9tct4n   appwrite_appwrite-worker-mails          replicated   1/1        appwrite/appwrite:0.8.0   
ry0u3v726o8h   appwrite_appwrite-worker-tasks          replicated   1/1        appwrite/appwrite:0.8.0   
734y2mr6gzkc   appwrite_appwrite-worker-usage          replicated   1/1        appwrite/appwrite:0.8.0   
bkotuk5kwmxx   appwrite_appwrite-worker-webhooks       replicated   1/1        appwrite/appwrite:0.8.0   
ff6iicbmf5my   appwrite_influxdb                       replicated   1/1        appwrite/influxdb:1.0.0   
892923vq96on   appwrite_mariadb                        replicated   1/1        appwrite/mariadb:1.2.0    
uw3l8bkoc3sl   appwrite_redis                          replicated   1/1        redis:6.0-alpine3.12      
ulp1cy06plnv   appwrite_telegraf                       replicated   1/1        appwrite/telegraf:1.0.0   
9aswnz3qq693   appwrite_traefik                        replicated   1/1        traefik:2.3               &lt;span class="k"&gt;*&lt;/span&gt;:80-&amp;gt;80/tcp, &lt;span class="k"&gt;*&lt;/span&gt;:443-&amp;gt;443/tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I've included my completed Compose file in a &lt;a href="https://gist.github.com/kodumbeats/5f2a52297bbc0edb04385bdd43083d7d"&gt;GitHub gist&lt;/a&gt; for reference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;Docker Swarm has a lot of configuration options available, so we won't cover everything here. Instead, let's talk about some of the most useful stanzas when configuring your deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replicas"&gt;
  &lt;/a&gt;
  Replicas
&lt;/h3&gt;

&lt;p&gt;Since Appwrite is largely stateless, you can scale each service up or down individually, depending on your app's needs. For example, we may want to have two Functions workers so we can handle twice as many function executions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deploy:
  replicas: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check that the replica was deployed by filtering for the specific service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker service &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;--filter&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;appwrite_appwrite-worker-functions 
ID             NAME                                 MODE         REPLICAS   IMAGE                     PORTS 
rda2kspenbzr   appwrite_appwrite-worker-functions   replicated   2/2        appwrite/appwrite:0.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#node-constraints"&gt;
  &lt;/a&gt;
  Node Constraints
&lt;/h3&gt;

&lt;p&gt;Docker Swarm allows us to control where containers deploy in the swarm using placement constraints. For example, we could configure Traefik or MariaDB to just reside on a manager node with the following added to &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deploy:
  placement:
    constraints: [node.role == manager]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h2&gt;

&lt;p&gt;We just covered the tip of the iceberg. For further reading on running Appwrite in a Docker Swarm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker's &lt;a href="https://docs.docker.com/engine/swarm/admin_guide/"&gt;admin guide&lt;/a&gt; has a lot of extra information about how to manage nodes in a swarm, and some considerations for production.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/engine/swarm/secrets/"&gt;Docker secrets&lt;/a&gt; and &lt;a href="https://docs.docker.com/engine/swarm/configs/"&gt;Docker configs&lt;/a&gt; can be used to more easily control and distribute sensitive data through the swarm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ü¶Ñ. Stay tuned for tomorrow's article! Until then üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>Django Vs Laravel: Which framework to choose?</title>
      <author>Nimap Infotech</author>
      <pubDate>Fri, 28 May 2021 12:36:53 +0000</pubDate>
      <link>https://dev.to/nimapinfotech/django-vs-laravel-which-framework-to-choose-3mnb</link>
      <guid>https://dev.to/nimapinfotech/django-vs-laravel-which-framework-to-choose-3mnb</guid>
      <description>&lt;p&gt;When the question is about choosing a particular framework, which works well for mobile and web application development, often this choice can be a daunting and a hard one. Capable programmers and Developers would have a hard time choosing the correct framework to go with their technological needs. When it comes to software development, there are multiple Technologies which can be used which serve the purpose and provide the ability to create unique and intuitive applications pretty easily and efficiently.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
So let us compare the stalwarts of the Frameworks department, Laravel and Django.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic2BaXxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocp6ujokrhr84fy3j412.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic2BaXxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocp6ujokrhr84fy3j412.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Django&lt;/h3&gt;

&lt;p&gt;The Django Framework was developed by the Django Foundation and was licensed by the Berkeley software distribution. Django is used by many popular and well known websites such as Mozilla, bitbucket, Instagram, Pinterest ,and many more. All of the maintenance activities and the boxes which are applicable to the Framework are released timely and efficiently by the Berkeley software distribution group.&lt;/p&gt;

&lt;p&gt;One of the major strong points that the Django Framework is able to provide is that it is lightweight in use and provides a robust and standalone feature for development applications and provide useful features for testing as well. The main objective of the Django framework is 2 is the process of web development and enabling Complex application development using lesser time and lesser effort.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Pros&lt;/b&gt; &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
Developers encounter little to no learning curve when mastering the Django Framework because of its easy to use and efficient management.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;The language is great for patching different security based problems.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Django provides mobile integration as well.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Django have some of the best documentation which is very useful to developers and designers.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Django is a mature software best framework with some awesome plugins to enable functionality out of the box.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If you are looking to develop your web development in Python Django, you can &lt;a href="https://nimapinfotech.com/hire-django-developers/"&gt;Hire Django Developer&lt;/a&gt; from Nimap Infotech.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Cons&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Using Django for Small applications can be a bit of and overkill as far as software development is concerned.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Using the routing feature is sometimes difficult.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;There are errors in template design then they can fail silently without provisions of any error messages.&lt;/li&gt;&lt;/ul&gt;



&lt;h3&gt;Laravel&lt;/h3&gt;

&lt;p&gt;Laravel is the framework developed by Taylor Otwell. Laravel operates under MIT licence. it requires developers and designers for efficient knowledge of PHP for use. The main objective on uses of laravel is design and development of content management system and applications.&lt;/p&gt;

&lt;p&gt;Laravel provides the presence of an upscale feature, which enables usage of more traffic on demand. The applications developed by using inbuilt features of the framework is mainly the life of developers and designers being used in order to create laravel applications. Laravel provides many good features which enables developers to create applications from scratch using this particular framework.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;Pros&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;It has a powerful templating system managed by blade.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;The routing process is simple and informative.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Provides IOC support and have built-in command interface.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Maintenance is far easier will demanding and changing web development trends.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Uses a dynamic and interactive language which is intuitive for developers.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If you are looking to develop your web development in PHP Laravel, you can &lt;a href="https://nimapinfotech.com/hire-laravel-developers/"&gt;Hire Laravel Developer&lt;/a&gt; from Nimap Infotech.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;Cons&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Beginners are prone to create serious mistakes in application development.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;The learning curve for laravel is far steeper than what python has to offer.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Developers and only limited to developing web applications, and offers little to no mobile support.&lt;/li&gt;&lt;/ul&gt;



&lt;h3&gt;Django VS Laravel- Direct Comparison&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;Popularity:&lt;/b&gt;&lt;br&gt;
Django is a leading Framework for has many uses in the categories of computers, food and drinks industries, and electronics. The Framework is highly used in countries like US, Russia, Spain, France.&lt;/p&gt;

&lt;p&gt;Laravel on the other hand has more web based applications and is heavily used in the areas of Arts and entertainment, telecommunications and internet, shopping in travel, and various businesses. As a web framework, this particular Framework is used heavily in China, Brazil, UK, and many other popular countries.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Community:&lt;/b&gt;&lt;br&gt;
Both Laravel and Django have active communities with user group dedicated to solving problems that the developers have. And both provide forum Groups for interaction with different users which many developers can use to solve problems.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Learning Curve:&lt;/b&gt;&lt;br&gt;
Python does not efficiently have a learning curve because it is so simple and easy to use, this course for Django as well because Django is developed using python.&lt;/p&gt;

&lt;p&gt;Laravel on the other hand has a somewhat steep learning curve then what Python has to offer, which can often be tedious and difficult for developers and programmers to master the particular language framework.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Performance:&lt;/b&gt;&lt;br&gt;
As far as performance is concerned, Django wins hands down due to the efficient use of memory management, and compute performance tasks. On the other hand of a similar lower performance than what Django has to offer.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Security:&lt;/b&gt;&lt;br&gt;
As far as security is concerned, Django is able to offer better security compared to laravel, because it takes privacy and security issues pretty seriously. So if you are looking to create applications that require higher standards of security then you should go with Django.&lt;br&gt;
Laravel security features are not as robust as what Django offers, but can be still used to provide the features and functionality. having said that Django offers the best security hands down&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;Conclusion:&lt;/b&gt;&lt;br&gt;
In the race to find the best frameworks, it all depends on personal preferences and best practices that you would like to implement, that provides the number of features to your users and customers, as well as enabling them to do the things that otherwise would have been difficult for customers. It all depends on what you are trying to achieve in application development which decides the Framework that you want to choose. Consider what projects you want to do in the future and choose the framework according to what you need and your usage.&lt;/p&gt;

</description>
      <category>django</category>
      <category>laravel</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Linux for Devops Basic Cource</title>
      <author>Rahul Khinchi</author>
      <pubDate>Fri, 28 May 2021 12:30:35 +0000</pubDate>
      <link>https://dev.to/rk7/linux-for-devops-basic-cource-3bkp</link>
      <guid>https://dev.to/rk7/linux-for-devops-basic-cource-3bkp</guid>
      <description>&lt;p&gt;Hey People,&lt;br&gt;
Today I want to review a course "Linux for Devops" by Valexy Technology which you can find out on UDEMY Platform.&lt;/p&gt;

&lt;p&gt;I took this course because I want to learn Devops from scratch and Linux is the base of learning Devops!&lt;/p&gt;

&lt;p&gt;The Course Contain:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic Linux Commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS and how to create an Ec2 Instance from AWS.&lt;/li&gt;
&lt;li&gt;To run Linux on windows, use MobaXterm.&lt;/li&gt;
&lt;li&gt;Linux File System Hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Managing Files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read/Write/Access command&lt;/li&gt;
&lt;li&gt;Changing Directory&lt;/li&gt;
&lt;li&gt;Search and Replace a word in Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User Management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login as a User onto EC2 Instance.&lt;/li&gt;
&lt;li&gt;Changing Permissions - Commands: chmod&lt;/li&gt;
&lt;li&gt;Changing Ownership - Commands: chown, file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System Management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gather System Information - Commands: free, cpuinfo, uname.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software Management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation Packages - Commands : yum [install, remove]&lt;/li&gt;
&lt;li&gt;Updating and getting info about packages - Commands: yum &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Networking:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collect Network info - Commands: hostname, ping, wget&lt;/li&gt;
&lt;li&gt;Telnet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Services - Commands: service [status, start, stop]&lt;/li&gt;
&lt;li&gt;Services - commands chkconfig, systemctl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process Management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process Management - Commands: ps, fg, bg, top.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other Topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Archiving files and directories - Commands: gzip, gunzip, zip, unzip.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crontab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Softlink and Hardlink.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy files from Windows to Linux - Commands: scp&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are new to Linux and want to learn Devops as Scratch then I will recommend you this course as it contains all the required commands and learning which is used in Devops!&lt;/p&gt;

&lt;p&gt;Course: &lt;a href="https://www.udemy.com/course/valaxy-linux/"&gt;https://www.udemy.com/course/valaxy-linux/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Grokking Lenses</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 28 May 2021 12:09:52 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-lenses-2jgp</link>
      <guid>https://dev.to/choc13/grokking-lenses-2jgp</guid>
      <description>&lt;p&gt;In most functional programming languages data structures are immutable by default, which is great because immutability eliminates a whole raft of issues from our code, freeing our brains up to worry about the higher level problems we're trying to solve. One of the drawbacks of immutability is how cumbersome it can be to modify nested data structures. In this post we're going to independently discover a better way of "updating" immutable data and in doing so re-invent lenses.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;In this post we'll imagine that we're working with the following data model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;HouseNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So a &lt;code&gt;User&lt;/code&gt; has a &lt;code&gt;CreditCard&lt;/code&gt; which has an &lt;code&gt;Address&lt;/code&gt;. Now imagine that we've been asked to write some code that lets a user update their postcode for the address of their credit card. Pretty easy right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
          &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                    &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yikes! That's not pretty. Compare that to the imperative version in something like C#.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nf"&gt;SetCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Postcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, the data model might be mutable and there might be a bit more faff in the method declaration, but it's hard to argue with the fact that the actual set operation is much clearer in the imperative style.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#composing-a-solution"&gt;
  &lt;/a&gt;
  Composing a solution üéº
&lt;/h1&gt;

&lt;p&gt;Instinctively, what we'd like to do is write functions that take care of setting their respective bits of the model and then compose them when we want to set data that is nested inside a larger structure. For example let's write some setters for &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;CreditCard&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt; in their respective modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I've omitted writing setters for every single property for brevity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These functions are nice because they're very focused on a singular piece of the data model. Ideally, to write &lt;code&gt;setCreditCardPostcode&lt;/code&gt; we'd be able to compose these individual functions to create a new function that can update the postcode inside a user's credit card. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPostcode&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAddress&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Aside: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; is the function composition operator, so that &lt;code&gt;f &amp;gt;&amp;gt; g&lt;/code&gt; is equivalent to &lt;code&gt;fun x -&amp;gt; x |&amp;gt; f |&amp;gt; g&lt;/code&gt;. More concretely if we had &lt;code&gt;let addOne x = x + 1&lt;/code&gt; then we could write &lt;code&gt;let addTwo = addOne &amp;gt;&amp;gt; addOne&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But... it's not going to compile! The problem is that &lt;code&gt;Address.setPostcode&lt;/code&gt; has the signature &lt;code&gt;Postcode -&amp;gt; Address -&amp;gt; Address&lt;/code&gt; and &lt;code&gt;CreditCard.setAddress&lt;/code&gt; has the signature &lt;code&gt;Address -&amp;gt; CreditCard -&amp;gt; CreditCard&lt;/code&gt;. So when we write &lt;code&gt;Address.setPostcode &amp;gt;&amp;gt; CreditCard.setAddress&lt;/code&gt; then the output of &lt;code&gt;Address.setPostcode&lt;/code&gt; (which is &lt;code&gt;Address -&amp;gt; Address&lt;/code&gt;) does not match the input to &lt;code&gt;CreditCard.setAddress&lt;/code&gt; (which is just &lt;code&gt;Address&lt;/code&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aligning-the-types"&gt;
  &lt;/a&gt;
  Aligning the types
&lt;/h1&gt;

&lt;p&gt;Our first attempt, whilst not quite right, is pretty close. The types nearly line up. Let's see if we can align the types so that the output of one setter can feed straight in to the input of the next one.&lt;/p&gt;

&lt;p&gt;If we look again at the output from &lt;code&gt;Address.setPostcode postcode&lt;/code&gt; then we see it's a function whose signature is &lt;code&gt;Address -&amp;gt; Address&lt;/code&gt;. That is, when we partially apply a &lt;code&gt;postcode&lt;/code&gt; to &lt;code&gt;setPostcode&lt;/code&gt;, it creates a function that can transform an address by setting the &lt;code&gt;Postcode&lt;/code&gt; property to the value we partially applied. So how about if we change the input of &lt;code&gt;CreditCard.setAddress&lt;/code&gt; to take an address transformation function, rather than just a new address value. In fact, there's nothing special about &lt;code&gt;CreditCard.setAddress&lt;/code&gt; so let's make this change for all of our setters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setAddress&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might feel like this is a hack in order to make composition work, but what we've actually done is made a much more powerful "setter" function. Each "setter" is now capable of taking any transformation function which it applies to the current value and then returns a new version of the data with this modification. If we think about it, setting a property is just a special case of this more general transformation where we ignore the existing value.&lt;/p&gt;

&lt;p&gt;What we've actually created here are more like property modifiers than just setters. Each modifier has the signature &lt;code&gt;('child -&amp;gt; 'child) -&amp;gt; ('parent -&amp;gt; 'parent)&lt;/code&gt;, which means given a function that can modify some child property, then I'll return you a function that updates the parent type. So let's rename them to &lt;code&gt;modifyX&lt;/code&gt; instead and see if we can now create &lt;code&gt;setCreditCardPostcode&lt;/code&gt; in the composition style that we wanted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmmm, it's still not quite right. The type of &lt;code&gt;setCreditCardPostcode&lt;/code&gt; is actually &lt;code&gt;(Postcode -&amp;gt; Postcode) -&amp;gt; (User -&amp;gt; User)&lt;/code&gt;, which in hindsight is obvious because all we've done is compose modifiers, not setters. So we've actually just created a new "modifier" here that lets us modify the postcode property of the user's credit card. In order to do a "set" operation we just apply the transformation that does the "set" to the "modifier".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we compose our modifiers and then partially apply it with a transformer that just ignores the input and sets the value to the supplied &lt;code&gt;postcode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you've followed up to this point then you've grokked the core principles, which is that if we have modifier functions that know how to update their one piece of the model, then we can chain them together to build modifiers that operate across many nested layers of a larger data structure. Everything that follows from now will be just tidying this up and extracting the generic parts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generic-property-modifiers"&gt;
  &lt;/a&gt;
  Generic property modifiers
&lt;/h1&gt;

&lt;p&gt;It should be clear from the last implementation of &lt;code&gt;setCreditCardPostcode&lt;/code&gt; that in order to set a nested property we do two things. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compose the necessary property modifiers to create one that can operates across many layers of a nested data structure.&lt;/li&gt;
&lt;li&gt;Apply a transformation function that ignores the current value and just returns the new value that we want to set the property to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given that all of our property modifiers are of the form &lt;code&gt;('child -&amp;gt; 'child) -&amp;gt; ('parent -&amp;gt; 'parent)&lt;/code&gt;, we should be able to write a &lt;code&gt;set&lt;/code&gt; function that works for any modifier. It's really simple and just looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even define the &lt;code&gt;modifyCreditCardPostcode&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCardPostcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it whenever we want to set a new value, as in &lt;code&gt;user |&amp;gt; set User.modifyCreditCard "A POSTCODE"&lt;/code&gt; and we could also use it to transform a &lt;code&gt;Postcode&lt;/code&gt;, as in &lt;code&gt;user |&amp;gt; User.modifyCreditCardPostcode (fun (Postcode postcode) -&amp;gt; postcode |&amp;gt; String.toUpper |&amp;gt; PostCode)&lt;/code&gt;. That's a nice separation of concerns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#combing-getters-and-setters"&gt;
  &lt;/a&gt;
  Combing getters and setters
&lt;/h1&gt;

&lt;p&gt;We might be tempted to stop here, and for the purposes of our initial problem regarding awkward data updates we've achieved our goal, but it would be nice if we could make this concept of property modifiers even more universal. In particular if we could combine the closely related acts of getting and setting a property in a single function.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code&gt;Address.modifyPostcode&lt;/code&gt; again we'll see that it contains a "get" operation for the &lt;code&gt;Postcode&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="c1"&gt;// ^ getting here ^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's possible to rearrange this slightly and put the "get" first and pipe it in to a function that does the "setting".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now clear to see that our modifiers perform the following operations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the child data.&lt;/li&gt;
&lt;li&gt;Transform the child data.&lt;/li&gt;
&lt;li&gt;Update the parent with the transformed child value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So if we could somehow find a way to skip the final step, then we'd have ourselves a getter. The only thing we can do to affect the behaviour of &lt;code&gt;modifyPostcode&lt;/code&gt; though is to provide a different &lt;code&gt;transformer&lt;/code&gt;. Unfortunately, try as we might there's no function we can supply here that will stop the final "setter" step from also running.&lt;/p&gt;

&lt;p&gt;One trick we can do though is to make the &lt;code&gt;transformer&lt;/code&gt; return a functor, see &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; if you need a recap. If we do this then in order to then call the final "setter" step we need to &lt;code&gt;map&lt;/code&gt; it so that we can apply this "setter" to the contents of the functor we returned from the &lt;code&gt;transformer&lt;/code&gt;. So, for example, &lt;code&gt;modifyCodeProperty&lt;/code&gt; would look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Postcode&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
    &lt;span class="c1"&gt;// Everything's the same until the final line where we call map&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might still be wondering how that lets us avoid calling the final "setter" step? Well, we can now exploit the &lt;code&gt;map&lt;/code&gt; function to change the behaviour of &lt;code&gt;modifyPostcode&lt;/code&gt;. If we remember how functors work then &lt;code&gt;map&lt;/code&gt; is defined on a per functor basis, so by returning different functors from the &lt;code&gt;transformer&lt;/code&gt; we can get different mapping behaviours at the end.&lt;/p&gt;

&lt;p&gt;What we need then is a functor whose &lt;code&gt;map&lt;/code&gt; instance just ignores the function being applied to it. One that just returns its input without transforming it. Fortunately for us such a functor already exists called &lt;code&gt;Const&lt;/code&gt; and it's defined like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Ignored&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Value&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;_)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; for &lt;code&gt;Const&lt;/code&gt; just returns the input &lt;code&gt;x&lt;/code&gt;. With that we're in a position to write a generic &lt;code&gt;get&lt;/code&gt; function that will extract the child value from any of our modifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What about our &lt;code&gt;set&lt;/code&gt; function? Which functor should we return from the &lt;code&gt;transformer&lt;/code&gt; in there? Well we need one that just runs the function without modification and that happens to also be a well known functor that goes by the name of &lt;code&gt;Identity&lt;/code&gt;. &lt;code&gt;Identity&lt;/code&gt; is defined like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's &lt;code&gt;map&lt;/code&gt; instance just calls the function &lt;code&gt;f&lt;/code&gt; on the input &lt;code&gt;x&lt;/code&gt; and wraps the result back up in another &lt;code&gt;Identity&lt;/code&gt; constructor. People often wonder why we'd need such a boring functor, but it comes in handy in these situations. With that  &lt;code&gt;set&lt;/code&gt; only requires a slight modification from before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;modifiedParent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;

    &lt;span class="n"&gt;modifiedParent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together üß©
&lt;/h1&gt;

&lt;p&gt;We've made quite a few changes to things now, so let's see it all together. We'll start with the signature that a modifier must have, then show the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions that work for any such modifier and finally show how we can use them to solve our original problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Modifier signature - notice how the output is completely generic now which supports both our get and set use cases&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;child&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;modifiedParent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;

    &lt;span class="n"&gt;modifiedParent&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Postcode&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyAddress&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Address&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;CreditCard&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;postcode&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our code is now very close to an imperative style setter. In fact, by reversing the composition operator, from &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and switching the order of the modifiers, we've even been able to order the property access in the same way that an imperative programmer would be familiar with, from the outermost to the innermost property. &lt;em&gt;Using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is often frowned upon in general because it can be confusing, so use it at your own judgement.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-lenses"&gt;
  &lt;/a&gt;
  You just discovered Lenses üîç
&lt;/h1&gt;

&lt;p&gt;These things we've been calling "modifiers", well they're better known as lenses. Lenses are a better name for them because they're not actually doing any modification, they're just composable functions that focus on a specific part of a data structure. We can define functions like &lt;code&gt;get&lt;/code&gt;, typically called &lt;code&gt;view&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt;, usually called &lt;code&gt;setl&lt;/code&gt; (for set lens), that let us read or write the value that any lens points to because the structure of a lens is completely generic.&lt;/p&gt;

&lt;p&gt;There are also many more things that we can do with lenses, which is part of a broader topic called optics, which we haven't covered here. For instance we can easily work with data that might be missing, or focus our lens on specific parts of every element in a list.&lt;/p&gt;

&lt;p&gt;Lenses are also about more than just composable getters and setters. They also provide an abstraction barrier for our code. If we access data through a lens rather than directly it means that if we later refactor a data structure we only have to modify the lens and the rest of the code will remain unaffected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lenses-in-the-wild"&gt;
  &lt;/a&gt;
  Lenses in the wild üêó
&lt;/h1&gt;

&lt;p&gt;There are a few lens "conventions" that are probably worth pointing out at this stage, as it's how you'll likely see them written in the wild. This is all just syntactic sugar on top of what we've already discovered, such as things like special operators which just make them a bit more pleasant to write. Below is the same example from above, but written using the FSharpPlus lens library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: FSharpPlus"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;FSharpPlus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Lens&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- bring the lens operators in to scope&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// Lenses are usually named with a leading underscore&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We also usually just name after the property they point to&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// The &amp;lt;&amp;amp;&amp;gt; is just an infix version of map&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use the .-&amp;gt; as an infix version of setl&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;.-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use the ^. operator as an infix version of view&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="o"&gt;^.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to point out here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Typically lenses are named like &lt;code&gt;_propertyName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What we used to call &lt;code&gt;transformer&lt;/code&gt; we often just denote as &lt;code&gt;f&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Instead of writing &lt;code&gt;map&lt;/code&gt; it's common to write the lens using the &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/code&gt; operator. This is just a flipped infix version of &lt;code&gt;map&lt;/code&gt; and it lets us create the lens from a getter (to the left of the operator) and a setter (to the right of the operator).&lt;/li&gt;
&lt;li&gt;We can use the &lt;code&gt;.-&amp;gt;&lt;/code&gt; operator as an infix version of &lt;code&gt;setl&lt;/code&gt;, which gives us an even more imperative style looking setter.&lt;/li&gt;
&lt;li&gt;We can also use &lt;code&gt;.^&lt;/code&gt; instead of &lt;code&gt;view&lt;/code&gt; to get the value, which is a kind of analogous to the &lt;code&gt;.&lt;/code&gt; operator in OOP.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn? üßë‚Äçüéì
&lt;/h1&gt;

&lt;p&gt;Lenses allow us to write property accessors which we can compose to focus on different parts of a large data model. We can then pass them to functions like &lt;code&gt;view&lt;/code&gt; or &lt;code&gt;setl&lt;/code&gt; to actually view the data or set it.&lt;/p&gt;

&lt;p&gt;Lenses are also a great abstraction barrier that we can use to decouple our code from the specifics of our data models current structure. They also allow us do other useful transformations which we haven't gone into here. Lenses, and the broader topic of optics, is a large one, but with this intro you should find it much easier to explore what else they have to offer.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
  </channel>
</rss>
