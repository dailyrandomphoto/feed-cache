<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Ways to Give Better Feedback</title>
      <author>Kenneth Larsen</author>
      <pubDate>Fri, 16 Jul 2021 06:24:16 +0000</pubDate>
      <link>https://dev.to/kennethlarsen/3-ways-to-give-better-feedback-48l6</link>
      <guid>https://dev.to/kennethlarsen/3-ways-to-give-better-feedback-48l6</guid>
      <description>&lt;p&gt;Giving feedback to your peers can be extremely difficult if you do not plan it right. Thankfully, there are a set of tools that can drastically improve those skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-the-proper-format"&gt;
  &lt;/a&gt;
  1: Use the proper format
&lt;/h2&gt;

&lt;p&gt;"Your pull requests are really annoying to review!" is not feedback that is easy to accept or easy to act on. It is very confronting and blaming and thereby switches the focus away from solving the problem.&lt;/p&gt;

&lt;p&gt;Instead, feedback should follow an observing formula:&lt;/p&gt;

&lt;p&gt;Observation of behaviour + impact of the behaviour + question or request = actionable and specific feedback.&lt;/p&gt;

&lt;p&gt;The formula turns the feedback from something blaming into: "Over the last three weeks, I've noticed that you have created large pull requests without any descriptions or instructions. This more than doubles the review time needed and has led to five production bugs. Can you help me understand why you prefer these large pull requests?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-negative-feedback-should-be-given-with-a-growth-mindset"&gt;
  &lt;/a&gt;
  2: Negative feedback should be given with a growth mindset
&lt;/h2&gt;

&lt;p&gt;To ensure that people can use negative feedback, you must give it with a growth mindset. If the negative feedback does not have the goal of helping your colleague grow in that particular area, then it is not valuable feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-do-not-deliver-it-as-a-script"&gt;
  &lt;/a&gt;
  3: Do not deliver it as a script
&lt;/h2&gt;

&lt;p&gt;It might seem like a good idea to write down the feedback and read it to your colleague, but it will often come off as ungenuine. Feedback is about being present and listening, not delivering a presentation. &lt;/p&gt;

&lt;p&gt;With these three steps, you can easily take your feedback skills to the next level.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Huston, Therese; Let's Talk: Make Effective Feedback Your Superpower&lt;/p&gt;

&lt;p&gt;Hogan, Lara; Resilient Management&lt;/p&gt;

</description>
      <category>feedback</category>
      <category>management</category>
      <category>leadership</category>
      <category>reviews</category>
    </item>
    <item>
      <title>How to utilise JSDoc comment tags so that Visual Studio Code intellisense works great</title>
      <author>Dharmen Shah</author>
      <pubDate>Fri, 16 Jul 2021 06:09:59 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-utilise-jsdoc-comment-tags-so-that-visual-studio-code-intellisense-works-great-3ho4</link>
      <guid>https://dev.to/shhdharmen/how-to-utilise-jsdoc-comment-tags-so-that-visual-studio-code-intellisense-works-great-3ho4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#types-in-javascript"&gt;
  &lt;/a&gt;
  Types in JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a loosely typed and dynamic language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// foo is now a number&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// foo is now a string&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// foo is now a boolean&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#intellisense-in-vs-code"&gt;
  &lt;/a&gt;
  Intellisense in VS Code
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code's intellisense will only work, if it understands the &lt;code&gt;type&lt;/code&gt; of of your code.&lt;/p&gt;

&lt;p&gt;In above example, after you write first line, &lt;code&gt;let foo = 42;&lt;/code&gt; it will show you methods of a number:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HSr3WmCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372660432/JKt16SWHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HSr3WmCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372660432/JKt16SWHX.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if you assign a JSON, which is going to hold many properties like &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;createdOn&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSyWUenA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372701424/76Qwg8gIF9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSyWUenA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372701424/76Qwg8gIF9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's also working fine. But, it's unlikely that your variable is going to hold values with initialization. So, now if you check for blank JSON, intellisense will stop working, because now VS code doesn't know the types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-z0Ngbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372713349/nFnAUNqsN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-z0Ngbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372713349/nFnAUNqsN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without proper intellisense, we often make typos, call the method which doesn't exist or even try to access the properties of an objects by a random guess.&lt;/p&gt;

&lt;p&gt;To handle such and more complex scenarios, and make sure intellisense works right for those, we will use &lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt;'s &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt; and &lt;code&gt;@typedef&lt;/code&gt; block tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsdoc-to-the-rescue"&gt;
  &lt;/a&gt;
  JSDoc to the rescue
&lt;/h2&gt;

&lt;p&gt;JSDoc comes with lots of tags, you can checkout them all on it's website: &lt;a href="https://jsdoc.app/"&gt;https://jsdoc.app/&lt;/a&gt;. But for this article, we are going to focus on below 3 tags:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-param.html"&gt;&lt;code&gt;@param&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-type.html"&gt;&lt;code&gt;@type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-typedef.html"&gt;&lt;code&gt;@typedef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#-raw-param-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@param&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@param&lt;/code&gt; tag provides the name, type, and description of a function parameter.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@param&lt;/code&gt; tag requires you to specify the name of the parameter you are documenting. You can also include the parameter's type, enclosed in curly brackets, and a description of the parameter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-param.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {string} somebody
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somebody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;somebody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After above code, VS code's intellisense will work great whenever you try to call &lt;code&gt;sayHello&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4k4nO8ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372756661/aJe_pj1jm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4k4nO8ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372756661/aJe_pj1jm.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can look at more examples at &lt;a href="https://jsdoc.app/tags-param.html#examples"&gt;https://jsdoc.app/tags-param.html#examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-type-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@type&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@type&lt;/code&gt; tag allows you to provide a type expression identifying the type of value that a symbol may contain, or the type of value returned by a function. You can also include type expressions with many other JSDoc tags, such as the &lt;code&gt;@param&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;A type expression can include the JSDoc namepath to a symbol (for example, &lt;code&gt;myNamespace.MyClass&lt;/code&gt;); a built-in JavaScript type (for example, &lt;code&gt;string&lt;/code&gt;); or a combination of these. You can use any &lt;a href="https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-expressions"&gt;Google Closure Compiler type expression&lt;/a&gt;, as well as several other formats that are specific to JSDoc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-type.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a look at example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {Array} */&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For above code, typing &lt;code&gt;foo.&lt;/code&gt; will load all &lt;code&gt;Array&lt;/code&gt;'s properties and methods:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KTK9wwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372772162/tMU-pXRxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KTK9wwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372772162/tMU-pXRxg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More examples at &lt;a href="https://jsdoc.app/tags-type.html#examples"&gt;https://jsdoc.app/tags-type.html#examples&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-typedef-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@typedef&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@typedef&lt;/code&gt; tag is useful for documenting custom types, particularly if you wish to refer to them repeatedly. These types can then be used within other tags expecting a type, such as &lt;code&gt;@type&lt;/code&gt; or &lt;code&gt;@param&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-typedef.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tag is really helpful, it helps us to shape any complex type. Let's take a look at example.&lt;/p&gt;

&lt;p&gt;This example defines a more complex type, an object with several properties, and sets its namepath so it will be displayed along with the class that uses the type. Because the type definition is not actually exposed by the function, it is customary to document the type definition as an inner member.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/toast.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @typedef {Object} Toast
 * @property {string} id
 * @property {boolean} closed - Indicates whether user has close the toast.
 * @property {Date} generatedOn - Indicates when the toast was generated.
 * @property {string} message - toast content.
 * @property {"warn" | "info"} type -  Indicates type of toast.
 * Also useful to show different icons.
 */&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A function for showing toast
 * @param {Toast} toast - {@link toast} object
 * containing all components of the toast.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the breakdown of above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line:

&lt;ol&gt;
&lt;li&gt;We first indicated that we want to create a custom type using &lt;code&gt;@typedef&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Then we indicated that it's going to be an &lt;code&gt;Object&lt;/code&gt;. You can also create simpler custom type using primitive date types, for example &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And lastly, we named this type as &lt;code&gt;Toast&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now, as &lt;code&gt;Toast&lt;/code&gt; is going to be an &lt;code&gt;Object&lt;/code&gt;, in rest of the comments, we defined what are it's &lt;code&gt;properties&lt;/code&gt; going to be using &lt;code&gt;@property&lt;/code&gt; tag. You can learn more about &lt;code&gt;@property&lt;/code&gt; tag &lt;a href="https://jsdoc.app/tags-property.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now if you try to call &lt;code&gt;showToast&lt;/code&gt;, VS code will do it's magic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxO1B22n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372818836/rFMwqFCUy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxO1B22n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372818836/rFMwqFCUy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, this is not enough. In practical scenarios, you would be generating &lt;code&gt;Toast&lt;/code&gt;s in different files and calling &lt;code&gt;showToast&lt;/code&gt; from there. You can export and import &lt;code&gt;showToast&lt;/code&gt; in other files, but what about &lt;code&gt;Toast&lt;/code&gt; type definition?&lt;/p&gt;

&lt;p&gt;You can also import type definition the same way you import bindings from another module. But as types are created in comments, you need import them in comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/home.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showToast&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./toast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @returns {import("./toast").Toast[]}
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getToasts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allToasts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getToasts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;allToasts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just to emphasis, here's how we imported &lt;code&gt;Toast&lt;/code&gt; type definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @returns {import("./toast").Toast[]}
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about &lt;code&gt;@typedef&lt;/code&gt; at &lt;a href="https://jsdoc.app/tags-typedef.html"&gt;https://jsdoc.app/tags-typedef.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how JSDoc block tags, &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt; and &lt;code&gt;@typedef&lt;/code&gt; can help us to achieve maximum out of VS Code's intellisense and code faster without getting into un-wanted issues.&lt;/p&gt;

&lt;p&gt;That's it! Thanks for reading. Let me know your thoughts and feedbacks in comments section.&lt;/p&gt;

&lt;p&gt;And yes, always believe in yourself 🌅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjRdMZ4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626373183525/KRCCwEHxN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjRdMZ4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626373183525/KRCCwEHxN.jpeg" alt="joshua-earle-JAwzCW0JpIw-unsplash.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@joshuaearle?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua Earle&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/faith?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>jsdoc</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 17, Summary of the week and Insertion sort.</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 16 Jul 2021 05:44:53 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-17-summary-of-the-week-and-insertion-sort-4bi0</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-17-summary-of-the-week-and-insertion-sort-4bi0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-the-insertion-sort-code-then-write-a-program-to-change-capital-and-small-cases"&gt;
  &lt;/a&gt;
  🤟Today we will learn about the insertion sort code, then write a program to change capital and small cases.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-14-basic-exception-and-error-handling-using-try-except-5f38"&gt;Day 14&lt;/a&gt;- we covered the &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; statements, and basic exception handling. Advanced exception handling and types of exceptions, user defined exceptions is for later.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;Day 15&lt;/a&gt;- We solved some creative questions based on &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; and learnt about nesting them. We also saw one really challenging question related to &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt; &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6"&gt;Day 16&lt;/a&gt; We solved more questions on lists now with the added power of &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt;. We covered questions like fractal lists, alphabetical order of lists and reversing lists.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#insertion-sort"&gt;
  &lt;/a&gt;
  Insertion sort.
&lt;/h2&gt;

&lt;p&gt;Insertion sort is a simple sorting algorithm. It works similar to the way you sort cards. If you are new to this algorithm, check out &lt;a href="https://www.geeksforgeeks.org/insertion-sort/"&gt;this link&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;#key = a[i]
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;#swap
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
Logic-
Set the key equal to the first unsorted value.
Compare the key and the sorted elements.
Move the key to the required position.
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code enclosed in block comments  &lt;code&gt;'''&lt;/code&gt; is block comments. Whenever working in teams, such documentation is of critical. More about it &lt;a href="https://dev.to/aatmaj/document-today-or-repent-tommorrow-1mg8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who are new to Data structures and algorithms, please check out this course on dev.to.-&lt;a href="https://dev.to/ayabouchiha/series/13547"&gt;Data structure &amp;amp; algorithms Series' Articles&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We did the alphabetical ordering yesterday(In case you missed it- &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6"&gt;here&lt;/a&gt;) Replace the sorted() method used in it with insertion sort. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/81fab3a1d869f4d75a0caecae1cf2abfbaff31f6/Basic/Day%2017/Exercise%20solutions/Exercise%201.py"&gt;Answer here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Sample question&lt;br&gt;
1) &lt;strong&gt;Capital to Small&lt;/strong&gt; Write a program to turn capital letters into small case and small case to  capital case in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a letter "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#65=A
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;#65=A, 97=a 
&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#65=A
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error. Please enter only characters."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a letter a
Please enter a letter B
Please enter a letter c
Please enter a letter D
A
b
C
d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of error handling using &lt;code&gt;if-else&lt;/code&gt; statements.&lt;/p&gt;







&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;




&lt;p&gt;One more way to ask any doubts is by forking the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Doubts"&gt;repo here&lt;/a&gt; and sending Pull request of your doubt.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for.... &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAYS💥&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-me-for-updates-on-github-visit-the-learning-python-repo-made-for-this-course"&gt;
  &lt;/a&gt;
  Follow me for updates on &lt;a href="https://github.com/Aatmaj-Zephyr"&gt;Github&lt;/a&gt;. Visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;learning Python repo&lt;/a&gt; made for this course.
&lt;/h3&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Tìm hiểu địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng!</title>
      <author>Showroom Hùng Tuý</author>
      <pubDate>Fri, 16 Jul 2021 04:35:55 +0000</pubDate>
      <link>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</link>
      <guid>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</guid>
      <description>&lt;p&gt;&lt;em&gt;Cũng giống như những không gian nội thất khác, việc chọn các sản phẩm nội chất cho phòng bếp đặc biệt là bàn ăn cũng cần được lựa chọn một cách kỹ lưỡng, muốn được như vậy chúng ta cần tìm được một địa chỉ cung cấp uy tín .Vậy hiện nay đâu là địa chỉ cung cấp &lt;/em&gt;&lt;em&gt;bộ bàn ăn cao cấp, chất lượng, vừa đẹp lại có được độ bền tốt trong quá trình sử dụng lâu dài? Hãy cùng &lt;/em&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/noi-that-pc35500.html"&gt;nội thất cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;em&gt; Hùng Tuý tìm hiểu ngay trong bài viết sau đây.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Một số cách lựa chọn bàn ăn phù hợp với căn bếp&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Khi mua bàn ăn, rất nhiều người thường lựa chọn theo cảm tính. Nhưng đây là cách lựa chọn hoàn toàn sai lầm. Chúng ta nên mua bộ &lt;/span&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/ban-an-pc20281.html"&gt;bàn ăn cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;span&gt; dựa vào kích thước của không gian nhà bếp. Với những không gian không quá rộng chúng ta không nên chọn những mẫu bàn ăn có kích thước lớn. Bởi như vậy sẽ khiến cho căn bếp trở nên chật chội, làm ảnh hưởng đến quá trình nấu nướng, di chuyển.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Nội thất phòng ăn cao cấp nhập khẩu châu âu chính hãng tại Hà Nội" src="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nên lựa chọn bàn ăn sao cho phù hợp với không gian&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Tốt nhất, các bạn nên lựa chọn những bộ bàn ăn có kích thước vừa tầm sao cho thừa ra khoảng 1 mét phía sau các ghế ngồi để việc di chuyển, sinh hoạt nấu nướng trở nên dễ dàng hơn.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Hiện nay trên thị trường có rất nhiều địa chỉ cung cấp những bộ bàn ăn với nhiều kiểu dáng, mẫu mã khác nhau. Tuy nhiên để tìm được một địa chỉ uy tín thì không phải ai cũng biết. Thực tế cho thấy, hiện nay hàng giả hàng nhái đang được trà trộn rất nhiều trên thị trường. Bởi vậy mà làm sao có thể được bộ bàn ăn cao cấp chất lượng tốt đang là câu hỏi của rất nhiều người.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Đại gia&amp;amp;quot; Hùng Túy có đứng sau An Quý Hưng trong game Vinaconex?" src="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hùng Túy hiện đang là địa chỉ được nhiều người lựa chọn&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Gợi ý cho bạn, hiện nay Hùng Túy đang là địa chỉ cung cấp bộ bàn ăn uy tín, được rất nhiều khách hàng đánh giá cao. Mỗi một sản phẩm tại Hùng Tuý đều được đảm bảo 100% về chất lượng. Với nhiều năm trong nghề, Hùng Tuý luôn đem đến cho người tiêu dùng những sản phẩm có chất lượng tốt nhất. Cùng với đó, khi mua hàng khách hàng sẽ được thỏa sức lựa chọn những mẫu sản phẩm khác nhau, được mua hàng với giá cạnh tranh cùng đội ngũ nhân viên tư vấn nhiệt tình. Chính vì vậy mà Hùng Tuý luôn là sự lựa chọn hàng đầu của đông đảo người dùng.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Lời kết&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Chắc hẳn, thông qua bài viết này các bạn cũng đã tìm được cho mình một địa chỉ cung cấp &lt;/span&gt;&lt;strong&gt;&lt;a href="https://www.dailymotion.com/noithatcaocaphungtuy"&gt;bàn ăn cao cấp nhập khẩu&lt;/a&gt; &lt;/strong&gt;&lt;span&gt;chất lượng. Hy vọng những thông tin trên hữu ích cho bạn, hãy trở thành người tiêu dùng thông thái để có thể chọn cho gia đình mình bộ bàn ăn đẹp có chất lượng tốt nhất nhé&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>LinkedList Questions: Middle Element of Linked List - Optimal Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 16 Jul 2021 04:34:43 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</link>
      <guid>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ❓&lt;/li&gt;
&lt;li&gt;Possible Explanation 📝&lt;/li&gt;
&lt;li&gt;Documented C++ Code 🧹&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ⌛🌌&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given a non-empty, singly linked list with head node &lt;code&gt;head&lt;/code&gt;, return a middle node of the linked list.&lt;/p&gt;

&lt;p&gt;If there are two middle nodes, return the second middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/middle-of-the-linked-list/"&gt;https://leetcode.com/problems/middle-of-the-linked-list/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kathanvakharia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuqECyTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhbJL83l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/458861/ab6297f8-b3bc-440d-bcba-e002322f382a.jpg" alt="kathanvakharia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kathanvakharia/middle-element-of-linked-list-naive-approach-2589" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;LinkedList Questions: Middle Element of Linked List - Naive Approach&lt;/h2&gt;
      &lt;h3&gt;Kathan Vakharia ・ Jul 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linkedlist&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I hope you have read the previous article because I want to relate the ideas of both approaches rather than making you feel, an optimal solution is a completely new thing! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👀 Observation: If you recall from the last post, we can reach the middle node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember the above point, I'll come to this point after we see the algorithm. &lt;/p&gt;

&lt;p&gt;Here's the algorithm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize two pointers, &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; both pointing to &lt;code&gt;head&lt;/code&gt; initially.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move &lt;code&gt;fast&lt;/code&gt; double the speed than &lt;code&gt;slow&lt;/code&gt; untill &lt;code&gt;fast&lt;/code&gt; becomes &lt;strong&gt;NULL&lt;/strong&gt; or it has reached the last node.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//pseudo code
while fast!=NULL and fast-&amp;gt;next != NULL
        fast = fast-&amp;gt;next-&amp;gt;next
        slow = slow-&amp;gt;next
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;return &lt;code&gt;slow&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-does-this-work"&gt;
  &lt;/a&gt;
  Why does this work?
&lt;/h3&gt;

&lt;p&gt;First of all, we can either have an &lt;em&gt;odd&lt;/em&gt; length linkedlist or an &lt;em&gt;even&lt;/em&gt; length LinkedList.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case 1: Odd length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will point to the last node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Case 2: Even Length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will become &lt;strong&gt;NULL&lt;/strong&gt; after traversing the entire list in &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So no matter what the type of LinkedList, one of the loop termination conditions will hit after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations, and by that time &lt;code&gt;slow&lt;/code&gt; would be pointing to the required middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" alt="Image for explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;  &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;middleNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;//make fast reach the end of the list by moving it double time the slow&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//* now slow will point to the required node&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are doing O(N/2) iterations which asymptotically is the same as O(N)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-o1"&gt;
  &lt;/a&gt;
  Space Complexity: O(1)
&lt;/h3&gt;

&lt;p&gt;We didn't use any extra space.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>15 CSS3 Best practices of  for beginners to pro.</title>
      <author>menomanabdulla</author>
      <pubDate>Fri, 16 Jul 2021 04:12:32 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d</link>
      <guid>https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d</guid>
      <description>&lt;p&gt;Whether you are a beginner or an expert in Frontend Development it is important to follow some best practices in order to keep your cascading style-sheet (CSS) optimized and organized. &lt;/p&gt;

&lt;p&gt;CSS guy is an artist, as an artist you should have some unique working strategy that’s make your action while working more enjoyable and fun. Here is some tips I share, you could follow and write your style as pro. Wow! let’s get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#01-dont-put-everything-in-to-one-css-file"&gt;
  &lt;/a&gt;
  01. Don't put everything in to one CSS file
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Case-01:&lt;/strong&gt; One large CSS file leads to fewer HTTP requests, &lt;br&gt;
which can improve performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case-02:&lt;/strong&gt; Several smaller file leads to easier organization &lt;br&gt;
which will make development and maintenance cheaper and easier.&lt;/p&gt;

&lt;p&gt;Now what should our strategy for both scenarios? That’s a million &lt;br&gt;
dollars question. Okay let me clear your confusion; we can follow &lt;br&gt;
the win-win rules. &lt;/p&gt;

&lt;p&gt;“We could use multiple style sheets to keep things better &lt;br&gt;
organized, and then compress them into one file before putting &lt;br&gt;
them on the site, to improve performance.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#02-follow-topdown-approach-for-organize-your-stylesheet"&gt;
  &lt;/a&gt;
  02. Follow top-down approach for organize your stylesheet
&lt;/h3&gt;

&lt;p&gt;It always makes sense to lay your stylesheet out in a way that allows you to quickly find parts of your code. I recommend a top-down format that tackles styles as they appear in the source code. So an example stylesheet might be ordered like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uX56qs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0x2sop2trqb0xa4sev0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uX56qs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0x2sop2trqb0xa4sev0.png" alt="Follow top-down approach for organize your stylesheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#03-make-ui-components"&gt;
  &lt;/a&gt;
  03. Make UI components
&lt;/h3&gt;

&lt;p&gt;Tried to make some prebuild UI component that you may use in future just simply plug a class name and have some properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#04-comment-your-css"&gt;
  &lt;/a&gt;
  04. Comment your CSS
&lt;/h3&gt;

&lt;p&gt;For better readability and organized coding, code commenting play insane role. Code commenting helps code refactor in future and helps other developer to understand the project codebase. Code commenting is always good practice. Those developer who write code with proper commenting, have huge market value. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k9921bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcs333jmtr7bzb5a300r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k9921bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcs333jmtr7bzb5a300r.png" alt="Comment your CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#05-how-to-write-consistent-css"&gt;
  &lt;/a&gt;
  05. How to write consistent CSS
&lt;/h3&gt;

&lt;p&gt;Consistent CSS is important for team collaboration as well as in large project. At the beginning part of the project you can set some rules for maintain throughout to your entire stylesheet. It will help you to write consistent CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#06-css-namespacing"&gt;
  &lt;/a&gt;
  06 CSS namespacing
&lt;/h3&gt;

&lt;p&gt;CSS namespacing helps you to create a structure that governs how CSS properties get written. If you follow the convention, you’ll be able to write CSS without being afraid of side effects. &lt;br&gt;
Here’s a list of namespaces I use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;.l-: layouts&lt;/li&gt;
&lt;li&gt;.o-: objects&lt;/li&gt;
&lt;li&gt;.c-: components&lt;/li&gt;
&lt;li&gt;.js: JavaScript hooks&lt;/li&gt;
&lt;li&gt;.is-|.has-: state classes&lt;/li&gt;
&lt;li&gt;.t1|.s1: typography sizes&lt;/li&gt;
&lt;li&gt;.u-: utility classes&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#07-use-bem-or-block-elements-modifier"&gt;
  &lt;/a&gt;
  07. Use BEM or Block elements modifier
&lt;/h3&gt;

&lt;p&gt;Have you worked on large websites that spans more than a few pages? If you did, you probably realized the horrors of not conforming to a robust CSS architecture. You probably would also have researched on ways to write maintainable CSS.&lt;/p&gt;

&lt;p&gt;BEM convention is the good choice for well-maintained CSS architecture. If you’ve never heard of BEM before, it stands for block, element and modifier. It looks incredibly ugly when you first feast your eyes on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA0rEMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yjsyzehh85suhy88jos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA0rEMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yjsyzehh85suhy88jos.png" alt="Use BEM or Block elements modifier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hated BEM to a point where I didn’t even give it a chance when I first got to know about it. I can’t remember what made me try BEM, but I realized how powerful it is to work with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#08-css-class-nesting-or-complex-selectors"&gt;
  &lt;/a&gt;
  08. CSS class nesting or complex selectors
&lt;/h3&gt;

&lt;p&gt;There are two major problems with using complex selectors. First, your increased specificity will not only make it harder to later rewrite existing rules, but also increase the time it takes for the browser to match selectors.&lt;/p&gt;

&lt;p&gt;When your browser is trying to interpret selectors and decide which element it matches, they go from right to left. This is faster in terms of performance than doing the other way around. Let’s take the selector below as an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWQMQCNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j86mo2bao510vuavrr4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWQMQCNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j86mo2bao510vuavrr4f.png" alt="CSS class nesting or complex selectors "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your browser will first start from the span. It will match all the span tags then go to the next one. It will filter out the spans that are inside a .selector class, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eHvxV8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odoea18q8pt8j4e2emnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eHvxV8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odoea18q8pt8j4e2emnn.png" alt="CSS class nesting or complex selectors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't recommend using tags for CSS selectors because it will match for every tag. While the difference can only be measured in a fraction of a millisecond, little things add up. More importantly, it’s good practice to reduce complexity and be specific.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#09-use-css-preprocessor-like-scss-sass-and-less"&gt;
  &lt;/a&gt;
  09. Use CSS preprocessor like SCSS, SASS and LESS
&lt;/h3&gt;

&lt;p&gt;For keeping your CSS DRY(Don’t repeat yourself), use CSS preprocessor like SCSS,SASS or LESS. The biggest benefit to using these preprocessor is that you can define your re-usable code at the top and reuse it by @ include and @ extend throughout all of your CSS.&lt;/p&gt;

&lt;p&gt;CSS preprocessor will make your life easier to write modular based CSS, it’s helps to write more organized and more consistent  cascading stylesheet. BEM naming convention with CSS namespacing and CSS preprocessor is perfect combo for robust CSS architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-reduce-redundancy"&gt;
  &lt;/a&gt;
  10. Reduce redundancy
&lt;/h3&gt;

&lt;p&gt;Sometimes it’s hard to spot redundancy, especially when repeating rules don’t follow the same order in both selectors. But if your classes differ in just one or two rules it’s better to outsource those rules and use them as an extra class, instead of this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-vertically-align-any-elements-using-only-css"&gt;
  &lt;/a&gt;
  11. Vertically align any elements using only CSS
&lt;/h3&gt;

&lt;p&gt;For vertically align any elements modern CSS introduce CSS flex and grid system. Those are awesome tolls for dynamically centered any elements.&lt;/p&gt;

&lt;p&gt;By Flex: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvrko2oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9qza6ttnhll2xno83y7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvrko2oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9qza6ttnhll2xno83y7.png" alt="Vertically align any elements using only CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By Grid: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ve4ATdtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xotv1wt9vgow0146hux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ve4ATdtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xotv1wt9vgow0146hux.png" alt="Vertically align any elements using only CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-try-to-use-shorthand-css-properties"&gt;
  &lt;/a&gt;
  12. Try to use shorthand CSS properties
&lt;/h3&gt;

&lt;p&gt;There is lots of way, you can ménage your style but try to stick with best approach. Always try to use CSS shorthand, it will reduce your code as well as give your stylesheet a nice and good looking shape. &lt;/p&gt;

&lt;p&gt;Bad Practice: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWgyvQpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sozcg8pukc06lfv4bc5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWgyvQpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sozcg8pukc06lfv4bc5r.png" alt="Try to use shorthand CSS properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good Practice: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_oXYwCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gy5crc21eq9m295qxgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_oXYwCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gy5crc21eq9m295qxgb.png" alt="Try to use shorthand CSS properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-use-rems-or-ems"&gt;
  &lt;/a&gt;
  13. Use rem’s or em’s
&lt;/h3&gt;

&lt;p&gt;Using rem’s or em’s is more dynamic way instead of using pixels. Try to use rem’s or em’s rather than pixels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-avoid-important"&gt;
  &lt;/a&gt;
  14. Avoid !important
&lt;/h3&gt;

&lt;p&gt;For avoid code collusion and if you don’t want to break normal flow of browser behavior with your CSS don’t ever use !important. It’s really hard to find-out conflict within !important and refactor the whole codebase in large scale application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-use-mobile-first-development-approach"&gt;
  &lt;/a&gt;
  15. Use mobile first development approach
&lt;/h3&gt;

&lt;p&gt;A mobile-first approach to styling means that styles are applied first to mobile devices.&lt;br&gt;
Concern with: &lt;br&gt;
1.Min-Width Media Queries&lt;br&gt;
2.Progressive Enhancement (CSS &amp;amp; javaScript)&lt;br&gt;
3.Content (Not Device Width) Determines Breakpoints&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last Words
&lt;/h3&gt;

&lt;p&gt;I hope you like my CSS3 coding guidelines and front end web development best practices. You can check my &lt;a href="https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb"&gt;15 Best practices of HTML5 for beginners&lt;/a&gt; for give your markup good shape. If you appreciate it or find any errors let me know in comments. Thanks for this journey &amp;amp; Happy Coding.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Updates on dev-to clone in Angular</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 16 Jul 2021 03:52:45 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-2gmi</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-2gmi</guid>
      <description>&lt;p&gt;Last week I created a header component. It was just HTML and it was in the following position.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koLSdOr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6cickk8uxz6u2gxdi9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koLSdOr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6cickk8uxz6u2gxdi9q.png" alt="Dev.to clone Header"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This week I stated adding the body of the dev.to website I used a component to handle all the margins and padding on the body of the dev.to website. And created all body sub-elements as the the children of this Component in routing.&lt;/p&gt;

&lt;p&gt;To start with body sub-components I created a home module I created a new module for homepage because people may open other pages before visit our home page so putting our homepage in a different module other than app.module made sense for lazy loading. If your has to be visited before visiting any other pages use home module in app module.&lt;/p&gt;

&lt;p&gt;I divided home page into three parts sidebar, articles, extra-info. On careful examination of the dev.to sidebar I divided it into 4 components sidebar-primary, sidebar-social-links, sidebar-tags, sidebar-advertisement. The sidebar-primary will contain all the default options in the sidebar. sidebar-social-links contains all the social links that open in dev.to when clicked on more option in sidebar. Sidebar tags contains tags on dev.to and sidebar-advertisement contain the ad at the bottom of dev.to sidebar.&lt;/p&gt;

&lt;p&gt;After building the Basic HTML structure of dev.to sidebar I moved onto the articles section. It is also divided into 3 component featured article, article list, header. &lt;/p&gt;

&lt;p&gt;Here we start the use of the &lt;a href="https://docs.forem.com/api/"&gt;dev.to API&lt;/a&gt;. This API is divided into 2 parts one which requires a key one which are open so first I will build everything possible to build with the open API and after that we will build a login where you have to put your key and the key will be stored in localStorage and we will run API requiring API token from there. The first question that should come to your mind is shouldn't that be done first. Later on it will require a lot of refactoring. My answer is I want to do refactoring basically in most test projects lot of refactoring is done so we will intentionally make some mistakes along the way to see how we handle refactoring and updating features. I think half of the work done in software is refactoring or updating old features.&lt;/p&gt;

&lt;p&gt;We used the articles open API(&lt;a href="https://dev.to/api/articles"&gt;https://dev.to/api/articles&lt;/a&gt;) to get the list of articles. We created an articles-api service which will fetch the data and a article-store service which uses component store for managing the state of the articles. We will use Michael Hadly &lt;a href="https://rx-angular.io/"&gt;rx-angular&lt;/a&gt; push pipe as it is more performant and does not return null when used. I will go into details of async pipe and push pipe some other time.&lt;/p&gt;

&lt;p&gt;After doing all this I reached at the following state.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqIaOuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxpiqtm0e39df9rmu8ve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqIaOuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxpiqtm0e39df9rmu8ve.png" alt="Dev.to Sidebar and article data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next week I will add the article section HTML, CSS and add a tag store, tags API for the tags section we created in the sidebar. If you want to know any details regarding anything comment below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honourable-mention-and-regarding-contributions"&gt;
  &lt;/a&gt;
  Honourable Mention and regarding contributions:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VakilSunny"&gt;Sunny Vakil&lt;/a&gt; wanted to contribute to this project. Thanks Sunny for your proposal but I work on this on Thursday's only. I don't have much time to manage the project. I proposed if anyone wants to contribute add a feature request in the issues. I will comment I accept on it and then you can build the feature I won't build it but you will have to release an article on how you build that feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commits-done-with-this-update"&gt;
  &lt;/a&gt;
  Commits done with this update
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/f548d6b7a027920dabf09fc56d732d307ba62e53"&gt;dev.to sidebar styling and html done&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/20e44dd9a0b045064d738ff9ad51d315db25ec64"&gt;readme changed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/9fcf4f65429158929176443d9da715b19ad47282"&gt;fixed styling and folder structure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/564c152de18a97223098e43f13157da8988c0423"&gt;Getting articles data from dev.to api&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to Enforce Coding Standards Using Husky Pre-Commit Hooks</title>
      <author>saransh kataria</author>
      <pubDate>Fri, 16 Jul 2021 03:34:55 +0000</pubDate>
      <link>https://dev.to/saranshk/how-to-enforce-coding-standards-using-husky-pre-commit-hooks-4oh1</link>
      <guid>https://dev.to/saranshk/how-to-enforce-coding-standards-using-husky-pre-commit-hooks-4oh1</guid>
      <description>&lt;p&gt;Having consistency and enforcing coding standards becomes very important as an application scales. It becomes important to automate the process to ensure quality standards and make the application maintainable. ESLint and Prettier can be used to define these standards, but we need a tool to enforce them as well. Husky provides that functionality by providing pre-commit git hooks which can be configured as per our needs.&lt;/p&gt;

&lt;p&gt;These standards can also be enforced by using gated checks on pull requests at the CI level, but Husky is an alternative to do it at the local machine level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-husky"&gt;
  &lt;/a&gt;
  What is Husky?
&lt;/h2&gt;

&lt;p&gt;Husky is an npm package to make managing Git hooks easy. When initialized with Git, it enables a feature called hooks (no correlation with react hooks, in case you were wondering).&lt;/p&gt;

&lt;p&gt;It provides pre-push, pre-rebase, pre-commit and other similar hooks. These hooks allow a mechanism to perform an action before one of the git commands is run.&lt;/p&gt;

&lt;p&gt;To view a list of all the hooks in a project, we can run:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls .git/hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A list of all git hooks and their usages can be found &lt;a href="https://git-scm.com/docs/githooks"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our purpose, we need to run the linter and formatter before someone creates a commit. So we will be using the pre-commit git hook.&lt;/p&gt;

&lt;p&gt;Husky ensures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hooks are shared across machines (installed using configurations in the package.json)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks are created on local developer machines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks run when a git command is executed (before it’s execution)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enforce checks are in place to fail git command execution if criteria are not met&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-configuring-husky"&gt;
  &lt;/a&gt;
  Installing and configuring Husky
&lt;/h2&gt;

&lt;p&gt;We install husky usiing the command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D husky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Configuring husky requires adding a husky key to the root of the project’s package.json:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"husky": {
  "hooks": {
    "pre-commit": "",  // pre-commit command
    "pre-push": "",    // pre-push command
    "...": "..."
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The commands can be anything we want to run before the corresponding git action.&lt;/p&gt;

&lt;p&gt;If we have npm scripts for running prettier and ESLint set up as:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "prettier": "prettier --config .prettierrc 'src/**/*.{js,jsx,css}' --write",
    "lint": "eslint . --ext .js",
    ...
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can configure husky to run those before a commit happens be:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"husky": {
    "hooks": {
      "pre-commit": "npm run prettier &amp;amp;&amp;amp; npm run lint"
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This ensures that a commit cannot be made without having code that is formattted as well as enforces the coding standards set using ESLint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Instead of running linting on the complete project, check out the package &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;, which runs the linter only on staged files. This reduces the time it takes to lint the project.&lt;/p&gt;

&lt;p&gt;Using husky and git pre-commit hooks, we can thus enforce coding standards across our projects without any manual interventions. Let us know if you have any questions or other linting tips in the comments below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/javascript/enforcing-coding-standards-husky-pre-commit-hooks/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on June 5, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Node v16.5.0 is out!</title>
      <author>Siddharth</author>
      <pubDate>Fri, 16 Jul 2021 03:23:34 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/node-v16-5-0-is-out-d9a</link>
      <guid>https://dev.to/siddharthshyniben/node-v16-5-0-is-out-d9a</guid>
      <description>&lt;p&gt;&lt;a href="https://nodejs.org/en/blog/release/v16.5.0/"&gt;Node v16.5.0 (Current)&lt;/a&gt; released a few days ago – the main change is &lt;em&gt;experimental&lt;/em&gt; support for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API"&gt;Web Streams API&lt;/a&gt;. You need to import from &lt;code&gt;'stream/web'&lt;/code&gt; to use it, and it will give you a warning when it's used. &lt;code&gt;npm&lt;/code&gt; also has released a new version – v7.19.1 – and there's a lot of tweaks and fixes in there.&lt;/p&gt;

</description>
      <category>news</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Um pouco do que aprendi como Dev em 3 anos</title>
      <author>Victor</author>
      <pubDate>Fri, 16 Jul 2021 02:35:19 +0000</pubDate>
      <link>https://dev.to/victorvhoc/um-pouco-do-que-aprendi-como-dev-em-3-anos-dfo</link>
      <guid>https://dev.to/victorvhoc/um-pouco-do-que-aprendi-como-dev-em-3-anos-dfo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#quem-sou-eu"&gt;
  &lt;/a&gt;
  Quem sou eu
&lt;/h2&gt;

&lt;p&gt;Prazer meu nome é Victor, sou desenvolvedor Front-End e tenho 24 anos, e como o titulo sugere esse post contém algumas dicas de coisas que aprendi ao longo de 3 anos como Front-End.&lt;br&gt;
Inspirado no &lt;a href="https://twitter.com/Willian_justen?s=20"&gt;@Willian_justen&lt;/a&gt; enquanto escrevo esse post estou ouvindo o álbum &lt;a href="https://open.spotify.com/album/56zNLfYYAv67MYDjTWsZ7w?si=TBg6GnJLSnGuGUEM2gmEZA"&gt;III&lt;/a&gt; da &lt;a href="https://twitter.com/bandatopaz?s=20"&gt;@bandatopaz&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pe%C3%A7a-ajuda"&gt;
  &lt;/a&gt;
  Peça ajuda
&lt;/h3&gt;

&lt;p&gt;Independente de quanto tempo de carreira você tem, sempre vai existir algo que você não sabe, e tá tudo bem com isso, é pra isso que você tem times, comunidades e tanta gente compartilhando conhecimento, se não sabe como faz algo pergunte a alguém que sabe ou que você acha que sabe, o importante é não ficar travado por não saber e ter medo de pedir ajuda.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saiba-pesquisar"&gt;
  &lt;/a&gt;
  Saiba pesquisar
&lt;/h3&gt;

&lt;p&gt;Um ponto importante é saber como e onde pesquisar, é algo que você vai precisar fazer com alguma frequência, seja para estudar algo novo, para entender como resolver um bug, a pesquisa é frequente e por isso é importante saber como e onde pesquisar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saiba-ler-mensagens-de-erro"&gt;
  &lt;/a&gt;
  Saiba ler mensagens de erro.
&lt;/h3&gt;

&lt;p&gt;Uma das coisas que mais me deixavam perdido no começo eram mensagens de erro, pareciam não fazer muito sentido, e as vezes realmente não estavam tão claras, mas a medida que fui evoluindo eu acabei aprendendo a ler as mensagens e identificar o que era importante na mensagem para que eu pudesse identificar o problema, e quando era necessário pesquisar soluções ou explicar para outros membros do time o problema que eu estava tendo.&lt;br&gt;
E saber ler mensagens de erro também é importante caso você queira abrir uma pergunta no &lt;a href="https://pt.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; ou uma issue no repositório da lib/framework que você está usando.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-aprender"&gt;
  &lt;/a&gt;
  Aprenda a aprender
&lt;/h3&gt;

&lt;p&gt;Existem várias formas de aprender, e cada pessoa aprende melhor de uma forma, teste as diferentes maneiras e veja aquela que mais se adequa a você, não tem problemas se você não sentir que aprendeu tão bem com livros por exemplo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#se-desafie"&gt;
  &lt;/a&gt;
  Se desafie
&lt;/h3&gt;

&lt;p&gt;Não fique na sua zona de conforto, busque fazer e praticar coisas diferentes daquelas que você já se sente confortável e está acostumado a fazer, e nem fique só nos exemplos que tirou do curso/livro que estava estudando, aprendeu a fazer um CRUD? Pense em como fazer validações, em como deixar mais interessante ou prático de se usar, etc.&lt;br&gt;
E caso ainda não se sinta confiante em fazer algo mais avançado, procure replicar e entender como foram feitos sites que você costuma usar, qual o processo que levou as decisões que foram tomadas e que tente encontrar outras formas de alcançar aquele mesmo resultado.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procure-aprender-as-regras-do-neg%C3%B3cio"&gt;
  &lt;/a&gt;
  Procure aprender as regras do negócio.
&lt;/h3&gt;

&lt;p&gt;Saber como o sistema funciona, que problemas ele resolve ou deveria resolver, te ajuda a ver onde aquilo vai gerar valor, saber como testar, e quais perguntas fazer quando pegar uma tarefa ou durante o refinamento de uma tarefa por exemplo.&lt;br&gt;
Tenha em mente que ninguém gasta dinheiro para fazer um software "só porquê sim", e sim para resolver algum problema e que os profissionais que se destacam no mercado entendem que não basta saber bem a parte de tecnologia, também é preciso ter uma boa visão de negócios.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nem-tudo-%C3%A9-sobre-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Nem tudo é sobre código
&lt;/h3&gt;

&lt;p&gt;Em alguns casos, você precisa sim de ferramentas especificas, como por exemplo Python para trabalhar com ciência de dados, porém em outros casos a ferramenta não importa, o que importa mesmo é o conhecimento do time e resolver o problema do cliente/usuário, então não fique preso a linguagem &lt;strong&gt;X&lt;/strong&gt; ou framework &lt;strong&gt;Y&lt;/strong&gt;, afinal são somente ferramentas que vão te permitir resolver um problema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#siga-pessoas-interaja"&gt;
  &lt;/a&gt;
  Siga pessoas, interaja
&lt;/h3&gt;

&lt;p&gt;Network é importante, isso pode te ajudar a conseguir o primeiro ou um novo emprego na área, vai te fazer conhecer coisas novas, ajudar a evitar que você caia em armadilhas, te mostrar outros pontos de vista sobre várias questões e muitas vezes te fazer lembrar que é sobre pessoas e entrega de valor não sobre guerra de linguagem.&lt;br&gt;
Ps: Sim, em alguns momentos você vai ver e talvez até entrar em discussões "bestas" sobre uma tecnologia ou um grupo especifico de tecnologias (stack), entre outras coisas, mas lembre que aquilo que é realmente importante é resolver os problemas do cliente, e entregar valor.&lt;br&gt;
Mas claro que isso não é desculpa para fazer código confuso e cheio de gambiarra.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tenha-foco"&gt;
  &lt;/a&gt;
  Tenha foco
&lt;/h3&gt;

&lt;p&gt;Você não precisa ficar preso a uma stack pelo resto da vida e defender ela como se fosse parte da sua família, mas principalmente no começo é importante ter objetivos fixos e não perder o foco, quer ser Front? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aprenda, e aprenda muito bem, a base, a famosa tríade HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;Depois escolha um framework "da moda" e foque nele, quando estiver confortável tudo bem estudar novas coisas, e até brincar com outras áreas como back ou mobile, mas se você ficar trocando a cada duas semanas de stack dificilmente vai evoluir e isso provavelmente vai te frustrar e fazer você pensar em desistir por achar que "desenvolvimento não é pra você" ou que você não é bom o suficiente, quando na verdade só estava te faltando foco.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#descanse"&gt;
  &lt;/a&gt;
  Descanse
&lt;/h3&gt;

&lt;p&gt;Estudar e se manter atualizado é importante, mas tão importante quanto, para não dizer mais, é descansar, fazer coisas que não sejam ligadas a TI, e cuidar de si mesmo, sua saúde mental agradece.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais.
&lt;/h2&gt;

&lt;p&gt;Esse post é inspirado em três posts de três pessoas fodas, sendo eles (os posts) &lt;a href="https://willianjusten.com.br/o-que-ninguem-diz-para-iniciantes/"&gt;O que ninguém diz para iniciantes&lt;/a&gt; do Willian Justen, o &lt;a href="https://woliveiras.com.br/posts/Devolva-para-as-comunidades/"&gt;Devolva para as comunidades&lt;/a&gt; do &lt;a href="https://twitter.com/_malabarizando"&gt;William Oliveira&lt;/a&gt; e &lt;a href="https://dev.to/lys/como-consegui-meu-primeiro-estagio-e-dicas-para-lhe-ajudar-a-conseguir-o-seu-5e7o"&gt;Como consegui meu primeiro estagio e dicas para lhe ajudar a conseguir o seu&lt;/a&gt; da &lt;a href="https://twitter.com/techlys"&gt;Amaryllis&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iniciante</category>
      <category>aprendizado</category>
      <category>dev</category>
    </item>
    <item>
      <title>How can I improve?</title>
      <author>Dev-Codes</author>
      <pubDate>Fri, 16 Jul 2021 01:55:26 +0000</pubDate>
      <link>https://dev.to/devgm1/how-can-i-improve-2ddd</link>
      <guid>https://dev.to/devgm1/how-can-i-improve-2ddd</guid>
      <description>&lt;p&gt;How can I get better at programming in general? I’m mostly talking about Python, JavaScript, and CSS. GitHub repositories, Codecademy links, whatever. I just need some practice. Thanks!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>help</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Million.js - The Future of Virtual DOM</title>
      <author>Aiden Bai</author>
      <pubDate>Fri, 16 Jul 2021 01:29:35 +0000</pubDate>
      <link>https://dev.to/aidenybai/million-js-the-future-of-virtual-dom-1e6d</link>
      <guid>https://dev.to/aidenybai/million-js-the-future-of-virtual-dom-1e6d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Plug: &lt;em&gt;I work on &lt;a href="https://github.com/aidenybai/million"&gt;&lt;strong&gt;Million.js&lt;/strong&gt;&lt;/a&gt;: &amp;lt;1kb virtual DOM - it's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Virtual DOM needs to leverage the compiler, so that unnecessary diffing is not incurred. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Recently, I published &lt;a href="https://dev.to/aidenybai/why-is-the-virtual-dom-necesssary-59l2"&gt;some&lt;/a&gt; &lt;a href="https://dev.to/aidenybai/how-does-virtual-dom-work-b74"&gt;articles&lt;/a&gt; detailing the Virtual DOM paradigm, implementation, and the benefits and flaws using it. These articles received mixed reception, with some developers agreeing with the points in the article, while others disagreed. They argued that compilation based frameworks that do some level of static analysis (notably &lt;a href="https://sveltejs.dev"&gt;Svelte&lt;/a&gt;) compile to imperative DOM operations and therefore &lt;strong&gt;bypass the overhead of a Virtual DOM engine.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You may be wondering: What's the point of using Virtual DOM, if you can just use a compiler-based framework like Svelte? While static analysis and &lt;a href="https://tomdale.net/2017/09/compilers-are-the-new-frameworks/"&gt;compilation is the future&lt;/a&gt;, Virtual DOM should not be completely ruled out as an obselete technology. Svelte only is possible if API conditions are constrained, so that the code is predictive and therefore &lt;strong&gt;analyzable&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt; For libraries that need more flexibility, such as React or Vue, conditions cannot be constrained easily and therefore a variant of the Virtual DOM is necessary for those libraries.&lt;/p&gt;

&lt;p&gt;This is why &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; exists—to bring the Virtual DOM into the future by leveraging the compiler for static analysis and optimizations &lt;strong&gt;that makes DOM manipulation be performant and flexible.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom-optimizations"&gt;
  &lt;/a&gt;
  Virtual DOM Optimizations
&lt;/h2&gt;

&lt;p&gt;Traditionally, Virtual DOM engines do a significant amount of computation during the diffing process. For example, when diffing children, the Virtual DOM engine not only linearly calculates which nodes need to be updated, but also determines the possible swaps/moves that can be done. Although this incurrs the least amount of DOM modifications, the computational cost can be great. Even with extremely efficient list diffing algorithms (like &lt;code&gt;list-diff2&lt;/code&gt;), the time complexity is &lt;code&gt;O(n)&lt;/code&gt; in the best case (not including the &lt;code&gt;O(n^3&lt;/code&gt; time complexity baseline for diffing). Repeat this for all the children in a vnode tree and you can &lt;strong&gt;just imagine how inefficient this can be&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This is why one of the major concepts to create a future oriented Virtual DOM is to be aware and construct the architecture based on the compiler. This not only increases performance by allowing for straight &lt;code&gt;O(1)&lt;/code&gt; operations, but also gracefully falls back to normal diffing when necessary. Additionally, &lt;strong&gt;bundle sizes decrease significantly&lt;/strong&gt;, reducing the amount of code that needs to be executed at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; attempts to implement this with three major "lines of defense":&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keys:&lt;/strong&gt; Specify the identity of a vnode&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keys are useful when you know that a certain vnode's position, data, and children will not change between two states. Keys can be provided by the user manually, or generated by the compiler. This allows for the vnode to be skipped entirely, avoiding unnecessary diffing (&lt;code&gt;O(1)&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt;: Specify the type of content of a vnode's children.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Flags allow for diffing to skip certain computationally expensive condition branches. For example, if the vnode's children only contains text nodes, then just setting the &lt;code&gt;textContent&lt;/code&gt; of the element would be significantly faster than constructing and replacing a text node. &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; currently only supports 3 flags: &lt;code&gt;NO_CHILDREN&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;), &lt;code&gt;ONLY_TEXT_CHILDREN&lt;/code&gt; (&lt;code&gt;O(n)&lt;/code&gt;), and &lt;code&gt;ANY_CHILDREN&lt;/code&gt; (&lt;code&gt;O(n^3)&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deltas&lt;/strong&gt;: Specify predictive and consistent modifications of a vnode's children.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deltas can be utilized when simple, imperative micro-actions can be predicted through static analysis. Deltas by default are a series of imperative operations, but leverage the internal diffing algorithm to reduce DOM manipulations. &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; currently supports 3 fundemental Delta operations: &lt;code&gt;INSERT&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;), &lt;code&gt;UPDATE&lt;/code&gt; (&lt;code&gt;O(1) to O(n^3)&lt;/code&gt;), &lt;code&gt;DELETE&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#compiler-optimizations"&gt;
  &lt;/a&gt;
  Compiler Optimizations
&lt;/h2&gt;

&lt;p&gt;First off, most—if not all of the implementation complexity will be with the compiler. This is because static analysis is really hard to pull in a way so that it operates &lt;a href="https://hackernoon.com/why-using-static-analysis-is-hard-n02m3vt0"&gt;as intended&lt;/a&gt;. Below is a list of possible optimizations, and is by no means "real static analysis."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leveraging &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; features:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The primary way to optimize for &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; is just leverage the compiler-focused features that it provides. This is the only way to reduce diffing assuming that the patch scope remains constant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prerendering + reducing dynamic content&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another way of making performance better is to not even consider static content by reducing the patching scope—especially if your application is only interactive in certain areas. This is even more efficient than generating imperative DOM operations, as DOM manipulation won't even be needed! Additionally, the initial vnode should be prerendered the page, so that the page doesn't need to be fully initialized at runtime.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Bad:
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; inject &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

Good:
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static vnode + props hoisting:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A standard optimization to hoist vnodes and props that are static, allowing them to be cached and incurr no generation computational cost. This is best illustrated with a code sample:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Without static VNode hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`My favorite number: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static VNode needs to be constructed twice&lt;/span&gt;

&lt;span class="c1"&gt;// With static VNode hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static VNode is used twice and cached&lt;/span&gt;

&lt;span class="c1"&gt;// Without static props hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`app&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static props need to be constructed twice&lt;/span&gt;

&lt;span class="c1"&gt;// With static props hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`app&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static props are used twice and cached&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: If you feel that this sort of paradigm has a future and are willing to meet those ends—I highly recommend you check out &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; and try working on an implementation of a compiler yourself.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; is far from being done, and there is a lot of work that needs to be done. I hope that this article has brought about a new perspective to think of the Virtual DOM as it progresses into the future. Feel free to comment any suggestions or lingering questions you may have!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
