<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Where could I find some C++ that could help me?/Code critique.</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 18 Oct 2021 23:18:13 +0000</pubDate>
      <link>https://dev.to/baenencalin/where-could-i-find-some-c-that-could-help-mecode-critique-6b0</link>
      <guid>https://dev.to/baenencalin/where-could-i-find-some-c-that-could-help-mecode-critique-6b0</guid>
      <description>&lt;p&gt;(Yes. C++ is my final destination programming language for RuntDeale. - It took forever, but I can say I really love C++, it's an amazing language.)&lt;/p&gt;

&lt;p&gt;I'm just a(n almost) 15-year-old boy, so I don't really have money (I'm trying to get a job), and no one at my school really programs (the only class that I have some mates in is a "Beginner's JavaScript class" (which uses a specific dialect of JS).&lt;/p&gt;

&lt;p&gt;So, is there anywhere I could find people who could help contribute to my game? It's open-source on GitHub: &lt;a href="https://github.com/CalinZBaenen/RuntDeale"&gt;RuntDeale Repository&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Also, if you'd like to go there, and talk about how I've sorted my code, particularly if you disagree, or have suggestions, or if I'm doing something wrong, let my know!&lt;/p&gt;




&lt;h1&gt;&lt;b&gt;
Thanks!&lt;br&gt;
Cheers!
&lt;/b&gt;&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>gamedev</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How I created and deployed another full stack app in just 3 days  </title>
      <author>Tarun Sharma</author>
      <pubDate>Mon, 18 Oct 2021 22:42:33 +0000</pubDate>
      <link>https://dev.to/tarunfy/how-i-created-and-deployed-another-full-stack-app-in-just-3-days-41eo</link>
      <guid>https://dev.to/tarunfy/how-i-created-and-deployed-another-full-stack-app-in-just-3-days-41eo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋🏻
&lt;/h2&gt;

&lt;p&gt;This is Tarun here. I'm a young dev with big dreams and an intention to enhance as a successful web developer. I love building web apps with React. Last week I built my first full-stack &lt;a href="https://sigma-rules.netlify.app/"&gt;application&lt;/a&gt; and shared the whole journey with you all, btw if haven't read it here's the &lt;a href="https://dev.to/tarunfy/how-i-created-and-deployed-my-first-full-stack-web-application-in-just-4-days-2a14"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Today, I'd like to share yet another journey of building something exciting and useful with you all.&lt;br&gt;
Let's gooooooo 🚀 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmap-%F0%9F%97%BA"&gt;
  &lt;/a&gt;
  Roadmap 🗺
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#day-1"&gt;
  &lt;/a&gt;
  Day 1
&lt;/h3&gt;

&lt;p&gt;I went over to &lt;a href="https://dribbble.com/"&gt;dribbble&lt;/a&gt; and gathered inspirations from different sources for designing the UI.&lt;br&gt;
Then I went over to &lt;a href="https://colorhunt.co/"&gt;ColorHunt&lt;/a&gt; and picked up a minimalist colour palette.&lt;br&gt;
To make it a bit interactive and good looking I went over to &lt;a href="https://free3dicon.com/"&gt;free3Dicon.com&lt;/a&gt; and picked up some 3D renders.&lt;br&gt;
After an hour or some I drew out the UI on a sheet and started coding 👩🏻‍💻&lt;/p&gt;

&lt;p&gt;Firstly, I did setup the folder structure architecture and install all the required dependencies.&lt;br&gt;
Then I created a new app on firebase and connected my app with firebase and make sure everything was connected and working by using console logs(the best thing in JS).&lt;br&gt;
I worked hard for about 3 more hours and finished up creating the landing page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-2"&gt;
  &lt;/a&gt;
  Day 2
&lt;/h3&gt;

&lt;p&gt;The next step was to add authentication, so I created the Sign-up and Login pages, then with the use of firebase, I added the authentication functionality to my application.&lt;br&gt;
In Next couple of hours I worked over the dashboard part and figured out it's layout and designed it.&lt;br&gt;
Then I had to look up for a way of storing documents in my database and how my database architecture gonna be. It took me some time but finally I ended up making it(took half of my brain cells 🤐😥)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-3"&gt;
  &lt;/a&gt;
  Day 3
&lt;/h3&gt;

&lt;p&gt;Next task was to apply some logic for calculating the expense, income and all the good stuff, it gave me some brain damage but I got the job done.&lt;br&gt;
I added responsiveness to it and some animations. Then finally I checked if everything was working correctly and then I make sure there were no console logs(used for debugging purposes) left in my code.&lt;br&gt;
Then I simply deployed it for free on Netlify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-used"&gt;
  &lt;/a&gt;
  What I used
&lt;/h2&gt;

&lt;p&gt;I used all the free stuff 😋😁&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Front-end:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React&lt;/a&gt; - I used &lt;a href="https://create-react-app.dev/"&gt;create-react-app&lt;/a&gt; to start with.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Hooks&lt;/a&gt; - like &lt;code&gt;useState&lt;/code&gt; for local state.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://redux.js.org/introduction/getting-started"&gt;Redux&lt;/a&gt; - For global state&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;Tailwindcss&lt;/a&gt; for styling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.framer.com/motion/"&gt;Framer-motion&lt;/a&gt; for easy simple animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Back-end:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; - I used for authentication and database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://netlify.com/"&gt;Netlify&lt;/a&gt; for free deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-i-keep-it-look-professional"&gt;
  &lt;/a&gt;
  How I keep it look professional
&lt;/h2&gt;

&lt;p&gt;When it comes to design a website/webApp, I want it to look good. And there is no secret to it, as long I keep my spacing and colour consistent, it will turn out well eventually.&lt;/p&gt;

&lt;p&gt;By using tailwindcss it is so easy and fast to add styling however, the initial setup of it is tedious 🥴 but once you are done with that it's all smooth and easy to go 🐱‍👤.&lt;/p&gt;

&lt;p&gt;Because I make it look so clean and smooth, many of my friends keep on asking me if it's really built by me, LOL. Yes it is built by me, ffs!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next ✨
&lt;/h2&gt;

&lt;p&gt;I will continue to work on similar projects and eventually enhance my skills cuz practice makes anyone perfect. I am planning to contribute to open source projects too(one of my 2k20 goal).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up 👀
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the journey and did got some motivation from it. Feel free to use the &lt;a href="https://xpense-trackerr.netlify.app/"&gt;app&lt;/a&gt;. Do not hesitate to share your feedback. Share on Twitter, tag me &lt;a href="https://twitter.com/tarunfy"&gt;@tarunfy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star the repo ⭐ &lt;a href="https://github.com/tarunfy/expense-tracker"&gt;github.com/tarunfy/expense-tracker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Lets connect 🤙🏻
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tarunfy"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tarunfy"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/tarunfy/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback 🎸
&lt;/h2&gt;

&lt;p&gt;Hash tree needs your feedback to improve. Help Hash tree by adding your valuable reviews 💖&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Building a Photo Uploader: A Practical Introduction to the JAMSTACK with Vue.js</title>
      <author>JekayinOluwa Olabemiwo</author>
      <pubDate>Mon, 18 Oct 2021 22:14:41 +0000</pubDate>
      <link>https://dev.to/hackmamba/building-a-photo-uploader-a-practical-introduction-to-the-jamstack-with-vuejs-4m9i</link>
      <guid>https://dev.to/hackmamba/building-a-photo-uploader-a-practical-introduction-to-the-jamstack-with-vuejs-4m9i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;JAMSTACK is a JavaScript-powered stack that enables you to harness the powers of JavaScript, APIs, and markups. You can build with the JAMSTACK by using the various JavaScript frameworks and libraries and integrate with serverless functions or APIs. It is fast, lean and inexpensive.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn how to build JAMSTACK apps with a feature to upload images. You will use Cloudinary to power the upload functionality and &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; for authentication. This can come in handy when building photo albums, e-commerce applications, and business websites.&lt;/p&gt;

&lt;p&gt;For a brief introduction to Vue.js, you can check out this article, &lt;a href="https://cloudinary.com/blog/getting_started_with_vue_js_the_progressive_javascript_framework"&gt;Getting Started with Vue JS: The Progressive JavaScript Framework&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A machine with &lt;a href="https://nodejs.org/en/about/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://docs.npmjs.com/about-npm"&gt;npm&lt;/a&gt;) installed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic familiarity with &lt;a href="https://www.w3schools.com/js/DEFAULT.asp"&gt;JavaScript&lt;/a&gt;, and &lt;a href="https://www.freecodecamp.org/news/write-less-do-more-with-javascript-es6-5fd4a8e50ee2/"&gt;ES6&lt;/a&gt; and Vue.js).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A text editor. E.g. Sublime Text, Visual Studio Code, Atom, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Cloudinary account. You can &lt;a href="https://cloudinary.com/users/register/free"&gt;sign up for a Cloudinary account for free&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An Auth0 account. You may create a free Auth0 account &lt;a href="https://auth0.com/signup"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#install-the-project-dependencies"&gt;
  &lt;/a&gt;
  Install the Project Dependencies
&lt;/h2&gt;

&lt;p&gt;You need the Node.js runtime and the npm to use &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;. The Node package manager, &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; will enable you to use Node.js on the command-line interface, CLI. If you do not have Node.js or npm installed, you can follow the instructions &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"&gt;here&lt;/a&gt; to install them on your machine.&lt;/p&gt;

&lt;p&gt;Another tool that you need to follow in this tutorial is the &lt;a href="https://cli.vuejs.org/"&gt;Vue CLI&lt;/a&gt; package. The &lt;code&gt;vue&lt;/code&gt; library will provide the capabilities of the Vue.js framework while &lt;code&gt;vue-cli&lt;/code&gt; will enable you to use certain terminal commands to interact with Vue.js and your project. &lt;/p&gt;

&lt;p&gt;You can go ahead to install Vue and the &lt;code&gt;vue-cli&lt;/code&gt; tool if you have Node.js and npm on your machine already. Use the following terminal commands to install the two packages respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;vue
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @vue/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next section, you will set up your Vue.js project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-vue-project"&gt;
  &lt;/a&gt;
  Create Vue Project
&lt;/h2&gt;

&lt;p&gt;Use the following &lt;code&gt;vue-cli&lt;/code&gt; command to set up a Vue.js project on your terminal. You may name the project &lt;code&gt;vue-photo-uploader&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vue create vue-photo-uploader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select Vue.js 2 version in the options prompted and allow Vue to scaffold the project folders and files for you. You should get a message that looks like the following in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
📄 Generating README.md...

🎉 Successfully created project vue-photo-uploader.
👉 Get started with the following commands:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you need to set up the new project to handle file uploads. This is the purpose of the next section of the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configue-the-vuejs-project-for-file-uploads"&gt;
  &lt;/a&gt;
  Configue the Vue.js Project for File Uploads
&lt;/h2&gt;

&lt;p&gt;To handle file uploads, you will need to create an interface for your users to be able to upload files. To do that, modify the &lt;code&gt;App.vue&lt;/code&gt; file of your project as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Vue logo"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./assets/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;HelloWorld&lt;/span&gt; &lt;span class="na"&gt;msg=&lt;/span&gt;&lt;span class="s"&gt;"Learn how to upload photos with Cloudinary"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"openUploadModel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Photo&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you edited the message to be displayed by the &lt;code&gt;HelloWorld&lt;/code&gt; component. You changed it to &lt;code&gt;learn how to upload photos with Cloudinary&lt;/code&gt;. In addition, you created a button that calls the &lt;code&gt;openUploadModel&lt;/code&gt; method. The method will open the Cloudinary upload modal when the button is clicked. Now, add the method inside the  part of the &lt;code&gt;App.vue&lt;/code&gt; file as follows:&lt;br&gt;

&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/HelloWorld.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;openUploadModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The full code of the &lt;code&gt;App.vue&lt;/code&gt; file becomes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Vue logo"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./assets/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;HelloWorld&lt;/span&gt; &lt;span class="na"&gt;msg=&lt;/span&gt;&lt;span class="s"&gt;"Learn how to upload photos with Cloudinary"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"openUploadModel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Photo&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/HelloWorld.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;openUploadModal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-cloudinary-upload-widget" class="anchor"&gt;
  &lt;/a&gt;
  Configure Cloudinary Upload Widget
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Login and obtain parameters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Login to your Cloudinary account and go to your &lt;a href="https://cloudinary.com/console"&gt;console dashboard&lt;/a&gt; and get your cloud name. Also, get your upload preset from your Cloudinary &lt;a href="https://cloudinary.com/console/settings/upload"&gt;acount settings&lt;/a&gt;. Copy the two values somewhere because you will need them in your Vue.js project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure Upload Preset settings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In your account settings page, scroll down the &lt;a href="https://cloudinary.com/console/settings/upload"&gt;Upload Settings tab&lt;/a&gt; to the Upload Preset section as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957465326_4.+Scroll+down+to+Upload+Preset.png" alt="Upload preset settings on Cloudinary dashboard"&gt;&lt;/p&gt;

&lt;p&gt;Activate the unsigned uploading feature by clicking the &lt;strong&gt;Enable unsigned uploading&lt;/strong&gt; link. The link should change to &lt;strong&gt;Signed&lt;/strong&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957494073_4b.+Enable+unSigned+uploading.png" alt="Unsigned uploading feature enabled"&gt;&lt;/p&gt;

&lt;p&gt;If you don't enable unsigned upload preset, you might get the following error.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;Upload preset must be whitelisted &lt;span class="k"&gt;for &lt;/span&gt;unsigned uploads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next, navigate to the &lt;code&gt;index.html&lt;/code&gt; page in the &lt;code&gt;public&lt;/code&gt; folder of your project. Then, include the Cloudinary widget script inside the &lt;/p&gt; tag.&lt;br&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://widget.cloudinary.com/v2.0/global/all.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next, modify the &lt;code&gt;openUploadModal&lt;/code&gt; of the &lt;code&gt;App.vue&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;openUploadModal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openUploadWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cloud_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;CLOUD_NAME&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;upload_preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;UPLOAD_PRESET&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image uploaded..: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In the above code, you added the logic of the &lt;code&gt;@click&lt;/code&gt; event of the button by which calls the &lt;code&gt;openUploadWidget&lt;/code&gt; method that activates the Cloudinary file upload modal.&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;CLOUD_NAME&lt;/code&gt; and &lt;code&gt;UPLOAD_PRESET&lt;/code&gt; in the above code with the values you got from your Cloudinary account.&lt;/p&gt;

&lt;p&gt;Next, run the project on your terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Then, navigate to &lt;code&gt;127.0.0.1:8000&lt;/code&gt; on your browser to add images to the application. You should get a page that looks like the following image.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957517736_1.+Ready-to-add-photo.png" alt="Photo album prototype live!"&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;Add Photo&lt;/code&gt; button and the upload modal will be displayed like the following.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957529258_2.+Upload+Modal+Widget.png" alt="Cloudinary upload widget"&gt;&lt;/p&gt;

&lt;p&gt;Now, you can upload your images.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deliver-and-view-images-with-cloudinary" class="anchor"&gt;
  &lt;/a&gt;
  Deliver and View Images with Cloudinary
&lt;/h2&gt;

&lt;p&gt;Cloudinary enables the delivery of images to the browser via its Vue.js SDK, &lt;code&gt;cloudinary-vue&lt;/code&gt;. Install the library to get started:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;cloudinary-vue 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;You need the following Cloudinary Vue.js components to achieve the goal of this section of the article.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CldContext&lt;/code&gt; - this tag helps you to set the parameters that all the child components share.&lt;br&gt;
&lt;code&gt;CldImage&lt;/code&gt; - the Cloudinary Image tag. It sources images from Cloudinary and makes them available on the browser.&lt;br&gt;
&lt;code&gt;CldTransformation&lt;/code&gt; - the tag that allows you to describe the transformations that are applied to the images delivered.&lt;/p&gt;

&lt;p&gt;Next, import the components in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; section of the &lt;code&gt;App.vue&lt;/code&gt; file. In addition, add the image &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;public_id&lt;/code&gt; to the Data property of Vue.js. These two variables will be defined later in the article.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CldContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CldImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CldTransformation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cloudinary-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldTransformation&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publicId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Then, apply the imported components in the template code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...

    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cld-context&lt;/span&gt; &lt;span class="na"&gt;cloudName=&lt;/span&gt;&lt;span class="s"&gt;"CLOUD_NAME"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: flex; justify-content: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

         &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

         &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

         &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

         &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/cld-context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to replace &lt;code&gt;CLOUD_NAME&lt;/code&gt; in the code above with the real value gotten from your dashboard.&lt;/p&gt;

&lt;p&gt;Whenever you upload an image, Cloudinary assigns a &lt;code&gt;public_id&lt;/code&gt; to an image whenever you are uploading one.&lt;br&gt;
Therefore, you can use the &lt;code&gt;public_id&lt;/code&gt; returned in Cloudinary's JSON response when an image is being uploaded. &lt;/p&gt;

&lt;p&gt;So, modify the &lt;code&gt;openUploadModal()&lt;/code&gt; method to capture the &lt;code&gt;public_id&lt;/code&gt; of an uploaded image.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;openUploadModal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openUploadWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cloud_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLOUD_NAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;upload_preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPLOAD_PRESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image uploaded..: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

            &lt;span class="c1"&gt;//add the next 2 lines &lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The full code of the &lt;code&gt;App.vue&lt;/code&gt; file is the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Vue logo"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./assets/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;HelloWorld&lt;/span&gt; &lt;span class="na"&gt;msg=&lt;/span&gt;&lt;span class="s"&gt;"Learn how to upload photos with Cloudinary"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"openUploadModel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add Photo&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cld-context&lt;/span&gt; &lt;span class="na"&gt;cloudName=&lt;/span&gt;&lt;span class="s"&gt;"diiayntjq"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: flex; justify-content: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;cld-image&lt;/span&gt; &lt;span class="na"&gt;:publicId=&lt;/span&gt;&lt;span class="s"&gt;"publicId"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;cld-transformation&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;gravity=&lt;/span&gt;&lt;span class="s"&gt;"face"&lt;/span&gt; &lt;span class="na"&gt;crop=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/cld-image&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/cld-context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/HelloWorld.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CldContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CldImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CldTransformation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cloudinary-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CldTransformation&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publicId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;openUploadModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openUploadWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cloud_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;diiayntjq&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;upload_preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bi7uln2q&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image uploaded..: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#authenticating-with-auth0" class="anchor"&gt;
  &lt;/a&gt;
  Authenticating with Auth0
&lt;/h2&gt;

&lt;p&gt;Auth0 allows you to &lt;a href="https://en.wikipedia.org/wiki/Authentication"&gt;authenticate&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Authorization"&gt;authorize&lt;/a&gt; users. It integrates with several languages and frameworks for building applications. Furthermore, Auth0 proves a &lt;a href="https://auth0.com/docs/login/universal-login"&gt;Universal Login&lt;/a&gt; page to help with authenticating users. The login page redirects users back to your application after they log in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create an Auth0 Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To start the authentication setup, log in to your &lt;a href="https://manage.auth0.com/dashboard/"&gt;Auth0 dashboard&lt;/a&gt; and follow the following steps to create an Auth0 Application.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;"Applications"&lt;/strong&gt; in the left sidebar menu. Supply these parameters:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;: Vue.js Image Uploader&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Application type&lt;/strong&gt; as Single Page Applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;"Create"&lt;/strong&gt; button to complete the application creation&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;"Settings"&lt;/strong&gt; tab of the newly created Application page. Set the following parameters:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Allowed Callback URLs&lt;/strong&gt;: &lt;code&gt;http://localhost:8080&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Allowed Logout URLs&lt;/strong&gt;: &lt;code&gt;http://localhost:8080&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Allowed Web Origins&lt;/strong&gt;: &lt;code&gt;http://localhost:8080&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scroll down the page and click on the &lt;strong&gt;"Save Changes"&lt;/strong&gt; button to save the settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Install Auth0&lt;/strong&gt; &lt;br&gt;
Install the Client SDK for Auth0 Single-Page Applications:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @auth0/auth0-spa-js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Since you need to move from one page or link to another in the Vue.js application, you will need the &lt;a href="https://router.vuejs.org/"&gt;Vue router&lt;/a&gt;. Add it with the following command and choose &lt;strong&gt;'yes'&lt;/strong&gt; when asked if you'd like to use it in history mode.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;vue add router
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Create a new folder inside the &lt;code&gt;src&lt;/code&gt; folder and name it &lt;code&gt;auth&lt;/code&gt;. Then, create a new file inside the &lt;code&gt;auth&lt;/code&gt; folder and name it &lt;code&gt;index.js&lt;/code&gt;. Add the following code inside the file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createAuth0Client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@auth0/auth0-spa-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** Define a default action to perform after authentication */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DEFAULT_REDIRECT_CALLBACK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceState&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** Returns the current instance of the SDK */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** Creates an instance of the Auth0 SDK. If one has already been created, it returns that instance */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAuth0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;onRedirectCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DEFAULT_REDIRECT_CALLBACK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;redirectUri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The 'instance' is simply a Vue object&lt;/span&gt;
  &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="na"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;popupOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/** Authenticates the user using a popup window */&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;loginWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popupOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popupOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Handles the callback when logging in using a redirect */&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handleRedirectCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRedirectCallback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Authenticates the user using the redirect method */&lt;/span&gt;
      &lt;span class="nx"&gt;loginWithRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginWithRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Returns all the claims present in the ID token */&lt;/span&gt;
      &lt;span class="nx"&gt;getIdTokenClaims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIdTokenClaims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Returns the access token. If the token is invalid or missing, a new one is retrieved */&lt;/span&gt;
      &lt;span class="nx"&gt;getTokenSilently&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenSilently&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Gets the access token using a popup window */&lt;/span&gt;

      &lt;span class="nx"&gt;getTokenWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/** Logs the user out and removes their session on the authorization server */&lt;/span&gt;
      &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="cm"&gt;/** Use this lifecycle method to instantiate the SDK client */&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Create a new instance of the SDK client using members of the given options object&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createAuth0Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;redirect_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redirectUri&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If the user is returning to the app after authentication..&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// handle the redirect and retrieve tokens&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;appState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRedirectCallback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;// Notify subscribers that the redirect callback has happened, passing the appState&lt;/span&gt;
          &lt;span class="c1"&gt;// (useful for retrieving any pre-authentication state)&lt;/span&gt;
          &lt;span class="nx"&gt;onRedirectCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Initialize our internal authentication state&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Create a simple Vue plugin to expose the wrapper object throughout the application&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Auth0Plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The options object in the above code is used to pass in the &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;clientId&lt;/code&gt; values. Hence, you have to create a JSON file called &lt;code&gt;auth_config.json&lt;/code&gt; in the root folder of the Vue.js application and add the following values to it. Obtain the domain and clientId values from the &lt;strong&gt;"Settings"&lt;/strong&gt; tab of the Auth0 Application page and put them in the JSON file like the following.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"domain"&lt;/span&gt;: &lt;span class="s2"&gt;"YOUR_DOMAIN"&lt;/span&gt;,
  &lt;span class="s2"&gt;"clientId"&lt;/span&gt;: &lt;span class="s2"&gt;"YOUR_CLIENT_ID"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next, import the Auth0 plugin and Vue router in the &lt;code&gt;main.js&lt;/code&gt; file as shown below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight vue"&gt;&lt;code&gt;...
import router from './router' // newly added line

// Import the Auth0 configuration
import { domain, clientId } from "../auth_config.json";

// Import the plugin here
import { Auth0Plugin } from "./auth";

// Install the authentication plugin here
Vue.use(Auth0Plugin, {
  domain,
  clientId,
  onRedirectCallback: appState =&amp;gt; {
    router.push(
      appState &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; appState.targetUrl
        ? appState.targetUrl
        : window.location.pathname
    );
  }
});

Vue.config.productionTip = false;

new Vue({
  router, // newly added line
  render: h =&amp;gt; h(App)
}).$mount("#app");
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure Log in and Log out follows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Edit the App.vue file by adding two buttons for login and log out after the HelloWorld tag in the template code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"!$auth.loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- show login when not authenticated --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"!$auth.isAuthenticated"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- show logout when authenticated --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"$auth.isAuthenticated"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"logout"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log out&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  ...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next, add the login and log out methods in the list of methods inside the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; section&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the user in&lt;/span&gt;
    &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginWithRedirect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the user out&lt;/span&gt;
    &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;returnTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;openUploadModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Now, you have added the login and log-out buttons and can proceed to test the authentication flow. Go to 127.0.0.1:8000 on your web browser. You will see the login button present now as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957574898_Screenshot+2021-09-29+at+23.45.16.png" alt="Login button is visible on the page now"&gt;&lt;/p&gt;

&lt;p&gt;When you click the login button, you will be directed to the Auth0 Universal login Page where your users can sign up or log in after which they will be redirected to your application.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://paper-attachments.dropbox.com/s_AFF2FF088F20EBD06640F4218CCE5DBD4255763E00DF0ED2933F2E3D5F60B001_1632957589856_Screenshot+2021-09-29+at+23.45.43.png" alt="Auth0 universal login page activated"&gt;&lt;/p&gt;

&lt;p&gt;You can study the &lt;a href="https://auth0.com/blog/complete-guide-to-vue-user-authentication/"&gt;The Complete Guide to Vue.js User Authentication with Auth0&lt;/a&gt; for a detailed explanation of the Auth0 implementation in Vue.js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the knowledge gained, you can try implementing the &lt;a href="https://cloudinary.com/documentation/image_video_and_file_upload"&gt;image and video upload&lt;/a&gt; in your next project. You may also develop a full-fledged user profile with Auth0. Much more, you can learn about the &lt;a href="https://jamstack.org/"&gt;JAMSTACK&lt;/a&gt; and its ecosystem as you build more JAMSTACK projects.&lt;/p&gt;

&lt;p&gt;Thanks for your attention.&lt;/p&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon using &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;, &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; and &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;.&lt;/p&gt;


</description>
      <category>jamstack</category>
      <category>vue</category>
      <category>auth0</category>
      <category>cloudinary</category>
    </item>
    <item>
      <title>Vote: What should the behavior of `WeaponItem`s with a negative damage value do?</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 18 Oct 2021 22:02:24 +0000</pubDate>
      <link>https://dev.to/baenencalin/vote-what-should-the-behavior-of-weaponitems-with-a-negative-damage-value-do-3a7m</link>
      <guid>https://dev.to/baenencalin/vote-what-should-the-behavior-of-weaponitems-with-a-negative-damage-value-do-3a7m</guid>
      <description>&lt;p&gt;I'm back!&lt;br&gt;
I've been working on RuntDeale, and doing some personal things, I've also had some issues recently, but I hope to re-enter the DEV community!&lt;/p&gt;

&lt;p&gt;I've set a vote, What should the behavior of &lt;code&gt;WeaponItem&lt;/code&gt;s with a negative (attack) damage value do?&lt;br&gt;
&lt;a href="https://twitter.com/BaenenCalin/status/1449960631050936321"&gt;You can vote on Twitter&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://www.reddit.com/r/gamedesign/comments/qag3i3/what_should_the_behavior_of_weaponitems_with_a/"&gt;And on Reddit&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;See you all in the next post, coming soon!&lt;/h3&gt;

</description>
      <category>gamedev</category>
      <category>cpp</category>
      <category>watercooler</category>
      <category>runtdeale</category>
    </item>
    <item>
      <title>Setting up a webserver with php and async operations in docker</title>
      <author>Daniel Persson</author>
      <pubDate>Mon, 18 Oct 2021 21:55:51 +0000</pubDate>
      <link>https://dev.to/kalaspuffar/setting-up-a-webserver-with-php-and-async-operations-in-docker-ibl</link>
      <guid>https://dev.to/kalaspuffar/setting-up-a-webserver-with-php-and-async-operations-in-docker-ibl</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mGF2KaeuFwk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I had to setup a docker image that could handle request in an API using async jobs to do the actual workload. This means that I had to have something running in the background async while also having a docker image with web server and php.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Application with Elixir, business logic with Gleam</title>
      <author>Paweł Świątkowski</author>
      <pubDate>Mon, 18 Oct 2021 21:25:05 +0000</pubDate>
      <link>https://dev.to/katafrakt/application-with-elixir-business-logic-with-gleam-1960</link>
      <guid>https://dev.to/katafrakt/application-with-elixir-business-logic-with-gleam-1960</guid>
      <description>&lt;p&gt;One of the young programming languages I look at from afar and root for is &lt;a href="https://gleam.run"&gt;Gleam&lt;/a&gt;. It is a statically typed language for BEAM, written in Rust. Similarly to Rust, if focuses on catching many potential bugs at compilation time and providing useful error messages, so it's easy to fix them. Since it's targeting BEAM, it can easily interop with other BEAM languages, such as Elixir or Erlang. And this fact allows to overcome some issues that languages in their infancy stage usually have.&lt;/p&gt;

&lt;p&gt;My recent thought revolve around using Gleam to model the core business logic, while letting Elixir do the heavy application work around it. Let's face the facts: Phoenix is great, Ecto is great, ExUnit is great... It will take years for language such as Gleam to develop ecosystem similar to Elixir. On the other hand, I find modelling business logic with types easier and more maintainable than without them. And Elixir typespecs have their issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dialyzer error messages are not very friendly, it usually takes me couple minutes to figure out what they &lt;em&gt;really&lt;/em&gt; mean.&lt;/li&gt;
&lt;li&gt;Types are optional and there seems to be almost-consensus to write typespecs for public functions only. However, in my experience, because of that, bugs happen a lot in private functions, which are neither typespec'd, nor unit tested.&lt;/li&gt;
&lt;li&gt;Dialyzer simply does not catch everything. In fact sometimes I'm surprised at the things it does not catch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Gleam, all these issues are addressed: types are mandatory in every function, the compiler checks everything and error messages are quite informative. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: Type mismatch
   ┌─ /home/katafrakt/dev/poligon/gleamixir_test/src/booking.gleam:21:5
   │
21 │     _ -&amp;gt; Error(InvalidRoomNumber)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This case clause was found to return a different type than the previous
one, but all case clauses must return the same type.

Expected type:

    Bool

Found type:

    Result(a, BookingError)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I decided to have a look at how the interop between Gleam and Elixir works and if it could be useful. To set things us, I used &lt;a href="https://github.com/gleam-lang/mix_gleam"&gt;mix_gleam&lt;/a&gt; Hex package from Gleam team, which allows you to compile Gleam as part of Mix compilation. I just followed instructions in the readme and everything works. So, time to write the first "business logic" in Gleam.&lt;/p&gt;

&lt;p&gt;To test things, I decided to code a fragment of super simple booking system for my imaginary estate. It's quite small - only has three rooms. But still, you can book them, if the details are valid. Here's the relevant code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/booking.gleam

pub type Booking {
  Booking(surname: String, room_no: Int, number_of_people: Int)
}

pub type BookingError {
  InvalidRoomNumber
  WrongNumberOfPeople
}

// Unfortunately, Gleam does not have default arguments nor multiple dispatch,
// so we have to somehow bypass that by creating two pseudo-constructors
pub fn new2(surname: String, room_no: Int) -&amp;gt; Booking {
  new3(surname, room_no, 1)
}

pub fn new3(surname: String, room_no: Int, number_of_people: Int) -&amp;gt; Booking {
  Booking(surname, room_no, number_of_people)
}

pub fn validate_booking(booking: Booking) -&amp;gt; Result(Booking, BookingError) {
  case booking.room_no {
    1 | 2 | 5 -&amp;gt; validate_capacity(booking)
    _ -&amp;gt; Error(InvalidRoomNumber)
  }
}

fn validate_capacity(booking: Booking) -&amp;gt; Result(Booking, BookingError) {
  case room_capacity(booking.room_no) &amp;gt;= booking.number_of_people {
    True -&amp;gt; Ok(booking)
    False -&amp;gt; Error(WrongNumberOfPeople)
  }
}

fn room_capacity(room_no: Int) -&amp;gt; Int {
  case room_no {
    1 -&amp;gt; 2
    2 | 5 -&amp;gt; 4
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not exactly Elixir, but I guess you can get what's going on, as it's quite idiomatic.&lt;/p&gt;

&lt;p&gt;When compiled, Gleam modules are available like Erlang modules. So I can write this, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; :booking.new2("Smith", 1)                                    
{:booking, "Smith", 1, 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it turns out, Gleam types, when returned to Elixir, become a tuple with first element being a type name and the following elements field values. This works both ways, so I can pipe the result into another Gleam function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(2)&amp;gt; :booking.new2("Smith", 1) |&amp;gt; :booking.validate_booking()     
{:ok, {:booking, "Smith", 1, 1}}
iex(3)&amp;gt; :booking.new2("Smith", 3) |&amp;gt; :booking.validate_booking()
{:error, :invalid_room_number}
iex(4)&amp;gt; :booking.new3("Smith", 5, 6) |&amp;gt; :booking.validate_booking()
{:error, :wrong_number_of_people}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks pretty good. A nice thing is that Gleam's &lt;code&gt;Result&lt;/code&gt; type maps elegantly into Elixir's &lt;code&gt;{:ok, value}&lt;/code&gt; or &lt;code&gt;{:error, message}&lt;/code&gt; convention.&lt;/p&gt;

&lt;p&gt;Maybe I didn't see a lot, but it brings me close to the conclusion that &lt;strong&gt;yes, Gleam can be mixed with Elixir&lt;/strong&gt; in parts where full static typing is desirable and integration between the two languages goes pretty seamless. I would have to prepare a larger example to check it, but potentially looks good.&lt;/p&gt;

&lt;p&gt;A few things I don't necessarily like in Gleam (or find missing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completely unlike Elixir, it relies heavily on filenames - i.e. name of the file is the name of the resulting module. This is not necessarily bad, but I prefer less coupling between the filesystem and the code.&lt;/li&gt;
&lt;li&gt;No support for multiple dispatch or default arguments forces me to write weird things like &lt;code&gt;new2&lt;/code&gt; and &lt;code&gt;new3&lt;/code&gt; pseudo-constructors. Perhaps in real example it wouldn't be so problematic though, as probably I'd be passing all the data at once.&lt;/li&gt;
&lt;li&gt;I was surprised that sometimes the compiler wasn't able to infer the type, even though it should be possible.&lt;/li&gt;
&lt;li&gt;The standard library at the moment does not include things like dates at all, although of course I can define relevant logic myself without a lot of problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus-content-accessing-namespaced-gleam-modules"&gt;
  &lt;/a&gt;
  Bonus content: Accessing namespaced Gleam modules
&lt;/h2&gt;

&lt;p&gt;I wrote above that module names accessible to Elixir are named based on the filename of the file where Gleam code is written. It was pretty straightforward when I did it in &lt;code&gt;src/booking.gleam&lt;/code&gt; files and could access via &lt;code&gt;:booking.new()&lt;/code&gt;, but what if I had a file in a subdirectory? I checked it by creating a &lt;code&gt;src/transport/trains.gleam&lt;/code&gt; file and couldn't really find a way to call it from Elixir. I was close to the conclusion that it's impossible and you can only write publicly exported code in top-level namespace, but then I found how to list all the atoms defined for the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; :application.get_key(:gleamixir_test, :modules)
{:ok, [GleamixirTest, :booking, :transport@trains]}
iex(2)&amp;gt; :transport@trains.example()
{:train, {:engine, "EU07", 160},
 [
   {:train_car, "Passenger double-decker", 160, "001"},
   {:train_car, "Postal", 120, "005"},
   {:train_car, "Passenger double-decker", 160, "002"},
   {:train_car, "Restaurant", 160, "600"}
 ]}
iex(3)&amp;gt; :transport@trains.example() |&amp;gt; :transport@trains.max_speed()
{:ok, 120}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in short, you use &lt;code&gt;@&lt;/code&gt;-sign as a namespace separator.&lt;/p&gt;

&lt;p&gt;And this is the code of &lt;code&gt;trains&lt;/code&gt; module if you're interested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import gleam/list
import gleam/int

pub type Train {
  Train(engine: Engine, cars: List(TrainCar))
}

pub type Engine {
  Engine(class: String, max_speed: Int)
}

pub type TrainCar {
  TrainCar(car_type: String, max_speed: Int, serial_number: String)
}

pub fn example() {
  Train(
    engine: Engine("EU07", 160),
    cars: [
      TrainCar("Passenger double-decker", 160, "001"),
      TrainCar("Postal", 120, "005"),
      TrainCar("Passenger double-decker", 160, "002"),
      TrainCar("Restaurant", 160, "600"),
    ],
  )
}

pub fn max_speed(train: Train) {
  [
    train.engine.max_speed,
    ..list.map(train.cars, fn(c: TrainCar) { c.max_speed })
  ]
  |&amp;gt; list.sort(by: int.compare)
  |&amp;gt; list.head()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>gleam</category>
      <category>interlingua</category>
    </item>
    <item>
      <title>Parsing Addresses With Machine Learning</title>
      <author>Lob</author>
      <pubDate>Mon, 18 Oct 2021 20:10:45 +0000</pubDate>
      <link>https://dev.to/lob/parsing-addresses-with-machine-learning-19ae</link>
      <guid>https://dev.to/lob/parsing-addresses-with-machine-learning-19ae</guid>
      <description>&lt;p&gt;&lt;em&gt;Editor’s note: Dave Currie joined Lob’s Atlas team in June 2020 as a remote contractor. Working as the team’s Machine Learning Engineer, he has helped to improve the accuracy of the Address Verification product by developing microservices that utilize machine learning. This article was written about one of these microservices.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I tell people that my work is focused on improving an address verification product, I sometimes receive confused looks. If you think about a friend’s address, you might picture something like “1600 Pennsylvania Avenue, Washington, DC 20500”. An address as simple as this should be easy for a system to understand and verify if it exists or not. In this case, you’re right. Standard addresses that you’ve seen countless times before are quite easy to verify, but not all addresses are so simple.&lt;/p&gt;

&lt;p&gt;In this post, I’ll share how we use machine learning to continually improve our address verification product at Lob to ensure our customers’ mailpieces get delivered to as many recipients as possible.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-quality-issues"&gt;
  &lt;/a&gt;
  Data quality issues
&lt;/h2&gt;

&lt;p&gt;Lob’s Address Verification product receives millions of addresses everyday. When working at this scale, we see addresses with a range of formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;757 Lawrence St Apart C Phila PA 23444 Philadelphia PA 23444&lt;/li&gt;
&lt;li&gt;931-29-176  Avenue Top Floor Queens NY 22577&lt;/li&gt;
&lt;li&gt;123 Blueriver Rd 1 Pkwy Court N Dallas TX 93847&lt;/li&gt;
&lt;li&gt;2883 Roosevelt Rd Ste 101 SLot 909 Deerborn MI 41982&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although these addresses all have some complexities, they still follow common patterns. Building a rules-based parsing system could be complex and difficult to iterate on as more patterns are added to it. However, this is where machine learning can excel as it will detect these patterns as you add more training examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ship-fast-and-iterate"&gt;
  &lt;/a&gt;
  Ship fast and iterate
&lt;/h2&gt;

&lt;p&gt;Given the benefits that machine learning can provide to this problem, we wanted to get a solution into production as soon as possible. The question became, how do we quickly train a model, especially when Lob has so much address data to choose from? The answer, active learning.&lt;/p&gt;

&lt;p&gt;Active learning is a cyclical process of identifying the most useful training examples, labelling these, and retraining the model. We started with a list of 100,000 unique addresses (this large number makes it more likely that uncommon address formats will be included in the dataset), labelled 10 of these with their address labels (e.g., primary number, street name, zip code), trained the model using just these 10 examples, then predicted the parsings along with a confidence of these parsings on the remaining 999, 990 addresses.&lt;/p&gt;

&lt;p&gt;After using just 10 training examples, it was easy to see that the model was beginning to understand patterns in the data. For example, primary numbers are often the numbers at the start of an address and states are often the two letters before the zip code. Choosing the next set of 10 addresses to label and add to the training data is easy, pick 10 that the model has low confidence in how to parse.&lt;/p&gt;

&lt;p&gt;This iterative process of training and labelling continued until the model could provide a net benefit to our address verification product. At this point, we moved our machine learning parsing model into production and provided our customers with the added benefit of a more accurate service. Model development will continue to further increase its accuracy, primarily by adding more training examples and better standardization of the input address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standardizing-the-input-address"&gt;
  &lt;/a&gt;
  Standardizing the input address
&lt;/h2&gt;

&lt;p&gt;We can train a performant address parser with fewer training examples by standardizing the input address. By reducing the complexity of the task, the model requires fewer training examples to become proficient. Methods to standardize the input address can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making all of the text uppercase&lt;/li&gt;
&lt;li&gt;Removing unnecessary symbols: #(),%;_:&amp;lt;&amp;gt;{}&lt;/li&gt;
&lt;li&gt;Correcting typos, e.g., “Sourth” to “South”&lt;/li&gt;
&lt;li&gt;Separating words, e.g., “Rodeodrive” to “Rodeo drive”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-speed"&gt;
  &lt;/a&gt;
  The need for speed
&lt;/h2&gt;

&lt;p&gt;A key feature of our address verification product is speed. Therefore, the library we chose to help build our address parser had to be up for the task. After comparing a few options, we chose &lt;a href="https://github.com/explosion/spaCy"&gt;spaCy&lt;/a&gt;. Given its state-of-the-art speed, named entity recognition feature, and documentation, spaCy is very suitable for this task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-evaluation"&gt;
  &lt;/a&gt;
  Model evaluation
&lt;/h2&gt;

&lt;p&gt;Measuring the performance of an address parser (or any &lt;a href="https://en.wikipedia.org/wiki/Named-entity_recognition"&gt;named entity recognition&lt;/a&gt; [NER] model) won’t use traditional metrics from regression or classification problems. We chose the &lt;a href="https://studymachinelearning.com/jaccard-similarity-text-similarity-metric-in-nlp/"&gt;Jaccard coefficient&lt;/a&gt; as it is well suited for the evaluation of NER models. The parser’s performance on each address label was measured, then these scores were aggregated into a weighted average to compare the overall performance between two versions of the model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With a well-defined problem and plenty of data that is ready for labelling, a machine learning solution can be delivered in a matter of weeks. The quick feedback loop that active learning provides will help you to reach the desired performance much faster than labelling random examples. If possible, reduce the complexity for the model by standardizing the input data.&lt;/p&gt;

&lt;p&gt;See Lob in action. &lt;a href="https://www.lob.com/sales"&gt;Request a demo today&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Database says NOPE</title>
      <author>Matthew</author>
      <pubDate>Mon, 18 Oct 2021 20:04:40 +0000</pubDate>
      <link>https://dev.to/mtfoley/database-says-nope-41p0</link>
      <guid>https://dev.to/mtfoley/database-says-nope-41p0</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/SXOdjPojfeOXzgc0J1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SXOdjPojfeOXzgc0J1/giphy.gif" alt="password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I joined &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt; last week and they have this awesome zoom meeting that members occasionally spin up for pairing and coworking. A great dev named &lt;a href="https://github.com/LincolnFleet"&gt;Travis Martin&lt;/a&gt; was adapting an existing project that had an app bundled with a Postgres v9 DB in a docker context, and he was trying to redeploy it in a different context with a newer version of Postgres.  At the point I joined the zoom meeting, the app was having trouble authenticating to Postgres.&lt;/p&gt;

&lt;p&gt;I've worked with a few different databases before, and I'd contributed to the &lt;a href="https://github.com/Team-TAU/tau"&gt;TAU project&lt;/a&gt; in the past which uses Django and Postgres.  As I tried to make suggestions, I referred to a few of the bootstrapping scripts I encountered on that project, and they helped to some degree of making sure all the pieces were in place in the database server (pasted below):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check if user exists: &lt;code&gt;SELECT COUNT(*) AS count FROM pg_catalog.pg_user WHERE usename={db_user}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;check if database exists: &lt;code&gt;SELECT COUNT(*) AS count FROM pg_database WHERE datname={db_name}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create the database if needed: &lt;code&gt;CREATE DATABASE {db_name};&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create the user if needed: &lt;code&gt;CREATE USER {db_user} WITH ENCRYPTED PASSWORD '{db_pw}';&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;assign privileges: &lt;code&gt;GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {db_user}; # use with care&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;update user password if needed: &lt;code&gt;ALTER USER {db_user} WITH ENCRYPTED PASSWORD '{db_pw}'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, after using statements like these to make sure the DB server was setup correctly, we still were getting the same error message. Travis verified all sorts of things, like whether the app had access to the environment variables he wanted. We had a big clue when he attempted to authenticate to the Postgres over the &lt;code&gt;psql&lt;/code&gt; command with the app's credentials, and he didn't get an opportunity to enter a password.  The trick turned out to be that he was logged into the OS with the same username, configured earlier in the deployment process. As we got to reading further in the &lt;a href="https://www.postgresql.org/docs/12/auth-pg-hba-conf.html"&gt;Postgres docs&lt;/a&gt;, we found that the Postgres configuration file &lt;code&gt;pg_hba.conf&lt;/code&gt; had the authentication method set to "ident", which relies on a separate &lt;br&gt;
"ident" service, and in order to get things working, Travis set the authentication method to different option more appropriate for clients leveraging usernames and encrypted passwords.&lt;/p&gt;

&lt;p&gt;This was a pretty specific use case, but maybe it'll help somebody!&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>javascript</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How React Works Under The Hood</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 18 Oct 2021 19:38:18 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-react-works-under-the-hood-1jbg</link>
      <guid>https://dev.to/ubahthebuilder/how-react-works-under-the-hood-1jbg</guid>
      <description>&lt;p&gt;How does React actually work beyond the syntactic sugar?  &lt;/p&gt;

&lt;p&gt;This question has dominated my thoughts for a very long time. My curiosity led me into carrying out a deep research on React, and my findings were quite interesting. &lt;/p&gt;

&lt;p&gt;My quest to demystify React was one of the most eye-opening things I have ever undertaken.&lt;/p&gt;

&lt;p&gt;So if you also interested in finding out how React really works under the hood then you’re at the right place. &lt;/p&gt;

&lt;p&gt;In this article, I am going to share some of my interesting discoveries about the inner workings of React, in regards to the rendering process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-the-dom-and-essence-of-react"&gt;
  &lt;/a&gt;
  HTML, The DOM and Essence of React
&lt;/h3&gt;

&lt;p&gt;We all know that a web page is structured using HTML. Hence, web pages are basically HTML Documents. &lt;/p&gt;

&lt;p&gt;A HTML document can be modified through an API called the DOM using methods like &lt;code&gt;querySelectorAll()&lt;/code&gt;, &lt;code&gt;getElementsById()&lt;/code&gt; and so on. &lt;/p&gt;

&lt;p&gt;After modification, the web browser has to re render the page to reflect those changes. &lt;/p&gt;

&lt;p&gt;However, this process is very expensive for the web browser to undertake. So if you have a page which changes regularly (aka a dynamic web page), then directly manipulating the DOM would be very inefficient.&lt;/p&gt;

&lt;p&gt;In fact, it is slower to repaint the DOM than it to create 10,000 objects with JavaScript. &lt;/p&gt;

&lt;p&gt;This fact predicates the existence and usefulness of React as a library.&lt;/p&gt;

&lt;p&gt;React provides you with a declarative way to create user interfaces. In other words, you don’t have to specify how exactly you want your web page to be rendered, or how the elements should be inserted. Instead you are more concerned with what elements to create and describing how they should look and behave.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-elements-are-just-objects"&gt;
  &lt;/a&gt;
  React Elements are just Objects
&lt;/h3&gt;

&lt;p&gt;You may or may not have known this, but React is just a tree of JavaScript objects. &lt;/p&gt;

&lt;p&gt;For example, consider the following functional component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In React, a component is a class or function which describes the UI which you want to create on your webpage. &lt;/p&gt;

&lt;p&gt;A React element is basically a description of the UI which you ultimately want to insert into the DOM. Hence, a React element is not a DOM element until the &lt;code&gt;render()&lt;/code&gt; method of the ReactDOM library is called.&lt;/p&gt;

&lt;p&gt;When a component is called from a Parent, React will call the &lt;code&gt;render()&lt;/code&gt; method on that child element and return a React element, which is just a plain object with certain properties. &lt;/p&gt;

&lt;p&gt;For example, calling the above functional component actually returns the following object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;$$typeof&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The object contains certain properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;: This is a reference to the type of tag used. If an in-built DOM HTML element (such as main, div etc) is used, then the type points to the string representation of that DOM element. But if you import a custom React component using the typical &lt;code&gt;import ...&lt;/code&gt; syntax, then you are referencing to a component element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt;: This property is used to identify an element amongst other children using unique values. This is usually when iterating over a list of children elements.&lt;br&gt;
Ref: a reference to an actual DOM node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;typeOf&lt;/strong&gt;: The value of this property is always a symbol. Symbol is a JacaScipt data type introduced in ES6. The object takes in a value and returns a unique symbol. In the case of React, the Symbol object takes in a react.element. This is a protection feature against cross-scripting attacks. The feature  is used a identify React elements to avoid scenarios where malicious values is passed to React.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;props&lt;/strong&gt;: This contains all of the elements children. If the component has multiple children, then the children property will be an array instead of an object. Each object has the same set of properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now this object is what we call the &lt;strong&gt;virtual DOM&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The process of building up these objects is significantly cheaper than directly writing to the DOM. So instead of making direct modifications to the DOM, we can create a virtual DOM and make modifications on that object tree instead.&lt;/p&gt;

&lt;p&gt;React creates a tree of elements whenever the render function is called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reconciliation"&gt;
  &lt;/a&gt;
  Reconciliation
&lt;/h3&gt;

&lt;p&gt;Reconciliation houses the diffing algorithm which determines what part of the tree we should replace. &lt;/p&gt;

&lt;p&gt;In other words, this is how React reconciles the DOM tree with the React element tree when a change is made. &lt;/p&gt;

&lt;p&gt;The diffing algorithm is the way which we can tell difference between the two trees and determine what parts of the tree we need to replace.&lt;/p&gt;

&lt;p&gt;One important behaviour of React is how it reacts to type change on the top-level (root) element. &lt;/p&gt;

&lt;p&gt;In such a case, React tears down the whole element tree and builds up a new tree.&lt;/p&gt;

&lt;p&gt;For example if the &lt;code&gt;div&lt;/code&gt; tag were to change to a &lt;code&gt;span&lt;/code&gt; tag, then React will destroy the entire tree along with the DOM nodes. The following will also happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All old component instance (in &lt;code&gt;div&lt;/code&gt;) will receive componentWillUnmount and equivalent useEffect hook&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New component tree will be built up with &lt;code&gt;span&lt;/code&gt; as root element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React will start rerendering again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New nodes will inserted to the DOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New components will receive componentWillMont and then ComponentDidMount and their useEffects hook will run&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The old props and state (for div) will be discarded&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is only a property change, then React will only update  the changed property, and not tear down the entire tree. &lt;/p&gt;

&lt;p&gt;So assuming we are moving from one product item to another product item as in the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;Five&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ProductList&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;Six&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ProductList&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React will maintain the same component instances, pass in a new &lt;code&gt;id&lt;/code&gt; props and then rerender so we navigate to a different page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#children"&gt;
  &lt;/a&gt;
  Children
&lt;/h4&gt;

&lt;p&gt;Suppose we have a list of and we insert a new movie to the beginning of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React has no way of knowing that a changes has occurred and where exactly the change happened. &lt;/p&gt;

&lt;p&gt;As a result, React would tear down the tree and rebuild a new tree, but this is highly inefficient. &lt;/p&gt;

&lt;p&gt;Instead, you should pass a unique value to the key property of each child. &lt;/p&gt;

&lt;p&gt;React will recursively check for the unique values of the key properties and compare them. That way, it will know where on the list to insert the new item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-to-the-dom"&gt;
  &lt;/a&gt;
  Rendering to the DOM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This process triggers the reconciliation process which builds up the DOM tree, the React element tree and the entire diffing process. Then React eventually inserts the React Component tree into the Browser DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;We have seen that React Elements are just regular objects. For all nested component, React generates a tree of objects which makes up the virtual DOM.&lt;/p&gt;

&lt;p&gt;When then make updates on the virtual DOM through a process known as reconciliation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: Get weekly roundup of the best articles on web development by signing up to my  &lt;a href="https://www.getrevue.co/profile/techwithking"&gt;newsletter&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a unique ID in React JS</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Mon, 18 Oct 2021 19:37:21 +0000</pubDate>
      <link>https://dev.to/salehmubashar/create-a-unique-id-in-react-js-3f75</link>
      <guid>https://dev.to/salehmubashar/create-a-unique-id-in-react-js-3f75</guid>
      <description>&lt;p&gt;Hi Guys&lt;br&gt;
Ok so in this post I will be giving you guys&lt;br&gt;
the simple steps to create a unique reference&lt;br&gt;
ID in react JS.&lt;br&gt;
This has many uses such as giving a user uploaded&lt;br&gt;
image a unique name for saving in a database.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;Install &lt;strong&gt;UUID&lt;/strong&gt; v4 using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install uuidv4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Import the package into your component, page or code etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;You can now assign the Uinique ID to any variable using the below code&lt;br&gt;
&lt;em&gt;Nameref is an example here, it can be any variable name.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila!, you're done.&lt;/p&gt;

&lt;p&gt;Thanks you all for reading this post.&lt;br&gt;
If it was helpful, please consider following :)&lt;br&gt;
Until next time&lt;br&gt;
Bye! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 Python Mini Projects with code you can build now.</title>
      <author>Drishti Peshwani</author>
      <pubDate>Mon, 18 Oct 2021 19:31:38 +0000</pubDate>
      <link>https://dev.to/drishtipeshwani/3-python-mini-projects-with-code-you-can-build-now-16cf</link>
      <guid>https://dev.to/drishtipeshwani/3-python-mini-projects-with-code-you-can-build-now-16cf</guid>
      <description>&lt;p&gt;In today's post, I will be sharing three fun python mini projects with code that you can start building now. So, let's begin -&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-random-password-generator"&gt;
  &lt;/a&gt;
  1. Random Password Generator
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program to generate random passwords.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - Here, we are first asking the user for the size of the desired password. After this, we define a long string consisting of alphabets, numbers, and special symbols. Once we have obtained the size, we will use the random.sample() function to generate a string of random characters of a given size.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzUCPwil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7hqi8vcv5ai9q4fp89r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzUCPwil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7hqi8vcv5ai9q4fp89r.png" alt="import random.py - Visual Studio Code 20-09-2021 10_20_12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-convert-pdf-text-to-audiobook"&gt;
  &lt;/a&gt;
  2. Convert PDF Text to Audiobook
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program that can be used to convert PDF text to audiobook.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - We will be using pyttsx3 python library to convert text to speech. &lt;br&gt;
&lt;strong&gt;Installation&lt;/strong&gt; - We will first install pyttsx3 and PyPDF2 packages. &lt;br&gt;
&lt;strong&gt;References&lt;/strong&gt; - &lt;a href="https://pypi.org/project/pyttsx3/"&gt;https://pypi.org/project/pyttsx3/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rb9KEYs4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byalh1lvpgbfz2bsvfr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rb9KEYs4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byalh1lvpgbfz2bsvfr1.png" alt="import random.py - Visual Studio Code 20-09-2021 13_03_50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-email-slicer-program"&gt;
  &lt;/a&gt;
  3. Email Slicer Program
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program to fetch our username and domain name from our email address&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - We know that the username and domain name are separated by a @ character, so we will be basically dividing our entire email into 2 strings using @ as a divider.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQAuC5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwcka3l709k7efekuy65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQAuC5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwcka3l709k7efekuy65.png" alt="import random.py - Visual Studio Code 20-09-2021 13_09_55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found these mini-projects useful and interesting and will build these projects, as the best way to learn any programming language is by building projects.&lt;/p&gt;

&lt;p&gt;If you enjoyed working on these projects, you can also participate in &lt;strong&gt;Hack This Fall 2.0&lt;/strong&gt; and explore building advanced projects. Hack This Fall is a 48 Hours virtual hackathon that aims at nurturing your new ideas and prototypes in various domains. You can check out the official website to get more information and register for the hackathon - &lt;a href="https://hackthisfall.tech/"&gt;https://hackthisfall.tech/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, don't forget to use my referral code &lt;strong&gt;HTFHE092&lt;/strong&gt; while registering.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Functional Programming with JS</title>
      <author>Mahmoud Hassan</author>
      <pubDate>Mon, 18 Oct 2021 19:26:17 +0000</pubDate>
      <link>https://dev.to/trezeguit/functional-programming-with-js-1bgd</link>
      <guid>https://dev.to/trezeguit/functional-programming-with-js-1bgd</guid>
      <description>&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; is a programming paradigm designed to handle pure mathematical functions. This paradigm is totally focused on writing more compounded and pure functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; is a particular kind of &lt;strong&gt;declarative programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you need to know the difference between declarative programming and imperative programming, they are js paradigms or techniques to organize your code.&lt;br&gt;
In imperative programming, we specify the program logic describing the flow control.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let name = "Ali";
let Greeting = "Hi, ";
console.log(Greeting , name);  // Hi,  Ali
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the opposite, declarative programming we specify the program logic without describing the flow control&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Greeting = (name) =&amp;gt; {
    console.log('Hi, ',name);
}

Greeting("Ali"); // Hi, Ali
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, as you have noticed, the &lt;strong&gt;functional programming&lt;/strong&gt; focuses on the code being clean, organized, and reused through&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Pure Functions&lt;/strong&gt;: 
  are simple and reusable. They are completely independent of the outside state(global variables), easy to refactor, test and debug.
A pure function is a function which given the same input, will always return the same output.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const add = (x,y) =&amp;gt; {
    console.log(x+y);
}
add(5,4) // 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Math.random&lt;/code&gt; is a popular example of not pure function.&lt;br&gt;
another example for not pure function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count = 0;
const incCount = (value) =&amp;gt; count += value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;*** Higher-Order Functions***: they can receive a function as a parameter(callback) and also can return a function, they are very helpful for writing complex functions.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const animals = ["Cat", "Dog", "Elephant",
 "Giraffe", "Lion", "Monkey"];
const zooWithoutCat = animals.filter(animal =&amp;gt; animal !== "Cat");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note ==&amp;gt; Don't Iterate&lt;/strong&gt; you can use higher-order functions like map, filter, reduce, find...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numbers = [2, 4, 6];
let numbersX2 = numbers.map(number =&amp;gt; number*2); // [ 4, 8, 12 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Avoid Mutability&lt;/strong&gt;: you must avoid changing the data.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num1 = [1, 2, 3];
let num2 = num1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;any change in num2 affects num1 (mutability), we can fix this problem by using higher-order functions or spread operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num2 = [...num1];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Persistent Data Structures for Efficient Immutability&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of all data as immutable, never changing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;the problem with immutability is that you need to copy all data for a little change and this can give you efficiency problems, because you will use a lot of space, so &lt;strong&gt;What is the solution?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Don't Worry&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
there are many of js libraries that handle this problem like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mori&lt;/li&gt;
&lt;li&gt;Immutable.js&lt;/li&gt;
&lt;li&gt;Underscore&lt;/li&gt;
&lt;li&gt;Lodash&lt;/li&gt;
&lt;li&gt;Ramda
they depend on structural sharing idea 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRSXyAn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du4myz2e9lpubaoxljlp.jpg" alt="Image description"&gt;
Note that the yellow squares are shared between 2 variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thanks for your time&lt;/strong&gt;&lt;br&gt;
you can add me on LinkedIn: &lt;a href="https://www.linkedin.com/in/mahmoudhassan7764"&gt;Link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
