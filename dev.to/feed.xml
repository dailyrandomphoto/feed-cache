<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>When to use aria-labels in your HTML</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 04 May 2021 20:05:51 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</link>
      <guid>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;It's common to display multiple links with the same text on a web page — such as 'read more' in a list of blog posts. To improve the web page experience for people who use screen readers and accessibility tools, add an aria-label to the anchor element with text that differentiates the content of the onward links.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check the results in Chromium Dev Tools &amp;gt; Accessibility. Voila!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" alt="A screenshot of my website, showing how aria labels enrich the context of the HTML in the accessibility tree in Chromium dev tools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-for-accessibility"&gt;
  &lt;/a&gt;
  Checking for accessibility
&lt;/h2&gt;

&lt;p&gt;In a previous post, &lt;a href="https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&gt;How to make your code blocks accessible on your website&lt;/a&gt;, I listed many of the tools I use to check accessibility on my websites as part of my workflow, including &lt;a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd"&gt;axe Dev Tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a section of my website home page that displays a list of recent blog posts. Observe six links with the text 'read more', below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" alt="A screenshot of my website showing my recent post list, with six links using the text 'read more'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code for each 'read more' link (without an aria-label) might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we scan the code above with &lt;strong&gt;axe&lt;/strong&gt;, we receive the following warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure that links with the same accessible name serve a similar purpose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" alt="alt=&amp;quot;A screenshot of my website and Axe Dev Tools console, showing the issue description 'Ensure that links with the same accessible name serve a similar purpose', as all of the links have the text 'Read more'.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the accessibility tree in Chromium Dev Tools to check how screen readers and assistive technologies understand your web page. Find the accessibility tab far to the right of the styles tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" alt="A screenshot of my website showing the accessibility tree in Chromium dev tools, where a link is described with the text 'Read more'. This is the same for all links in that section."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were using a screen reader to select the link to a specific blog post, and all the information you had was the text 'read more' — six times over — you'd be pretty frustrated! So how do we fix it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-arialabels-to-provide-descriptive-information"&gt;
  &lt;/a&gt;
  Add aria-labels to provide descriptive information
&lt;/h2&gt;

&lt;p&gt;I always recommend to use a variety of tools to check accessibility on your website, and also to use your judgement. Here's what Axe suggests to check in the above example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check that links have the same purpose, or are intentionally ambiguous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I checked, and I confirmed. These links do &lt;strong&gt;not&lt;/strong&gt; have the same purpose — they link to different blog posts or onward journeys. Here's where the power of aria-labels comes into play.&lt;/p&gt;

&lt;p&gt;Here's the same anchor link with an aria-label attribute added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Read How to make your code blocks accessible on your website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we re-scan the page with &lt;strong&gt;axe&lt;/strong&gt; with the aria-labels in place, everything looks good! We also see that the links have distinct titles in the accessibility tree, allowing screen readers and assistive technologies to read out a more descriptive link when the element is in focus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" alt="A screenshot of my website, showing that when adding aria-labels to the links, the accessibility tree has better context of the onward journey."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-accessibility-tools-to-help-you-build-better-websites"&gt;
  &lt;/a&gt;
  7 web dev accessibility tools to help you build better websites
&lt;/h2&gt;

&lt;p&gt;To learn more about the different accessibility tools I use on a daily basis, check out my very first YouTube video — 7 web dev accessibility tools to help you build better websites.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VjbYTdR-NYE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Make accessibility part of your web dev workflow from the moment you write that first line of code, and you'll automatically create better and more inclusive experiences for everyone as you build stuff, learn things, and love what you do.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Programming at my day job</title>
      <author>Lucas Kelly</author>
      <pubDate>Tue, 04 May 2021 19:49:03 +0000</pubDate>
      <link>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</link>
      <guid>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</guid>
      <description>&lt;p&gt;When you read the title of this post, you may think “what’s your day job? Isn’t that what you are supposed to do?”&lt;/p&gt;

&lt;p&gt;The answer is I’m a trading assistant for a financial planning and investment office. And no, my job is not programming related at all. At least it wasn’t meant to be...&lt;/p&gt;

&lt;p&gt;I’ve been at my job for almost 4 years now and have done much more than what I was originally hired to do. But since I began to learn how to program about 6 months ago, I have been able to save my employer probably a few hundred dollars at least by editing code on our server based Client Relationship Manager (CRM) myself. I literally just worked on the program today and saved probably at least $90 in fees that it would have cost to contact the company we usually work with to make changes. &lt;/p&gt;

&lt;p&gt;I’m posting about this because it gives me hope that although I am not in a tech related job at the moment, it definitely is where I see myself in a couple years. &lt;/p&gt;

&lt;p&gt;Talk to you all soon!&lt;/p&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Secret input in python, Get input secretly and in a personalized way!</title>
      <author>Matin Najafi</author>
      <pubDate>Tue, 04 May 2021 19:12:07 +0000</pubDate>
      <link>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</link>
      <guid>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</guid>
      <description>&lt;p&gt;In the Python programming language, we use the input () command to get input from the user, which we all know. But sometimes we want to get the input so that the user actually enters it, but it can not be displayed in command prompt! In these cases, we use the local ‘’getpass‘’ library.&lt;br&gt;
Now we want to write a secret input function together that performs the getpass operation, but makes the appearance of the program more beautiful and hides the entries with a star or the custom display. (Like a password entry in html)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are not allowed to perform an operation when receiving a simple input in Python, let’s use pynput and get the input of the user keyboard&lt;br&gt;
In this short article, I want to make the code of this class available to you, but before that, I will give you a brief description.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;This class receives your input with pynput and performs the simulation completely with a few simple terms and prints.&lt;br&gt;
The function of this function is such that the user input is received using pynput, but because pynput receives the user input in any place and we only want to receive the input that the user enters in the console, a function to receive the active window in the form of cross We write -platform and using this function, we put the condition in on_press that the inputs are received only in the console.&lt;br&gt;
To display the stars and any other costume characters as input, we must print it with a blank end. But it is not possible to print them using print ()! So we do this using the sys module and the sys.stdout command and print the expressions. Click to read a little about sys.stdout printing.&lt;br&gt;
Until now, inputs are received and a star or any other character is printed while typing! Now we want to make sure that if the character was wrong and we hit backspace, that character will be deleted from the console.&lt;br&gt;
If we pay attention, the inputs that are sent in on_press have a value called char that we can receive the value. But for keys such as Inter, backspace, arrow keys, etc., it is not like this and it is raised. So we bet that if the key entered is equal to pynput.keyboard.Key.backspace, the backup operation will be performed and a return will be made so that the continuation of the function code does not work. Now how to clear the input from the console? Just print the phrase ‘\b \b’ using sys.stdout. To be precise, each \b reverses the input once, but the character is not deleted after that. So we put a space after that to replace the input with a space after that and the character is removed from the user’s view and we go back again with \b once as if there was a backspace in the input once.&lt;br&gt;
Note that if you want to get the show to the user as desired, the user may give a multi-digit show. So multiply the phrase ‘\b \b’ by the number of show characters so that there is no problem.&lt;br&gt;
Done! So far we can type and delete the typed phrase. Be a little careful. If we hit too much backspace, the custom printed prompt will also be deleted. To prevent this, we create a numeric variable called on_char and set its value to 0. For each on_press we add a number to this variable. But we bet on backspace that if this variable is less than or equal to 0, it will retry and the function will not run. This way we can prevent this problem.&lt;br&gt;
So far we have made a show entry! Now we want to receive the user inputs and save them in a variable so that when the user enters the enter key, those saved inputs will be returned. Simply create a self.value in our &lt;strong&gt;init&lt;/strong&gt; class and put the key.char in each on_press, which is equivalent to the user input string character, and in the case of backspace, by converting the self.value to a list, and popping the last character And convert self.value to string again using join, delete the last letters.&lt;br&gt;
Note that for this section, put a try and except because it is possible to enter separation keys that do not have a value of char, so if except, do a simple return.&lt;br&gt;
For when the user enters the enter key, because we turned on the listener by join method and we can not simply stop the listener, so we start the listener in a fan and on_press in the same function. We put that function privately in &lt;strong&gt;init&lt;/strong&gt; so that the user can not use it.&lt;br&gt;
The problem with pynput is that when we press the Enter key, once the phrases we have typed so far are pasted and entered! To prevent this, if the user enters enter, we put an empty getpass.getpass to take this input imperceptibly!&lt;br&gt;
Almost done! Now call the function exactly below &lt;strong&gt;init&lt;/strong&gt; and then return the self.value value in &lt;strong&gt;str&lt;/strong&gt;. For added security, you can delete variables other than self.value with del. The codes of this useful class are available here:&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>python</category>
      <category>input</category>
      <category>secret</category>
      <category>trick</category>
    </item>
    <item>
      <title>19 Simple Hover Animation Using CSS</title>
      <author>Kiran Raj R</author>
      <pubDate>Tue, 04 May 2021 19:08:53 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</link>
      <guid>https://dev.to/kiranrajvjd/19-simple-hover-animation-using-css-1l36</guid>
      <description>&lt;p&gt;Here is the 19 simple, beginner level hover animation using CSS. The logic behind the examples are briefly explained as comments in the CSS code section. The before and after pseudo elements are used with simple CSS transform property, JavaScript is not used in these examples. Hope you will like it, happy coding.&lt;/p&gt;

&lt;p&gt;Codepen &lt;a href="https://codepen.io/kiran-r-raj/pen/ZEezrJy"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/ZEezrJy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Hitchhiker's Guide to SQLite with Python</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 04 May 2021 19:08:26 +0000</pubDate>
      <link>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</link>
      <guid>https://dev.to/arctype/a-hitchhiker-s-guide-to-sqlite-with-python-3c9j</guid>
      <description>&lt;p&gt;To explore SQLite along with Python, which is a user-friendly and no-nonsense language, we are going to &lt;strong&gt;build a simple tic-tac-toe game.&lt;/strong&gt; So buckle up and get your machines ready!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-sqlite-and-embedded-databases"&gt;
  &lt;/a&gt;
  Introduction to SQLite and Embedded Databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is a small, self-contained, client/embedded database written in the &lt;a href="https://en.wikipedia.org/wiki/C_programming_language"&gt;C Programming language&lt;/a&gt; and can be summarized using the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application library.&lt;/li&gt;
&lt;li&gt;Directly writes to disk.&lt;/li&gt;
&lt;li&gt;Cross-platform, stable, and the most &lt;a href="https://www.sqlite.org/mostdeployed.html"&gt;widely deployed and used database engine.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Zero configuration.&lt;/li&gt;
&lt;li&gt;Automatic recovery.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlite.org/copyright.html"&gt;Public domain license.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we are going to see many of these features in action. Features such as data replication, network access, etc., are intentionally absent from SQLite since it was built for a much more lightweight use case. SQLite databases are very useful in constrained environments such as mobile devices, lightweight desktop apps, IoT devices, and games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-sqlite-with-python"&gt;
  &lt;/a&gt;
  Setting Up SQLite with Python
&lt;/h2&gt;

&lt;p&gt;Let's get our learning environment up and running by installing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3;&lt;/li&gt;
&lt;li&gt;any IDE for Python coding—I recommend PyCharm;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arctype.com/"&gt;Arctype SQL Client&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;and SQLite tools installed on your OS for CLI (Mac OS comes with it by default).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#library-setup-and-database-creation"&gt;
  &lt;/a&gt;
  Library Setup and Database Creation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Sqlite3&lt;/code&gt; comes packaged with Python by default and there is no need to install any additional libraries. Let's go ahead and import &lt;code&gt;Sqlite3&lt;/code&gt; and then create our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('sqlite.db')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. The database is now created and we can create tables and insert data now. Isn't this a breeze when compared to setting up a full-blown RDBMS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-are-sqlite-databases-stored"&gt;
  &lt;/a&gt;
  Where Are SQLite Databases Stored?
&lt;/h2&gt;

&lt;p&gt;Once you run the above application, a &lt;code&gt;sqlite.db&lt;/code&gt; file is automatically created at the project root level. As we will see later, this file will be re-used whenever the application is started. We can customize the location of this file by just connecting to the database with its path.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;conn = sqlite3.connect('data/sqlite.db')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create the &lt;code&gt;sqlite.db&lt;/code&gt; file inside the &lt;code&gt;data&lt;/code&gt; folder. Keep in mind that the directory &lt;code&gt;data&lt;/code&gt; needs to be created beforehand. The file extension &lt;code&gt;.db&lt;/code&gt; is also optional—SQLite will just create a binary file with the name we provide it with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-and-managing-an-sqlite-database"&gt;
  &lt;/a&gt;
  Configuring and Managing an SQLite Database
&lt;/h2&gt;

&lt;p&gt;As we just saw, there is no configuration required to get our database set up. Since it is an application library, there is no server and the database comes up and goes down with the connection initiated by the application running behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-an-sqlite-database-from-the-command-line"&gt;
  &lt;/a&gt;
  Connecting to an SQLite Database from the Command Line
&lt;/h2&gt;

&lt;p&gt;SQLite (version 3) comes pre-installed on Mac OS operating systems. For other platforms, we can download the CLI and other tools from the &lt;a href="https://sqlite.org/download.html"&gt;SQLite website itself&lt;/a&gt;. The command line can be invoked by typing the command &lt;code&gt;sqlite3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWC_r-19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_2.png" alt="SQLite Command Line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that I have connected directly to the database that I used from the Python script. We can do so by using &lt;code&gt;sqlite3 /path/to/file&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-sample-tables-and-running-basic-queries"&gt;
  &lt;/a&gt;
  Creating Sample Tables and Running Basic Queries
&lt;/h2&gt;

&lt;p&gt;Let's create a table for testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create table testing(id int, name text);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then insert some rows into the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into testing values(100, 'Name1');
insert into testing values(101, 'Name2');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the records by doing a simple &lt;code&gt;select *&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lq3W-wxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_3.png" alt="SQLite command line select statement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a ton of helper functions that SQLite provides to learn more about tables and the schema. Below are some of the functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5viedyM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/04/Arctype_Sqlite_4.png" alt="SQLite command line helper functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.tables&lt;/code&gt; gives me information about all of the tables. &lt;code&gt;.schema&lt;/code&gt; gives the information about a specific table. &lt;a href="https://www.sqlite.org/pragma.html#pragma_table_info"&gt;pragma table_info&lt;/a&gt; is a function that gives more information about the table (i.e. the data type and column name).&lt;/p&gt;

&lt;p&gt;Now, let's connect to this database using our Python script and try to read these tables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')

cursor = conn.cursor()

cursor.execute('SELECT * FROM testing')

rows = cursor.fetchall()

for row in rows:
    print(row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above code will print.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(100, 'Name1')&lt;br&gt;
(101, 'Name2')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-tictactoe-game-using-python-and-sqlite"&gt;
  &lt;/a&gt;
  An Example Tic-Tac-Toe Game Using Python and SQLite
&lt;/h2&gt;

&lt;p&gt;Let's consider a real-world use case—games. Games in mobile applications make heavy use of SQLite for storing their game status and then sync to a backend server periodically/based on a user trigger. In this example, we will see a Tic-Tac-Toe game developed in Python that uses SQLite to store game data and player information. We can then query this database offline to retrieve game-related information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-table-design-for-tictactoe"&gt;
  &lt;/a&gt;
  Database Table Design for Tic-Tac-Toe
&lt;/h2&gt;

&lt;p&gt;Before we attempt to write the game, let's create our database ER diagram that is going to represent our tables.&lt;/p&gt;

&lt;p&gt;First, we are going to create our &lt;code&gt;Player&lt;/code&gt; table which has the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;created_date&lt;/code&gt; which is going to be used to store the player data. Next, we are going to create our &lt;code&gt;Game&lt;/code&gt; table which will have the player details, game status, and winner details. The Entity-Relationship diagram for these tables is given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0dvE2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Group-21.png" alt="tic tac toe game database relationship diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could further normalize this by introducing a game status entity, but we are looking for a simple model to understand SQLite rather than a perfect design. Based on this spec, tables can be created accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The database is now set up, so let's code our game!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-tictactoe-game-in-python"&gt;
  &lt;/a&gt;
  Coding the Tic-Tac-Toe Game in Python
&lt;/h2&gt;

&lt;p&gt;Before starting to write everything out in Python, let's first determine our game's logic.  For this simple example, I would recommend something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Initialize game board   
  Initialize users 
    Game logic (While loop based on exit conditions) 
      Begin game logic 
  End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to a simple two-dimensional array to hold the game board. Instead of walking through every element of the code, I am going to paste the whole code below and give a high-level walkthrough since the code is pretty self-explanatory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
The Game board is a two D array emulating the X*Y Tic Tac Toe Game
"""
global game_board
# Constants
place_already_filled = "Given place is already filled. Provide an empty place from the board"
invalid_move = "Invalid move. Enter a value within the board dimension."
invalid_value = "Invalid value. Enter an integer value within the board dimension."
game_over_tie = "Game Over. It is a tie."


def initialise_gameboard(dimensions):
    global game_board
    dimensions = int(dimensions)
    # Fill with empty strings
    game_board = [[' ' for _ in range(dimensions)] for _ in range(dimensions)]


def print_board():
    print("**************************")
    for item in game_board:
        print(item)
    print("**************************")


def check_game_status(x_pos, y_pos, player):
    row_match = True
    column_match = True
    left_diagonal_match = True
    right_diagonal_match = True

    for i in range(0, len(game_board)):
        if game_board[x_pos][i] != game_board[x_pos][y_pos]:
            row_match = False

    for i in range(0, len(game_board)):
        if game_board[i][y_pos] != game_board[x_pos][y_pos]:
            column_match = False

    for i in range(0, len(game_board)):
        if game_board[i][i] != game_board[x_pos][y_pos]:
            left_diagonal_match = False
        if game_board[i][len(game_board) - i - 1] != game_board[x_pos][y_pos]:
            right_diagonal_match = False

    print_board()

    if row_match or column_match or left_diagonal_match or right_diagonal_match:
        return f"Player {player} has won"
    else:
        return "Playing"


def game():
    dimensions = input("Enter board dimensions (3 for a 3x3 board): ")
    first_user = input("Enter first user name : ")
    second_user = input("Enter second user name: ")
    initialise_gameboard(dimensions)
    player = first_user
    count = 1

    while True:
        print(f"It's user : {player}'s turn")
        positions = input("Enter move position (x,y) : ").split(",")

        try:
            x_pos = int(positions[0]) - 1
            y_pos = int(positions[1]) - 1
        except ValueError:
            print(invalid_value)
            continue

        if x_pos &amp;lt; 0 or x_pos &amp;gt;= len(game_board) or y_pos &amp;lt; 0 or y_pos &amp;gt;= len(game_board):
            print(invalid_move)
            continue

        if game_board[x_pos][y_pos] != ' ':
            print(place_already_filled)
            continue

        if player is first_user:
            game_board[x_pos][y_pos] = 'X'
        else:
            game_board[x_pos][y_pos] = 'O'

        count = count + 1

        game_status = check_game_status(x_pos, y_pos, player)

        if game_status != "Playing":
            print(game_status)
            break

        if count == len(game_board) * len(game_board) + 1:
            print_board()
            print(game_over_tie)
            break

        # Switch players after
        if player is first_user:
            player = second_user
        else:
            player = first_user

    another_game = input("Do you want to play another game (Y/N) : ")

    if another_game.lower() == 'y' or another_game == 'Y':
        game()


game()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The game is nothing fancy. As you can see, the &lt;code&gt;game&lt;/code&gt; method is where the core logic begins.&lt;/p&gt;

&lt;p&gt;Go ahead and try it out. Below is a sample game output on the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter board dimensions (3 for a 3x3 board): 3
Enter first user name : p1
Enter second user name: p2
It's user : p1's turn
Enter move position (x,y) : 1,1
**************************
['X', ' ', ' ']
[' ', ' ', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,2
**************************
['X', ' ', ' ']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,3
**************************
['X', ' ', 'X']
[' ', 'O', ' ']
[' ', ' ', ' ']
**************************
It's user : p2's turn
Enter move position (x,y) : 2,3
**************************
['X', ' ', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
It's user : p1's turn
Enter move position (x,y) : 1,2
**************************
['X', 'X', 'X']
[' ', 'O', 'O']
[' ', ' ', ' ']
**************************
Player p1 has won
Do you want to play another game (Y/N) : n

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the above code in a separate &lt;code&gt;game.py&lt;/code&gt; file for clarity. Now to the next part, integrating this game with our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlite-integration"&gt;
  &lt;/a&gt;
  SQLite Integration
&lt;/h2&gt;

&lt;p&gt;Now, we have to make the user entries whenever the users have been created and make game entries when the game is won or a draw. Before we create our queries, let's make the actual Data Access layer methods (i.e. creating a player entry and a game entry).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sqlite3

conn = sqlite3.connect('data/sqlite.db')


def create_player(name):
    query = f"INSERT INTO player(name) VALUES ('{name}')"
    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    user_id = cursor.lastrowid
    cursor.close()
    return user_id


def create_game(first_player_id, second_player_id, game_status, winner_id):
    query = f"INSERT INTO game(first_player_id, second_player_id, game_status, winner_id) " \
            f"VALUES ({first_player_id}, {second_player_id}, '{game_status}', {winner_id})"

    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    cursor.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can use these simple methods from our game:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code anywhere after getting the user details
first_user_id = dao.create_player(first_user)
second_user_id = dao.create_player(second_user)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Paste below code when checking for game status i.e 
# game_status != "Playing"
winner_id = second_user_id

if player == first_user:
   winner_id = first_user_id

dao.create_game(first_user_id, second_user_id, game_status, winner_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do a similar code for storing game status during draw as well. Now we can play the game and the data should be recorded in our tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-data-from-sqlite"&gt;
  &lt;/a&gt;
  Importing and Exporting Data from SQLite
&lt;/h2&gt;

&lt;p&gt;Having now played a few test games, it's now time to examine the data. As everyone knows, Arctype makes querying, analyzing, and visualizing data better than ever, so before we continue, we need to learn about importing and exporting data from SQLite.  Data can be exported/imported either at the table or database level. The table level is typically used to export to other databases/applications and the database level is typically used for backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing and Exporting SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Apart from programmatic integration, once can easily export data from an SQLite database using data export facility. The most commonly used db agnostic standard is a &lt;code&gt;CSV&lt;/code&gt; format. Let's export our game table.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 -header -csv /path/to/sqlite.db/ 'select * from game;' &amp;gt; game.csv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;game.csv&lt;/code&gt; would contain the below content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id,first_player_id,second_player_id,created,game_status,winner_id
1,1,2,"2021-04-25 18:19:07","Player p1 has won",1
2,3,4,"2021-04-25 18:23:23","Player p2 has won",4
3,7,8,"2021-04-26 05:20:04","Player p1 has won",7
4,9,10,"2021-04-26 05:25:44",Draw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very similar to other database systems.&lt;/p&gt;

&lt;p&gt;Import is quite easy, first we need to create a &lt;code&gt;.sql&lt;/code&gt; file with the below content.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.import /path/to/csv game&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And then from the command line,&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/database &amp;lt; /path/to/sql/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-and-exporting-databases"&gt;
  &lt;/a&gt;
  Importing and Exporting Databases
&lt;/h2&gt;

&lt;p&gt;Database backup is actually pretty easy, just copy the SQLite file to back up system. But this method is usually difficult since users/application might be running simultaneously and the data is stored in a binary format. To do a point-in-time snapshot/human readable snapshot when the database is running/being used then we can dump the database content to a file format of our choice.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db .dump &amp;gt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dump.sql&lt;/code&gt; content will look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE player(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  created DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO player VALUES(1,'p1','2021-04-25 18:18:55');
INSERT INTO player VALUES(2,'p2','2021-04-25 18:18:55');
INSERT INTO player VALUES(3,'p1','2021-04-25 18:23:05');
INSERT INTO player VALUES(4,'p2','2021-04-25 18:23:05');
INSERT INTO player VALUES(5,'p1','2021-04-26 05:16:56');
INSERT INTO player VALUES(6,'p2','2021-04-26 05:16:56');
INSERT INTO player VALUES(7,'p1','2021-04-26 05:19:04');
INSERT INTO player VALUES(8,'p2','2021-04-26 05:19:04');
INSERT INTO player VALUES(9,'p1','2021-04-26 05:24:44');
INSERT INTO player VALUES(10,'p2','2021-04-26 05:24:44');
CREATE TABLE game(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_player_id INTEGER,
  second_player_id INTEGER,
  created DATETIME DEFAULT CURRENT_TIMESTAMP,
  game_status TEXT,
  winner_id INTEGER,
  FOREIGN KEY (first_player_id) REFERENCES player (id),
  FOREIGN KEY (second_player_id) REFERENCES player (id),
  FOREIGN KEY (winner_id) REFERENCES player (id)
);
INSERT INTO game VALUES(1,1,2,'2021-04-25 18:19:07','Player p1 has won',1);
INSERT INTO game VALUES(2,3,4,'2021-04-25 18:23:23','Player p2 has won',4);
INSERT INTO game VALUES(3,7,8,'2021-04-26 05:20:04','Player p1 has won',7);
INSERT INTO game VALUES(4,9,10,'2021-04-26 05:25:44','Draw',NULL);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('player',10);
INSERT INTO sqlite_sequence VALUES('game',4);
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on what data is there, the above SQL file content might change but the backup/format is just plain SQL.&lt;/p&gt;

&lt;p&gt;If we are not bothered about human readability then we can just dump it in a native format like below.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".backup db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for binary files are quite similar -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db ".restore db_backup.db"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Import for SQL file -&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlite3 /path/to/db &amp;lt; dump.sql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-our-sqlite-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Querying Our SQLite Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Our SQLite data is now ready to be loaded into Arctype.  This can be achieved in one of two ways—by creating and populating new tables using the SQLite-generated database file or by importing CSV data into existing tables.  First, let's create a new SQLite database by adding a new connection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aR2jqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.26.37-AM.png" alt="arctype new connection page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can choose a name for your new database.  For this example, &lt;code&gt;tictactoe&lt;/code&gt; seems fitting enough:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6bUMCTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.27.24-AM.png" alt="arctype name new SQLite connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it's time to import our data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-sqlite-tables-into-arctype"&gt;
  &lt;/a&gt;
  Importing SQLite Tables into Arctype
&lt;/h2&gt;

&lt;p&gt;We can create and populate tables in our new SQLite database using the SQL table dump from above. Simply copy and paste the contents of the &lt;code&gt;dump.sql&lt;/code&gt; file into a query, remove the manual &lt;code&gt;BEGIN TRANSACTION;&lt;/code&gt; and &lt;code&gt;COMMIT;&lt;/code&gt; lines (Arctype automatically wraps all of your statements in transactions) and click 'Run':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXCPMqLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2021/05/Screen-Shot-2021-05-04-at-10.28.03-AM.png" alt="arctype query window create tables and insert data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!  Your tables should be successfully created and filled with data. This method is fairly simple, but is only recommended for your initial data import—deleting and re-creating tables with increasingly large datasets is unsustainable, so ultimately, you'll want to simply import new data into your existing tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-csv-data-into-existing-arctype-sqlite-tables"&gt;
  &lt;/a&gt;
  Importing .CSV Data into Existing Arctype SQLite Tables
&lt;/h2&gt;

&lt;p&gt;Let's say we have already created our &lt;code&gt;game&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt; tables, rather than dropping them and creating new tables using the SQL from our &lt;code&gt;dump.sql&lt;/code&gt; file, we can instead simply import the table data from our CSV files.  As you remember from above, we exported our tables into &lt;code&gt;game.csv&lt;/code&gt; and &lt;code&gt;player.csv&lt;/code&gt; respectively.  First, select the table into which you want to import CSV data, and then click the "Import CSV" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--694mVzak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.32-AM.png" alt="arctype import CSV window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, simply review the data preview and click 'Accept' if everything looks correct:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9P-MY_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.03.53-AM.png" alt="arctype accept CSV import window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-and-querying-game-data-in-arctype"&gt;
  &lt;/a&gt;
  Viewing and Querying Game Data in Arctype
&lt;/h2&gt;

&lt;p&gt;Now that all of our data has been imported into Arctype, you can view it by simply selecting the table of your choosing.  Here is our &lt;code&gt;game&lt;/code&gt; table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7MSnuVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.36-AM.png" alt="arctype table view of game data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite similarly, this is what our &lt;code&gt;player&lt;/code&gt; table looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THTdt9lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-10.28.50-AM.png" alt="Player Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the fun part, let's select players who have won the most games.  Simply open a new tab and select "query":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jeRcYME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.11.52-AM.png" alt="arctype create a new query window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's run this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  player.name,
  count(*) AS count
FROM
  player
  JOIN game ON player.id = game.winner_id
GROUP BY
  player.name
ORDER BY
  COUNT DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your results should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1S26Ev4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Screen-Shot-2021-05-04-at-11.14.14-AM.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, in terms of its querying capabilities, SQLite is as powerful as any SQL database. We can run more queries like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which players were involved in most games that ended up in a draw?&lt;/li&gt;
&lt;li&gt;Which players lost the most?&lt;/li&gt;
&lt;li&gt;Which player got scores more than the average wins?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-tradeoffs-of-using-sqlite"&gt;
  &lt;/a&gt;
  What Are The Trade-Offs of Using SQLite?
&lt;/h2&gt;

&lt;p&gt;SQLite is often misunderstood and not properly utilized. Yes, it comes under the category of client/embedded database but is essentially trying to solve a very different problem. So, comparing SQLite with MySQL/PostgreSQL/Other RDBMS is definitely not the right way. In most environments, SQLite actually works in tandem with such client-server databases as we just saw in the examples above.&lt;/p&gt;

&lt;p&gt;In some situations, SQLite can be used without any second thoughts, while in others, a more careful analysis of the project requirements may be necessary. The SQLite webpage on &lt;a href="https://www.sqlite.org/whentouse.html"&gt;when to use SQLite&lt;/a&gt; is pretty comprehensive. Below are some of the key highlights from that page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SQLite only supports one writer at a time per database file&lt;/strong&gt;. So it is not suited for heavy concurrent writes. Readers can be N where N is decided by various factors such as OS, hardware, and other apps running on the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will first run into hardware issues before running into database size issues with SQLite as it supports &lt;strong&gt;281TB&lt;/strong&gt; of data storage.  Good luck hitting that limit!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLite can handle traffic very well—in fact, the website &lt;a href="https://www.sqlite.org/index.html"&gt;https://www.sqlite.org/&lt;/a&gt; itself is hosted on SQLite and it handles close to 400K to 500K hits per day. &lt;strong&gt;So unless you are on a fairly high traffic website (queries per second/qps measure), then SQLite should serve you very well.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key thing with any software is to use the right tool for the right use case. At the end of the day, that's what Software craftsmanship/Software Engineering is all about.&lt;/p&gt;

&lt;p&gt;Closing Thoughts&lt;br&gt;
Let's pause and observe how widely SQLite is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OSX comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Python 3 comes with SQLite by default.&lt;/li&gt;
&lt;li&gt;Windows 10 uses SQLite internally—it cannot operate without it.&lt;/li&gt;
&lt;li&gt;Built into PHP and Ruby as well.&lt;/li&gt;
&lt;li&gt;There are tons of others places where it is used. The &lt;a href="https://www.sqlite.org/famous.html"&gt;well-known users page&lt;/a&gt; gives a good list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLite is literally everywhere. It is very widely used and extremely well tested and almost a drop-in replacement for &lt;code&gt;fopen&lt;/code&gt; in Linux. Learning it and befriending SQLite has a lot of advantages and it is a must-have tool for every programmer. Hopefully, this article along with its examples gave a good introduction to SQLite. So go ahead and play with it and before jumping to the conclusion of using a client-server RDBMS, give SQLite a try and you will be surprised at how it simplifies the tech stack and operations around it.&lt;/p&gt;

</description>
      <category>sqlite</category>
      <category>guide</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>What I learned defining the Selection Process for a Software Engineer in the startup where I work</title>
      <author>charly3pins</author>
      <pubDate>Tue, 04 May 2021 18:37:50 +0000</pubDate>
      <link>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</link>
      <guid>https://dev.to/charly3pins/what-i-learned-defining-the-selection-process-for-a-software-engineer-in-the-startup-where-i-work-5fl3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been working at &lt;a href="https://arex.io"&gt;AREX Markets&lt;/a&gt; since November 2018 and since then, the company has changed a lot. When I joined it we were a team of aprox 10 people (~5 techs) and now we are close to 50. I have always liked the startup environment more than a big enterprise because of all the challenges that this entails. You have to do a lot of things and be involved in a lot of issues, as your job position or other unrelated ones, and I like that a lot. During the last weeks, or rather months, we have been interviewing a lot of people as we are growing in terms of business and we need to scale the technical team, so we started with the hiring of more software engineers.&lt;/p&gt;

&lt;p&gt;The first step was defining what kind of &lt;strong&gt;Selection Process&lt;/strong&gt; we wanted to follow. We did it all the team together and that was the first valuable thing we can extract. If you pretend to define a selection process in your company without the input from the team that will participate in it, that's bad. Everybody needs to give their input and be involved on that part as later on they will be part of it and if all goes successfully the new member will join the team, so they need to be comfortable with the decision.&lt;/p&gt;

&lt;p&gt;Having said that, you could be asking what's that process? Let me summarize it in the following lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-process"&gt;
  &lt;/a&gt;
  Selection Process
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; First of all the hiring manager has a &lt;strong&gt;call&lt;/strong&gt; with the candidate to explain the details of the team, tech stack, the role duties and basically knowing him/her and clarify the possible doubts he/she could have.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; If the call is okay, the next step is to do the &lt;strong&gt;Technical challenge&lt;/strong&gt;. For that we offer 3 options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical challenge&lt;/strong&gt;. Classic challenge that you send to the candidate an exercise to solve in X days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical portfolio&lt;/strong&gt;. If the candidate has a project(s) that cover the minimum requirements expected in the Tech Challenge can share them with the team instead of doing a Tech challenge. (Ex: sharing the repo in GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Live coding session&lt;/strong&gt;. Invitation to the candidate to do a coding session together in our office. (For obvious reasons during this year this option wasn't possible to do).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Technical review&lt;/strong&gt;. The team reviews the code from the candidate and has a call with him/her where they give the feedback from the code reviewed and ask questions and clarify doubts to the candidate more focused in the team and tech stack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Product interview&lt;/strong&gt;. If the Technical review is okay, the last step is to have a call with the Product team to see if the candidate apart of having the tech skills needed (validated on the previous phase), it has the mentality and attitude that the team needs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Final feedback&lt;/strong&gt;. After the last call the candidate receives feedback being hired or not. Depending on the case it is a call or an email. &lt;/p&gt;

&lt;p&gt;As you can see the process is not super innovative or disruptive but it is the one we all agreed and were comfortable working with. One thing that I want to highlight is regarding the Technical part. We all has been in interviews before and we wanted to do the process that we would have liked to find if we had been the interviewees. For that reason we offered the option of showing code already done instead of yes-or-yes asking for a technical challenge per se. That was a must because we all have spent a lot of hours in a tech challenge and then we end up with no feedback at all, just an email saying thanks for participating but sorry you're not the chosen one. That's the first point and the second is related to the last sentence; we agreed to do a phone call to every candidate that presented the technical part, even if we don't like it or we have doubts, the call was a must. We failed on that part because at the end with a lot of candidates on the pipeline we had to cancel I believe 2-3 calls, but for the remaining 90% we did. That was really helpful for us in order to clarify the doubts in the code review and to ask more questions and going deep in some topics with the candidates. Also to see how they react against positive/negative feedback and the kind of answers or arguments they tried to use to justify the wrong things. That was really productive in my opinion and the part that I enjoyed most in the whole process. Also, the final feedback was another mandatory thing for us so we elaborate a list with the comments although it was a declined candidate, but in order to give him/her the most valuable information possible to know why we didn't choose him/her.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;

&lt;p&gt;Focusing with the code reviews, I elaborated a list with the more common things that we found during that phase and I think it's important to share with you in order to check it if you're interviewer but also if you're gonna be interviewed and you're in the technical challenge part, check these points before you submit it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Poor README&lt;/strong&gt;. This was the biggest issue we've found in all across the candidates. Except a few ones, the majority provided a very short README with no indicatoins in how to run the project, or not detailed enough. Not indicate the dependencies needed (if you need to download or install something in order to run it). No explanation of the commands (if Makefile provided). No explanation regarding what's the project about (specially important with the ones that weren't solving our Tech Challenge). Lack of TODO with the pending features that weren't possible to cover but added there as an invitation to be discussed in the technical revision call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Failing tests&lt;/strong&gt;. Some of the challenges, luckily a few, weren't passing their own tests. Basically that means the candidate didn't execute the tests before submitting the challenge and that's a red flag for that part.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Very few comments across the code&lt;/strong&gt;. I will be honest with you, I don't like comments in the code. For me a code that needs comments, is a code that is complex. So the code should be simple enough that is understandable without comments, otherwise you're over complicating it. Having said that, in Go the documentation is autogenerated for the exported types, functions, methods, etc... from the comments. So these comments are the ones that I accept and I personally think are necessary for understanding the context, but not the comments like "getting user" a line above the "repo.getuser()".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Code commented&lt;/strong&gt;. Some challenges arrived with a lot of commented code. Not the comments I was saying before for document the code. I mean code commented with &lt;code&gt;//&lt;/code&gt;  or entire blocks &lt;code&gt;/**/&lt;/code&gt;. We all know that for Technical challenges specifically, usually the time you have is reduced as you're working in a site and you wanna change, so you apply to different places. Then if you pass the initial phase you're asked to show your code. So you can end up with N tests to deliver for the same week, apart from your daily job and your "real life". But if you quickly check your code you will find it easily if you commented some code just for testing or for an initial approach and then don't need it anymore, and clean it before submitting it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-&lt;/em&gt; &lt;strong&gt;Hardcoded values&lt;/strong&gt;. Related to the previous point there were a lot of challenges with hardcoded values that caused the reviewing team to manipulate the code in order to make it run or make the tests pass. As much as possible try to use environment variables or provide a config file. And if none of that is possible at least add a section in the README with those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Having applied all this and having iterated during these months the numbers I think are pretty good. We have all made a very big effort devoting a lot of time to the selection process either looking for candidates, being on phone calls, reviewing code or giving feedback on candidates. We have managed to grow the team by approximately 12 people in 3 months! In the future I plan to publish a new post on how we have organized the teams and how the integration of all the new teammates who have joined the team has gone.&lt;/p&gt;

&lt;p&gt;Comment your learnings and tips during your Selection processes or interviews here or contact me on my social networks for any comments, questions or suggestions so that we can all learn from each other and improve the selection processes of our sector.&lt;/p&gt;

</description>
      <category>life</category>
      <category>startup</category>
      <category>softwareengineer</category>
    </item>
    <item>
      <title>Making a web component that makes kittens cry, apparently</title>
      <author>SparkedScience</author>
      <pubDate>Tue, 04 May 2021 18:36:46 +0000</pubDate>
      <link>https://dev.to/sparkedscience/making-a-web-component-that-makes-kittens-cry-apparently-fgm</link>
      <guid>https://dev.to/sparkedscience/making-a-web-component-that-makes-kittens-cry-apparently-fgm</guid>
      <description>&lt;p&gt;I like to find shortcuts for programming problems. While working on the ELMS:LN web components project, I noticed they like to copy-paste br tags to show off intersection observers. So, to make life easier, I made a simple b-r tag. It apparently makes kittens cry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intersection-observers"&gt;
  &lt;/a&gt;
  Intersection observers
&lt;/h2&gt;

&lt;p&gt;These are used for conditional rendering. An element on the page using intersection observers will not render until the viewable page is within a certain range of the element. For example, say at the end of a long webpage is a &lt;a href="https://github.com/elmsln/lrnwebcomponents/tree/master/elements/wikipedia-query"&gt;wikipedia element&lt;/a&gt;. The actual rendering of the wikipedia page, and the API calls to get the information, won't occur until the element is visible on the page. This is very helpful for slower or more taxed connections. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#br"&gt;
  &lt;/a&gt;
  b-r
&lt;/h2&gt;

&lt;p&gt;The b-r tag does not use intersection observers, but it was created to show off the usage of it. &lt;a href="https://github.com/elmsln/lrnwebcomponents/tree/master/elements/b-r"&gt;b-r&lt;/a&gt; has two modes; numbered and automatic. The developer can supply an amount of br tags to insert, and the element will create the line breaks. If no input is supplied, the tag will get the height of the viewable window and insert br tags to push the rest of the content off of the screen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-loops"&gt;
  &lt;/a&gt;
  Feedback loops
&lt;/h2&gt;

&lt;p&gt;My first solution was not elegant, but it worked. (Shamefully, my mentality with most first iterations.) I had a simple for loop to add the tags to the page. During my IST 402 class, my professor used my tag to teach on tag properties and a different way to add tags to html code. He also helped us understand how to make a tag stateful. Honestly, the best help this tag needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-kittens"&gt;
  &lt;/a&gt;
  The kittens
&lt;/h2&gt;

&lt;p&gt;b-r is a tag I made in less than a day for a specific use case. I know copy-pasting a br tag is easy, I'm guilty of that. While the first iteration of just user input was not extremely helpful, I believe the second iteration of conditional numbering based on window height can be useful when working across developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-on-web-components"&gt;
  &lt;/a&gt;
  Final thoughts on Web components
&lt;/h2&gt;

&lt;p&gt;This is by far not the last web component I will make or work on; My barcode-reader still has a ways to go. Maybe I'll get the chance to bring that project to THON. Either way, web components are here to stay, and I don't plan on going anywhere. Highly adaptable, very useful, and easily portable.&lt;br&gt;
Except with dev.to. Social media isn't really my thing, but I try to stay updated. So expect monthly(?) updates.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React-Native FileManager with Firebase Storage</title>
      <author>David Gregorian</author>
      <pubDate>Tue, 04 May 2021 18:34:57 +0000</pubDate>
      <link>https://dev.to/gregorian/react-native-filemanager-with-firebase-storage-19gh</link>
      <guid>https://dev.to/gregorian/react-native-filemanager-with-firebase-storage-19gh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTQLrocQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aio981gusrlzz3126z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTQLrocQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aio981gusrlzz3126z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This is a simple example how to implement a file manager with React-Native, Firebase &amp;amp; Typescript for iOS &amp;amp; Android.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-will-cover-in-this-post"&gt;
  &lt;/a&gt;
  What I will cover in this post:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fetch &amp;amp; display files from the firebase storage&lt;/li&gt;
&lt;li&gt;Open a file picker and upload the file to firebase&lt;/li&gt;
&lt;li&gt;View &amp;amp; download the files on iOS &amp;amp; Android&lt;/li&gt;
&lt;li&gt;Delete files from the firebase storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#attention"&gt;
  &lt;/a&gt;
  Attention
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;To keep it simple, I did not add any styles and only used the file names as unique identifiers.&lt;/li&gt;
&lt;li&gt;Please don't do this in a production app. Use GUIDs instead.&lt;/li&gt;
&lt;li&gt;You should split the code into different files. This example has some inline functions, that should be placed somewhere else.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;This component uses the following npm packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-native-firebase&lt;/li&gt;
&lt;li&gt;react-native-document-picker&lt;/li&gt;
&lt;li&gt;react-native-image-picker&lt;/li&gt;
&lt;li&gt;react-native-fs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You need to follow the README setups of these npm packages in advance)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FirebaseStorageTypes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@react-native-firebase/storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AntDesignIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-vector-icons/AntDesign&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ActionSheetIOS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RNFS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FileViewer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-file-viewer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;launchImageLibrary&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-image-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DocumentPicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-document-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DocumentPicker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DocumentPicker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allFiles&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileCopyUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickAttachmenet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cancel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;ActionSheetIOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showActionSheetWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;cancelButtonIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pick a data type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Open Image Picker&lt;/span&gt;
          &lt;span class="nx"&gt;launchImageLibrary&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;photo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;didCancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Open Document Picker&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// exit&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// For Android we can just use the normal DocumentPicker, as it can also access images&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FileManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FirebaseStorageTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Reference&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;listRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listAll&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
              &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;RNFS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentDirectoryPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;RNFS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                  &lt;span class="na"&gt;fromUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDownloadURL&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                  &lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="nx"&gt;FileViewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TouchableOpacity&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AntDesignIcon&lt;/span&gt;
              &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`delete &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                      &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                  &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;]);&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
        &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Upload&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;attachmentInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pickAttachmenet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uploads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Alternatively use custom guids as file names&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fileRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachmentInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;setUploads&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;uploads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Mitigation of SSRF Vulnerabilities</title>
      <author>Anvil Engineering</author>
      <pubDate>Tue, 04 May 2021 18:33:12 +0000</pubDate>
      <link>https://dev.to/useanvil/mitigation-of-ssrf-vulnerabilities-15gb</link>
      <guid>https://dev.to/useanvil/mitigation-of-ssrf-vulnerabilities-15gb</guid>
      <description>&lt;p&gt;Businesses rely on &lt;a href="//www.useanvil.com/developers"&gt;Anvil&lt;/a&gt; for many of their most critical processes. Being in that critical path for business software, reliability and—more importantly—security is something we take very seriously at Anvil. As part of our security practices, we undergo regular auditing, pen-testing and certification to make sure we're as good as we can be on the security front. This dedication to security has allowed us to achieve our &lt;code&gt;SOC 2 Type 2&lt;/code&gt; compliance. Our SOC 2 designation recognizes the effort and policies that we take to actively guard against attacks and vulnerabilities.  In this post, I'm going to dive into one of those vulnerabilities, the Server Side Request Forgery (&lt;a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"&gt;SSRF&lt;/a&gt;) attack, and discuss the steps we have taken to protect ourselves and our customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ssrf"&gt;
  &lt;/a&gt;
  What is SSRF?
&lt;/h2&gt;

&lt;p&gt;Before we dive deeper, let’s briefly review what an SSRF attack is. Here's a good description I found:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Server-side request forgery is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing. In typical SSRF examples, the attacker might cause the server to make a connection back to itself, or to other web-based services within the organization's infrastructure, or to external third-party systems."&lt;/em&gt; &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Why would this be bad? Let’s imagine a website that performs SEO analysis of web pages for its users. This website accepts a URL from Userland. A server visits that URL and then analyzes the results and displays them back to the user. Now, imagine if that URL was something like &lt;code&gt;"http://localhost/insecure-admin-page.php"&lt;/code&gt;, or &lt;code&gt;"file:///etc/passwd"&lt;/code&gt;. You can see how you might quickly become &lt;a href="https://www.urbandictionary.com/define.php?term=pwned"&gt;&lt;code&gt;pwned&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anvils-exposure"&gt;
  &lt;/a&gt;
  Anvil's Exposure
&lt;/h2&gt;

&lt;p&gt;We have several parts of the system where it's necessary for us to ingest URLs from Userland. We couldn't just stop accepting this input, so we had to take some steps to protect ourselves from SSRF.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer: An SSRF vulnerability is potentially quite serious for any application. In order to prevent leaking any useful information about our system in this post, and to prevent readers from thinking about a "copy pasta" from this post as a way to close their SSRF exposure, I will only provide very loose pseudo code examples, and not reference any particular libraries, packages or frameworks. This post is only meant to be an interesting resource, so please do your own homework before implementing any of the things discussed here.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In all of our APIs, we enforce a JSON schema validation of all accepted data. In addition to checking the basic shape and types of data in a given payload, most tools will allow you to perform additional validation on the data. Here's a basic validation schema example to consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A payload validation schema&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;urlFromUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;validUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;validUrl&lt;/code&gt; is a reference to a custom format that we registered with the validator. As you might have guessed, the validator will check that the value provided to &lt;code&gt;urlFromUser&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;, and then pass that value to our &lt;code&gt;validUrl&lt;/code&gt; function, which will return a boolean indicating if the value is acceptable or not. Here's what the &lt;code&gt;validUrl&lt;/code&gt; function might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a nice start, but it's pretty naive. While it makes sure that the URL is in fact an HTTP(S) resource, it doesn't check to see if that resource is &lt;code&gt;"localhost"&lt;/code&gt;, &lt;code&gt;"127.0.0.1"&lt;/code&gt;, or any other IPs that are considered "private". We can do better.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mitigation"&gt;
  &lt;/a&gt;
  Mitigation
&lt;/h1&gt;

&lt;p&gt;So that we didn't have to become experts in private IPs, we enlisted the help of a library that handles all of that for us. &lt;/p&gt;

&lt;p&gt;Our validation function might now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice. Now a hacker can't provide us with something like &lt;code&gt;"http://127.0.0.1/admin.php"&lt;/code&gt; or we will reject the input.&lt;/p&gt;

&lt;p&gt;But wait a minute. What if the hacker owns the domain &lt;code&gt;not-evil-i-swear.com&lt;/code&gt;, and has their DNS record set to resolve to &lt;code&gt;"127.0.0.1"&lt;/code&gt;? With the above validation, you would be &lt;code&gt;pwned&lt;/code&gt;. This means that in order to truly know if a URL is trying to access a private IP, you have to check with DNS first to see what it resolves to.&lt;/p&gt;

&lt;p&gt;The validation might then look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;http|https&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;someIpChecker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dnsLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice, nice. This feels pretty solid and smart.&lt;/p&gt;

&lt;p&gt;But wait another minute. What if the provided URL is validated on its way &lt;strong&gt;&lt;em&gt;into&lt;/em&gt;&lt;/strong&gt; the system, but we don't use it right away - or we will be using it repeatedly in the &lt;strong&gt;&lt;em&gt;future&lt;/em&gt;&lt;/strong&gt;? What's to stop a hacker from changing the DNS entry from something innocuous to &lt;code&gt;"127.0.0.1"&lt;/code&gt; after we've run our checks and have decided to let it into the system? Answer: &lt;code&gt;pwned&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To prevent this scenario, we had to dig into the library we use to perform our web requests with these URLs. Fortunately, this library has a hook where we can intercept the moment &lt;em&gt;after&lt;/em&gt; it's resolved the DNS entry for a URL, but &lt;em&gt;before&lt;/em&gt; it's actually gone out and begun connecting to it. In this hook, we check the resolved host to see if it's private, and if so, we will block the request.&lt;/p&gt;

&lt;p&gt;Nice, nice, nice.&lt;/p&gt;

&lt;p&gt;But wait yet another minute. What if that URL resolves to a non-private IP, so we make the initial request, but then that request results in a redirect to another IP (or &lt;code&gt;host&lt;/code&gt; that resolves to an IP) that is private? If your web request library doesn't trigger your protection code in that case, too: you are &lt;code&gt;pwned&lt;/code&gt;. Better make sure your web request library handles this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Any time a system accepts input from Userland it is putting itself at risk from potential bad actors. There are myriad examples of this: &lt;a href="https://owasp.org/www-community/attacks/SQL_Injection"&gt;SQL Injection&lt;/a&gt;, &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;XXS Injection&lt;/a&gt;, and &lt;a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"&gt;SSRF&lt;/a&gt; to name just a few. The tough part is that in order for your website or application to do anything interesting, oftentimes you need to accept such input. It's a calculated risk that can be mitigated to the point of acceptability by using safeguards and steps along the way. Hopefully this post provides some useful information for preventing your systems from SSRF vunerabilities!&lt;/p&gt;

&lt;p&gt;If you have questions, please do not hesitate to contact us at:&lt;br&gt;
&lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://portswigger.net/web-security/ssrf"&gt;https://portswigger.net/web-security/ssrf&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>7 Approaches I Took While Learning Web Dev From Scratch</title>
      <author>mmiask</author>
      <pubDate>Tue, 04 May 2021 18:24:20 +0000</pubDate>
      <link>https://dev.to/mmiask/7-approaches-i-took-while-learning-web-dev-from-scratch-3imo</link>
      <guid>https://dev.to/mmiask/7-approaches-i-took-while-learning-web-dev-from-scratch-3imo</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://11sigma.com/blog/2020/11/30/7-approaches-i-took-while-learning-web-dev-from-scratch/"&gt;11sigma.com/blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What this article is&lt;/strong&gt;: a starting point for people that seek knowledge in a digestible fashion + my personal summary of the best ways to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What this article is not&lt;/strong&gt;: a guide on how to plan your self-development path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code!
&lt;/h2&gt;

&lt;p&gt;Do you want to start programming but are not sure how to do it? Or maybe you already know some things but feel stuck?&lt;/p&gt;

&lt;p&gt;A little over a year ago, I switched my career path from biotechnology and became a manual QA. It was a huge unknown for me at that time - a year passed, though, and I'm now programming alongside super-talented engineers as a full-fledged member of a Team Undefined (awesome name, I know) in &lt;a href="//stoplight.io"&gt;Stoplight's&lt;/a&gt; &lt;a href="//11sigma.com"&gt;11Sigma&lt;/a&gt; crew.&lt;/p&gt;

&lt;p&gt;During that time, I was (and still am) simultaneously working and learning. It was never easy, I had my ups and downs, but now I can confidently say I improved a lot. If only I knew at the beginning what I know now, it would save me a lot of time and stress.&lt;/p&gt;

&lt;p&gt;Along the way, I used various learning materials of different kinds. Not all of them might fit you, but it's good to know about their pros and cons - which is why I prepared this summary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theory"&gt;
  &lt;/a&gt;
  Theory
&lt;/h3&gt;

&lt;p&gt;This part of learning resources is pretty straightforward - it makes you sit and do a lot of reading. No shortcuts, just learning everything by yourself. It can give you a lot of satisfaction, but sometimes an equal amount of frustration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation &amp;amp; handbooks - per task, when you need to understand complex stuff quickly: &lt;a href="https://www.typescriptlang.org/docs"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://visjs.github.io/vis-network/docs/network/"&gt;vis.js - network&lt;/a&gt; + its &lt;a href="https://visjs.github.io/vis-network/examples/"&gt;examples&lt;/a&gt;, &lt;a href="https://docs.cypress.io/api/api/table-of-contents.html"&gt;Cypress&lt;/a&gt;, &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt;, &lt;a href="https://blueprintjs.com/docs/"&gt;Blueprint&lt;/a&gt;, &lt;a href="https://tailwindcss.com/docs"&gt;Tailwind CSS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt; for the win - a ton of useful information on multiple topics for both beginners and advanced.&lt;/li&gt;
&lt;li&gt;Online courses w/o progress verification (&lt;a href="https://www.internetingishard.com/"&gt;Interneting is Hard&lt;/a&gt;) - they can give a sense of direction and structured material.&lt;/li&gt;
&lt;li&gt;Books: &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;, &lt;em&gt;"Clean Code: A Handbook of Agile Software Craftsmanship"&lt;/em&gt; by Robert C. Martin.&lt;/li&gt;
&lt;li&gt;Websites / guides - like &lt;a href="https://www.atlassian.com/git"&gt;Getting Git Right&lt;/a&gt; by Atlassian or &lt;a href="https://css-tricks.com/"&gt;CSS-tricks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliable sources of knowledge.&lt;/li&gt;
&lt;li&gt;Allows us to understand both core concepts and dig deeper into specific details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can get bored very easily if you don't use the gained knowledge parallel to reading.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reallife-problems"&gt;
  &lt;/a&gt;
  Real-life problems
&lt;/h3&gt;

&lt;p&gt;Let's say you understand the basics of the topic you have chosen. You are either working in a real team or doing some coding on your own. In both scenarios, at some point, you will face a blocker. That's when you should reach for these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev.to, Medium, StackOverflow - tips &amp;amp; tricks for specific cases.&lt;/li&gt;
&lt;li&gt;Read somebody else's code / understand the product you are working on - because it's not necessary to reinvent the wheel, but good to understand how it works.&lt;/li&gt;
&lt;li&gt;Write something simple and let people judge it - good criticism is one of the best teachers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick progress.&lt;/li&gt;
&lt;li&gt;Working with code that is used somewhere will give you a real-life experience.&lt;/li&gt;
&lt;li&gt;Access to great ideas and solutions that you could potentially spend hours on when doing them by yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires a basic understanding of the topic.&lt;/li&gt;
&lt;li&gt;Easy to forget what you've learned if you only copy-paste.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#practice-makes-perfect"&gt;
  &lt;/a&gt;
  Practice makes perfect
&lt;/h3&gt;

&lt;p&gt;You don't like spending hours reading books or documentation? Then learn by doing!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interactive tutorials - &lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt; by &lt;a href="https://codepip.com/"&gt;Codepip&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Courses that involve practical tasks (&lt;a href="https://www.codecademy.com"&gt;Codecademy&lt;/a&gt;) - you can use your knowledge/skills in real-life problems. Also &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; and &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Review code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficulty level increases with each lesson (suitable for complete beginners).&lt;/li&gt;
&lt;li&gt;It's easier to remember new concepts when you use them.&lt;/li&gt;
&lt;li&gt;Good courses provide you with quizzes and pet projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to find any cons, actually.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#verify-progress"&gt;
  &lt;/a&gt;
  Verify progress
&lt;/h3&gt;

&lt;p&gt;Because it's good to know how far you have come.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Online tests verifying your skills and knowledge.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.fullstack.cafe/"&gt;Answer interview questions&lt;/a&gt; for the desired role (online tests).&lt;/li&gt;
&lt;li&gt;Work journal - recap on what you've learned so far. I strongly recommend starting one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can evaluate your progress.&lt;/li&gt;
&lt;li&gt;Knowledge and skills that are used repeatedly stick better.&lt;/li&gt;
&lt;li&gt;If you don't feel like you make good progress, it's a perfect way to check if that's true. A lot of times, it turns out that you've learned more than you thought you did.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focusing too much on quiz points and external expectations can decrease your internal motivation and remove the fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaborate-teach"&gt;
  &lt;/a&gt;
  Collaborate / teach
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pair programming / mentoring - for when you get stuck or are very unfamiliar with a topic. A good mentor will point you in the right direction, not only in a matter of specific task but also unblock you if you feel unproductive or that your progress is too slow.&lt;/li&gt;
&lt;li&gt;Asking coworkers or friends that are programming/programming communities for solutions (async a lot of times).&lt;/li&gt;
&lt;li&gt;Do a webinar, teach somebody else - that will force you to learn as well. You will also understand the topic better and more in-depth (Lunch &amp;amp; learn style). I did one on best practices for e2e in Cypress.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working with more experienced people will allow you to avoid common mistakes.&lt;/li&gt;
&lt;li&gt;A ton of great ideas emerge during discussions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires a big-time commitment.&lt;/li&gt;
&lt;li&gt;Huge impostor syndrome might happen at the beginning when you expose your ideas to other people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Challenges/problems to solve - &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;, &lt;a href="https://codepen.io"&gt;Codepen&lt;/a&gt;, variety of coding games.&lt;/li&gt;
&lt;li&gt;YT videos - for motivation, fun &amp;amp; interesting stuff that stimulate your curiosity (Coding Train).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It keeps learning fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting distracted from the actual learning ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Choose the learning method that feels best at the moment. You may have some underlying preferences that are based on your character, but changing context will also add freshness to the entire learning process.&lt;/li&gt;
&lt;li&gt;Consolidate your knowledge.&lt;/li&gt;
&lt;li&gt;Keep learning. If you don't grow as a programmer, you risk using the same solutions all the time (which will probably work but may not be the best possible).&lt;/li&gt;
&lt;li&gt;Don't try to be perfect, nobody is.&lt;/li&gt;
&lt;li&gt;Don't over-engineer stuff, do the best you can at the moment.&lt;/li&gt;
&lt;li&gt;Don't approach learning as another chore, do what is fun.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;If you liked the article, consider following me on &lt;a href="https://twitter.com/m_miaskowski"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@seefromthesky?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ishan @seefromthesky&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/Jt9syHEhrPE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Razões para se tornar um Alquimista I</title>
      <author>Vinicius Aguiar</author>
      <pubDate>Tue, 04 May 2021 18:19:08 +0000</pubDate>
      <link>https://dev.to/computandoarte/razoes-para-se-tornar-um-alquimista-i-33gh</link>
      <guid>https://dev.to/computandoarte/razoes-para-se-tornar-um-alquimista-i-33gh</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o-a-po%C3%A7%C3%B5es-e-receitas-em-elixir"&gt;
  &lt;/a&gt;
  Introdução a poções e receitas em Elixir
&lt;/h3&gt;

&lt;p&gt;Desenvolver em Elixir tem se mostrado uma experiência agradável e gostaria de compartilhar um pouco do meu aprendizado. Nesta série de posts vou apresentar as razões que me motivaram a continuar estudando esta linguagem e seu ecossistema. E neste post em específico vou apresentar o operador Pipe e Pattern Matching.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#digress%C3%B5es"&gt;
  &lt;/a&gt;
  Digressões
&lt;/h3&gt;

&lt;p&gt;No final da minha última entrevista de emprego (em que não obtive sucesso) o gestor perguntou como eu enxergava meu futuro no cargo e o que gostaria de aprender. Para surpresa de ninguém respondi que gostaria de não estar trabalhando na área e sim estudando algo mais interessante (quem iria imaginar que eu não iria passar no processo seletivo hein), como processing ou programação funcional. Sem entrar no mérito da área ser interessante ou não, afinal é uma questão de preferência, foi uma péssima resposta que me fez refletir melhor se gostaria de trabalhar na área.&lt;/p&gt;

&lt;p&gt;Para entender melhor quais seriam meus próximos passos resolvi estudar uma linguagem funcional, e Elixir foi a escolhida. Esses são meus primeiros passos neste paradigma, e não é uma assunto simples. Citando &lt;strong&gt;Joe Armstrong&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"When you start working with a new programming language, on the&lt;br&gt;
surface it seems that all you are doing is learning a new anguage. But at a deeper level, you are doing something much more profound - you are learning a new way of thinking."&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#pipe"&gt;
  &lt;/a&gt;
  Pipe
&lt;/h3&gt;

&lt;p&gt;O pipe é um operador que passa o resultado de uma expressão como primeiro parâmetro da próxima expressão, de acordo com a &lt;a href="https://elixirschool.com/en/lessons/basics/pipe-operator/"&gt;Elixir School&lt;/a&gt;. É bem conveniente quando precisamos passar um valor por uma série operações em cadeia, provendo uma forma de expressarmos melhor o processo. Através do pipe podemos evitar códigos escritos desta forma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tSakhzvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmiq9b2c7aif05k5oedg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tSakhzvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmiq9b2c7aif05k5oedg.PNG" alt="Série de operações em Elixir sem pipe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E abrir espaço para forma mais elegante:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wREUeqYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq4kmeq2s2i8htnzmjj1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wREUeqYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq4kmeq2s2i8htnzmjj1.PNG" alt="Série de operações em Elixir com pipe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que o pipe é um operador bastante conhecido na comunidade de programação, já foi previamente adotado por F#, Ocaml e Julia. E há pouco tempo atrás o operador foi adotado como síntaxe nativa na linguagem R, apesar de ser utilizado anteriormente. Como programador usual de Python, eu sinto que gostaria de uma feature semelhante.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pattern-matching"&gt;
  &lt;/a&gt;
  Pattern Matching
&lt;/h3&gt;

&lt;p&gt;Segundo a &lt;a href="https://elixirschool.com/pt/lessons/basics/pattern-matching/"&gt;Elixir School&lt;/a&gt;, em Elixir o operador de igualdade ou atribuição (=) é na verdade o operador de match. Ele compara os lados esquerdo e direito da expressão, tentando igualar os mesmos, e caso consiga retorna o valor da expressão. Desta forma ao compararmos uma variável não declarada previamente a um valor, atribuímos o valor a variável.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqCiJytB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce9jbl4lh0f7jpf8qu0u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqCiJytB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce9jbl4lh0f7jpf8qu0u.PNG" alt="Pattern Matching com um tipo básico"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apesar de parecer exatamente igual ao operador de atribuição clássico neste exemplo, pattern matching permite uma gama de operações interessantes. Por exemplo, é possível extrair valores de bearer tokens com:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InIOmOLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob4rk36ryfdguhwby5vy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InIOmOLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ob4rk36ryfdguhwby5vy.PNG" alt="Pattern Matching de um bearer token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E aplicar pattern matching no nome de funções:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDCa3STr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/103q4uxldtgjg1r2bkpd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDCa3STr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/103q4uxldtgjg1r2bkpd.PNG" alt="Pattern Matching na assinatura de uma função"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No primeiro exemplo a expressão à esquerda realiza o pattern matching com a entrada da forma ["Bearer password"]. Desta forma extraio o token e em seguida retorno uma tupla com uma flag de sucesso e o token. Já o segundo exemplo mostra uma forma de declarar a mesma função com entradas distintas. Desta forma evitamos a necessidade de criar funções com assinaturas distintas ou utilizar estruturas de controle dentro das funções.&lt;/p&gt;

&lt;p&gt;A capacidade de pattern matching se extende muito além dos exemplos apresentados, e em particular acho muito prático para extrair campos específicos de structs. Para conhecer melhor suas capacidades eu indico o próprio &lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html"&gt;Getting Started da Elixir&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#b%C3%B4nus-o-tema-dr%C3%A1cula-para-elixir-do%C2%A0vscode"&gt;
  &lt;/a&gt;
  Bônus: O tema drácula para Elixir do VSCode
&lt;/h3&gt;

&lt;p&gt;Uma sólida escolha para visualizar o código de noite. Esse tema é uma extensão do VSCode que permite uma boa visualização do código, em particular gosto do highlight amarelo dos módulos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjaTDAjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/963vng1fcsqhdu3jqy8t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjaTDAjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/963vng1fcsqhdu3jqy8t.PNG" alt="Exemplo do Dracula theme for Elixir"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#e-por-onde-estou-aprendendo"&gt;
  &lt;/a&gt;
  E por onde estou aprendendo?
&lt;/h3&gt;

&lt;p&gt;Comecei a jornada pelo livro Learn Functional Programming with Elixir de &lt;a href="https://github.com/ulissesalmeida"&gt;Ulisses Almeida&lt;/a&gt;, e daí segui pra implementação de programas simples com suporte do &lt;a href="https://elixir-lang.org/getting-started/introduction.html"&gt;Getting Started&lt;/a&gt;. Agora estou lendo Programming Phoenix 1.4 de Chris McCord, Bruce Tate e &lt;a href="https://github.com/josevalim"&gt;José Valim&lt;/a&gt; (O criador da linguagem é BR).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#e-quem-pode-ajudar"&gt;
  &lt;/a&gt;
  E quem pode ajudar?
&lt;/h3&gt;

&lt;p&gt;A comunidade é bem ativa e prestativa, apesar das perguntas meio bobas que me vem em mente. (Não se engane, existem perguntas ruins, mas nunca deixe de perguntar). Recomendo conversar em &lt;a href="https://t.me/elug_ce"&gt;Elug CE&lt;/a&gt;, &lt;a href="https://telegram.me/elixirbr"&gt;Elixir BR&lt;/a&gt; e &lt;a href="https://twitter.com/elixir_utfpr"&gt;Elixir UTFPR&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agradecimentos"&gt;
  &lt;/a&gt;
  Agradecimentos
&lt;/h3&gt;

&lt;p&gt;Obrigado.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
    </item>
    <item>
      <title>How to launched a startup while studying.</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Tue, 04 May 2021 18:11:10 +0000</pubDate>
      <link>https://dev.to/rishabh062/how-to-launched-a-startup-while-studying-5e5f</link>
      <guid>https://dev.to/rishabh062/how-to-launched-a-startup-while-studying-5e5f</guid>
      <description>&lt;p&gt;Do you also want to start a startup while studying in collage.Here is my way how I have done that.&lt;br&gt;
&lt;em&gt;Let's Start&lt;/em&gt;&lt;br&gt;
1) &lt;strong&gt;Start with why?&lt;/strong&gt;&lt;br&gt;
Your first question must be why you want to start a startup. Your goal must be clear on that. &lt;em&gt;I just want to do something different from others and I really like making projects.&lt;/em&gt;&lt;br&gt;
2) &lt;strong&gt;Find what are you good at.&lt;/strong&gt;&lt;br&gt;
Everyone is good at their favourite domains,so think of a startup in which you are good at. For example-&amp;gt; may be in &lt;strong&gt;data science, web development&lt;/strong&gt; etc&lt;br&gt;
&lt;em&gt;In my case I am good at web development ,machine learning and management&lt;/em&gt; so I found a startup on this domain.&lt;br&gt;
3) &lt;strong&gt;Find a technology which you need to integrate.&lt;/strong&gt;&lt;br&gt;
After getting idea you need to look up for better and clear &lt;em&gt;technology&lt;/em&gt;.Explore the &lt;em&gt;technology&lt;/em&gt; which will give edge to your startup. &lt;em&gt;In my case I just need to show it to the world, so i created a web page for doing the same and integrated it with different technology.&lt;/em&gt;&lt;br&gt;
4)&lt;strong&gt;Managing and sustaining it with studies.&lt;/strong&gt;&lt;br&gt;
Getting a &lt;strong&gt;Client&lt;/strong&gt; in any startup is the real hard work which you need to do it with precision. You need to analyse your whole time and look up the better time which you can give.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About my startup.&lt;/strong&gt;&lt;br&gt;
Recently I have launched Projectron a major and minor project making site for students on different domains.&lt;br&gt;
&lt;em&gt;I have a experience of making 20+ projects on different domains, so I was thinking why dont't I help other students to achieve their goal.&lt;/em&gt; And here comes the idea for my startup and successfully launched it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am happy to share that we are getting good response.&lt;/strong&gt;&lt;br&gt;
You can visit at projectron--&amp;gt; &lt;a href="http://projectron.tech/"&gt;http://projectron.tech/&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you find this post useful.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Thank you&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rishabh Dwivedi&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>programming</category>
      <category>business</category>
      <category>entrepreneur</category>
    </item>
  </channel>
</rss>
