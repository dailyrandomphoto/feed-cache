<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dann.js - Making a Neural Network solve XOR problems!</title>
      <author>LeviAckerman3855</author>
      <pubDate>Fri, 13 Aug 2021 06:36:31 +0000</pubDate>
      <link>https://dev.to/leviackerman3855/dann-js-making-a-neural-network-solve-xor-problems-2b56</link>
      <guid>https://dev.to/leviackerman3855/dann-js-making-a-neural-network-solve-xor-problems-2b56</guid>
      <description>&lt;p&gt;As you must have read from the previous tutorial, Dann.js is a NPM module for Node.js which allows you to build a neural network easily. You can read the previous tutorial &lt;a href="https://dev.to/leviackerman3855/dann-js-create-neural-networks-as-easy-as-pie-11k"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a new neural network which will solve XOR problems.&lt;/p&gt;

&lt;p&gt;XOR is a logical operation that is true if and only if its arguments differ (one is true, the other is false).&lt;/p&gt;

&lt;p&gt;So basically, it is a OR gate with a condition that it will be true only when the second bit is inverse of the first.  You can read more about XOR &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A XOR has a this truth table (A table which summarizes which condition produces which output):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1st Bit         2nd Bit         Output
0               0               0
0               1               1
1               0               0
1               1               0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-you-will-need"&gt;
  &lt;/a&gt;
  What you will need
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;A computer with more than 2GB of ram and a good CPU&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h4&gt;

&lt;p&gt;Install Dann.js into your environment if you haven't already by doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;dannjs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have learnt in the previous tutorial, we start using Dann.js in our JavaScript program by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dannjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dann&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For training the network to do XOR operations, we import the &lt;code&gt;xor&lt;/code&gt; dataset from Dann.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets initialize the network by typing &lt;code&gt;Dann&lt;/code&gt; with the arguments &lt;code&gt;2,1&lt;/code&gt;. Why are we using 2 input neurons and 1 output neuron? Because a XOR operation requires 2 input bits and outputs a single bit. So we are assigning only the amount of needed bits, which is &lt;code&gt;(2,1)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xorDann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-calculations"&gt;
  &lt;/a&gt;
  Setting up the calculations
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-the-hidden-layers"&gt;
  &lt;/a&gt;
  Setting up the hidden layers
&lt;/h4&gt;

&lt;p&gt;As you must have read in the previous tutorial, a hidden layer is essentially a neuron layer that can perform calculations. The name 'hidden' comes from the way that you don't have to see the values of every neuron, in contrast to the input/output layers. You can learn more about hidden layers &amp;amp; the basics surrounding it &lt;a href="https://deepai.org/machine-learning-glossary-and-terms/hidden-layer-machine-learning"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we are setting up a hidden layer using the &lt;code&gt;.addHiddenLayer&lt;/code&gt; method, which takes a argument of &lt;code&gt;number of neurons assigned to the layer&lt;/code&gt;, and we are taking the neuron count to be &lt;code&gt;12&lt;/code&gt;. You can change the number way as you want, but I have found this to be the most stable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to set up the hidden layers, we do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeWeights&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#testing-the-network"&gt;
  &lt;/a&gt;
  Testing the network
&lt;/h5&gt;

&lt;p&gt;Testing is essential in anything, isn't it? Here we will test our network to see the stats of it, and detect any errors.&lt;/p&gt;

&lt;p&gt;Since we have not trained it, we will simply being logging the details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, it outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dann NeuralNetwork:
  Layers:
    Input Layer:   2
    hidden Layer: 12  (sigmoid)
    output Layer: 1  (sigmoid)
  Other Values:
    Learning rate: 0.001
    Loss Function: mse
    Current Epoch: 0
    Latest Loss: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it outputs the same thing, go on. &lt;br&gt;
Comment out the line by prepending &lt;code&gt;//&lt;/code&gt; in front of it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#training-the-network"&gt;
  &lt;/a&gt;
  Training the network
&lt;/h3&gt;

&lt;p&gt;Our network doesn't know anything at all. Throw it a value and it will give a random bit.&lt;br&gt;
But how do we train it?&lt;br&gt;
We don't have a dataset!&lt;/p&gt;

&lt;p&gt;You remember the &lt;code&gt;Dannjs.xor&lt;/code&gt; we imported? it is a XOR dataset which has the training values to train the network about XOR.&lt;/p&gt;

&lt;p&gt;So we should set a &lt;code&gt;for&lt;/code&gt; loop to train, i.e, &lt;code&gt;backPropagate&lt;/code&gt; the data to the network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backpropagate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the network now, feeding it 0,0 should output 0, should not it?&lt;br&gt;
Lets feed it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feedForward&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],{&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us run the network and see what happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dann NeuralNetwork:
  Layers:
    Input Layer:   2
    hidden Layer: 12  (sigmoid)
    output Layer: 1  (sigmoid)
  Other Values:
    Learning rate: 0.001
    Loss Function: mse
    Current Epoch: 0
    Latest Loss: 0
Prediction:
[0.416897070979890]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output can be different on yours. You will say, 0.4 is not even close to 0! Yes. You are right. We have trained this network only one time, and like a newborn child it will make mistakes. But why not train it, say &lt;code&gt;100000&lt;/code&gt; times??&lt;br&gt;
Lets train it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backpropagate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run the network:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feedForward&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],{&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in my case, the new output is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dann NeuralNetwork:
  Layers:
    Input Layer:   2
    hidden Layer: 12  (sigmoid)
    output Layer: 1  (sigmoid)
  Other Values:
    Learning rate: 0.001
    Loss Function: mse
    Current Epoch: 0
    Latest Loss: 0
Prediction:
[0.0224234234324]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running it about 10 times, the output became:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dann NeuralNetwork:
  Layers:
    Input Layer:   2
    hidden Layer: 12  (sigmoid)
    output Layer: 1  (sigmoid)
  Other Values:
    Learning rate: 0.001
    Loss Function: mse
    Current Epoch: 0
    Latest Loss: 0
Prediction:
[0.0044234234324]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty close, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finishing-up"&gt;
  &lt;/a&gt;
  Finishing up
&lt;/h3&gt;

&lt;p&gt;You can experiment with your own gate, and for your reference the XOR class is actually:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can modify this gate and make your own gate!&lt;/p&gt;

&lt;p&gt;The whole code used in this tutorial is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dannjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dann&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dannjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//datasource you can change it&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xorDann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeWeights&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backpropagate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="c1"&gt;// running it&lt;/span&gt;

&lt;span class="nx"&gt;xorDann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feedForward&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],{&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can experiment with different values and see what you get!&lt;/p&gt;

</description>
      <category>dannjs</category>
      <category>neuralnetworks</category>
      <category>javascript</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Implementing Domain Driven Design: Part II</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 13 Aug 2021 06:12:36 +0000</pubDate>
      <link>https://dev.to/salah856/implementing-domain-driven-design-part-ii-2i36</link>
      <guid>https://dev.to/salah856/implementing-domain-driven-design-part-ii-2i36</guid>
      <description>&lt;h1&gt;
  &lt;a href="#implementation-the-building-blocks"&gt;
  &lt;/a&gt;
  Implementation: The Building Blocks
&lt;/h1&gt;

&lt;p&gt;This is the essential part of this series. We will introduce and explain some explicit rules with examples. You can follow these rules and apply in your solution while implementing the Domain Driven Design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-example-domain"&gt;
  &lt;/a&gt;
  The Example Domain
&lt;/h2&gt;

&lt;p&gt;The examples will use some concepts those are used by GitHub, like Issue, Repository, Label and User, you are already familiar with. &lt;/p&gt;

&lt;p&gt;The ﬁgure below shows some of the aggregates, aggregate roots, entities, value object and the relations between them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFy2r4IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w428ydlg2ipd36bklrvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFy2r4IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w428ydlg2ipd36bklrvs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Issue Aggregate consists of an Issue Aggregate Root that contains Comment and IssueLabel collections. &lt;/p&gt;

&lt;p&gt;Other aggregates are shown as simple since we will focus on the Issue Aggregate:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mYoSm2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg1y6vvozq597h5iiprq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mYoSm2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg1y6vvozq597h5iiprq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aggregates"&gt;
  &lt;/a&gt;
  Aggregates
&lt;/h3&gt;

&lt;p&gt;As said before, an Aggregate is a cluster of objects (entities and value objects) bound together by an Aggregate Root object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggregate-aggregate-root-principles"&gt;
  &lt;/a&gt;
  Aggregate / Aggregate Root Principles
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#business-rules"&gt;
  &lt;/a&gt;
  Business Rules
&lt;/h3&gt;

&lt;p&gt;Entities are responsible to implement the business rules related to the properties of their own. The Aggregate Root Entities are also responsible for their sub-collection entities.&lt;/p&gt;

&lt;p&gt;An aggregate should maintain its self integrity and validity by implementing domain rules and constraints. &lt;/p&gt;

&lt;p&gt;That means, unlike the DTOs, Entities have methods to implement some business logic. Actually, we should try to implement business rules in the entities wherever possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-unit"&gt;
  &lt;/a&gt;
  Single Unit
&lt;/h3&gt;

&lt;p&gt;An aggregate is retrieved and saved as a single unit, with all the sub-collections and properties. For example, if you want to add a Comment to an Issue, you need to. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get the Issue from database with including all the sub-collections (Comments and IssueLabels).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use methods on the Issue class to add a new comment, like Issue.AddComment(...). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the Issue (with all sub-collections) to the database as a single database operation (update).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That may seem strange to the developers used to work with EF Core &amp;amp; Relational Databases before. &lt;/p&gt;

&lt;p&gt;Getting the Issue with all details seems unnecessary and inefﬁcient. Why don't we just execute an SQL Insert command to database without querying any data?&lt;/p&gt;

&lt;p&gt;The answer is that we should implement the business rules&lt;br&gt;
and preserve the data consistency and integrity in the code. &lt;/p&gt;

&lt;p&gt;If we have a business rule like "Users can not comment on the&lt;br&gt;
locked issues", how can we check the Issue's lock state without retrieving it from the database? &lt;/p&gt;

&lt;p&gt;So, we can execute the business rules only if the related objects available in  the application code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Example: Add a comment to an issue &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTNji5Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyh56u1vxoopfkjt1wkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTNji5Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyh56u1vxoopfkjt1wkf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_issueRepository.GetAsync method retrieves the Issue with all&lt;br&gt;
details (sub-collections) as a single unit by default. &lt;/p&gt;

&lt;p&gt;While this works out of the box for MongoDB, you need to conﬁgure your aggregate details for the EF Core. But, once you conﬁgure, repositories automatically handle it. &lt;/p&gt;

&lt;p&gt;_issueRepository.GetAsync method gets an optional parameter, includeDetails, that you can pass false to disable this behavior when you need it.&lt;/p&gt;

&lt;p&gt;Issue.AddComment gets a userId and comment text, implements the necessary business rules and adds the comment to the Comments collection of the Issue.&lt;/p&gt;

&lt;p&gt;Finally, we use _issueRepository.UpdateAsync to save changes&lt;br&gt;
to the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transaction-boundary"&gt;
  &lt;/a&gt;
  Transaction Boundary
&lt;/h3&gt;

&lt;p&gt;An aggregate is generally considered as a transaction boundary. &lt;/p&gt;

&lt;p&gt;If a use case works with a single aggregate, reads and saves it as a single unit, all the changes made to the aggregate objects are saved together as an atomic operation and you don't need to an explicit database transaction.&lt;/p&gt;

&lt;p&gt;However, in real life, you may need to change more than one&lt;br&gt;
aggregate instances in a single use case and you need to use&lt;br&gt;
database transactions to ensure atomic update and data&lt;br&gt;
consistency. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serializability"&gt;
  &lt;/a&gt;
  Serializability
&lt;/h3&gt;

&lt;p&gt;An aggregate (with the root entity and sub-collections) should be serializable and transferrable on the wire as a single unit. &lt;/p&gt;

&lt;p&gt;For example, MongoDB serializes the aggregate to JSON document while saving to the database and deserializes from JSON while reading from the database.&lt;/p&gt;

&lt;p&gt;The following rules will already bring the serializability.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#aggregate-aggregate-root-rules-amp-best-practices"&gt;
  &lt;/a&gt;
  Aggregate / Aggregate Root Rules &amp;amp; Best Practices
&lt;/h5&gt;

&lt;p&gt;The following rules ensures implementing the principles&lt;br&gt;
introduced above.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Reference Other Aggregates Only by ID &lt;/b&gt; &lt;/p&gt;

&lt;p&gt;The ﬁrst rule says an Aggregate should reference to other aggregates only by their Id. That means you can not add navigation properties to other aggregates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This rule makes it possible to implement the serializability principle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also prevents different aggregates manipulate each other and leaking business logic of an aggregate to one another.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You see two aggregate roots, GitRepository and Issue in the example below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgTRldrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okinpcduw1ltlnaywk1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgTRldrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okinpcduw1ltlnaywk1i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitRepository should not have a collection of the Issues since they are different aggregates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue should not have a navigation property for the related GitRepository since it is a different aggregate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issue can have RepositoryId (as a Guid).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, when you have an Issue and need to have GitRepository&lt;br&gt;
related to this issue, you need to explicitly query it from&lt;br&gt;
database by the RepositoryId. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Keep Aggregates Small &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;One good practice is to keep an aggregate simple and small.&lt;/p&gt;

&lt;p&gt;This is because an aggregate will be loaded and saved as a&lt;br&gt;
single unit and reading/writing a big object has performance&lt;br&gt;
problems. See the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pllsSrqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1l60b5m84oem17x45so.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pllsSrqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1l60b5m84oem17x45so.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Role aggregate has a collection of UserRole value objects to track the users assigned for this role. &lt;/p&gt;

&lt;p&gt;Notice that UserRole is not another aggregate and it is not a problem for the rule Reference Other Aggregates Only By Id.&lt;/p&gt;

&lt;p&gt;However, it is a problem in practical. A role may be assigned to thousands (even millions) of users in a real life scenario and it is a signiﬁcant performance problem to load thousands of items whenever you query a Role from database (remember: Aggregates are loaded by their sub-collections as a single unit).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primary-keys-on-the-aggregate-roots-entities"&gt;
  &lt;/a&gt;
  Primary Keys on the Aggregate Roots / Entities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An aggregate root typically has a single Id property for its identiﬁer (Primark Key: PK). We prefer Guid as the PK of an aggregate root entity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An entity (that's not the aggregate root) in an aggregate can use a composite primary key.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1k3lvS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6yp0os83yjol3se5vhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1k3lvS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6yp0os83yjol3se5vhv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Organization has a Guid identiﬁer (Id).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OrganizationUser is a sub-collection of an Organization and has a composite primary key consists of the OrganizationId and UserId.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#constructors-of-the-aggregate-roots-entities"&gt;
  &lt;/a&gt;
  Constructors of the Aggregate Roots / Entities
&lt;/h3&gt;

&lt;p&gt;The constructor is located where the lifecycle of an entity begins. There are a some responsibilities of a well designed constructor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gets the required entity properties as parameters to create a valid entity. Should force to pass only for the required parameters and may get non-required properties as optional parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checks validity of the parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initializes sub-collections.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hi5H-Uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekseyow1j77b1y46jpbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hi5H-Uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekseyow1j77b1y46jpbo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Issue class properly forces to create a valid entity by getting minimum required properties in its constructor as parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The constructor validates the inputs (Check.NotNullOrWhiteSpace(...) throws ArgumentException if the given value is empty).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It initializes the sub-collections, so you don't get a null reference exception when you try to use the Labels collection after creating the Issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The constructor also takes the id and passes to the base&lt;br&gt;
class. We don't generate Guids inside the constructor to be able to delegate this responsibility to another service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Private empty constructor is necessary for ORMs. We&lt;br&gt;
made it private to prevent accidently using it in our own&lt;br&gt;
code. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#entity-property-accessors-amp-methods"&gt;
  &lt;/a&gt;
  Entity Property Accessors &amp;amp; Methods
&lt;/h3&gt;

&lt;p&gt;The example above may seem strange to you! For example, we force to pass a non-null Title in the constructor. &lt;/p&gt;

&lt;p&gt;However, the developer may then set the Title property to null without any control. This is because the example code above just focuses on the constructor.&lt;/p&gt;

&lt;p&gt;If we declare all the properties with public setters (like the example Issue class above), we can't force validity and integrity of the entity in its lifecycle. &lt;/p&gt;

&lt;p&gt;So: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use private setter for a property when you need to perform any logic while setting that property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deﬁne public methods to manipulate such properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Methods to change the properties in a controlled&lt;br&gt;
way&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ENGum2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqx5uh9qoez7795n2r7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENGum2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqx5uh9qoez7795n2r7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RepositoryId setter made private and there is no way to change it after creating an Issue because this is what we want in this domain: An issue can't be moved to another repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Text and AssignedUserId has public setters since there is no restriction on them. They can be null or any other value. We think it is unnecessary to deﬁne separate methods to set them. If we need later, we can add methods and make the setters private. Breaking changes are not problem in the domain layer since the domain layer is an internal project, it is not exposed to clients. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IsClosed and IssueCloseReason are pair properties. Deﬁned Close and ReOpen methods to change them together. In this way, we prevent to close an issue without any reason.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#business-logic-amp-exceptions-in-the-entities"&gt;
  &lt;/a&gt;
  Business Logic &amp;amp; Exceptions in the Entities
&lt;/h3&gt;

&lt;p&gt;When you implement validation and business logic in the entities, you frequently need to manage the exceptional cases. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create domain speciﬁc exceptions.&lt;/li&gt;
&lt;li&gt;Throw these exceptions in the entity methods when necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHmUGDfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/href6e8g79f6pvzu3peq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHmUGDfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/href6e8g79f6pvzu3peq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two business rules here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A locked issue can not be re-opened.&lt;/li&gt;
&lt;li&gt;You can not lock an open issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Issue class throws an IssueStateException in these cases to&lt;br&gt;
force the business rules:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yxUq92K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdegxez2djuuunoqqvp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yxUq92K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdegxez2djuuunoqqvp8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two potential problems of throwing such exceptions;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In case of such an exception, should the end user see the exception (error) message? If so, how do you localize the exception message? You can not use the localization system, because you can't inject and use IStringLocalizer in the entities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a web application or HTTP API, what HTTP Status Code should return to the client? &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ABP's Exception Handling system solves these and similar problems.&lt;/p&gt;

&lt;p&gt;Example: Throwing a business exception with code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYl38QFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz1yx09sln60a1zfjxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYl38QFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz1yx09sln60a1zfjxy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IssueStateException class inherits the BusinessException class. ABP returns 403 (forbidden) HTTP Status code by default (instead of 500 - Internal Server Error) for the exceptions derived from the BusinessException.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code is used as a key in the localization resource ﬁle&lt;br&gt;
to ﬁnd the localized message.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we can change the ReOpen method as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtFT28yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zvkco3jsmybjvshyigv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtFT28yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zvkco3jsmybjvshyigv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And add an entry to the localization resource like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiGtLyWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orwmdidiwtmdmglpfhqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiGtLyWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orwmdidiwtmdmglpfhqi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When you throw the exception, ABP automatically uses this localized message (based on the current language) to show to the end user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The exception code (IssueTracking:CanNotOpenLockedIssue here) is also sent to the client, so it may handle the error case programmatically.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>ddd</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:39:30 +0000</pubDate>
      <link>https://dev.to/gigogh/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2n7b</link>
      <guid>https://dev.to/gigogh/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2n7b</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>"INTERFACES - WHY USE THEM?" 😦 (my reply) </title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 13 Aug 2021 05:29:25 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/interfaces-why-use-them-my-reply-2jm2</link>
      <guid>https://dev.to/cleancodestudio/interfaces-why-use-them-my-reply-2jm2</guid>
      <description>&lt;center&gt;
&lt;h6&gt;
  &lt;a href="#would-you-reply"&gt;
  &lt;/a&gt;
  &lt;em&gt;Would &lt;strong&gt;you&lt;/strong&gt; reply?&lt;/em&gt; 👀
&lt;/h6&gt;


&lt;h2&gt;
  &lt;a href="#interfaces-why-use-them"&gt;
  &lt;/a&gt;
  "INTERFACES - WHY USE THEM?"
&lt;/h2&gt;
&lt;h6&gt;
  &lt;a href="#my-reply-to-a-provoking-youtube-comment"&gt;
  &lt;/a&gt;
  (my 🔥 reply) to a PROVOKING [YouTube] comment 😦
&lt;/h6&gt;


&lt;/center&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;As many of you already know, Clean Code Studio is also a YouTube channel. &lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Comments, ever get 'em?&lt;/strong&gt; ------&amp;gt; &lt;em&gt;Tons!&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now and again a comment will come in that &lt;strong&gt;PROVOKES&lt;/strong&gt; the living &lt;strong&gt;HELL&lt;/strong&gt; out of me. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You know which one I mean?&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;A 🔥 under your a** is lit, your inner Shakespearian rockets from the abyss of your sub-conscience, and &lt;strong&gt;WHAMMMYY!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you know it, you've written the greatest monologue since Hamlet's &lt;strong&gt;"To Be Or Not To Be"&lt;/strong&gt; spiel.  &lt;/p&gt;




&lt;p&gt;A while back, one of those &lt;small&gt;&lt;strong&gt;provoking&lt;/strong&gt;&lt;/small&gt; comments came up.&lt;/p&gt;

&lt;p&gt;Check it...I've posted the comment and my Shakespearian monologue of a response below.&lt;/p&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-comment-that-provoked-my-inner-shakespeare"&gt;
  &lt;/a&gt;
  The Comment (That Provoked My Inner Shakespeare)
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The code after you added the interface was far longer, far more cluttered and far more difficult to follow than it was without the interface. Nothing in this example makes me want to use interfaces. I still don't see any reason to use them at all."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;(Comment made on: &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interfaces - Object Oriented PHP - Lesson 5&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;h3&gt;
  &lt;a href="#my-reply-to-why-use-interfaces"&gt;
  &lt;/a&gt;
  My Reply [To why use interfaces]
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#interfaces-why-use-them-a-shakespearian-monologue"&gt;
  &lt;/a&gt;
  ("Interfaces, why use them?" - A Shakespearian Monologue)
&lt;/h6&gt;



&lt;blockquote&gt;
&lt;p&gt;That's a &lt;strong&gt;verrryy&lt;/strong&gt; reasonable perspective that I respect quite a bit.&lt;/p&gt;

&lt;p&gt;Given this series wasn't an extremely in depth overview covering the reasons behind &lt;strong&gt;WHY&lt;/strong&gt; &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; are useful for implementing &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt; -- I highly recommend you checkout our &lt;a href="https://www.cleancode.studio/series/solid-principles"&gt;SOLID principles series&lt;/a&gt; and specifically the lesson diving into the &lt;a href="https://www.cleancode.studio/series/solid-principles/episodes/2"&gt;Open Closed Principle&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Personally, the fact that you challenge adding seemingly needless code is awesome - in my opinion. I'm with you, and whenever possible, opt out of adding needless code if it isn't necessary.&lt;/p&gt;

&lt;p&gt;In the lessons offered through out this &lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;object oriented PHP&lt;/a&gt;, we're covering the very basics. &lt;/p&gt;

&lt;p&gt;We only cover &lt;strong&gt;HOW&lt;/strong&gt; to implement concepts like &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;OOP PHP series&lt;/a&gt; we also, very deliberately, avoid many of the &lt;strong&gt;WHY&lt;/strong&gt; questions behind using &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;object oriented&lt;/a&gt; concepts like &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a quick &lt;em&gt;"why &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;"&lt;/em&gt; example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-imagine-we-have-3-classes"&gt;
  &lt;/a&gt;
  1. Imagine we have 3 &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;classes&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HtmlFile&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-imagine-we-have-a-parse-function"&gt;
  &lt;/a&gt;
  2. Imagine we have a parse function
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CsvFile'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// parse csv file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'JsonFile'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse json file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HtmlFile'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// parse html file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
php&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Any time  we add a &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;new file type&lt;/a&gt;, we have to find our parse function and add a new else if conditional to parse the given file type.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#3-imagine-we-have-a-file-interfaces"&gt;
  &lt;/a&gt;
  3. Imagine we have a file &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="nc"&gt;HtmlFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Currently Everything breaks because each of our classes implements a given &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interface&lt;/a&gt;&lt;br&gt;
 but none actually has the parse method. &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interfaces contractually obligate&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;Classes&lt;/a&gt; to implement methods.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#4-correctly-implement-file-interface"&gt;
  &lt;/a&gt;
  4. Correctly Implement File Interface
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="c1"&gt;// parse csv file &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// parse json file&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HtmlFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// parse html file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://cleancode.studio/refactoring"&gt;Refactor&lt;/a&gt; the parse method
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Each class implements the file &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interface&lt;/a&gt;. This forces each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; to Have a parse method. The parse(File $file) function accepts an &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;instance&lt;/a&gt; that implements the _File Interface&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means we know that the &lt;code&gt;$file&lt;/code&gt; passed in can &lt;code&gt;parse()&lt;/code&gt; even if we don't know exactly how it will parse. &lt;/p&gt;

&lt;p&gt;Each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; implementing the File &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interface&lt;/a&gt; is contractually bound to implement their own parse method. Each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; implement the File &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interface&lt;/a&gt; defines how it will parse itself. &lt;/p&gt;

&lt;p&gt;In the short term, this does lead to more verbose code. In fact, if you do only have two or three file types and absolutely never need to add any more file types I would recommend sticking with &lt;a href="https://cleancode.studio/refactoring"&gt;else if conditionals&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That being said, if you are unsure how many file types there will be in the future then I recommend using &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That way, you only have to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;create a new class&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;implement the given interface&lt;/a&gt;. You don't have to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;add a new class&lt;/a&gt; (SqlFile Class for example) and then update the parse function with another &lt;a href="https://cleancode.studio/refactoring"&gt;if else conditional&lt;/a&gt; because you &lt;a href="https://cleancode.studio/series/solid-principles/episodes/5"&gt;removed a dependency from your code depending on an interface&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/design-patterns"&gt;Design principles in software&lt;/a&gt; are recommendations for best practices, but by no means are they absolutes for designing the &lt;a href="https://cleancode.studio/clean-code"&gt;cleanest most simplified code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the short run, they usually add verbosity - it's up to you as the software engineer to decide if you need to plan for the long run and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;implement interfaces&lt;/a&gt; and specific &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt; that'll &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;use interfaces&lt;/a&gt; to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;force functions to be implemented&lt;/a&gt; or if this is the last time you'll ever need to &lt;a href="https://cleancode.studio/refactoring"&gt;change this code&lt;/a&gt; and &lt;a href="https://cleancode.studio/refactoring"&gt;if else conditionals&lt;/a&gt; are the &lt;a href="https://cleancode.studio/clean-code"&gt;simplest way to create your software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Context, attentive care, and intuition based on experience are by far more important than any &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The catch is understanding the &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;purpose behind interface&lt;/a&gt;, &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt;, and the &lt;a href="https://cleancode.studio/design-pattern"&gt;design principles&lt;/a&gt; they allow you to implement are necessary to learn if you truly want to &lt;a href="https://cleancode.studio/design-patterns"&gt;make the best decision based on the context of your problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;a href="https://ceancode.studio/series/solid-principles/4"&gt;interfaces are incredible&lt;/a&gt; sometimes they are not. Understanding how, why, and when they are valuable or inhibiting gives you the control to make the best decision based on the context of your software.&lt;/p&gt;

&lt;p&gt;Understanding &lt;a href="https://cleancode.studio/clean-code"&gt;visual simplicity&lt;/a&gt; vs. &lt;a href="https://cleancode.studio/design-patterns"&gt;longer term architecture requirements as well as design principles&lt;/a&gt; best fit to meet longer term architecture requirements gives you contextual understanding of your software.&lt;/p&gt;

&lt;p&gt;Contextual understanding along with intimate care and a love for simplifying - together - &lt;a href="https://cleancode.studio"&gt;make great software engineers and helps build world shifting applications&lt;/a&gt;.&lt;/p&gt;




&lt;center&gt;
&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
☕️ Code Tips&lt;br&gt;
☕️ Career Advice&lt;br&gt;
☕️ Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Clean Code 𝗡𝗲𝘄𝘀𝗹𝗲𝘁𝘁𝗲𝗿 👇, juicy dev tips...wanna join?&lt;/small&gt; 

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;





&lt;center&gt;

&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter!&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>php</category>
      <category>devjournal</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🚀20 Best CSS3 Library For Developers.</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:09:45 +0000</pubDate>
      <link>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</link>
      <guid>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Designing Hotel Management System With RADZEN Blazor Web Assembly Part 3 (Setup Of Security Infrastructure)</title>
      <author>Benjamin Fadina</author>
      <pubDate>Fri, 13 Aug 2021 05:03:09 +0000</pubDate>
      <link>https://dev.to/benjaminsqlserver/designing-hotel-management-system-with-radzen-blazor-web-assembly-part-3-setup-of-security-infrastructure-n58</link>
      <guid>https://dev.to/benjaminsqlserver/designing-hotel-management-system-with-radzen-blazor-web-assembly-part-3-setup-of-security-infrastructure-n58</guid>
      <description>&lt;p&gt;In this video, I show you how to set up the app's security infrastructure. I show you how to create roles and I create a user.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TmJagcFw744"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>radzen</category>
      <category>csharp</category>
      <category>blazor</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:17:28 +0000</pubDate>
      <link>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</link>
      <guid>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>10 VSCode Extension Every Front-end Developer should use</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:10:09 +0000</pubDate>
      <link>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</link>
      <guid>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</guid>
      <description>&lt;p&gt; &lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. &lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make VSCode Lighter</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:09:16 +0000</pubDate>
      <link>https://dev.to/gigogh/make-vscode-lighter-1fco</link>
      <guid>https://dev.to/gigogh/make-vscode-lighter-1fco</guid>
      <description>&lt;p&gt;VSCode is a really great Code Editor rather say nearly an IDE or better than that. But this costs a great amount of RAM and CPU in bigger projects. That's not all related VSCode but to most of its extensions. VSCode's extensions are good, by far best. But these are written for Nodejs with JS so unsurprisingly these take a handy amount of resource but efficiently. And people unknowingly accuse vscode for this. Though most of the time it doesn't cause that much of issue. But in bigger projects this tiny problem gets bigger as most of the people don't have a AMD Thread Ripper, Samsung NVMe SSD with 16GB RAM &amp;amp; a RTX3090&lt;/p&gt;
&lt;p&gt;Let's find out the reasons of this high resource usage &amp;amp; fix 'em&lt;/p&gt;

&lt;p&gt;&lt;span&gt;READ More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/make-vscode-lighter/"&gt;Make Vs Code Lighter&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>Implementing a web app using Azure Static Web Apps.</title>
      <author>Rafael Alexander Reyes Perez</author>
      <pubDate>Fri, 13 Aug 2021 03:11:12 +0000</pubDate>
      <link>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</link>
      <guid>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</guid>
      <description>&lt;p&gt;Video: &lt;a href="https://lnkd.in/dwvHBKTf"&gt;https://lnkd.in/dwvHBKTf&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-azure-website-github-deploy-learning"&gt;
  &lt;/a&gt;
  microsoft #azure #website #github #deploy #learning
&lt;/h1&gt;

</description>
      <category>azure</category>
      <category>github</category>
      <category>website</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 18</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 13 Aug 2021 02:48:14 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will validate the Password&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8o65ZiRN1ow"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>August 13th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 13 Aug 2021 02:42:27 +0000</pubDate>
      <link>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</link>
      <guid>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
